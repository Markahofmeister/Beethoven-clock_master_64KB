
Beethoven-clock_master_64KB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094bc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08009578  08009578  0000a578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800966c  0800966c  0000b098  2**0
                  CONTENTS
  4 .ARM          00000000  0800966c  0800966c  0000b098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800966c  0800966c  0000b098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800966c  0800966c  0000a66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009670  08009670  0000a670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08009674  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  20000098  0800970c  0000b098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  0800970c  0000b5f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ffa  00000000  00000000  0000b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a7  00000000  00000000  000230ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00026768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e3  00000000  00000000  00027e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194f5  00000000  00000000  0002903b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c691  00000000  00000000  00042530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c64b  00000000  00000000  0005ebc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb20c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000536c  00000000  00000000  000fb250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001005bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000098 	.word	0x20000098
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009560 	.word	0x08009560

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000009c 	.word	0x2000009c
 8000100:	08009560 	.word	0x08009560

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-low hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2200      	movs	r2, #0
 800025a:	0019      	movs	r1, r3
 800025c:	f004 f91b 	bl	8004496 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2201      	movs	r2, #1
 800026c:	0019      	movs	r1, r3
 800026e:	f004 f912 	bl	8004496 <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f008 f972 	bl	8008560 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f008 f921 	bl	80084c8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f004 f925 	bl	80046a8 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f004 fa39 	bl	80048fc <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	08009578 	.word	0x08009578

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f004 f8e7 	bl	80046a8 <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f004 f8c1 	bl	80046a8 <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f004 f9d5 	bl	80048fc <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	0800957c 	.word	0x0800957c

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f004 f87d 	bl	80046a8 <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f004 f991 	bl	80048fc <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	08009580 	.word	0x08009580

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f004 f82d 	bl	80046a8 <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f004 f941 	bl	80048fc <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	08009584 	.word	0x08009584
 8000700:	0800958c 	.word	0x0800958c

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f003 ffab 	bl	80046a8 <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f004 f8bf 	bl	80048fc <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f003 ff4c 	bl	80046a8 <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f003 ff2b 	bl	80046a8 <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f004 f83f 	bl	80048fc <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	08009584 	.word	0x08009584
 8000894:	0800958c 	.word	0x0800958c

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f003 fed1 	bl	80046a8 <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f003 feaf 	bl	80046a8 <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f003 ffcc 	bl	80048fc <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	08009594 	.word	0x08009594
 8000978:	08009584 	.word	0x08009584

0800097c <NAU8315YG_Init>:

#ifndef NAU8315YG_H_
#include "../Inc/NAU8315YG.h"
#endif

void NAU8315YG_Init(NAU8315YG *nau, I2S_HandleTypeDef *hi2s, GPIO_TypeDef *enablePort, uint32_t enablePin) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	603b      	str	r3, [r7, #0]

	nau->hi2s = hi2s;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	601a      	str	r2, [r3, #0]

	nau->enablePort = enablePort;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	605a      	str	r2, [r3, #4]
	nau->enablePin = enablePin;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	609a      	str	r2, [r3, #8]

	NAU8315YG_AmpDisable(nau);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f818 	bl	80009d4 <NAU8315YG_AmpDisable>

}
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b004      	add	sp, #16
 80009aa:	bd80      	pop	{r7, pc}

080009ac <NAU8315YG_AmpEnable>:

void NAU8315YG_AmpEnable(NAU8315YG *nau) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

	// Set enable pin high
	HAL_GPIO_WritePin(nau->enablePort, nau->enablePin, GPIO_PIN_SET);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6858      	ldr	r0, [r3, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	2201      	movs	r2, #1
 80009c0:	0019      	movs	r1, r3
 80009c2:	f003 fd68 	bl	8004496 <HAL_GPIO_WritePin>

	nau->ampEnableFlag = 1;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2201      	movs	r2, #1
 80009ca:	731a      	strb	r2, [r3, #12]

}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <NAU8315YG_AmpDisable>:


void NAU8315YG_AmpDisable(NAU8315YG *nau) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

	// Set enable pin high
	HAL_GPIO_WritePin(nau->enablePort, nau->enablePin, GPIO_PIN_RESET);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6858      	ldr	r0, [r3, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	2200      	movs	r2, #0
 80009e8:	0019      	movs	r1, r3
 80009ea:	f003 fd54 	bl	8004496 <HAL_GPIO_WritePin>

	nau->ampEnableFlag = 0;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	731a      	strb	r2, [r3, #12]

}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b002      	add	sp, #8
 80009fa:	bd80      	pop	{r7, pc}

080009fc <W25Q_Init>:
#endif


uint8_t W25Q_Init(W25Q *wq, GPIO_TypeDef *nCSPort, GPIO_TypeDef *nWPPort, GPIO_TypeDef *nHOLDPort,
					uint32_t nCSPin, uint32_t nWPPin, uint32_t nHOLDPin, SPI_HandleTypeDef *hspi,
					uint8_t devID, uint8_t isQuadChip, uint8_t driveStrength) {
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
 8000a08:	603b      	str	r3, [r7, #0]

	// Map struct GPIO Ports & Pins to passed parameters
	wq->nCSPort = nCSPort;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	601a      	str	r2, [r3, #0]
	wq->nWPPort = nWPPort;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	605a      	str	r2, [r3, #4]
	wq->nHOLDPort = nHOLDPort;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	609a      	str	r2, [r3, #8]

	wq->nCSPin = nCSPin;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a20:	60da      	str	r2, [r3, #12]
	wq->nWPPin = nWPPin;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a26:	611a      	str	r2, [r3, #16]
	wq->nHOLDPin = nHOLDPin;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a2c:	615a      	str	r2, [r3, #20]

	wq->hspi = hspi;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a32:	619a      	str	r2, [r3, #24]

	wq->quadEnable = isQuadChip;		// Default state depends on PN of chip.
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	223c      	movs	r2, #60	@ 0x3c
 8000a38:	2108      	movs	r1, #8
 8000a3a:	1852      	adds	r2, r2, r1
 8000a3c:	19d2      	adds	r2, r2, r7
 8000a3e:	2125      	movs	r1, #37	@ 0x25
 8000a40:	7812      	ldrb	r2, [r2, #0]
 8000a42:	545a      	strb	r2, [r3, r1]
	wq->writeEnable = 0;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2223      	movs	r2, #35	@ 0x23
 8000a48:	2100      	movs	r1, #0
 8000a4a:	5499      	strb	r1, [r3, r2]

	// Set CS pin high
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	2201      	movs	r2, #1
 8000a58:	0019      	movs	r1, r3
 8000a5a:	f003 fd1c 	bl	8004496 <HAL_GPIO_WritePin>

	// Set hold pin high (Disable)
	HAL_GPIO_WritePin(wq->nHOLDPort, wq->nHOLDPin, GPIO_PIN_SET);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6898      	ldr	r0, [r3, #8]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	2201      	movs	r2, #1
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	f003 fd13 	bl	8004496 <HAL_GPIO_WritePin>

	// Set WP pin high (disable)
	HAL_GPIO_WritePin(wq->nWPPort, wq->nWPPin, GPIO_PIN_SET);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6858      	ldr	r0, [r3, #4]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	f003 fd0a 	bl	8004496 <HAL_GPIO_WritePin>

	// HAL status handle used to indicate error messages
	HAL_StatusTypeDef halRet = HAL_OK;
 8000a82:	2116      	movs	r1, #22
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]

	uint8_t returnInc = 1;			// Integer error code return, incremented after successful things.
 8000a8a:	2617      	movs	r6, #23
 8000a8c:	19bb      	adds	r3, r7, r6
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]

	uint8_t errorsEnabled = 1;		// Use for debugging
 8000a92:	2315      	movs	r3, #21
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]

	// Release from power down mode
	halRet = W25Q_ReleasePowerDown(wq);
 8000a9a:	000d      	movs	r5, r1
 8000a9c:	187c      	adds	r4, r7, r1
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f000 f90b 	bl	8000cbc <W25Q_ReleasePowerDown>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000aaa:	197b      	adds	r3, r7, r5
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d007      	beq.n	8000ac2 <W25Q_Init+0xc6>
 8000ab2:	2315      	movs	r3, #21
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d002      	beq.n	8000ac2 <W25Q_Init+0xc6>
		return returnInc;
 8000abc:	19bb      	adds	r3, r7, r6
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	e0f8      	b.n	8000cb4 <W25Q_Init+0x2b8>
	else
		returnInc++;
 8000ac2:	2517      	movs	r5, #23
 8000ac4:	197b      	adds	r3, r7, r5
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	197b      	adds	r3, r7, r5
 8000aca:	3201      	adds	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]

	// Reset Device
	halRet = W25Q_ChipReset(wq);
 8000ace:	2616      	movs	r6, #22
 8000ad0:	19bc      	adds	r4, r7, r6
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 fc67 	bl	80013a8 <W25Q_ChipReset>
 8000ada:	0003      	movs	r3, r0
 8000adc:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000ade:	19bb      	adds	r3, r7, r6
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d007      	beq.n	8000af6 <W25Q_Init+0xfa>
 8000ae6:	2315      	movs	r3, #21
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <W25Q_Init+0xfa>
		return returnInc;
 8000af0:	197b      	adds	r3, r7, r5
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	e0de      	b.n	8000cb4 <W25Q_Init+0x2b8>
	else
		returnInc++;
 8000af6:	2517      	movs	r5, #23
 8000af8:	197b      	adds	r3, r7, r5
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	197b      	adds	r3, r7, r5
 8000afe:	3201      	adds	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]

	// Read initial Status Registers
	halRet = W25Q_ReadStatusRegs(wq);
 8000b02:	2616      	movs	r6, #22
 8000b04:	19bc      	adds	r4, r7, r6
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 fb11 	bl	8001130 <W25Q_ReadStatusRegs>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b12:	19bb      	adds	r3, r7, r6
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d007      	beq.n	8000b2a <W25Q_Init+0x12e>
 8000b1a:	2315      	movs	r3, #21
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <W25Q_Init+0x12e>
		return returnInc;
 8000b24:	197b      	adds	r3, r7, r5
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	e0c4      	b.n	8000cb4 <W25Q_Init+0x2b8>
	else
		returnInc++;
 8000b2a:	2517      	movs	r5, #23
 8000b2c:	197b      	adds	r3, r7, r5
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	197b      	adds	r3, r7, r5
 8000b32:	3201      	adds	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]

	// Increase driver strength?
	halRet = W25Q_SetDriverStrength(wq, driveStrength);
 8000b36:	2616      	movs	r6, #22
 8000b38:	19bc      	adds	r4, r7, r6
 8000b3a:	2340      	movs	r3, #64	@ 0x40
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	189b      	adds	r3, r3, r2
 8000b40:	19db      	adds	r3, r3, r7
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	0011      	movs	r1, r2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 fcef 	bl	800152c <W25Q_SetDriverStrength>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b52:	19bb      	adds	r3, r7, r6
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d007      	beq.n	8000b6a <W25Q_Init+0x16e>
 8000b5a:	2315      	movs	r3, #21
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d002      	beq.n	8000b6a <W25Q_Init+0x16e>
		return returnInc;
 8000b64:	197b      	adds	r3, r7, r5
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	e0a4      	b.n	8000cb4 <W25Q_Init+0x2b8>
	else
		returnInc++;
 8000b6a:	2517      	movs	r5, #23
 8000b6c:	197b      	adds	r3, r7, r5
 8000b6e:	781a      	ldrb	r2, [r3, #0]
 8000b70:	197b      	adds	r3, r7, r5
 8000b72:	3201      	adds	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]

	// Not doable on IQ chips - they seem to be OTP
	if(wq->quadEnable) {
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	2225      	movs	r2, #37	@ 0x25
 8000b7a:	5c9b      	ldrb	r3, [r3, r2]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d01a      	beq.n	8000bb6 <W25Q_Init+0x1ba>
		halRet = W25Q_QuadEnable(wq, 0);
 8000b80:	2616      	movs	r6, #22
 8000b82:	19bc      	adds	r4, r7, r6
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2100      	movs	r1, #0
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 fc77 	bl	800147c <W25Q_QuadEnable>
 8000b8e:	0003      	movs	r3, r0
 8000b90:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK && errorsEnabled)
 8000b92:	19bb      	adds	r3, r7, r6
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d007      	beq.n	8000baa <W25Q_Init+0x1ae>
 8000b9a:	2315      	movs	r3, #21
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <W25Q_Init+0x1ae>
			return returnInc;
 8000ba4:	197b      	adds	r3, r7, r5
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	e084      	b.n	8000cb4 <W25Q_Init+0x2b8>
		else
			returnInc++;
 8000baa:	2117      	movs	r1, #23
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	3201      	adds	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
	}


	// Get + Store IDs
	halRet = W25Q_GetIDs(wq, devID);
 8000bb6:	2516      	movs	r5, #22
 8000bb8:	197c      	adds	r4, r7, r5
 8000bba:	2338      	movs	r3, #56	@ 0x38
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	189b      	adds	r3, r3, r2
 8000bc0:	19db      	adds	r3, r3, r7
 8000bc2:	781a      	ldrb	r2, [r3, #0]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 f8bd 	bl	8000d48 <W25Q_GetIDs>
 8000bce:	0003      	movs	r3, r0
 8000bd0:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000bd2:	197b      	adds	r3, r7, r5
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d008      	beq.n	8000bec <W25Q_Init+0x1f0>
 8000bda:	2315      	movs	r3, #21
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d003      	beq.n	8000bec <W25Q_Init+0x1f0>
		return returnInc;
 8000be4:	2317      	movs	r3, #23
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	e063      	b.n	8000cb4 <W25Q_Init+0x2b8>
	else
		returnInc++;
 8000bec:	2517      	movs	r5, #23
 8000bee:	197b      	adds	r3, r7, r5
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	197b      	adds	r3, r7, r5
 8000bf4:	3201      	adds	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]

	// Get + Store Status Register Contents
	halRet = W25Q_ReadStatusRegs(wq);
 8000bf8:	2616      	movs	r6, #22
 8000bfa:	19bc      	adds	r4, r7, r6
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 fa96 	bl	8001130 <W25Q_ReadStatusRegs>
 8000c04:	0003      	movs	r3, r0
 8000c06:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000c08:	19bb      	adds	r3, r7, r6
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d007      	beq.n	8000c20 <W25Q_Init+0x224>
 8000c10:	2315      	movs	r3, #21
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <W25Q_Init+0x224>
		return returnInc;
 8000c1a:	197b      	adds	r3, r7, r5
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	e049      	b.n	8000cb4 <W25Q_Init+0x2b8>
	else
		returnInc++;
 8000c20:	2517      	movs	r5, #23
 8000c22:	197b      	adds	r3, r7, r5
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	197b      	adds	r3, r7, r5
 8000c28:	3201      	adds	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]

	// Disable Write Access to Memory
	if(wq->writeEnable != 0) {
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2223      	movs	r2, #35	@ 0x23
 8000c30:	5c9b      	ldrb	r3, [r3, r2]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d019      	beq.n	8000c6a <W25Q_Init+0x26e>
		halRet = W25Q_DisableWrite(wq);
 8000c36:	2616      	movs	r6, #22
 8000c38:	19bc      	adds	r4, r7, r6
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f000 f986 	bl	8000f4e <W25Q_DisableWrite>
 8000c42:	0003      	movs	r3, r0
 8000c44:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK && errorsEnabled)
 8000c46:	19bb      	adds	r3, r7, r6
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d007      	beq.n	8000c5e <W25Q_Init+0x262>
 8000c4e:	2315      	movs	r3, #21
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d002      	beq.n	8000c5e <W25Q_Init+0x262>
			return returnInc;
 8000c58:	197b      	adds	r3, r7, r5
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	e02a      	b.n	8000cb4 <W25Q_Init+0x2b8>
		else
			returnInc++;
 8000c5e:	2117      	movs	r1, #23
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	781a      	ldrb	r2, [r3, #0]
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	3201      	adds	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
	}

	// Get + Store Status Register Contents
	halRet = W25Q_ReadStatusRegs(wq);
 8000c6a:	2516      	movs	r5, #22
 8000c6c:	197c      	adds	r4, r7, r5
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	0018      	movs	r0, r3
 8000c72:	f000 fa5d 	bl	8001130 <W25Q_ReadStatusRegs>
 8000c76:	0003      	movs	r3, r0
 8000c78:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000c7a:	197b      	adds	r3, r7, r5
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d008      	beq.n	8000c94 <W25Q_Init+0x298>
 8000c82:	2315      	movs	r3, #21
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <W25Q_Init+0x298>
		return returnInc;
 8000c8c:	2317      	movs	r3, #23
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	e00f      	b.n	8000cb4 <W25Q_Init+0x2b8>
	else
		returnInc++;
 8000c94:	2117      	movs	r1, #23
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	3201      	adds	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]

	// Set WP pin low (Enable)
	HAL_GPIO_WritePin(wq->nWPPort, wq->nWPPin, GPIO_PIN_RESET);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	6858      	ldr	r0, [r3, #4]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	2200      	movs	r2, #0
 8000cac:	0019      	movs	r1, r3
 8000cae:	f003 fbf2 	bl	8004496 <HAL_GPIO_WritePin>

	return 0;
 8000cb2:	2300      	movs	r3, #0

}
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b007      	add	sp, #28
 8000cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cbc <W25Q_ReleasePowerDown>:

HAL_StatusTypeDef W25Q_ReleasePowerDown(W25Q *wq) {
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000cc4:	240e      	movs	r4, #14
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]

	// TX release power-down instruction
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6818      	ldr	r0, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	0019      	movs	r1, r3
 8000cda:	f003 fbdc 	bl	8004496 <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_READ_RELEASE_ID}, 1, HAL_MAX_DELAY);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6998      	ldr	r0, [r3, #24]
 8000ce2:	210c      	movs	r1, #12
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	22ab      	movs	r2, #171	@ 0xab
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	193c      	adds	r4, r7, r4
 8000cec:	2301      	movs	r3, #1
 8000cee:	425b      	negs	r3, r3
 8000cf0:	1879      	adds	r1, r7, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f006 fd28 	bl	8007748 <HAL_SPI_Transmit>
 8000cf8:	0003      	movs	r3, r0
 8000cfa:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6818      	ldr	r0, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	2201      	movs	r2, #1
 8000d08:	0019      	movs	r1, r3
 8000d0a:	f003 fbc4 	bl	8004496 <HAL_GPIO_WritePin>

	// Delay for at least 3 us
	for(uint8_t i = 0; i < 15; i++) {
 8000d0e:	230f      	movs	r3, #15
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	e006      	b.n	8000d26 <W25Q_ReleasePowerDown+0x6a>
		__NOP();
 8000d18:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < 15; i++) {
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	781a      	ldrb	r2, [r3, #0]
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	3201      	adds	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	230f      	movs	r3, #15
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b0e      	cmp	r3, #14
 8000d2e:	d9f3      	bls.n	8000d18 <W25Q_ReleasePowerDown+0x5c>
	}

	wq->powerUp = 1; 		// We have now successfully exited power-down state
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2224      	movs	r2, #36	@ 0x24
 8000d34:	2101      	movs	r1, #1
 8000d36:	5499      	strb	r1, [r3, r2]

	return halRet;
 8000d38:	230e      	movs	r3, #14
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	781b      	ldrb	r3, [r3, #0]

}
 8000d3e:	0018      	movs	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b005      	add	sp, #20
 8000d44:	bd90      	pop	{r4, r7, pc}
	...

08000d48 <W25Q_GetIDs>:

HAL_StatusTypeDef W25Q_GetIDs(W25Q *wq, uint8_t devID_passed) {
 8000d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4a:	b089      	sub	sp, #36	@ 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	000a      	movs	r2, r1
 8000d52:	1cfb      	adds	r3, r7, #3
 8000d54:	701a      	strb	r2, [r3, #0]


	HAL_StatusTypeDef halRet = HAL_OK;
 8000d56:	241f      	movs	r4, #31
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]

	/*
	 * Release power down + read device ID
	 */
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6818      	ldr	r0, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	2200      	movs	r2, #0
 8000d6a:	0019      	movs	r1, r3
 8000d6c:	f003 fb93 	bl	8004496 <HAL_GPIO_WritePin>
		// TX return device ID instruction
		halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[4]){CMD_READ_RELEASE_ID, 0x00, 0x00, 0x00}, 4, HAL_MAX_DELAY);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6998      	ldr	r0, [r3, #24]
 8000d74:	2118      	movs	r1, #24
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	22ab      	movs	r2, #171	@ 0xab
 8000d7a:	701a      	strb	r2, [r3, #0]
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2200      	movs	r2, #0
 8000d80:	705a      	strb	r2, [r3, #1]
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2200      	movs	r2, #0
 8000d86:	709a      	strb	r2, [r3, #2]
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	70da      	strb	r2, [r3, #3]
 8000d8e:	0025      	movs	r5, r4
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	2301      	movs	r3, #1
 8000d94:	425b      	negs	r3, r3
 8000d96:	1879      	adds	r1, r7, r1
 8000d98:	2204      	movs	r2, #4
 8000d9a:	f006 fcd5 	bl	8007748 <HAL_SPI_Transmit>
 8000d9e:	0003      	movs	r3, r0
 8000da0:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 8000da2:	197b      	adds	r3, r7, r5
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00b      	beq.n	8000dc2 <W25Q_GetIDs+0x7a>
			HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	2201      	movs	r2, #1
 8000db6:	0019      	movs	r1, r3
 8000db8:	f003 fb6d 	bl	8004496 <HAL_GPIO_WritePin>
			return halRet;
 8000dbc:	197b      	adds	r3, r7, r5
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	e07c      	b.n	8000ebc <W25Q_GetIDs+0x174>
		}

		// RX device ID into struct variable
		uint8_t devIDRet[1] = {0x00};
 8000dc2:	2514      	movs	r5, #20
 8000dc4:	197b      	adds	r3, r7, r5
 8000dc6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ec4 <W25Q_GetIDs+0x17c>)
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	701a      	strb	r2, [r3, #0]
		halRet = HAL_SPI_Receive(wq->hspi, devIDRet, 1, HAL_MAX_DELAY);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6998      	ldr	r0, [r3, #24]
 8000dd0:	261f      	movs	r6, #31
 8000dd2:	19bc      	adds	r4, r7, r6
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	425b      	negs	r3, r3
 8000dd8:	1979      	adds	r1, r7, r5
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f006 fe14 	bl	8007a08 <HAL_SPI_Receive>
 8000de0:	0003      	movs	r3, r0
 8000de2:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	2201      	movs	r2, #1
 8000df0:	0019      	movs	r1, r3
 8000df2:	f003 fb50 	bl	8004496 <HAL_GPIO_WritePin>
		wq->devID = devIDRet[0];
 8000df6:	197b      	adds	r3, r7, r5
 8000df8:	781a      	ldrb	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	775a      	strb	r2, [r3, #29]


		 // Check to ensure that received device ID is equal to that passed by the user in the init function
		if((halRet != HAL_OK) || (wq->devID != devID_passed))
 8000dfe:	19bb      	adds	r3, r7, r6
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d105      	bne.n	8000e12 <W25Q_GetIDs+0xca>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	7f5b      	ldrb	r3, [r3, #29]
 8000e0a:	1cfa      	adds	r2, r7, #3
 8000e0c:	7812      	ldrb	r2, [r2, #0]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d001      	beq.n	8000e16 <W25Q_GetIDs+0xce>
			return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e052      	b.n	8000ebc <W25Q_GetIDs+0x174>

	/*
	 * Read and check MFR ID
	 */
		// TX read mfr + device ID command
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6818      	ldr	r0, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	2200      	movs	r2, #0
 8000e22:	0019      	movs	r1, r3
 8000e24:	f003 fb37 	bl	8004496 <HAL_GPIO_WritePin>
		halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[4]){CMD_READ_MFR_ID, 0x00, 0x00, 0x00}, 4, HAL_MAX_DELAY);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6998      	ldr	r0, [r3, #24]
 8000e2c:	2110      	movs	r1, #16
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2290      	movs	r2, #144	@ 0x90
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2200      	movs	r2, #0
 8000e38:	705a      	strb	r2, [r3, #1]
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	709a      	strb	r2, [r3, #2]
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2200      	movs	r2, #0
 8000e44:	70da      	strb	r2, [r3, #3]
 8000e46:	251f      	movs	r5, #31
 8000e48:	197c      	adds	r4, r7, r5
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	425b      	negs	r3, r3
 8000e4e:	1879      	adds	r1, r7, r1
 8000e50:	2204      	movs	r2, #4
 8000e52:	f006 fc79 	bl	8007748 <HAL_SPI_Transmit>
 8000e56:	0003      	movs	r3, r0
 8000e58:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000e5a:	197b      	adds	r3, r7, r5
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d002      	beq.n	8000e68 <W25Q_GetIDs+0x120>
			return halRet;
 8000e62:	197b      	adds	r3, r7, r5
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	e029      	b.n	8000ebc <W25Q_GetIDs+0x174>
		}



		// RX device and mfr ID, store in struct variable
		uint8_t retIDs[2] = {0x00, 0x00};
 8000e68:	250c      	movs	r5, #12
 8000e6a:	197b      	adds	r3, r7, r5
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	801a      	strh	r2, [r3, #0]
		halRet = HAL_SPI_Receive(wq->hspi, retIDs, 2, HAL_MAX_DELAY);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6998      	ldr	r0, [r3, #24]
 8000e74:	261f      	movs	r6, #31
 8000e76:	19bc      	adds	r4, r7, r6
 8000e78:	2301      	movs	r3, #1
 8000e7a:	425b      	negs	r3, r3
 8000e7c:	1979      	adds	r1, r7, r5
 8000e7e:	2202      	movs	r2, #2
 8000e80:	f006 fdc2 	bl	8007a08 <HAL_SPI_Receive>
 8000e84:	0003      	movs	r3, r0
 8000e86:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6818      	ldr	r0, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	2201      	movs	r2, #1
 8000e94:	0019      	movs	r1, r3
 8000e96:	f003 fafe 	bl	8004496 <HAL_GPIO_WritePin>
		wq->mfrID = retIDs[0];
 8000e9a:	197b      	adds	r3, r7, r5
 8000e9c:	781a      	ldrb	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	771a      	strb	r2, [r3, #28]


		// Check to ensure that received mfr ID is correct.
		if((halRet != HAL_OK) || (wq->mfrID != 0xEF))
 8000ea2:	19bb      	adds	r3, r7, r6
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d103      	bne.n	8000eb2 <W25Q_GetIDs+0x16a>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7f1b      	ldrb	r3, [r3, #28]
 8000eae:	2bef      	cmp	r3, #239	@ 0xef
 8000eb0:	d001      	beq.n	8000eb6 <W25Q_GetIDs+0x16e>
			return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e002      	b.n	8000ebc <W25Q_GetIDs+0x174>

	/*
	 * Leaving out for now: Read JEDEC ID
	 */

		return halRet;
 8000eb6:	231f      	movs	r3, #31
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	781b      	ldrb	r3, [r3, #0]
}
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b009      	add	sp, #36	@ 0x24
 8000ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ec4:	0800959c 	.word	0x0800959c

08000ec8 <W25Q_EnableWrite>:

HAL_StatusTypeDef W25Q_EnableWrite(W25Q *wq) {
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000ed0:	250f      	movs	r5, #15
 8000ed2:	197b      	adds	r3, r7, r5
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]

	// TX write enable command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6818      	ldr	r0, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	0019      	movs	r1, r3
 8000ee6:	f003 fad6 	bl	8004496 <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_WRITE_ENABLE}, 1, HAL_MAX_DELAY);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6998      	ldr	r0, [r3, #24]
 8000eee:	210c      	movs	r1, #12
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2206      	movs	r2, #6
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	197c      	adds	r4, r7, r5
 8000ef8:	2301      	movs	r3, #1
 8000efa:	425b      	negs	r3, r3
 8000efc:	1879      	adds	r1, r7, r1
 8000efe:	2201      	movs	r2, #1
 8000f00:	f006 fc22 	bl	8007748 <HAL_SPI_Transmit>
 8000f04:	0003      	movs	r3, r0
 8000f06:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	2201      	movs	r2, #1
 8000f14:	0019      	movs	r1, r3
 8000f16:	f003 fabe 	bl	8004496 <HAL_GPIO_WritePin>

	if(halRet != HAL_OK)
 8000f1a:	197b      	adds	r3, r7, r5
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <W25Q_EnableWrite+0x60>
		return halRet;
 8000f22:	197b      	adds	r3, r7, r5
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	e00e      	b.n	8000f46 <W25Q_EnableWrite+0x7e>

	// Read back written value and confirm
	W25Q_ReadStatusReg(wq, 1);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f000 f851 	bl	8000fd4 <W25Q_ReadStatusReg>

	// Bit 1 of status register 1 should now be 1
	if(wq->writeEnable != 1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2223      	movs	r2, #35	@ 0x23
 8000f36:	5c9b      	ldrb	r3, [r3, r2]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d001      	beq.n	8000f40 <W25Q_EnableWrite+0x78>
		return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e002      	b.n	8000f46 <W25Q_EnableWrite+0x7e>

	return halRet;
 8000f40:	230f      	movs	r3, #15
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	781b      	ldrb	r3, [r3, #0]

}
 8000f46:	0018      	movs	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b004      	add	sp, #16
 8000f4c:	bdb0      	pop	{r4, r5, r7, pc}

08000f4e <W25Q_DisableWrite>:

HAL_StatusTypeDef W25Q_DisableWrite(W25Q *wq) {
 8000f4e:	b5b0      	push	{r4, r5, r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000f56:	250f      	movs	r5, #15
 8000f58:	197b      	adds	r3, r7, r5
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]

	// TX write disable command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	2200      	movs	r2, #0
 8000f6a:	0019      	movs	r1, r3
 8000f6c:	f003 fa93 	bl	8004496 <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_WRITE_DISABLE}, 1, HAL_MAX_DELAY);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6998      	ldr	r0, [r3, #24]
 8000f74:	210c      	movs	r1, #12
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	2204      	movs	r2, #4
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	197c      	adds	r4, r7, r5
 8000f7e:	2301      	movs	r3, #1
 8000f80:	425b      	negs	r3, r3
 8000f82:	1879      	adds	r1, r7, r1
 8000f84:	2201      	movs	r2, #1
 8000f86:	f006 fbdf 	bl	8007748 <HAL_SPI_Transmit>
 8000f8a:	0003      	movs	r3, r0
 8000f8c:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	2201      	movs	r2, #1
 8000f9a:	0019      	movs	r1, r3
 8000f9c:	f003 fa7b 	bl	8004496 <HAL_GPIO_WritePin>

	if(halRet != HAL_OK)
 8000fa0:	197b      	adds	r3, r7, r5
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d002      	beq.n	8000fae <W25Q_DisableWrite+0x60>
		return halRet;
 8000fa8:	197b      	adds	r3, r7, r5
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	e00e      	b.n	8000fcc <W25Q_DisableWrite+0x7e>

	// Read back written value and confirm
	W25Q_ReadStatusReg(wq, 1);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f000 f80e 	bl	8000fd4 <W25Q_ReadStatusReg>

	// Bit 1 of status register 1 should still be 0
	if(wq->writeEnable != 0)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2223      	movs	r2, #35	@ 0x23
 8000fbc:	5c9b      	ldrb	r3, [r3, r2]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <W25Q_DisableWrite+0x78>
		return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e002      	b.n	8000fcc <W25Q_DisableWrite+0x7e>

	return halRet;
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	781b      	ldrb	r3, [r3, #0]

}
 8000fcc:	0018      	movs	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b004      	add	sp, #16
 8000fd2:	bdb0      	pop	{r4, r5, r7, pc}

08000fd4 <W25Q_ReadStatusReg>:

HAL_StatusTypeDef W25Q_ReadStatusReg(W25Q *wq, uint8_t regNum) {
 8000fd4:	b5b0      	push	{r4, r5, r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	000a      	movs	r2, r1
 8000fde:	1cfb      	adds	r3, r7, #3
 8000fe0:	701a      	strb	r2, [r3, #0]

	// Check register number is valid
	if(regNum < 1 || regNum > 3) {
 8000fe2:	1cfb      	adds	r3, r7, #3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <W25Q_ReadStatusReg+0x1e>
 8000fea:	1cfb      	adds	r3, r7, #3
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d901      	bls.n	8000ff6 <W25Q_ReadStatusReg+0x22>
		return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e094      	b.n	8001120 <W25Q_ReadStatusReg+0x14c>
	}

	HAL_StatusTypeDef halRet = HAL_OK;
 8000ff6:	2417      	movs	r4, #23
 8000ff8:	193b      	adds	r3, r7, r4
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]

	// Array of commands for status registers 1-3
	uint8_t statRegCMDs[3] = {CMD_READ_STAT_1, CMD_READ_STAT_2, CMD_READ_STAT_3};
 8000ffe:	2514      	movs	r5, #20
 8001000:	197b      	adds	r3, r7, r5
 8001002:	4a49      	ldr	r2, [pc, #292]	@ (8001128 <W25Q_ReadStatusReg+0x154>)
 8001004:	8811      	ldrh	r1, [r2, #0]
 8001006:	8019      	strh	r1, [r3, #0]
 8001008:	7892      	ldrb	r2, [r2, #2]
 800100a:	709a      	strb	r2, [r3, #2]

	// TX read status register command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	b29b      	uxth	r3, r3
 8001016:	2200      	movs	r2, #0
 8001018:	0019      	movs	r1, r3
 800101a:	f003 fa3c 	bl	8004496 <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){statRegCMDs[regNum - 1]}, 1, HAL_MAX_DELAY);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6998      	ldr	r0, [r3, #24]
 8001022:	1cfb      	adds	r3, r7, #3
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	3b01      	subs	r3, #1
 8001028:	197a      	adds	r2, r7, r5
 800102a:	5cd2      	ldrb	r2, [r2, r3]
 800102c:	2110      	movs	r1, #16
 800102e:	187b      	adds	r3, r7, r1
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	0025      	movs	r5, r4
 8001034:	193c      	adds	r4, r7, r4
 8001036:	2301      	movs	r3, #1
 8001038:	425b      	negs	r3, r3
 800103a:	1879      	adds	r1, r7, r1
 800103c:	2201      	movs	r2, #1
 800103e:	f006 fb83 	bl	8007748 <HAL_SPI_Transmit>
 8001042:	0003      	movs	r3, r0
 8001044:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8001046:	197b      	adds	r3, r7, r5
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00b      	beq.n	8001066 <W25Q_ReadStatusReg+0x92>
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	b29b      	uxth	r3, r3
 8001058:	2201      	movs	r2, #1
 800105a:	0019      	movs	r1, r3
 800105c:	f003 fa1b 	bl	8004496 <HAL_GPIO_WritePin>
		return halRet;
 8001060:	197b      	adds	r3, r7, r5
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	e05c      	b.n	8001120 <W25Q_ReadStatusReg+0x14c>
	}

	// RX status register
	uint8_t statRegRet[1] = {0x00};
 8001066:	210c      	movs	r1, #12
 8001068:	187b      	adds	r3, r7, r1
 800106a:	4a30      	ldr	r2, [pc, #192]	@ (800112c <W25Q_ReadStatusReg+0x158>)
 800106c:	7812      	ldrb	r2, [r2, #0]
 800106e:	701a      	strb	r2, [r3, #0]
	halRet = HAL_SPI_Receive(wq->hspi, statRegRet, 1, HAL_MAX_DELAY);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6998      	ldr	r0, [r3, #24]
 8001074:	2317      	movs	r3, #23
 8001076:	18fc      	adds	r4, r7, r3
 8001078:	2301      	movs	r3, #1
 800107a:	425b      	negs	r3, r3
 800107c:	1879      	adds	r1, r7, r1
 800107e:	2201      	movs	r2, #1
 8001080:	f006 fcc2 	bl	8007a08 <HAL_SPI_Receive>
 8001084:	0003      	movs	r3, r0
 8001086:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	b29b      	uxth	r3, r3
 8001092:	2201      	movs	r2, #1
 8001094:	0019      	movs	r1, r3
 8001096:	f003 f9fe 	bl	8004496 <HAL_GPIO_WritePin>

	switch(regNum) {
 800109a:	1cfb      	adds	r3, r7, #3
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d029      	beq.n	80010f6 <W25Q_ReadStatusReg+0x122>
 80010a2:	dc3a      	bgt.n	800111a <W25Q_ReadStatusReg+0x146>
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d002      	beq.n	80010ae <W25Q_ReadStatusReg+0xda>
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d012      	beq.n	80010d2 <W25Q_ReadStatusReg+0xfe>
 80010ac:	e035      	b.n	800111a <W25Q_ReadStatusReg+0x146>
	case 1:
		wq->statReg1 = statRegRet[0];
 80010ae:	230c      	movs	r3, #12
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	7819      	ldrb	r1, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2220      	movs	r2, #32
 80010b8:	5499      	strb	r1, [r3, r2]
		wq->writeEnable = (wq->statReg1 & 0b00000010) >> 1;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2220      	movs	r2, #32
 80010be:	5c9b      	ldrb	r3, [r3, r2]
 80010c0:	105b      	asrs	r3, r3, #1
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2201      	movs	r2, #1
 80010c6:	4013      	ands	r3, r2
 80010c8:	b2d9      	uxtb	r1, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2223      	movs	r2, #35	@ 0x23
 80010ce:	5499      	strb	r1, [r3, r2]
		break;
 80010d0:	e023      	b.n	800111a <W25Q_ReadStatusReg+0x146>
	case 2:
		wq->statReg2 = statRegRet[0];
 80010d2:	230c      	movs	r3, #12
 80010d4:	18fb      	adds	r3, r7, r3
 80010d6:	7819      	ldrb	r1, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2221      	movs	r2, #33	@ 0x21
 80010dc:	5499      	strb	r1, [r3, r2]
		wq->quadEnable = (wq->statReg2 & 0b00000010) >> 1;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2221      	movs	r2, #33	@ 0x21
 80010e2:	5c9b      	ldrb	r3, [r3, r2]
 80010e4:	105b      	asrs	r3, r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2201      	movs	r2, #1
 80010ea:	4013      	ands	r3, r2
 80010ec:	b2d9      	uxtb	r1, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2225      	movs	r2, #37	@ 0x25
 80010f2:	5499      	strb	r1, [r3, r2]
		break;
 80010f4:	e011      	b.n	800111a <W25Q_ReadStatusReg+0x146>
	case 3:
		wq->statReg3 = statRegRet[0];
 80010f6:	230c      	movs	r3, #12
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	7819      	ldrb	r1, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2222      	movs	r2, #34	@ 0x22
 8001100:	5499      	strb	r1, [r3, r2]
		wq->driverStrength = (wq->statReg3 & 0b01100000) >> 5;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2222      	movs	r2, #34	@ 0x22
 8001106:	5c9b      	ldrb	r3, [r3, r2]
 8001108:	115b      	asrs	r3, r3, #5
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2203      	movs	r2, #3
 800110e:	4013      	ands	r3, r2
 8001110:	b2d9      	uxtb	r1, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2226      	movs	r2, #38	@ 0x26
 8001116:	5499      	strb	r1, [r3, r2]
		break;
 8001118:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 800111a:	2317      	movs	r3, #23
 800111c:	18fb      	adds	r3, r7, r3
 800111e:	781b      	ldrb	r3, [r3, #0]

}
 8001120:	0018      	movs	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	b006      	add	sp, #24
 8001126:	bdb0      	pop	{r4, r5, r7, pc}
 8001128:	080095a0 	.word	0x080095a0
 800112c:	0800959c 	.word	0x0800959c

08001130 <W25Q_ReadStatusRegs>:

HAL_StatusTypeDef W25Q_ReadStatusRegs(W25Q *wq) {
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8001138:	230e      	movs	r3, #14
 800113a:	18fb      	adds	r3, r7, r3
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 1; i <=3; i++) {
 8001140:	230f      	movs	r3, #15
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	e00d      	b.n	8001166 <W25Q_ReadStatusRegs+0x36>

		W25Q_ReadStatusReg(wq, i);
 800114a:	240f      	movs	r4, #15
 800114c:	193b      	adds	r3, r7, r4
 800114e:	781a      	ldrb	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	0011      	movs	r1, r2
 8001154:	0018      	movs	r0, r3
 8001156:	f7ff ff3d 	bl	8000fd4 <W25Q_ReadStatusReg>
	for(uint8_t i = 1; i <=3; i++) {
 800115a:	0021      	movs	r1, r4
 800115c:	187b      	adds	r3, r7, r1
 800115e:	781a      	ldrb	r2, [r3, #0]
 8001160:	187b      	adds	r3, r7, r1
 8001162:	3201      	adds	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
 8001166:	230f      	movs	r3, #15
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b03      	cmp	r3, #3
 800116e:	d9ec      	bls.n	800114a <W25Q_ReadStatusRegs+0x1a>

	}

	return halRet;
 8001170:	230e      	movs	r3, #14
 8001172:	18fb      	adds	r3, r7, r3
 8001174:	781b      	ldrb	r3, [r3, #0]

}
 8001176:	0018      	movs	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	b005      	add	sp, #20
 800117c:	bd90      	pop	{r4, r7, pc}
	...

08001180 <W25Q_WriteStatusReg>:

HAL_StatusTypeDef W25Q_WriteStatusReg(W25Q *wq, uint8_t regNum, uint8_t regVal) {
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	0008      	movs	r0, r1
 800118a:	0011      	movs	r1, r2
 800118c:	1cfb      	adds	r3, r7, #3
 800118e:	1c02      	adds	r2, r0, #0
 8001190:	701a      	strb	r2, [r3, #0]
 8001192:	1cbb      	adds	r3, r7, #2
 8001194:	1c0a      	adds	r2, r1, #0
 8001196:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8001198:	2513      	movs	r5, #19
 800119a:	197b      	adds	r3, r7, r5
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]

	// Enable Write Access to Memory
	// Write access will disable after status register write
	if(wq->writeEnable != 1) {
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2223      	movs	r2, #35	@ 0x23
 80011a4:	5c9b      	ldrb	r3, [r3, r2]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d00c      	beq.n	80011c4 <W25Q_WriteStatusReg+0x44>
		halRet = W25Q_EnableWrite(wq);
 80011aa:	197c      	adds	r4, r7, r5
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	0018      	movs	r0, r3
 80011b0:	f7ff fe8a 	bl	8000ec8 <W25Q_EnableWrite>
 80011b4:	0003      	movs	r3, r0
 80011b6:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK)
 80011b8:	197b      	adds	r3, r7, r5
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <W25Q_WriteStatusReg+0x44>
			return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e08a      	b.n	80012da <W25Q_WriteStatusReg+0x15a>
	}

	// Array of commands for status registers 1-3
	uint8_t statRegCMDs[3] = {CMD_WRITE_STAT_1, CMD_WRITE_STAT_2, CMD_WRITE_STAT_3};
 80011c4:	2410      	movs	r4, #16
 80011c6:	193b      	adds	r3, r7, r4
 80011c8:	4a46      	ldr	r2, [pc, #280]	@ (80012e4 <W25Q_WriteStatusReg+0x164>)
 80011ca:	8811      	ldrh	r1, [r2, #0]
 80011cc:	8019      	strh	r1, [r3, #0]
 80011ce:	7892      	ldrb	r2, [r2, #2]
 80011d0:	709a      	strb	r2, [r3, #2]

	// TX write status reg with value
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6818      	ldr	r0, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	2200      	movs	r2, #0
 80011de:	0019      	movs	r1, r3
 80011e0:	f003 f959 	bl	8004496 <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[2]){statRegCMDs[regNum - 1], regVal}, 2, HAL_MAX_DELAY);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6998      	ldr	r0, [r3, #24]
 80011e8:	1cfb      	adds	r3, r7, #3
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	193a      	adds	r2, r7, r4
 80011f0:	5cd2      	ldrb	r2, [r2, r3]
 80011f2:	210c      	movs	r1, #12
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	701a      	strb	r2, [r3, #0]
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	1cba      	adds	r2, r7, #2
 80011fc:	7812      	ldrb	r2, [r2, #0]
 80011fe:	705a      	strb	r2, [r3, #1]
 8001200:	2513      	movs	r5, #19
 8001202:	197c      	adds	r4, r7, r5
 8001204:	2301      	movs	r3, #1
 8001206:	425b      	negs	r3, r3
 8001208:	1879      	adds	r1, r7, r1
 800120a:	2202      	movs	r2, #2
 800120c:	f006 fa9c 	bl	8007748 <HAL_SPI_Transmit>
 8001210:	0003      	movs	r3, r0
 8001212:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	b29b      	uxth	r3, r3
 800121e:	2201      	movs	r2, #1
 8001220:	0019      	movs	r1, r3
 8001222:	f003 f938 	bl	8004496 <HAL_GPIO_WritePin>

	// WEL bit will now be set back to 0
	halRet = W25Q_ReadStatusReg(wq, 1);
 8001226:	197c      	adds	r4, r7, r5
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2101      	movs	r1, #1
 800122c:	0018      	movs	r0, r3
 800122e:	f7ff fed1 	bl	8000fd4 <W25Q_ReadStatusReg>
 8001232:	0003      	movs	r3, r0
 8001234:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8001236:	197b      	adds	r3, r7, r5
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <W25Q_WriteStatusReg+0xc4>
		return halRet;
 800123e:	197b      	adds	r3, r7, r5
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	e04a      	b.n	80012da <W25Q_WriteStatusReg+0x15a>

	// Delay maximum status register write time (15ms), as given by chip datasheet.
	// ~235ns per i
	for(uint32_t i = 0; i < 70000; i++) {
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	e003      	b.n	8001252 <W25Q_WriteStatusReg+0xd2>
		__NOP();
 800124a:	46c0      	nop			@ (mov r8, r8)
	for(uint32_t i = 0; i < 70000; i++) {
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	3301      	adds	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	4a24      	ldr	r2, [pc, #144]	@ (80012e8 <W25Q_WriteStatusReg+0x168>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d9f7      	bls.n	800124a <W25Q_WriteStatusReg+0xca>
	}

	if(halRet != HAL_OK)
 800125a:	2213      	movs	r2, #19
 800125c:	18bb      	adds	r3, r7, r2
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <W25Q_WriteStatusReg+0xea>
		return halRet;
 8001264:	18bb      	adds	r3, r7, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	e037      	b.n	80012da <W25Q_WriteStatusReg+0x15a>

	// Read back written value and confirm
	halRet = W25Q_ReadStatusReg(wq, regNum);
 800126a:	2313      	movs	r3, #19
 800126c:	18fc      	adds	r4, r7, r3
 800126e:	1cfb      	adds	r3, r7, #3
 8001270:	781a      	ldrb	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	0011      	movs	r1, r2
 8001276:	0018      	movs	r0, r3
 8001278:	f7ff feac 	bl	8000fd4 <W25Q_ReadStatusReg>
 800127c:	0003      	movs	r3, r0
 800127e:	7023      	strb	r3, [r4, #0]
	switch(regNum) {
 8001280:	1cfb      	adds	r3, r7, #3
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b03      	cmp	r3, #3
 8001286:	d017      	beq.n	80012b8 <W25Q_WriteStatusReg+0x138>
 8001288:	dc24      	bgt.n	80012d4 <W25Q_WriteStatusReg+0x154>
 800128a:	2b01      	cmp	r3, #1
 800128c:	d002      	beq.n	8001294 <W25Q_WriteStatusReg+0x114>
 800128e:	2b02      	cmp	r3, #2
 8001290:	d009      	beq.n	80012a6 <W25Q_WriteStatusReg+0x126>
 8001292:	e01f      	b.n	80012d4 <W25Q_WriteStatusReg+0x154>
		case 1:
			if(wq->statReg1 != regVal)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2220      	movs	r2, #32
 8001298:	5c9b      	ldrb	r3, [r3, r2]
 800129a:	1cba      	adds	r2, r7, #2
 800129c:	7812      	ldrb	r2, [r2, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d013      	beq.n	80012ca <W25Q_WriteStatusReg+0x14a>
				return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e019      	b.n	80012da <W25Q_WriteStatusReg+0x15a>
			break;
		case 2:
			if(wq->statReg2 != regVal)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2221      	movs	r2, #33	@ 0x21
 80012aa:	5c9b      	ldrb	r3, [r3, r2]
 80012ac:	1cba      	adds	r2, r7, #2
 80012ae:	7812      	ldrb	r2, [r2, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d00c      	beq.n	80012ce <W25Q_WriteStatusReg+0x14e>
				return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e010      	b.n	80012da <W25Q_WriteStatusReg+0x15a>
			break;
		case 3:
			if(wq->statReg3 != regVal)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2222      	movs	r2, #34	@ 0x22
 80012bc:	5c9b      	ldrb	r3, [r3, r2]
 80012be:	1cba      	adds	r2, r7, #2
 80012c0:	7812      	ldrb	r2, [r2, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d005      	beq.n	80012d2 <W25Q_WriteStatusReg+0x152>
				return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e007      	b.n	80012da <W25Q_WriteStatusReg+0x15a>
			break;
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	e002      	b.n	80012d4 <W25Q_WriteStatusReg+0x154>
			break;
 80012ce:	46c0      	nop			@ (mov r8, r8)
 80012d0:	e000      	b.n	80012d4 <W25Q_WriteStatusReg+0x154>
			break;
 80012d2:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 80012d4:	2313      	movs	r3, #19
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	781b      	ldrb	r3, [r3, #0]


}
 80012da:	0018      	movs	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	b006      	add	sp, #24
 80012e0:	bdb0      	pop	{r4, r5, r7, pc}
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	080095a4 	.word	0x080095a4
 80012e8:	0001116f 	.word	0x0001116f

080012ec <W25Q_readData>:

HAL_StatusTypeDef W25Q_readData(W25Q *wq, uint32_t startAddress, uint32_t dataSize, uint8_t *dataLocation) {
 80012ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80012fa:	2417      	movs	r4, #23
 80012fc:	193b      	adds	r3, r7, r4
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]

	// Create read data array with start address
	uint8_t readDataArr[4] = {CMD_READ_DATA, ((startAddress >> 16) & 0xFF), ((startAddress >> 8) & 0xFF), ((startAddress) & 0xFF)};
 8001302:	2510      	movs	r5, #16
 8001304:	197b      	adds	r3, r7, r5
 8001306:	2203      	movs	r2, #3
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	0c1b      	lsrs	r3, r3, #16
 800130e:	b2da      	uxtb	r2, r3
 8001310:	197b      	adds	r3, r7, r5
 8001312:	705a      	strb	r2, [r3, #1]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	b2da      	uxtb	r2, r3
 800131a:	197b      	adds	r3, r7, r5
 800131c:	709a      	strb	r2, [r3, #2]
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	197b      	adds	r3, r7, r5
 8001324:	70da      	strb	r2, [r3, #3]

	// TX read data in single-SPI mode command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	b29b      	uxth	r3, r3
 8001330:	2200      	movs	r2, #0
 8001332:	0019      	movs	r1, r3
 8001334:	f003 f8af 	bl	8004496 <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, readDataArr, 4, HAL_MAX_DELAY);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6998      	ldr	r0, [r3, #24]
 800133c:	0026      	movs	r6, r4
 800133e:	193c      	adds	r4, r7, r4
 8001340:	2301      	movs	r3, #1
 8001342:	425b      	negs	r3, r3
 8001344:	1979      	adds	r1, r7, r5
 8001346:	2204      	movs	r2, #4
 8001348:	f006 f9fe 	bl	8007748 <HAL_SPI_Transmit>
 800134c:	0003      	movs	r3, r0
 800134e:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8001350:	19bb      	adds	r3, r7, r6
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00b      	beq.n	8001370 <W25Q_readData+0x84>
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6818      	ldr	r0, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	b29b      	uxth	r3, r3
 8001362:	2201      	movs	r2, #1
 8001364:	0019      	movs	r1, r3
 8001366:	f003 f896 	bl	8004496 <HAL_GPIO_WritePin>
		return halRet;
 800136a:	19bb      	adds	r3, r7, r6
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	e017      	b.n	80013a0 <W25Q_readData+0xb4>
	}

	// RX data
	halRet = HAL_SPI_Receive(wq->hspi, dataLocation, dataSize, HAL_MAX_DELAY);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6998      	ldr	r0, [r3, #24]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	b29a      	uxth	r2, r3
 8001378:	2517      	movs	r5, #23
 800137a:	197c      	adds	r4, r7, r5
 800137c:	2301      	movs	r3, #1
 800137e:	425b      	negs	r3, r3
 8001380:	6839      	ldr	r1, [r7, #0]
 8001382:	f006 fb41 	bl	8007a08 <HAL_SPI_Receive>
 8001386:	0003      	movs	r3, r0
 8001388:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6818      	ldr	r0, [r3, #0]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	b29b      	uxth	r3, r3
 8001394:	2201      	movs	r2, #1
 8001396:	0019      	movs	r1, r3
 8001398:	f003 f87d 	bl	8004496 <HAL_GPIO_WritePin>


	return halRet;
 800139c:	197b      	adds	r3, r7, r5
 800139e:	781b      	ldrb	r3, [r3, #0]

}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b007      	add	sp, #28
 80013a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013a8 <W25Q_ChipReset>:
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);

	return halRet;
}

HAL_StatusTypeDef W25Q_ChipReset(W25Q *wq) {
 80013a8:	b5b0      	push	{r4, r5, r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80013b0:	250e      	movs	r5, #14
 80013b2:	197b      	adds	r3, r7, r5
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]

	/*
	 * Send both enable reset an reset device commands
	 */
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	2200      	movs	r2, #0
 80013c4:	0019      	movs	r1, r3
 80013c6:	f003 f866 	bl	8004496 <HAL_GPIO_WritePin>
	// TX enable reset instruction
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_RESET_ENABLE}, 1, HAL_MAX_DELAY);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6998      	ldr	r0, [r3, #24]
 80013ce:	210c      	movs	r1, #12
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	2266      	movs	r2, #102	@ 0x66
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	197c      	adds	r4, r7, r5
 80013d8:	2301      	movs	r3, #1
 80013da:	425b      	negs	r3, r3
 80013dc:	1879      	adds	r1, r7, r1
 80013de:	2201      	movs	r2, #1
 80013e0:	f006 f9b2 	bl	8007748 <HAL_SPI_Transmit>
 80013e4:	0003      	movs	r3, r0
 80013e6:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	2201      	movs	r2, #1
 80013f4:	0019      	movs	r1, r3
 80013f6:	f003 f84e 	bl	8004496 <HAL_GPIO_WritePin>
	if(halRet != HAL_OK)
 80013fa:	197b      	adds	r3, r7, r5
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <W25Q_ChipReset+0x60>
		return halRet;
 8001402:	197b      	adds	r3, r7, r5
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	e035      	b.n	8001474 <W25Q_ChipReset+0xcc>

	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	b29b      	uxth	r3, r3
 8001412:	2200      	movs	r2, #0
 8001414:	0019      	movs	r1, r3
 8001416:	f003 f83e 	bl	8004496 <HAL_GPIO_WritePin>
	// TX reset device instruction
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_RESET_DEVICE}, 1, HAL_MAX_DELAY);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6998      	ldr	r0, [r3, #24]
 800141e:	2108      	movs	r1, #8
 8001420:	187b      	adds	r3, r7, r1
 8001422:	2299      	movs	r2, #153	@ 0x99
 8001424:	701a      	strb	r2, [r3, #0]
 8001426:	230e      	movs	r3, #14
 8001428:	18fc      	adds	r4, r7, r3
 800142a:	2301      	movs	r3, #1
 800142c:	425b      	negs	r3, r3
 800142e:	1879      	adds	r1, r7, r1
 8001430:	2201      	movs	r2, #1
 8001432:	f006 f989 	bl	8007748 <HAL_SPI_Transmit>
 8001436:	0003      	movs	r3, r0
 8001438:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	b29b      	uxth	r3, r3
 8001444:	2201      	movs	r2, #1
 8001446:	0019      	movs	r1, r3
 8001448:	f003 f825 	bl	8004496 <HAL_GPIO_WritePin>

	// Delay at least 30 us
	for(uint8_t i = 0; i < 180; i++) {
 800144c:	230f      	movs	r3, #15
 800144e:	18fb      	adds	r3, r7, r3
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
 8001454:	e006      	b.n	8001464 <W25Q_ChipReset+0xbc>
		__NOP();
 8001456:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < 180; i++) {
 8001458:	210f      	movs	r1, #15
 800145a:	187b      	adds	r3, r7, r1
 800145c:	781a      	ldrb	r2, [r3, #0]
 800145e:	187b      	adds	r3, r7, r1
 8001460:	3201      	adds	r2, #1
 8001462:	701a      	strb	r2, [r3, #0]
 8001464:	230f      	movs	r3, #15
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2bb3      	cmp	r3, #179	@ 0xb3
 800146c:	d9f3      	bls.n	8001456 <W25Q_ChipReset+0xae>
	}


	return halRet;
 800146e:	230e      	movs	r3, #14
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	781b      	ldrb	r3, [r3, #0]

}
 8001474:	0018      	movs	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	b004      	add	sp, #16
 800147a:	bdb0      	pop	{r4, r5, r7, pc}

0800147c <W25Q_QuadEnable>:

HAL_StatusTypeDef W25Q_QuadEnable(W25Q *wq, uint8_t quadBool) {
 800147c:	b5b0      	push	{r4, r5, r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	000a      	movs	r2, r1
 8001486:	1cfb      	adds	r3, r7, #3
 8001488:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800148a:	250f      	movs	r5, #15
 800148c:	197b      	adds	r3, r7, r5
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]

	// Get current contents of status register 2
	halRet = W25Q_ReadStatusReg(wq, 2);
 8001492:	197c      	adds	r4, r7, r5
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2102      	movs	r1, #2
 8001498:	0018      	movs	r0, r3
 800149a:	f7ff fd9b 	bl	8000fd4 <W25Q_ReadStatusReg>
 800149e:	0003      	movs	r3, r0
 80014a0:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80014a2:	197b      	adds	r3, r7, r5
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <W25Q_QuadEnable+0x34>
		return halRet;
 80014aa:	197b      	adds	r3, r7, r5
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	e039      	b.n	8001524 <W25Q_QuadEnable+0xa8>

	/*
	 * Change bit 1 and TX to status register 2
	 */
	uint8_t newRegVal = (wq->statReg2) & (0b11111101);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2221      	movs	r2, #33	@ 0x21
 80014b4:	5c9a      	ldrb	r2, [r3, r2]
 80014b6:	200e      	movs	r0, #14
 80014b8:	183b      	adds	r3, r7, r0
 80014ba:	2102      	movs	r1, #2
 80014bc:	438a      	bics	r2, r1
 80014be:	701a      	strb	r2, [r3, #0]
	newRegVal = (newRegVal) | (quadBool << 1);
 80014c0:	1cfb      	adds	r3, r7, #3
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	b25a      	sxtb	r2, r3
 80014c8:	183b      	adds	r3, r7, r0
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	4313      	orrs	r3, r2
 80014d0:	b25a      	sxtb	r2, r3
 80014d2:	183b      	adds	r3, r7, r0
 80014d4:	701a      	strb	r2, [r3, #0]
	halRet = W25Q_WriteStatusReg(wq, 2, newRegVal);
 80014d6:	250f      	movs	r5, #15
 80014d8:	197c      	adds	r4, r7, r5
 80014da:	183b      	adds	r3, r7, r0
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2102      	movs	r1, #2
 80014e2:	0018      	movs	r0, r3
 80014e4:	f7ff fe4c 	bl	8001180 <W25Q_WriteStatusReg>
 80014e8:	0003      	movs	r3, r0
 80014ea:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80014ec:	197b      	adds	r3, r7, r5
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <W25Q_QuadEnable+0x7e>
		return halRet;
 80014f4:	197b      	adds	r3, r7, r5
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	e014      	b.n	8001524 <W25Q_QuadEnable+0xa8>

	// Read back status register 2 and confirm successful write
	halRet = W25Q_ReadStatusReg(wq, 2);
 80014fa:	230f      	movs	r3, #15
 80014fc:	18fc      	adds	r4, r7, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2102      	movs	r1, #2
 8001502:	0018      	movs	r0, r3
 8001504:	f7ff fd66 	bl	8000fd4 <W25Q_ReadStatusReg>
 8001508:	0003      	movs	r3, r0
 800150a:	7023      	strb	r3, [r4, #0]
	if(wq->quadEnable != quadBool)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2225      	movs	r2, #37	@ 0x25
 8001510:	5c9b      	ldrb	r3, [r3, r2]
 8001512:	1cfa      	adds	r2, r7, #3
 8001514:	7812      	ldrb	r2, [r2, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d001      	beq.n	800151e <W25Q_QuadEnable+0xa2>
		return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e002      	b.n	8001524 <W25Q_QuadEnable+0xa8>

	return halRet;
 800151e:	230f      	movs	r3, #15
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	781b      	ldrb	r3, [r3, #0]

}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	b004      	add	sp, #16
 800152a:	bdb0      	pop	{r4, r5, r7, pc}

0800152c <W25Q_SetDriverStrength>:

HAL_StatusTypeDef W25Q_SetDriverStrength(W25Q *wq, uint8_t driverStrength) {
 800152c:	b5b0      	push	{r4, r5, r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	000a      	movs	r2, r1
 8001536:	1cfb      	adds	r3, r7, #3
 8001538:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800153a:	230f      	movs	r3, #15
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]

	// Check to ensure passed driver strength value lies in range
	if(driverStrength < 0 || driverStrength > 3)
 8001542:	1cfb      	adds	r3, r7, #3
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b03      	cmp	r3, #3
 8001548:	d901      	bls.n	800154e <W25Q_SetDriverStrength+0x22>
		return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e041      	b.n	80015d2 <W25Q_SetDriverStrength+0xa6>

	// Read current value in status register 3
	halRet = W25Q_ReadStatusReg(wq, 3);
 800154e:	250f      	movs	r5, #15
 8001550:	197c      	adds	r4, r7, r5
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2103      	movs	r1, #3
 8001556:	0018      	movs	r0, r3
 8001558:	f7ff fd3c 	bl	8000fd4 <W25Q_ReadStatusReg>
 800155c:	0003      	movs	r3, r0
 800155e:	7023      	strb	r3, [r4, #0]

	// Isolate bits 5-6 and change value to reflect new driver strength
	uint8_t newRegVal = (wq->statReg3) & (0b10011111);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2222      	movs	r2, #34	@ 0x22
 8001564:	5c9a      	ldrb	r2, [r3, r2]
 8001566:	200e      	movs	r0, #14
 8001568:	183b      	adds	r3, r7, r0
 800156a:	2160      	movs	r1, #96	@ 0x60
 800156c:	438a      	bics	r2, r1
 800156e:	701a      	strb	r2, [r3, #0]
	newRegVal = (newRegVal) | (driverStrength << 5);
 8001570:	1cfb      	adds	r3, r7, #3
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	015b      	lsls	r3, r3, #5
 8001576:	b25a      	sxtb	r2, r3
 8001578:	183b      	adds	r3, r7, r0
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b25b      	sxtb	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b25a      	sxtb	r2, r3
 8001582:	183b      	adds	r3, r7, r0
 8001584:	701a      	strb	r2, [r3, #0]

	// Write status register 3 with new value
	halRet = W25Q_WriteStatusReg(wq, 3, newRegVal);
 8001586:	197c      	adds	r4, r7, r5
 8001588:	183b      	adds	r3, r7, r0
 800158a:	781a      	ldrb	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2103      	movs	r1, #3
 8001590:	0018      	movs	r0, r3
 8001592:	f7ff fdf5 	bl	8001180 <W25Q_WriteStatusReg>
 8001596:	0003      	movs	r3, r0
 8001598:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800159a:	197b      	adds	r3, r7, r5
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <W25Q_SetDriverStrength+0x7c>
		return halRet;
 80015a2:	197b      	adds	r3, r7, r5
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	e014      	b.n	80015d2 <W25Q_SetDriverStrength+0xa6>

	// Read back status register 3 and confirm successful write
	halRet = W25Q_ReadStatusReg(wq, 3);
 80015a8:	230f      	movs	r3, #15
 80015aa:	18fc      	adds	r4, r7, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2103      	movs	r1, #3
 80015b0:	0018      	movs	r0, r3
 80015b2:	f7ff fd0f 	bl	8000fd4 <W25Q_ReadStatusReg>
 80015b6:	0003      	movs	r3, r0
 80015b8:	7023      	strb	r3, [r4, #0]
	if(wq->driverStrength != driverStrength)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2226      	movs	r2, #38	@ 0x26
 80015be:	5c9b      	ldrb	r3, [r3, r2]
 80015c0:	1cfa      	adds	r2, r7, #3
 80015c2:	7812      	ldrb	r2, [r2, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <W25Q_SetDriverStrength+0xa0>
		return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e002      	b.n	80015d2 <W25Q_SetDriverStrength+0xa6>

	return halRet;
 80015cc:	230f      	movs	r3, #15
 80015ce:	18fb      	adds	r3, r7, r3
 80015d0:	781b      	ldrb	r3, [r3, #0]

}
 80015d2:	0018      	movs	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b004      	add	sp, #16
 80015d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080015dc <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80015dc:	b5b0      	push	{r4, r5, r7, lr}
 80015de:	b09a      	sub	sp, #104	@ 0x68
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80015e8:	2567      	movs	r5, #103	@ 0x67
 80015ea:	197b      	adds	r3, r7, r5
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 80015f0:	243c      	movs	r4, #60	@ 0x3c
 80015f2:	193b      	adds	r3, r7, r4
 80015f4:	0018      	movs	r0, r3
 80015f6:	2328      	movs	r3, #40	@ 0x28
 80015f8:	001a      	movs	r2, r3
 80015fa:	2100      	movs	r1, #0
 80015fc:	f007 ff7a 	bl	80094f4 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	0021      	movs	r1, r4
 8001606:	187b      	adds	r3, r7, r1
 8001608:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	3301      	adds	r3, #1
 8001610:	b2da      	uxtb	r2, r3
 8001612:	187b      	adds	r3, r7, r1
 8001614:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	789a      	ldrb	r2, [r3, #2]
 800161a:	187b      	adds	r3, r7, r1
 800161c:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	187b      	adds	r3, r7, r1
 8001624:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	78da      	ldrb	r2, [r3, #3]
 800162a:	187b      	adds	r3, r7, r1
 800162c:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	78da      	ldrb	r2, [r3, #3]
 8001632:	187b      	adds	r3, r7, r1
 8001634:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001636:	0008      	movs	r0, r1
 8001638:	183b      	adds	r3, r7, r0
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800163e:	183b      	adds	r3, r7, r0
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8001644:	183b      	adds	r3, r7, r0
 8001646:	4a19      	ldr	r2, [pc, #100]	@ (80016ac <initRTCInternalAlarm+0xd0>)
 8001648:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800164a:	183b      	adds	r3, r7, r0
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001650:	183b      	adds	r3, r7, r0
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 8001656:	183b      	adds	r3, r7, r0
 8001658:	2220      	movs	r2, #32
 800165a:	2101      	movs	r1, #1
 800165c:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 800165e:	0001      	movs	r1, r0
 8001660:	187b      	adds	r3, r7, r1
 8001662:	2280      	movs	r2, #128	@ 0x80
 8001664:	0052      	lsls	r2, r2, #1
 8001666:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8001668:	197c      	adds	r4, r7, r5
 800166a:	1879      	adds	r1, r7, r1
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	0018      	movs	r0, r3
 8001672:	f005 fbd9 	bl	8006e28 <HAL_RTC_SetAlarm_IT>
 8001676:	0003      	movs	r3, r0
 8001678:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800167a:	197b      	adds	r3, r7, r5
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <initRTCInternalAlarm+0xac>
		return halRet;
 8001682:	197b      	adds	r3, r7, r5
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	e00d      	b.n	80016a4 <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8001688:	2567      	movs	r5, #103	@ 0x67
 800168a:	197c      	adds	r4, r7, r5
 800168c:	2380      	movs	r3, #128	@ 0x80
 800168e:	005a      	lsls	r2, r3, #1
 8001690:	2314      	movs	r3, #20
 8001692:	18f9      	adds	r1, r7, r3
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	2300      	movs	r3, #0
 8001698:	f005 fd06 	bl	80070a8 <HAL_RTC_GetAlarm>
 800169c:	0003      	movs	r3, r0
 800169e:	7023      	strb	r3, [r4, #0]
	return halRet;
 80016a0:	197b      	adds	r3, r7, r5
 80016a2:	781b      	ldrb	r3, [r3, #0]

}
 80016a4:	0018      	movs	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b01a      	add	sp, #104	@ 0x68
 80016aa:	bdb0      	pop	{r4, r5, r7, pc}
 80016ac:	80800080 	.word	0x80800080

080016b0 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	0018      	movs	r0, r3
 80016c4:	f005 fb06 	bl	8006cd4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	0018      	movs	r0, r3
 80016d0:	f005 fb5c 	bl	8006d8c <HAL_RTC_GetDate>

}
 80016d4:	46c0      	nop			@ (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b004      	add	sp, #16
 80016da:	bd80      	pop	{r7, pc}

080016dc <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80016dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016de:	46de      	mov	lr, fp
 80016e0:	4657      	mov	r7, sl
 80016e2:	464e      	mov	r6, r9
 80016e4:	4645      	mov	r5, r8
 80016e6:	b5e0      	push	{r5, r6, r7, lr}
 80016e8:	b08f      	sub	sp, #60	@ 0x3c
 80016ea:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80016ec:	f002 f93a 	bl	8003964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f0:	f000 f9fc 	bl	8001aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f4:	f000 fc5e 	bl	8001fb4 <MX_GPIO_Init>
  MX_DMA_Init();
 80016f8:	f000 fc36 	bl	8001f68 <MX_DMA_Init>
  MX_RTC_Init();
 80016fc:	f000 fac6 	bl	8001c8c <MX_RTC_Init>
  MX_I2C1_Init();
 8001700:	f000 fa5a 	bl	8001bb8 <MX_I2C1_Init>
  MX_I2S1_Init();
 8001704:	f000 fa98 	bl	8001c38 <MX_I2S1_Init>
  MX_SPI2_Init();
 8001708:	f000 fb30 	bl	8001d6c <MX_SPI2_Init>
  MX_TIM2_Init();
 800170c:	f000 fb6c 	bl	8001de8 <MX_TIM2_Init>
  MX_TIM14_Init();
 8001710:	f000 fbca 	bl	8001ea8 <MX_TIM14_Init>
  MX_TIM16_Init();
 8001714:	f000 fbee 	bl	8001ef4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	  // HAL Status handle for error-checking
	  HAL_StatusTypeDef halRet = HAL_OK;
 8001718:	2317      	movs	r3, #23
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]

	  // Determine which time format we will be using
	  	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 8001720:	4bcb      	ldr	r3, [pc, #812]	@ (8001a50 <main+0x374>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2210      	movs	r2, #16
 8001726:	0011      	movs	r1, r2
 8001728:	0018      	movs	r0, r3
 800172a:	f002 fe97 	bl	800445c <HAL_GPIO_ReadPin>
 800172e:	0003      	movs	r3, r0
 8001730:	001a      	movs	r2, r3
 8001732:	4bc8      	ldr	r3, [pc, #800]	@ (8001a54 <main+0x378>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d103      	bne.n	8001742 <main+0x66>
	  	  userTimeFormat = RTC_HOURFORMAT_12;
 800173a:	4bc7      	ldr	r3, [pc, #796]	@ (8001a58 <main+0x37c>)
 800173c:	2240      	movs	r2, #64	@ 0x40
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e002      	b.n	8001748 <main+0x6c>
	  	}
	  	else {
	  	  userTimeFormat = RTC_HOURFORMAT_24;
 8001742:	4bc5      	ldr	r3, [pc, #788]	@ (8001a58 <main+0x37c>)
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
	  	}

  	  // Set Smooth Calibration Value
	  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8001748:	4bc4      	ldr	r3, [pc, #784]	@ (8001a5c <main+0x380>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2517      	movs	r5, #23
 800174e:	197c      	adds	r4, r7, r5
 8001750:	2280      	movs	r2, #128	@ 0x80
 8001752:	01d1      	lsls	r1, r2, #7
 8001754:	48c2      	ldr	r0, [pc, #776]	@ (8001a60 <main+0x384>)
 8001756:	2200      	movs	r2, #0
 8001758:	f005 fe9b 	bl	8007492 <HAL_RTCEx_SetSmoothCalib>
 800175c:	0003      	movs	r3, r0
 800175e:	7023      	strb	r3, [r4, #0]
									RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
	  if(halRet != HAL_OK) {
 8001760:	197b      	adds	r3, r7, r5
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <main+0x90>
		  // Failure to talk to RTC is a hard failure
		  dispFailure();
 8001768:	f001 fa0a 	bl	8002b80 <dispFailure>
	  }

	  // Init the internal RTC alarm time to track the current time
	  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 800176c:	2517      	movs	r5, #23
 800176e:	197c      	adds	r4, r7, r5
 8001770:	4abc      	ldr	r2, [pc, #752]	@ (8001a64 <main+0x388>)
 8001772:	49bd      	ldr	r1, [pc, #756]	@ (8001a68 <main+0x38c>)
 8001774:	4bba      	ldr	r3, [pc, #744]	@ (8001a60 <main+0x384>)
 8001776:	0018      	movs	r0, r3
 8001778:	f7ff ff30 	bl	80015dc <initRTCInternalAlarm>
 800177c:	0003      	movs	r3, r0
 800177e:	7023      	strb	r3, [r4, #0]
	  if(halRet != HAL_OK) {
 8001780:	197b      	adds	r3, r7, r5
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <main+0xb0>
		  // Failure to initialize RTC alarm is a hard failure
		  dispFailure();
 8001788:	f001 f9fa 	bl	8002b80 <dispFailure>
		}

	  // Initialize all GPIOs to be used with 7 segment display
		sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 800178c:	2380      	movs	r3, #128	@ 0x80
 800178e:	009c      	lsls	r4, r3, #2
 8001790:	2380      	movs	r3, #128	@ 0x80
 8001792:	00dd      	lsls	r5, r3, #3
 8001794:	2680      	movs	r6, #128	@ 0x80
 8001796:	2340      	movs	r3, #64	@ 0x40
 8001798:	469c      	mov	ip, r3
 800179a:	2380      	movs	r3, #128	@ 0x80
 800179c:	011a      	lsls	r2, r3, #4
 800179e:	4bb3      	ldr	r3, [pc, #716]	@ (8001a6c <main+0x390>)
 80017a0:	6819      	ldr	r1, [r3, #0]
 80017a2:	4bb3      	ldr	r3, [pc, #716]	@ (8001a70 <main+0x394>)
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	4bb3      	ldr	r3, [pc, #716]	@ (8001a74 <main+0x398>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	9304      	str	r3, [sp, #16]
 80017ac:	9003      	str	r0, [sp, #12]
 80017ae:	9102      	str	r1, [sp, #8]
 80017b0:	4bb1      	ldr	r3, [pc, #708]	@ (8001a78 <main+0x39c>)
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	9200      	str	r2, [sp, #0]
 80017b6:	4663      	mov	r3, ip
 80017b8:	0032      	movs	r2, r6
 80017ba:	0029      	movs	r1, r5
 80017bc:	0020      	movs	r0, r4
 80017be:	f001 fb2b 	bl	8002e18 <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


		halRet = updateAndDisplayTime();
 80017c2:	2517      	movs	r5, #23
 80017c4:	197c      	adds	r4, r7, r5
 80017c6:	f000 fcf9 	bl	80021bc <updateAndDisplayTime>
 80017ca:	0003      	movs	r3, r0
 80017cc:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 80017ce:	197b      	adds	r3, r7, r5
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <main+0xfe>
		  // Failure to display current time is a hard failure
		  dispFailure();
 80017d6:	f001 f9d3 	bl	8002b80 <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

		// Used to separate return initializations into critical and non-critical errors.
		uint8_t initRet = 0;
 80017da:	2116      	movs	r1, #22
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]

		initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 80017e2:	4ba2      	ldr	r3, [pc, #648]	@ (8001a6c <main+0x390>)
 80017e4:	681d      	ldr	r5, [r3, #0]
 80017e6:	2380      	movs	r3, #128	@ 0x80
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4aa4      	ldr	r2, [pc, #656]	@ (8001a7c <main+0x3a0>)
 80017ec:	7812      	ldrb	r2, [r2, #0]
 80017ee:	187c      	adds	r4, r7, r1
 80017f0:	4ea3      	ldr	r6, [pc, #652]	@ (8001a80 <main+0x3a4>)
 80017f2:	49a4      	ldr	r1, [pc, #656]	@ (8001a84 <main+0x3a8>)
 80017f4:	48a4      	ldr	r0, [pc, #656]	@ (8001a88 <main+0x3ac>)
 80017f6:	9201      	str	r2, [sp, #4]
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	0033      	movs	r3, r6
 80017fc:	002a      	movs	r2, r5
 80017fe:	f7fe fd0d 	bl	800021c <capTouch_Init>
 8001802:	0003      	movs	r3, r0
 8001804:	7023      	strb	r3, [r4, #0]
								&capTouchResetPort, capTouchResetPin, capTouchChannels);
		if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 8001806:	2116      	movs	r1, #22
 8001808:	187b      	adds	r3, r7, r1
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d007      	beq.n	8001820 <main+0x144>
 8001810:	187b      	adds	r3, r7, r1
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d003      	beq.n	8001820 <main+0x144>
 8001818:	187b      	adds	r3, r7, r1
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b04      	cmp	r3, #4
 800181e:	d102      	bne.n	8001826 <main+0x14a>
			/* Critical Errors:
			 * 1 = Failure to read correct device ID
			 * 2 = Failure to read Keys
			 * 3 = Failure to enable keys
			 */
			dispFailure();
 8001820:	f001 f9ae 	bl	8002b80 <dispFailure>
 8001824:	e00d      	b.n	8001842 <main+0x166>
		}
		else if (initRet == 2) {
 8001826:	2316      	movs	r3, #22
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d102      	bne.n	8001836 <main+0x15a>
			/*
			 * Non-critical Errors:
			 * 2 = Failure to Recalibrate
			 */
			dispFault();
 8001830:	f001 f996 	bl	8002b60 <dispFault>
 8001834:	e005      	b.n	8001842 <main+0x166>
		}
		else if(initRet == 0) {
 8001836:	2316      	movs	r3, #22
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d100      	bne.n	8001842 <main+0x166>
			// initRet = 0 = all is well
			__NOP();
 8001840:	46c0      	nop			@ (mov r8, r8)
		}

		// Set averaging factor
		uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8001842:	4b92      	ldr	r3, [pc, #584]	@ (8001a8c <main+0x3b0>)
 8001844:	781a      	ldrb	r2, [r3, #0]
 8001846:	210c      	movs	r1, #12
 8001848:	187b      	adds	r3, r7, r1
 800184a:	701a      	strb	r2, [r3, #0]
 800184c:	4b8f      	ldr	r3, [pc, #572]	@ (8001a8c <main+0x3b0>)
 800184e:	781a      	ldrb	r2, [r3, #0]
 8001850:	187b      	adds	r3, r7, r1
 8001852:	705a      	strb	r2, [r3, #1]
 8001854:	4b8d      	ldr	r3, [pc, #564]	@ (8001a8c <main+0x3b0>)
 8001856:	781a      	ldrb	r2, [r3, #0]
 8001858:	187b      	adds	r3, r7, r1
 800185a:	709a      	strb	r2, [r3, #2]
 800185c:	4b8b      	ldr	r3, [pc, #556]	@ (8001a8c <main+0x3b0>)
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	187b      	adds	r3, r7, r1
 8001862:	70da      	strb	r2, [r3, #3]
 8001864:	187b      	adds	r3, r7, r1
 8001866:	2200      	movs	r2, #0
 8001868:	711a      	strb	r2, [r3, #4]
 800186a:	187b      	adds	r3, r7, r1
 800186c:	2200      	movs	r2, #0
 800186e:	715a      	strb	r2, [r3, #5]
 8001870:	187b      	adds	r3, r7, r1
 8001872:	2200      	movs	r2, #0
 8001874:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8001876:	2517      	movs	r5, #23
 8001878:	197c      	adds	r4, r7, r5
 800187a:	187a      	adds	r2, r7, r1
 800187c:	4b82      	ldr	r3, [pc, #520]	@ (8001a88 <main+0x3ac>)
 800187e:	0011      	movs	r1, r2
 8001880:	0018      	movs	r0, r3
 8001882:	f7fe ff3f 	bl	8000704 <capTouch_SetAveragingFactor>
 8001886:	0003      	movs	r3, r0
 8001888:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 800188a:	197b      	adds	r3, r7, r5
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <main+0x1ba>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 8001892:	f001 f965 	bl	8002b60 <dispFault>
		}

		// Set detection integration factors
		uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 8001896:	4b7e      	ldr	r3, [pc, #504]	@ (8001a90 <main+0x3b4>)
 8001898:	781a      	ldrb	r2, [r3, #0]
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	701a      	strb	r2, [r3, #0]
 800189e:	4b7c      	ldr	r3, [pc, #496]	@ (8001a90 <main+0x3b4>)
 80018a0:	781a      	ldrb	r2, [r3, #0]
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	705a      	strb	r2, [r3, #1]
 80018a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001a90 <main+0x3b4>)
 80018a8:	781a      	ldrb	r2, [r3, #0]
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	709a      	strb	r2, [r3, #2]
 80018ae:	4b78      	ldr	r3, [pc, #480]	@ (8001a90 <main+0x3b4>)
 80018b0:	781a      	ldrb	r2, [r3, #0]
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	70da      	strb	r2, [r3, #3]
 80018b6:	4b76      	ldr	r3, [pc, #472]	@ (8001a90 <main+0x3b4>)
 80018b8:	781a      	ldrb	r2, [r3, #0]
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	711a      	strb	r2, [r3, #4]
 80018be:	4b74      	ldr	r3, [pc, #464]	@ (8001a90 <main+0x3b4>)
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	715a      	strb	r2, [r3, #5]
 80018c6:	4b72      	ldr	r3, [pc, #456]	@ (8001a90 <main+0x3b4>)
 80018c8:	781a      	ldrb	r2, [r3, #0]
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 80018ce:	2517      	movs	r5, #23
 80018d0:	197c      	adds	r4, r7, r5
 80018d2:	1d3a      	adds	r2, r7, #4
 80018d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001a88 <main+0x3ac>)
 80018d6:	0011      	movs	r1, r2
 80018d8:	0018      	movs	r0, r3
 80018da:	f7fe ffdd 	bl	8000898 <capTouch_SetDetectionIntegrator>
 80018de:	0003      	movs	r3, r0
 80018e0:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 80018e2:	197b      	adds	r3, r7, r5
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <main+0x212>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 80018ea:	f001 f939 	bl	8002b60 <dispFault>
		}

		userAlarmToggle = false;			//Default to off
 80018ee:	4b69      	ldr	r3, [pc, #420]	@ (8001a94 <main+0x3b8>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

		if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 80018f4:	4b68      	ldr	r3, [pc, #416]	@ (8001a98 <main+0x3bc>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b59      	ldr	r3, [pc, #356]	@ (8001a60 <main+0x384>)
 80018fa:	0011      	movs	r1, r2
 80018fc:	0018      	movs	r0, r3
 80018fe:	f005 fe4f 	bl	80075a0 <HAL_RTCEx_BKUPRead>
 8001902:	0003      	movs	r3, r0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d11c      	bne.n	8001944 <main+0x268>

			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 800190a:	4b64      	ldr	r3, [pc, #400]	@ (8001a9c <main+0x3c0>)
 800190c:	6819      	ldr	r1, [r3, #0]
 800190e:	4b54      	ldr	r3, [pc, #336]	@ (8001a60 <main+0x384>)
 8001910:	2201      	movs	r2, #1
 8001912:	0018      	movs	r0, r3
 8001914:	f005 fe27 	bl	8007566 <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8001918:	4b61      	ldr	r3, [pc, #388]	@ (8001aa0 <main+0x3c4>)
 800191a:	6819      	ldr	r1, [r3, #0]
 800191c:	4b50      	ldr	r3, [pc, #320]	@ (8001a60 <main+0x384>)
 800191e:	2200      	movs	r2, #0
 8001920:	0018      	movs	r0, r3
 8001922:	f005 fe20 	bl	8007566 <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8001926:	4b5f      	ldr	r3, [pc, #380]	@ (8001aa4 <main+0x3c8>)
 8001928:	6819      	ldr	r1, [r3, #0]
 800192a:	4b4d      	ldr	r3, [pc, #308]	@ (8001a60 <main+0x384>)
 800192c:	2200      	movs	r2, #0
 800192e:	0018      	movs	r0, r3
 8001930:	f005 fe19 	bl	8007566 <HAL_RTCEx_BKUPWrite>

			// Write backup register with a non-zero value to signify that it has been initialized before
			HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8001934:	4b58      	ldr	r3, [pc, #352]	@ (8001a98 <main+0x3bc>)
 8001936:	6819      	ldr	r1, [r3, #0]
 8001938:	2301      	movs	r3, #1
 800193a:	425a      	negs	r2, r3
 800193c:	4b48      	ldr	r3, [pc, #288]	@ (8001a60 <main+0x384>)
 800193e:	0018      	movs	r0, r3
 8001940:	f005 fe11 	bl	8007566 <HAL_RTCEx_BKUPWrite>

		}

		userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8001944:	4b55      	ldr	r3, [pc, #340]	@ (8001a9c <main+0x3c0>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b45      	ldr	r3, [pc, #276]	@ (8001a60 <main+0x384>)
 800194a:	0011      	movs	r1, r2
 800194c:	0018      	movs	r0, r3
 800194e:	f005 fe27 	bl	80075a0 <HAL_RTCEx_BKUPRead>
 8001952:	0003      	movs	r3, r0
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b54      	ldr	r3, [pc, #336]	@ (8001aa8 <main+0x3cc>)
 8001958:	701a      	strb	r2, [r3, #0]
		userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 800195a:	4b51      	ldr	r3, [pc, #324]	@ (8001aa0 <main+0x3c4>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	4b40      	ldr	r3, [pc, #256]	@ (8001a60 <main+0x384>)
 8001960:	0011      	movs	r1, r2
 8001962:	0018      	movs	r0, r3
 8001964:	f005 fe1c 	bl	80075a0 <HAL_RTCEx_BKUPRead>
 8001968:	0003      	movs	r3, r0
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b4e      	ldr	r3, [pc, #312]	@ (8001aa8 <main+0x3cc>)
 800196e:	705a      	strb	r2, [r3, #1]
		userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 8001970:	4b4c      	ldr	r3, [pc, #304]	@ (8001aa4 <main+0x3c8>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b3a      	ldr	r3, [pc, #232]	@ (8001a60 <main+0x384>)
 8001976:	0011      	movs	r1, r2
 8001978:	0018      	movs	r0, r3
 800197a:	f005 fe11 	bl	80075a0 <HAL_RTCEx_BKUPRead>
 800197e:	0003      	movs	r3, r0
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b49      	ldr	r3, [pc, #292]	@ (8001aa8 <main+0x3cc>)
 8001984:	70da      	strb	r2, [r3, #3]


		// Init Memory Chip
		initRet = W25Q_Init(&spiFlash, nCSPort, nWPPort, nHOLDPort,
 8001986:	4b49      	ldr	r3, [pc, #292]	@ (8001aac <main+0x3d0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4698      	mov	r8, r3
 800198c:	4b48      	ldr	r3, [pc, #288]	@ (8001ab0 <main+0x3d4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4699      	mov	r9, r3
 8001992:	4b48      	ldr	r3, [pc, #288]	@ (8001ab4 <main+0x3d8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	469a      	mov	sl, r3
 8001998:	4b47      	ldr	r3, [pc, #284]	@ (8001ab8 <main+0x3dc>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b47      	ldr	r3, [pc, #284]	@ (8001abc <main+0x3e0>)
 800199e:	6819      	ldr	r1, [r3, #0]
 80019a0:	4b47      	ldr	r3, [pc, #284]	@ (8001ac0 <main+0x3e4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	469b      	mov	fp, r3
 80019a6:	4847      	ldr	r0, [pc, #284]	@ (8001ac4 <main+0x3e8>)
 80019a8:	7800      	ldrb	r0, [r0, #0]
 80019aa:	4c47      	ldr	r4, [pc, #284]	@ (8001ac8 <main+0x3ec>)
 80019ac:	7825      	ldrb	r5, [r4, #0]
 80019ae:	4c47      	ldr	r4, [pc, #284]	@ (8001acc <main+0x3f0>)
 80019b0:	7826      	ldrb	r6, [r4, #0]
 80019b2:	2416      	movs	r4, #22
 80019b4:	193c      	adds	r4, r7, r4
 80019b6:	4b46      	ldr	r3, [pc, #280]	@ (8001ad0 <main+0x3f4>)
 80019b8:	469c      	mov	ip, r3
 80019ba:	9606      	str	r6, [sp, #24]
 80019bc:	9505      	str	r5, [sp, #20]
 80019be:	9004      	str	r0, [sp, #16]
 80019c0:	4844      	ldr	r0, [pc, #272]	@ (8001ad4 <main+0x3f8>)
 80019c2:	9003      	str	r0, [sp, #12]
 80019c4:	465b      	mov	r3, fp
 80019c6:	9302      	str	r3, [sp, #8]
 80019c8:	9101      	str	r1, [sp, #4]
 80019ca:	9200      	str	r2, [sp, #0]
 80019cc:	4653      	mov	r3, sl
 80019ce:	464a      	mov	r2, r9
 80019d0:	4641      	mov	r1, r8
 80019d2:	4660      	mov	r0, ip
 80019d4:	f7ff f812 	bl	80009fc <W25Q_Init>
 80019d8:	0003      	movs	r3, r0
 80019da:	7023      	strb	r3, [r4, #0]
	    		 nCSPin, nWPPin, nHOLDPin, &hspi2, spiFlash_devID, spiFlash_isQuadChip, spiFlash_driveStrength);

		// Enter error loop if there's an error in initialization
		if( (initRet == 1) || (initRet == 7) ) {
 80019dc:	2216      	movs	r2, #22
 80019de:	18bb      	adds	r3, r7, r2
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d003      	beq.n	80019ee <main+0x312>
 80019e6:	18bb      	adds	r3, r7, r2
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b07      	cmp	r3, #7
 80019ec:	d102      	bne.n	80019f4 <main+0x318>
			/* Critical Errors:
			* 1 = Failure to release chip from power down
			* 7 = Failure to disable write protection
			*/
			dispFailure();
 80019ee:	f001 f8c7 	bl	8002b80 <dispFailure>
 80019f2:	e016      	b.n	8001a22 <main+0x346>
		}
		else if ( ((initRet >= 2) && (initRet <= 6)) || (initRet == 8) ) {
 80019f4:	2216      	movs	r2, #22
 80019f6:	18bb      	adds	r3, r7, r2
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d903      	bls.n	8001a06 <main+0x32a>
 80019fe:	18bb      	adds	r3, r7, r2
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d904      	bls.n	8001a10 <main+0x334>
 8001a06:	2316      	movs	r3, #22
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d102      	bne.n	8001a16 <main+0x33a>
			* 2 = Failure to reset chip
			* 3,6,8 = Failure to read status registers
			* 4 = Failure to set driver strength
			* 5 = Failure to read device ID
			*/
			dispFault();
 8001a10:	f001 f8a6 	bl	8002b60 <dispFault>
 8001a14:	e005      	b.n	8001a22 <main+0x346>
		}
		else if(initRet == 0) {
 8001a16:	2316      	movs	r3, #22
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d100      	bne.n	8001a22 <main+0x346>
			// initRet = 0 = all is well
			__NOP();
 8001a20:	46c0      	nop			@ (mov r8, r8)
		}


		// Init i2s amplifier
		NAU8315YG_Init(&i2sAmp, &hi2s1, i2sAmp_enablePort, i2sAmp_enablePin);
 8001a22:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad8 <main+0x3fc>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b2d      	ldr	r3, [pc, #180]	@ (8001adc <main+0x400>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	492d      	ldr	r1, [pc, #180]	@ (8001ae0 <main+0x404>)
 8001a2c:	482d      	ldr	r0, [pc, #180]	@ (8001ae4 <main+0x408>)
 8001a2e:	f7fe ffa5 	bl	800097c <NAU8315YG_Init>

		// Increase SPI clk driver power
		GPIOA->OSPEEDR |= 0b11;
 8001a32:	23a0      	movs	r3, #160	@ 0xa0
 8001a34:	05db      	lsls	r3, r3, #23
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	23a0      	movs	r3, #160	@ 0xa0
 8001a3a:	05db      	lsls	r3, r3, #23
 8001a3c:	2103      	movs	r1, #3
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	609a      	str	r2, [r3, #8]


  while (1)
  {
    /* USER CODE END WHILE */
	  if(beepMode) {
 8001a42:	4b29      	ldr	r3, [pc, #164]	@ (8001ae8 <main+0x40c>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0fb      	beq.n	8001a42 <main+0x366>
		  userAlarmBeep();
 8001a4a:	f000 fc7d 	bl	8002348 <userAlarmBeep>
	  if(beepMode) {
 8001a4e:	e7f8      	b.n	8001a42 <main+0x366>
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20000040 	.word	0x20000040
 8001a58:	200000e8 	.word	0x200000e8
 8001a5c:	2000002c 	.word	0x2000002c
 8001a60:	200001d8 	.word	0x200001d8
 8001a64:	200000cc 	.word	0x200000cc
 8001a68:	200000b8 	.word	0x200000b8
 8001a6c:	2000006c 	.word	0x2000006c
 8001a70:	20000068 	.word	0x20000068
 8001a74:	20000030 	.word	0x20000030
 8001a78:	20000014 	.word	0x20000014
 8001a7c:	20000010 	.word	0x20000010
 8001a80:	2000000c 	.word	0x2000000c
 8001a84:	200000ec 	.word	0x200000ec
 8001a88:	20000408 	.word	0x20000408
 8001a8c:	20000011 	.word	0x20000011
 8001a90:	20000012 	.word	0x20000012
 8001a94:	200000b5 	.word	0x200000b5
 8001a98:	2000003c 	.word	0x2000003c
 8001a9c:	200000e4 	.word	0x200000e4
 8001aa0:	20000034 	.word	0x20000034
 8001aa4:	20000038 	.word	0x20000038
 8001aa8:	200000d0 	.word	0x200000d0
 8001aac:	20000044 	.word	0x20000044
 8001ab0:	20000048 	.word	0x20000048
 8001ab4:	2000004c 	.word	0x2000004c
 8001ab8:	20000050 	.word	0x20000050
 8001abc:	20000054 	.word	0x20000054
 8001ac0:	20000058 	.word	0x20000058
 8001ac4:	2000005c 	.word	0x2000005c
 8001ac8:	2000005d 	.word	0x2000005d
 8001acc:	2000005e 	.word	0x2000005e
 8001ad0:	2000041c 	.word	0x2000041c
 8001ad4:	20000204 	.word	0x20000204
 8001ad8:	20000060 	.word	0x20000060
 8001adc:	20000064 	.word	0x20000064
 8001ae0:	20000140 	.word	0x20000140
 8001ae4:	20000444 	.word	0x20000444
 8001ae8:	20000407 	.word	0x20000407

08001aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b093      	sub	sp, #76	@ 0x4c
 8001af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001af2:	2410      	movs	r4, #16
 8001af4:	193b      	adds	r3, r7, r4
 8001af6:	0018      	movs	r0, r3
 8001af8:	2338      	movs	r3, #56	@ 0x38
 8001afa:	001a      	movs	r2, r3
 8001afc:	2100      	movs	r1, #0
 8001afe:	f007 fcf9 	bl	80094f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b02:	003b      	movs	r3, r7
 8001b04:	0018      	movs	r0, r3
 8001b06:	2310      	movs	r3, #16
 8001b08:	001a      	movs	r2, r3
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	f007 fcf2 	bl	80094f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b10:	2380      	movs	r3, #128	@ 0x80
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	0018      	movs	r0, r3
 8001b16:	f003 fe73 	bl	8005800 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b1a:	f003 fe63 	bl	80057e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b1e:	4b25      	ldr	r3, [pc, #148]	@ (8001bb4 <SystemClock_Config+0xc8>)
 8001b20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b22:	4b24      	ldr	r3, [pc, #144]	@ (8001bb4 <SystemClock_Config+0xc8>)
 8001b24:	2118      	movs	r1, #24
 8001b26:	438a      	bics	r2, r1
 8001b28:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001b2a:	193b      	adds	r3, r7, r4
 8001b2c:	2205      	movs	r2, #5
 8001b2e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b30:	193b      	adds	r3, r7, r4
 8001b32:	2280      	movs	r2, #128	@ 0x80
 8001b34:	0252      	lsls	r2, r2, #9
 8001b36:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b38:	0021      	movs	r1, r4
 8001b3a:	187b      	adds	r3, r7, r1
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b40:	187b      	adds	r3, r7, r1
 8001b42:	2202      	movs	r2, #2
 8001b44:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001b4c:	187b      	adds	r3, r7, r1
 8001b4e:	2200      	movs	r2, #0
 8001b50:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001b52:	187b      	adds	r3, r7, r1
 8001b54:	2208      	movs	r2, #8
 8001b56:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b58:	187b      	adds	r3, r7, r1
 8001b5a:	22c0      	movs	r2, #192	@ 0xc0
 8001b5c:	02d2      	lsls	r2, r2, #11
 8001b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	2280      	movs	r2, #128	@ 0x80
 8001b64:	0492      	lsls	r2, r2, #18
 8001b66:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b68:	187b      	adds	r3, r7, r1
 8001b6a:	2280      	movs	r2, #128	@ 0x80
 8001b6c:	0592      	lsls	r2, r2, #22
 8001b6e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b70:	187b      	adds	r3, r7, r1
 8001b72:	0018      	movs	r0, r3
 8001b74:	f003 fe90 	bl	8005898 <HAL_RCC_OscConfig>
 8001b78:	1e03      	subs	r3, r0, #0
 8001b7a:	d001      	beq.n	8001b80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b7c:	f001 f945 	bl	8002e0a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b80:	003b      	movs	r3, r7
 8001b82:	2207      	movs	r2, #7
 8001b84:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b86:	003b      	movs	r3, r7
 8001b88:	2202      	movs	r2, #2
 8001b8a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8c:	003b      	movs	r3, r7
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b92:	003b      	movs	r3, r7
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b98:	003b      	movs	r3, r7
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f004 f995 	bl	8005ecc <HAL_RCC_ClockConfig>
 8001ba2:	1e03      	subs	r3, r0, #0
 8001ba4:	d001      	beq.n	8001baa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001ba6:	f001 f930 	bl	8002e0a <Error_Handler>
  }
}
 8001baa:	46c0      	nop			@ (mov r8, r8)
 8001bac:	46bd      	mov	sp, r7
 8001bae:	b013      	add	sp, #76	@ 0x4c
 8001bb0:	bd90      	pop	{r4, r7, pc}
 8001bb2:	46c0      	nop			@ (mov r8, r8)
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <MX_I2C1_Init+0x74>)
 8001bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001c30 <MX_I2C1_Init+0x78>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12166;
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <MX_I2C1_Init+0x74>)
 8001bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c34 <MX_I2C1_Init+0x7c>)
 8001bc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bc8:	4b18      	ldr	r3, [pc, #96]	@ (8001c2c <MX_I2C1_Init+0x74>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bce:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <MX_I2C1_Init+0x74>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bd4:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <MX_I2C1_Init+0x74>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bda:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <MX_I2C1_Init+0x74>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001be0:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <MX_I2C1_Init+0x74>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001be6:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <MX_I2C1_Init+0x74>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bec:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <MX_I2C1_Init+0x74>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <MX_I2C1_Init+0x74>)
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f002 fcb1 	bl	800455c <HAL_I2C_Init>
 8001bfa:	1e03      	subs	r3, r0, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001bfe:	f001 f904 	bl	8002e0a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c02:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <MX_I2C1_Init+0x74>)
 8001c04:	2100      	movs	r1, #0
 8001c06:	0018      	movs	r0, r3
 8001c08:	f003 fa54 	bl	80050b4 <HAL_I2CEx_ConfigAnalogFilter>
 8001c0c:	1e03      	subs	r3, r0, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c10:	f001 f8fb 	bl	8002e0a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c14:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <MX_I2C1_Init+0x74>)
 8001c16:	2100      	movs	r1, #0
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f003 fa97 	bl	800514c <HAL_I2CEx_ConfigDigitalFilter>
 8001c1e:	1e03      	subs	r3, r0, #0
 8001c20:	d001      	beq.n	8001c26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c22:	f001 f8f2 	bl	8002e0a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	200000ec 	.word	0x200000ec
 8001c30:	40005400 	.word	0x40005400
 8001c34:	00c12166 	.word	0x00c12166

08001c38 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001c3c:	4b10      	ldr	r3, [pc, #64]	@ (8001c80 <MX_I2S1_Init+0x48>)
 8001c3e:	4a11      	ldr	r2, [pc, #68]	@ (8001c84 <MX_I2S1_Init+0x4c>)
 8001c40:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8001c42:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <MX_I2S1_Init+0x48>)
 8001c44:	2280      	movs	r2, #128	@ 0x80
 8001c46:	0092      	lsls	r2, r2, #2
 8001c48:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c80 <MX_I2S1_Init+0x48>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <MX_I2S1_Init+0x48>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001c56:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <MX_I2S1_Init+0x48>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001c5c:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <MX_I2S1_Init+0x48>)
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <MX_I2S1_Init+0x50>)
 8001c60:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8001c62:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <MX_I2S1_Init+0x48>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001c68:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <MX_I2S1_Init+0x48>)
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f003 faba 	bl	80051e4 <HAL_I2S_Init>
 8001c70:	1e03      	subs	r3, r0, #0
 8001c72:	d001      	beq.n	8001c78 <MX_I2S1_Init+0x40>
  {
    Error_Handler();
 8001c74:	f001 f8c9 	bl	8002e0a <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8001c78:	46c0      	nop			@ (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	20000140 	.word	0x20000140
 8001c84:	40013000 	.word	0x40013000
 8001c88:	0000ac44 	.word	0x0000ac44

08001c8c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	@ 0x28
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 0 */

//  RTC_TimeTypeDef sTime = {0};
//  RTC_DateTypeDef sDate = {0};
  RTC_AlarmTypeDef sAlarm = {0};
 8001c92:	003b      	movs	r3, r7
 8001c94:	0018      	movs	r0, r3
 8001c96:	2328      	movs	r3, #40	@ 0x28
 8001c98:	001a      	movs	r2, r3
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	f007 fc2a 	bl	80094f4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d5c <MX_RTC_Init+0xd0>)
 8001ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8001d60 <MX_RTC_Init+0xd4>)
 8001ca4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d5c <MX_RTC_Init+0xd0>)
 8001ca8:	2240      	movs	r2, #64	@ 0x40
 8001caa:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8001cac:	4b2b      	ldr	r3, [pc, #172]	@ (8001d5c <MX_RTC_Init+0xd0>)
 8001cae:	227f      	movs	r2, #127	@ 0x7f
 8001cb0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8001cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d5c <MX_RTC_Init+0xd0>)
 8001cb4:	22ff      	movs	r2, #255	@ 0xff
 8001cb6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cb8:	4b28      	ldr	r3, [pc, #160]	@ (8001d5c <MX_RTC_Init+0xd0>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001cbe:	4b27      	ldr	r3, [pc, #156]	@ (8001d5c <MX_RTC_Init+0xd0>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cc4:	4b25      	ldr	r3, [pc, #148]	@ (8001d5c <MX_RTC_Init+0xd0>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cca:	4b24      	ldr	r3, [pc, #144]	@ (8001d5c <MX_RTC_Init+0xd0>)
 8001ccc:	2280      	movs	r2, #128	@ 0x80
 8001cce:	05d2      	lsls	r2, r2, #23
 8001cd0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001cd2:	4b22      	ldr	r3, [pc, #136]	@ (8001d5c <MX_RTC_Init+0xd0>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cd8:	4b20      	ldr	r3, [pc, #128]	@ (8001d5c <MX_RTC_Init+0xd0>)
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f004 feb0 	bl	8006a40 <HAL_RTC_Init>
 8001ce0:	1e03      	subs	r3, r0, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001ce4:	f001 f891 	bl	8002e0a <Error_Handler>
//    Error_Handler();
//  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8001ce8:	003b      	movs	r3, r7
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001cee:	003b      	movs	r3, r7
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001cf4:	003b      	movs	r3, r7
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001cfa:	003b      	movs	r3, r7
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001d00:	003b      	movs	r3, r7
 8001d02:	2200      	movs	r2, #0
 8001d04:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d06:	003b      	movs	r3, r7
 8001d08:	2200      	movs	r2, #0
 8001d0a:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d0c:	003b      	movs	r3, r7
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8001d12:	003b      	movs	r3, r7
 8001d14:	4a13      	ldr	r2, [pc, #76]	@ (8001d64 <MX_RTC_Init+0xd8>)
 8001d16:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d18:	003b      	movs	r3, r7
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d1e:	003b      	movs	r3, r7
 8001d20:	2200      	movs	r2, #0
 8001d22:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d24:	003b      	movs	r3, r7
 8001d26:	2220      	movs	r2, #32
 8001d28:	2101      	movs	r1, #1
 8001d2a:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d2c:	003b      	movs	r3, r7
 8001d2e:	2280      	movs	r2, #128	@ 0x80
 8001d30:	0052      	lsls	r2, r2, #1
 8001d32:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d34:	0039      	movs	r1, r7
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <MX_RTC_Init+0xd0>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f005 f874 	bl	8006e28 <HAL_RTC_SetAlarm_IT>
 8001d40:	1e03      	subs	r3, r0, #0
 8001d42:	d001      	beq.n	8001d48 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8001d44:	f001 f861 	bl	8002e0a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8001d48:	4907      	ldr	r1, [pc, #28]	@ (8001d68 <MX_RTC_Init+0xdc>)
 8001d4a:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <MX_RTC_Init+0xd0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f004 ffc0 	bl	8006cd4 <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8001d54:	46c0      	nop			@ (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b00a      	add	sp, #40	@ 0x28
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	200001d8 	.word	0x200001d8
 8001d60:	40002800 	.word	0x40002800
 8001d64:	80800080 	.word	0x80800080
 8001d68:	200000b8 	.word	0x200000b8

08001d6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d70:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <MX_SPI2_Init+0x74>)
 8001d72:	4a1c      	ldr	r2, [pc, #112]	@ (8001de4 <MX_SPI2_Init+0x78>)
 8001d74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <MX_SPI2_Init+0x74>)
 8001d78:	2282      	movs	r2, #130	@ 0x82
 8001d7a:	0052      	lsls	r2, r2, #1
 8001d7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d7e:	4b18      	ldr	r3, [pc, #96]	@ (8001de0 <MX_SPI2_Init+0x74>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d84:	4b16      	ldr	r3, [pc, #88]	@ (8001de0 <MX_SPI2_Init+0x74>)
 8001d86:	22e0      	movs	r2, #224	@ 0xe0
 8001d88:	00d2      	lsls	r2, r2, #3
 8001d8a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d8c:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <MX_SPI2_Init+0x74>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d92:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <MX_SPI2_Init+0x74>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <MX_SPI2_Init+0x74>)
 8001d9a:	2280      	movs	r2, #128	@ 0x80
 8001d9c:	0092      	lsls	r2, r2, #2
 8001d9e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <MX_SPI2_Init+0x74>)
 8001da2:	2208      	movs	r2, #8
 8001da4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <MX_SPI2_Init+0x74>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <MX_SPI2_Init+0x74>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <MX_SPI2_Init+0x74>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <MX_SPI2_Init+0x74>)
 8001dba:	2207      	movs	r2, #7
 8001dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <MX_SPI2_Init+0x74>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <MX_SPI2_Init+0x74>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dca:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <MX_SPI2_Init+0x74>)
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f005 fc03 	bl	80075d8 <HAL_SPI_Init>
 8001dd2:	1e03      	subs	r3, r0, #0
 8001dd4:	d001      	beq.n	8001dda <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001dd6:	f001 f818 	bl	8002e0a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000204 	.word	0x20000204
 8001de4:	40003800 	.word	0x40003800

08001de8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	@ 0x28
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dee:	231c      	movs	r3, #28
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	0018      	movs	r0, r3
 8001df4:	230c      	movs	r3, #12
 8001df6:	001a      	movs	r2, r3
 8001df8:	2100      	movs	r1, #0
 8001dfa:	f007 fb7b 	bl	80094f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dfe:	003b      	movs	r3, r7
 8001e00:	0018      	movs	r0, r3
 8001e02:	231c      	movs	r3, #28
 8001e04:	001a      	movs	r2, r3
 8001e06:	2100      	movs	r1, #0
 8001e08:	f007 fb74 	bl	80094f4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e0c:	4b24      	ldr	r3, [pc, #144]	@ (8001ea0 <MX_TIM2_Init+0xb8>)
 8001e0e:	2280      	movs	r2, #128	@ 0x80
 8001e10:	05d2      	lsls	r2, r2, #23
 8001e12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8001e14:	4b22      	ldr	r3, [pc, #136]	@ (8001ea0 <MX_TIM2_Init+0xb8>)
 8001e16:	4a23      	ldr	r2, [pc, #140]	@ (8001ea4 <MX_TIM2_Init+0xbc>)
 8001e18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1a:	4b21      	ldr	r3, [pc, #132]	@ (8001ea0 <MX_TIM2_Init+0xb8>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001e20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea0 <MX_TIM2_Init+0xb8>)
 8001e22:	2263      	movs	r2, #99	@ 0x63
 8001e24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea0 <MX_TIM2_Init+0xb8>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea0 <MX_TIM2_Init+0xb8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e32:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea0 <MX_TIM2_Init+0xb8>)
 8001e34:	0018      	movs	r0, r3
 8001e36:	f006 fc3b 	bl	80086b0 <HAL_TIM_PWM_Init>
 8001e3a:	1e03      	subs	r3, r0, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001e3e:	f000 ffe4 	bl	8002e0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e42:	211c      	movs	r1, #28
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4a:	187b      	adds	r3, r7, r1
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e50:	187a      	adds	r2, r7, r1
 8001e52:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <MX_TIM2_Init+0xb8>)
 8001e54:	0011      	movs	r1, r2
 8001e56:	0018      	movs	r0, r3
 8001e58:	f007 facc 	bl	80093f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5c:	1e03      	subs	r3, r0, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001e60:	f000 ffd3 	bl	8002e0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e64:	003b      	movs	r3, r7
 8001e66:	2260      	movs	r2, #96	@ 0x60
 8001e68:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001e6a:	003b      	movs	r3, r7
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e70:	003b      	movs	r3, r7
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e76:	003b      	movs	r3, r7
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e7c:	0039      	movs	r1, r7
 8001e7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <MX_TIM2_Init+0xb8>)
 8001e80:	2208      	movs	r2, #8
 8001e82:	0018      	movs	r0, r3
 8001e84:	f006 fe52 	bl	8008b2c <HAL_TIM_PWM_ConfigChannel>
 8001e88:	1e03      	subs	r3, r0, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001e8c:	f000 ffbd 	bl	8002e0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e90:	4b03      	ldr	r3, [pc, #12]	@ (8001ea0 <MX_TIM2_Init+0xb8>)
 8001e92:	0018      	movs	r0, r3
 8001e94:	f001 fc82 	bl	800379c <HAL_TIM_MspPostInit>

}
 8001e98:	46c0      	nop			@ (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b00a      	add	sp, #40	@ 0x28
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000320 	.word	0x20000320
 8001ea4:	0000031f 	.word	0x0000031f

08001ea8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001eac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee8 <MX_TIM14_Init+0x40>)
 8001eae:	4a0f      	ldr	r2, [pc, #60]	@ (8001eec <MX_TIM14_Init+0x44>)
 8001eb0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee8 <MX_TIM14_Init+0x40>)
 8001eb4:	22f4      	movs	r2, #244	@ 0xf4
 8001eb6:	0092      	lsls	r2, r2, #2
 8001eb8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <MX_TIM14_Init+0x40>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <MX_TIM14_Init+0x40>)
 8001ec2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef0 <MX_TIM14_Init+0x48>)
 8001ec4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <MX_TIM14_Init+0x40>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <MX_TIM14_Init+0x40>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001ed2:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <MX_TIM14_Init+0x40>)
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f006 fa9f 	bl	8008418 <HAL_TIM_Base_Init>
 8001eda:	1e03      	subs	r3, r0, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001ede:	f000 ff94 	bl	8002e0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001ee2:	46c0      	nop			@ (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	2000036c 	.word	0x2000036c
 8001eec:	40002000 	.word	0x40002000
 8001ef0:	0000ffff 	.word	0x0000ffff

08001ef4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001ef8:	4b16      	ldr	r3, [pc, #88]	@ (8001f54 <MX_TIM16_Init+0x60>)
 8001efa:	4a17      	ldr	r2, [pc, #92]	@ (8001f58 <MX_TIM16_Init+0x64>)
 8001efc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = (58595 / 10) - 1;
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <MX_TIM16_Init+0x60>)
 8001f00:	4a16      	ldr	r2, [pc, #88]	@ (8001f5c <MX_TIM16_Init+0x68>)
 8001f02:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f04:	4b13      	ldr	r3, [pc, #76]	@ (8001f54 <MX_TIM16_Init+0x60>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001f0a:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <MX_TIM16_Init+0x60>)
 8001f0c:	4a14      	ldr	r2, [pc, #80]	@ (8001f60 <MX_TIM16_Init+0x6c>)
 8001f0e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f10:	4b10      	ldr	r3, [pc, #64]	@ (8001f54 <MX_TIM16_Init+0x60>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001f16:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <MX_TIM16_Init+0x60>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f54 <MX_TIM16_Init+0x60>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f22:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <MX_TIM16_Init+0x60>)
 8001f24:	0018      	movs	r0, r3
 8001f26:	f006 fa77 	bl	8008418 <HAL_TIM_Base_Init>
 8001f2a:	1e03      	subs	r3, r0, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001f2e:	f000 ff6c 	bl	8002e0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  // Decrease interrupt priority
  HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2101      	movs	r1, #1
 8001f36:	2015      	movs	r0, #21
 8001f38:	f001 fe46 	bl	8003bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001f3c:	2015      	movs	r0, #21
 8001f3e:	f001 fe58 	bl	8003bf2 <HAL_NVIC_EnableIRQ>

  // Clear SR interrupts
  __HAL_TIM_CLEAR_IT(timerSnooze, TIM_IT_UPDATE);
 8001f42:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <MX_TIM16_Init+0x70>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	4252      	negs	r2, r2
 8001f4c:	611a      	str	r2, [r3, #16]

  /* USER CODE END TIM16_Init 2 */

}
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	200003b8 	.word	0x200003b8
 8001f58:	40014400 	.word	0x40014400
 8001f5c:	000016e2 	.word	0x000016e2
 8001f60:	0000ffff 	.word	0x0000ffff
 8001f64:	20000070 	.word	0x20000070

08001f68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f6e:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <MX_DMA_Init+0x48>)
 8001f70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f72:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <MX_DMA_Init+0x48>)
 8001f74:	2101      	movs	r1, #1
 8001f76:	430a      	orrs	r2, r1
 8001f78:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb0 <MX_DMA_Init+0x48>)
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2009      	movs	r0, #9
 8001f8c:	f001 fe1c 	bl	8003bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f90:	2009      	movs	r0, #9
 8001f92:	f001 fe2e 	bl	8003bf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	200a      	movs	r0, #10
 8001f9c:	f001 fe14 	bl	8003bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001fa0:	200a      	movs	r0, #10
 8001fa2:	f001 fe26 	bl	8003bf2 <HAL_NVIC_EnableIRQ>

}
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b002      	add	sp, #8
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			@ (mov r8, r8)
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b08b      	sub	sp, #44	@ 0x2c
 8001fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fba:	2414      	movs	r4, #20
 8001fbc:	193b      	adds	r3, r7, r4
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	2314      	movs	r3, #20
 8001fc2:	001a      	movs	r2, r3
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	f007 fa95 	bl	80094f4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fca:	4b76      	ldr	r3, [pc, #472]	@ (80021a4 <MX_GPIO_Init+0x1f0>)
 8001fcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fce:	4b75      	ldr	r3, [pc, #468]	@ (80021a4 <MX_GPIO_Init+0x1f0>)
 8001fd0:	2104      	movs	r1, #4
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fd6:	4b73      	ldr	r3, [pc, #460]	@ (80021a4 <MX_GPIO_Init+0x1f0>)
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fda:	2204      	movs	r2, #4
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fe2:	4b70      	ldr	r3, [pc, #448]	@ (80021a4 <MX_GPIO_Init+0x1f0>)
 8001fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fe6:	4b6f      	ldr	r3, [pc, #444]	@ (80021a4 <MX_GPIO_Init+0x1f0>)
 8001fe8:	2120      	movs	r1, #32
 8001fea:	430a      	orrs	r2, r1
 8001fec:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fee:	4b6d      	ldr	r3, [pc, #436]	@ (80021a4 <MX_GPIO_Init+0x1f0>)
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	4b6a      	ldr	r3, [pc, #424]	@ (80021a4 <MX_GPIO_Init+0x1f0>)
 8001ffc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ffe:	4b69      	ldr	r3, [pc, #420]	@ (80021a4 <MX_GPIO_Init+0x1f0>)
 8002000:	2101      	movs	r1, #1
 8002002:	430a      	orrs	r2, r1
 8002004:	635a      	str	r2, [r3, #52]	@ 0x34
 8002006:	4b67      	ldr	r3, [pc, #412]	@ (80021a4 <MX_GPIO_Init+0x1f0>)
 8002008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800200a:	2201      	movs	r2, #1
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	4b64      	ldr	r3, [pc, #400]	@ (80021a4 <MX_GPIO_Init+0x1f0>)
 8002014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002016:	4b63      	ldr	r3, [pc, #396]	@ (80021a4 <MX_GPIO_Init+0x1f0>)
 8002018:	2102      	movs	r1, #2
 800201a:	430a      	orrs	r2, r1
 800201c:	635a      	str	r2, [r3, #52]	@ 0x34
 800201e:	4b61      	ldr	r3, [pc, #388]	@ (80021a4 <MX_GPIO_Init+0x1f0>)
 8002020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002022:	2202      	movs	r2, #2
 8002024:	4013      	ands	r3, r2
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800202a:	4b5e      	ldr	r3, [pc, #376]	@ (80021a4 <MX_GPIO_Init+0x1f0>)
 800202c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800202e:	4b5d      	ldr	r3, [pc, #372]	@ (80021a4 <MX_GPIO_Init+0x1f0>)
 8002030:	2108      	movs	r1, #8
 8002032:	430a      	orrs	r2, r1
 8002034:	635a      	str	r2, [r3, #52]	@ 0x34
 8002036:	4b5b      	ldr	r3, [pc, #364]	@ (80021a4 <MX_GPIO_Init+0x1f0>)
 8002038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800203a:	2208      	movs	r2, #8
 800203c:	4013      	ands	r3, r2
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8002042:	2382      	movs	r3, #130	@ 0x82
 8002044:	019b      	lsls	r3, r3, #6
 8002046:	4858      	ldr	r0, [pc, #352]	@ (80021a8 <MX_GPIO_Init+0x1f4>)
 8002048:	2200      	movs	r2, #0
 800204a:	0019      	movs	r1, r3
 800204c:	f002 fa23 	bl	8004496 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_MCLR_Pin, GPIO_PIN_SET);
 8002050:	238e      	movs	r3, #142	@ 0x8e
 8002052:	0119      	lsls	r1, r3, #4
 8002054:	23a0      	movs	r3, #160	@ 0xa0
 8002056:	05db      	lsls	r3, r3, #23
 8002058:	2201      	movs	r2, #1
 800205a:	0018      	movs	r0, r3
 800205c:	f002 fa1b 	bl	8004496 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_ENABLE_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8002060:	4952      	ldr	r1, [pc, #328]	@ (80021ac <MX_GPIO_Init+0x1f8>)
 8002062:	4b53      	ldr	r3, [pc, #332]	@ (80021b0 <MX_GPIO_Init+0x1fc>)
 8002064:	2200      	movs	r2, #0
 8002066:	0018      	movs	r0, r3
 8002068:	f002 fa15 	bl	8004496 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin, GPIO_PIN_RESET);
 800206c:	23c0      	movs	r3, #192	@ 0xc0
 800206e:	00d9      	lsls	r1, r3, #3
 8002070:	23a0      	movs	r3, #160	@ 0xa0
 8002072:	05db      	lsls	r3, r3, #23
 8002074:	2200      	movs	r2, #0
 8002076:	0018      	movs	r0, r3
 8002078:	f002 fa0d 	bl	8004496 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAPTOUCH_RESET_GPIO_Port, CAPTOUCH_RESET_Pin, GPIO_PIN_SET);
 800207c:	2380      	movs	r3, #128	@ 0x80
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	484b      	ldr	r0, [pc, #300]	@ (80021b0 <MX_GPIO_Init+0x1fc>)
 8002082:	2201      	movs	r2, #1
 8002084:	0019      	movs	r1, r3
 8002086:	f002 fa06 	bl	8004496 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|SHIFT_STORE_CLK_Pin;
 800208a:	193b      	adds	r3, r7, r4
 800208c:	2282      	movs	r2, #130	@ 0x82
 800208e:	0192      	lsls	r2, r2, #6
 8002090:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002092:	193b      	adds	r3, r7, r4
 8002094:	2201      	movs	r2, #1
 8002096:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	193b      	adds	r3, r7, r4
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	193b      	adds	r3, r7, r4
 80020a0:	2200      	movs	r2, #0
 80020a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a4:	193b      	adds	r3, r7, r4
 80020a6:	4a40      	ldr	r2, [pc, #256]	@ (80021a8 <MX_GPIO_Init+0x1f4>)
 80020a8:	0019      	movs	r1, r3
 80020aa:	0010      	movs	r0, r2
 80020ac:	f002 f872 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CHIP_SELECT_Pin MEM_nWP_Pin MEM_nHOLD_Pin SHIFT_DATA_IN_Pin
                           SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_DATA_IN_Pin
 80020b0:	0021      	movs	r1, r4
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	22ee      	movs	r2, #238	@ 0xee
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	601a      	str	r2, [r3, #0]
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ba:	000c      	movs	r4, r1
 80020bc:	193b      	adds	r3, r7, r4
 80020be:	2201      	movs	r2, #1
 80020c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	193b      	adds	r3, r7, r4
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	193b      	adds	r3, r7, r4
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ce:	193a      	adds	r2, r7, r4
 80020d0:	23a0      	movs	r3, #160	@ 0xa0
 80020d2:	05db      	lsls	r3, r3, #23
 80020d4:	0011      	movs	r1, r2
 80020d6:	0018      	movs	r0, r3
 80020d8:	f002 f85c 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_ENABLE_Pin DEBUG_LED_Pin CAPTOUCH_RESET_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin;
 80020dc:	193b      	adds	r3, r7, r4
 80020de:	4a35      	ldr	r2, [pc, #212]	@ (80021b4 <MX_GPIO_Init+0x200>)
 80020e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e2:	193b      	adds	r3, r7, r4
 80020e4:	2201      	movs	r2, #1
 80020e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	193b      	adds	r3, r7, r4
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	193b      	adds	r3, r7, r4
 80020f0:	2200      	movs	r2, #0
 80020f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f4:	193b      	adds	r3, r7, r4
 80020f6:	4a2e      	ldr	r2, [pc, #184]	@ (80021b0 <MX_GPIO_Init+0x1fc>)
 80020f8:	0019      	movs	r1, r3
 80020fa:	0010      	movs	r0, r2
 80020fc:	f002 f84a 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_SET_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = ALARM_SET_BUTTON_EXTI_Pin;
 8002100:	193b      	adds	r3, r7, r4
 8002102:	2280      	movs	r2, #128	@ 0x80
 8002104:	0212      	lsls	r2, r2, #8
 8002106:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002108:	193b      	adds	r3, r7, r4
 800210a:	2284      	movs	r2, #132	@ 0x84
 800210c:	0392      	lsls	r2, r2, #14
 800210e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002110:	193b      	adds	r3, r7, r4
 8002112:	2201      	movs	r2, #1
 8002114:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALARM_SET_BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 8002116:	193a      	adds	r2, r7, r4
 8002118:	23a0      	movs	r3, #160	@ 0xa0
 800211a:	05db      	lsls	r3, r3, #23
 800211c:	0011      	movs	r1, r2
 800211e:	0018      	movs	r0, r3
 8002120:	f002 f838 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_EXTI_Pin MINUTE_SET_BUTTON_EXTI_Pin ALARM_EN_BUTTON_EXTI_Pin DISPLAY_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_EXTI_Pin|MINUTE_SET_BUTTON_EXTI_Pin|ALARM_EN_BUTTON_EXTI_Pin|DISPLAY_BUTTON_EXTI_Pin;
 8002124:	0021      	movs	r1, r4
 8002126:	187b      	adds	r3, r7, r1
 8002128:	220f      	movs	r2, #15
 800212a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800212c:	187b      	adds	r3, r7, r1
 800212e:	2284      	movs	r2, #132	@ 0x84
 8002130:	0392      	lsls	r2, r2, #14
 8002132:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002134:	187b      	adds	r3, r7, r1
 8002136:	2201      	movs	r2, #1
 8002138:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800213a:	000c      	movs	r4, r1
 800213c:	187b      	adds	r3, r7, r1
 800213e:	4a1e      	ldr	r2, [pc, #120]	@ (80021b8 <MX_GPIO_Init+0x204>)
 8002140:	0019      	movs	r1, r3
 8002142:	0010      	movs	r0, r2
 8002144:	f002 f826 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIME_SWITCH_EXTI_Pin */
  GPIO_InitStruct.Pin = TIME_SWITCH_EXTI_Pin;
 8002148:	0021      	movs	r1, r4
 800214a:	187b      	adds	r3, r7, r1
 800214c:	2210      	movs	r2, #16
 800214e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002150:	187b      	adds	r3, r7, r1
 8002152:	22c4      	movs	r2, #196	@ 0xc4
 8002154:	0392      	lsls	r2, r2, #14
 8002156:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002158:	187b      	adds	r3, r7, r1
 800215a:	2201      	movs	r2, #1
 800215c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TIME_SWITCH_EXTI_GPIO_Port, &GPIO_InitStruct);
 800215e:	187b      	adds	r3, r7, r1
 8002160:	4a13      	ldr	r2, [pc, #76]	@ (80021b0 <MX_GPIO_Init+0x1fc>)
 8002162:	0019      	movs	r1, r3
 8002164:	0010      	movs	r0, r2
 8002166:	f002 f815 	bl	8004194 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2101      	movs	r1, #1
 800216e:	2005      	movs	r0, #5
 8002170:	f001 fd2a 	bl	8003bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002174:	2005      	movs	r0, #5
 8002176:	f001 fd3c 	bl	8003bf2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	2102      	movs	r1, #2
 800217e:	2006      	movs	r0, #6
 8002180:	f001 fd22 	bl	8003bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002184:	2006      	movs	r0, #6
 8002186:	f001 fd34 	bl	8003bf2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2102      	movs	r1, #2
 800218e:	2007      	movs	r0, #7
 8002190:	f001 fd1a 	bl	8003bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002194:	2007      	movs	r0, #7
 8002196:	f001 fd2c 	bl	8003bf2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800219a:	46c0      	nop			@ (mov r8, r8)
 800219c:	46bd      	mov	sp, r7
 800219e:	b00b      	add	sp, #44	@ 0x2c
 80021a0:	bd90      	pop	{r4, r7, pc}
 80021a2:	46c0      	nop			@ (mov r8, r8)
 80021a4:	40021000 	.word	0x40021000
 80021a8:	50000800 	.word	0x50000800
 80021ac:	00001002 	.word	0x00001002
 80021b0:	50000400 	.word	0x50000400
 80021b4:	00001102 	.word	0x00001102
 80021b8:	50000c00 	.word	0x50000c00

080021bc <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80021c2:	2317      	movs	r3, #23
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 80021ca:	4a14      	ldr	r2, [pc, #80]	@ (800221c <updateAndDisplayTime+0x60>)
 80021cc:	4914      	ldr	r1, [pc, #80]	@ (8002220 <updateAndDisplayTime+0x64>)
 80021ce:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <updateAndDisplayTime+0x68>)
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7ff fa6d 	bl	80016b0 <getRTCTime>

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 80021d6:	4b14      	ldr	r3, [pc, #80]	@ (8002228 <updateAndDisplayTime+0x6c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10e      	bne.n	80021fc <updateAndDisplayTime+0x40>

		RTC_TimeTypeDef currTimeMil = conv2Mil(&currTime);
 80021de:	003b      	movs	r3, r7
 80021e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002220 <updateAndDisplayTime+0x64>)
 80021e2:	0011      	movs	r1, r2
 80021e4:	0018      	movs	r0, r3
 80021e6:	f000 fd37 	bl	8002c58 <conv2Mil>

		sevSeg_updateDigits(&currTimeMil, userAlarmToggle);
 80021ea:	4b10      	ldr	r3, [pc, #64]	@ (800222c <updateAndDisplayTime+0x70>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	001a      	movs	r2, r3
 80021f0:	003b      	movs	r3, r7
 80021f2:	0011      	movs	r1, r2
 80021f4:	0018      	movs	r0, r3
 80021f6:	f000 ff2f 	bl	8003058 <sevSeg_updateDigits>
 80021fa:	e007      	b.n	800220c <updateAndDisplayTime+0x50>

	}
	else {
		sevSeg_updateDigits(&currTime, userAlarmToggle);
 80021fc:	4b0b      	ldr	r3, [pc, #44]	@ (800222c <updateAndDisplayTime+0x70>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	001a      	movs	r2, r3
 8002202:	4b07      	ldr	r3, [pc, #28]	@ (8002220 <updateAndDisplayTime+0x64>)
 8002204:	0011      	movs	r1, r2
 8002206:	0018      	movs	r0, r3
 8002208:	f000 ff26 	bl	8003058 <sevSeg_updateDigits>
	}

	return halRet;
 800220c:	2317      	movs	r3, #23
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	781b      	ldrb	r3, [r3, #0]

}
 8002212:	0018      	movs	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	b006      	add	sp, #24
 8002218:	bd80      	pop	{r7, pc}
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	200000cc 	.word	0x200000cc
 8002220:	200000b8 	.word	0x200000b8
 8002224:	200001d8 	.word	0x200001d8
 8002228:	200000e8 	.word	0x200000e8
 800222c:	200000b5 	.word	0x200000b5

08002230 <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8002236:	2317      	movs	r3, #23
 8002238:	18fb      	adds	r3, r7, r3
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 800223e:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <updateAndDisplayAlarm+0x54>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10e      	bne.n	8002264 <updateAndDisplayAlarm+0x34>

		RTC_TimeTypeDef userAlarmTimeMil = conv2Mil(&userAlarmTime);
 8002246:	003b      	movs	r3, r7
 8002248:	4a0f      	ldr	r2, [pc, #60]	@ (8002288 <updateAndDisplayAlarm+0x58>)
 800224a:	0011      	movs	r1, r2
 800224c:	0018      	movs	r0, r3
 800224e:	f000 fd03 	bl	8002c58 <conv2Mil>

		sevSeg_updateDigits(&userAlarmTimeMil, userAlarmToggle);
 8002252:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <updateAndDisplayAlarm+0x5c>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	001a      	movs	r2, r3
 8002258:	003b      	movs	r3, r7
 800225a:	0011      	movs	r1, r2
 800225c:	0018      	movs	r0, r3
 800225e:	f000 fefb 	bl	8003058 <sevSeg_updateDigits>
 8002262:	e007      	b.n	8002274 <updateAndDisplayAlarm+0x44>

	}
	else {
		sevSeg_updateDigits(&userAlarmTime, userAlarmToggle);
 8002264:	4b09      	ldr	r3, [pc, #36]	@ (800228c <updateAndDisplayAlarm+0x5c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	001a      	movs	r2, r3
 800226a:	4b07      	ldr	r3, [pc, #28]	@ (8002288 <updateAndDisplayAlarm+0x58>)
 800226c:	0011      	movs	r1, r2
 800226e:	0018      	movs	r0, r3
 8002270:	f000 fef2 	bl	8003058 <sevSeg_updateDigits>
	}



	return halRet;
 8002274:	2317      	movs	r3, #23
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	781b      	ldrb	r3, [r3, #0]

}
 800227a:	0018      	movs	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	b006      	add	sp, #24
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	200000e8 	.word	0x200000e8
 8002288:	200000d0 	.word	0x200000d0
 800228c:	200000b5 	.word	0x200000b5

08002290 <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b08d      	sub	sp, #52	@ 0x34
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 8002298:	2408      	movs	r4, #8
 800229a:	193b      	adds	r3, r7, r4
 800229c:	0018      	movs	r0, r3
 800229e:	2328      	movs	r3, #40	@ 0x28
 80022a0:	001a      	movs	r2, r3
 80022a2:	2100      	movs	r1, #0
 80022a4:	f007 f926 	bl	80094f4 <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 80022a8:	2380      	movs	r3, #128	@ 0x80
 80022aa:	005a      	lsls	r2, r3, #1
 80022ac:	1939      	adds	r1, r7, r4
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	2300      	movs	r3, #0
 80022b2:	f004 fef9 	bl	80070a8 <HAL_RTC_GetAlarm>

	  getRTCTime(hrtc, &currTime, &currDate);
 80022b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002334 <HAL_RTC_AlarmAEventCallback+0xa4>)
 80022b8:	491f      	ldr	r1, [pc, #124]	@ (8002338 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	0018      	movs	r0, r3
 80022be:	f7ff f9f7 	bl	80016b0 <getRTCTime>

	  if(currTime.Minutes > 58) {
 80022c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002338 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80022c4:	785b      	ldrb	r3, [r3, #1]
 80022c6:	2b3a      	cmp	r3, #58	@ 0x3a
 80022c8:	d903      	bls.n	80022d2 <HAL_RTC_AlarmAEventCallback+0x42>

	  		sAlarm.AlarmTime.Minutes = 0;
 80022ca:	193b      	adds	r3, r7, r4
 80022cc:	2200      	movs	r2, #0
 80022ce:	705a      	strb	r2, [r3, #1]
 80022d0:	e006      	b.n	80022e0 <HAL_RTC_AlarmAEventCallback+0x50>

	  	  } else {

	  		sAlarm.AlarmTime.Minutes = currTime.Minutes + 1;
 80022d2:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80022d4:	785b      	ldrb	r3, [r3, #1]
 80022d6:	3301      	adds	r3, #1
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	2308      	movs	r3, #8
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	705a      	strb	r2, [r3, #1]

	  	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 80022e0:	46c0      	nop			@ (mov r8, r8)
 80022e2:	2308      	movs	r3, #8
 80022e4:	18f9      	adds	r1, r7, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	0018      	movs	r0, r3
 80022ec:	f004 fd9c 	bl	8006e28 <HAL_RTC_SetAlarm_IT>
 80022f0:	1e03      	subs	r3, r0, #0
 80022f2:	d1f6      	bne.n	80022e2 <HAL_RTC_AlarmAEventCallback+0x52>

	  updateAndDisplayTime();
 80022f4:	f7ff ff62 	bl	80021bc <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 80022f8:	4b10      	ldr	r3, [pc, #64]	@ (800233c <HAL_RTC_AlarmAEventCallback+0xac>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d014      	beq.n	800232a <HAL_RTC_AlarmAEventCallback+0x9a>
 8002300:	4b0f      	ldr	r3, [pc, #60]	@ (8002340 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8002302:	781a      	ldrb	r2, [r3, #0]
 8002304:	4b0c      	ldr	r3, [pc, #48]	@ (8002338 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d10e      	bne.n	800232a <HAL_RTC_AlarmAEventCallback+0x9a>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 800230c:	4b0c      	ldr	r3, [pc, #48]	@ (8002340 <HAL_RTC_AlarmAEventCallback+0xb0>)
 800230e:	785a      	ldrb	r2, [r3, #1]
 8002310:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8002312:	785b      	ldrb	r3, [r3, #1]
 8002314:	429a      	cmp	r2, r3
 8002316:	d108      	bne.n	800232a <HAL_RTC_AlarmAEventCallback+0x9a>
 8002318:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <HAL_RTC_AlarmAEventCallback+0xb0>)
 800231a:	78da      	ldrb	r2, [r3, #3]
 800231c:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <HAL_RTC_AlarmAEventCallback+0xa8>)
 800231e:	78db      	ldrb	r3, [r3, #3]
 8002320:	429a      	cmp	r2, r3
 8002322:	d102      	bne.n	800232a <HAL_RTC_AlarmAEventCallback+0x9a>
		  beepMode = true;
 8002324:	4b07      	ldr	r3, [pc, #28]	@ (8002344 <HAL_RTC_AlarmAEventCallback+0xb4>)
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
	  }


}
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b00d      	add	sp, #52	@ 0x34
 8002330:	bd90      	pop	{r4, r7, pc}
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	200000cc 	.word	0x200000cc
 8002338:	200000b8 	.word	0x200000b8
 800233c:	200000b5 	.word	0x200000b5
 8002340:	200000d0 	.word	0x200000d0
 8002344:	20000407 	.word	0x20000407

08002348 <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 800234e:	4b55      	ldr	r3, [pc, #340]	@ (80024a4 <userAlarmBeep+0x15c>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d02d      	beq.n	80023b2 <userAlarmBeep+0x6a>

		// Stop the timer and
		HAL_TIM_Base_Stop_IT(timerSnooze);
 8002356:	4b54      	ldr	r3, [pc, #336]	@ (80024a8 <userAlarmBeep+0x160>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	0018      	movs	r0, r3
 800235c:	f006 f97a 	bl	8008654 <HAL_TIM_Base_Stop_IT>

		// Reset count to 0
		// only bits 0 - 15 should be changed.
		timerSnooze->Instance->CNT &= 0xFFFF0000;
 8002360:	4b51      	ldr	r3, [pc, #324]	@ (80024a8 <userAlarmBeep+0x160>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002368:	4b4f      	ldr	r3, [pc, #316]	@ (80024a8 <userAlarmBeep+0x160>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	0c12      	lsrs	r2, r2, #16
 8002370:	0412      	lsls	r2, r2, #16
 8002372:	625a      	str	r2, [r3, #36]	@ 0x24

		// Reset interrupt status register
		timerSnooze->Instance->SR &= 0xFFFC;
 8002374:	4b4c      	ldr	r3, [pc, #304]	@ (80024a8 <userAlarmBeep+0x160>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	4b4a      	ldr	r3, [pc, #296]	@ (80024a8 <userAlarmBeep+0x160>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	494a      	ldr	r1, [pc, #296]	@ (80024ac <userAlarmBeep+0x164>)
 8002384:	400a      	ands	r2, r1
 8002386:	611a      	str	r2, [r3, #16]

		// Re-write RCR with 10
		timerSnooze->Instance->RCR &= 0xFF00;
 8002388:	4b47      	ldr	r3, [pc, #284]	@ (80024a8 <userAlarmBeep+0x160>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002390:	4b45      	ldr	r3, [pc, #276]	@ (80024a8 <userAlarmBeep+0x160>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	22ff      	movs	r2, #255	@ 0xff
 8002398:	0212      	lsls	r2, r2, #8
 800239a:	400a      	ands	r2, r1
 800239c:	631a      	str	r2, [r3, #48]	@ 0x30
		timerSnooze->Instance->RCR |= timerSnooze_RCR;
 800239e:	4b42      	ldr	r3, [pc, #264]	@ (80024a8 <userAlarmBeep+0x160>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023a6:	2164      	movs	r1, #100	@ 0x64
 80023a8:	4b3f      	ldr	r3, [pc, #252]	@ (80024a8 <userAlarmBeep+0x160>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	631a      	str	r2, [r3, #48]	@ 0x30

	}

	HAL_TIM_Base_Stop(timerDelay);
 80023b2:	4b3f      	ldr	r3, [pc, #252]	@ (80024b0 <userAlarmBeep+0x168>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	0018      	movs	r0, r3
 80023b8:	f006 f8d2 	bl	8008560 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 80023bc:	4b3c      	ldr	r3, [pc, #240]	@ (80024b0 <userAlarmBeep+0x168>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f006 f881 	bl	80084c8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80023c6:	4b3a      	ldr	r3, [pc, #232]	@ (80024b0 <userAlarmBeep+0x168>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ce:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80023d0:	1cfb      	adds	r3, r7, #3
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]

	// Start audio DMA streams
	startAudioStream();
 80023d6:	f000 fc75 	bl	8002cc4 <startAudioStream>

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 80023da:	f7ff feef 	bl	80021bc <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 80023de:	4b34      	ldr	r3, [pc, #208]	@ (80024b0 <userAlarmBeep+0x168>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	4a32      	ldr	r2, [pc, #200]	@ (80024b4 <userAlarmBeep+0x16c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d91a      	bls.n	8002426 <userAlarmBeep+0xde>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 80023f0:	1cfb      	adds	r3, r7, #3
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4a30      	ldr	r2, [pc, #192]	@ (80024b8 <userAlarmBeep+0x170>)
 80023f6:	5cd3      	ldrb	r3, [r2, r3]
 80023f8:	0018      	movs	r0, r3
 80023fa:	f000 fee1 	bl	80031c0 <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80023fe:	4b2c      	ldr	r3, [pc, #176]	@ (80024b0 <userAlarmBeep+0x168>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8002408:	1cfb      	adds	r3, r7, #3
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	1e5a      	subs	r2, r3, #1
 800240e:	4193      	sbcs	r3, r2
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2201      	movs	r2, #1
 8002414:	4053      	eors	r3, r2
 8002416:	b2db      	uxtb	r3, r3
 8002418:	001a      	movs	r2, r3
 800241a:	1cfb      	adds	r3, r7, #3
 800241c:	701a      	strb	r2, [r3, #0]
 800241e:	781a      	ldrb	r2, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	400a      	ands	r2, r1
 8002424:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 8002426:	4b25      	ldr	r3, [pc, #148]	@ (80024bc <userAlarmBeep+0x174>)
 8002428:	0018      	movs	r0, r3
 800242a:	f7fe f8a3 	bl	8000574 <capTouch_readChannels>

	} while(capTouch.keyStat == 0x00 &&
 800242e:	4b23      	ldr	r3, [pc, #140]	@ (80024bc <userAlarmBeep+0x174>)
 8002430:	7c1b      	ldrb	r3, [r3, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d108      	bne.n	8002448 <userAlarmBeep+0x100>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 8002436:	4b22      	ldr	r3, [pc, #136]	@ (80024c0 <userAlarmBeep+0x178>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2204      	movs	r2, #4
 800243c:	0011      	movs	r1, r2
 800243e:	0018      	movs	r0, r3
 8002440:	f002 f80c 	bl	800445c <HAL_GPIO_ReadPin>
 8002444:	1e03      	subs	r3, r0, #0
	} while(capTouch.keyStat == 0x00 &&
 8002446:	d1c8      	bne.n	80023da <userAlarmBeep+0x92>

	/*
	 * Stop blinking, turn off audio, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 8002448:	4b19      	ldr	r3, [pc, #100]	@ (80024b0 <userAlarmBeep+0x168>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0018      	movs	r0, r3
 800244e:	f006 f887 	bl	8008560 <HAL_TIM_Base_Stop>

	// Stop audio stream
	stopAudioStream();
 8002452:	f000 fc53 	bl	8002cfc <stopAudioStream>

	updateAndDisplayTime();				// Update to current time and display
 8002456:	f7ff feb1 	bl	80021bc <updateAndDisplayTime>
	sevSeg_setIntensity(sevSeg_intensityDuty[1]);	// Set display to on
 800245a:	2332      	movs	r3, #50	@ 0x32
 800245c:	0018      	movs	r0, r3
 800245e:	f000 feaf 	bl	80031c0 <sevSeg_setIntensity>
	displayToggle = 0;								// Set to 2 for future display button ISRs
 8002462:	4b18      	ldr	r3, [pc, #96]	@ (80024c4 <userAlarmBeep+0x17c>)
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]


	// If this is the first snooze,
	if(!secondSnooze) {
 8002468:	4b0e      	ldr	r3, [pc, #56]	@ (80024a4 <userAlarmBeep+0x15c>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2201      	movs	r2, #1
 800246e:	4053      	eors	r3, r2
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d008      	beq.n	8002488 <userAlarmBeep+0x140>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 8002476:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <userAlarmBeep+0x160>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	0018      	movs	r0, r3
 800247c:	f006 f896 	bl	80085ac <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 8002480:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <userAlarmBeep+0x15c>)
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
 8002486:	e005      	b.n	8002494 <userAlarmBeep+0x14c>

	} else {

		snoozeCounter = 0;
 8002488:	4b0f      	ldr	r3, [pc, #60]	@ (80024c8 <userAlarmBeep+0x180>)
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
		// Reset flag
		/*
		 * This must be done here because if it's done
		 * in the top conditional, the secondSnooze is always true;
		 */
		secondSnooze = false;
 800248e:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <userAlarmBeep+0x15c>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]

	}

	// Reset beepMode bool
	beepMode = false;
 8002494:	4b0d      	ldr	r3, [pc, #52]	@ (80024cc <userAlarmBeep+0x184>)
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]

}
 800249a:	46c0      	nop			@ (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b002      	add	sp, #8
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	20000406 	.word	0x20000406
 80024a8:	20000070 	.word	0x20000070
 80024ac:	0000fffc 	.word	0x0000fffc
 80024b0:	2000006c 	.word	0x2000006c
 80024b4:	00007ffe 	.word	0x00007ffe
 80024b8:	080095a8 	.word	0x080095a8
 80024bc:	20000408 	.word	0x20000408
 80024c0:	20000000 	.word	0x20000000
 80024c4:	200000b4 	.word	0x200000b4
 80024c8:	20000404 	.word	0x20000404
 80024cc:	20000407 	.word	0x20000407

080024d0 <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	0002      	movs	r2, r0
 80024d8:	1dbb      	adds	r3, r7, #6
 80024da:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 80024dc:	2208      	movs	r2, #8
 80024de:	1dbb      	adds	r3, r7, #6
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d106      	bne.n	80024f4 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 80024e6:	230f      	movs	r3, #15
 80024e8:	18fc      	adds	r4, r7, r3
 80024ea:	f000 f87d 	bl	80025e8 <displayButtonISR>
 80024ee:	0003      	movs	r3, r0
 80024f0:	7023      	strb	r3, [r4, #0]

	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 80024f2:	e03d      	b.n	8002570 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 80024f4:	2204      	movs	r2, #4
 80024f6:	1dbb      	adds	r3, r7, #6
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d106      	bne.n	800250c <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 80024fe:	230f      	movs	r3, #15
 8002500:	18fc      	adds	r4, r7, r3
 8002502:	f000 f893 	bl	800262c <alarmEnableISR>
 8002506:	0003      	movs	r3, r0
 8002508:	7023      	strb	r3, [r4, #0]
}
 800250a:	e031      	b.n	8002570 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmSetButtonPin) {
 800250c:	2380      	movs	r3, #128	@ 0x80
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	1dba      	adds	r2, r7, #6
 8002512:	8812      	ldrh	r2, [r2, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d106      	bne.n	8002526 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 8002518:	230f      	movs	r3, #15
 800251a:	18fc      	adds	r4, r7, r3
 800251c:	f000 f8d2 	bl	80026c4 <alarmSetISR>
 8002520:	0003      	movs	r3, r0
 8002522:	7023      	strb	r3, [r4, #0]
}
 8002524:	e024      	b.n	8002570 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == hourSetButtonPin) {
 8002526:	2201      	movs	r2, #1
 8002528:	1dbb      	adds	r3, r7, #6
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	4293      	cmp	r3, r2
 800252e:	d106      	bne.n	800253e <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 8002530:	230f      	movs	r3, #15
 8002532:	18fc      	adds	r4, r7, r3
 8002534:	f000 f9ae 	bl	8002894 <hourSetISR>
 8002538:	0003      	movs	r3, r0
 800253a:	7023      	strb	r3, [r4, #0]
}
 800253c:	e018      	b.n	8002570 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == minuteSetButtonPin) {
 800253e:	2202      	movs	r2, #2
 8002540:	1dbb      	adds	r3, r7, #6
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	4293      	cmp	r3, r2
 8002546:	d106      	bne.n	8002556 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 8002548:	230f      	movs	r3, #15
 800254a:	18fc      	adds	r4, r7, r3
 800254c:	f000 f9ce 	bl	80028ec <minuteSetISR>
 8002550:	0003      	movs	r3, r0
 8002552:	7023      	strb	r3, [r4, #0]
}
 8002554:	e00c      	b.n	8002570 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == timeFormatSwitchPin) {
 8002556:	2210      	movs	r2, #16
 8002558:	1dbb      	adds	r3, r7, #6
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	4293      	cmp	r3, r2
 800255e:	d106      	bne.n	800256e <HAL_GPIO_EXTI_Falling_Callback+0x9e>
		halRet = timeFormatSwitchISR();
 8002560:	230f      	movs	r3, #15
 8002562:	18fc      	adds	r4, r7, r3
 8002564:	f000 fa1a 	bl	800299c <timeFormatSwitchISR>
 8002568:	0003      	movs	r3, r0
 800256a:	7023      	strb	r3, [r4, #0]
}
 800256c:	e000      	b.n	8002570 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
		__NOP();
 800256e:	46c0      	nop			@ (mov r8, r8)
}
 8002570:	46c0      	nop			@ (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	b005      	add	sp, #20
 8002576:	bd90      	pop	{r4, r7, pc}

08002578 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	0002      	movs	r2, r0
 8002580:	1dbb      	adds	r3, r7, #6
 8002582:	801a      	strh	r2, [r3, #0]

	if(GPIO_Pin == timeFormatSwitchPin) {
 8002584:	2210      	movs	r2, #16
 8002586:	1dbb      	adds	r3, r7, #6
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	4293      	cmp	r3, r2
 800258c:	d101      	bne.n	8002592 <HAL_GPIO_EXTI_Rising_Callback+0x1a>

		timeFormatSwitchISR();
 800258e:	f000 fa05 	bl	800299c <timeFormatSwitchISR>

	}

}
 8002592:	46c0      	nop			@ (mov r8, r8)
 8002594:	46bd      	mov	sp, r7
 8002596:	b002      	add	sp, #8
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

	snoozeCounter++;
 80025a4:	4b0d      	ldr	r3, [pc, #52]	@ (80025dc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80025ae:	701a      	strb	r2, [r3, #0]

	if((htim == timerSnooze) && (secondSnooze == true) && (snoozeCounter == timerSnooze_RCR) ) {
 80025b0:	4b0b      	ldr	r3, [pc, #44]	@ (80025e0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d10b      	bne.n	80025d2 <HAL_TIM_PeriodElapsedCallback+0x36>
 80025ba:	4b0a      	ldr	r3, [pc, #40]	@ (80025e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d007      	beq.n	80025d2 <HAL_TIM_PeriodElapsedCallback+0x36>
 80025c2:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	001a      	movs	r2, r3
 80025c8:	2364      	movs	r3, #100	@ 0x64
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d101      	bne.n	80025d2 <HAL_TIM_PeriodElapsedCallback+0x36>

		userAlarmBeep();
 80025ce:	f7ff febb 	bl	8002348 <userAlarmBeep>

	}

}
 80025d2:	46c0      	nop			@ (mov r8, r8)
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b002      	add	sp, #8
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			@ (mov r8, r8)
 80025dc:	20000404 	.word	0x20000404
 80025e0:	20000070 	.word	0x20000070
 80025e4:	20000406 	.word	0x20000406

080025e8 <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80025ee:	1dfb      	adds	r3, r7, #7
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 80025f4:	f7ff fde2 	bl	80021bc <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 80025f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002624 <displayButtonISR+0x3c>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	001a      	movs	r2, r3
 80025fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002628 <displayButtonISR+0x40>)
 8002600:	5c9b      	ldrb	r3, [r3, r2]
 8002602:	0018      	movs	r0, r3
 8002604:	f000 fddc 	bl	80031c0 <sevSeg_setIntensity>

	displayToggle = !displayToggle;
 8002608:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <displayButtonISR+0x3c>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	425a      	negs	r2, r3
 800260e:	4153      	adcs	r3, r2
 8002610:	b2db      	uxtb	r3, r3
 8002612:	001a      	movs	r2, r3
 8002614:	4b03      	ldr	r3, [pc, #12]	@ (8002624 <displayButtonISR+0x3c>)
 8002616:	701a      	strb	r2, [r3, #0]

	return halRet;				// Return HAL status
 8002618:	1dfb      	adds	r3, r7, #7
 800261a:	781b      	ldrb	r3, [r3, #0]

}
 800261c:	0018      	movs	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	b002      	add	sp, #8
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200000b4 	.word	0x200000b4
 8002628:	080095a8 	.word	0x080095a8

0800262c <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0



	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8002632:	1dfb      	adds	r3, r7, #7
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8002638:	4b1d      	ldr	r3, [pc, #116]	@ (80026b0 <alarmEnableISR+0x84>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2201      	movs	r2, #1
 800263e:	4053      	eors	r3, r2
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <alarmEnableISR+0x22>

		userAlarmToggle = true;								// Toggle internal flag to true
 8002646:	4b1a      	ldr	r3, [pc, #104]	@ (80026b0 <alarmEnableISR+0x84>)
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e008      	b.n	8002660 <alarmEnableISR+0x34>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 800264e:	4b18      	ldr	r3, [pc, #96]	@ (80026b0 <alarmEnableISR+0x84>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <alarmEnableISR+0x32>

		userAlarmToggle = false;							// Toggle internal flag to false
 8002656:	4b16      	ldr	r3, [pc, #88]	@ (80026b0 <alarmEnableISR+0x84>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e000      	b.n	8002660 <alarmEnableISR+0x34>
	}
	else {
		__NOP();							//Code should never reach here.
 800265e:	46c0      	nop			@ (mov r8, r8)
	}

	updateAndDisplayTime();				// Update display with correct decimal point
 8002660:	f7ff fdac 	bl	80021bc <updateAndDisplayTime>

	// Reset snooze time
	secondSnooze = false;
 8002664:	4b13      	ldr	r3, [pc, #76]	@ (80026b4 <alarmEnableISR+0x88>)
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
	snoozeCounter = 0;
 800266a:	4b13      	ldr	r3, [pc, #76]	@ (80026b8 <alarmEnableISR+0x8c>)
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]

	// Stop snooze timer in case it is going
	HAL_TIM_Base_Stop_IT(timerSnooze);
 8002670:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <alarmEnableISR+0x90>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0018      	movs	r0, r3
 8002676:	f005 ffed 	bl	8008654 <HAL_TIM_Base_Stop_IT>
	timerSnooze->Instance->CNT &= 0xFFFF0000;
 800267a:	4b10      	ldr	r3, [pc, #64]	@ (80026bc <alarmEnableISR+0x90>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002682:	4b0e      	ldr	r3, [pc, #56]	@ (80026bc <alarmEnableISR+0x90>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	0c12      	lsrs	r2, r2, #16
 800268a:	0412      	lsls	r2, r2, #16
 800268c:	625a      	str	r2, [r3, #36]	@ 0x24
	timerSnooze->Instance->SR &= 0xFFFC;
 800268e:	4b0b      	ldr	r3, [pc, #44]	@ (80026bc <alarmEnableISR+0x90>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691a      	ldr	r2, [r3, #16]
 8002696:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <alarmEnableISR+0x90>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4908      	ldr	r1, [pc, #32]	@ (80026c0 <alarmEnableISR+0x94>)
 800269e:	400a      	ands	r2, r1
 80026a0:	611a      	str	r2, [r3, #16]

	return halRet;
 80026a2:	1dfb      	adds	r3, r7, #7
 80026a4:	781b      	ldrb	r3, [r3, #0]

}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b002      	add	sp, #8
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	200000b5 	.word	0x200000b5
 80026b4:	20000406 	.word	0x20000406
 80026b8:	20000404 	.word	0x20000404
 80026bc:	20000070 	.word	0x20000070
 80026c0:	0000fffc 	.word	0x0000fffc

080026c4 <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 80026ca:	1c7b      	adds	r3, r7, #1
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 80026d0:	1dfb      	adds	r3, r7, #7
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
 80026d6:	e01a      	b.n	800270e <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 80026d8:	4b65      	ldr	r3, [pc, #404]	@ (8002870 <alarmSetISR+0x1ac>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	0018      	movs	r0, r3
 80026de:	f005 ff3f 	bl	8008560 <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 80026e2:	4b63      	ldr	r3, [pc, #396]	@ (8002870 <alarmSetISR+0x1ac>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2200      	movs	r2, #0
 80026ea:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80026ec:	4b60      	ldr	r3, [pc, #384]	@ (8002870 <alarmSetISR+0x1ac>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0018      	movs	r0, r3
 80026f2:	f005 fee9 	bl	80084c8 <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 80026f6:	4b5e      	ldr	r3, [pc, #376]	@ (8002870 <alarmSetISR+0x1ac>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	4a5d      	ldr	r2, [pc, #372]	@ (8002874 <alarmSetISR+0x1b0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d9f8      	bls.n	80026f6 <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 8002704:	1dfb      	adds	r3, r7, #7
 8002706:	781a      	ldrb	r2, [r3, #0]
 8002708:	1dfb      	adds	r3, r7, #7
 800270a:	3201      	adds	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	1dfb      	adds	r3, r7, #7
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d9e0      	bls.n	80026d8 <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 8002716:	4b58      	ldr	r3, [pc, #352]	@ (8002878 <alarmSetISR+0x1b4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2280      	movs	r2, #128	@ 0x80
 800271c:	0212      	lsls	r2, r2, #8
 800271e:	0011      	movs	r1, r2
 8002720:	0018      	movs	r0, r3
 8002722:	f001 fe9b 	bl	800445c <HAL_GPIO_ReadPin>
 8002726:	1e03      	subs	r3, r0, #0
 8002728:	d120      	bne.n	800276c <alarmSetISR+0xa8>
		alarmSetMode = true;
 800272a:	4b54      	ldr	r3, [pc, #336]	@ (800287c <alarmSetISR+0x1b8>)
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 8002730:	4b4f      	ldr	r3, [pc, #316]	@ (8002870 <alarmSetISR+0x1ac>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0018      	movs	r0, r3
 8002736:	f005 ff13 	bl	8008560 <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 800273a:	4b4d      	ldr	r3, [pc, #308]	@ (8002870 <alarmSetISR+0x1ac>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2200      	movs	r2, #0
 8002742:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8002744:	4b4a      	ldr	r3, [pc, #296]	@ (8002870 <alarmSetISR+0x1ac>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	0018      	movs	r0, r3
 800274a:	f005 febd 	bl	80084c8 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 800274e:	4b48      	ldr	r3, [pc, #288]	@ (8002870 <alarmSetISR+0x1ac>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 800275a:	1cfb      	adds	r3, r7, #3
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 8002760:	4b46      	ldr	r3, [pc, #280]	@ (800287c <alarmSetISR+0x1b8>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d100      	bne.n	800276a <alarmSetISR+0xa6>
 8002768:	e078      	b.n	800285c <alarmSetISR+0x198>
 800276a:	e002      	b.n	8002772 <alarmSetISR+0xae>
		return halRet;
 800276c:	1c7b      	adds	r3, r7, #1
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	e079      	b.n	8002866 <alarmSetISR+0x1a2>

		// If we were in second snooze mode, kill it.

		secondSnooze = false;
 8002772:	4b43      	ldr	r3, [pc, #268]	@ (8002880 <alarmSetISR+0x1bc>)
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
		snoozeCounter = 0;
 8002778:	4b42      	ldr	r3, [pc, #264]	@ (8002884 <alarmSetISR+0x1c0>)
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]

		// Stop snooze timer in case it is going
		HAL_TIM_Base_Stop_IT(timerSnooze);
 800277e:	4b42      	ldr	r3, [pc, #264]	@ (8002888 <alarmSetISR+0x1c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	0018      	movs	r0, r3
 8002784:	f005 ff66 	bl	8008654 <HAL_TIM_Base_Stop_IT>
		timerSnooze->Instance->CNT &= 0xFFFF0000;
 8002788:	4b3f      	ldr	r3, [pc, #252]	@ (8002888 <alarmSetISR+0x1c4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002790:	4b3d      	ldr	r3, [pc, #244]	@ (8002888 <alarmSetISR+0x1c4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0c12      	lsrs	r2, r2, #16
 8002798:	0412      	lsls	r2, r2, #16
 800279a:	625a      	str	r2, [r3, #36]	@ 0x24
		timerSnooze->Instance->SR &= 0xFFFC;
 800279c:	4b3a      	ldr	r3, [pc, #232]	@ (8002888 <alarmSetISR+0x1c4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	4b38      	ldr	r3, [pc, #224]	@ (8002888 <alarmSetISR+0x1c4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4938      	ldr	r1, [pc, #224]	@ (800288c <alarmSetISR+0x1c8>)
 80027ac:	400a      	ands	r2, r1
 80027ae:	611a      	str	r2, [r3, #16]


		bool displayBlink = false;
 80027b0:	1cbb      	adds	r3, r7, #2
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 80027b6:	4b30      	ldr	r3, [pc, #192]	@ (8002878 <alarmSetISR+0x1b4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2280      	movs	r2, #128	@ 0x80
 80027bc:	0212      	lsls	r2, r2, #8
 80027be:	0011      	movs	r1, r2
 80027c0:	0018      	movs	r0, r3
 80027c2:	f001 fe4b 	bl	800445c <HAL_GPIO_ReadPin>
 80027c6:	0003      	movs	r3, r0
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d102      	bne.n	80027d2 <alarmSetISR+0x10e>
				alarmSetButtonReset = true;
 80027cc:	1cfb      	adds	r3, r7, #3
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 80027d2:	f7ff fd2d 	bl	8002230 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 80027d6:	4b26      	ldr	r3, [pc, #152]	@ (8002870 <alarmSetISR+0x1ac>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	1ad2      	subs	r2, r2, r3
 80027e4:	2380      	movs	r3, #128	@ 0x80
 80027e6:	021b      	lsls	r3, r3, #8
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d31b      	bcc.n	8002824 <alarmSetISR+0x160>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 80027ec:	1cbb      	adds	r3, r7, #2
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	4a27      	ldr	r2, [pc, #156]	@ (8002890 <alarmSetISR+0x1cc>)
 80027f2:	5cd3      	ldrb	r3, [r2, r3]
 80027f4:	0018      	movs	r0, r3
 80027f6:	f000 fce3 	bl	80031c0 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 80027fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002870 <alarmSetISR+0x1ac>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 8002806:	1cbb      	adds	r3, r7, #2
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	1e5a      	subs	r2, r3, #1
 800280c:	4193      	sbcs	r3, r2
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2201      	movs	r2, #1
 8002812:	4053      	eors	r3, r2
 8002814:	b2db      	uxtb	r3, r3
 8002816:	001a      	movs	r2, r3
 8002818:	1cbb      	adds	r3, r7, #2
 800281a:	701a      	strb	r2, [r3, #0]
 800281c:	781a      	ldrb	r2, [r3, #0]
 800281e:	2101      	movs	r1, #1
 8002820:	400a      	ands	r2, r1
 8002822:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 8002824:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <alarmSetISR+0x1b4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2280      	movs	r2, #128	@ 0x80
 800282a:	0212      	lsls	r2, r2, #8
 800282c:	0011      	movs	r1, r2
 800282e:	0018      	movs	r0, r3
 8002830:	f001 fe14 	bl	800445c <HAL_GPIO_ReadPin>
 8002834:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 8002836:	d1be      	bne.n	80027b6 <alarmSetISR+0xf2>
 8002838:	1cfb      	adds	r3, r7, #3
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	4053      	eors	r3, r2
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1b7      	bne.n	80027b6 <alarmSetISR+0xf2>

		sevSeg_setIntensity(sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 8002846:	2332      	movs	r3, #50	@ 0x32
 8002848:	0018      	movs	r0, r3
 800284a:	f000 fcb9 	bl	80031c0 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 800284e:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <alarmSetISR+0x1ac>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	0018      	movs	r0, r3
 8002854:	f005 fe84 	bl	8008560 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8002858:	f7ff fcb0 	bl	80021bc <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 800285c:	4b07      	ldr	r3, [pc, #28]	@ (800287c <alarmSetISR+0x1b8>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 8002862:	1c7b      	adds	r3, r7, #1
 8002864:	781b      	ldrb	r3, [r3, #0]

}
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	b002      	add	sp, #8
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	2000006c 	.word	0x2000006c
 8002874:	0000fffe 	.word	0x0000fffe
 8002878:	20000004 	.word	0x20000004
 800287c:	20000405 	.word	0x20000405
 8002880:	20000406 	.word	0x20000406
 8002884:	20000404 	.word	0x20000404
 8002888:	20000070 	.word	0x20000070
 800288c:	0000fffc 	.word	0x0000fffc
 8002890:	080095a8 	.word	0x080095a8

08002894 <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 800289a:	1dfb      	adds	r3, r7, #7
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80028a0:	4b0e      	ldr	r3, [pc, #56]	@ (80028dc <hourSetISR+0x48>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <hourSetISR+0x1a>

		alarmHourInc();
 80028a8:	f000 f8a0 	bl	80029ec <alarmHourInc>
 80028ac:	e00f      	b.n	80028ce <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 80028ae:	f000 f8cd 	bl	8002a4c <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80028b2:	490b      	ldr	r1, [pc, #44]	@ (80028e0 <hourSetISR+0x4c>)
 80028b4:	4b0b      	ldr	r3, [pc, #44]	@ (80028e4 <hourSetISR+0x50>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	0018      	movs	r0, r3
 80028ba:	f004 f963 	bl	8006b84 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80028be:	f7ff fc7d 	bl	80021bc <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80028c2:	4a09      	ldr	r2, [pc, #36]	@ (80028e8 <hourSetISR+0x54>)
 80028c4:	4906      	ldr	r1, [pc, #24]	@ (80028e0 <hourSetISR+0x4c>)
 80028c6:	4b07      	ldr	r3, [pc, #28]	@ (80028e4 <hourSetISR+0x50>)
 80028c8:	0018      	movs	r0, r3
 80028ca:	f7fe fef1 	bl	80016b0 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 80028ce:	1dfb      	adds	r3, r7, #7
 80028d0:	781b      	ldrb	r3, [r3, #0]

}
 80028d2:	0018      	movs	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b002      	add	sp, #8
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			@ (mov r8, r8)
 80028dc:	20000405 	.word	0x20000405
 80028e0:	200000b8 	.word	0x200000b8
 80028e4:	200001d8 	.word	0x200001d8
 80028e8:	200000cc 	.word	0x200000cc

080028ec <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08c      	sub	sp, #48	@ 0x30
 80028f0:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 80028f2:	232f      	movs	r3, #47	@ 0x2f
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80028fa:	4b24      	ldr	r3, [pc, #144]	@ (800298c <minuteSetISR+0xa0>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <minuteSetISR+0x1c>

		alarmMinuteInc();
 8002902:	f000 f8e3 	bl	8002acc <alarmMinuteInc>
 8002906:	e03a      	b.n	800297e <minuteSetISR+0x92>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8002908:	f000 f8fe 	bl	8002b08 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 800290c:	4920      	ldr	r1, [pc, #128]	@ (8002990 <minuteSetISR+0xa4>)
 800290e:	4b21      	ldr	r3, [pc, #132]	@ (8002994 <minuteSetISR+0xa8>)
 8002910:	2200      	movs	r2, #0
 8002912:	0018      	movs	r0, r3
 8002914:	f004 f936 	bl	8006b84 <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 8002918:	1d3b      	adds	r3, r7, #4
 800291a:	0018      	movs	r0, r3
 800291c:	2328      	movs	r3, #40	@ 0x28
 800291e:	001a      	movs	r2, r3
 8002920:	2100      	movs	r1, #0
 8002922:	f006 fde7 	bl	80094f4 <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8002926:	2380      	movs	r3, #128	@ 0x80
 8002928:	005a      	lsls	r2, r3, #1
 800292a:	1d39      	adds	r1, r7, #4
 800292c:	4819      	ldr	r0, [pc, #100]	@ (8002994 <minuteSetISR+0xa8>)
 800292e:	2300      	movs	r3, #0
 8002930:	f004 fbba 	bl	80070a8 <HAL_RTC_GetAlarm>
		getRTCTime(&hrtc, &currTime, &currDate);
 8002934:	4a18      	ldr	r2, [pc, #96]	@ (8002998 <minuteSetISR+0xac>)
 8002936:	4916      	ldr	r1, [pc, #88]	@ (8002990 <minuteSetISR+0xa4>)
 8002938:	4b16      	ldr	r3, [pc, #88]	@ (8002994 <minuteSetISR+0xa8>)
 800293a:	0018      	movs	r0, r3
 800293c:	f7fe feb8 	bl	80016b0 <getRTCTime>

		if(currTime.Minutes > 58) {
 8002940:	4b13      	ldr	r3, [pc, #76]	@ (8002990 <minuteSetISR+0xa4>)
 8002942:	785b      	ldrb	r3, [r3, #1]
 8002944:	2b3a      	cmp	r3, #58	@ 0x3a
 8002946:	d903      	bls.n	8002950 <minuteSetISR+0x64>

			sAlarm.AlarmTime.Minutes = 0;
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	2200      	movs	r2, #0
 800294c:	705a      	strb	r2, [r3, #1]
 800294e:	e005      	b.n	800295c <minuteSetISR+0x70>

		} else {

			sAlarm.AlarmTime.Minutes = currTime.Minutes + 1;
 8002950:	4b0f      	ldr	r3, [pc, #60]	@ (8002990 <minuteSetISR+0xa4>)
 8002952:	785b      	ldrb	r3, [r3, #1]
 8002954:	3301      	adds	r3, #1
 8002956:	b2da      	uxtb	r2, r3
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	705a      	strb	r2, [r3, #1]

		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 800295c:	46c0      	nop			@ (mov r8, r8)
 800295e:	1d39      	adds	r1, r7, #4
 8002960:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <minuteSetISR+0xa8>)
 8002962:	2200      	movs	r2, #0
 8002964:	0018      	movs	r0, r3
 8002966:	f004 fa5f 	bl	8006e28 <HAL_RTC_SetAlarm_IT>
 800296a:	1e03      	subs	r3, r0, #0
 800296c:	d1f7      	bne.n	800295e <minuteSetISR+0x72>

		updateAndDisplayTime();
 800296e:	f7ff fc25 	bl	80021bc <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8002972:	4a09      	ldr	r2, [pc, #36]	@ (8002998 <minuteSetISR+0xac>)
 8002974:	4906      	ldr	r1, [pc, #24]	@ (8002990 <minuteSetISR+0xa4>)
 8002976:	4b07      	ldr	r3, [pc, #28]	@ (8002994 <minuteSetISR+0xa8>)
 8002978:	0018      	movs	r0, r3
 800297a:	f7fe fe99 	bl	80016b0 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 800297e:	232f      	movs	r3, #47	@ 0x2f
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	781b      	ldrb	r3, [r3, #0]
}
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	b00c      	add	sp, #48	@ 0x30
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20000405 	.word	0x20000405
 8002990:	200000b8 	.word	0x200000b8
 8002994:	200001d8 	.word	0x200001d8
 8002998:	200000cc 	.word	0x200000cc

0800299c <timeFormatSwitchISR>:

/*
 * Switch hour format (12 or 24 hr)
 */
HAL_StatusTypeDef timeFormatSwitchISR(void) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80029a2:	1dfb      	adds	r3, r7, #7
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]

	// Determine which time format we will be using
	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 80029a8:	4b0d      	ldr	r3, [pc, #52]	@ (80029e0 <timeFormatSwitchISR+0x44>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2210      	movs	r2, #16
 80029ae:	0011      	movs	r1, r2
 80029b0:	0018      	movs	r0, r3
 80029b2:	f001 fd53 	bl	800445c <HAL_GPIO_ReadPin>
 80029b6:	0003      	movs	r3, r0
 80029b8:	001a      	movs	r2, r3
 80029ba:	4b0a      	ldr	r3, [pc, #40]	@ (80029e4 <timeFormatSwitchISR+0x48>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d103      	bne.n	80029ca <timeFormatSwitchISR+0x2e>
	  userTimeFormat = RTC_HOURFORMAT_12;
 80029c2:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <timeFormatSwitchISR+0x4c>)
 80029c4:	2240      	movs	r2, #64	@ 0x40
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	e002      	b.n	80029d0 <timeFormatSwitchISR+0x34>
	}
	else {
	  userTimeFormat = RTC_HOURFORMAT_24;
 80029ca:	4b07      	ldr	r3, [pc, #28]	@ (80029e8 <timeFormatSwitchISR+0x4c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
	}

	updateAndDisplayTime();
 80029d0:	f7ff fbf4 	bl	80021bc <updateAndDisplayTime>

	return halRet;
 80029d4:	1dfb      	adds	r3, r7, #7
 80029d6:	781b      	ldrb	r3, [r3, #0]

}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b002      	add	sp, #8
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000008 	.word	0x20000008
 80029e4:	20000040 	.word	0x20000040
 80029e8:	200000e8 	.word	0x200000e8

080029ec <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 80029f0:	4b15      	ldr	r3, [pc, #84]	@ (8002a48 <alarmHourInc+0x5c>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b0b      	cmp	r3, #11
 80029f6:	d903      	bls.n	8002a00 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 80029f8:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <alarmHourInc+0x5c>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
 80029fe:	e01e      	b.n	8002a3e <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8002a00:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <alarmHourInc+0x5c>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b0b      	cmp	r3, #11
 8002a06:	d10e      	bne.n	8002a26 <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8002a08:	4b0f      	ldr	r3, [pc, #60]	@ (8002a48 <alarmHourInc+0x5c>)
 8002a0a:	78db      	ldrb	r3, [r3, #3]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d103      	bne.n	8002a18 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8002a10:	4b0d      	ldr	r3, [pc, #52]	@ (8002a48 <alarmHourInc+0x5c>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	70da      	strb	r2, [r3, #3]
 8002a16:	e002      	b.n	8002a1e <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002a18:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <alarmHourInc+0x5c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a48 <alarmHourInc+0x5c>)
 8002a20:	220c      	movs	r2, #12
 8002a22:	701a      	strb	r2, [r3, #0]
 8002a24:	e00b      	b.n	8002a3e <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 8002a26:	4b08      	ldr	r3, [pc, #32]	@ (8002a48 <alarmHourInc+0x5c>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b0a      	cmp	r3, #10
 8002a2c:	d806      	bhi.n	8002a3c <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8002a2e:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <alarmHourInc+0x5c>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	3301      	adds	r3, #1
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <alarmHourInc+0x5c>)
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	e000      	b.n	8002a3e <alarmHourInc+0x52>
	}
	else {
		__NOP();
 8002a3c:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8002a3e:	f000 f8e1 	bl	8002c04 <updateRTCBackupReg>

}
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	200000d0 	.word	0x200000d0

08002a4c <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8002a50:	4a1a      	ldr	r2, [pc, #104]	@ (8002abc <currHourInc+0x70>)
 8002a52:	491b      	ldr	r1, [pc, #108]	@ (8002ac0 <currHourInc+0x74>)
 8002a54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <currHourInc+0x78>)
 8002a56:	0018      	movs	r0, r3
 8002a58:	f7fe fe2a 	bl	80016b0 <getRTCTime>

	if(currTime.Hours >= 12) {
 8002a5c:	4b18      	ldr	r3, [pc, #96]	@ (8002ac0 <currHourInc+0x74>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b0b      	cmp	r3, #11
 8002a62:	d903      	bls.n	8002a6c <currHourInc+0x20>
		currTime.Hours = 1;
 8002a64:	4b16      	ldr	r3, [pc, #88]	@ (8002ac0 <currHourInc+0x74>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	e01e      	b.n	8002aaa <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 8002a6c:	4b14      	ldr	r3, [pc, #80]	@ (8002ac0 <currHourInc+0x74>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b0b      	cmp	r3, #11
 8002a72:	d10e      	bne.n	8002a92 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8002a74:	4b12      	ldr	r3, [pc, #72]	@ (8002ac0 <currHourInc+0x74>)
 8002a76:	78db      	ldrb	r3, [r3, #3]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d103      	bne.n	8002a84 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8002a7c:	4b10      	ldr	r3, [pc, #64]	@ (8002ac0 <currHourInc+0x74>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	70da      	strb	r2, [r3, #3]
 8002a82:	e002      	b.n	8002a8a <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002a84:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac0 <currHourInc+0x74>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac0 <currHourInc+0x74>)
 8002a8c:	220c      	movs	r2, #12
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e00b      	b.n	8002aaa <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 8002a92:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac8 <currHourInc+0x7c>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b0a      	cmp	r3, #10
 8002a98:	d806      	bhi.n	8002aa8 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8002a9a:	4b09      	ldr	r3, [pc, #36]	@ (8002ac0 <currHourInc+0x74>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	4b07      	ldr	r3, [pc, #28]	@ (8002ac0 <currHourInc+0x74>)
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e000      	b.n	8002aaa <currHourInc+0x5e>
	}
	else {
		__NOP();
 8002aa8:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8002aaa:	4b05      	ldr	r3, [pc, #20]	@ (8002ac0 <currHourInc+0x74>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <currHourInc+0x74>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]

}
 8002ab6:	46c0      	nop			@ (mov r8, r8)
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	200000cc 	.word	0x200000cc
 8002ac0:	200000b8 	.word	0x200000b8
 8002ac4:	200001d8 	.word	0x200001d8
 8002ac8:	200000d0 	.word	0x200000d0

08002acc <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b04 <alarmMinuteInc+0x38>)
 8002ad2:	785b      	ldrb	r3, [r3, #1]
 8002ad4:	2b3a      	cmp	r3, #58	@ 0x3a
 8002ad6:	d903      	bls.n	8002ae0 <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b04 <alarmMinuteInc+0x38>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	705a      	strb	r2, [r3, #1]
 8002ade:	e00b      	b.n	8002af8 <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 8002ae0:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <alarmMinuteInc+0x38>)
 8002ae2:	785b      	ldrb	r3, [r3, #1]
 8002ae4:	2b3a      	cmp	r3, #58	@ 0x3a
 8002ae6:	d806      	bhi.n	8002af6 <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8002ae8:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <alarmMinuteInc+0x38>)
 8002aea:	785b      	ldrb	r3, [r3, #1]
 8002aec:	3301      	adds	r3, #1
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	4b04      	ldr	r3, [pc, #16]	@ (8002b04 <alarmMinuteInc+0x38>)
 8002af2:	705a      	strb	r2, [r3, #1]
 8002af4:	e000      	b.n	8002af8 <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 8002af6:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8002af8:	f000 f884 	bl	8002c04 <updateRTCBackupReg>

}
 8002afc:	46c0      	nop			@ (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	46c0      	nop			@ (mov r8, r8)
 8002b04:	200000d0 	.word	0x200000d0

08002b08 <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8002b0c:	4a11      	ldr	r2, [pc, #68]	@ (8002b54 <currMinuteInc+0x4c>)
 8002b0e:	4912      	ldr	r1, [pc, #72]	@ (8002b58 <currMinuteInc+0x50>)
 8002b10:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <currMinuteInc+0x54>)
 8002b12:	0018      	movs	r0, r3
 8002b14:	f7fe fdcc 	bl	80016b0 <getRTCTime>

	if(currTime.Minutes >= 59) {
 8002b18:	4b0f      	ldr	r3, [pc, #60]	@ (8002b58 <currMinuteInc+0x50>)
 8002b1a:	785b      	ldrb	r3, [r3, #1]
 8002b1c:	2b3a      	cmp	r3, #58	@ 0x3a
 8002b1e:	d903      	bls.n	8002b28 <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 8002b20:	4b0d      	ldr	r3, [pc, #52]	@ (8002b58 <currMinuteInc+0x50>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	705a      	strb	r2, [r3, #1]
 8002b26:	e00b      	b.n	8002b40 <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 8002b28:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <currMinuteInc+0x50>)
 8002b2a:	785b      	ldrb	r3, [r3, #1]
 8002b2c:	2b3a      	cmp	r3, #58	@ 0x3a
 8002b2e:	d806      	bhi.n	8002b3e <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 8002b30:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <currMinuteInc+0x50>)
 8002b32:	785b      	ldrb	r3, [r3, #1]
 8002b34:	3301      	adds	r3, #1
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	4b07      	ldr	r3, [pc, #28]	@ (8002b58 <currMinuteInc+0x50>)
 8002b3a:	705a      	strb	r2, [r3, #1]
 8002b3c:	e000      	b.n	8002b40 <currMinuteInc+0x38>
	}
	else {
		__NOP();
 8002b3e:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <currMinuteInc+0x50>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8002b46:	4b04      	ldr	r3, [pc, #16]	@ (8002b58 <currMinuteInc+0x50>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]

}
 8002b4c:	46c0      	nop			@ (mov r8, r8)
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	46c0      	nop			@ (mov r8, r8)
 8002b54:	200000cc 	.word	0x200000cc
 8002b58:	200000b8 	.word	0x200000b8
 8002b5c:	200001d8 	.word	0x200001d8

08002b60 <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 8002b64:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <dispFault+0x1c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2280      	movs	r2, #128	@ 0x80
 8002b6a:	0151      	lsls	r1, r2, #5
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f001 fc91 	bl	8004496 <HAL_GPIO_WritePin>
}
 8002b74:	46c0      	nop			@ (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	20000028 	.word	0x20000028

08002b80 <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8002b86:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf8 <dispFailure+0x78>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f005 fce8 	bl	8008560 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8002b90:	4b19      	ldr	r3, [pc, #100]	@ (8002bf8 <dispFailure+0x78>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	0018      	movs	r0, r3
 8002b96:	f005 fc97 	bl	80084c8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8002b9a:	4b17      	ldr	r3, [pc, #92]	@ (8002bf8 <dispFailure+0x78>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8002ba4:	1cfb      	adds	r3, r7, #3
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8002baa:	4b13      	ldr	r3, [pc, #76]	@ (8002bf8 <dispFailure+0x78>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	4a11      	ldr	r2, [pc, #68]	@ (8002bfc <dispFailure+0x7c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d9f6      	bls.n	8002baa <dispFailure+0x2a>

			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8002bbc:	4b10      	ldr	r3, [pc, #64]	@ (8002c00 <dispFailure+0x80>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2280      	movs	r2, #128	@ 0x80
 8002bc2:	0152      	lsls	r2, r2, #5
 8002bc4:	0011      	movs	r1, r2
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f001 fc82 	bl	80044d0 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf8 <dispFailure+0x78>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8002bd6:	1cfb      	adds	r3, r7, #3
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	1e5a      	subs	r2, r3, #1
 8002bdc:	4193      	sbcs	r3, r2
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2201      	movs	r2, #1
 8002be2:	4053      	eors	r3, r2
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	001a      	movs	r2, r3
 8002be8:	1cfb      	adds	r3, r7, #3
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	781a      	ldrb	r2, [r3, #0]
 8002bee:	2101      	movs	r1, #1
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8002bf4:	e7d9      	b.n	8002baa <dispFailure+0x2a>
 8002bf6:	46c0      	nop			@ (mov r8, r8)
 8002bf8:	2000006c 	.word	0x2000006c
 8002bfc:	00003ffe 	.word	0x00003ffe
 8002c00:	20000028 	.word	0x20000028

08002c04 <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8002c08:	4b0e      	ldr	r3, [pc, #56]	@ (8002c44 <updateRTCBackupReg+0x40>)
 8002c0a:	6819      	ldr	r1, [r3, #0]
 8002c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c48 <updateRTCBackupReg+0x44>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	001a      	movs	r2, r3
 8002c12:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <updateRTCBackupReg+0x48>)
 8002c14:	0018      	movs	r0, r3
 8002c16:	f004 fca6 	bl	8007566 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c50 <updateRTCBackupReg+0x4c>)
 8002c1c:	6819      	ldr	r1, [r3, #0]
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c48 <updateRTCBackupReg+0x44>)
 8002c20:	785b      	ldrb	r3, [r3, #1]
 8002c22:	001a      	movs	r2, r3
 8002c24:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <updateRTCBackupReg+0x48>)
 8002c26:	0018      	movs	r0, r3
 8002c28:	f004 fc9d 	bl	8007566 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8002c2c:	4b09      	ldr	r3, [pc, #36]	@ (8002c54 <updateRTCBackupReg+0x50>)
 8002c2e:	6819      	ldr	r1, [r3, #0]
 8002c30:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <updateRTCBackupReg+0x44>)
 8002c32:	78db      	ldrb	r3, [r3, #3]
 8002c34:	001a      	movs	r2, r3
 8002c36:	4b05      	ldr	r3, [pc, #20]	@ (8002c4c <updateRTCBackupReg+0x48>)
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f004 fc94 	bl	8007566 <HAL_RTCEx_BKUPWrite>

}
 8002c3e:	46c0      	nop			@ (mov r8, r8)
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	200000e4 	.word	0x200000e4
 8002c48:	200000d0 	.word	0x200000d0
 8002c4c:	200001d8 	.word	0x200001d8
 8002c50:	20000034 	.word	0x20000034
 8002c54:	20000038 	.word	0x20000038

08002c58 <conv2Mil>:

/*
 * Converts the time in an AM/PM RTC time to 24-hour time
 * Returns this time in an RTC Time Def object
 */
RTC_TimeTypeDef conv2Mil(RTC_TimeTypeDef *oldTime) {
 8002c58:	b5b0      	push	{r4, r5, r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]

	RTC_TimeTypeDef convertedTime = *oldTime;
 8002c62:	250c      	movs	r5, #12
 8002c64:	197b      	adds	r3, r7, r5
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c6a:	c313      	stmia	r3!, {r0, r1, r4}
 8002c6c:	ca03      	ldmia	r2!, {r0, r1}
 8002c6e:	c303      	stmia	r3!, {r0, r1}

	// If we are in PM, increment hours by 12 (but not if it is 12 p.m.)
	if(oldTime->TimeFormat == RTC_HOURFORMAT12_PM && oldTime->Hours != 12) {
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	78db      	ldrb	r3, [r3, #3]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d10a      	bne.n	8002c8e <conv2Mil+0x36>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b0c      	cmp	r3, #12
 8002c7e:	d006      	beq.n	8002c8e <conv2Mil+0x36>
		convertedTime.Hours += 12;
 8002c80:	197b      	adds	r3, r7, r5
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	330c      	adds	r3, #12
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	197b      	adds	r3, r7, r5
 8002c8a:	701a      	strb	r2, [r3, #0]
 8002c8c:	e00b      	b.n	8002ca6 <conv2Mil+0x4e>
	}
	// If we are in AM and the hours are 12, set hours to 0.
	else if(oldTime->TimeFormat == RTC_HOURFORMAT12_AM && oldTime->Hours == 12) {
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	78db      	ldrb	r3, [r3, #3]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d107      	bne.n	8002ca6 <conv2Mil+0x4e>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b0c      	cmp	r3, #12
 8002c9c:	d103      	bne.n	8002ca6 <conv2Mil+0x4e>
		convertedTime.Hours = 0;
 8002c9e:	230c      	movs	r3, #12
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
	else { // No change

	}

	// Make the update and display time function think that it is AM always
	convertedTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002ca6:	210c      	movs	r1, #12
 8002ca8:	187b      	adds	r3, r7, r1
 8002caa:	2200      	movs	r2, #0
 8002cac:	70da      	strb	r2, [r3, #3]

	return convertedTime;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	187a      	adds	r2, r7, r1
 8002cb2:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002cb4:	c313      	stmia	r3!, {r0, r1, r4}
 8002cb6:	ca03      	ldmia	r2!, {r0, r1}
 8002cb8:	c303      	stmia	r3!, {r0, r1}

}
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b008      	add	sp, #32
 8002cc0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002cc4 <startAudioStream>:

/*
 * Begins DMA streams to pull data from memory, process data, and push to i2s amplifier.
 */
void startAudioStream(void) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0

	// Pre-fill TX buffer
	fillTxBuffer(0);
 8002cc8:	2000      	movs	r0, #0
 8002cca:	f000 f843 	bl	8002d54 <fillTxBuffer>
	fillTxBuffer(BUFFER_SIZE);
 8002cce:	2040      	movs	r0, #64	@ 0x40
 8002cd0:	f000 f840 	bl	8002d54 <fillTxBuffer>

	// Start TX DMA stream
	HAL_I2S_Transmit_DMA(&hi2s1, i2sTxBuff, BUFFER_SIZE * 2);
 8002cd4:	4906      	ldr	r1, [pc, #24]	@ (8002cf0 <startAudioStream+0x2c>)
 8002cd6:	4b07      	ldr	r3, [pc, #28]	@ (8002cf4 <startAudioStream+0x30>)
 8002cd8:	2280      	movs	r2, #128	@ 0x80
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f002 fb78 	bl	80053d0 <HAL_I2S_Transmit_DMA>

	// Enable Amplifier
	NAU8315YG_AmpEnable(&i2sAmp);
 8002ce0:	4b05      	ldr	r3, [pc, #20]	@ (8002cf8 <startAudioStream+0x34>)
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f7fd fe62 	bl	80009ac <NAU8315YG_AmpEnable>

	// Interrupts will take care of the rest.

}
 8002ce8:	46c0      	nop			@ (mov r8, r8)
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	46c0      	nop			@ (mov r8, r8)
 8002cf0:	20000494 	.word	0x20000494
 8002cf4:	20000140 	.word	0x20000140
 8002cf8:	20000444 	.word	0x20000444

08002cfc <stopAudioStream>:

/*
 * Halts DMA streams
 */
void stopAudioStream(void) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0

	// Disable Amplifier
	NAU8315YG_AmpDisable(&i2sAmp);
 8002d00:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <stopAudioStream+0x20>)
 8002d02:	0018      	movs	r0, r3
 8002d04:	f7fd fe66 	bl	80009d4 <NAU8315YG_AmpDisable>

	// Stop DMA Stream
	HAL_I2S_DMAStop(&hi2s1);
 8002d08:	4b05      	ldr	r3, [pc, #20]	@ (8002d20 <stopAudioStream+0x24>)
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f002 fc0c 	bl	8005528 <HAL_I2S_DMAStop>

	// Reset memory address pointer
	flashReadAddr = initialMemoryOffset;
 8002d10:	4b04      	ldr	r3, [pc, #16]	@ (8002d24 <stopAudioStream+0x28>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]

}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000444 	.word	0x20000444
 8002d20:	20000140 	.word	0x20000140
 8002d24:	20000594 	.word	0x20000594

08002d28 <HAL_I2S_TxHalfCpltCallback>:

/*
 * DMA completion callbacks
 */

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

	// Fill first half of i2s TX buffer
	fillTxBuffer(0);
 8002d30:	2000      	movs	r0, #0
 8002d32:	f000 f80f 	bl	8002d54 <fillTxBuffer>


}
 8002d36:	46c0      	nop			@ (mov r8, r8)
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b002      	add	sp, #8
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]

	// Fill second half of i2s transmit buffer
	fillTxBuffer(BUFFER_SIZE);
 8002d46:	2040      	movs	r0, #64	@ 0x40
 8002d48:	f000 f804 	bl	8002d54 <fillTxBuffer>


}
 8002d4c:	46c0      	nop			@ (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b002      	add	sp, #8
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <fillTxBuffer>:

void fillTxBuffer(uint16_t offset) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	0002      	movs	r2, r0
 8002d5c:	1dbb      	adds	r3, r7, #6
 8002d5e:	801a      	strh	r2, [r3, #0]

	// Read next chunk of audio data, increment flash read address
	W25Q_readData(&spiFlash, flashReadAddr, BUFFER_SIZE, spiRxBuff);
 8002d60:	4b20      	ldr	r3, [pc, #128]	@ (8002de4 <fillTxBuffer+0x90>)
 8002d62:	6819      	ldr	r1, [r3, #0]
 8002d64:	4b20      	ldr	r3, [pc, #128]	@ (8002de8 <fillTxBuffer+0x94>)
 8002d66:	4821      	ldr	r0, [pc, #132]	@ (8002dec <fillTxBuffer+0x98>)
 8002d68:	2240      	movs	r2, #64	@ 0x40
 8002d6a:	f7fe fabf 	bl	80012ec <W25Q_readData>
	flashReadAddr += BUFFER_SIZE;
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002de4 <fillTxBuffer+0x90>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3340      	adds	r3, #64	@ 0x40
 8002d74:	001a      	movs	r2, r3
 8002d76:	4b1b      	ldr	r3, [pc, #108]	@ (8002de4 <fillTxBuffer+0x90>)
 8002d78:	601a      	str	r2, [r3, #0]

	// Playing all of a mono file canS-mono-reduced
	 for(uint16_t i = 0; i < BUFFER_SIZE; i += 2) {
 8002d7a:	230e      	movs	r3, #14
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	2200      	movs	r2, #0
 8002d80:	801a      	strh	r2, [r3, #0]
 8002d82:	e01d      	b.n	8002dc0 <fillTxBuffer+0x6c>

		 i2sTxBuff[offset + (i) + 1] = (spiRxBuff[i + 1] << 8) | spiRxBuff[i];
 8002d84:	200e      	movs	r0, #14
 8002d86:	183b      	adds	r3, r7, r0
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	4a16      	ldr	r2, [pc, #88]	@ (8002de8 <fillTxBuffer+0x94>)
 8002d8e:	5cd3      	ldrb	r3, [r2, r3]
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	b21a      	sxth	r2, r3
 8002d94:	183b      	adds	r3, r7, r0
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	4913      	ldr	r1, [pc, #76]	@ (8002de8 <fillTxBuffer+0x94>)
 8002d9a:	5ccb      	ldrb	r3, [r1, r3]
 8002d9c:	b21b      	sxth	r3, r3
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	b219      	sxth	r1, r3
 8002da2:	1dbb      	adds	r3, r7, #6
 8002da4:	881a      	ldrh	r2, [r3, #0]
 8002da6:	183b      	adds	r3, r7, r0
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	18d3      	adds	r3, r2, r3
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	b289      	uxth	r1, r1
 8002db0:	4b0f      	ldr	r3, [pc, #60]	@ (8002df0 <fillTxBuffer+0x9c>)
 8002db2:	0052      	lsls	r2, r2, #1
 8002db4:	52d1      	strh	r1, [r2, r3]
	 for(uint16_t i = 0; i < BUFFER_SIZE; i += 2) {
 8002db6:	183b      	adds	r3, r7, r0
 8002db8:	183a      	adds	r2, r7, r0
 8002dba:	8812      	ldrh	r2, [r2, #0]
 8002dbc:	3202      	adds	r2, #2
 8002dbe:	801a      	strh	r2, [r3, #0]
 8002dc0:	230e      	movs	r3, #14
 8002dc2:	18fb      	adds	r3, r7, r3
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002dc8:	d9dc      	bls.n	8002d84 <fillTxBuffer+0x30>

	 }


	// If we have reached the end of the audio clip, reset flash read address
	if(flashReadAddr > audioAddr_END) {
 8002dca:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <fillTxBuffer+0x90>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a09      	ldr	r2, [pc, #36]	@ (8002df4 <fillTxBuffer+0xa0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d902      	bls.n	8002dda <fillTxBuffer+0x86>
		flashReadAddr = initialMemoryOffset;
 8002dd4:	4b03      	ldr	r3, [pc, #12]	@ (8002de4 <fillTxBuffer+0x90>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
	}


}
 8002dda:	46c0      	nop			@ (mov r8, r8)
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b004      	add	sp, #16
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	46c0      	nop			@ (mov r8, r8)
 8002de4:	20000594 	.word	0x20000594
 8002de8:	20000454 	.word	0x20000454
 8002dec:	2000041c 	.word	0x2000041c
 8002df0:	20000494 	.word	0x20000494
 8002df4:	00890e0e 	.word	0x00890e0e

08002df8 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

	//TEST?
	__NOP();
 8002e00:	46c0      	nop			@ (mov r8, r8)


}
 8002e02:	46c0      	nop			@ (mov r8, r8)
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b002      	add	sp, #8
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e0e:	b672      	cpsid	i
}
 8002e10:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e12:	46c0      	nop			@ (mov r8, r8)
 8002e14:	e7fd      	b.n	8002e12 <Error_Handler+0x8>
	...

08002e18 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8002e18:	b5b0      	push	{r4, r5, r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	0005      	movs	r5, r0
 8002e20:	000c      	movs	r4, r1
 8002e22:	0010      	movs	r0, r2
 8002e24:	0019      	movs	r1, r3
 8002e26:	1dbb      	adds	r3, r7, #6
 8002e28:	1c2a      	adds	r2, r5, #0
 8002e2a:	801a      	strh	r2, [r3, #0]
 8002e2c:	1d3b      	adds	r3, r7, #4
 8002e2e:	1c22      	adds	r2, r4, #0
 8002e30:	801a      	strh	r2, [r3, #0]
 8002e32:	1cbb      	adds	r3, r7, #2
 8002e34:	1c02      	adds	r2, r0, #0
 8002e36:	801a      	strh	r2, [r3, #0]
 8002e38:	003b      	movs	r3, r7
 8002e3a:	1c0a      	adds	r2, r1, #0
 8002e3c:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8002e3e:	4b7c      	ldr	r3, [pc, #496]	@ (8003030 <sevSeg_Init+0x218>)
 8002e40:	1dba      	adds	r2, r7, #6
 8002e42:	8812      	ldrh	r2, [r2, #0]
 8002e44:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8002e46:	4b7b      	ldr	r3, [pc, #492]	@ (8003034 <sevSeg_Init+0x21c>)
 8002e48:	1d3a      	adds	r2, r7, #4
 8002e4a:	8812      	ldrh	r2, [r2, #0]
 8002e4c:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8002e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8003038 <sevSeg_Init+0x220>)
 8002e50:	1cba      	adds	r2, r7, #2
 8002e52:	8812      	ldrh	r2, [r2, #0]
 8002e54:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8002e56:	4b79      	ldr	r3, [pc, #484]	@ (800303c <sevSeg_Init+0x224>)
 8002e58:	003a      	movs	r2, r7
 8002e5a:	8812      	ldrh	r2, [r2, #0]
 8002e5c:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8002e5e:	4a78      	ldr	r2, [pc, #480]	@ (8003040 <sevSeg_Init+0x228>)
 8002e60:	2330      	movs	r3, #48	@ 0x30
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8002e68:	4a76      	ldr	r2, [pc, #472]	@ (8003044 <sevSeg_Init+0x22c>)
 8002e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e6c:	0010      	movs	r0, r2
 8002e6e:	0019      	movs	r1, r3
 8002e70:	234c      	movs	r3, #76	@ 0x4c
 8002e72:	001a      	movs	r2, r3
 8002e74:	f006 fb6a 	bl	800954c <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8002e78:	4b73      	ldr	r3, [pc, #460]	@ (8003048 <sevSeg_Init+0x230>)
 8002e7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e7c:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
 8002e82:	e00b      	b.n	8002e9c <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e8a:	18d3      	adds	r3, r2, r3
 8002e8c:	6819      	ldr	r1, [r3, #0]
 8002e8e:	4b6f      	ldr	r3, [pc, #444]	@ (800304c <sevSeg_Init+0x234>)
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	0092      	lsls	r2, r2, #2
 8002e94:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	ddf0      	ble.n	8002e84 <sevSeg_Init+0x6c>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8002ea2:	4b6a      	ldr	r3, [pc, #424]	@ (800304c <sevSeg_Init+0x234>)
 8002ea4:	6918      	ldr	r0, [r3, #16]
 8002ea6:	4b66      	ldr	r3, [pc, #408]	@ (8003040 <sevSeg_Init+0x228>)
 8002ea8:	8819      	ldrh	r1, [r3, #0]
 8002eaa:	4b69      	ldr	r3, [pc, #420]	@ (8003050 <sevSeg_Init+0x238>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	001a      	movs	r2, r3
 8002eb0:	f001 faf1 	bl	8004496 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8002eb4:	4b65      	ldr	r3, [pc, #404]	@ (800304c <sevSeg_Init+0x234>)
 8002eb6:	6918      	ldr	r0, [r3, #16]
 8002eb8:	4b61      	ldr	r3, [pc, #388]	@ (8003040 <sevSeg_Init+0x228>)
 8002eba:	8819      	ldrh	r1, [r3, #0]
 8002ebc:	4b64      	ldr	r3, [pc, #400]	@ (8003050 <sevSeg_Init+0x238>)
 8002ebe:	785b      	ldrb	r3, [r3, #1]
 8002ec0:	001a      	movs	r2, r3
 8002ec2:	f001 fae8 	bl	8004496 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002ec6:	4b61      	ldr	r3, [pc, #388]	@ (800304c <sevSeg_Init+0x234>)
 8002ec8:	6898      	ldr	r0, [r3, #8]
 8002eca:	4b5b      	ldr	r3, [pc, #364]	@ (8003038 <sevSeg_Init+0x220>)
 8002ecc:	8819      	ldrh	r1, [r3, #0]
 8002ece:	4b60      	ldr	r3, [pc, #384]	@ (8003050 <sevSeg_Init+0x238>)
 8002ed0:	785b      	ldrb	r3, [r3, #1]
 8002ed2:	001a      	movs	r2, r3
 8002ed4:	f001 fadf 	bl	8004496 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002ed8:	4b5c      	ldr	r3, [pc, #368]	@ (800304c <sevSeg_Init+0x234>)
 8002eda:	6898      	ldr	r0, [r3, #8]
 8002edc:	4b56      	ldr	r3, [pc, #344]	@ (8003038 <sevSeg_Init+0x220>)
 8002ede:	8819      	ldrh	r1, [r3, #0]
 8002ee0:	4b5b      	ldr	r3, [pc, #364]	@ (8003050 <sevSeg_Init+0x238>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	f001 fad6 	bl	8004496 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8002eea:	4b58      	ldr	r3, [pc, #352]	@ (800304c <sevSeg_Init+0x234>)
 8002eec:	68d8      	ldr	r0, [r3, #12]
 8002eee:	4b53      	ldr	r3, [pc, #332]	@ (800303c <sevSeg_Init+0x224>)
 8002ef0:	8819      	ldrh	r1, [r3, #0]
 8002ef2:	4b57      	ldr	r3, [pc, #348]	@ (8003050 <sevSeg_Init+0x238>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	001a      	movs	r2, r3
 8002ef8:	f001 facd 	bl	8004496 <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(50);
 8002efc:	2032      	movs	r0, #50	@ 0x32
 8002efe:	f000 f95f 	bl	80031c0 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8002f02:	2308      	movs	r3, #8
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	4a53      	ldr	r2, [pc, #332]	@ (8003054 <sevSeg_Init+0x23c>)
 8002f08:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	e038      	b.n	8002f82 <sevSeg_Init+0x16a>

		sendByte = hofSymb[i];
 8002f10:	231b      	movs	r3, #27
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	2208      	movs	r2, #8
 8002f16:	18b9      	adds	r1, r7, r2
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	188a      	adds	r2, r1, r2
 8002f1c:	7812      	ldrb	r2, [r2, #0]
 8002f1e:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8002f20:	2300      	movs	r3, #0
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	e027      	b.n	8002f76 <sevSeg_Init+0x15e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8002f26:	4b49      	ldr	r3, [pc, #292]	@ (800304c <sevSeg_Init+0x234>)
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	4b41      	ldr	r3, [pc, #260]	@ (8003030 <sevSeg_Init+0x218>)
 8002f2c:	8819      	ldrh	r1, [r3, #0]
 8002f2e:	241b      	movs	r4, #27
 8002f30:	193b      	adds	r3, r7, r4
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2201      	movs	r2, #1
 8002f36:	4013      	ands	r3, r2
 8002f38:	4a45      	ldr	r2, [pc, #276]	@ (8003050 <sevSeg_Init+0x238>)
 8002f3a:	5cd3      	ldrb	r3, [r2, r3]
 8002f3c:	001a      	movs	r2, r3
 8002f3e:	f001 faaa 	bl	8004496 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8002f42:	4b42      	ldr	r3, [pc, #264]	@ (800304c <sevSeg_Init+0x234>)
 8002f44:	6858      	ldr	r0, [r3, #4]
 8002f46:	4b3b      	ldr	r3, [pc, #236]	@ (8003034 <sevSeg_Init+0x21c>)
 8002f48:	8819      	ldrh	r1, [r3, #0]
 8002f4a:	4b41      	ldr	r3, [pc, #260]	@ (8003050 <sevSeg_Init+0x238>)
 8002f4c:	785b      	ldrb	r3, [r3, #1]
 8002f4e:	001a      	movs	r2, r3
 8002f50:	f001 faa1 	bl	8004496 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8002f54:	4b3d      	ldr	r3, [pc, #244]	@ (800304c <sevSeg_Init+0x234>)
 8002f56:	6858      	ldr	r0, [r3, #4]
 8002f58:	4b36      	ldr	r3, [pc, #216]	@ (8003034 <sevSeg_Init+0x21c>)
 8002f5a:	8819      	ldrh	r1, [r3, #0]
 8002f5c:	4b3c      	ldr	r3, [pc, #240]	@ (8003050 <sevSeg_Init+0x238>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	001a      	movs	r2, r3
 8002f62:	f001 fa98 	bl	8004496 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8002f66:	193b      	adds	r3, r7, r4
 8002f68:	193a      	adds	r2, r7, r4
 8002f6a:	7812      	ldrb	r2, [r2, #0]
 8002f6c:	0852      	lsrs	r2, r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	3301      	adds	r3, #1
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2b07      	cmp	r3, #7
 8002f7a:	ddd4      	ble.n	8002f26 <sevSeg_Init+0x10e>
	for(int i = 0; i <= 3; i++) {
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	ddc3      	ble.n	8002f10 <sevSeg_Init+0xf8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002f88:	4b30      	ldr	r3, [pc, #192]	@ (800304c <sevSeg_Init+0x234>)
 8002f8a:	6898      	ldr	r0, [r3, #8]
 8002f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8003038 <sevSeg_Init+0x220>)
 8002f8e:	8819      	ldrh	r1, [r3, #0]
 8002f90:	4b2f      	ldr	r3, [pc, #188]	@ (8003050 <sevSeg_Init+0x238>)
 8002f92:	785b      	ldrb	r3, [r3, #1]
 8002f94:	001a      	movs	r2, r3
 8002f96:	f001 fa7e 	bl	8004496 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800304c <sevSeg_Init+0x234>)
 8002f9c:	6898      	ldr	r0, [r3, #8]
 8002f9e:	4b26      	ldr	r3, [pc, #152]	@ (8003038 <sevSeg_Init+0x220>)
 8002fa0:	8819      	ldrh	r1, [r3, #0]
 8002fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8003050 <sevSeg_Init+0x238>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	001a      	movs	r2, r3
 8002fa8:	f001 fa75 	bl	8004496 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8002fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f005 fad6 	bl	8008560 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f005 fa86 	bl	80084c8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8002fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc2:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8002fc4:	46c0      	nop			@ (mov r8, r8)
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1ad2      	subs	r2, r2, r3
 8002fd0:	2380      	movs	r3, #128	@ 0x80
 8002fd2:	01db      	lsls	r3, r3, #7
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d3f6      	bcc.n	8002fc6 <sevSeg_Init+0x1ae>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8002fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f005 fac0 	bl	8008560 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800304c <sevSeg_Init+0x234>)
 8002fe2:	6918      	ldr	r0, [r3, #16]
 8002fe4:	4b16      	ldr	r3, [pc, #88]	@ (8003040 <sevSeg_Init+0x228>)
 8002fe6:	8819      	ldrh	r1, [r3, #0]
 8002fe8:	4b19      	ldr	r3, [pc, #100]	@ (8003050 <sevSeg_Init+0x238>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	001a      	movs	r2, r3
 8002fee:	f001 fa52 	bl	8004496 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8002ff2:	4b16      	ldr	r3, [pc, #88]	@ (800304c <sevSeg_Init+0x234>)
 8002ff4:	6918      	ldr	r0, [r3, #16]
 8002ff6:	4b12      	ldr	r3, [pc, #72]	@ (8003040 <sevSeg_Init+0x228>)
 8002ff8:	8819      	ldrh	r1, [r3, #0]
 8002ffa:	4b15      	ldr	r3, [pc, #84]	@ (8003050 <sevSeg_Init+0x238>)
 8002ffc:	785b      	ldrb	r3, [r3, #1]
 8002ffe:	001a      	movs	r2, r3
 8003000:	f001 fa49 	bl	8004496 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8003004:	4b11      	ldr	r3, [pc, #68]	@ (800304c <sevSeg_Init+0x234>)
 8003006:	6898      	ldr	r0, [r3, #8]
 8003008:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <sevSeg_Init+0x220>)
 800300a:	8819      	ldrh	r1, [r3, #0]
 800300c:	4b10      	ldr	r3, [pc, #64]	@ (8003050 <sevSeg_Init+0x238>)
 800300e:	785b      	ldrb	r3, [r3, #1]
 8003010:	001a      	movs	r2, r3
 8003012:	f001 fa40 	bl	8004496 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8003016:	4b0d      	ldr	r3, [pc, #52]	@ (800304c <sevSeg_Init+0x234>)
 8003018:	6898      	ldr	r0, [r3, #8]
 800301a:	4b07      	ldr	r3, [pc, #28]	@ (8003038 <sevSeg_Init+0x220>)
 800301c:	8819      	ldrh	r1, [r3, #0]
 800301e:	4b0c      	ldr	r3, [pc, #48]	@ (8003050 <sevSeg_Init+0x238>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	001a      	movs	r2, r3
 8003024:	f001 fa37 	bl	8004496 <HAL_GPIO_WritePin>

}
 8003028:	46c0      	nop			@ (mov r8, r8)
 800302a:	46bd      	mov	sp, r7
 800302c:	b008      	add	sp, #32
 800302e:	bdb0      	pop	{r4, r5, r7, pc}
 8003030:	20000598 	.word	0x20000598
 8003034:	2000059a 	.word	0x2000059a
 8003038:	2000059c 	.word	0x2000059c
 800303c:	2000059e 	.word	0x2000059e
 8003040:	200005a0 	.word	0x200005a0
 8003044:	200005a4 	.word	0x200005a4
 8003048:	200005f0 	.word	0x200005f0
 800304c:	20000074 	.word	0x20000074
 8003050:	20000088 	.word	0x20000088
 8003054:	471d3700 	.word	0x471d3700

08003058 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime, uint8_t userAlarmEnable) {
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	000a      	movs	r2, r1
 8003062:	1cfb      	adds	r3, r7, #3
 8003064:	701a      	strb	r2, [r3, #0]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	210a      	movs	r1, #10
 800306c:	0018      	movs	r0, r3
 800306e:	f7fd f849 	bl	8000104 <__udivsi3>
 8003072:	0003      	movs	r3, r0
 8003074:	b2da      	uxtb	r2, r3
 8003076:	2408      	movs	r4, #8
 8003078:	193b      	adds	r3, r7, r4
 800307a:	701a      	strb	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	210a      	movs	r1, #10
 8003082:	0018      	movs	r0, r3
 8003084:	f7fd f8c4 	bl	8000210 <__aeabi_uidivmod>
 8003088:	000b      	movs	r3, r1
 800308a:	b2da      	uxtb	r2, r3
 800308c:	193b      	adds	r3, r7, r4
 800308e:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8003094:	210a      	movs	r1, #10
 8003096:	0018      	movs	r0, r3
 8003098:	f7fd f834 	bl	8000104 <__udivsi3>
 800309c:	0003      	movs	r3, r0
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	193b      	adds	r3, r7, r4
 80030a2:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80030a8:	210a      	movs	r1, #10
 80030aa:	0018      	movs	r0, r3
 80030ac:	f7fd f8b0 	bl	8000210 <__aeabi_uidivmod>
 80030b0:	000b      	movs	r3, r1
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	193b      	adds	r3, r7, r4
 80030b6:	70da      	strb	r2, [r3, #3]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 3; i >= 0; i--) {
 80030b8:	2303      	movs	r3, #3
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	e05b      	b.n	8003176 <sevSeg_updateDigits+0x11e>

		sendByte = dispDigits[sendTime[i]];
 80030be:	2308      	movs	r3, #8
 80030c0:	18fa      	adds	r2, r7, r3
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	18d3      	adds	r3, r2, r3
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	0019      	movs	r1, r3
 80030ca:	2017      	movs	r0, #23
 80030cc:	183b      	adds	r3, r7, r0
 80030ce:	4a36      	ldr	r2, [pc, #216]	@ (80031a8 <sevSeg_updateDigits+0x150>)
 80030d0:	5c52      	ldrb	r2, [r2, r1]
 80030d2:	701a      	strb	r2, [r3, #0]

		// If tenth's place of hour and zero, disable this segment
		if( (i == 0) && (sendByte == dispDigits[0])) {
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d107      	bne.n	80030ea <sevSeg_updateDigits+0x92>
 80030da:	2242      	movs	r2, #66	@ 0x42
 80030dc:	183b      	adds	r3, r7, r0
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d102      	bne.n	80030ea <sevSeg_updateDigits+0x92>
			sendByte = 0xFF;
 80030e4:	183b      	adds	r3, r7, r0
 80030e6:	22ff      	movs	r2, #255	@ 0xff
 80030e8:	701a      	strb	r2, [r3, #0]
		}

		// If one's place of hour, set decimal point based on AM/PM.
		// OR
		// If one's place of minute, set decimal place based on user alarm enabled
		if( ((i == 3) && (updateTime->TimeFormat == RTC_HOURFORMAT12_PM)) ||
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d103      	bne.n	80030f8 <sevSeg_updateDigits+0xa0>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	78db      	ldrb	r3, [r3, #3]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d006      	beq.n	8003106 <sevSeg_updateDigits+0xae>
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d10a      	bne.n	8003114 <sevSeg_updateDigits+0xbc>
			((i == 1) && userAlarmEnable)	) {
 80030fe:	1cfb      	adds	r3, r7, #3
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d006      	beq.n	8003114 <sevSeg_updateDigits+0xbc>
			sendByte = (sendByte & 0b11111101);
 8003106:	2217      	movs	r2, #23
 8003108:	18bb      	adds	r3, r7, r2
 800310a:	18ba      	adds	r2, r7, r2
 800310c:	7812      	ldrb	r2, [r2, #0]
 800310e:	2102      	movs	r1, #2
 8003110:	438a      	bics	r2, r1
 8003112:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	e027      	b.n	800316a <sevSeg_updateDigits+0x112>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[(sendByte & 1)]);
 800311a:	4b24      	ldr	r3, [pc, #144]	@ (80031ac <sevSeg_updateDigits+0x154>)
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	4b24      	ldr	r3, [pc, #144]	@ (80031b0 <sevSeg_updateDigits+0x158>)
 8003120:	8819      	ldrh	r1, [r3, #0]
 8003122:	2417      	movs	r4, #23
 8003124:	193b      	adds	r3, r7, r4
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2201      	movs	r2, #1
 800312a:	4013      	ands	r3, r2
 800312c:	4a21      	ldr	r2, [pc, #132]	@ (80031b4 <sevSeg_updateDigits+0x15c>)
 800312e:	5cd3      	ldrb	r3, [r2, r3]
 8003130:	001a      	movs	r2, r3
 8003132:	f001 f9b0 	bl	8004496 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8003136:	4b1d      	ldr	r3, [pc, #116]	@ (80031ac <sevSeg_updateDigits+0x154>)
 8003138:	6858      	ldr	r0, [r3, #4]
 800313a:	4b1f      	ldr	r3, [pc, #124]	@ (80031b8 <sevSeg_updateDigits+0x160>)
 800313c:	8819      	ldrh	r1, [r3, #0]
 800313e:	4b1d      	ldr	r3, [pc, #116]	@ (80031b4 <sevSeg_updateDigits+0x15c>)
 8003140:	785b      	ldrb	r3, [r3, #1]
 8003142:	001a      	movs	r2, r3
 8003144:	f001 f9a7 	bl	8004496 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8003148:	4b18      	ldr	r3, [pc, #96]	@ (80031ac <sevSeg_updateDigits+0x154>)
 800314a:	6858      	ldr	r0, [r3, #4]
 800314c:	4b1a      	ldr	r3, [pc, #104]	@ (80031b8 <sevSeg_updateDigits+0x160>)
 800314e:	8819      	ldrh	r1, [r3, #0]
 8003150:	4b18      	ldr	r3, [pc, #96]	@ (80031b4 <sevSeg_updateDigits+0x15c>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	001a      	movs	r2, r3
 8003156:	f001 f99e 	bl	8004496 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 800315a:	193b      	adds	r3, r7, r4
 800315c:	193a      	adds	r2, r7, r4
 800315e:	7812      	ldrb	r2, [r2, #0]
 8003160:	0852      	lsrs	r2, r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3301      	adds	r3, #1
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b07      	cmp	r3, #7
 800316e:	ddd4      	ble.n	800311a <sevSeg_updateDigits+0xc2>
	for(int i = 3; i >= 0; i--) {
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	3b01      	subs	r3, #1
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	daa0      	bge.n	80030be <sevSeg_updateDigits+0x66>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 800317c:	4b0b      	ldr	r3, [pc, #44]	@ (80031ac <sevSeg_updateDigits+0x154>)
 800317e:	6898      	ldr	r0, [r3, #8]
 8003180:	4b0e      	ldr	r3, [pc, #56]	@ (80031bc <sevSeg_updateDigits+0x164>)
 8003182:	8819      	ldrh	r1, [r3, #0]
 8003184:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <sevSeg_updateDigits+0x15c>)
 8003186:	785b      	ldrb	r3, [r3, #1]
 8003188:	001a      	movs	r2, r3
 800318a:	f001 f984 	bl	8004496 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800318e:	4b07      	ldr	r3, [pc, #28]	@ (80031ac <sevSeg_updateDigits+0x154>)
 8003190:	6898      	ldr	r0, [r3, #8]
 8003192:	4b0a      	ldr	r3, [pc, #40]	@ (80031bc <sevSeg_updateDigits+0x164>)
 8003194:	8819      	ldrh	r1, [r3, #0]
 8003196:	4b07      	ldr	r3, [pc, #28]	@ (80031b4 <sevSeg_updateDigits+0x15c>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	001a      	movs	r2, r3
 800319c:	f001 f97b 	bl	8004496 <HAL_GPIO_WritePin>

	return;
 80031a0:	46c0      	nop			@ (mov r8, r8)

}
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b007      	add	sp, #28
 80031a6:	bd90      	pop	{r4, r7, pc}
 80031a8:	080095ac 	.word	0x080095ac
 80031ac:	20000074 	.word	0x20000074
 80031b0:	20000598 	.word	0x20000598
 80031b4:	20000088 	.word	0x20000088
 80031b8:	2000059a 	.word	0x2000059a
 80031bc:	2000059c 	.word	0x2000059c

080031c0 <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	0002      	movs	r2, r0
 80031c8:	1dbb      	adds	r3, r7, #6
 80031ca:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 80031cc:	4b20      	ldr	r3, [pc, #128]	@ (8003250 <sevSeg_setIntensity+0x90>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <sevSeg_setIntensity+0x20>
 80031d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003254 <sevSeg_setIntensity+0x94>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	1dba      	adds	r2, r7, #6
 80031da:	8812      	ldrh	r2, [r2, #0]
 80031dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80031de:	e02c      	b.n	800323a <sevSeg_setIntensity+0x7a>
 80031e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003250 <sevSeg_setIntensity+0x90>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d105      	bne.n	80031f4 <sevSeg_setIntensity+0x34>
 80031e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003254 <sevSeg_setIntensity+0x94>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	1dbb      	adds	r3, r7, #6
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	6393      	str	r3, [r2, #56]	@ 0x38
 80031f2:	e022      	b.n	800323a <sevSeg_setIntensity+0x7a>
 80031f4:	4b16      	ldr	r3, [pc, #88]	@ (8003250 <sevSeg_setIntensity+0x90>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d105      	bne.n	8003208 <sevSeg_setIntensity+0x48>
 80031fc:	4b15      	ldr	r3, [pc, #84]	@ (8003254 <sevSeg_setIntensity+0x94>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	1dbb      	adds	r3, r7, #6
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003206:	e018      	b.n	800323a <sevSeg_setIntensity+0x7a>
 8003208:	4b11      	ldr	r3, [pc, #68]	@ (8003250 <sevSeg_setIntensity+0x90>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b0c      	cmp	r3, #12
 800320e:	d105      	bne.n	800321c <sevSeg_setIntensity+0x5c>
 8003210:	4b10      	ldr	r3, [pc, #64]	@ (8003254 <sevSeg_setIntensity+0x94>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	1dbb      	adds	r3, r7, #6
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	6413      	str	r3, [r2, #64]	@ 0x40
 800321a:	e00e      	b.n	800323a <sevSeg_setIntensity+0x7a>
 800321c:	4b0c      	ldr	r3, [pc, #48]	@ (8003250 <sevSeg_setIntensity+0x90>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b10      	cmp	r3, #16
 8003222:	d105      	bne.n	8003230 <sevSeg_setIntensity+0x70>
 8003224:	4b0b      	ldr	r3, [pc, #44]	@ (8003254 <sevSeg_setIntensity+0x94>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	1dbb      	adds	r3, r7, #6
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	6593      	str	r3, [r2, #88]	@ 0x58
 800322e:	e004      	b.n	800323a <sevSeg_setIntensity+0x7a>
 8003230:	4b08      	ldr	r3, [pc, #32]	@ (8003254 <sevSeg_setIntensity+0x94>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	1dbb      	adds	r3, r7, #6
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 800323a:	4b05      	ldr	r3, [pc, #20]	@ (8003250 <sevSeg_setIntensity+0x90>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <sevSeg_setIntensity+0x94>)
 8003240:	0011      	movs	r1, r2
 8003242:	0018      	movs	r0, r3
 8003244:	f005 fa8c 	bl	8008760 <HAL_TIM_PWM_Start>

}
 8003248:	46c0      	nop			@ (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b002      	add	sp, #8
 800324e:	bd80      	pop	{r7, pc}
 8003250:	200005f0 	.word	0x200005f0
 8003254:	200005a4 	.word	0x200005a4

08003258 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325e:	4b13      	ldr	r3, [pc, #76]	@ (80032ac <HAL_MspInit+0x54>)
 8003260:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003262:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <HAL_MspInit+0x54>)
 8003264:	2101      	movs	r1, #1
 8003266:	430a      	orrs	r2, r1
 8003268:	641a      	str	r2, [r3, #64]	@ 0x40
 800326a:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <HAL_MspInit+0x54>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	2201      	movs	r2, #1
 8003270:	4013      	ands	r3, r2
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003276:	4b0d      	ldr	r3, [pc, #52]	@ (80032ac <HAL_MspInit+0x54>)
 8003278:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800327a:	4b0c      	ldr	r3, [pc, #48]	@ (80032ac <HAL_MspInit+0x54>)
 800327c:	2180      	movs	r1, #128	@ 0x80
 800327e:	0549      	lsls	r1, r1, #21
 8003280:	430a      	orrs	r2, r1
 8003282:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003284:	4b09      	ldr	r3, [pc, #36]	@ (80032ac <HAL_MspInit+0x54>)
 8003286:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003288:	2380      	movs	r3, #128	@ 0x80
 800328a:	055b      	lsls	r3, r3, #21
 800328c:	4013      	ands	r3, r2
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003292:	2200      	movs	r2, #0
 8003294:	2100      	movs	r1, #0
 8003296:	2004      	movs	r0, #4
 8003298:	f000 fc96 	bl	8003bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800329c:	2004      	movs	r0, #4
 800329e:	f000 fca8 	bl	8003bf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b002      	add	sp, #8
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	40021000 	.word	0x40021000

080032b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b095      	sub	sp, #84	@ 0x54
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b8:	233c      	movs	r3, #60	@ 0x3c
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	0018      	movs	r0, r3
 80032be:	2314      	movs	r3, #20
 80032c0:	001a      	movs	r2, r3
 80032c2:	2100      	movs	r1, #0
 80032c4:	f006 f916 	bl	80094f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032c8:	2414      	movs	r4, #20
 80032ca:	193b      	adds	r3, r7, r4
 80032cc:	0018      	movs	r0, r3
 80032ce:	2328      	movs	r3, #40	@ 0x28
 80032d0:	001a      	movs	r2, r3
 80032d2:	2100      	movs	r1, #0
 80032d4:	f006 f90e 	bl	80094f4 <memset>
  if(hi2c->Instance==I2C1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a22      	ldr	r2, [pc, #136]	@ (8003368 <HAL_I2C_MspInit+0xb8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d13d      	bne.n	800335e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	2220      	movs	r2, #32
 80032e6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80032e8:	193b      	adds	r3, r7, r4
 80032ea:	2200      	movs	r2, #0
 80032ec:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032ee:	193b      	adds	r3, r7, r4
 80032f0:	0018      	movs	r0, r3
 80032f2:	f002 ff93 	bl	800621c <HAL_RCCEx_PeriphCLKConfig>
 80032f6:	1e03      	subs	r3, r0, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80032fa:	f7ff fd86 	bl	8002e0a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fe:	4b1b      	ldr	r3, [pc, #108]	@ (800336c <HAL_I2C_MspInit+0xbc>)
 8003300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003302:	4b1a      	ldr	r3, [pc, #104]	@ (800336c <HAL_I2C_MspInit+0xbc>)
 8003304:	2102      	movs	r1, #2
 8003306:	430a      	orrs	r2, r1
 8003308:	635a      	str	r2, [r3, #52]	@ 0x34
 800330a:	4b18      	ldr	r3, [pc, #96]	@ (800336c <HAL_I2C_MspInit+0xbc>)
 800330c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330e:	2202      	movs	r2, #2
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003316:	213c      	movs	r1, #60	@ 0x3c
 8003318:	187b      	adds	r3, r7, r1
 800331a:	22c0      	movs	r2, #192	@ 0xc0
 800331c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800331e:	187b      	adds	r3, r7, r1
 8003320:	2212      	movs	r2, #18
 8003322:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	187b      	adds	r3, r7, r1
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332a:	187b      	adds	r3, r7, r1
 800332c:	2200      	movs	r2, #0
 800332e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003330:	187b      	adds	r3, r7, r1
 8003332:	2206      	movs	r2, #6
 8003334:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003336:	187b      	adds	r3, r7, r1
 8003338:	4a0d      	ldr	r2, [pc, #52]	@ (8003370 <HAL_I2C_MspInit+0xc0>)
 800333a:	0019      	movs	r1, r3
 800333c:	0010      	movs	r0, r2
 800333e:	f000 ff29 	bl	8004194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003342:	4b0a      	ldr	r3, [pc, #40]	@ (800336c <HAL_I2C_MspInit+0xbc>)
 8003344:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003346:	4b09      	ldr	r3, [pc, #36]	@ (800336c <HAL_I2C_MspInit+0xbc>)
 8003348:	2180      	movs	r1, #128	@ 0x80
 800334a:	0389      	lsls	r1, r1, #14
 800334c:	430a      	orrs	r2, r1
 800334e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003350:	4b06      	ldr	r3, [pc, #24]	@ (800336c <HAL_I2C_MspInit+0xbc>)
 8003352:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003354:	2380      	movs	r3, #128	@ 0x80
 8003356:	039b      	lsls	r3, r3, #14
 8003358:	4013      	ands	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800335e:	46c0      	nop			@ (mov r8, r8)
 8003360:	46bd      	mov	sp, r7
 8003362:	b015      	add	sp, #84	@ 0x54
 8003364:	bd90      	pop	{r4, r7, pc}
 8003366:	46c0      	nop			@ (mov r8, r8)
 8003368:	40005400 	.word	0x40005400
 800336c:	40021000 	.word	0x40021000
 8003370:	50000400 	.word	0x50000400

08003374 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003374:	b590      	push	{r4, r7, lr}
 8003376:	b095      	sub	sp, #84	@ 0x54
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	233c      	movs	r3, #60	@ 0x3c
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	0018      	movs	r0, r3
 8003382:	2314      	movs	r3, #20
 8003384:	001a      	movs	r2, r3
 8003386:	2100      	movs	r1, #0
 8003388:	f006 f8b4 	bl	80094f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800338c:	2414      	movs	r4, #20
 800338e:	193b      	adds	r3, r7, r4
 8003390:	0018      	movs	r0, r3
 8003392:	2328      	movs	r3, #40	@ 0x28
 8003394:	001a      	movs	r2, r3
 8003396:	2100      	movs	r1, #0
 8003398:	f006 f8ac 	bl	80094f4 <memset>
  if(hi2s->Instance==SPI1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a4a      	ldr	r2, [pc, #296]	@ (80034cc <HAL_I2S_MspInit+0x158>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d000      	beq.n	80033a8 <HAL_I2S_MspInit+0x34>
 80033a6:	e08d      	b.n	80034c4 <HAL_I2S_MspInit+0x150>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80033a8:	193b      	adds	r3, r7, r4
 80033aa:	2280      	movs	r2, #128	@ 0x80
 80033ac:	0112      	lsls	r2, r2, #4
 80033ae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80033b0:	193b      	adds	r3, r7, r4
 80033b2:	2200      	movs	r2, #0
 80033b4:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033b6:	193b      	adds	r3, r7, r4
 80033b8:	0018      	movs	r0, r3
 80033ba:	f002 ff2f 	bl	800621c <HAL_RCCEx_PeriphCLKConfig>
 80033be:	1e03      	subs	r3, r0, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80033c2:	f7ff fd22 	bl	8002e0a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033c6:	4b42      	ldr	r3, [pc, #264]	@ (80034d0 <HAL_I2S_MspInit+0x15c>)
 80033c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033ca:	4b41      	ldr	r3, [pc, #260]	@ (80034d0 <HAL_I2S_MspInit+0x15c>)
 80033cc:	2180      	movs	r1, #128	@ 0x80
 80033ce:	0149      	lsls	r1, r1, #5
 80033d0:	430a      	orrs	r2, r1
 80033d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80033d4:	4b3e      	ldr	r3, [pc, #248]	@ (80034d0 <HAL_I2S_MspInit+0x15c>)
 80033d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033d8:	2380      	movs	r3, #128	@ 0x80
 80033da:	015b      	lsls	r3, r3, #5
 80033dc:	4013      	ands	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e2:	4b3b      	ldr	r3, [pc, #236]	@ (80034d0 <HAL_I2S_MspInit+0x15c>)
 80033e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033e6:	4b3a      	ldr	r3, [pc, #232]	@ (80034d0 <HAL_I2S_MspInit+0x15c>)
 80033e8:	2101      	movs	r1, #1
 80033ea:	430a      	orrs	r2, r1
 80033ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80033ee:	4b38      	ldr	r3, [pc, #224]	@ (80034d0 <HAL_I2S_MspInit+0x15c>)
 80033f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f2:	2201      	movs	r2, #1
 80033f4:	4013      	ands	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fa:	4b35      	ldr	r3, [pc, #212]	@ (80034d0 <HAL_I2S_MspInit+0x15c>)
 80033fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033fe:	4b34      	ldr	r3, [pc, #208]	@ (80034d0 <HAL_I2S_MspInit+0x15c>)
 8003400:	2102      	movs	r1, #2
 8003402:	430a      	orrs	r2, r1
 8003404:	635a      	str	r2, [r3, #52]	@ 0x34
 8003406:	4b32      	ldr	r3, [pc, #200]	@ (80034d0 <HAL_I2S_MspInit+0x15c>)
 8003408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800340a:	2202      	movs	r2, #2
 800340c:	4013      	ands	r3, r2
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA1     ------> I2S1_CK
    PA2     ------> I2S1_SD
    PB0     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003412:	243c      	movs	r4, #60	@ 0x3c
 8003414:	193b      	adds	r3, r7, r4
 8003416:	2206      	movs	r2, #6
 8003418:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341a:	193b      	adds	r3, r7, r4
 800341c:	2202      	movs	r2, #2
 800341e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	193b      	adds	r3, r7, r4
 8003422:	2200      	movs	r2, #0
 8003424:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003426:	193b      	adds	r3, r7, r4
 8003428:	2200      	movs	r2, #0
 800342a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800342c:	193b      	adds	r3, r7, r4
 800342e:	2200      	movs	r2, #0
 8003430:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003432:	193a      	adds	r2, r7, r4
 8003434:	23a0      	movs	r3, #160	@ 0xa0
 8003436:	05db      	lsls	r3, r3, #23
 8003438:	0011      	movs	r1, r2
 800343a:	0018      	movs	r0, r3
 800343c:	f000 feaa 	bl	8004194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003440:	0021      	movs	r1, r4
 8003442:	187b      	adds	r3, r7, r1
 8003444:	2201      	movs	r2, #1
 8003446:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003448:	187b      	adds	r3, r7, r1
 800344a:	2202      	movs	r2, #2
 800344c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	187b      	adds	r3, r7, r1
 8003450:	2200      	movs	r2, #0
 8003452:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003454:	187b      	adds	r3, r7, r1
 8003456:	2200      	movs	r2, #0
 8003458:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800345a:	187b      	adds	r3, r7, r1
 800345c:	2200      	movs	r2, #0
 800345e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003460:	187b      	adds	r3, r7, r1
 8003462:	4a1c      	ldr	r2, [pc, #112]	@ (80034d4 <HAL_I2S_MspInit+0x160>)
 8003464:	0019      	movs	r1, r3
 8003466:	0010      	movs	r0, r2
 8003468:	f000 fe94 	bl	8004194 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 800346c:	4b1a      	ldr	r3, [pc, #104]	@ (80034d8 <HAL_I2S_MspInit+0x164>)
 800346e:	4a1b      	ldr	r2, [pc, #108]	@ (80034dc <HAL_I2S_MspInit+0x168>)
 8003470:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003472:	4b19      	ldr	r3, [pc, #100]	@ (80034d8 <HAL_I2S_MspInit+0x164>)
 8003474:	2211      	movs	r2, #17
 8003476:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003478:	4b17      	ldr	r3, [pc, #92]	@ (80034d8 <HAL_I2S_MspInit+0x164>)
 800347a:	2210      	movs	r2, #16
 800347c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800347e:	4b16      	ldr	r3, [pc, #88]	@ (80034d8 <HAL_I2S_MspInit+0x164>)
 8003480:	2200      	movs	r2, #0
 8003482:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003484:	4b14      	ldr	r3, [pc, #80]	@ (80034d8 <HAL_I2S_MspInit+0x164>)
 8003486:	2280      	movs	r2, #128	@ 0x80
 8003488:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800348a:	4b13      	ldr	r3, [pc, #76]	@ (80034d8 <HAL_I2S_MspInit+0x164>)
 800348c:	2280      	movs	r2, #128	@ 0x80
 800348e:	0052      	lsls	r2, r2, #1
 8003490:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003492:	4b11      	ldr	r3, [pc, #68]	@ (80034d8 <HAL_I2S_MspInit+0x164>)
 8003494:	2280      	movs	r2, #128	@ 0x80
 8003496:	00d2      	lsls	r2, r2, #3
 8003498:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800349a:	4b0f      	ldr	r3, [pc, #60]	@ (80034d8 <HAL_I2S_MspInit+0x164>)
 800349c:	2220      	movs	r2, #32
 800349e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80034a0:	4b0d      	ldr	r3, [pc, #52]	@ (80034d8 <HAL_I2S_MspInit+0x164>)
 80034a2:	22c0      	movs	r2, #192	@ 0xc0
 80034a4:	0192      	lsls	r2, r2, #6
 80034a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80034a8:	4b0b      	ldr	r3, [pc, #44]	@ (80034d8 <HAL_I2S_MspInit+0x164>)
 80034aa:	0018      	movs	r0, r3
 80034ac:	f000 fbbe 	bl	8003c2c <HAL_DMA_Init>
 80034b0:	1e03      	subs	r3, r0, #0
 80034b2:	d001      	beq.n	80034b8 <HAL_I2S_MspInit+0x144>
    {
      Error_Handler();
 80034b4:	f7ff fca9 	bl	8002e0a <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a07      	ldr	r2, [pc, #28]	@ (80034d8 <HAL_I2S_MspInit+0x164>)
 80034bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80034be:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <HAL_I2S_MspInit+0x164>)
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80034c4:	46c0      	nop			@ (mov r8, r8)
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b015      	add	sp, #84	@ 0x54
 80034ca:	bd90      	pop	{r4, r7, pc}
 80034cc:	40013000 	.word	0x40013000
 80034d0:	40021000 	.word	0x40021000
 80034d4:	50000400 	.word	0x50000400
 80034d8:	2000017c 	.word	0x2000017c
 80034dc:	40020008 	.word	0x40020008

080034e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80034e0:	b590      	push	{r4, r7, lr}
 80034e2:	b08f      	sub	sp, #60	@ 0x3c
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034e8:	2410      	movs	r4, #16
 80034ea:	193b      	adds	r3, r7, r4
 80034ec:	0018      	movs	r0, r3
 80034ee:	2328      	movs	r3, #40	@ 0x28
 80034f0:	001a      	movs	r2, r3
 80034f2:	2100      	movs	r1, #0
 80034f4:	f005 fffe 	bl	80094f4 <memset>
  if(hrtc->Instance==RTC)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a19      	ldr	r2, [pc, #100]	@ (8003564 <HAL_RTC_MspInit+0x84>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d12c      	bne.n	800355c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003502:	193b      	adds	r3, r7, r4
 8003504:	2280      	movs	r2, #128	@ 0x80
 8003506:	0292      	lsls	r2, r2, #10
 8003508:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800350a:	193b      	adds	r3, r7, r4
 800350c:	2280      	movs	r2, #128	@ 0x80
 800350e:	0052      	lsls	r2, r2, #1
 8003510:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003512:	193b      	adds	r3, r7, r4
 8003514:	0018      	movs	r0, r3
 8003516:	f002 fe81 	bl	800621c <HAL_RCCEx_PeriphCLKConfig>
 800351a:	1e03      	subs	r3, r0, #0
 800351c:	d001      	beq.n	8003522 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800351e:	f7ff fc74 	bl	8002e0a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003522:	4b11      	ldr	r3, [pc, #68]	@ (8003568 <HAL_RTC_MspInit+0x88>)
 8003524:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003526:	4b10      	ldr	r3, [pc, #64]	@ (8003568 <HAL_RTC_MspInit+0x88>)
 8003528:	2180      	movs	r1, #128	@ 0x80
 800352a:	0209      	lsls	r1, r1, #8
 800352c:	430a      	orrs	r2, r1
 800352e:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003530:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <HAL_RTC_MspInit+0x88>)
 8003532:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003534:	4b0c      	ldr	r3, [pc, #48]	@ (8003568 <HAL_RTC_MspInit+0x88>)
 8003536:	2180      	movs	r1, #128	@ 0x80
 8003538:	00c9      	lsls	r1, r1, #3
 800353a:	430a      	orrs	r2, r1
 800353c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800353e:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <HAL_RTC_MspInit+0x88>)
 8003540:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003542:	2380      	movs	r3, #128	@ 0x80
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4013      	ands	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800354c:	2200      	movs	r2, #0
 800354e:	2100      	movs	r1, #0
 8003550:	2002      	movs	r0, #2
 8003552:	f000 fb39 	bl	8003bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8003556:	2002      	movs	r0, #2
 8003558:	f000 fb4b 	bl	8003bf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800355c:	46c0      	nop			@ (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	b00f      	add	sp, #60	@ 0x3c
 8003562:	bd90      	pop	{r4, r7, pc}
 8003564:	40002800 	.word	0x40002800
 8003568:	40021000 	.word	0x40021000

0800356c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800356c:	b590      	push	{r4, r7, lr}
 800356e:	b08b      	sub	sp, #44	@ 0x2c
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003574:	2414      	movs	r4, #20
 8003576:	193b      	adds	r3, r7, r4
 8003578:	0018      	movs	r0, r3
 800357a:	2314      	movs	r3, #20
 800357c:	001a      	movs	r2, r3
 800357e:	2100      	movs	r1, #0
 8003580:	f005 ffb8 	bl	80094f4 <memset>
  if(hspi->Instance==SPI2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a51      	ldr	r2, [pc, #324]	@ (80036d0 <HAL_SPI_MspInit+0x164>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d000      	beq.n	8003590 <HAL_SPI_MspInit+0x24>
 800358e:	e09a      	b.n	80036c6 <HAL_SPI_MspInit+0x15a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003590:	4b50      	ldr	r3, [pc, #320]	@ (80036d4 <HAL_SPI_MspInit+0x168>)
 8003592:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003594:	4b4f      	ldr	r3, [pc, #316]	@ (80036d4 <HAL_SPI_MspInit+0x168>)
 8003596:	2180      	movs	r1, #128	@ 0x80
 8003598:	01c9      	lsls	r1, r1, #7
 800359a:	430a      	orrs	r2, r1
 800359c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800359e:	4b4d      	ldr	r3, [pc, #308]	@ (80036d4 <HAL_SPI_MspInit+0x168>)
 80035a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035a2:	2380      	movs	r3, #128	@ 0x80
 80035a4:	01db      	lsls	r3, r3, #7
 80035a6:	4013      	ands	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ac:	4b49      	ldr	r3, [pc, #292]	@ (80036d4 <HAL_SPI_MspInit+0x168>)
 80035ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035b0:	4b48      	ldr	r3, [pc, #288]	@ (80036d4 <HAL_SPI_MspInit+0x168>)
 80035b2:	2101      	movs	r1, #1
 80035b4:	430a      	orrs	r2, r1
 80035b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80035b8:	4b46      	ldr	r3, [pc, #280]	@ (80036d4 <HAL_SPI_MspInit+0x168>)
 80035ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035bc:	2201      	movs	r2, #1
 80035be:	4013      	ands	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80035c4:	193b      	adds	r3, r7, r4
 80035c6:	2209      	movs	r2, #9
 80035c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ca:	193b      	adds	r3, r7, r4
 80035cc:	2202      	movs	r2, #2
 80035ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	193b      	adds	r3, r7, r4
 80035d2:	2200      	movs	r2, #0
 80035d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	193b      	adds	r3, r7, r4
 80035d8:	2200      	movs	r2, #0
 80035da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80035dc:	193b      	adds	r3, r7, r4
 80035de:	2200      	movs	r2, #0
 80035e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e2:	193a      	adds	r2, r7, r4
 80035e4:	23a0      	movs	r3, #160	@ 0xa0
 80035e6:	05db      	lsls	r3, r3, #23
 80035e8:	0011      	movs	r1, r2
 80035ea:	0018      	movs	r0, r3
 80035ec:	f000 fdd2 	bl	8004194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80035f0:	0021      	movs	r1, r4
 80035f2:	187b      	adds	r3, r7, r1
 80035f4:	2210      	movs	r2, #16
 80035f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f8:	187b      	adds	r3, r7, r1
 80035fa:	2202      	movs	r2, #2
 80035fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fe:	187b      	adds	r3, r7, r1
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003604:	187b      	adds	r3, r7, r1
 8003606:	2200      	movs	r2, #0
 8003608:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 800360a:	187b      	adds	r3, r7, r1
 800360c:	2201      	movs	r2, #1
 800360e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003610:	187a      	adds	r2, r7, r1
 8003612:	23a0      	movs	r3, #160	@ 0xa0
 8003614:	05db      	lsls	r3, r3, #23
 8003616:	0011      	movs	r1, r2
 8003618:	0018      	movs	r0, r3
 800361a:	f000 fdbb 	bl	8004194 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel3;
 800361e:	4b2e      	ldr	r3, [pc, #184]	@ (80036d8 <HAL_SPI_MspInit+0x16c>)
 8003620:	4a2e      	ldr	r2, [pc, #184]	@ (80036dc <HAL_SPI_MspInit+0x170>)
 8003622:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8003624:	4b2c      	ldr	r3, [pc, #176]	@ (80036d8 <HAL_SPI_MspInit+0x16c>)
 8003626:	2212      	movs	r2, #18
 8003628:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800362a:	4b2b      	ldr	r3, [pc, #172]	@ (80036d8 <HAL_SPI_MspInit+0x16c>)
 800362c:	2200      	movs	r2, #0
 800362e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003630:	4b29      	ldr	r3, [pc, #164]	@ (80036d8 <HAL_SPI_MspInit+0x16c>)
 8003632:	2200      	movs	r2, #0
 8003634:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003636:	4b28      	ldr	r3, [pc, #160]	@ (80036d8 <HAL_SPI_MspInit+0x16c>)
 8003638:	2280      	movs	r2, #128	@ 0x80
 800363a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800363c:	4b26      	ldr	r3, [pc, #152]	@ (80036d8 <HAL_SPI_MspInit+0x16c>)
 800363e:	2200      	movs	r2, #0
 8003640:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003642:	4b25      	ldr	r3, [pc, #148]	@ (80036d8 <HAL_SPI_MspInit+0x16c>)
 8003644:	2200      	movs	r2, #0
 8003646:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003648:	4b23      	ldr	r3, [pc, #140]	@ (80036d8 <HAL_SPI_MspInit+0x16c>)
 800364a:	2200      	movs	r2, #0
 800364c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800364e:	4b22      	ldr	r3, [pc, #136]	@ (80036d8 <HAL_SPI_MspInit+0x16c>)
 8003650:	2280      	movs	r2, #128	@ 0x80
 8003652:	0192      	lsls	r2, r2, #6
 8003654:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003656:	4b20      	ldr	r3, [pc, #128]	@ (80036d8 <HAL_SPI_MspInit+0x16c>)
 8003658:	0018      	movs	r0, r3
 800365a:	f000 fae7 	bl	8003c2c <HAL_DMA_Init>
 800365e:	1e03      	subs	r3, r0, #0
 8003660:	d001      	beq.n	8003666 <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 8003662:	f7ff fbd2 	bl	8002e0a <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a1b      	ldr	r2, [pc, #108]	@ (80036d8 <HAL_SPI_MspInit+0x16c>)
 800366a:	659a      	str	r2, [r3, #88]	@ 0x58
 800366c:	4b1a      	ldr	r3, [pc, #104]	@ (80036d8 <HAL_SPI_MspInit+0x16c>)
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel2;
 8003672:	4b1b      	ldr	r3, [pc, #108]	@ (80036e0 <HAL_SPI_MspInit+0x174>)
 8003674:	4a1b      	ldr	r2, [pc, #108]	@ (80036e4 <HAL_SPI_MspInit+0x178>)
 8003676:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8003678:	4b19      	ldr	r3, [pc, #100]	@ (80036e0 <HAL_SPI_MspInit+0x174>)
 800367a:	2213      	movs	r2, #19
 800367c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800367e:	4b18      	ldr	r3, [pc, #96]	@ (80036e0 <HAL_SPI_MspInit+0x174>)
 8003680:	2210      	movs	r2, #16
 8003682:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003684:	4b16      	ldr	r3, [pc, #88]	@ (80036e0 <HAL_SPI_MspInit+0x174>)
 8003686:	2200      	movs	r2, #0
 8003688:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800368a:	4b15      	ldr	r3, [pc, #84]	@ (80036e0 <HAL_SPI_MspInit+0x174>)
 800368c:	2280      	movs	r2, #128	@ 0x80
 800368e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003690:	4b13      	ldr	r3, [pc, #76]	@ (80036e0 <HAL_SPI_MspInit+0x174>)
 8003692:	2200      	movs	r2, #0
 8003694:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003696:	4b12      	ldr	r3, [pc, #72]	@ (80036e0 <HAL_SPI_MspInit+0x174>)
 8003698:	2200      	movs	r2, #0
 800369a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800369c:	4b10      	ldr	r3, [pc, #64]	@ (80036e0 <HAL_SPI_MspInit+0x174>)
 800369e:	2200      	movs	r2, #0
 80036a0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80036a2:	4b0f      	ldr	r3, [pc, #60]	@ (80036e0 <HAL_SPI_MspInit+0x174>)
 80036a4:	2280      	movs	r2, #128	@ 0x80
 80036a6:	0192      	lsls	r2, r2, #6
 80036a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80036aa:	4b0d      	ldr	r3, [pc, #52]	@ (80036e0 <HAL_SPI_MspInit+0x174>)
 80036ac:	0018      	movs	r0, r3
 80036ae:	f000 fabd 	bl	8003c2c <HAL_DMA_Init>
 80036b2:	1e03      	subs	r3, r0, #0
 80036b4:	d001      	beq.n	80036ba <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 80036b6:	f7ff fba8 	bl	8002e0a <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a08      	ldr	r2, [pc, #32]	@ (80036e0 <HAL_SPI_MspInit+0x174>)
 80036be:	655a      	str	r2, [r3, #84]	@ 0x54
 80036c0:	4b07      	ldr	r3, [pc, #28]	@ (80036e0 <HAL_SPI_MspInit+0x174>)
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b00b      	add	sp, #44	@ 0x2c
 80036cc:	bd90      	pop	{r4, r7, pc}
 80036ce:	46c0      	nop			@ (mov r8, r8)
 80036d0:	40003800 	.word	0x40003800
 80036d4:	40021000 	.word	0x40021000
 80036d8:	20000268 	.word	0x20000268
 80036dc:	40020030 	.word	0x40020030
 80036e0:	200002c4 	.word	0x200002c4
 80036e4:	4002001c 	.word	0x4002001c

080036e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	2380      	movs	r3, #128	@ 0x80
 80036f6:	05db      	lsls	r3, r3, #23
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d10b      	bne.n	8003714 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036fc:	4b07      	ldr	r3, [pc, #28]	@ (800371c <HAL_TIM_PWM_MspInit+0x34>)
 80036fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003700:	4b06      	ldr	r3, [pc, #24]	@ (800371c <HAL_TIM_PWM_MspInit+0x34>)
 8003702:	2101      	movs	r1, #1
 8003704:	430a      	orrs	r2, r1
 8003706:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003708:	4b04      	ldr	r3, [pc, #16]	@ (800371c <HAL_TIM_PWM_MspInit+0x34>)
 800370a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800370c:	2201      	movs	r2, #1
 800370e:	4013      	ands	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003714:	46c0      	nop			@ (mov r8, r8)
 8003716:	46bd      	mov	sp, r7
 8003718:	b004      	add	sp, #16
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000

08003720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a18      	ldr	r2, [pc, #96]	@ (8003790 <HAL_TIM_Base_MspInit+0x70>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d10e      	bne.n	8003750 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003732:	4b18      	ldr	r3, [pc, #96]	@ (8003794 <HAL_TIM_Base_MspInit+0x74>)
 8003734:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003736:	4b17      	ldr	r3, [pc, #92]	@ (8003794 <HAL_TIM_Base_MspInit+0x74>)
 8003738:	2180      	movs	r1, #128	@ 0x80
 800373a:	0209      	lsls	r1, r1, #8
 800373c:	430a      	orrs	r2, r1
 800373e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003740:	4b14      	ldr	r3, [pc, #80]	@ (8003794 <HAL_TIM_Base_MspInit+0x74>)
 8003742:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003744:	2380      	movs	r3, #128	@ 0x80
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	4013      	ands	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800374e:	e01a      	b.n	8003786 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a10      	ldr	r2, [pc, #64]	@ (8003798 <HAL_TIM_Base_MspInit+0x78>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d115      	bne.n	8003786 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800375a:	4b0e      	ldr	r3, [pc, #56]	@ (8003794 <HAL_TIM_Base_MspInit+0x74>)
 800375c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800375e:	4b0d      	ldr	r3, [pc, #52]	@ (8003794 <HAL_TIM_Base_MspInit+0x74>)
 8003760:	2180      	movs	r1, #128	@ 0x80
 8003762:	0289      	lsls	r1, r1, #10
 8003764:	430a      	orrs	r2, r1
 8003766:	641a      	str	r2, [r3, #64]	@ 0x40
 8003768:	4b0a      	ldr	r3, [pc, #40]	@ (8003794 <HAL_TIM_Base_MspInit+0x74>)
 800376a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800376c:	2380      	movs	r3, #128	@ 0x80
 800376e:	029b      	lsls	r3, r3, #10
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8003776:	2200      	movs	r2, #0
 8003778:	2101      	movs	r1, #1
 800377a:	2015      	movs	r0, #21
 800377c:	f000 fa24 	bl	8003bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003780:	2015      	movs	r0, #21
 8003782:	f000 fa36 	bl	8003bf2 <HAL_NVIC_EnableIRQ>
}
 8003786:	46c0      	nop			@ (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	b004      	add	sp, #16
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			@ (mov r8, r8)
 8003790:	40002000 	.word	0x40002000
 8003794:	40021000 	.word	0x40021000
 8003798:	40014400 	.word	0x40014400

0800379c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b089      	sub	sp, #36	@ 0x24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a4:	240c      	movs	r4, #12
 80037a6:	193b      	adds	r3, r7, r4
 80037a8:	0018      	movs	r0, r3
 80037aa:	2314      	movs	r3, #20
 80037ac:	001a      	movs	r2, r3
 80037ae:	2100      	movs	r1, #0
 80037b0:	f005 fea0 	bl	80094f4 <memset>
  if(htim->Instance==TIM2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	2380      	movs	r3, #128	@ 0x80
 80037ba:	05db      	lsls	r3, r3, #23
 80037bc:	429a      	cmp	r2, r3
 80037be:	d121      	bne.n	8003804 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037c0:	4b12      	ldr	r3, [pc, #72]	@ (800380c <HAL_TIM_MspPostInit+0x70>)
 80037c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037c4:	4b11      	ldr	r3, [pc, #68]	@ (800380c <HAL_TIM_MspPostInit+0x70>)
 80037c6:	2104      	movs	r1, #4
 80037c8:	430a      	orrs	r2, r1
 80037ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80037cc:	4b0f      	ldr	r3, [pc, #60]	@ (800380c <HAL_TIM_MspPostInit+0x70>)
 80037ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d0:	2204      	movs	r2, #4
 80037d2:	4013      	ands	r3, r2
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_SHIFT_nOE_Pin;
 80037d8:	0021      	movs	r1, r4
 80037da:	187b      	adds	r3, r7, r1
 80037dc:	2240      	movs	r2, #64	@ 0x40
 80037de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e0:	187b      	adds	r3, r7, r1
 80037e2:	2202      	movs	r2, #2
 80037e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e6:	187b      	adds	r3, r7, r1
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ec:	187b      	adds	r3, r7, r1
 80037ee:	2200      	movs	r2, #0
 80037f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80037f2:	187b      	adds	r3, r7, r1
 80037f4:	2202      	movs	r2, #2
 80037f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_SHIFT_nOE_GPIO_Port, &GPIO_InitStruct);
 80037f8:	187b      	adds	r3, r7, r1
 80037fa:	4a05      	ldr	r2, [pc, #20]	@ (8003810 <HAL_TIM_MspPostInit+0x74>)
 80037fc:	0019      	movs	r1, r3
 80037fe:	0010      	movs	r0, r2
 8003800:	f000 fcc8 	bl	8004194 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003804:	46c0      	nop			@ (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b009      	add	sp, #36	@ 0x24
 800380a:	bd90      	pop	{r4, r7, pc}
 800380c:	40021000 	.word	0x40021000
 8003810:	50000800 	.word	0x50000800

08003814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003818:	46c0      	nop			@ (mov r8, r8)
 800381a:	e7fd      	b.n	8003818 <NMI_Handler+0x4>

0800381c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003820:	46c0      	nop			@ (mov r8, r8)
 8003822:	e7fd      	b.n	8003820 <HardFault_Handler+0x4>

08003824 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003828:	46c0      	nop			@ (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800383c:	f000 f8fc 	bl	8003a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003840:	46c0      	nop			@ (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800384c:	4b03      	ldr	r3, [pc, #12]	@ (800385c <RTC_TAMP_IRQHandler+0x14>)
 800384e:	0018      	movs	r0, r3
 8003850:	f003 fcf0 	bl	8007234 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003854:	46c0      	nop			@ (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	200001d8 	.word	0x200001d8

08003860 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003864:	46c0      	nop			@ (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_EXTI_Pin);
 800386e:	2001      	movs	r0, #1
 8003870:	f000 fe4a 	bl	8004508 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_EXTI_Pin);
 8003874:	2002      	movs	r0, #2
 8003876:	f000 fe47 	bl	8004508 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_EXTI_Pin);
 8003884:	2004      	movs	r0, #4
 8003886:	f000 fe3f 	bl	8004508 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_EXTI_Pin);
 800388a:	2008      	movs	r0, #8
 800388c:	f000 fe3c 	bl	8004508 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003890:	46c0      	nop			@ (mov r8, r8)
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_SWITCH_EXTI_Pin);
 800389a:	2010      	movs	r0, #16
 800389c:	f000 fe34 	bl	8004508 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_EXTI_Pin);
 80038a0:	2380      	movs	r3, #128	@ 0x80
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	0018      	movs	r0, r3
 80038a6:	f000 fe2f 	bl	8004508 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80038aa:	46c0      	nop			@ (mov r8, r8)
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80038b4:	4b03      	ldr	r3, [pc, #12]	@ (80038c4 <DMA1_Channel1_IRQHandler+0x14>)
 80038b6:	0018      	movs	r0, r3
 80038b8:	f000 fb2a 	bl	8003f10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80038bc:	46c0      	nop			@ (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	2000017c 	.word	0x2000017c

080038c8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80038cc:	4b05      	ldr	r3, [pc, #20]	@ (80038e4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80038ce:	0018      	movs	r0, r3
 80038d0:	f000 fb1e 	bl	8003f10 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80038d4:	4b04      	ldr	r3, [pc, #16]	@ (80038e8 <DMA1_Channel2_3_IRQHandler+0x20>)
 80038d6:	0018      	movs	r0, r3
 80038d8:	f000 fb1a 	bl	8003f10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80038dc:	46c0      	nop			@ (mov r8, r8)
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	200002c4 	.word	0x200002c4
 80038e8:	20000268 	.word	0x20000268

080038ec <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80038f0:	4b03      	ldr	r3, [pc, #12]	@ (8003900 <TIM16_IRQHandler+0x14>)
 80038f2:	0018      	movs	r0, r3
 80038f4:	f005 f812 	bl	800891c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80038f8:	46c0      	nop			@ (mov r8, r8)
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	46c0      	nop			@ (mov r8, r8)
 8003900:	200003b8 	.word	0x200003b8

08003904 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003908:	46c0      	nop			@ (mov r8, r8)
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003910:	480d      	ldr	r0, [pc, #52]	@ (8003948 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003912:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003914:	f7ff fff6 	bl	8003904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003918:	480c      	ldr	r0, [pc, #48]	@ (800394c <LoopForever+0x6>)
  ldr r1, =_edata
 800391a:	490d      	ldr	r1, [pc, #52]	@ (8003950 <LoopForever+0xa>)
  ldr r2, =_sidata
 800391c:	4a0d      	ldr	r2, [pc, #52]	@ (8003954 <LoopForever+0xe>)
  movs r3, #0
 800391e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003920:	e002      	b.n	8003928 <LoopCopyDataInit>

08003922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003926:	3304      	adds	r3, #4

08003928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800392a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800392c:	d3f9      	bcc.n	8003922 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800392e:	4a0a      	ldr	r2, [pc, #40]	@ (8003958 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003930:	4c0a      	ldr	r4, [pc, #40]	@ (800395c <LoopForever+0x16>)
  movs r3, #0
 8003932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003934:	e001      	b.n	800393a <LoopFillZerobss>

08003936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003938:	3204      	adds	r2, #4

0800393a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800393a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800393c:	d3fb      	bcc.n	8003936 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800393e:	f005 fde1 	bl	8009504 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003942:	f7fd fecb 	bl	80016dc <main>

08003946 <LoopForever>:

LoopForever:
  b LoopForever
 8003946:	e7fe      	b.n	8003946 <LoopForever>
  ldr   r0, =_estack
 8003948:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800394c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003950:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003954:	08009674 	.word	0x08009674
  ldr r2, =_sbss
 8003958:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800395c:	200005f8 	.word	0x200005f8

08003960 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003960:	e7fe      	b.n	8003960 <ADC1_IRQHandler>
	...

08003964 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800396a:	1dfb      	adds	r3, r7, #7
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003970:	4b0b      	ldr	r3, [pc, #44]	@ (80039a0 <HAL_Init+0x3c>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b0a      	ldr	r3, [pc, #40]	@ (80039a0 <HAL_Init+0x3c>)
 8003976:	2180      	movs	r1, #128	@ 0x80
 8003978:	0049      	lsls	r1, r1, #1
 800397a:	430a      	orrs	r2, r1
 800397c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800397e:	2003      	movs	r0, #3
 8003980:	f000 f810 	bl	80039a4 <HAL_InitTick>
 8003984:	1e03      	subs	r3, r0, #0
 8003986:	d003      	beq.n	8003990 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003988:	1dfb      	adds	r3, r7, #7
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	e001      	b.n	8003994 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003990:	f7ff fc62 	bl	8003258 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003994:	1dfb      	adds	r3, r7, #7
 8003996:	781b      	ldrb	r3, [r3, #0]
}
 8003998:	0018      	movs	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	b002      	add	sp, #8
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40022000 	.word	0x40022000

080039a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039ac:	230f      	movs	r3, #15
 80039ae:	18fb      	adds	r3, r7, r3
 80039b0:	2200      	movs	r2, #0
 80039b2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80039b4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a2c <HAL_InitTick+0x88>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d02b      	beq.n	8003a14 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80039bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003a30 <HAL_InitTick+0x8c>)
 80039be:	681c      	ldr	r4, [r3, #0]
 80039c0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a2c <HAL_InitTick+0x88>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	0019      	movs	r1, r3
 80039c6:	23fa      	movs	r3, #250	@ 0xfa
 80039c8:	0098      	lsls	r0, r3, #2
 80039ca:	f7fc fb9b 	bl	8000104 <__udivsi3>
 80039ce:	0003      	movs	r3, r0
 80039d0:	0019      	movs	r1, r3
 80039d2:	0020      	movs	r0, r4
 80039d4:	f7fc fb96 	bl	8000104 <__udivsi3>
 80039d8:	0003      	movs	r3, r0
 80039da:	0018      	movs	r0, r3
 80039dc:	f000 f919 	bl	8003c12 <HAL_SYSTICK_Config>
 80039e0:	1e03      	subs	r3, r0, #0
 80039e2:	d112      	bne.n	8003a0a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d80a      	bhi.n	8003a00 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	2301      	movs	r3, #1
 80039ee:	425b      	negs	r3, r3
 80039f0:	2200      	movs	r2, #0
 80039f2:	0018      	movs	r0, r3
 80039f4:	f000 f8e8 	bl	8003bc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a34 <HAL_InitTick+0x90>)
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	e00d      	b.n	8003a1c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003a00:	230f      	movs	r3, #15
 8003a02:	18fb      	adds	r3, r7, r3
 8003a04:	2201      	movs	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]
 8003a08:	e008      	b.n	8003a1c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a0a:	230f      	movs	r3, #15
 8003a0c:	18fb      	adds	r3, r7, r3
 8003a0e:	2201      	movs	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	e003      	b.n	8003a1c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a14:	230f      	movs	r3, #15
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	2201      	movs	r2, #1
 8003a1a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003a1c:	230f      	movs	r3, #15
 8003a1e:	18fb      	adds	r3, r7, r3
 8003a20:	781b      	ldrb	r3, [r3, #0]
}
 8003a22:	0018      	movs	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	b005      	add	sp, #20
 8003a28:	bd90      	pop	{r4, r7, pc}
 8003a2a:	46c0      	nop			@ (mov r8, r8)
 8003a2c:	20000094 	.word	0x20000094
 8003a30:	2000008c 	.word	0x2000008c
 8003a34:	20000090 	.word	0x20000090

08003a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a3c:	4b05      	ldr	r3, [pc, #20]	@ (8003a54 <HAL_IncTick+0x1c>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	001a      	movs	r2, r3
 8003a42:	4b05      	ldr	r3, [pc, #20]	@ (8003a58 <HAL_IncTick+0x20>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	18d2      	adds	r2, r2, r3
 8003a48:	4b03      	ldr	r3, [pc, #12]	@ (8003a58 <HAL_IncTick+0x20>)
 8003a4a:	601a      	str	r2, [r3, #0]
}
 8003a4c:	46c0      	nop			@ (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	20000094 	.word	0x20000094
 8003a58:	200005f4 	.word	0x200005f4

08003a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a60:	4b02      	ldr	r3, [pc, #8]	@ (8003a6c <HAL_GetTick+0x10>)
 8003a62:	681b      	ldr	r3, [r3, #0]
}
 8003a64:	0018      	movs	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	46c0      	nop			@ (mov r8, r8)
 8003a6c:	200005f4 	.word	0x200005f4

08003a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	0002      	movs	r2, r0
 8003a78:	1dfb      	adds	r3, r7, #7
 8003a7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a7c:	1dfb      	adds	r3, r7, #7
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a82:	d809      	bhi.n	8003a98 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a84:	1dfb      	adds	r3, r7, #7
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	001a      	movs	r2, r3
 8003a8a:	231f      	movs	r3, #31
 8003a8c:	401a      	ands	r2, r3
 8003a8e:	4b04      	ldr	r3, [pc, #16]	@ (8003aa0 <__NVIC_EnableIRQ+0x30>)
 8003a90:	2101      	movs	r1, #1
 8003a92:	4091      	lsls	r1, r2
 8003a94:	000a      	movs	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003a98:	46c0      	nop			@ (mov r8, r8)
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b002      	add	sp, #8
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	e000e100 	.word	0xe000e100

08003aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003aa4:	b590      	push	{r4, r7, lr}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	0002      	movs	r2, r0
 8003aac:	6039      	str	r1, [r7, #0]
 8003aae:	1dfb      	adds	r3, r7, #7
 8003ab0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ab2:	1dfb      	adds	r3, r7, #7
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ab8:	d828      	bhi.n	8003b0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003aba:	4a2f      	ldr	r2, [pc, #188]	@ (8003b78 <__NVIC_SetPriority+0xd4>)
 8003abc:	1dfb      	adds	r3, r7, #7
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	b25b      	sxtb	r3, r3
 8003ac2:	089b      	lsrs	r3, r3, #2
 8003ac4:	33c0      	adds	r3, #192	@ 0xc0
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	589b      	ldr	r3, [r3, r2]
 8003aca:	1dfa      	adds	r2, r7, #7
 8003acc:	7812      	ldrb	r2, [r2, #0]
 8003ace:	0011      	movs	r1, r2
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	400a      	ands	r2, r1
 8003ad4:	00d2      	lsls	r2, r2, #3
 8003ad6:	21ff      	movs	r1, #255	@ 0xff
 8003ad8:	4091      	lsls	r1, r2
 8003ada:	000a      	movs	r2, r1
 8003adc:	43d2      	mvns	r2, r2
 8003ade:	401a      	ands	r2, r3
 8003ae0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	019b      	lsls	r3, r3, #6
 8003ae6:	22ff      	movs	r2, #255	@ 0xff
 8003ae8:	401a      	ands	r2, r3
 8003aea:	1dfb      	adds	r3, r7, #7
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	0018      	movs	r0, r3
 8003af0:	2303      	movs	r3, #3
 8003af2:	4003      	ands	r3, r0
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003af8:	481f      	ldr	r0, [pc, #124]	@ (8003b78 <__NVIC_SetPriority+0xd4>)
 8003afa:	1dfb      	adds	r3, r7, #7
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	b25b      	sxtb	r3, r3
 8003b00:	089b      	lsrs	r3, r3, #2
 8003b02:	430a      	orrs	r2, r1
 8003b04:	33c0      	adds	r3, #192	@ 0xc0
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003b0a:	e031      	b.n	8003b70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b0c:	4a1b      	ldr	r2, [pc, #108]	@ (8003b7c <__NVIC_SetPriority+0xd8>)
 8003b0e:	1dfb      	adds	r3, r7, #7
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	0019      	movs	r1, r3
 8003b14:	230f      	movs	r3, #15
 8003b16:	400b      	ands	r3, r1
 8003b18:	3b08      	subs	r3, #8
 8003b1a:	089b      	lsrs	r3, r3, #2
 8003b1c:	3306      	adds	r3, #6
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	18d3      	adds	r3, r2, r3
 8003b22:	3304      	adds	r3, #4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	1dfa      	adds	r2, r7, #7
 8003b28:	7812      	ldrb	r2, [r2, #0]
 8003b2a:	0011      	movs	r1, r2
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	400a      	ands	r2, r1
 8003b30:	00d2      	lsls	r2, r2, #3
 8003b32:	21ff      	movs	r1, #255	@ 0xff
 8003b34:	4091      	lsls	r1, r2
 8003b36:	000a      	movs	r2, r1
 8003b38:	43d2      	mvns	r2, r2
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	019b      	lsls	r3, r3, #6
 8003b42:	22ff      	movs	r2, #255	@ 0xff
 8003b44:	401a      	ands	r2, r3
 8003b46:	1dfb      	adds	r3, r7, #7
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	4003      	ands	r3, r0
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b54:	4809      	ldr	r0, [pc, #36]	@ (8003b7c <__NVIC_SetPriority+0xd8>)
 8003b56:	1dfb      	adds	r3, r7, #7
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	001c      	movs	r4, r3
 8003b5c:	230f      	movs	r3, #15
 8003b5e:	4023      	ands	r3, r4
 8003b60:	3b08      	subs	r3, #8
 8003b62:	089b      	lsrs	r3, r3, #2
 8003b64:	430a      	orrs	r2, r1
 8003b66:	3306      	adds	r3, #6
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	18c3      	adds	r3, r0, r3
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	601a      	str	r2, [r3, #0]
}
 8003b70:	46c0      	nop			@ (mov r8, r8)
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b003      	add	sp, #12
 8003b76:	bd90      	pop	{r4, r7, pc}
 8003b78:	e000e100 	.word	0xe000e100
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	1e5a      	subs	r2, r3, #1
 8003b8c:	2380      	movs	r3, #128	@ 0x80
 8003b8e:	045b      	lsls	r3, r3, #17
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d301      	bcc.n	8003b98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b94:	2301      	movs	r3, #1
 8003b96:	e010      	b.n	8003bba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b98:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <SysTick_Config+0x44>)
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	3a01      	subs	r2, #1
 8003b9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	425b      	negs	r3, r3
 8003ba4:	2103      	movs	r1, #3
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f7ff ff7c 	bl	8003aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bac:	4b05      	ldr	r3, [pc, #20]	@ (8003bc4 <SysTick_Config+0x44>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bb2:	4b04      	ldr	r3, [pc, #16]	@ (8003bc4 <SysTick_Config+0x44>)
 8003bb4:	2207      	movs	r2, #7
 8003bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b002      	add	sp, #8
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			@ (mov r8, r8)
 8003bc4:	e000e010 	.word	0xe000e010

08003bc8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	607a      	str	r2, [r7, #4]
 8003bd2:	210f      	movs	r1, #15
 8003bd4:	187b      	adds	r3, r7, r1
 8003bd6:	1c02      	adds	r2, r0, #0
 8003bd8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	187b      	adds	r3, r7, r1
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	b25b      	sxtb	r3, r3
 8003be2:	0011      	movs	r1, r2
 8003be4:	0018      	movs	r0, r3
 8003be6:	f7ff ff5d 	bl	8003aa4 <__NVIC_SetPriority>
}
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b004      	add	sp, #16
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	0002      	movs	r2, r0
 8003bfa:	1dfb      	adds	r3, r7, #7
 8003bfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bfe:	1dfb      	adds	r3, r7, #7
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	b25b      	sxtb	r3, r3
 8003c04:	0018      	movs	r0, r3
 8003c06:	f7ff ff33 	bl	8003a70 <__NVIC_EnableIRQ>
}
 8003c0a:	46c0      	nop			@ (mov r8, r8)
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b002      	add	sp, #8
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f7ff ffaf 	bl	8003b80 <SysTick_Config>
 8003c22:	0003      	movs	r3, r0
}
 8003c24:	0018      	movs	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b002      	add	sp, #8
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e077      	b.n	8003d2e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a3d      	ldr	r2, [pc, #244]	@ (8003d38 <HAL_DMA_Init+0x10c>)
 8003c44:	4694      	mov	ip, r2
 8003c46:	4463      	add	r3, ip
 8003c48:	2114      	movs	r1, #20
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f7fc fa5a 	bl	8000104 <__udivsi3>
 8003c50:	0003      	movs	r3, r0
 8003c52:	009a      	lsls	r2, r3, #2
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2225      	movs	r2, #37	@ 0x25
 8003c5c:	2102      	movs	r1, #2
 8003c5e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4934      	ldr	r1, [pc, #208]	@ (8003d3c <HAL_DMA_Init+0x110>)
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6819      	ldr	r1, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f000 fa23 	bl	80040f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	2380      	movs	r3, #128	@ 0x80
 8003cb4:	01db      	lsls	r3, r3, #7
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d102      	bne.n	8003cc0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc8:	213f      	movs	r1, #63	@ 0x3f
 8003cca:	400a      	ands	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003cd6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d011      	beq.n	8003d04 <HAL_DMA_Init+0xd8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d80d      	bhi.n	8003d04 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	0018      	movs	r0, r3
 8003cec:	f000 fa2e 	bl	800414c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	e008      	b.n	8003d16 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2225      	movs	r2, #37	@ 0x25
 8003d20:	2101      	movs	r1, #1
 8003d22:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2224      	movs	r2, #36	@ 0x24
 8003d28:	2100      	movs	r1, #0
 8003d2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	0018      	movs	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b002      	add	sp, #8
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	bffdfff8 	.word	0xbffdfff8
 8003d3c:	ffff800f 	.word	0xffff800f

08003d40 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4e:	2317      	movs	r3, #23
 8003d50:	18fb      	adds	r3, r7, r3
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2224      	movs	r2, #36	@ 0x24
 8003d5a:	5c9b      	ldrb	r3, [r3, r2]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_DMA_Start_IT+0x24>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e06f      	b.n	8003e44 <HAL_DMA_Start_IT+0x104>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2224      	movs	r2, #36	@ 0x24
 8003d68:	2101      	movs	r1, #1
 8003d6a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2225      	movs	r2, #37	@ 0x25
 8003d70:	5c9b      	ldrb	r3, [r3, r2]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d157      	bne.n	8003e28 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2225      	movs	r2, #37	@ 0x25
 8003d7c:	2102      	movs	r1, #2
 8003d7e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2101      	movs	r1, #1
 8003d92:	438a      	bics	r2, r1
 8003d94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f969 	bl	8004074 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	210e      	movs	r1, #14
 8003db6:	430a      	orrs	r2, r1
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	e00f      	b.n	8003ddc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2104      	movs	r1, #4
 8003dc8:	438a      	bics	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	210a      	movs	r1, #10
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	2380      	movs	r3, #128	@ 0x80
 8003de4:	025b      	lsls	r3, r3, #9
 8003de6:	4013      	ands	r3, r2
 8003de8:	d008      	beq.n	8003dfc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df4:	2180      	movs	r1, #128	@ 0x80
 8003df6:	0049      	lsls	r1, r1, #1
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e0e:	2180      	movs	r1, #128	@ 0x80
 8003e10:	0049      	lsls	r1, r1, #1
 8003e12:	430a      	orrs	r2, r1
 8003e14:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2101      	movs	r1, #1
 8003e22:	430a      	orrs	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	e00a      	b.n	8003e3e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2280      	movs	r2, #128	@ 0x80
 8003e2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2224      	movs	r2, #36	@ 0x24
 8003e32:	2100      	movs	r1, #0
 8003e34:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003e36:	2317      	movs	r3, #23
 8003e38:	18fb      	adds	r3, r7, r3
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003e3e:	2317      	movs	r3, #23
 8003e40:	18fb      	adds	r3, r7, r3
 8003e42:	781b      	ldrb	r3, [r3, #0]
}
 8003e44:	0018      	movs	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b006      	add	sp, #24
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e050      	b.n	8003f00 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2225      	movs	r2, #37	@ 0x25
 8003e62:	5c9b      	ldrb	r3, [r3, r2]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d008      	beq.n	8003e7c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2224      	movs	r2, #36	@ 0x24
 8003e74:	2100      	movs	r1, #0
 8003e76:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e041      	b.n	8003f00 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	210e      	movs	r1, #14
 8003e88:	438a      	bics	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e96:	491c      	ldr	r1, [pc, #112]	@ (8003f08 <HAL_DMA_Abort+0xbc>)
 8003e98:	400a      	ands	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	438a      	bics	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003eac:	4b17      	ldr	r3, [pc, #92]	@ (8003f0c <HAL_DMA_Abort+0xc0>)
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb4:	221c      	movs	r2, #28
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2201      	movs	r2, #1
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	4b13      	ldr	r3, [pc, #76]	@ (8003f0c <HAL_DMA_Abort+0xc0>)
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003eca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00c      	beq.n	8003eee <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ede:	490a      	ldr	r1, [pc, #40]	@ (8003f08 <HAL_DMA_Abort+0xbc>)
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003eec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2225      	movs	r2, #37	@ 0x25
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2224      	movs	r2, #36	@ 0x24
 8003efa:	2100      	movs	r1, #0
 8003efc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	0018      	movs	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b002      	add	sp, #8
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	fffffeff 	.word	0xfffffeff
 8003f0c:	40020000 	.word	0x40020000

08003f10 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003f18:	4b55      	ldr	r3, [pc, #340]	@ (8004070 <HAL_DMA_IRQHandler+0x160>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	221c      	movs	r2, #28
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2204      	movs	r2, #4
 8003f30:	409a      	lsls	r2, r3
 8003f32:	0013      	movs	r3, r2
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4013      	ands	r3, r2
 8003f38:	d027      	beq.n	8003f8a <HAL_DMA_IRQHandler+0x7a>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d023      	beq.n	8003f8a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d107      	bne.n	8003f5e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2104      	movs	r1, #4
 8003f5a:	438a      	bics	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003f5e:	4b44      	ldr	r3, [pc, #272]	@ (8004070 <HAL_DMA_IRQHandler+0x160>)
 8003f60:	6859      	ldr	r1, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	221c      	movs	r2, #28
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	409a      	lsls	r2, r3
 8003f6e:	4b40      	ldr	r3, [pc, #256]	@ (8004070 <HAL_DMA_IRQHandler+0x160>)
 8003f70:	430a      	orrs	r2, r1
 8003f72:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d100      	bne.n	8003f7e <HAL_DMA_IRQHandler+0x6e>
 8003f7c:	e073      	b.n	8004066 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	0010      	movs	r0, r2
 8003f86:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003f88:	e06d      	b.n	8004066 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8e:	221c      	movs	r2, #28
 8003f90:	4013      	ands	r3, r2
 8003f92:	2202      	movs	r2, #2
 8003f94:	409a      	lsls	r2, r3
 8003f96:	0013      	movs	r3, r2
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d02e      	beq.n	8003ffc <HAL_DMA_IRQHandler+0xec>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d02a      	beq.n	8003ffc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2220      	movs	r2, #32
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d10b      	bne.n	8003fca <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	210a      	movs	r1, #10
 8003fbe:	438a      	bics	r2, r1
 8003fc0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2225      	movs	r2, #37	@ 0x25
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003fca:	4b29      	ldr	r3, [pc, #164]	@ (8004070 <HAL_DMA_IRQHandler+0x160>)
 8003fcc:	6859      	ldr	r1, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	221c      	movs	r2, #28
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	4b25      	ldr	r3, [pc, #148]	@ (8004070 <HAL_DMA_IRQHandler+0x160>)
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2224      	movs	r2, #36	@ 0x24
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d03a      	beq.n	8004066 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	0010      	movs	r0, r2
 8003ff8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003ffa:	e034      	b.n	8004066 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	221c      	movs	r2, #28
 8004002:	4013      	ands	r3, r2
 8004004:	2208      	movs	r2, #8
 8004006:	409a      	lsls	r2, r3
 8004008:	0013      	movs	r3, r2
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4013      	ands	r3, r2
 800400e:	d02b      	beq.n	8004068 <HAL_DMA_IRQHandler+0x158>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2208      	movs	r2, #8
 8004014:	4013      	ands	r3, r2
 8004016:	d027      	beq.n	8004068 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	210e      	movs	r1, #14
 8004024:	438a      	bics	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004028:	4b11      	ldr	r3, [pc, #68]	@ (8004070 <HAL_DMA_IRQHandler+0x160>)
 800402a:	6859      	ldr	r1, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004030:	221c      	movs	r2, #28
 8004032:	4013      	ands	r3, r2
 8004034:	2201      	movs	r2, #1
 8004036:	409a      	lsls	r2, r3
 8004038:	4b0d      	ldr	r3, [pc, #52]	@ (8004070 <HAL_DMA_IRQHandler+0x160>)
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2225      	movs	r2, #37	@ 0x25
 8004048:	2101      	movs	r1, #1
 800404a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2224      	movs	r2, #36	@ 0x24
 8004050:	2100      	movs	r1, #0
 8004052:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	0010      	movs	r0, r2
 8004064:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004066:	46c0      	nop			@ (mov r8, r8)
 8004068:	46c0      	nop			@ (mov r8, r8)
}
 800406a:	46bd      	mov	sp, r7
 800406c:	b004      	add	sp, #16
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40020000 	.word	0x40020000

08004074 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800408a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004090:	2b00      	cmp	r3, #0
 8004092:	d004      	beq.n	800409e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800409c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800409e:	4b14      	ldr	r3, [pc, #80]	@ (80040f0 <DMA_SetConfig+0x7c>)
 80040a0:	6859      	ldr	r1, [r3, #4]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	221c      	movs	r2, #28
 80040a8:	4013      	ands	r3, r2
 80040aa:	2201      	movs	r2, #1
 80040ac:	409a      	lsls	r2, r3
 80040ae:	4b10      	ldr	r3, [pc, #64]	@ (80040f0 <DMA_SetConfig+0x7c>)
 80040b0:	430a      	orrs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2b10      	cmp	r3, #16
 80040c2:	d108      	bne.n	80040d6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040d4:	e007      	b.n	80040e6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	60da      	str	r2, [r3, #12]
}
 80040e6:	46c0      	nop			@ (mov r8, r8)
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b004      	add	sp, #16
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	46c0      	nop			@ (mov r8, r8)
 80040f0:	40020000 	.word	0x40020000

080040f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004100:	089b      	lsrs	r3, r3, #2
 8004102:	4a10      	ldr	r2, [pc, #64]	@ (8004144 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004104:	4694      	mov	ip, r2
 8004106:	4463      	add	r3, ip
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	001a      	movs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	001a      	movs	r2, r3
 8004116:	23ff      	movs	r3, #255	@ 0xff
 8004118:	4013      	ands	r3, r2
 800411a:	3b08      	subs	r3, #8
 800411c:	2114      	movs	r1, #20
 800411e:	0018      	movs	r0, r3
 8004120:	f7fb fff0 	bl	8000104 <__udivsi3>
 8004124:	0003      	movs	r3, r0
 8004126:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a07      	ldr	r2, [pc, #28]	@ (8004148 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800412c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	221f      	movs	r2, #31
 8004132:	4013      	ands	r3, r2
 8004134:	2201      	movs	r2, #1
 8004136:	409a      	lsls	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800413c:	46c0      	nop			@ (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	b004      	add	sp, #16
 8004142:	bd80      	pop	{r7, pc}
 8004144:	10008200 	.word	0x10008200
 8004148:	40020880 	.word	0x40020880

0800414c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	223f      	movs	r2, #63	@ 0x3f
 800415a:	4013      	ands	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4a0a      	ldr	r2, [pc, #40]	@ (800418c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004162:	4694      	mov	ip, r2
 8004164:	4463      	add	r3, ip
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	001a      	movs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a07      	ldr	r2, [pc, #28]	@ (8004190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004172:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	3b01      	subs	r3, #1
 8004178:	2203      	movs	r2, #3
 800417a:	4013      	ands	r3, r2
 800417c:	2201      	movs	r2, #1
 800417e:	409a      	lsls	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8004184:	46c0      	nop			@ (mov r8, r8)
 8004186:	46bd      	mov	sp, r7
 8004188:	b004      	add	sp, #16
 800418a:	bd80      	pop	{r7, pc}
 800418c:	1000823f 	.word	0x1000823f
 8004190:	40020940 	.word	0x40020940

08004194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041a2:	e147      	b.n	8004434 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2101      	movs	r1, #1
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4091      	lsls	r1, r2
 80041ae:	000a      	movs	r2, r1
 80041b0:	4013      	ands	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d100      	bne.n	80041bc <HAL_GPIO_Init+0x28>
 80041ba:	e138      	b.n	800442e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2203      	movs	r2, #3
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d005      	beq.n	80041d4 <HAL_GPIO_Init+0x40>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2203      	movs	r2, #3
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d130      	bne.n	8004236 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	2203      	movs	r2, #3
 80041e0:	409a      	lsls	r2, r3
 80041e2:	0013      	movs	r3, r2
 80041e4:	43da      	mvns	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4013      	ands	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	409a      	lsls	r2, r3
 80041f6:	0013      	movs	r3, r2
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800420a:	2201      	movs	r2, #1
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	409a      	lsls	r2, r3
 8004210:	0013      	movs	r3, r2
 8004212:	43da      	mvns	r2, r3
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4013      	ands	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	091b      	lsrs	r3, r3, #4
 8004220:	2201      	movs	r2, #1
 8004222:	401a      	ands	r2, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	409a      	lsls	r2, r3
 8004228:	0013      	movs	r3, r2
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2203      	movs	r2, #3
 800423c:	4013      	ands	r3, r2
 800423e:	2b03      	cmp	r3, #3
 8004240:	d017      	beq.n	8004272 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	2203      	movs	r2, #3
 800424e:	409a      	lsls	r2, r3
 8004250:	0013      	movs	r3, r2
 8004252:	43da      	mvns	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4013      	ands	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	409a      	lsls	r2, r3
 8004264:	0013      	movs	r3, r2
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2203      	movs	r2, #3
 8004278:	4013      	ands	r3, r2
 800427a:	2b02      	cmp	r3, #2
 800427c:	d123      	bne.n	80042c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	08da      	lsrs	r2, r3, #3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3208      	adds	r2, #8
 8004286:	0092      	lsls	r2, r2, #2
 8004288:	58d3      	ldr	r3, [r2, r3]
 800428a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2207      	movs	r2, #7
 8004290:	4013      	ands	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	220f      	movs	r2, #15
 8004296:	409a      	lsls	r2, r3
 8004298:	0013      	movs	r3, r2
 800429a:	43da      	mvns	r2, r3
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	4013      	ands	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2107      	movs	r1, #7
 80042aa:	400b      	ands	r3, r1
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	409a      	lsls	r2, r3
 80042b0:	0013      	movs	r3, r2
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	08da      	lsrs	r2, r3, #3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3208      	adds	r2, #8
 80042c0:	0092      	lsls	r2, r2, #2
 80042c2:	6939      	ldr	r1, [r7, #16]
 80042c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	2203      	movs	r2, #3
 80042d2:	409a      	lsls	r2, r3
 80042d4:	0013      	movs	r3, r2
 80042d6:	43da      	mvns	r2, r3
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	4013      	ands	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2203      	movs	r2, #3
 80042e4:	401a      	ands	r2, r3
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	409a      	lsls	r2, r3
 80042ec:	0013      	movs	r3, r2
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	23c0      	movs	r3, #192	@ 0xc0
 8004300:	029b      	lsls	r3, r3, #10
 8004302:	4013      	ands	r3, r2
 8004304:	d100      	bne.n	8004308 <HAL_GPIO_Init+0x174>
 8004306:	e092      	b.n	800442e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004308:	4a50      	ldr	r2, [pc, #320]	@ (800444c <HAL_GPIO_Init+0x2b8>)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	089b      	lsrs	r3, r3, #2
 800430e:	3318      	adds	r3, #24
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	589b      	ldr	r3, [r3, r2]
 8004314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2203      	movs	r2, #3
 800431a:	4013      	ands	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	220f      	movs	r2, #15
 8004320:	409a      	lsls	r2, r3
 8004322:	0013      	movs	r3, r2
 8004324:	43da      	mvns	r2, r3
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4013      	ands	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	23a0      	movs	r3, #160	@ 0xa0
 8004330:	05db      	lsls	r3, r3, #23
 8004332:	429a      	cmp	r2, r3
 8004334:	d013      	beq.n	800435e <HAL_GPIO_Init+0x1ca>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a45      	ldr	r2, [pc, #276]	@ (8004450 <HAL_GPIO_Init+0x2bc>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00d      	beq.n	800435a <HAL_GPIO_Init+0x1c6>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a44      	ldr	r2, [pc, #272]	@ (8004454 <HAL_GPIO_Init+0x2c0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d007      	beq.n	8004356 <HAL_GPIO_Init+0x1c2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a43      	ldr	r2, [pc, #268]	@ (8004458 <HAL_GPIO_Init+0x2c4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d101      	bne.n	8004352 <HAL_GPIO_Init+0x1be>
 800434e:	2303      	movs	r3, #3
 8004350:	e006      	b.n	8004360 <HAL_GPIO_Init+0x1cc>
 8004352:	2305      	movs	r3, #5
 8004354:	e004      	b.n	8004360 <HAL_GPIO_Init+0x1cc>
 8004356:	2302      	movs	r3, #2
 8004358:	e002      	b.n	8004360 <HAL_GPIO_Init+0x1cc>
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <HAL_GPIO_Init+0x1cc>
 800435e:	2300      	movs	r3, #0
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	2103      	movs	r1, #3
 8004364:	400a      	ands	r2, r1
 8004366:	00d2      	lsls	r2, r2, #3
 8004368:	4093      	lsls	r3, r2
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004370:	4936      	ldr	r1, [pc, #216]	@ (800444c <HAL_GPIO_Init+0x2b8>)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	089b      	lsrs	r3, r3, #2
 8004376:	3318      	adds	r3, #24
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800437e:	4b33      	ldr	r3, [pc, #204]	@ (800444c <HAL_GPIO_Init+0x2b8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	43da      	mvns	r2, r3
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4013      	ands	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	2380      	movs	r3, #128	@ 0x80
 8004394:	035b      	lsls	r3, r3, #13
 8004396:	4013      	ands	r3, r2
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043a2:	4b2a      	ldr	r3, [pc, #168]	@ (800444c <HAL_GPIO_Init+0x2b8>)
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80043a8:	4b28      	ldr	r3, [pc, #160]	@ (800444c <HAL_GPIO_Init+0x2b8>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	43da      	mvns	r2, r3
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4013      	ands	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	2380      	movs	r3, #128	@ 0x80
 80043be:	039b      	lsls	r3, r3, #14
 80043c0:	4013      	ands	r3, r2
 80043c2:	d003      	beq.n	80043cc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043cc:	4b1f      	ldr	r3, [pc, #124]	@ (800444c <HAL_GPIO_Init+0x2b8>)
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80043d2:	4a1e      	ldr	r2, [pc, #120]	@ (800444c <HAL_GPIO_Init+0x2b8>)
 80043d4:	2384      	movs	r3, #132	@ 0x84
 80043d6:	58d3      	ldr	r3, [r2, r3]
 80043d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	43da      	mvns	r2, r3
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4013      	ands	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	2380      	movs	r3, #128	@ 0x80
 80043ea:	029b      	lsls	r3, r3, #10
 80043ec:	4013      	ands	r3, r2
 80043ee:	d003      	beq.n	80043f8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043f8:	4914      	ldr	r1, [pc, #80]	@ (800444c <HAL_GPIO_Init+0x2b8>)
 80043fa:	2284      	movs	r2, #132	@ 0x84
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004400:	4a12      	ldr	r2, [pc, #72]	@ (800444c <HAL_GPIO_Init+0x2b8>)
 8004402:	2380      	movs	r3, #128	@ 0x80
 8004404:	58d3      	ldr	r3, [r2, r3]
 8004406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	43da      	mvns	r2, r3
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4013      	ands	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	2380      	movs	r3, #128	@ 0x80
 8004418:	025b      	lsls	r3, r3, #9
 800441a:	4013      	ands	r3, r2
 800441c:	d003      	beq.n	8004426 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004426:	4909      	ldr	r1, [pc, #36]	@ (800444c <HAL_GPIO_Init+0x2b8>)
 8004428:	2280      	movs	r2, #128	@ 0x80
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	3301      	adds	r3, #1
 8004432:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	40da      	lsrs	r2, r3
 800443c:	1e13      	subs	r3, r2, #0
 800443e:	d000      	beq.n	8004442 <HAL_GPIO_Init+0x2ae>
 8004440:	e6b0      	b.n	80041a4 <HAL_GPIO_Init+0x10>
  }
}
 8004442:	46c0      	nop			@ (mov r8, r8)
 8004444:	46c0      	nop			@ (mov r8, r8)
 8004446:	46bd      	mov	sp, r7
 8004448:	b006      	add	sp, #24
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40021800 	.word	0x40021800
 8004450:	50000400 	.word	0x50000400
 8004454:	50000800 	.word	0x50000800
 8004458:	50000c00 	.word	0x50000c00

0800445c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	000a      	movs	r2, r1
 8004466:	1cbb      	adds	r3, r7, #2
 8004468:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	1cba      	adds	r2, r7, #2
 8004470:	8812      	ldrh	r2, [r2, #0]
 8004472:	4013      	ands	r3, r2
 8004474:	d004      	beq.n	8004480 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004476:	230f      	movs	r3, #15
 8004478:	18fb      	adds	r3, r7, r3
 800447a:	2201      	movs	r2, #1
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	e003      	b.n	8004488 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004480:	230f      	movs	r3, #15
 8004482:	18fb      	adds	r3, r7, r3
 8004484:	2200      	movs	r2, #0
 8004486:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004488:	230f      	movs	r3, #15
 800448a:	18fb      	adds	r3, r7, r3
 800448c:	781b      	ldrb	r3, [r3, #0]
}
 800448e:	0018      	movs	r0, r3
 8004490:	46bd      	mov	sp, r7
 8004492:	b004      	add	sp, #16
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	0008      	movs	r0, r1
 80044a0:	0011      	movs	r1, r2
 80044a2:	1cbb      	adds	r3, r7, #2
 80044a4:	1c02      	adds	r2, r0, #0
 80044a6:	801a      	strh	r2, [r3, #0]
 80044a8:	1c7b      	adds	r3, r7, #1
 80044aa:	1c0a      	adds	r2, r1, #0
 80044ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044ae:	1c7b      	adds	r3, r7, #1
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d004      	beq.n	80044c0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044b6:	1cbb      	adds	r3, r7, #2
 80044b8:	881a      	ldrh	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044be:	e003      	b.n	80044c8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044c0:	1cbb      	adds	r3, r7, #2
 80044c2:	881a      	ldrh	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80044c8:	46c0      	nop			@ (mov r8, r8)
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b002      	add	sp, #8
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	000a      	movs	r2, r1
 80044da:	1cbb      	adds	r3, r7, #2
 80044dc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044e4:	1cbb      	adds	r3, r7, #2
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4013      	ands	r3, r2
 80044ec:	041a      	lsls	r2, r3, #16
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	43db      	mvns	r3, r3
 80044f2:	1cb9      	adds	r1, r7, #2
 80044f4:	8809      	ldrh	r1, [r1, #0]
 80044f6:	400b      	ands	r3, r1
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	619a      	str	r2, [r3, #24]
}
 80044fe:	46c0      	nop			@ (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	b004      	add	sp, #16
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	0002      	movs	r2, r0
 8004510:	1dbb      	adds	r3, r7, #6
 8004512:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004514:	4b10      	ldr	r3, [pc, #64]	@ (8004558 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	1dba      	adds	r2, r7, #6
 800451a:	8812      	ldrh	r2, [r2, #0]
 800451c:	4013      	ands	r3, r2
 800451e:	d008      	beq.n	8004532 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004520:	4b0d      	ldr	r3, [pc, #52]	@ (8004558 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004522:	1dba      	adds	r2, r7, #6
 8004524:	8812      	ldrh	r2, [r2, #0]
 8004526:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004528:	1dbb      	adds	r3, r7, #6
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	0018      	movs	r0, r3
 800452e:	f7fe f823 	bl	8002578 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004532:	4b09      	ldr	r3, [pc, #36]	@ (8004558 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	1dba      	adds	r2, r7, #6
 8004538:	8812      	ldrh	r2, [r2, #0]
 800453a:	4013      	ands	r3, r2
 800453c:	d008      	beq.n	8004550 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800453e:	4b06      	ldr	r3, [pc, #24]	@ (8004558 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004540:	1dba      	adds	r2, r7, #6
 8004542:	8812      	ldrh	r2, [r2, #0]
 8004544:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004546:	1dbb      	adds	r3, r7, #6
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	0018      	movs	r0, r3
 800454c:	f7fd ffc0 	bl	80024d0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004550:	46c0      	nop			@ (mov r8, r8)
 8004552:	46bd      	mov	sp, r7
 8004554:	b002      	add	sp, #8
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40021800 	.word	0x40021800

0800455c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e08f      	b.n	800468e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2241      	movs	r2, #65	@ 0x41
 8004572:	5c9b      	ldrb	r3, [r3, r2]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d107      	bne.n	800458a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2240      	movs	r2, #64	@ 0x40
 800457e:	2100      	movs	r1, #0
 8004580:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	0018      	movs	r0, r3
 8004586:	f7fe fe93 	bl	80032b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2241      	movs	r2, #65	@ 0x41
 800458e:	2124      	movs	r1, #36	@ 0x24
 8004590:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2101      	movs	r1, #1
 800459e:	438a      	bics	r2, r1
 80045a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	493b      	ldr	r1, [pc, #236]	@ (8004698 <HAL_I2C_Init+0x13c>)
 80045ac:	400a      	ands	r2, r1
 80045ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4938      	ldr	r1, [pc, #224]	@ (800469c <HAL_I2C_Init+0x140>)
 80045bc:	400a      	ands	r2, r1
 80045be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d108      	bne.n	80045da <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2180      	movs	r1, #128	@ 0x80
 80045d2:	0209      	lsls	r1, r1, #8
 80045d4:	430a      	orrs	r2, r1
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	e007      	b.n	80045ea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2184      	movs	r1, #132	@ 0x84
 80045e4:	0209      	lsls	r1, r1, #8
 80045e6:	430a      	orrs	r2, r1
 80045e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d109      	bne.n	8004606 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2180      	movs	r1, #128	@ 0x80
 80045fe:	0109      	lsls	r1, r1, #4
 8004600:	430a      	orrs	r2, r1
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	e007      	b.n	8004616 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4923      	ldr	r1, [pc, #140]	@ (80046a0 <HAL_I2C_Init+0x144>)
 8004612:	400a      	ands	r2, r1
 8004614:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4920      	ldr	r1, [pc, #128]	@ (80046a4 <HAL_I2C_Init+0x148>)
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	491a      	ldr	r1, [pc, #104]	@ (800469c <HAL_I2C_Init+0x140>)
 8004632:	400a      	ands	r2, r1
 8004634:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	431a      	orrs	r2, r3
 8004640:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69d9      	ldr	r1, [r3, #28]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1a      	ldr	r2, [r3, #32]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2101      	movs	r1, #1
 800466c:	430a      	orrs	r2, r1
 800466e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2241      	movs	r2, #65	@ 0x41
 800467a:	2120      	movs	r1, #32
 800467c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2242      	movs	r2, #66	@ 0x42
 8004688:	2100      	movs	r1, #0
 800468a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	0018      	movs	r0, r3
 8004690:	46bd      	mov	sp, r7
 8004692:	b002      	add	sp, #8
 8004694:	bd80      	pop	{r7, pc}
 8004696:	46c0      	nop			@ (mov r8, r8)
 8004698:	f0ffffff 	.word	0xf0ffffff
 800469c:	ffff7fff 	.word	0xffff7fff
 80046a0:	fffff7ff 	.word	0xfffff7ff
 80046a4:	02008000 	.word	0x02008000

080046a8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80046a8:	b590      	push	{r4, r7, lr}
 80046aa:	b089      	sub	sp, #36	@ 0x24
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	0008      	movs	r0, r1
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	0019      	movs	r1, r3
 80046b6:	230a      	movs	r3, #10
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	1c02      	adds	r2, r0, #0
 80046bc:	801a      	strh	r2, [r3, #0]
 80046be:	2308      	movs	r3, #8
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	1c0a      	adds	r2, r1, #0
 80046c4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2241      	movs	r2, #65	@ 0x41
 80046ca:	5c9b      	ldrb	r3, [r3, r2]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d000      	beq.n	80046d4 <HAL_I2C_Master_Transmit+0x2c>
 80046d2:	e10a      	b.n	80048ea <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2240      	movs	r2, #64	@ 0x40
 80046d8:	5c9b      	ldrb	r3, [r3, r2]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_I2C_Master_Transmit+0x3a>
 80046de:	2302      	movs	r3, #2
 80046e0:	e104      	b.n	80048ec <HAL_I2C_Master_Transmit+0x244>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2240      	movs	r2, #64	@ 0x40
 80046e6:	2101      	movs	r1, #1
 80046e8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046ea:	f7ff f9b7 	bl	8003a5c <HAL_GetTick>
 80046ee:	0003      	movs	r3, r0
 80046f0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046f2:	2380      	movs	r3, #128	@ 0x80
 80046f4:	0219      	lsls	r1, r3, #8
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	2319      	movs	r3, #25
 80046fe:	2201      	movs	r2, #1
 8004700:	f000 fa26 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 8004704:	1e03      	subs	r3, r0, #0
 8004706:	d001      	beq.n	800470c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0ef      	b.n	80048ec <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2241      	movs	r2, #65	@ 0x41
 8004710:	2121      	movs	r1, #33	@ 0x21
 8004712:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2242      	movs	r2, #66	@ 0x42
 8004718:	2110      	movs	r1, #16
 800471a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2208      	movs	r2, #8
 800472c:	18ba      	adds	r2, r7, r2
 800472e:	8812      	ldrh	r2, [r2, #0]
 8004730:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	2bff      	cmp	r3, #255	@ 0xff
 8004740:	d906      	bls.n	8004750 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	22ff      	movs	r2, #255	@ 0xff
 8004746:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004748:	2380      	movs	r3, #128	@ 0x80
 800474a:	045b      	lsls	r3, r3, #17
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e007      	b.n	8004760 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800475a:	2380      	movs	r3, #128	@ 0x80
 800475c:	049b      	lsls	r3, r3, #18
 800475e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004764:	2b00      	cmp	r3, #0
 8004766:	d027      	beq.n	80047b8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	781a      	ldrb	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800479c:	b2db      	uxtb	r3, r3
 800479e:	3301      	adds	r3, #1
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	697c      	ldr	r4, [r7, #20]
 80047a4:	230a      	movs	r3, #10
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	8819      	ldrh	r1, [r3, #0]
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	4b51      	ldr	r3, [pc, #324]	@ (80048f4 <HAL_I2C_Master_Transmit+0x24c>)
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	0023      	movs	r3, r4
 80047b2:	f000 fc45 	bl	8005040 <I2C_TransferConfig>
 80047b6:	e06f      	b.n	8004898 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	697c      	ldr	r4, [r7, #20]
 80047c0:	230a      	movs	r3, #10
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	8819      	ldrh	r1, [r3, #0]
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	4b4a      	ldr	r3, [pc, #296]	@ (80048f4 <HAL_I2C_Master_Transmit+0x24c>)
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	0023      	movs	r3, r4
 80047ce:	f000 fc37 	bl	8005040 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80047d2:	e061      	b.n	8004898 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	0018      	movs	r0, r3
 80047dc:	f000 fa10 	bl	8004c00 <I2C_WaitOnTXISFlagUntilTimeout>
 80047e0:	1e03      	subs	r3, r0, #0
 80047e2:	d001      	beq.n	80047e8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e081      	b.n	80048ec <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	781a      	ldrb	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d03a      	beq.n	8004898 <HAL_I2C_Master_Transmit+0x1f0>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004826:	2b00      	cmp	r3, #0
 8004828:	d136      	bne.n	8004898 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800482a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	0013      	movs	r3, r2
 8004834:	2200      	movs	r2, #0
 8004836:	2180      	movs	r1, #128	@ 0x80
 8004838:	f000 f98a 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 800483c:	1e03      	subs	r3, r0, #0
 800483e:	d001      	beq.n	8004844 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e053      	b.n	80048ec <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	2bff      	cmp	r3, #255	@ 0xff
 800484c:	d911      	bls.n	8004872 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	22ff      	movs	r2, #255	@ 0xff
 8004852:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004858:	b2da      	uxtb	r2, r3
 800485a:	2380      	movs	r3, #128	@ 0x80
 800485c:	045c      	lsls	r4, r3, #17
 800485e:	230a      	movs	r3, #10
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	8819      	ldrh	r1, [r3, #0]
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	2300      	movs	r3, #0
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	0023      	movs	r3, r4
 800486c:	f000 fbe8 	bl	8005040 <I2C_TransferConfig>
 8004870:	e012      	b.n	8004898 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004880:	b2da      	uxtb	r2, r3
 8004882:	2380      	movs	r3, #128	@ 0x80
 8004884:	049c      	lsls	r4, r3, #18
 8004886:	230a      	movs	r3, #10
 8004888:	18fb      	adds	r3, r7, r3
 800488a:	8819      	ldrh	r1, [r3, #0]
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	2300      	movs	r3, #0
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	0023      	movs	r3, r4
 8004894:	f000 fbd4 	bl	8005040 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d198      	bne.n	80047d4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	0018      	movs	r0, r3
 80048aa:	f000 f9ef 	bl	8004c8c <I2C_WaitOnSTOPFlagUntilTimeout>
 80048ae:	1e03      	subs	r3, r0, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e01a      	b.n	80048ec <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2220      	movs	r2, #32
 80048bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	490b      	ldr	r1, [pc, #44]	@ (80048f8 <HAL_I2C_Master_Transmit+0x250>)
 80048ca:	400a      	ands	r2, r1
 80048cc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2241      	movs	r2, #65	@ 0x41
 80048d2:	2120      	movs	r1, #32
 80048d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2242      	movs	r2, #66	@ 0x42
 80048da:	2100      	movs	r1, #0
 80048dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2240      	movs	r2, #64	@ 0x40
 80048e2:	2100      	movs	r1, #0
 80048e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	e000      	b.n	80048ec <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80048ea:	2302      	movs	r3, #2
  }
}
 80048ec:	0018      	movs	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	b007      	add	sp, #28
 80048f2:	bd90      	pop	{r4, r7, pc}
 80048f4:	80002000 	.word	0x80002000
 80048f8:	fe00e800 	.word	0xfe00e800

080048fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80048fc:	b590      	push	{r4, r7, lr}
 80048fe:	b089      	sub	sp, #36	@ 0x24
 8004900:	af02      	add	r7, sp, #8
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	0008      	movs	r0, r1
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	0019      	movs	r1, r3
 800490a:	230a      	movs	r3, #10
 800490c:	18fb      	adds	r3, r7, r3
 800490e:	1c02      	adds	r2, r0, #0
 8004910:	801a      	strh	r2, [r3, #0]
 8004912:	2308      	movs	r3, #8
 8004914:	18fb      	adds	r3, r7, r3
 8004916:	1c0a      	adds	r2, r1, #0
 8004918:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2241      	movs	r2, #65	@ 0x41
 800491e:	5c9b      	ldrb	r3, [r3, r2]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b20      	cmp	r3, #32
 8004924:	d000      	beq.n	8004928 <HAL_I2C_Master_Receive+0x2c>
 8004926:	e0e8      	b.n	8004afa <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2240      	movs	r2, #64	@ 0x40
 800492c:	5c9b      	ldrb	r3, [r3, r2]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_I2C_Master_Receive+0x3a>
 8004932:	2302      	movs	r3, #2
 8004934:	e0e2      	b.n	8004afc <HAL_I2C_Master_Receive+0x200>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2240      	movs	r2, #64	@ 0x40
 800493a:	2101      	movs	r1, #1
 800493c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800493e:	f7ff f88d 	bl	8003a5c <HAL_GetTick>
 8004942:	0003      	movs	r3, r0
 8004944:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004946:	2380      	movs	r3, #128	@ 0x80
 8004948:	0219      	lsls	r1, r3, #8
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	2319      	movs	r3, #25
 8004952:	2201      	movs	r2, #1
 8004954:	f000 f8fc 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 8004958:	1e03      	subs	r3, r0, #0
 800495a:	d001      	beq.n	8004960 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0cd      	b.n	8004afc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2241      	movs	r2, #65	@ 0x41
 8004964:	2122      	movs	r1, #34	@ 0x22
 8004966:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2242      	movs	r2, #66	@ 0x42
 800496c:	2110      	movs	r1, #16
 800496e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2208      	movs	r2, #8
 8004980:	18ba      	adds	r2, r7, r2
 8004982:	8812      	ldrh	r2, [r2, #0]
 8004984:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	2bff      	cmp	r3, #255	@ 0xff
 8004994:	d911      	bls.n	80049ba <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	22ff      	movs	r2, #255	@ 0xff
 800499a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	2380      	movs	r3, #128	@ 0x80
 80049a4:	045c      	lsls	r4, r3, #17
 80049a6:	230a      	movs	r3, #10
 80049a8:	18fb      	adds	r3, r7, r3
 80049aa:	8819      	ldrh	r1, [r3, #0]
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	4b55      	ldr	r3, [pc, #340]	@ (8004b04 <HAL_I2C_Master_Receive+0x208>)
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	0023      	movs	r3, r4
 80049b4:	f000 fb44 	bl	8005040 <I2C_TransferConfig>
 80049b8:	e076      	b.n	8004aa8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	2380      	movs	r3, #128	@ 0x80
 80049cc:	049c      	lsls	r4, r3, #18
 80049ce:	230a      	movs	r3, #10
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	8819      	ldrh	r1, [r3, #0]
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004b04 <HAL_I2C_Master_Receive+0x208>)
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	0023      	movs	r3, r4
 80049dc:	f000 fb30 	bl	8005040 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80049e0:	e062      	b.n	8004aa8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	0018      	movs	r0, r3
 80049ea:	f000 f993 	bl	8004d14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049ee:	1e03      	subs	r3, r0, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e082      	b.n	8004afc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d03a      	beq.n	8004aa8 <HAL_I2C_Master_Receive+0x1ac>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d136      	bne.n	8004aa8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	0013      	movs	r3, r2
 8004a44:	2200      	movs	r2, #0
 8004a46:	2180      	movs	r1, #128	@ 0x80
 8004a48:	f000 f882 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 8004a4c:	1e03      	subs	r3, r0, #0
 8004a4e:	d001      	beq.n	8004a54 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e053      	b.n	8004afc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2bff      	cmp	r3, #255	@ 0xff
 8004a5c:	d911      	bls.n	8004a82 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	22ff      	movs	r2, #255	@ 0xff
 8004a62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	2380      	movs	r3, #128	@ 0x80
 8004a6c:	045c      	lsls	r4, r3, #17
 8004a6e:	230a      	movs	r3, #10
 8004a70:	18fb      	adds	r3, r7, r3
 8004a72:	8819      	ldrh	r1, [r3, #0]
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	2300      	movs	r3, #0
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	0023      	movs	r3, r4
 8004a7c:	f000 fae0 	bl	8005040 <I2C_TransferConfig>
 8004a80:	e012      	b.n	8004aa8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	2380      	movs	r3, #128	@ 0x80
 8004a94:	049c      	lsls	r4, r3, #18
 8004a96:	230a      	movs	r3, #10
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	8819      	ldrh	r1, [r3, #0]
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	0023      	movs	r3, r4
 8004aa4:	f000 facc 	bl	8005040 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d197      	bne.n	80049e2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f000 f8e7 	bl	8004c8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004abe:	1e03      	subs	r3, r0, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e01a      	b.n	8004afc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2220      	movs	r2, #32
 8004acc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	490b      	ldr	r1, [pc, #44]	@ (8004b08 <HAL_I2C_Master_Receive+0x20c>)
 8004ada:	400a      	ands	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2241      	movs	r2, #65	@ 0x41
 8004ae2:	2120      	movs	r1, #32
 8004ae4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2242      	movs	r2, #66	@ 0x42
 8004aea:	2100      	movs	r1, #0
 8004aec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2240      	movs	r2, #64	@ 0x40
 8004af2:	2100      	movs	r1, #0
 8004af4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	e000      	b.n	8004afc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004afa:	2302      	movs	r3, #2
  }
}
 8004afc:	0018      	movs	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	b007      	add	sp, #28
 8004b02:	bd90      	pop	{r4, r7, pc}
 8004b04:	80002400 	.word	0x80002400
 8004b08:	fe00e800 	.word	0xfe00e800

08004b0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d103      	bne.n	8004b2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2200      	movs	r2, #0
 8004b28:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	2201      	movs	r2, #1
 8004b32:	4013      	ands	r3, r2
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d007      	beq.n	8004b48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2101      	movs	r1, #1
 8004b44:	430a      	orrs	r2, r1
 8004b46:	619a      	str	r2, [r3, #24]
  }
}
 8004b48:	46c0      	nop			@ (mov r8, r8)
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b002      	add	sp, #8
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	1dfb      	adds	r3, r7, #7
 8004b5e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b60:	e03a      	b.n	8004bd8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	6839      	ldr	r1, [r7, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f000 f971 	bl	8004e50 <I2C_IsErrorOccurred>
 8004b6e:	1e03      	subs	r3, r0, #0
 8004b70:	d001      	beq.n	8004b76 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e040      	b.n	8004bf8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	d02d      	beq.n	8004bd8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7c:	f7fe ff6e 	bl	8003a5c <HAL_GetTick>
 8004b80:	0002      	movs	r2, r0
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d302      	bcc.n	8004b92 <I2C_WaitOnFlagUntilTimeout+0x42>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d122      	bne.n	8004bd8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	425a      	negs	r2, r3
 8004ba2:	4153      	adcs	r3, r2
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	001a      	movs	r2, r3
 8004ba8:	1dfb      	adds	r3, r7, #7
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d113      	bne.n	8004bd8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2241      	movs	r2, #65	@ 0x41
 8004bc0:	2120      	movs	r1, #32
 8004bc2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2242      	movs	r2, #66	@ 0x42
 8004bc8:	2100      	movs	r1, #0
 8004bca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2240      	movs	r2, #64	@ 0x40
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e00f      	b.n	8004bf8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	4013      	ands	r3, r2
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	425a      	negs	r2, r3
 8004be8:	4153      	adcs	r3, r2
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	001a      	movs	r2, r3
 8004bee:	1dfb      	adds	r3, r7, #7
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d0b5      	beq.n	8004b62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	b004      	add	sp, #16
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c0c:	e032      	b.n	8004c74 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	0018      	movs	r0, r3
 8004c16:	f000 f91b 	bl	8004e50 <I2C_IsErrorOccurred>
 8004c1a:	1e03      	subs	r3, r0, #0
 8004c1c:	d001      	beq.n	8004c22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e030      	b.n	8004c84 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	3301      	adds	r3, #1
 8004c26:	d025      	beq.n	8004c74 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c28:	f7fe ff18 	bl	8003a5c <HAL_GetTick>
 8004c2c:	0002      	movs	r2, r0
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d302      	bcc.n	8004c3e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d11a      	bne.n	8004c74 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	2202      	movs	r2, #2
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d013      	beq.n	8004c74 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c50:	2220      	movs	r2, #32
 8004c52:	431a      	orrs	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2241      	movs	r2, #65	@ 0x41
 8004c5c:	2120      	movs	r1, #32
 8004c5e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2242      	movs	r2, #66	@ 0x42
 8004c64:	2100      	movs	r1, #0
 8004c66:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2240      	movs	r2, #64	@ 0x40
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e007      	b.n	8004c84 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d1c5      	bne.n	8004c0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	0018      	movs	r0, r3
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b004      	add	sp, #16
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c98:	e02f      	b.n	8004cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	f000 f8d5 	bl	8004e50 <I2C_IsErrorOccurred>
 8004ca6:	1e03      	subs	r3, r0, #0
 8004ca8:	d001      	beq.n	8004cae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e02d      	b.n	8004d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cae:	f7fe fed5 	bl	8003a5c <HAL_GetTick>
 8004cb2:	0002      	movs	r2, r0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d302      	bcc.n	8004cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d11a      	bne.n	8004cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	4013      	ands	r3, r2
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	d013      	beq.n	8004cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2241      	movs	r2, #65	@ 0x41
 8004ce2:	2120      	movs	r1, #32
 8004ce4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2242      	movs	r2, #66	@ 0x42
 8004cea:	2100      	movs	r1, #0
 8004cec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2240      	movs	r2, #64	@ 0x40
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e007      	b.n	8004d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	2220      	movs	r2, #32
 8004d02:	4013      	ands	r3, r2
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	d1c8      	bne.n	8004c9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	b004      	add	sp, #16
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d20:	2317      	movs	r3, #23
 8004d22:	18fb      	adds	r3, r7, r3
 8004d24:	2200      	movs	r2, #0
 8004d26:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004d28:	e07b      	b.n	8004e22 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	0018      	movs	r0, r3
 8004d32:	f000 f88d 	bl	8004e50 <I2C_IsErrorOccurred>
 8004d36:	1e03      	subs	r3, r0, #0
 8004d38:	d003      	beq.n	8004d42 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004d3a:	2317      	movs	r3, #23
 8004d3c:	18fb      	adds	r3, r7, r3
 8004d3e:	2201      	movs	r2, #1
 8004d40:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d140      	bne.n	8004dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004d50:	2117      	movs	r1, #23
 8004d52:	187b      	adds	r3, r7, r1
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d13b      	bne.n	8004dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	2204      	movs	r2, #4
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d106      	bne.n	8004d76 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004d70:	187b      	adds	r3, r7, r1
 8004d72:	2200      	movs	r2, #0
 8004d74:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2210      	movs	r2, #16
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b10      	cmp	r3, #16
 8004d82:	d123      	bne.n	8004dcc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2210      	movs	r2, #16
 8004d8a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2204      	movs	r2, #4
 8004d90:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2220      	movs	r2, #32
 8004d98:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4929      	ldr	r1, [pc, #164]	@ (8004e4c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004da6:	400a      	ands	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2241      	movs	r2, #65	@ 0x41
 8004dae:	2120      	movs	r1, #32
 8004db0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2242      	movs	r2, #66	@ 0x42
 8004db6:	2100      	movs	r1, #0
 8004db8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2240      	movs	r2, #64	@ 0x40
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004dc2:	2317      	movs	r3, #23
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	e002      	b.n	8004dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004dd2:	f7fe fe43 	bl	8003a5c <HAL_GetTick>
 8004dd6:	0002      	movs	r2, r0
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d302      	bcc.n	8004de8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d11c      	bne.n	8004e22 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004de8:	2017      	movs	r0, #23
 8004dea:	183b      	adds	r3, r7, r0
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d117      	bne.n	8004e22 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d010      	beq.n	8004e22 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e04:	2220      	movs	r2, #32
 8004e06:	431a      	orrs	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2241      	movs	r2, #65	@ 0x41
 8004e10:	2120      	movs	r1, #32
 8004e12:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2240      	movs	r2, #64	@ 0x40
 8004e18:	2100      	movs	r1, #0
 8004e1a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004e1c:	183b      	adds	r3, r7, r0
 8004e1e:	2201      	movs	r2, #1
 8004e20:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	2204      	movs	r2, #4
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d005      	beq.n	8004e3c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004e30:	2317      	movs	r3, #23
 8004e32:	18fb      	adds	r3, r7, r3
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d100      	bne.n	8004e3c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004e3a:	e776      	b.n	8004d2a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004e3c:	2317      	movs	r3, #23
 8004e3e:	18fb      	adds	r3, r7, r3
 8004e40:	781b      	ldrb	r3, [r3, #0]
}
 8004e42:	0018      	movs	r0, r3
 8004e44:	46bd      	mov	sp, r7
 8004e46:	b006      	add	sp, #24
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	46c0      	nop			@ (mov r8, r8)
 8004e4c:	fe00e800 	.word	0xfe00e800

08004e50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08a      	sub	sp, #40	@ 0x28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5c:	2327      	movs	r3, #39	@ 0x27
 8004e5e:	18fb      	adds	r3, r7, r3
 8004e60:	2200      	movs	r2, #0
 8004e62:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	2210      	movs	r2, #16
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d100      	bne.n	8004e7e <I2C_IsErrorOccurred+0x2e>
 8004e7c:	e079      	b.n	8004f72 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2210      	movs	r2, #16
 8004e84:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e86:	e057      	b.n	8004f38 <I2C_IsErrorOccurred+0xe8>
 8004e88:	2227      	movs	r2, #39	@ 0x27
 8004e8a:	18bb      	adds	r3, r7, r2
 8004e8c:	18ba      	adds	r2, r7, r2
 8004e8e:	7812      	ldrb	r2, [r2, #0]
 8004e90:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	3301      	adds	r3, #1
 8004e96:	d04f      	beq.n	8004f38 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e98:	f7fe fde0 	bl	8003a5c <HAL_GetTick>
 8004e9c:	0002      	movs	r2, r0
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d302      	bcc.n	8004eae <I2C_IsErrorOccurred+0x5e>
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d144      	bne.n	8004f38 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	2380      	movs	r3, #128	@ 0x80
 8004eb6:	01db      	lsls	r3, r3, #7
 8004eb8:	4013      	ands	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ebc:	2013      	movs	r0, #19
 8004ebe:	183b      	adds	r3, r7, r0
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	2142      	movs	r1, #66	@ 0x42
 8004ec4:	5c52      	ldrb	r2, [r2, r1]
 8004ec6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	2380      	movs	r3, #128	@ 0x80
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	401a      	ands	r2, r3
 8004ed4:	2380      	movs	r3, #128	@ 0x80
 8004ed6:	021b      	lsls	r3, r3, #8
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d126      	bne.n	8004f2a <I2C_IsErrorOccurred+0xda>
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	2380      	movs	r3, #128	@ 0x80
 8004ee0:	01db      	lsls	r3, r3, #7
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d021      	beq.n	8004f2a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004ee6:	183b      	adds	r3, r7, r0
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d01d      	beq.n	8004f2a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2180      	movs	r1, #128	@ 0x80
 8004efa:	01c9      	lsls	r1, r1, #7
 8004efc:	430a      	orrs	r2, r1
 8004efe:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f00:	f7fe fdac 	bl	8003a5c <HAL_GetTick>
 8004f04:	0003      	movs	r3, r0
 8004f06:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f08:	e00f      	b.n	8004f2a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f0a:	f7fe fda7 	bl	8003a5c <HAL_GetTick>
 8004f0e:	0002      	movs	r2, r0
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b19      	cmp	r3, #25
 8004f16:	d908      	bls.n	8004f2a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004f20:	2327      	movs	r3, #39	@ 0x27
 8004f22:	18fb      	adds	r3, r7, r3
 8004f24:	2201      	movs	r2, #1
 8004f26:	701a      	strb	r2, [r3, #0]

              break;
 8004f28:	e006      	b.n	8004f38 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	2220      	movs	r2, #32
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b20      	cmp	r3, #32
 8004f36:	d1e8      	bne.n	8004f0a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b20      	cmp	r3, #32
 8004f44:	d004      	beq.n	8004f50 <I2C_IsErrorOccurred+0x100>
 8004f46:	2327      	movs	r3, #39	@ 0x27
 8004f48:	18fb      	adds	r3, r7, r3
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d09b      	beq.n	8004e88 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f50:	2327      	movs	r3, #39	@ 0x27
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d103      	bne.n	8004f62 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	2204      	movs	r2, #4
 8004f66:	4313      	orrs	r3, r2
 8004f68:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f6a:	2327      	movs	r3, #39	@ 0x27
 8004f6c:	18fb      	adds	r3, r7, r3
 8004f6e:	2201      	movs	r2, #1
 8004f70:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	2380      	movs	r3, #128	@ 0x80
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	4013      	ands	r3, r2
 8004f82:	d00c      	beq.n	8004f9e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	2201      	movs	r2, #1
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2280      	movs	r2, #128	@ 0x80
 8004f92:	0052      	lsls	r2, r2, #1
 8004f94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f96:	2327      	movs	r3, #39	@ 0x27
 8004f98:	18fb      	adds	r3, r7, r3
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	2380      	movs	r3, #128	@ 0x80
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d00c      	beq.n	8004fc2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	2208      	movs	r2, #8
 8004fac:	4313      	orrs	r3, r2
 8004fae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2280      	movs	r2, #128	@ 0x80
 8004fb6:	00d2      	lsls	r2, r2, #3
 8004fb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fba:	2327      	movs	r3, #39	@ 0x27
 8004fbc:	18fb      	adds	r3, r7, r3
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	2380      	movs	r3, #128	@ 0x80
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d00c      	beq.n	8004fe6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2280      	movs	r2, #128	@ 0x80
 8004fda:	0092      	lsls	r2, r2, #2
 8004fdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fde:	2327      	movs	r3, #39	@ 0x27
 8004fe0:	18fb      	adds	r3, r7, r3
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004fe6:	2327      	movs	r3, #39	@ 0x27
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d01d      	beq.n	800502c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	f7ff fd8a 	bl	8004b0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	490e      	ldr	r1, [pc, #56]	@ (800503c <I2C_IsErrorOccurred+0x1ec>)
 8005004:	400a      	ands	r2, r1
 8005006:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	431a      	orrs	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2241      	movs	r2, #65	@ 0x41
 8005018:	2120      	movs	r1, #32
 800501a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2242      	movs	r2, #66	@ 0x42
 8005020:	2100      	movs	r1, #0
 8005022:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2240      	movs	r2, #64	@ 0x40
 8005028:	2100      	movs	r1, #0
 800502a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800502c:	2327      	movs	r3, #39	@ 0x27
 800502e:	18fb      	adds	r3, r7, r3
 8005030:	781b      	ldrb	r3, [r3, #0]
}
 8005032:	0018      	movs	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	b00a      	add	sp, #40	@ 0x28
 8005038:	bd80      	pop	{r7, pc}
 800503a:	46c0      	nop			@ (mov r8, r8)
 800503c:	fe00e800 	.word	0xfe00e800

08005040 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	0008      	movs	r0, r1
 800504a:	0011      	movs	r1, r2
 800504c:	607b      	str	r3, [r7, #4]
 800504e:	240a      	movs	r4, #10
 8005050:	193b      	adds	r3, r7, r4
 8005052:	1c02      	adds	r2, r0, #0
 8005054:	801a      	strh	r2, [r3, #0]
 8005056:	2009      	movs	r0, #9
 8005058:	183b      	adds	r3, r7, r0
 800505a:	1c0a      	adds	r2, r1, #0
 800505c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800505e:	193b      	adds	r3, r7, r4
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	059b      	lsls	r3, r3, #22
 8005064:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005066:	183b      	adds	r3, r7, r0
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	0419      	lsls	r1, r3, #16
 800506c:	23ff      	movs	r3, #255	@ 0xff
 800506e:	041b      	lsls	r3, r3, #16
 8005070:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005072:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507a:	4313      	orrs	r3, r2
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	085b      	lsrs	r3, r3, #1
 8005080:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800508a:	0d51      	lsrs	r1, r2, #21
 800508c:	2280      	movs	r2, #128	@ 0x80
 800508e:	00d2      	lsls	r2, r2, #3
 8005090:	400a      	ands	r2, r1
 8005092:	4907      	ldr	r1, [pc, #28]	@ (80050b0 <I2C_TransferConfig+0x70>)
 8005094:	430a      	orrs	r2, r1
 8005096:	43d2      	mvns	r2, r2
 8005098:	401a      	ands	r2, r3
 800509a:	0011      	movs	r1, r2
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	46bd      	mov	sp, r7
 80050aa:	b007      	add	sp, #28
 80050ac:	bd90      	pop	{r4, r7, pc}
 80050ae:	46c0      	nop			@ (mov r8, r8)
 80050b0:	03ff63ff 	.word	0x03ff63ff

080050b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2241      	movs	r2, #65	@ 0x41
 80050c2:	5c9b      	ldrb	r3, [r3, r2]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d138      	bne.n	800513c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2240      	movs	r2, #64	@ 0x40
 80050ce:	5c9b      	ldrb	r3, [r3, r2]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050d4:	2302      	movs	r3, #2
 80050d6:	e032      	b.n	800513e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2240      	movs	r2, #64	@ 0x40
 80050dc:	2101      	movs	r1, #1
 80050de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2241      	movs	r2, #65	@ 0x41
 80050e4:	2124      	movs	r1, #36	@ 0x24
 80050e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2101      	movs	r1, #1
 80050f4:	438a      	bics	r2, r1
 80050f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4911      	ldr	r1, [pc, #68]	@ (8005148 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005104:	400a      	ands	r2, r1
 8005106:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6819      	ldr	r1, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2101      	movs	r1, #1
 8005124:	430a      	orrs	r2, r1
 8005126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2241      	movs	r2, #65	@ 0x41
 800512c:	2120      	movs	r1, #32
 800512e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2240      	movs	r2, #64	@ 0x40
 8005134:	2100      	movs	r1, #0
 8005136:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	e000      	b.n	800513e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800513c:	2302      	movs	r3, #2
  }
}
 800513e:	0018      	movs	r0, r3
 8005140:	46bd      	mov	sp, r7
 8005142:	b002      	add	sp, #8
 8005144:	bd80      	pop	{r7, pc}
 8005146:	46c0      	nop			@ (mov r8, r8)
 8005148:	ffffefff 	.word	0xffffefff

0800514c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2241      	movs	r2, #65	@ 0x41
 800515a:	5c9b      	ldrb	r3, [r3, r2]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b20      	cmp	r3, #32
 8005160:	d139      	bne.n	80051d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2240      	movs	r2, #64	@ 0x40
 8005166:	5c9b      	ldrb	r3, [r3, r2]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800516c:	2302      	movs	r3, #2
 800516e:	e033      	b.n	80051d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2240      	movs	r2, #64	@ 0x40
 8005174:	2101      	movs	r1, #1
 8005176:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2241      	movs	r2, #65	@ 0x41
 800517c:	2124      	movs	r1, #36	@ 0x24
 800517e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2101      	movs	r1, #1
 800518c:	438a      	bics	r2, r1
 800518e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4a11      	ldr	r2, [pc, #68]	@ (80051e0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800519c:	4013      	ands	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	021b      	lsls	r3, r3, #8
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2101      	movs	r1, #1
 80051be:	430a      	orrs	r2, r1
 80051c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2241      	movs	r2, #65	@ 0x41
 80051c6:	2120      	movs	r1, #32
 80051c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2240      	movs	r2, #64	@ 0x40
 80051ce:	2100      	movs	r1, #0
 80051d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	e000      	b.n	80051d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051d6:	2302      	movs	r3, #2
  }
}
 80051d8:	0018      	movs	r0, r3
 80051da:	46bd      	mov	sp, r7
 80051dc:	b004      	add	sp, #16
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	fffff0ff 	.word	0xfffff0ff

080051e4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e0e5      	b.n	80053c2 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2235      	movs	r2, #53	@ 0x35
 80051fa:	5c9b      	ldrb	r3, [r3, r2]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d107      	bne.n	8005212 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2234      	movs	r2, #52	@ 0x34
 8005206:	2100      	movs	r1, #0
 8005208:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	0018      	movs	r0, r3
 800520e:	f7fe f8b1 	bl	8003374 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2235      	movs	r2, #53	@ 0x35
 8005216:	2102      	movs	r1, #2
 8005218:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4969      	ldr	r1, [pc, #420]	@ (80053cc <HAL_I2S_Init+0x1e8>)
 8005226:	400a      	ands	r2, r1
 8005228:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2202      	movs	r2, #2
 8005230:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d100      	bne.n	800523c <HAL_I2S_Init+0x58>
 800523a:	e076      	b.n	800532a <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d102      	bne.n	800524a <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005244:	2310      	movs	r3, #16
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	e001      	b.n	800524e <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800524a:	2320      	movs	r3, #32
 800524c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	2b20      	cmp	r3, #32
 8005254:	d802      	bhi.n	800525c <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 800525c:	2380      	movs	r3, #128	@ 0x80
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	0018      	movs	r0, r3
 8005262:	f001 f955 	bl	8006510 <HAL_RCCEx_GetPeriphCLKFreq>
 8005266:	0003      	movs	r3, r0
 8005268:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	2380      	movs	r3, #128	@ 0x80
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	429a      	cmp	r2, r3
 8005274:	d131      	bne.n	80052da <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d016      	beq.n	80052ac <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	0019      	movs	r1, r3
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f7fa ff3d 	bl	8000104 <__udivsi3>
 800528a:	0003      	movs	r3, r0
 800528c:	001a      	movs	r2, r3
 800528e:	0013      	movs	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	189b      	adds	r3, r3, r2
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	001a      	movs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	0019      	movs	r1, r3
 800529e:	0010      	movs	r0, r2
 80052a0:	f7fa ff30 	bl	8000104 <__udivsi3>
 80052a4:	0003      	movs	r3, r0
 80052a6:	3305      	adds	r3, #5
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	e02a      	b.n	8005302 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	0019      	movs	r1, r3
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f7fa ff26 	bl	8000104 <__udivsi3>
 80052b8:	0003      	movs	r3, r0
 80052ba:	001a      	movs	r2, r3
 80052bc:	0013      	movs	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	189b      	adds	r3, r3, r2
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	001a      	movs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	0019      	movs	r1, r3
 80052cc:	0010      	movs	r0, r2
 80052ce:	f7fa ff19 	bl	8000104 <__udivsi3>
 80052d2:	0003      	movs	r3, r0
 80052d4:	3305      	adds	r3, #5
 80052d6:	613b      	str	r3, [r7, #16]
 80052d8:	e013      	b.n	8005302 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80052da:	6979      	ldr	r1, [r7, #20]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f7fa ff11 	bl	8000104 <__udivsi3>
 80052e2:	0003      	movs	r3, r0
 80052e4:	001a      	movs	r2, r3
 80052e6:	0013      	movs	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	189b      	adds	r3, r3, r2
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	001a      	movs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	0019      	movs	r1, r3
 80052f6:	0010      	movs	r0, r2
 80052f8:	f7fa ff04 	bl	8000104 <__udivsi3>
 80052fc:	0003      	movs	r3, r0
 80052fe:	3305      	adds	r3, #5
 8005300:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	210a      	movs	r1, #10
 8005306:	0018      	movs	r0, r3
 8005308:	f7fa fefc 	bl	8000104 <__udivsi3>
 800530c:	0003      	movs	r3, r0
 800530e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	2201      	movs	r2, #1
 8005314:	4013      	ands	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	085b      	lsrs	r3, r3, #1
 8005320:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	021b      	lsls	r3, r3, #8
 8005326:	61bb      	str	r3, [r7, #24]
 8005328:	e003      	b.n	8005332 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800532a:	2302      	movs	r3, #2
 800532c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d902      	bls.n	800533e <HAL_I2S_Init+0x15a>
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	2bff      	cmp	r3, #255	@ 0xff
 800533c:	d907      	bls.n	800534e <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005342:	2210      	movs	r2, #16
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e039      	b.n	80053c2 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691a      	ldr	r2, [r3, #16]
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	431a      	orrs	r2, r3
 8005356:	0011      	movs	r1, r2
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	430a      	orrs	r2, r1
 8005360:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	4a18      	ldr	r2, [pc, #96]	@ (80053cc <HAL_I2S_Init+0x1e8>)
 800536a:	401a      	ands	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6859      	ldr	r1, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	4319      	orrs	r1, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	4319      	orrs	r1, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	430b      	orrs	r3, r1
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2180      	movs	r1, #128	@ 0x80
 800538a:	0109      	lsls	r1, r1, #4
 800538c:	430a      	orrs	r2, r1
 800538e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	2b30      	cmp	r3, #48	@ 0x30
 8005396:	d003      	beq.n	80053a0 <HAL_I2S_Init+0x1bc>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2bb0      	cmp	r3, #176	@ 0xb0
 800539e:	d108      	bne.n	80053b2 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69da      	ldr	r2, [r3, #28]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2180      	movs	r1, #128	@ 0x80
 80053ac:	0149      	lsls	r1, r1, #5
 80053ae:	430a      	orrs	r2, r1
 80053b0:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2235      	movs	r2, #53	@ 0x35
 80053bc:	2101      	movs	r1, #1
 80053be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	0018      	movs	r0, r3
 80053c4:	46bd      	mov	sp, r7
 80053c6:	b008      	add	sp, #32
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	46c0      	nop			@ (mov r8, r8)
 80053cc:	fffff040 	.word	0xfffff040

080053d0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	1dbb      	adds	r3, r7, #6
 80053dc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <HAL_I2S_Transmit_DMA+0x1c>
 80053e4:	1dbb      	adds	r3, r7, #6
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e091      	b.n	8005514 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2234      	movs	r2, #52	@ 0x34
 80053f4:	5c9b      	ldrb	r3, [r3, r2]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_I2S_Transmit_DMA+0x30>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e089      	b.n	8005514 <HAL_I2S_Transmit_DMA+0x144>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2234      	movs	r2, #52	@ 0x34
 8005404:	2101      	movs	r1, #1
 8005406:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2235      	movs	r2, #53	@ 0x35
 800540c:	5c9b      	ldrb	r3, [r3, r2]
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b01      	cmp	r3, #1
 8005412:	d005      	beq.n	8005420 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2234      	movs	r2, #52	@ 0x34
 8005418:	2100      	movs	r1, #0
 800541a:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800541c:	2302      	movs	r3, #2
 800541e:	e079      	b.n	8005514 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2235      	movs	r2, #53	@ 0x35
 8005424:	2103      	movs	r1, #3
 8005426:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	2207      	movs	r2, #7
 800543c:	4013      	ands	r3, r2
 800543e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2b03      	cmp	r3, #3
 8005444:	d002      	beq.n	800544c <HAL_I2S_Transmit_DMA+0x7c>
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b05      	cmp	r3, #5
 800544a:	d10c      	bne.n	8005466 <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 800544c:	1dbb      	adds	r3, r7, #6
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	18db      	adds	r3, r3, r3
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8005458:	1dbb      	adds	r3, r7, #6
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	18db      	adds	r3, r3, r3
 800545e:	b29a      	uxth	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	845a      	strh	r2, [r3, #34]	@ 0x22
 8005464:	e007      	b.n	8005476 <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	1dba      	adds	r2, r7, #6
 800546a:	8812      	ldrh	r2, [r2, #0]
 800546c:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1dba      	adds	r2, r7, #6
 8005472:	8812      	ldrh	r2, [r2, #0]
 8005474:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547a:	4a28      	ldr	r2, [pc, #160]	@ (800551c <HAL_I2S_Transmit_DMA+0x14c>)
 800547c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005482:	4a27      	ldr	r2, [pc, #156]	@ (8005520 <HAL_I2S_Transmit_DMA+0x150>)
 8005484:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548a:	4a26      	ldr	r2, [pc, #152]	@ (8005524 <HAL_I2S_Transmit_DMA+0x154>)
 800548c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005496:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800549e:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8c1b      	ldrh	r3, [r3, #32]
 80054a4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80054a6:	f7fe fc4b 	bl	8003d40 <HAL_DMA_Start_IT>
 80054aa:	1e03      	subs	r3, r0, #0
 80054ac:	d00f      	beq.n	80054ce <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b2:	2208      	movs	r2, #8
 80054b4:	431a      	orrs	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2235      	movs	r2, #53	@ 0x35
 80054be:	2101      	movs	r1, #1
 80054c0:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2234      	movs	r2, #52	@ 0x34
 80054c6:	2100      	movs	r1, #0
 80054c8:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e022      	b.n	8005514 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	2380      	movs	r3, #128	@ 0x80
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4013      	ands	r3, r2
 80054da:	d108      	bne.n	80054ee <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69da      	ldr	r2, [r3, #28]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2180      	movs	r1, #128	@ 0x80
 80054e8:	00c9      	lsls	r1, r1, #3
 80054ea:	430a      	orrs	r2, r1
 80054ec:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	2202      	movs	r2, #2
 80054f6:	4013      	ands	r3, r2
 80054f8:	d107      	bne.n	800550a <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2102      	movs	r1, #2
 8005506:	430a      	orrs	r2, r1
 8005508:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2234      	movs	r2, #52	@ 0x34
 800550e:	2100      	movs	r1, #0
 8005510:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	0018      	movs	r0, r3
 8005516:	46bd      	mov	sp, r7
 8005518:	b006      	add	sp, #24
 800551a:	bd80      	pop	{r7, pc}
 800551c:	08005705 	.word	0x08005705
 8005520:	080056c1 	.word	0x080056c1
 8005524:	08005723 	.word	0x08005723

08005528 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005530:	2317      	movs	r3, #23
 8005532:	18fb      	adds	r3, r7, r3
 8005534:	2200      	movs	r2, #0
 8005536:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	2380      	movs	r3, #128	@ 0x80
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	429a      	cmp	r2, r3
 8005542:	d003      	beq.n	800554c <HAL_I2S_DMAStop+0x24>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d158      	bne.n	80055fe <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005550:	2b00      	cmp	r3, #0
 8005552:	d010      	beq.n	8005576 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005558:	0018      	movs	r0, r3
 800555a:	f7fe fc77 	bl	8003e4c <HAL_DMA_Abort>
 800555e:	1e03      	subs	r3, r0, #0
 8005560:	d009      	beq.n	8005576 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005566:	2208      	movs	r2, #8
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800556e:	2317      	movs	r3, #23
 8005570:	18fb      	adds	r3, r7, r3
 8005572:	2201      	movs	r2, #1
 8005574:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	2364      	movs	r3, #100	@ 0x64
 800557a:	2201      	movs	r2, #1
 800557c:	2102      	movs	r1, #2
 800557e:	f000 f8f7 	bl	8005770 <I2S_WaitFlagStateUntilTimeout>
 8005582:	1e03      	subs	r3, r0, #0
 8005584:	d00d      	beq.n	80055a2 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558a:	2201      	movs	r2, #1
 800558c:	431a      	orrs	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2235      	movs	r2, #53	@ 0x35
 8005596:	2101      	movs	r1, #1
 8005598:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800559a:	2317      	movs	r3, #23
 800559c:	18fb      	adds	r3, r7, r3
 800559e:	2201      	movs	r2, #1
 80055a0:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	2364      	movs	r3, #100	@ 0x64
 80055a6:	2200      	movs	r2, #0
 80055a8:	2180      	movs	r1, #128	@ 0x80
 80055aa:	f000 f8e1 	bl	8005770 <I2S_WaitFlagStateUntilTimeout>
 80055ae:	1e03      	subs	r3, r0, #0
 80055b0:	d00d      	beq.n	80055ce <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b6:	2201      	movs	r2, #1
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2235      	movs	r2, #53	@ 0x35
 80055c2:	2101      	movs	r1, #1
 80055c4:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80055c6:	2317      	movs	r3, #23
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	2201      	movs	r2, #1
 80055cc:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69da      	ldr	r2, [r3, #28]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4938      	ldr	r1, [pc, #224]	@ (80056bc <HAL_I2S_DMAStop+0x194>)
 80055da:	400a      	ands	r2, r1
 80055dc:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80055de:	2300      	movs	r3, #0
 80055e0:	613b      	str	r3, [r7, #16]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2102      	movs	r1, #2
 80055f8:	438a      	bics	r2, r1
 80055fa:	605a      	str	r2, [r3, #4]
 80055fc:	e053      	b.n	80056a6 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	23c0      	movs	r3, #192	@ 0xc0
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	429a      	cmp	r2, r3
 8005608:	d005      	beq.n	8005616 <HAL_I2S_DMAStop+0xee>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	2380      	movs	r3, #128	@ 0x80
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	429a      	cmp	r2, r3
 8005614:	d147      	bne.n	80056a6 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561a:	2b00      	cmp	r3, #0
 800561c:	d010      	beq.n	8005640 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005622:	0018      	movs	r0, r3
 8005624:	f7fe fc12 	bl	8003e4c <HAL_DMA_Abort>
 8005628:	1e03      	subs	r3, r0, #0
 800562a:	d009      	beq.n	8005640 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005630:	2208      	movs	r2, #8
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8005638:	2317      	movs	r3, #23
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	2201      	movs	r2, #1
 800563e:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69da      	ldr	r2, [r3, #28]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	491c      	ldr	r1, [pc, #112]	@ (80056bc <HAL_I2S_DMAStop+0x194>)
 800564c:	400a      	ands	r2, r1
 800564e:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2101      	movs	r1, #1
 8005672:	438a      	bics	r2, r1
 8005674:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	2380      	movs	r3, #128	@ 0x80
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	429a      	cmp	r2, r3
 8005680:	d10e      	bne.n	80056a0 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005686:	2240      	movs	r2, #64	@ 0x40
 8005688:	431a      	orrs	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2235      	movs	r2, #53	@ 0x35
 8005692:	2101      	movs	r1, #1
 8005694:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8005696:	2317      	movs	r3, #23
 8005698:	18fb      	adds	r3, r7, r3
 800569a:	2201      	movs	r2, #1
 800569c:	701a      	strb	r2, [r3, #0]
 800569e:	e002      	b.n	80056a6 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2235      	movs	r2, #53	@ 0x35
 80056aa:	2101      	movs	r1, #1
 80056ac:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80056ae:	2317      	movs	r3, #23
 80056b0:	18fb      	adds	r3, r7, r3
 80056b2:	781b      	ldrb	r3, [r3, #0]
}
 80056b4:	0018      	movs	r0, r3
 80056b6:	46bd      	mov	sp, r7
 80056b8:	b006      	add	sp, #24
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	fffffbff 	.word	0xfffffbff

080056c0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056cc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10e      	bne.n	80056f4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2102      	movs	r1, #2
 80056e2:	438a      	bics	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	845a      	strh	r2, [r3, #34]	@ 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2235      	movs	r2, #53	@ 0x35
 80056f0:	2101      	movs	r1, #1
 80056f2:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	0018      	movs	r0, r3
 80056f8:	f7fd fb21 	bl	8002d3e <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80056fc:	46c0      	nop			@ (mov r8, r8)
 80056fe:	46bd      	mov	sp, r7
 8005700:	b004      	add	sp, #16
 8005702:	bd80      	pop	{r7, pc}

08005704 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005710:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	0018      	movs	r0, r3
 8005716:	f7fd fb07 	bl	8002d28 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800571a:	46c0      	nop			@ (mov r8, r8)
 800571c:	46bd      	mov	sp, r7
 800571e:	b004      	add	sp, #16
 8005720:	bd80      	pop	{r7, pc}

08005722 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b084      	sub	sp, #16
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2103      	movs	r1, #3
 800573c:	438a      	bics	r2, r1
 800573e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2235      	movs	r2, #53	@ 0x35
 8005750:	2101      	movs	r1, #1
 8005752:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005758:	2208      	movs	r2, #8
 800575a:	431a      	orrs	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	0018      	movs	r0, r3
 8005764:	f7fd fb48 	bl	8002df8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005768:	46c0      	nop			@ (mov r8, r8)
 800576a:	46bd      	mov	sp, r7
 800576c:	b004      	add	sp, #16
 800576e:	bd80      	pop	{r7, pc}

08005770 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	1dfb      	adds	r3, r7, #7
 800577e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005780:	f7fe f96c 	bl	8003a5c <HAL_GetTick>
 8005784:	0003      	movs	r3, r0
 8005786:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005788:	e017      	b.n	80057ba <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	3301      	adds	r3, #1
 800578e:	d014      	beq.n	80057ba <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005790:	f7fe f964 	bl	8003a5c <HAL_GetTick>
 8005794:	0002      	movs	r2, r0
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	429a      	cmp	r2, r3
 800579e:	d902      	bls.n	80057a6 <I2S_WaitFlagStateUntilTimeout+0x36>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d109      	bne.n	80057ba <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2235      	movs	r2, #53	@ 0x35
 80057aa:	2101      	movs	r1, #1
 80057ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2234      	movs	r2, #52	@ 0x34
 80057b2:	2100      	movs	r1, #0
 80057b4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e00f      	b.n	80057da <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	4013      	ands	r3, r2
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	425a      	negs	r2, r3
 80057ca:	4153      	adcs	r3, r2
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	001a      	movs	r2, r3
 80057d0:	1dfb      	adds	r3, r7, #7
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d1d8      	bne.n	800578a <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	0018      	movs	r0, r3
 80057dc:	46bd      	mov	sp, r7
 80057de:	b006      	add	sp, #24
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057e8:	4b04      	ldr	r3, [pc, #16]	@ (80057fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	4b03      	ldr	r3, [pc, #12]	@ (80057fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80057ee:	2180      	movs	r1, #128	@ 0x80
 80057f0:	0049      	lsls	r1, r1, #1
 80057f2:	430a      	orrs	r2, r1
 80057f4:	601a      	str	r2, [r3, #0]
}
 80057f6:	46c0      	nop			@ (mov r8, r8)
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	40007000 	.word	0x40007000

08005800 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005808:	4b19      	ldr	r3, [pc, #100]	@ (8005870 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a19      	ldr	r2, [pc, #100]	@ (8005874 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800580e:	4013      	ands	r3, r2
 8005810:	0019      	movs	r1, r3
 8005812:	4b17      	ldr	r3, [pc, #92]	@ (8005870 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	430a      	orrs	r2, r1
 8005818:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	2380      	movs	r3, #128	@ 0x80
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	429a      	cmp	r2, r3
 8005822:	d11f      	bne.n	8005864 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005824:	4b14      	ldr	r3, [pc, #80]	@ (8005878 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	0013      	movs	r3, r2
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	189b      	adds	r3, r3, r2
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	4912      	ldr	r1, [pc, #72]	@ (800587c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005832:	0018      	movs	r0, r3
 8005834:	f7fa fc66 	bl	8000104 <__udivsi3>
 8005838:	0003      	movs	r3, r0
 800583a:	3301      	adds	r3, #1
 800583c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800583e:	e008      	b.n	8005852 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3b01      	subs	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	e001      	b.n	8005852 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e009      	b.n	8005866 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005852:	4b07      	ldr	r3, [pc, #28]	@ (8005870 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005854:	695a      	ldr	r2, [r3, #20]
 8005856:	2380      	movs	r3, #128	@ 0x80
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	401a      	ands	r2, r3
 800585c:	2380      	movs	r3, #128	@ 0x80
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	429a      	cmp	r2, r3
 8005862:	d0ed      	beq.n	8005840 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	0018      	movs	r0, r3
 8005868:	46bd      	mov	sp, r7
 800586a:	b004      	add	sp, #16
 800586c:	bd80      	pop	{r7, pc}
 800586e:	46c0      	nop			@ (mov r8, r8)
 8005870:	40007000 	.word	0x40007000
 8005874:	fffff9ff 	.word	0xfffff9ff
 8005878:	2000008c 	.word	0x2000008c
 800587c:	000f4240 	.word	0x000f4240

08005880 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005884:	4b03      	ldr	r3, [pc, #12]	@ (8005894 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	23e0      	movs	r3, #224	@ 0xe0
 800588a:	01db      	lsls	r3, r3, #7
 800588c:	4013      	ands	r3, r2
}
 800588e:	0018      	movs	r0, r3
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40021000 	.word	0x40021000

08005898 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b088      	sub	sp, #32
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e2fe      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2201      	movs	r2, #1
 80058b0:	4013      	ands	r3, r2
 80058b2:	d100      	bne.n	80058b6 <HAL_RCC_OscConfig+0x1e>
 80058b4:	e07c      	b.n	80059b0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058b6:	4bc3      	ldr	r3, [pc, #780]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2238      	movs	r2, #56	@ 0x38
 80058bc:	4013      	ands	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058c0:	4bc0      	ldr	r3, [pc, #768]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	2203      	movs	r2, #3
 80058c6:	4013      	ands	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d102      	bne.n	80058d6 <HAL_RCC_OscConfig+0x3e>
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	d002      	beq.n	80058dc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d10b      	bne.n	80058f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058dc:	4bb9      	ldr	r3, [pc, #740]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	2380      	movs	r3, #128	@ 0x80
 80058e2:	029b      	lsls	r3, r3, #10
 80058e4:	4013      	ands	r3, r2
 80058e6:	d062      	beq.n	80059ae <HAL_RCC_OscConfig+0x116>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d15e      	bne.n	80059ae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e2d9      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	2380      	movs	r3, #128	@ 0x80
 80058fa:	025b      	lsls	r3, r3, #9
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d107      	bne.n	8005910 <HAL_RCC_OscConfig+0x78>
 8005900:	4bb0      	ldr	r3, [pc, #704]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	4baf      	ldr	r3, [pc, #700]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005906:	2180      	movs	r1, #128	@ 0x80
 8005908:	0249      	lsls	r1, r1, #9
 800590a:	430a      	orrs	r2, r1
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	e020      	b.n	8005952 <HAL_RCC_OscConfig+0xba>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	23a0      	movs	r3, #160	@ 0xa0
 8005916:	02db      	lsls	r3, r3, #11
 8005918:	429a      	cmp	r2, r3
 800591a:	d10e      	bne.n	800593a <HAL_RCC_OscConfig+0xa2>
 800591c:	4ba9      	ldr	r3, [pc, #676]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	4ba8      	ldr	r3, [pc, #672]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005922:	2180      	movs	r1, #128	@ 0x80
 8005924:	02c9      	lsls	r1, r1, #11
 8005926:	430a      	orrs	r2, r1
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	4ba6      	ldr	r3, [pc, #664]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	4ba5      	ldr	r3, [pc, #660]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005930:	2180      	movs	r1, #128	@ 0x80
 8005932:	0249      	lsls	r1, r1, #9
 8005934:	430a      	orrs	r2, r1
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e00b      	b.n	8005952 <HAL_RCC_OscConfig+0xba>
 800593a:	4ba2      	ldr	r3, [pc, #648]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	4ba1      	ldr	r3, [pc, #644]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005940:	49a1      	ldr	r1, [pc, #644]	@ (8005bc8 <HAL_RCC_OscConfig+0x330>)
 8005942:	400a      	ands	r2, r1
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	4b9f      	ldr	r3, [pc, #636]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	4b9e      	ldr	r3, [pc, #632]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 800594c:	499f      	ldr	r1, [pc, #636]	@ (8005bcc <HAL_RCC_OscConfig+0x334>)
 800594e:	400a      	ands	r2, r1
 8005950:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d014      	beq.n	8005984 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595a:	f7fe f87f 	bl	8003a5c <HAL_GetTick>
 800595e:	0003      	movs	r3, r0
 8005960:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005964:	f7fe f87a 	bl	8003a5c <HAL_GetTick>
 8005968:	0002      	movs	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b64      	cmp	r3, #100	@ 0x64
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e298      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005976:	4b93      	ldr	r3, [pc, #588]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	2380      	movs	r3, #128	@ 0x80
 800597c:	029b      	lsls	r3, r3, #10
 800597e:	4013      	ands	r3, r2
 8005980:	d0f0      	beq.n	8005964 <HAL_RCC_OscConfig+0xcc>
 8005982:	e015      	b.n	80059b0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005984:	f7fe f86a 	bl	8003a5c <HAL_GetTick>
 8005988:	0003      	movs	r3, r0
 800598a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800598e:	f7fe f865 	bl	8003a5c <HAL_GetTick>
 8005992:	0002      	movs	r2, r0
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b64      	cmp	r3, #100	@ 0x64
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e283      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059a0:	4b88      	ldr	r3, [pc, #544]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	2380      	movs	r3, #128	@ 0x80
 80059a6:	029b      	lsls	r3, r3, #10
 80059a8:	4013      	ands	r3, r2
 80059aa:	d1f0      	bne.n	800598e <HAL_RCC_OscConfig+0xf6>
 80059ac:	e000      	b.n	80059b0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059ae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2202      	movs	r2, #2
 80059b6:	4013      	ands	r3, r2
 80059b8:	d100      	bne.n	80059bc <HAL_RCC_OscConfig+0x124>
 80059ba:	e099      	b.n	8005af0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059bc:	4b81      	ldr	r3, [pc, #516]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	2238      	movs	r2, #56	@ 0x38
 80059c2:	4013      	ands	r3, r2
 80059c4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059c6:	4b7f      	ldr	r3, [pc, #508]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	2203      	movs	r2, #3
 80059cc:	4013      	ands	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2b10      	cmp	r3, #16
 80059d4:	d102      	bne.n	80059dc <HAL_RCC_OscConfig+0x144>
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d002      	beq.n	80059e2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d135      	bne.n	8005a4e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059e2:	4b78      	ldr	r3, [pc, #480]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	2380      	movs	r3, #128	@ 0x80
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	4013      	ands	r3, r2
 80059ec:	d005      	beq.n	80059fa <HAL_RCC_OscConfig+0x162>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e256      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059fa:	4b72      	ldr	r3, [pc, #456]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	4a74      	ldr	r2, [pc, #464]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005a00:	4013      	ands	r3, r2
 8005a02:	0019      	movs	r1, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	021a      	lsls	r2, r3, #8
 8005a0a:	4b6e      	ldr	r3, [pc, #440]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d112      	bne.n	8005a3c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005a16:	4b6b      	ldr	r3, [pc, #428]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a6e      	ldr	r2, [pc, #440]	@ (8005bd4 <HAL_RCC_OscConfig+0x33c>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	0019      	movs	r1, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	4b67      	ldr	r3, [pc, #412]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005a26:	430a      	orrs	r2, r1
 8005a28:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005a2a:	4b66      	ldr	r3, [pc, #408]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	0adb      	lsrs	r3, r3, #11
 8005a30:	2207      	movs	r2, #7
 8005a32:	4013      	ands	r3, r2
 8005a34:	4a68      	ldr	r2, [pc, #416]	@ (8005bd8 <HAL_RCC_OscConfig+0x340>)
 8005a36:	40da      	lsrs	r2, r3
 8005a38:	4b68      	ldr	r3, [pc, #416]	@ (8005bdc <HAL_RCC_OscConfig+0x344>)
 8005a3a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a3c:	4b68      	ldr	r3, [pc, #416]	@ (8005be0 <HAL_RCC_OscConfig+0x348>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	0018      	movs	r0, r3
 8005a42:	f7fd ffaf 	bl	80039a4 <HAL_InitTick>
 8005a46:	1e03      	subs	r3, r0, #0
 8005a48:	d051      	beq.n	8005aee <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e22c      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d030      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005a56:	4b5b      	ldr	r3, [pc, #364]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a5e      	ldr	r2, [pc, #376]	@ (8005bd4 <HAL_RCC_OscConfig+0x33c>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	0019      	movs	r1, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	4b57      	ldr	r3, [pc, #348]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005a66:	430a      	orrs	r2, r1
 8005a68:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005a6a:	4b56      	ldr	r3, [pc, #344]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	4b55      	ldr	r3, [pc, #340]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005a70:	2180      	movs	r1, #128	@ 0x80
 8005a72:	0049      	lsls	r1, r1, #1
 8005a74:	430a      	orrs	r2, r1
 8005a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a78:	f7fd fff0 	bl	8003a5c <HAL_GetTick>
 8005a7c:	0003      	movs	r3, r0
 8005a7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a82:	f7fd ffeb 	bl	8003a5c <HAL_GetTick>
 8005a86:	0002      	movs	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e209      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a94:	4b4b      	ldr	r3, [pc, #300]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	2380      	movs	r3, #128	@ 0x80
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	d0f0      	beq.n	8005a82 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa0:	4b48      	ldr	r3, [pc, #288]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4a4a      	ldr	r2, [pc, #296]	@ (8005bd0 <HAL_RCC_OscConfig+0x338>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	021a      	lsls	r2, r3, #8
 8005ab0:	4b44      	ldr	r3, [pc, #272]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	605a      	str	r2, [r3, #4]
 8005ab6:	e01b      	b.n	8005af0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005ab8:	4b42      	ldr	r3, [pc, #264]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	4b41      	ldr	r3, [pc, #260]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005abe:	4949      	ldr	r1, [pc, #292]	@ (8005be4 <HAL_RCC_OscConfig+0x34c>)
 8005ac0:	400a      	ands	r2, r1
 8005ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac4:	f7fd ffca 	bl	8003a5c <HAL_GetTick>
 8005ac8:	0003      	movs	r3, r0
 8005aca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005acc:	e008      	b.n	8005ae0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ace:	f7fd ffc5 	bl	8003a5c <HAL_GetTick>
 8005ad2:	0002      	movs	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d901      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e1e3      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ae0:	4b38      	ldr	r3, [pc, #224]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	2380      	movs	r3, #128	@ 0x80
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d1f0      	bne.n	8005ace <HAL_RCC_OscConfig+0x236>
 8005aec:	e000      	b.n	8005af0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aee:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2208      	movs	r2, #8
 8005af6:	4013      	ands	r3, r2
 8005af8:	d047      	beq.n	8005b8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005afa:	4b32      	ldr	r3, [pc, #200]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	2238      	movs	r2, #56	@ 0x38
 8005b00:	4013      	ands	r3, r2
 8005b02:	2b18      	cmp	r3, #24
 8005b04:	d10a      	bne.n	8005b1c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005b06:	4b2f      	ldr	r3, [pc, #188]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d03c      	beq.n	8005b8a <HAL_RCC_OscConfig+0x2f2>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d138      	bne.n	8005b8a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e1c5      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d019      	beq.n	8005b58 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005b24:	4b27      	ldr	r3, [pc, #156]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005b26:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005b28:	4b26      	ldr	r3, [pc, #152]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b30:	f7fd ff94 	bl	8003a5c <HAL_GetTick>
 8005b34:	0003      	movs	r3, r0
 8005b36:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b38:	e008      	b.n	8005b4c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b3a:	f7fd ff8f 	bl	8003a5c <HAL_GetTick>
 8005b3e:	0002      	movs	r2, r0
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d901      	bls.n	8005b4c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e1ad      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b50:	2202      	movs	r2, #2
 8005b52:	4013      	ands	r3, r2
 8005b54:	d0f1      	beq.n	8005b3a <HAL_RCC_OscConfig+0x2a2>
 8005b56:	e018      	b.n	8005b8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005b58:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005b5a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005b5c:	4b19      	ldr	r3, [pc, #100]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005b5e:	2101      	movs	r1, #1
 8005b60:	438a      	bics	r2, r1
 8005b62:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b64:	f7fd ff7a 	bl	8003a5c <HAL_GetTick>
 8005b68:	0003      	movs	r3, r0
 8005b6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b6c:	e008      	b.n	8005b80 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b6e:	f7fd ff75 	bl	8003a5c <HAL_GetTick>
 8005b72:	0002      	movs	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e193      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b80:	4b10      	ldr	r3, [pc, #64]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b84:	2202      	movs	r2, #2
 8005b86:	4013      	ands	r3, r2
 8005b88:	d1f1      	bne.n	8005b6e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2204      	movs	r2, #4
 8005b90:	4013      	ands	r3, r2
 8005b92:	d100      	bne.n	8005b96 <HAL_RCC_OscConfig+0x2fe>
 8005b94:	e0c6      	b.n	8005d24 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b96:	231f      	movs	r3, #31
 8005b98:	18fb      	adds	r3, r7, r3
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005b9e:	4b09      	ldr	r3, [pc, #36]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	2238      	movs	r2, #56	@ 0x38
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d11e      	bne.n	8005be8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005baa:	4b06      	ldr	r3, [pc, #24]	@ (8005bc4 <HAL_RCC_OscConfig+0x32c>)
 8005bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bae:	2202      	movs	r2, #2
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	d100      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x31e>
 8005bb4:	e0b6      	b.n	8005d24 <HAL_RCC_OscConfig+0x48c>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d000      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x328>
 8005bbe:	e0b1      	b.n	8005d24 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e171      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	fffeffff 	.word	0xfffeffff
 8005bcc:	fffbffff 	.word	0xfffbffff
 8005bd0:	ffff80ff 	.word	0xffff80ff
 8005bd4:	ffffc7ff 	.word	0xffffc7ff
 8005bd8:	00f42400 	.word	0x00f42400
 8005bdc:	2000008c 	.word	0x2000008c
 8005be0:	20000090 	.word	0x20000090
 8005be4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005be8:	4bb1      	ldr	r3, [pc, #708]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005bea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bec:	2380      	movs	r3, #128	@ 0x80
 8005bee:	055b      	lsls	r3, r3, #21
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d101      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x360>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e000      	b.n	8005bfa <HAL_RCC_OscConfig+0x362>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d011      	beq.n	8005c22 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005bfe:	4bac      	ldr	r3, [pc, #688]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005c00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c02:	4bab      	ldr	r3, [pc, #684]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005c04:	2180      	movs	r1, #128	@ 0x80
 8005c06:	0549      	lsls	r1, r1, #21
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005c0c:	4ba8      	ldr	r3, [pc, #672]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005c0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c10:	2380      	movs	r3, #128	@ 0x80
 8005c12:	055b      	lsls	r3, r3, #21
 8005c14:	4013      	ands	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005c1a:	231f      	movs	r3, #31
 8005c1c:	18fb      	adds	r3, r7, r3
 8005c1e:	2201      	movs	r2, #1
 8005c20:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c22:	4ba4      	ldr	r3, [pc, #656]	@ (8005eb4 <HAL_RCC_OscConfig+0x61c>)
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	2380      	movs	r3, #128	@ 0x80
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	d11a      	bne.n	8005c64 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c2e:	4ba1      	ldr	r3, [pc, #644]	@ (8005eb4 <HAL_RCC_OscConfig+0x61c>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	4ba0      	ldr	r3, [pc, #640]	@ (8005eb4 <HAL_RCC_OscConfig+0x61c>)
 8005c34:	2180      	movs	r1, #128	@ 0x80
 8005c36:	0049      	lsls	r1, r1, #1
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005c3c:	f7fd ff0e 	bl	8003a5c <HAL_GetTick>
 8005c40:	0003      	movs	r3, r0
 8005c42:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c44:	e008      	b.n	8005c58 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c46:	f7fd ff09 	bl	8003a5c <HAL_GetTick>
 8005c4a:	0002      	movs	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e127      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c58:	4b96      	ldr	r3, [pc, #600]	@ (8005eb4 <HAL_RCC_OscConfig+0x61c>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	2380      	movs	r3, #128	@ 0x80
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	4013      	ands	r3, r2
 8005c62:	d0f0      	beq.n	8005c46 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d106      	bne.n	8005c7a <HAL_RCC_OscConfig+0x3e2>
 8005c6c:	4b90      	ldr	r3, [pc, #576]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005c6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c70:	4b8f      	ldr	r3, [pc, #572]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005c72:	2101      	movs	r1, #1
 8005c74:	430a      	orrs	r2, r1
 8005c76:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c78:	e01c      	b.n	8005cb4 <HAL_RCC_OscConfig+0x41c>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	2b05      	cmp	r3, #5
 8005c80:	d10c      	bne.n	8005c9c <HAL_RCC_OscConfig+0x404>
 8005c82:	4b8b      	ldr	r3, [pc, #556]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005c84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c86:	4b8a      	ldr	r3, [pc, #552]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005c88:	2104      	movs	r1, #4
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c8e:	4b88      	ldr	r3, [pc, #544]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005c90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c92:	4b87      	ldr	r3, [pc, #540]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005c94:	2101      	movs	r1, #1
 8005c96:	430a      	orrs	r2, r1
 8005c98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c9a:	e00b      	b.n	8005cb4 <HAL_RCC_OscConfig+0x41c>
 8005c9c:	4b84      	ldr	r3, [pc, #528]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005c9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ca0:	4b83      	ldr	r3, [pc, #524]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	438a      	bics	r2, r1
 8005ca6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ca8:	4b81      	ldr	r3, [pc, #516]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005caa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005cac:	4b80      	ldr	r3, [pc, #512]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005cae:	2104      	movs	r1, #4
 8005cb0:	438a      	bics	r2, r1
 8005cb2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d014      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cbc:	f7fd fece 	bl	8003a5c <HAL_GetTick>
 8005cc0:	0003      	movs	r3, r0
 8005cc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cc4:	e009      	b.n	8005cda <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cc6:	f7fd fec9 	bl	8003a5c <HAL_GetTick>
 8005cca:	0002      	movs	r2, r0
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	4a79      	ldr	r2, [pc, #484]	@ (8005eb8 <HAL_RCC_OscConfig+0x620>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e0e6      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cda:	4b75      	ldr	r3, [pc, #468]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cde:	2202      	movs	r2, #2
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	d0f0      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x42e>
 8005ce4:	e013      	b.n	8005d0e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce6:	f7fd feb9 	bl	8003a5c <HAL_GetTick>
 8005cea:	0003      	movs	r3, r0
 8005cec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cee:	e009      	b.n	8005d04 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cf0:	f7fd feb4 	bl	8003a5c <HAL_GetTick>
 8005cf4:	0002      	movs	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	4a6f      	ldr	r2, [pc, #444]	@ (8005eb8 <HAL_RCC_OscConfig+0x620>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e0d1      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d04:	4b6a      	ldr	r3, [pc, #424]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d08:	2202      	movs	r2, #2
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	d1f0      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005d0e:	231f      	movs	r3, #31
 8005d10:	18fb      	adds	r3, r7, r3
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d105      	bne.n	8005d24 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005d18:	4b65      	ldr	r3, [pc, #404]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005d1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d1c:	4b64      	ldr	r3, [pc, #400]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005d1e:	4967      	ldr	r1, [pc, #412]	@ (8005ebc <HAL_RCC_OscConfig+0x624>)
 8005d20:	400a      	ands	r2, r1
 8005d22:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d100      	bne.n	8005d2e <HAL_RCC_OscConfig+0x496>
 8005d2c:	e0bb      	b.n	8005ea6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d2e:	4b60      	ldr	r3, [pc, #384]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	2238      	movs	r2, #56	@ 0x38
 8005d34:	4013      	ands	r3, r2
 8005d36:	2b10      	cmp	r3, #16
 8005d38:	d100      	bne.n	8005d3c <HAL_RCC_OscConfig+0x4a4>
 8005d3a:	e07b      	b.n	8005e34 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d156      	bne.n	8005df2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d44:	4b5a      	ldr	r3, [pc, #360]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	4b59      	ldr	r3, [pc, #356]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005d4a:	495d      	ldr	r1, [pc, #372]	@ (8005ec0 <HAL_RCC_OscConfig+0x628>)
 8005d4c:	400a      	ands	r2, r1
 8005d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d50:	f7fd fe84 	bl	8003a5c <HAL_GetTick>
 8005d54:	0003      	movs	r3, r0
 8005d56:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d58:	e008      	b.n	8005d6c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d5a:	f7fd fe7f 	bl	8003a5c <HAL_GetTick>
 8005d5e:	0002      	movs	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e09d      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d6c:	4b50      	ldr	r3, [pc, #320]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	2380      	movs	r3, #128	@ 0x80
 8005d72:	049b      	lsls	r3, r3, #18
 8005d74:	4013      	ands	r3, r2
 8005d76:	d1f0      	bne.n	8005d5a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d78:	4b4d      	ldr	r3, [pc, #308]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	4a51      	ldr	r2, [pc, #324]	@ (8005ec4 <HAL_RCC_OscConfig+0x62c>)
 8005d7e:	4013      	ands	r3, r2
 8005d80:	0019      	movs	r1, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1a      	ldr	r2, [r3, #32]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d90:	021b      	lsls	r3, r3, #8
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da4:	431a      	orrs	r2, r3
 8005da6:	4b42      	ldr	r3, [pc, #264]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005da8:	430a      	orrs	r2, r1
 8005daa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dac:	4b40      	ldr	r3, [pc, #256]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	4b3f      	ldr	r3, [pc, #252]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005db2:	2180      	movs	r1, #128	@ 0x80
 8005db4:	0449      	lsls	r1, r1, #17
 8005db6:	430a      	orrs	r2, r1
 8005db8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005dba:	4b3d      	ldr	r3, [pc, #244]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	4b3c      	ldr	r3, [pc, #240]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005dc0:	2180      	movs	r1, #128	@ 0x80
 8005dc2:	0549      	lsls	r1, r1, #21
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc8:	f7fd fe48 	bl	8003a5c <HAL_GetTick>
 8005dcc:	0003      	movs	r3, r0
 8005dce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dd0:	e008      	b.n	8005de4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dd2:	f7fd fe43 	bl	8003a5c <HAL_GetTick>
 8005dd6:	0002      	movs	r2, r0
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e061      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005de4:	4b32      	ldr	r3, [pc, #200]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	2380      	movs	r3, #128	@ 0x80
 8005dea:	049b      	lsls	r3, r3, #18
 8005dec:	4013      	ands	r3, r2
 8005dee:	d0f0      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x53a>
 8005df0:	e059      	b.n	8005ea6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005df2:	4b2f      	ldr	r3, [pc, #188]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	4b2e      	ldr	r3, [pc, #184]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005df8:	4931      	ldr	r1, [pc, #196]	@ (8005ec0 <HAL_RCC_OscConfig+0x628>)
 8005dfa:	400a      	ands	r2, r1
 8005dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfe:	f7fd fe2d 	bl	8003a5c <HAL_GetTick>
 8005e02:	0003      	movs	r3, r0
 8005e04:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e08:	f7fd fe28 	bl	8003a5c <HAL_GetTick>
 8005e0c:	0002      	movs	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e046      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e1a:	4b25      	ldr	r3, [pc, #148]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	2380      	movs	r3, #128	@ 0x80
 8005e20:	049b      	lsls	r3, r3, #18
 8005e22:	4013      	ands	r3, r2
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005e26:	4b22      	ldr	r3, [pc, #136]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	4b21      	ldr	r3, [pc, #132]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005e2c:	4926      	ldr	r1, [pc, #152]	@ (8005ec8 <HAL_RCC_OscConfig+0x630>)
 8005e2e:	400a      	ands	r2, r1
 8005e30:	60da      	str	r2, [r3, #12]
 8005e32:	e038      	b.n	8005ea6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e033      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005e40:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb0 <HAL_RCC_OscConfig+0x618>)
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2203      	movs	r2, #3
 8005e4a:	401a      	ands	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d126      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2270      	movs	r2, #112	@ 0x70
 8005e58:	401a      	ands	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d11f      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	23fe      	movs	r3, #254	@ 0xfe
 8005e66:	01db      	lsls	r3, r3, #7
 8005e68:	401a      	ands	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d116      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	23f8      	movs	r3, #248	@ 0xf8
 8005e78:	039b      	lsls	r3, r3, #14
 8005e7a:	401a      	ands	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d10e      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	23e0      	movs	r3, #224	@ 0xe0
 8005e88:	051b      	lsls	r3, r3, #20
 8005e8a:	401a      	ands	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d106      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	0f5b      	lsrs	r3, r3, #29
 8005e98:	075a      	lsls	r2, r3, #29
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d001      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	b008      	add	sp, #32
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	40007000 	.word	0x40007000
 8005eb8:	00001388 	.word	0x00001388
 8005ebc:	efffffff 	.word	0xefffffff
 8005ec0:	feffffff 	.word	0xfeffffff
 8005ec4:	11c1808c 	.word	0x11c1808c
 8005ec8:	eefefffc 	.word	0xeefefffc

08005ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e0e9      	b.n	80060b4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ee0:	4b76      	ldr	r3, [pc, #472]	@ (80060bc <HAL_RCC_ClockConfig+0x1f0>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2207      	movs	r2, #7
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d91e      	bls.n	8005f2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eee:	4b73      	ldr	r3, [pc, #460]	@ (80060bc <HAL_RCC_ClockConfig+0x1f0>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2207      	movs	r2, #7
 8005ef4:	4393      	bics	r3, r2
 8005ef6:	0019      	movs	r1, r3
 8005ef8:	4b70      	ldr	r3, [pc, #448]	@ (80060bc <HAL_RCC_ClockConfig+0x1f0>)
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005f00:	f7fd fdac 	bl	8003a5c <HAL_GetTick>
 8005f04:	0003      	movs	r3, r0
 8005f06:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f08:	e009      	b.n	8005f1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f0a:	f7fd fda7 	bl	8003a5c <HAL_GetTick>
 8005f0e:	0002      	movs	r2, r0
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	4a6a      	ldr	r2, [pc, #424]	@ (80060c0 <HAL_RCC_ClockConfig+0x1f4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e0ca      	b.n	80060b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f1e:	4b67      	ldr	r3, [pc, #412]	@ (80060bc <HAL_RCC_ClockConfig+0x1f0>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2207      	movs	r2, #7
 8005f24:	4013      	ands	r3, r2
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d1ee      	bne.n	8005f0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2202      	movs	r2, #2
 8005f32:	4013      	ands	r3, r2
 8005f34:	d015      	beq.n	8005f62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2204      	movs	r2, #4
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	d006      	beq.n	8005f4e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005f40:	4b60      	ldr	r3, [pc, #384]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	4b5f      	ldr	r3, [pc, #380]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005f46:	21e0      	movs	r1, #224	@ 0xe0
 8005f48:	01c9      	lsls	r1, r1, #7
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	4a5d      	ldr	r2, [pc, #372]	@ (80060c8 <HAL_RCC_ClockConfig+0x1fc>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	0019      	movs	r1, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	4b59      	ldr	r3, [pc, #356]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2201      	movs	r2, #1
 8005f68:	4013      	ands	r3, r2
 8005f6a:	d057      	beq.n	800601c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d107      	bne.n	8005f84 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f74:	4b53      	ldr	r3, [pc, #332]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	2380      	movs	r3, #128	@ 0x80
 8005f7a:	029b      	lsls	r3, r3, #10
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	d12b      	bne.n	8005fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e097      	b.n	80060b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d107      	bne.n	8005f9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f8c:	4b4d      	ldr	r3, [pc, #308]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	2380      	movs	r3, #128	@ 0x80
 8005f92:	049b      	lsls	r3, r3, #18
 8005f94:	4013      	ands	r3, r2
 8005f96:	d11f      	bne.n	8005fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e08b      	b.n	80060b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d107      	bne.n	8005fb4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fa4:	4b47      	ldr	r3, [pc, #284]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	2380      	movs	r3, #128	@ 0x80
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	4013      	ands	r3, r2
 8005fae:	d113      	bne.n	8005fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e07f      	b.n	80060b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d106      	bne.n	8005fca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fbc:	4b41      	ldr	r3, [pc, #260]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	d108      	bne.n	8005fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e074      	b.n	80060b4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fca:	4b3e      	ldr	r3, [pc, #248]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fce:	2202      	movs	r2, #2
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	d101      	bne.n	8005fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e06d      	b.n	80060b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fd8:	4b3a      	ldr	r3, [pc, #232]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	2207      	movs	r2, #7
 8005fde:	4393      	bics	r3, r2
 8005fe0:	0019      	movs	r1, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	4b37      	ldr	r3, [pc, #220]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fec:	f7fd fd36 	bl	8003a5c <HAL_GetTick>
 8005ff0:	0003      	movs	r3, r0
 8005ff2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ff4:	e009      	b.n	800600a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ff6:	f7fd fd31 	bl	8003a5c <HAL_GetTick>
 8005ffa:	0002      	movs	r2, r0
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	4a2f      	ldr	r2, [pc, #188]	@ (80060c0 <HAL_RCC_ClockConfig+0x1f4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d901      	bls.n	800600a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e054      	b.n	80060b4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800600a:	4b2e      	ldr	r3, [pc, #184]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f8>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2238      	movs	r2, #56	@ 0x38
 8006010:	401a      	ands	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	429a      	cmp	r2, r3
 800601a:	d1ec      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800601c:	4b27      	ldr	r3, [pc, #156]	@ (80060bc <HAL_RCC_ClockConfig+0x1f0>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2207      	movs	r2, #7
 8006022:	4013      	ands	r3, r2
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d21e      	bcs.n	8006068 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800602a:	4b24      	ldr	r3, [pc, #144]	@ (80060bc <HAL_RCC_ClockConfig+0x1f0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2207      	movs	r2, #7
 8006030:	4393      	bics	r3, r2
 8006032:	0019      	movs	r1, r3
 8006034:	4b21      	ldr	r3, [pc, #132]	@ (80060bc <HAL_RCC_ClockConfig+0x1f0>)
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800603c:	f7fd fd0e 	bl	8003a5c <HAL_GetTick>
 8006040:	0003      	movs	r3, r0
 8006042:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006044:	e009      	b.n	800605a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006046:	f7fd fd09 	bl	8003a5c <HAL_GetTick>
 800604a:	0002      	movs	r2, r0
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	4a1b      	ldr	r2, [pc, #108]	@ (80060c0 <HAL_RCC_ClockConfig+0x1f4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d901      	bls.n	800605a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e02c      	b.n	80060b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800605a:	4b18      	ldr	r3, [pc, #96]	@ (80060bc <HAL_RCC_ClockConfig+0x1f0>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2207      	movs	r2, #7
 8006060:	4013      	ands	r3, r2
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	429a      	cmp	r2, r3
 8006066:	d1ee      	bne.n	8006046 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2204      	movs	r2, #4
 800606e:	4013      	ands	r3, r2
 8006070:	d009      	beq.n	8006086 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006072:	4b14      	ldr	r3, [pc, #80]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f8>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	4a15      	ldr	r2, [pc, #84]	@ (80060cc <HAL_RCC_ClockConfig+0x200>)
 8006078:	4013      	ands	r3, r2
 800607a:	0019      	movs	r1, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	4b10      	ldr	r3, [pc, #64]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f8>)
 8006082:	430a      	orrs	r2, r1
 8006084:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006086:	f000 f829 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 800608a:	0001      	movs	r1, r0
 800608c:	4b0d      	ldr	r3, [pc, #52]	@ (80060c4 <HAL_RCC_ClockConfig+0x1f8>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	0a1b      	lsrs	r3, r3, #8
 8006092:	220f      	movs	r2, #15
 8006094:	401a      	ands	r2, r3
 8006096:	4b0e      	ldr	r3, [pc, #56]	@ (80060d0 <HAL_RCC_ClockConfig+0x204>)
 8006098:	0092      	lsls	r2, r2, #2
 800609a:	58d3      	ldr	r3, [r2, r3]
 800609c:	221f      	movs	r2, #31
 800609e:	4013      	ands	r3, r2
 80060a0:	000a      	movs	r2, r1
 80060a2:	40da      	lsrs	r2, r3
 80060a4:	4b0b      	ldr	r3, [pc, #44]	@ (80060d4 <HAL_RCC_ClockConfig+0x208>)
 80060a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80060a8:	4b0b      	ldr	r3, [pc, #44]	@ (80060d8 <HAL_RCC_ClockConfig+0x20c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	0018      	movs	r0, r3
 80060ae:	f7fd fc79 	bl	80039a4 <HAL_InitTick>
 80060b2:	0003      	movs	r3, r0
}
 80060b4:	0018      	movs	r0, r3
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b004      	add	sp, #16
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40022000 	.word	0x40022000
 80060c0:	00001388 	.word	0x00001388
 80060c4:	40021000 	.word	0x40021000
 80060c8:	fffff0ff 	.word	0xfffff0ff
 80060cc:	ffff8fff 	.word	0xffff8fff
 80060d0:	080095b8 	.word	0x080095b8
 80060d4:	2000008c 	.word	0x2000008c
 80060d8:	20000090 	.word	0x20000090

080060dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060e2:	4b3c      	ldr	r3, [pc, #240]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2238      	movs	r2, #56	@ 0x38
 80060e8:	4013      	ands	r3, r2
 80060ea:	d10f      	bne.n	800610c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80060ec:	4b39      	ldr	r3, [pc, #228]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	0adb      	lsrs	r3, r3, #11
 80060f2:	2207      	movs	r2, #7
 80060f4:	4013      	ands	r3, r2
 80060f6:	2201      	movs	r2, #1
 80060f8:	409a      	lsls	r2, r3
 80060fa:	0013      	movs	r3, r2
 80060fc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	4835      	ldr	r0, [pc, #212]	@ (80061d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006102:	f7f9 ffff 	bl	8000104 <__udivsi3>
 8006106:	0003      	movs	r3, r0
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	e05d      	b.n	80061c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800610c:	4b31      	ldr	r3, [pc, #196]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2238      	movs	r2, #56	@ 0x38
 8006112:	4013      	ands	r3, r2
 8006114:	2b08      	cmp	r3, #8
 8006116:	d102      	bne.n	800611e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006118:	4b2f      	ldr	r3, [pc, #188]	@ (80061d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800611a:	613b      	str	r3, [r7, #16]
 800611c:	e054      	b.n	80061c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800611e:	4b2d      	ldr	r3, [pc, #180]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	2238      	movs	r2, #56	@ 0x38
 8006124:	4013      	ands	r3, r2
 8006126:	2b10      	cmp	r3, #16
 8006128:	d138      	bne.n	800619c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800612a:	4b2a      	ldr	r3, [pc, #168]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	2203      	movs	r2, #3
 8006130:	4013      	ands	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006134:	4b27      	ldr	r3, [pc, #156]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	091b      	lsrs	r3, r3, #4
 800613a:	2207      	movs	r2, #7
 800613c:	4013      	ands	r3, r2
 800613e:	3301      	adds	r3, #1
 8006140:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b03      	cmp	r3, #3
 8006146:	d10d      	bne.n	8006164 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006148:	68b9      	ldr	r1, [r7, #8]
 800614a:	4823      	ldr	r0, [pc, #140]	@ (80061d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800614c:	f7f9 ffda 	bl	8000104 <__udivsi3>
 8006150:	0003      	movs	r3, r0
 8006152:	0019      	movs	r1, r3
 8006154:	4b1f      	ldr	r3, [pc, #124]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	0a1b      	lsrs	r3, r3, #8
 800615a:	227f      	movs	r2, #127	@ 0x7f
 800615c:	4013      	ands	r3, r2
 800615e:	434b      	muls	r3, r1
 8006160:	617b      	str	r3, [r7, #20]
        break;
 8006162:	e00d      	b.n	8006180 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006164:	68b9      	ldr	r1, [r7, #8]
 8006166:	481c      	ldr	r0, [pc, #112]	@ (80061d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006168:	f7f9 ffcc 	bl	8000104 <__udivsi3>
 800616c:	0003      	movs	r3, r0
 800616e:	0019      	movs	r1, r3
 8006170:	4b18      	ldr	r3, [pc, #96]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	0a1b      	lsrs	r3, r3, #8
 8006176:	227f      	movs	r2, #127	@ 0x7f
 8006178:	4013      	ands	r3, r2
 800617a:	434b      	muls	r3, r1
 800617c:	617b      	str	r3, [r7, #20]
        break;
 800617e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006180:	4b14      	ldr	r3, [pc, #80]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	0f5b      	lsrs	r3, r3, #29
 8006186:	2207      	movs	r2, #7
 8006188:	4013      	ands	r3, r2
 800618a:	3301      	adds	r3, #1
 800618c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	6978      	ldr	r0, [r7, #20]
 8006192:	f7f9 ffb7 	bl	8000104 <__udivsi3>
 8006196:	0003      	movs	r3, r0
 8006198:	613b      	str	r3, [r7, #16]
 800619a:	e015      	b.n	80061c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800619c:	4b0d      	ldr	r3, [pc, #52]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	2238      	movs	r2, #56	@ 0x38
 80061a2:	4013      	ands	r3, r2
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	d103      	bne.n	80061b0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80061a8:	2380      	movs	r3, #128	@ 0x80
 80061aa:	021b      	lsls	r3, r3, #8
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	e00b      	b.n	80061c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80061b0:	4b08      	ldr	r3, [pc, #32]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	2238      	movs	r2, #56	@ 0x38
 80061b6:	4013      	ands	r3, r2
 80061b8:	2b18      	cmp	r3, #24
 80061ba:	d103      	bne.n	80061c4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80061bc:	23fa      	movs	r3, #250	@ 0xfa
 80061be:	01db      	lsls	r3, r3, #7
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	e001      	b.n	80061c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80061c8:	693b      	ldr	r3, [r7, #16]
}
 80061ca:	0018      	movs	r0, r3
 80061cc:	46bd      	mov	sp, r7
 80061ce:	b006      	add	sp, #24
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	46c0      	nop			@ (mov r8, r8)
 80061d4:	40021000 	.word	0x40021000
 80061d8:	00f42400 	.word	0x00f42400

080061dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061e0:	4b02      	ldr	r3, [pc, #8]	@ (80061ec <HAL_RCC_GetHCLKFreq+0x10>)
 80061e2:	681b      	ldr	r3, [r3, #0]
}
 80061e4:	0018      	movs	r0, r3
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	46c0      	nop			@ (mov r8, r8)
 80061ec:	2000008c 	.word	0x2000008c

080061f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061f0:	b5b0      	push	{r4, r5, r7, lr}
 80061f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80061f4:	f7ff fff2 	bl	80061dc <HAL_RCC_GetHCLKFreq>
 80061f8:	0004      	movs	r4, r0
 80061fa:	f7ff fb41 	bl	8005880 <LL_RCC_GetAPB1Prescaler>
 80061fe:	0003      	movs	r3, r0
 8006200:	0b1a      	lsrs	r2, r3, #12
 8006202:	4b05      	ldr	r3, [pc, #20]	@ (8006218 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006204:	0092      	lsls	r2, r2, #2
 8006206:	58d3      	ldr	r3, [r2, r3]
 8006208:	221f      	movs	r2, #31
 800620a:	4013      	ands	r3, r2
 800620c:	40dc      	lsrs	r4, r3
 800620e:	0023      	movs	r3, r4
}
 8006210:	0018      	movs	r0, r3
 8006212:	46bd      	mov	sp, r7
 8006214:	bdb0      	pop	{r4, r5, r7, pc}
 8006216:	46c0      	nop			@ (mov r8, r8)
 8006218:	080095f8 	.word	0x080095f8

0800621c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006224:	2313      	movs	r3, #19
 8006226:	18fb      	adds	r3, r7, r3
 8006228:	2200      	movs	r2, #0
 800622a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800622c:	2312      	movs	r3, #18
 800622e:	18fb      	adds	r3, r7, r3
 8006230:	2200      	movs	r2, #0
 8006232:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	2380      	movs	r3, #128	@ 0x80
 800623a:	029b      	lsls	r3, r3, #10
 800623c:	4013      	ands	r3, r2
 800623e:	d100      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006240:	e0a3      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006242:	2011      	movs	r0, #17
 8006244:	183b      	adds	r3, r7, r0
 8006246:	2200      	movs	r2, #0
 8006248:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800624a:	4ba5      	ldr	r3, [pc, #660]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800624c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800624e:	2380      	movs	r3, #128	@ 0x80
 8006250:	055b      	lsls	r3, r3, #21
 8006252:	4013      	ands	r3, r2
 8006254:	d110      	bne.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006256:	4ba2      	ldr	r3, [pc, #648]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006258:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800625a:	4ba1      	ldr	r3, [pc, #644]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800625c:	2180      	movs	r1, #128	@ 0x80
 800625e:	0549      	lsls	r1, r1, #21
 8006260:	430a      	orrs	r2, r1
 8006262:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006264:	4b9e      	ldr	r3, [pc, #632]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006266:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006268:	2380      	movs	r3, #128	@ 0x80
 800626a:	055b      	lsls	r3, r3, #21
 800626c:	4013      	ands	r3, r2
 800626e:	60bb      	str	r3, [r7, #8]
 8006270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006272:	183b      	adds	r3, r7, r0
 8006274:	2201      	movs	r2, #1
 8006276:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006278:	4b9a      	ldr	r3, [pc, #616]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	4b99      	ldr	r3, [pc, #612]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800627e:	2180      	movs	r1, #128	@ 0x80
 8006280:	0049      	lsls	r1, r1, #1
 8006282:	430a      	orrs	r2, r1
 8006284:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006286:	f7fd fbe9 	bl	8003a5c <HAL_GetTick>
 800628a:	0003      	movs	r3, r0
 800628c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800628e:	e00b      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006290:	f7fd fbe4 	bl	8003a5c <HAL_GetTick>
 8006294:	0002      	movs	r2, r0
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d904      	bls.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800629e:	2313      	movs	r3, #19
 80062a0:	18fb      	adds	r3, r7, r3
 80062a2:	2203      	movs	r2, #3
 80062a4:	701a      	strb	r2, [r3, #0]
        break;
 80062a6:	e005      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062a8:	4b8e      	ldr	r3, [pc, #568]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	2380      	movs	r3, #128	@ 0x80
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	4013      	ands	r3, r2
 80062b2:	d0ed      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80062b4:	2313      	movs	r3, #19
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d154      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062be:	4b88      	ldr	r3, [pc, #544]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80062c2:	23c0      	movs	r3, #192	@ 0xc0
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4013      	ands	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d019      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d014      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062da:	4b81      	ldr	r3, [pc, #516]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062de:	4a82      	ldr	r2, [pc, #520]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80062e0:	4013      	ands	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062e4:	4b7e      	ldr	r3, [pc, #504]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80062e8:	4b7d      	ldr	r3, [pc, #500]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062ea:	2180      	movs	r1, #128	@ 0x80
 80062ec:	0249      	lsls	r1, r1, #9
 80062ee:	430a      	orrs	r2, r1
 80062f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062f2:	4b7b      	ldr	r3, [pc, #492]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80062f6:	4b7a      	ldr	r3, [pc, #488]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062f8:	497c      	ldr	r1, [pc, #496]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80062fa:	400a      	ands	r2, r1
 80062fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062fe:	4b78      	ldr	r3, [pc, #480]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2201      	movs	r2, #1
 8006308:	4013      	ands	r3, r2
 800630a:	d016      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630c:	f7fd fba6 	bl	8003a5c <HAL_GetTick>
 8006310:	0003      	movs	r3, r0
 8006312:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006314:	e00c      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006316:	f7fd fba1 	bl	8003a5c <HAL_GetTick>
 800631a:	0002      	movs	r2, r0
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	4a73      	ldr	r2, [pc, #460]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d904      	bls.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006326:	2313      	movs	r3, #19
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	2203      	movs	r2, #3
 800632c:	701a      	strb	r2, [r3, #0]
            break;
 800632e:	e004      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006330:	4b6b      	ldr	r3, [pc, #428]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006334:	2202      	movs	r2, #2
 8006336:	4013      	ands	r3, r2
 8006338:	d0ed      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800633a:	2313      	movs	r3, #19
 800633c:	18fb      	adds	r3, r7, r3
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006344:	4b66      	ldr	r3, [pc, #408]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006348:	4a67      	ldr	r2, [pc, #412]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800634a:	4013      	ands	r3, r2
 800634c:	0019      	movs	r1, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006352:	4b63      	ldr	r3, [pc, #396]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006354:	430a      	orrs	r2, r1
 8006356:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006358:	e00c      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800635a:	2312      	movs	r3, #18
 800635c:	18fb      	adds	r3, r7, r3
 800635e:	2213      	movs	r2, #19
 8006360:	18ba      	adds	r2, r7, r2
 8006362:	7812      	ldrb	r2, [r2, #0]
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	e005      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006368:	2312      	movs	r3, #18
 800636a:	18fb      	adds	r3, r7, r3
 800636c:	2213      	movs	r2, #19
 800636e:	18ba      	adds	r2, r7, r2
 8006370:	7812      	ldrb	r2, [r2, #0]
 8006372:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006374:	2311      	movs	r3, #17
 8006376:	18fb      	adds	r3, r7, r3
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d105      	bne.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800637e:	4b58      	ldr	r3, [pc, #352]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006380:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006382:	4b57      	ldr	r3, [pc, #348]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006384:	495b      	ldr	r1, [pc, #364]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006386:	400a      	ands	r2, r1
 8006388:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2201      	movs	r2, #1
 8006390:	4013      	ands	r3, r2
 8006392:	d009      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006394:	4b52      	ldr	r3, [pc, #328]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006398:	2203      	movs	r2, #3
 800639a:	4393      	bics	r3, r2
 800639c:	0019      	movs	r1, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	4b4f      	ldr	r3, [pc, #316]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80063a4:	430a      	orrs	r2, r1
 80063a6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2210      	movs	r2, #16
 80063ae:	4013      	ands	r3, r2
 80063b0:	d009      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063b2:	4b4b      	ldr	r3, [pc, #300]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80063b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b6:	4a50      	ldr	r2, [pc, #320]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80063b8:	4013      	ands	r3, r2
 80063ba:	0019      	movs	r1, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	4b47      	ldr	r3, [pc, #284]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80063c2:	430a      	orrs	r2, r1
 80063c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	2380      	movs	r3, #128	@ 0x80
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4013      	ands	r3, r2
 80063d0:	d009      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063d2:	4b43      	ldr	r3, [pc, #268]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80063d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d6:	4a49      	ldr	r2, [pc, #292]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80063d8:	4013      	ands	r3, r2
 80063da:	0019      	movs	r1, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	695a      	ldr	r2, [r3, #20]
 80063e0:	4b3f      	ldr	r3, [pc, #252]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80063e2:	430a      	orrs	r2, r1
 80063e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	2380      	movs	r3, #128	@ 0x80
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	4013      	ands	r3, r2
 80063f0:	d009      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063f2:	4b3b      	ldr	r3, [pc, #236]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80063f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063f6:	4a42      	ldr	r2, [pc, #264]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	0019      	movs	r1, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	699a      	ldr	r2, [r3, #24]
 8006400:	4b37      	ldr	r3, [pc, #220]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006402:	430a      	orrs	r2, r1
 8006404:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2220      	movs	r2, #32
 800640c:	4013      	ands	r3, r2
 800640e:	d009      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006410:	4b33      	ldr	r3, [pc, #204]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006414:	4a3b      	ldr	r2, [pc, #236]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006416:	4013      	ands	r3, r2
 8006418:	0019      	movs	r1, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	4b30      	ldr	r3, [pc, #192]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006420:	430a      	orrs	r2, r1
 8006422:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	2380      	movs	r3, #128	@ 0x80
 800642a:	01db      	lsls	r3, r3, #7
 800642c:	4013      	ands	r3, r2
 800642e:	d015      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006430:	4b2b      	ldr	r3, [pc, #172]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	0899      	lsrs	r1, r3, #2
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	69da      	ldr	r2, [r3, #28]
 800643c:	4b28      	ldr	r3, [pc, #160]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800643e:	430a      	orrs	r2, r1
 8006440:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	69da      	ldr	r2, [r3, #28]
 8006446:	2380      	movs	r3, #128	@ 0x80
 8006448:	05db      	lsls	r3, r3, #23
 800644a:	429a      	cmp	r2, r3
 800644c:	d106      	bne.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800644e:	4b24      	ldr	r3, [pc, #144]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	4b23      	ldr	r3, [pc, #140]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006454:	2180      	movs	r1, #128	@ 0x80
 8006456:	0249      	lsls	r1, r1, #9
 8006458:	430a      	orrs	r2, r1
 800645a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	2380      	movs	r3, #128	@ 0x80
 8006462:	039b      	lsls	r3, r3, #14
 8006464:	4013      	ands	r3, r2
 8006466:	d016      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006468:	4b1d      	ldr	r3, [pc, #116]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800646a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800646c:	4a26      	ldr	r2, [pc, #152]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800646e:	4013      	ands	r3, r2
 8006470:	0019      	movs	r1, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1a      	ldr	r2, [r3, #32]
 8006476:	4b1a      	ldr	r3, [pc, #104]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006478:	430a      	orrs	r2, r1
 800647a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a1a      	ldr	r2, [r3, #32]
 8006480:	2380      	movs	r3, #128	@ 0x80
 8006482:	03db      	lsls	r3, r3, #15
 8006484:	429a      	cmp	r2, r3
 8006486:	d106      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006488:	4b15      	ldr	r3, [pc, #84]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	4b14      	ldr	r3, [pc, #80]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800648e:	2180      	movs	r1, #128	@ 0x80
 8006490:	0449      	lsls	r1, r1, #17
 8006492:	430a      	orrs	r2, r1
 8006494:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	2380      	movs	r3, #128	@ 0x80
 800649c:	011b      	lsls	r3, r3, #4
 800649e:	4013      	ands	r3, r2
 80064a0:	d016      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80064a2:	4b0f      	ldr	r3, [pc, #60]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80064a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a6:	4a19      	ldr	r2, [pc, #100]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80064a8:	4013      	ands	r3, r2
 80064aa:	0019      	movs	r1, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691a      	ldr	r2, [r3, #16]
 80064b0:	4b0b      	ldr	r3, [pc, #44]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80064b2:	430a      	orrs	r2, r1
 80064b4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	2380      	movs	r3, #128	@ 0x80
 80064bc:	01db      	lsls	r3, r3, #7
 80064be:	429a      	cmp	r2, r3
 80064c0:	d106      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80064c2:	4b07      	ldr	r3, [pc, #28]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	4b06      	ldr	r3, [pc, #24]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80064c8:	2180      	movs	r1, #128	@ 0x80
 80064ca:	0249      	lsls	r1, r1, #9
 80064cc:	430a      	orrs	r2, r1
 80064ce:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80064d0:	2312      	movs	r3, #18
 80064d2:	18fb      	adds	r3, r7, r3
 80064d4:	781b      	ldrb	r3, [r3, #0]
}
 80064d6:	0018      	movs	r0, r3
 80064d8:	46bd      	mov	sp, r7
 80064da:	b006      	add	sp, #24
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	46c0      	nop			@ (mov r8, r8)
 80064e0:	40021000 	.word	0x40021000
 80064e4:	40007000 	.word	0x40007000
 80064e8:	fffffcff 	.word	0xfffffcff
 80064ec:	fffeffff 	.word	0xfffeffff
 80064f0:	00001388 	.word	0x00001388
 80064f4:	efffffff 	.word	0xefffffff
 80064f8:	fffff3ff 	.word	0xfffff3ff
 80064fc:	fff3ffff 	.word	0xfff3ffff
 8006500:	ffcfffff 	.word	0xffcfffff
 8006504:	ffffcfff 	.word	0xffffcfff
 8006508:	ffbfffff 	.word	0xffbfffff
 800650c:	ffff3fff 	.word	0xffff3fff

08006510 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	2380      	movs	r3, #128	@ 0x80
 8006520:	029b      	lsls	r3, r3, #10
 8006522:	429a      	cmp	r2, r3
 8006524:	d136      	bne.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006526:	4bcd      	ldr	r3, [pc, #820]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006528:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800652a:	23c0      	movs	r3, #192	@ 0xc0
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4013      	ands	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006532:	4bca      	ldr	r3, [pc, #808]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006536:	2202      	movs	r2, #2
 8006538:	4013      	ands	r3, r2
 800653a:	2b02      	cmp	r3, #2
 800653c:	d108      	bne.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	2380      	movs	r3, #128	@ 0x80
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	429a      	cmp	r2, r3
 8006546:	d103      	bne.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8006548:	2380      	movs	r3, #128	@ 0x80
 800654a:	021b      	lsls	r3, r3, #8
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	e26b      	b.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006550:	4bc2      	ldr	r3, [pc, #776]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006554:	2202      	movs	r2, #2
 8006556:	4013      	ands	r3, r2
 8006558:	2b02      	cmp	r3, #2
 800655a:	d108      	bne.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	2380      	movs	r3, #128	@ 0x80
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	429a      	cmp	r2, r3
 8006564:	d103      	bne.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8006566:	23fa      	movs	r3, #250	@ 0xfa
 8006568:	01db      	lsls	r3, r3, #7
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	e25c      	b.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800656e:	4bbb      	ldr	r3, [pc, #748]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	2380      	movs	r3, #128	@ 0x80
 8006574:	029b      	lsls	r3, r3, #10
 8006576:	401a      	ands	r2, r3
 8006578:	2380      	movs	r3, #128	@ 0x80
 800657a:	029b      	lsls	r3, r3, #10
 800657c:	429a      	cmp	r2, r3
 800657e:	d000      	beq.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8006580:	e252      	b.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	23c0      	movs	r3, #192	@ 0xc0
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	429a      	cmp	r2, r3
 800658a:	d000      	beq.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 800658c:	e24c      	b.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    {
      frequency = HSE_VALUE / 32U;
 800658e:	4bb4      	ldr	r3, [pc, #720]	@ (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	e249      	b.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8006594:	4bb1      	ldr	r3, [pc, #708]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	2203      	movs	r2, #3
 800659a:	4013      	ands	r3, r2
 800659c:	2b02      	cmp	r3, #2
 800659e:	d102      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 80065a0:	4bb0      	ldr	r3, [pc, #704]	@ (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80065a2:	613b      	str	r3, [r7, #16]
 80065a4:	e00a      	b.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 80065a6:	4bad      	ldr	r3, [pc, #692]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	2203      	movs	r2, #3
 80065ac:	4013      	ands	r3, r2
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d102      	bne.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 80065b2:	4bac      	ldr	r3, [pc, #688]	@ (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80065b4:	613b      	str	r3, [r7, #16]
 80065b6:	e001      	b.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80065bc:	4ba7      	ldr	r3, [pc, #668]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	091b      	lsrs	r3, r3, #4
 80065c2:	2207      	movs	r2, #7
 80065c4:	4013      	ands	r3, r2
 80065c6:	3301      	adds	r3, #1
 80065c8:	0019      	movs	r1, r3
 80065ca:	6938      	ldr	r0, [r7, #16]
 80065cc:	f7f9 fd9a 	bl	8000104 <__udivsi3>
 80065d0:	0003      	movs	r3, r0
 80065d2:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	2380      	movs	r3, #128	@ 0x80
 80065d8:	039b      	lsls	r3, r3, #14
 80065da:	429a      	cmp	r2, r3
 80065dc:	d100      	bne.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 80065de:	e1e3      	b.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	2380      	movs	r3, #128	@ 0x80
 80065e4:	039b      	lsls	r3, r3, #14
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d900      	bls.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80065ea:	e20c      	b.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	2380      	movs	r3, #128	@ 0x80
 80065f0:	01db      	lsls	r3, r3, #7
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d100      	bne.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80065f6:	e0a5      	b.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	2380      	movs	r3, #128	@ 0x80
 80065fc:	01db      	lsls	r3, r3, #7
 80065fe:	429a      	cmp	r2, r3
 8006600:	d900      	bls.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006602:	e200      	b.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	2380      	movs	r3, #128	@ 0x80
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	429a      	cmp	r2, r3
 800660c:	d100      	bne.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800660e:	e0fc      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	2380      	movs	r3, #128	@ 0x80
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	429a      	cmp	r2, r3
 8006618:	d900      	bls.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800661a:	e1f4      	b.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	2380      	movs	r3, #128	@ 0x80
 8006620:	00db      	lsls	r3, r3, #3
 8006622:	429a      	cmp	r2, r3
 8006624:	d100      	bne.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8006626:	e181      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	2380      	movs	r3, #128	@ 0x80
 800662c:	00db      	lsls	r3, r3, #3
 800662e:	429a      	cmp	r2, r3
 8006630:	d900      	bls.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006632:	e1e8      	b.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	2380      	movs	r3, #128	@ 0x80
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	429a      	cmp	r2, r3
 800663c:	d100      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800663e:	e135      	b.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	2380      	movs	r3, #128	@ 0x80
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	429a      	cmp	r2, r3
 8006648:	d900      	bls.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800664a:	e1dc      	b.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b20      	cmp	r3, #32
 8006650:	d100      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8006652:	e0af      	b.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b20      	cmp	r3, #32
 8006658:	d900      	bls.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800665a:	e1d4      	b.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d003      	beq.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b10      	cmp	r3, #16
 8006666:	d033      	beq.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8006668:	e1cd      	b.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800666a:	4b7c      	ldr	r3, [pc, #496]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800666c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800666e:	2203      	movs	r2, #3
 8006670:	4013      	ands	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d104      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
          frequency = HAL_RCC_GetPCLK1Freq();
 800667a:	f7ff fdb9 	bl	80061f0 <HAL_RCC_GetPCLK1Freq>
 800667e:	0003      	movs	r3, r0
 8006680:	617b      	str	r3, [r7, #20]
        break;
 8006682:	e1c2      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d104      	bne.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          frequency = HAL_RCC_GetSysClockFreq();
 800668a:	f7ff fd27 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 800668e:	0003      	movs	r3, r0
 8006690:	617b      	str	r3, [r7, #20]
        break;
 8006692:	e1ba      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006694:	4b71      	ldr	r3, [pc, #452]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	2380      	movs	r3, #128	@ 0x80
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	401a      	ands	r2, r3
 800669e:	2380      	movs	r3, #128	@ 0x80
 80066a0:	00db      	lsls	r3, r3, #3
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d105      	bne.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d102      	bne.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = HSI_VALUE;
 80066ac:	4b6d      	ldr	r3, [pc, #436]	@ (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80066ae:	617b      	str	r3, [r7, #20]
        break;
 80066b0:	e1ab      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80066b2:	4b6a      	ldr	r3, [pc, #424]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80066b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b6:	2202      	movs	r2, #2
 80066b8:	4013      	ands	r3, r2
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d000      	beq.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 80066be:	e1a4      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d000      	beq.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80066c6:	e1a0      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          frequency = LSE_VALUE;
 80066c8:	2380      	movs	r3, #128	@ 0x80
 80066ca:	021b      	lsls	r3, r3, #8
 80066cc:	617b      	str	r3, [r7, #20]
        break;
 80066ce:	e19c      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80066d0:	4b62      	ldr	r3, [pc, #392]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80066d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066d4:	23c0      	movs	r3, #192	@ 0xc0
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	4013      	ands	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d104      	bne.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066e2:	f7ff fd85 	bl	80061f0 <HAL_RCC_GetPCLK1Freq>
 80066e6:	0003      	movs	r3, r0
 80066e8:	617b      	str	r3, [r7, #20]
        break;
 80066ea:	e190      	b.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	2380      	movs	r3, #128	@ 0x80
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d104      	bne.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80066f6:	f7ff fcf1 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 80066fa:	0003      	movs	r3, r0
 80066fc:	617b      	str	r3, [r7, #20]
        break;
 80066fe:	e186      	b.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006700:	4b56      	ldr	r3, [pc, #344]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	2380      	movs	r3, #128	@ 0x80
 8006706:	00db      	lsls	r3, r3, #3
 8006708:	401a      	ands	r2, r3
 800670a:	2380      	movs	r3, #128	@ 0x80
 800670c:	00db      	lsls	r3, r3, #3
 800670e:	429a      	cmp	r2, r3
 8006710:	d107      	bne.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	2380      	movs	r3, #128	@ 0x80
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	429a      	cmp	r2, r3
 800671a:	d102      	bne.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = HSI_VALUE;
 800671c:	4b51      	ldr	r3, [pc, #324]	@ (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800671e:	617b      	str	r3, [r7, #20]
        break;
 8006720:	e175      	b.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006722:	4b4e      	ldr	r3, [pc, #312]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006726:	2202      	movs	r2, #2
 8006728:	4013      	ands	r3, r2
 800672a:	2b02      	cmp	r3, #2
 800672c:	d000      	beq.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800672e:	e16e      	b.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	23c0      	movs	r3, #192	@ 0xc0
 8006734:	011b      	lsls	r3, r3, #4
 8006736:	429a      	cmp	r2, r3
 8006738:	d000      	beq.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800673a:	e168      	b.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          frequency = LSE_VALUE;
 800673c:	2380      	movs	r3, #128	@ 0x80
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	617b      	str	r3, [r7, #20]
        break;
 8006742:	e164      	b.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006744:	4b45      	ldr	r3, [pc, #276]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006748:	0f9b      	lsrs	r3, r3, #30
 800674a:	079b      	lsls	r3, r3, #30
 800674c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d104      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006754:	f7ff fcc2 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 8006758:	0003      	movs	r3, r0
 800675a:	617b      	str	r3, [r7, #20]
        break;
 800675c:	e159      	b.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	2380      	movs	r3, #128	@ 0x80
 8006762:	061b      	lsls	r3, r3, #24
 8006764:	429a      	cmp	r2, r3
 8006766:	d102      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          frequency = HSI_VALUE;
 8006768:	4b3e      	ldr	r3, [pc, #248]	@ (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800676a:	617b      	str	r3, [r7, #20]
        break;
 800676c:	e151      	b.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	2380      	movs	r3, #128	@ 0x80
 8006772:	05db      	lsls	r3, r3, #23
 8006774:	429a      	cmp	r2, r3
 8006776:	d000      	beq.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006778:	e14b      	b.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800677a:	4b38      	ldr	r3, [pc, #224]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	2380      	movs	r3, #128	@ 0x80
 8006780:	025b      	lsls	r3, r3, #9
 8006782:	4013      	ands	r3, r2
 8006784:	d100      	bne.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 8006786:	e144      	b.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006788:	4b34      	ldr	r3, [pc, #208]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	0a1b      	lsrs	r3, r3, #8
 800678e:	227f      	movs	r2, #127	@ 0x7f
 8006790:	4013      	ands	r3, r2
 8006792:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	435a      	muls	r2, r3
 800679a:	4b30      	ldr	r3, [pc, #192]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	0c5b      	lsrs	r3, r3, #17
 80067a0:	211f      	movs	r1, #31
 80067a2:	400b      	ands	r3, r1
 80067a4:	3301      	adds	r3, #1
 80067a6:	0019      	movs	r1, r3
 80067a8:	0010      	movs	r0, r2
 80067aa:	f7f9 fcab 	bl	8000104 <__udivsi3>
 80067ae:	0003      	movs	r3, r0
 80067b0:	617b      	str	r3, [r7, #20]
        break;
 80067b2:	e12e      	b.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80067b4:	4b29      	ldr	r3, [pc, #164]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80067b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067b8:	23c0      	movs	r3, #192	@ 0xc0
 80067ba:	019b      	lsls	r3, r3, #6
 80067bc:	4013      	ands	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d104      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067c6:	f7ff fd13 	bl	80061f0 <HAL_RCC_GetPCLK1Freq>
 80067ca:	0003      	movs	r3, r0
 80067cc:	617b      	str	r3, [r7, #20]
        break;
 80067ce:	e122      	b.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	2380      	movs	r3, #128	@ 0x80
 80067d4:	015b      	lsls	r3, r3, #5
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d104      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
          frequency = HAL_RCC_GetSysClockFreq();
 80067da:	f7ff fc7f 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 80067de:	0003      	movs	r3, r0
 80067e0:	617b      	str	r3, [r7, #20]
        break;
 80067e2:	e118      	b.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80067e4:	4b1d      	ldr	r3, [pc, #116]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	2380      	movs	r3, #128	@ 0x80
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	401a      	ands	r2, r3
 80067ee:	2380      	movs	r3, #128	@ 0x80
 80067f0:	00db      	lsls	r3, r3, #3
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d000      	beq.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80067f6:	e10e      	b.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	2380      	movs	r3, #128	@ 0x80
 80067fc:	019b      	lsls	r3, r3, #6
 80067fe:	429a      	cmp	r2, r3
 8006800:	d000      	beq.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8006802:	e108      	b.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          frequency = HSI_VALUE;
 8006804:	4b17      	ldr	r3, [pc, #92]	@ (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006806:	617b      	str	r3, [r7, #20]
        break;
 8006808:	e105      	b.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 800680a:	4b14      	ldr	r3, [pc, #80]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800680c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800680e:	23c0      	movs	r3, #192	@ 0xc0
 8006810:	021b      	lsls	r3, r3, #8
 8006812:	4013      	ands	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	2380      	movs	r3, #128	@ 0x80
 800681a:	01db      	lsls	r3, r3, #7
 800681c:	429a      	cmp	r2, r3
 800681e:	d123      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8006820:	4b0e      	ldr	r3, [pc, #56]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	2380      	movs	r3, #128	@ 0x80
 8006826:	025b      	lsls	r3, r3, #9
 8006828:	4013      	ands	r3, r2
 800682a:	d100      	bne.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800682c:	e0f5      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800682e:	4b0b      	ldr	r3, [pc, #44]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	0a1b      	lsrs	r3, r3, #8
 8006834:	227f      	movs	r2, #127	@ 0x7f
 8006836:	4013      	ands	r3, r2
 8006838:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	435a      	muls	r2, r3
 8006840:	4b06      	ldr	r3, [pc, #24]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	0c5b      	lsrs	r3, r3, #17
 8006846:	211f      	movs	r1, #31
 8006848:	400b      	ands	r3, r1
 800684a:	3301      	adds	r3, #1
 800684c:	0019      	movs	r1, r3
 800684e:	0010      	movs	r0, r2
 8006850:	f7f9 fc58 	bl	8000104 <__udivsi3>
 8006854:	0003      	movs	r3, r0
 8006856:	617b      	str	r3, [r7, #20]
        break;
 8006858:	e0df      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800685a:	46c0      	nop			@ (mov r8, r8)
 800685c:	40021000 	.word	0x40021000
 8006860:	0007a120 	.word	0x0007a120
 8006864:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d104      	bne.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          frequency = HAL_RCC_GetSysClockFreq();
 800686e:	f7ff fc35 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 8006872:	0003      	movs	r3, r0
 8006874:	617b      	str	r3, [r7, #20]
        break;
 8006876:	e0d0      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8006878:	4b6e      	ldr	r3, [pc, #440]	@ (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	2380      	movs	r3, #128	@ 0x80
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	401a      	ands	r2, r3
 8006882:	2380      	movs	r3, #128	@ 0x80
 8006884:	00db      	lsls	r3, r3, #3
 8006886:	429a      	cmp	r2, r3
 8006888:	d107      	bne.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	2380      	movs	r3, #128	@ 0x80
 800688e:	021b      	lsls	r3, r3, #8
 8006890:	429a      	cmp	r2, r3
 8006892:	d102      	bne.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
          frequency = HSI_VALUE;
 8006894:	4b68      	ldr	r3, [pc, #416]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006896:	617b      	str	r3, [r7, #20]
        break;
 8006898:	e0bf      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	23c0      	movs	r3, #192	@ 0xc0
 800689e:	021b      	lsls	r3, r3, #8
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d000      	beq.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80068a4:	e0b9      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 80068a6:	4b65      	ldr	r3, [pc, #404]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80068a8:	617b      	str	r3, [r7, #20]
        break;
 80068aa:	e0b6      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80068ac:	4b61      	ldr	r3, [pc, #388]	@ (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068b0:	23c0      	movs	r3, #192	@ 0xc0
 80068b2:	031b      	lsls	r3, r3, #12
 80068b4:	4013      	ands	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d104      	bne.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068be:	f7ff fc97 	bl	80061f0 <HAL_RCC_GetPCLK1Freq>
 80068c2:	0003      	movs	r3, r0
 80068c4:	617b      	str	r3, [r7, #20]
        break;
 80068c6:	e0aa      	b.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80068c8:	4b5a      	ldr	r3, [pc, #360]	@ (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068cc:	2202      	movs	r2, #2
 80068ce:	4013      	ands	r3, r2
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d108      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	2380      	movs	r3, #128	@ 0x80
 80068d8:	02db      	lsls	r3, r3, #11
 80068da:	429a      	cmp	r2, r3
 80068dc:	d103      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = LSI_VALUE;
 80068de:	23fa      	movs	r3, #250	@ 0xfa
 80068e0:	01db      	lsls	r3, r3, #7
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	e021      	b.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80068e6:	4b53      	ldr	r3, [pc, #332]	@ (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	2380      	movs	r3, #128	@ 0x80
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	401a      	ands	r2, r3
 80068f0:	2380      	movs	r3, #128	@ 0x80
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d107      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	2380      	movs	r3, #128	@ 0x80
 80068fc:	031b      	lsls	r3, r3, #12
 80068fe:	429a      	cmp	r2, r3
 8006900:	d102      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          frequency = HSI_VALUE;
 8006902:	4b4d      	ldr	r3, [pc, #308]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	e010      	b.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006908:	4b4a      	ldr	r3, [pc, #296]	@ (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800690a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800690c:	2202      	movs	r2, #2
 800690e:	4013      	ands	r3, r2
 8006910:	2b02      	cmp	r3, #2
 8006912:	d000      	beq.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 8006914:	e083      	b.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	23c0      	movs	r3, #192	@ 0xc0
 800691a:	031b      	lsls	r3, r3, #12
 800691c:	429a      	cmp	r2, r3
 800691e:	d000      	beq.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8006920:	e07d      	b.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
          frequency = LSE_VALUE;
 8006922:	2380      	movs	r3, #128	@ 0x80
 8006924:	021b      	lsls	r3, r3, #8
 8006926:	617b      	str	r3, [r7, #20]
        break;
 8006928:	e079      	b.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800692a:	e078      	b.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800692c:	4b41      	ldr	r3, [pc, #260]	@ (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800692e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006930:	23c0      	movs	r3, #192	@ 0xc0
 8006932:	039b      	lsls	r3, r3, #14
 8006934:	4013      	ands	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d104      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          frequency = HAL_RCC_GetPCLK1Freq();
 800693e:	f7ff fc57 	bl	80061f0 <HAL_RCC_GetPCLK1Freq>
 8006942:	0003      	movs	r3, r0
 8006944:	617b      	str	r3, [r7, #20]
        break;
 8006946:	e06c      	b.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006948:	4b3a      	ldr	r3, [pc, #232]	@ (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800694a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800694c:	2202      	movs	r2, #2
 800694e:	4013      	ands	r3, r2
 8006950:	2b02      	cmp	r3, #2
 8006952:	d108      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	2380      	movs	r3, #128	@ 0x80
 8006958:	035b      	lsls	r3, r3, #13
 800695a:	429a      	cmp	r2, r3
 800695c:	d103      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          frequency = LSI_VALUE;
 800695e:	23fa      	movs	r3, #250	@ 0xfa
 8006960:	01db      	lsls	r3, r3, #7
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	e01f      	b.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006966:	4b33      	ldr	r3, [pc, #204]	@ (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	2380      	movs	r3, #128	@ 0x80
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	401a      	ands	r2, r3
 8006970:	2380      	movs	r3, #128	@ 0x80
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	429a      	cmp	r2, r3
 8006976:	d107      	bne.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	2380      	movs	r3, #128	@ 0x80
 800697c:	039b      	lsls	r3, r3, #14
 800697e:	429a      	cmp	r2, r3
 8006980:	d102      	bne.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HSI_VALUE;
 8006982:	4b2d      	ldr	r3, [pc, #180]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006984:	617b      	str	r3, [r7, #20]
 8006986:	e00e      	b.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006988:	4b2a      	ldr	r3, [pc, #168]	@ (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800698a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800698c:	2202      	movs	r2, #2
 800698e:	4013      	ands	r3, r2
 8006990:	2b02      	cmp	r3, #2
 8006992:	d146      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	23c0      	movs	r3, #192	@ 0xc0
 8006998:	039b      	lsls	r3, r3, #14
 800699a:	429a      	cmp	r2, r3
 800699c:	d141      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          frequency = LSE_VALUE;
 800699e:	2380      	movs	r3, #128	@ 0x80
 80069a0:	021b      	lsls	r3, r3, #8
 80069a2:	617b      	str	r3, [r7, #20]
        break;
 80069a4:	e03d      	b.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 80069a6:	e03c      	b.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 80069a8:	4b22      	ldr	r3, [pc, #136]	@ (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80069aa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80069ac:	2380      	movs	r3, #128	@ 0x80
 80069ae:	03db      	lsls	r3, r3, #15
 80069b0:	4013      	ands	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	2380      	movs	r3, #128	@ 0x80
 80069b8:	03db      	lsls	r3, r3, #15
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d11b      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80069be:	4b1d      	ldr	r3, [pc, #116]	@ (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	2380      	movs	r3, #128	@ 0x80
 80069c4:	045b      	lsls	r3, r3, #17
 80069c6:	4013      	ands	r3, r2
 80069c8:	d02d      	beq.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80069ca:	4b1a      	ldr	r3, [pc, #104]	@ (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	0a1b      	lsrs	r3, r3, #8
 80069d0:	227f      	movs	r2, #127	@ 0x7f
 80069d2:	4013      	ands	r3, r2
 80069d4:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	435a      	muls	r2, r3
 80069dc:	4b15      	ldr	r3, [pc, #84]	@ (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	0e5b      	lsrs	r3, r3, #25
 80069e2:	2107      	movs	r1, #7
 80069e4:	400b      	ands	r3, r1
 80069e6:	3301      	adds	r3, #1
 80069e8:	0019      	movs	r1, r3
 80069ea:	0010      	movs	r0, r2
 80069ec:	f7f9 fb8a 	bl	8000104 <__udivsi3>
 80069f0:	0003      	movs	r3, r0
 80069f2:	617b      	str	r3, [r7, #20]
        break;
 80069f4:	e017      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d114      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069fc:	f7ff fbf8 	bl	80061f0 <HAL_RCC_GetPCLK1Freq>
 8006a00:	0003      	movs	r3, r0
 8006a02:	617b      	str	r3, [r7, #20]
        break;
 8006a04:	e00f      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        break;
 8006a06:	46c0      	nop			@ (mov r8, r8)
 8006a08:	e00e      	b.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006a0a:	46c0      	nop			@ (mov r8, r8)
 8006a0c:	e00c      	b.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006a0e:	46c0      	nop			@ (mov r8, r8)
 8006a10:	e00a      	b.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006a12:	46c0      	nop			@ (mov r8, r8)
 8006a14:	e008      	b.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006a16:	46c0      	nop			@ (mov r8, r8)
 8006a18:	e006      	b.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006a1a:	46c0      	nop			@ (mov r8, r8)
 8006a1c:	e004      	b.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006a1e:	46c0      	nop			@ (mov r8, r8)
 8006a20:	e002      	b.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006a22:	46c0      	nop			@ (mov r8, r8)
 8006a24:	e000      	b.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006a26:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return (frequency);
 8006a28:	697b      	ldr	r3, [r7, #20]
}
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	b006      	add	sp, #24
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	46c0      	nop			@ (mov r8, r8)
 8006a34:	40021000 	.word	0x40021000
 8006a38:	00f42400 	.word	0x00f42400
 8006a3c:	00bb8000 	.word	0x00bb8000

08006a40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a40:	b5b0      	push	{r4, r5, r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a48:	230f      	movs	r3, #15
 8006a4a:	18fb      	adds	r3, r7, r3
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d100      	bne.n	8006a58 <HAL_RTC_Init+0x18>
 8006a56:	e08c      	b.n	8006b72 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2229      	movs	r2, #41	@ 0x29
 8006a5c:	5c9b      	ldrb	r3, [r3, r2]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10b      	bne.n	8006a7c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2228      	movs	r2, #40	@ 0x28
 8006a68:	2100      	movs	r1, #0
 8006a6a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2288      	movs	r2, #136	@ 0x88
 8006a70:	0212      	lsls	r2, r2, #8
 8006a72:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	0018      	movs	r0, r3
 8006a78:	f7fc fd32 	bl	80034e0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2229      	movs	r2, #41	@ 0x29
 8006a80:	2102      	movs	r1, #2
 8006a82:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	2210      	movs	r2, #16
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	2b10      	cmp	r3, #16
 8006a90:	d062      	beq.n	8006b58 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	22ca      	movs	r2, #202	@ 0xca
 8006a98:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2253      	movs	r2, #83	@ 0x53
 8006aa0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006aa2:	250f      	movs	r5, #15
 8006aa4:	197c      	adds	r4, r7, r5
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	f000 fc27 	bl	80072fc <RTC_EnterInitMode>
 8006aae:	0003      	movs	r3, r0
 8006ab0:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8006ab2:	0028      	movs	r0, r5
 8006ab4:	183b      	adds	r3, r7, r0
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d12c      	bne.n	8006b16 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	699a      	ldr	r2, [r3, #24]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	492e      	ldr	r1, [pc, #184]	@ (8006b80 <HAL_RTC_Init+0x140>)
 8006ac8:	400a      	ands	r2, r1
 8006aca:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6999      	ldr	r1, [r3, #24]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	431a      	orrs	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6912      	ldr	r2, [r2, #16]
 8006af2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6919      	ldr	r1, [r3, #16]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	041a      	lsls	r2, r3, #16
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006b08:	183c      	adds	r4, r7, r0
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f000 fc37 	bl	8007380 <RTC_ExitInitMode>
 8006b12:	0003      	movs	r3, r0
 8006b14:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8006b16:	230f      	movs	r3, #15
 8006b18:	18fb      	adds	r3, r7, r3
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d116      	bne.n	8006b4e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699a      	ldr	r2, [r3, #24]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	00d2      	lsls	r2, r2, #3
 8006b2c:	08d2      	lsrs	r2, r2, #3
 8006b2e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6999      	ldr	r1, [r3, #24]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	22ff      	movs	r2, #255	@ 0xff
 8006b54:	625a      	str	r2, [r3, #36]	@ 0x24
 8006b56:	e003      	b.n	8006b60 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006b58:	230f      	movs	r3, #15
 8006b5a:	18fb      	adds	r3, r7, r3
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8006b60:	230f      	movs	r3, #15
 8006b62:	18fb      	adds	r3, r7, r3
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d103      	bne.n	8006b72 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2229      	movs	r2, #41	@ 0x29
 8006b6e:	2101      	movs	r1, #1
 8006b70:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8006b72:	230f      	movs	r3, #15
 8006b74:	18fb      	adds	r3, r7, r3
 8006b76:	781b      	ldrb	r3, [r3, #0]
}
 8006b78:	0018      	movs	r0, r3
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	b004      	add	sp, #16
 8006b7e:	bdb0      	pop	{r4, r5, r7, pc}
 8006b80:	fb8fffbf 	.word	0xfb8fffbf

08006b84 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b84:	b5b0      	push	{r4, r5, r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2228      	movs	r2, #40	@ 0x28
 8006b94:	5c9b      	ldrb	r3, [r3, r2]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d101      	bne.n	8006b9e <HAL_RTC_SetTime+0x1a>
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	e092      	b.n	8006cc4 <HAL_RTC_SetTime+0x140>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2228      	movs	r2, #40	@ 0x28
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2229      	movs	r2, #41	@ 0x29
 8006baa:	2102      	movs	r1, #2
 8006bac:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	22ca      	movs	r2, #202	@ 0xca
 8006bb4:	625a      	str	r2, [r3, #36]	@ 0x24
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2253      	movs	r2, #83	@ 0x53
 8006bbc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006bbe:	2513      	movs	r5, #19
 8006bc0:	197c      	adds	r4, r7, r5
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	0018      	movs	r0, r3
 8006bc6:	f000 fb99 	bl	80072fc <RTC_EnterInitMode>
 8006bca:	0003      	movs	r3, r0
 8006bcc:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8006bce:	197b      	adds	r3, r7, r5
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d162      	bne.n	8006c9c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d125      	bne.n	8006c28 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	2240      	movs	r2, #64	@ 0x40
 8006be4:	4013      	ands	r3, r2
 8006be6:	d102      	bne.n	8006bee <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2200      	movs	r2, #0
 8006bec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	0018      	movs	r0, r3
 8006bf4:	f000 fc08 	bl	8007408 <RTC_ByteToBcd2>
 8006bf8:	0003      	movs	r3, r0
 8006bfa:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	785b      	ldrb	r3, [r3, #1]
 8006c00:	0018      	movs	r0, r3
 8006c02:	f000 fc01 	bl	8007408 <RTC_ByteToBcd2>
 8006c06:	0003      	movs	r3, r0
 8006c08:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c0a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	789b      	ldrb	r3, [r3, #2]
 8006c10:	0018      	movs	r0, r3
 8006c12:	f000 fbf9 	bl	8007408 <RTC_ByteToBcd2>
 8006c16:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c18:	0022      	movs	r2, r4
 8006c1a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	78db      	ldrb	r3, [r3, #3]
 8006c20:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]
 8006c26:	e017      	b.n	8006c58 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	2240      	movs	r2, #64	@ 0x40
 8006c30:	4013      	ands	r3, r2
 8006c32:	d102      	bne.n	8006c3a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2200      	movs	r2, #0
 8006c38:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	785b      	ldrb	r3, [r3, #1]
 8006c44:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c46:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c4c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	78db      	ldrb	r3, [r3, #3]
 8006c52:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c54:	4313      	orrs	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	491b      	ldr	r1, [pc, #108]	@ (8006ccc <HAL_RTC_SetTime+0x148>)
 8006c60:	400a      	ands	r2, r1
 8006c62:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699a      	ldr	r2, [r3, #24]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4918      	ldr	r1, [pc, #96]	@ (8006cd0 <HAL_RTC_SetTime+0x14c>)
 8006c70:	400a      	ands	r2, r1
 8006c72:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6999      	ldr	r1, [r3, #24]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	431a      	orrs	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c8c:	2313      	movs	r3, #19
 8006c8e:	18fc      	adds	r4, r7, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	0018      	movs	r0, r3
 8006c94:	f000 fb74 	bl	8007380 <RTC_ExitInitMode>
 8006c98:	0003      	movs	r3, r0
 8006c9a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	22ff      	movs	r2, #255	@ 0xff
 8006ca2:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8006ca4:	2313      	movs	r3, #19
 8006ca6:	18fb      	adds	r3, r7, r3
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d103      	bne.n	8006cb6 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2229      	movs	r2, #41	@ 0x29
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2228      	movs	r2, #40	@ 0x28
 8006cba:	2100      	movs	r1, #0
 8006cbc:	5499      	strb	r1, [r3, r2]

  return status;
 8006cbe:	2313      	movs	r3, #19
 8006cc0:	18fb      	adds	r3, r7, r3
 8006cc2:	781b      	ldrb	r3, [r3, #0]
}
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	b006      	add	sp, #24
 8006cca:	bdb0      	pop	{r4, r5, r7, pc}
 8006ccc:	007f7f7f 	.word	0x007f7f7f
 8006cd0:	fffbffff 	.word	0xfffbffff

08006cd4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	045b      	lsls	r3, r3, #17
 8006cf2:	0c5a      	lsrs	r2, r3, #17
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a22      	ldr	r2, [pc, #136]	@ (8006d88 <HAL_RTC_GetTime+0xb4>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	0c1b      	lsrs	r3, r3, #16
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	223f      	movs	r2, #63	@ 0x3f
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	0a1b      	lsrs	r3, r3, #8
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	227f      	movs	r2, #127	@ 0x7f
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	227f      	movs	r2, #127	@ 0x7f
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	0d9b      	lsrs	r3, r3, #22
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2201      	movs	r2, #1
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d11a      	bne.n	8006d7e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	f000 fb83 	bl	8007458 <RTC_Bcd2ToByte>
 8006d52:	0003      	movs	r3, r0
 8006d54:	001a      	movs	r2, r3
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	785b      	ldrb	r3, [r3, #1]
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f000 fb7a 	bl	8007458 <RTC_Bcd2ToByte>
 8006d64:	0003      	movs	r3, r0
 8006d66:	001a      	movs	r2, r3
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	789b      	ldrb	r3, [r3, #2]
 8006d70:	0018      	movs	r0, r3
 8006d72:	f000 fb71 	bl	8007458 <RTC_Bcd2ToByte>
 8006d76:	0003      	movs	r3, r0
 8006d78:	001a      	movs	r2, r3
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	0018      	movs	r0, r3
 8006d82:	46bd      	mov	sp, r7
 8006d84:	b006      	add	sp, #24
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	007f7f7f 	.word	0x007f7f7f

08006d8c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	4a21      	ldr	r2, [pc, #132]	@ (8006e24 <HAL_RTC_GetDate+0x98>)
 8006da0:	4013      	ands	r3, r2
 8006da2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	0c1b      	lsrs	r3, r3, #16
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	0a1b      	lsrs	r3, r3, #8
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	221f      	movs	r2, #31
 8006db6:	4013      	ands	r3, r2
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	223f      	movs	r2, #63	@ 0x3f
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	0b5b      	lsrs	r3, r3, #13
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2207      	movs	r2, #7
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d11a      	bne.n	8006e18 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	78db      	ldrb	r3, [r3, #3]
 8006de6:	0018      	movs	r0, r3
 8006de8:	f000 fb36 	bl	8007458 <RTC_Bcd2ToByte>
 8006dec:	0003      	movs	r3, r0
 8006dee:	001a      	movs	r2, r3
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	785b      	ldrb	r3, [r3, #1]
 8006df8:	0018      	movs	r0, r3
 8006dfa:	f000 fb2d 	bl	8007458 <RTC_Bcd2ToByte>
 8006dfe:	0003      	movs	r3, r0
 8006e00:	001a      	movs	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	789b      	ldrb	r3, [r3, #2]
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f000 fb24 	bl	8007458 <RTC_Bcd2ToByte>
 8006e10:	0003      	movs	r3, r0
 8006e12:	001a      	movs	r2, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	b006      	add	sp, #24
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	46c0      	nop			@ (mov r8, r8)
 8006e24:	00ffff3f 	.word	0x00ffff3f

08006e28 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006e28:	b590      	push	{r4, r7, lr}
 8006e2a:	b089      	sub	sp, #36	@ 0x24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2228      	movs	r2, #40	@ 0x28
 8006e38:	5c9b      	ldrb	r3, [r3, r2]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d101      	bne.n	8006e42 <HAL_RTC_SetAlarm_IT+0x1a>
 8006e3e:	2302      	movs	r3, #2
 8006e40:	e127      	b.n	8007092 <HAL_RTC_SetAlarm_IT+0x26a>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2228      	movs	r2, #40	@ 0x28
 8006e46:	2101      	movs	r1, #1
 8006e48:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2229      	movs	r2, #41	@ 0x29
 8006e4e:	2102      	movs	r1, #2
 8006e50:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d136      	bne.n	8006ec6 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	2240      	movs	r2, #64	@ 0x40
 8006e60:	4013      	ands	r3, r2
 8006e62:	d102      	bne.n	8006e6a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2200      	movs	r2, #0
 8006e68:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	0018      	movs	r0, r3
 8006e70:	f000 faca 	bl	8007408 <RTC_ByteToBcd2>
 8006e74:	0003      	movs	r3, r0
 8006e76:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	785b      	ldrb	r3, [r3, #1]
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f000 fac3 	bl	8007408 <RTC_ByteToBcd2>
 8006e82:	0003      	movs	r3, r0
 8006e84:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e86:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	789b      	ldrb	r3, [r3, #2]
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	f000 fabb 	bl	8007408 <RTC_ByteToBcd2>
 8006e92:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e94:	0022      	movs	r2, r4
 8006e96:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	78db      	ldrb	r3, [r3, #3]
 8006e9c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	5c9b      	ldrb	r3, [r3, r2]
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f000 faad 	bl	8007408 <RTC_ByteToBcd2>
 8006eae:	0003      	movs	r3, r0
 8006eb0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006eb2:	0022      	movs	r2, r4
 8006eb4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006eba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	61fb      	str	r3, [r7, #28]
 8006ec4:	e022      	b.n	8006f0c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	2240      	movs	r2, #64	@ 0x40
 8006ece:	4013      	ands	r3, r2
 8006ed0:	d102      	bne.n	8006ed8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ee4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006eea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	78db      	ldrb	r3, [r3, #3]
 8006ef0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ef2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2120      	movs	r1, #32
 8006ef8:	5c5b      	ldrb	r3, [r3, r1]
 8006efa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006efc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f02:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	22ca      	movs	r2, #202	@ 0xca
 8006f1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2253      	movs	r2, #83	@ 0x53
 8006f26:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f2c:	2380      	movs	r3, #128	@ 0x80
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d14c      	bne.n	8006fce <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699a      	ldr	r2, [r3, #24]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4957      	ldr	r1, [pc, #348]	@ (800709c <HAL_RTC_SetAlarm_IT+0x274>)
 8006f40:	400a      	ands	r2, r1
 8006f42:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2101      	movs	r1, #1
 8006f50:	430a      	orrs	r2, r1
 8006f52:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8006f54:	f7fc fd82 	bl	8003a5c <HAL_GetTick>
 8006f58:	0003      	movs	r3, r0
 8006f5a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006f5c:	e016      	b.n	8006f8c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006f5e:	f7fc fd7d 	bl	8003a5c <HAL_GetTick>
 8006f62:	0002      	movs	r2, r0
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	1ad2      	subs	r2, r2, r3
 8006f68:	23fa      	movs	r3, #250	@ 0xfa
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d90d      	bls.n	8006f8c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	22ff      	movs	r2, #255	@ 0xff
 8006f76:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2229      	movs	r2, #41	@ 0x29
 8006f7c:	2103      	movs	r1, #3
 8006f7e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2228      	movs	r2, #40	@ 0x28
 8006f84:	2100      	movs	r1, #0
 8006f86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e082      	b.n	8007092 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	2201      	movs	r2, #1
 8006f94:	4013      	ands	r3, r2
 8006f96:	d0e2      	beq.n	8006f5e <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	69fa      	ldr	r2, [r7, #28]
 8006f9e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699a      	ldr	r2, [r3, #24]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2180      	movs	r1, #128	@ 0x80
 8006fb4:	0049      	lsls	r1, r1, #1
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	699a      	ldr	r2, [r3, #24]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2180      	movs	r1, #128	@ 0x80
 8006fc6:	0149      	lsls	r1, r1, #5
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	619a      	str	r2, [r3, #24]
 8006fcc:	e04b      	b.n	8007066 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	699a      	ldr	r2, [r3, #24]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4931      	ldr	r1, [pc, #196]	@ (80070a0 <HAL_RTC_SetAlarm_IT+0x278>)
 8006fda:	400a      	ands	r2, r1
 8006fdc:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2102      	movs	r1, #2
 8006fea:	430a      	orrs	r2, r1
 8006fec:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8006fee:	f7fc fd35 	bl	8003a5c <HAL_GetTick>
 8006ff2:	0003      	movs	r3, r0
 8006ff4:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006ff6:	e016      	b.n	8007026 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006ff8:	f7fc fd30 	bl	8003a5c <HAL_GetTick>
 8006ffc:	0002      	movs	r2, r0
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	1ad2      	subs	r2, r2, r3
 8007002:	23fa      	movs	r3, #250	@ 0xfa
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	429a      	cmp	r2, r3
 8007008:	d90d      	bls.n	8007026 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	22ff      	movs	r2, #255	@ 0xff
 8007010:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2229      	movs	r2, #41	@ 0x29
 8007016:	2103      	movs	r1, #3
 8007018:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2228      	movs	r2, #40	@ 0x28
 800701e:	2100      	movs	r1, #0
 8007020:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e035      	b.n	8007092 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	2202      	movs	r2, #2
 800702e:	4013      	ands	r3, r2
 8007030:	d0e2      	beq.n	8006ff8 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69fa      	ldr	r2, [r7, #28]
 8007038:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	699a      	ldr	r2, [r3, #24]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2180      	movs	r1, #128	@ 0x80
 800704e:	0089      	lsls	r1, r1, #2
 8007050:	430a      	orrs	r2, r1
 8007052:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	699a      	ldr	r2, [r3, #24]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2180      	movs	r1, #128	@ 0x80
 8007060:	0189      	lsls	r1, r1, #6
 8007062:	430a      	orrs	r2, r1
 8007064:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007066:	4a0f      	ldr	r2, [pc, #60]	@ (80070a4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8007068:	2380      	movs	r3, #128	@ 0x80
 800706a:	58d3      	ldr	r3, [r2, r3]
 800706c:	490d      	ldr	r1, [pc, #52]	@ (80070a4 <HAL_RTC_SetAlarm_IT+0x27c>)
 800706e:	2280      	movs	r2, #128	@ 0x80
 8007070:	0312      	lsls	r2, r2, #12
 8007072:	4313      	orrs	r3, r2
 8007074:	2280      	movs	r2, #128	@ 0x80
 8007076:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	22ff      	movs	r2, #255	@ 0xff
 800707e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2229      	movs	r2, #41	@ 0x29
 8007084:	2101      	movs	r1, #1
 8007086:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2228      	movs	r2, #40	@ 0x28
 800708c:	2100      	movs	r1, #0
 800708e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	0018      	movs	r0, r3
 8007094:	46bd      	mov	sp, r7
 8007096:	b009      	add	sp, #36	@ 0x24
 8007098:	bd90      	pop	{r4, r7, pc}
 800709a:	46c0      	nop			@ (mov r8, r8)
 800709c:	fffffeff 	.word	0xfffffeff
 80070a0:	fffffdff 	.word	0xfffffdff
 80070a4:	40021800 	.word	0x40021800

080070a8 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	2380      	movs	r3, #128	@ 0x80
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	429a      	cmp	r2, r3
 80070be:	d144      	bne.n	800714a <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2280      	movs	r2, #128	@ 0x80
 80070c4:	0052      	lsls	r2, r2, #1
 80070c6:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ce:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d6:	045b      	lsls	r3, r3, #17
 80070d8:	0c5b      	lsrs	r3, r3, #17
 80070da:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	0c1b      	lsrs	r3, r3, #16
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	223f      	movs	r2, #63	@ 0x3f
 80070e4:	4013      	ands	r3, r2
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	0a1b      	lsrs	r3, r3, #8
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	227f      	movs	r2, #127	@ 0x7f
 80070f4:	4013      	ands	r3, r2
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	227f      	movs	r2, #127	@ 0x7f
 8007102:	4013      	ands	r3, r2
 8007104:	b2da      	uxtb	r2, r3
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	0d9b      	lsrs	r3, r3, #22
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2201      	movs	r2, #1
 8007112:	4013      	ands	r3, r2
 8007114:	b2da      	uxtb	r2, r3
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	0e1b      	lsrs	r3, r3, #24
 8007124:	b2db      	uxtb	r3, r3
 8007126:	223f      	movs	r2, #63	@ 0x3f
 8007128:	4013      	ands	r3, r2
 800712a:	b2d9      	uxtb	r1, r3
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2220      	movs	r2, #32
 8007130:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	2380      	movs	r3, #128	@ 0x80
 8007136:	05db      	lsls	r3, r3, #23
 8007138:	401a      	ands	r2, r3
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	4a3b      	ldr	r2, [pc, #236]	@ (8007230 <HAL_RTC_GetAlarm+0x188>)
 8007142:	401a      	ands	r2, r3
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	615a      	str	r2, [r3, #20]
 8007148:	e043      	b.n	80071d2 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2280      	movs	r2, #128	@ 0x80
 800714e:	0092      	lsls	r2, r2, #2
 8007150:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007158:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007160:	045b      	lsls	r3, r3, #17
 8007162:	0c5b      	lsrs	r3, r3, #17
 8007164:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	0c1b      	lsrs	r3, r3, #16
 800716a:	b2db      	uxtb	r3, r3
 800716c:	223f      	movs	r2, #63	@ 0x3f
 800716e:	4013      	ands	r3, r2
 8007170:	b2da      	uxtb	r2, r3
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	0a1b      	lsrs	r3, r3, #8
 800717a:	b2db      	uxtb	r3, r3
 800717c:	227f      	movs	r2, #127	@ 0x7f
 800717e:	4013      	ands	r3, r2
 8007180:	b2da      	uxtb	r2, r3
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	b2db      	uxtb	r3, r3
 800718a:	227f      	movs	r2, #127	@ 0x7f
 800718c:	4013      	ands	r3, r2
 800718e:	b2da      	uxtb	r2, r3
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	0d9b      	lsrs	r3, r3, #22
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2201      	movs	r2, #1
 800719c:	4013      	ands	r3, r2
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	0e1b      	lsrs	r3, r3, #24
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	223f      	movs	r2, #63	@ 0x3f
 80071b2:	4013      	ands	r3, r2
 80071b4:	b2d9      	uxtb	r1, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2220      	movs	r2, #32
 80071ba:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	2380      	movs	r3, #128	@ 0x80
 80071c0:	05db      	lsls	r3, r3, #23
 80071c2:	401a      	ands	r2, r3
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	4a19      	ldr	r2, [pc, #100]	@ (8007230 <HAL_RTC_GetAlarm+0x188>)
 80071cc:	401a      	ands	r2, r3
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d125      	bne.n	8007224 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	0018      	movs	r0, r3
 80071de:	f000 f93b 	bl	8007458 <RTC_Bcd2ToByte>
 80071e2:	0003      	movs	r3, r0
 80071e4:	001a      	movs	r2, r3
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	785b      	ldrb	r3, [r3, #1]
 80071ee:	0018      	movs	r0, r3
 80071f0:	f000 f932 	bl	8007458 <RTC_Bcd2ToByte>
 80071f4:	0003      	movs	r3, r0
 80071f6:	001a      	movs	r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	789b      	ldrb	r3, [r3, #2]
 8007200:	0018      	movs	r0, r3
 8007202:	f000 f929 	bl	8007458 <RTC_Bcd2ToByte>
 8007206:	0003      	movs	r3, r0
 8007208:	001a      	movs	r2, r3
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2220      	movs	r2, #32
 8007212:	5c9b      	ldrb	r3, [r3, r2]
 8007214:	0018      	movs	r0, r3
 8007216:	f000 f91f 	bl	8007458 <RTC_Bcd2ToByte>
 800721a:	0003      	movs	r3, r0
 800721c:	0019      	movs	r1, r3
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2220      	movs	r2, #32
 8007222:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	0018      	movs	r0, r3
 8007228:	46bd      	mov	sp, r7
 800722a:	b006      	add	sp, #24
 800722c:	bd80      	pop	{r7, pc}
 800722e:	46c0      	nop			@ (mov r8, r8)
 8007230:	80808080 	.word	0x80808080

08007234 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699a      	ldr	r2, [r3, #24]
 8007242:	2380      	movs	r3, #128	@ 0x80
 8007244:	015b      	lsls	r3, r3, #5
 8007246:	4013      	ands	r3, r2
 8007248:	d011      	beq.n	800726e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007250:	2201      	movs	r2, #1
 8007252:	4013      	ands	r3, r2
 8007254:	d00b      	beq.n	800726e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2101      	movs	r1, #1
 8007262:	430a      	orrs	r2, r1
 8007264:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	0018      	movs	r0, r3
 800726a:	f7fb f811 	bl	8002290 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	699a      	ldr	r2, [r3, #24]
 8007274:	2380      	movs	r3, #128	@ 0x80
 8007276:	019b      	lsls	r3, r3, #6
 8007278:	4013      	ands	r3, r2
 800727a:	d011      	beq.n	80072a0 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007282:	2202      	movs	r2, #2
 8007284:	4013      	ands	r3, r2
 8007286:	d00b      	beq.n	80072a0 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2102      	movs	r1, #2
 8007294:	430a      	orrs	r2, r1
 8007296:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	0018      	movs	r0, r3
 800729c:	f000 f95b 	bl	8007556 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2229      	movs	r2, #41	@ 0x29
 80072a4:	2101      	movs	r1, #1
 80072a6:	5499      	strb	r1, [r3, r2]
}
 80072a8:	46c0      	nop			@ (mov r8, r8)
 80072aa:	46bd      	mov	sp, r7
 80072ac:	b002      	add	sp, #8
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a0e      	ldr	r2, [pc, #56]	@ (80072f8 <HAL_RTC_WaitForSynchro+0x48>)
 80072be:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80072c0:	f7fc fbcc 	bl	8003a5c <HAL_GetTick>
 80072c4:	0003      	movs	r3, r0
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80072c8:	e00a      	b.n	80072e0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80072ca:	f7fc fbc7 	bl	8003a5c <HAL_GetTick>
 80072ce:	0002      	movs	r2, r0
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	1ad2      	subs	r2, r2, r3
 80072d4:	23fa      	movs	r3, #250	@ 0xfa
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	429a      	cmp	r2, r3
 80072da:	d901      	bls.n	80072e0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e006      	b.n	80072ee <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	2220      	movs	r2, #32
 80072e8:	4013      	ands	r3, r2
 80072ea:	d0ee      	beq.n	80072ca <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	0018      	movs	r0, r3
 80072f0:	46bd      	mov	sp, r7
 80072f2:	b004      	add	sp, #16
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	46c0      	nop			@ (mov r8, r8)
 80072f8:	0001005f 	.word	0x0001005f

080072fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8007304:	230f      	movs	r3, #15
 8007306:	18fb      	adds	r3, r7, r3
 8007308:	2200      	movs	r2, #0
 800730a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	2240      	movs	r2, #64	@ 0x40
 8007314:	4013      	ands	r3, r2
 8007316:	d12c      	bne.n	8007372 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2180      	movs	r1, #128	@ 0x80
 8007324:	430a      	orrs	r2, r1
 8007326:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007328:	f7fc fb98 	bl	8003a5c <HAL_GetTick>
 800732c:	0003      	movs	r3, r0
 800732e:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007330:	e014      	b.n	800735c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007332:	f7fc fb93 	bl	8003a5c <HAL_GetTick>
 8007336:	0002      	movs	r2, r0
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	1ad2      	subs	r2, r2, r3
 800733c:	200f      	movs	r0, #15
 800733e:	183b      	adds	r3, r7, r0
 8007340:	1839      	adds	r1, r7, r0
 8007342:	7809      	ldrb	r1, [r1, #0]
 8007344:	7019      	strb	r1, [r3, #0]
 8007346:	23fa      	movs	r3, #250	@ 0xfa
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	429a      	cmp	r2, r3
 800734c:	d906      	bls.n	800735c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800734e:	183b      	adds	r3, r7, r0
 8007350:	2203      	movs	r2, #3
 8007352:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2229      	movs	r2, #41	@ 0x29
 8007358:	2103      	movs	r1, #3
 800735a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	2240      	movs	r2, #64	@ 0x40
 8007364:	4013      	ands	r3, r2
 8007366:	d104      	bne.n	8007372 <RTC_EnterInitMode+0x76>
 8007368:	230f      	movs	r3, #15
 800736a:	18fb      	adds	r3, r7, r3
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b03      	cmp	r3, #3
 8007370:	d1df      	bne.n	8007332 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007372:	230f      	movs	r3, #15
 8007374:	18fb      	adds	r3, r7, r3
 8007376:	781b      	ldrb	r3, [r3, #0]
}
 8007378:	0018      	movs	r0, r3
 800737a:	46bd      	mov	sp, r7
 800737c:	b004      	add	sp, #16
 800737e:	bd80      	pop	{r7, pc}

08007380 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007380:	b590      	push	{r4, r7, lr}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007388:	240f      	movs	r4, #15
 800738a:	193b      	adds	r3, r7, r4
 800738c:	2200      	movs	r2, #0
 800738e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007390:	4b1c      	ldr	r3, [pc, #112]	@ (8007404 <RTC_ExitInitMode+0x84>)
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	4b1b      	ldr	r3, [pc, #108]	@ (8007404 <RTC_ExitInitMode+0x84>)
 8007396:	2180      	movs	r1, #128	@ 0x80
 8007398:	438a      	bics	r2, r1
 800739a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800739c:	4b19      	ldr	r3, [pc, #100]	@ (8007404 <RTC_ExitInitMode+0x84>)
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	2220      	movs	r2, #32
 80073a2:	4013      	ands	r3, r2
 80073a4:	d10d      	bne.n	80073c2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	0018      	movs	r0, r3
 80073aa:	f7ff ff81 	bl	80072b0 <HAL_RTC_WaitForSynchro>
 80073ae:	1e03      	subs	r3, r0, #0
 80073b0:	d021      	beq.n	80073f6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2229      	movs	r2, #41	@ 0x29
 80073b6:	2103      	movs	r1, #3
 80073b8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80073ba:	193b      	adds	r3, r7, r4
 80073bc:	2203      	movs	r2, #3
 80073be:	701a      	strb	r2, [r3, #0]
 80073c0:	e019      	b.n	80073f6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80073c2:	4b10      	ldr	r3, [pc, #64]	@ (8007404 <RTC_ExitInitMode+0x84>)
 80073c4:	699a      	ldr	r2, [r3, #24]
 80073c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007404 <RTC_ExitInitMode+0x84>)
 80073c8:	2120      	movs	r1, #32
 80073ca:	438a      	bics	r2, r1
 80073cc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	0018      	movs	r0, r3
 80073d2:	f7ff ff6d 	bl	80072b0 <HAL_RTC_WaitForSynchro>
 80073d6:	1e03      	subs	r3, r0, #0
 80073d8:	d007      	beq.n	80073ea <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2229      	movs	r2, #41	@ 0x29
 80073de:	2103      	movs	r1, #3
 80073e0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80073e2:	230f      	movs	r3, #15
 80073e4:	18fb      	adds	r3, r7, r3
 80073e6:	2203      	movs	r2, #3
 80073e8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80073ea:	4b06      	ldr	r3, [pc, #24]	@ (8007404 <RTC_ExitInitMode+0x84>)
 80073ec:	699a      	ldr	r2, [r3, #24]
 80073ee:	4b05      	ldr	r3, [pc, #20]	@ (8007404 <RTC_ExitInitMode+0x84>)
 80073f0:	2120      	movs	r1, #32
 80073f2:	430a      	orrs	r2, r1
 80073f4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80073f6:	230f      	movs	r3, #15
 80073f8:	18fb      	adds	r3, r7, r3
 80073fa:	781b      	ldrb	r3, [r3, #0]
}
 80073fc:	0018      	movs	r0, r3
 80073fe:	46bd      	mov	sp, r7
 8007400:	b005      	add	sp, #20
 8007402:	bd90      	pop	{r4, r7, pc}
 8007404:	40002800 	.word	0x40002800

08007408 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	0002      	movs	r2, r0
 8007410:	1dfb      	adds	r3, r7, #7
 8007412:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8007418:	230b      	movs	r3, #11
 800741a:	18fb      	adds	r3, r7, r3
 800741c:	1dfa      	adds	r2, r7, #7
 800741e:	7812      	ldrb	r2, [r2, #0]
 8007420:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8007422:	e008      	b.n	8007436 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3301      	adds	r3, #1
 8007428:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800742a:	220b      	movs	r2, #11
 800742c:	18bb      	adds	r3, r7, r2
 800742e:	18ba      	adds	r2, r7, r2
 8007430:	7812      	ldrb	r2, [r2, #0]
 8007432:	3a0a      	subs	r2, #10
 8007434:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8007436:	210b      	movs	r1, #11
 8007438:	187b      	adds	r3, r7, r1
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	2b09      	cmp	r3, #9
 800743e:	d8f1      	bhi.n	8007424 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	b2db      	uxtb	r3, r3
 8007444:	011b      	lsls	r3, r3, #4
 8007446:	b2da      	uxtb	r2, r3
 8007448:	187b      	adds	r3, r7, r1
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	4313      	orrs	r3, r2
 800744e:	b2db      	uxtb	r3, r3
}
 8007450:	0018      	movs	r0, r3
 8007452:	46bd      	mov	sp, r7
 8007454:	b004      	add	sp, #16
 8007456:	bd80      	pop	{r7, pc}

08007458 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	0002      	movs	r2, r0
 8007460:	1dfb      	adds	r3, r7, #7
 8007462:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8007464:	1dfb      	adds	r3, r7, #7
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	091b      	lsrs	r3, r3, #4
 800746a:	b2db      	uxtb	r3, r3
 800746c:	001a      	movs	r2, r3
 800746e:	0013      	movs	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	189b      	adds	r3, r3, r2
 8007474:	005b      	lsls	r3, r3, #1
 8007476:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	b2da      	uxtb	r2, r3
 800747c:	1dfb      	adds	r3, r7, #7
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	210f      	movs	r1, #15
 8007482:	400b      	ands	r3, r1
 8007484:	b2db      	uxtb	r3, r3
 8007486:	18d3      	adds	r3, r2, r3
 8007488:	b2db      	uxtb	r3, r3
}
 800748a:	0018      	movs	r0, r3
 800748c:	46bd      	mov	sp, r7
 800748e:	b004      	add	sp, #16
 8007490:	bd80      	pop	{r7, pc}

08007492 <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b086      	sub	sp, #24
 8007496:	af00      	add	r7, sp, #0
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	60b9      	str	r1, [r7, #8]
 800749c:	607a      	str	r2, [r7, #4]
 800749e:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2228      	movs	r2, #40	@ 0x28
 80074a4:	5c9b      	ldrb	r3, [r3, r2]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d101      	bne.n	80074ae <HAL_RTCEx_SetSmoothCalib+0x1c>
 80074aa:	2302      	movs	r3, #2
 80074ac:	e04f      	b.n	800754e <HAL_RTCEx_SetSmoothCalib+0xbc>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2228      	movs	r2, #40	@ 0x28
 80074b2:	2101      	movs	r1, #1
 80074b4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2229      	movs	r2, #41	@ 0x29
 80074ba:	2102      	movs	r1, #2
 80074bc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	22ca      	movs	r2, #202	@ 0xca
 80074c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2253      	movs	r2, #83	@ 0x53
 80074cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	2380      	movs	r3, #128	@ 0x80
 80074d6:	025b      	lsls	r3, r3, #9
 80074d8:	4013      	ands	r3, r2
 80074da:	d022      	beq.n	8007522 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 80074dc:	f7fc fabe 	bl	8003a5c <HAL_GetTick>
 80074e0:	0003      	movs	r3, r0
 80074e2:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80074e4:	e016      	b.n	8007514 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80074e6:	f7fc fab9 	bl	8003a5c <HAL_GetTick>
 80074ea:	0002      	movs	r2, r0
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	1ad2      	subs	r2, r2, r3
 80074f0:	23fa      	movs	r3, #250	@ 0xfa
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d90d      	bls.n	8007514 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	22ff      	movs	r2, #255	@ 0xff
 80074fe:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2229      	movs	r2, #41	@ 0x29
 8007504:	2103      	movs	r1, #3
 8007506:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2228      	movs	r2, #40	@ 0x28
 800750c:	2100      	movs	r1, #0
 800750e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e01c      	b.n	800754e <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	2380      	movs	r3, #128	@ 0x80
 800751c:	025b      	lsls	r3, r3, #9
 800751e:	4013      	ands	r3, r2
 8007520:	d1e1      	bne.n	80074e6 <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	431a      	orrs	r2, r3
 8007528:	0011      	movs	r1, r2
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	22ff      	movs	r2, #255	@ 0xff
 800753a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2229      	movs	r2, #41	@ 0x29
 8007540:	2101      	movs	r1, #1
 8007542:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2228      	movs	r2, #40	@ 0x28
 8007548:	2100      	movs	r1, #0
 800754a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	0018      	movs	r0, r3
 8007550:	46bd      	mov	sp, r7
 8007552:	b006      	add	sp, #24
 8007554:	bd80      	pop	{r7, pc}

08007556 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b082      	sub	sp, #8
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800755e:	46c0      	nop			@ (mov r8, r8)
 8007560:	46bd      	mov	sp, r7
 8007562:	b002      	add	sp, #8
 8007564:	bd80      	pop	{r7, pc}

08007566 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b086      	sub	sp, #24
 800756a:	af00      	add	r7, sp, #0
 800756c:	60f8      	str	r0, [r7, #12]
 800756e:	60b9      	str	r1, [r7, #8]
 8007570:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	001a      	movs	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	18d3      	adds	r3, r2, r3
 800757e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	3301      	adds	r3, #1
 8007584:	33ff      	adds	r3, #255	@ 0xff
 8007586:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	18d3      	adds	r3, r2, r3
 8007590:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	601a      	str	r2, [r3, #0]
}
 8007598:	46c0      	nop			@ (mov r8, r8)
 800759a:	46bd      	mov	sp, r7
 800759c:	b006      	add	sp, #24
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	001a      	movs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	18d3      	adds	r3, r2, r3
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	3301      	adds	r3, #1
 80075bc:	33ff      	adds	r3, #255	@ 0xff
 80075be:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	18d3      	adds	r3, r2, r3
 80075c8:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	681b      	ldr	r3, [r3, #0]
}
 80075ce:	0018      	movs	r0, r3
 80075d0:	46bd      	mov	sp, r7
 80075d2:	b004      	add	sp, #16
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e0a8      	b.n	800773c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d109      	bne.n	8007606 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	2382      	movs	r3, #130	@ 0x82
 80075f8:	005b      	lsls	r3, r3, #1
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d009      	beq.n	8007612 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	61da      	str	r2, [r3, #28]
 8007604:	e005      	b.n	8007612 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	225d      	movs	r2, #93	@ 0x5d
 800761c:	5c9b      	ldrb	r3, [r3, r2]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	d107      	bne.n	8007634 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	225c      	movs	r2, #92	@ 0x5c
 8007628:	2100      	movs	r1, #0
 800762a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	0018      	movs	r0, r3
 8007630:	f7fb ff9c 	bl	800356c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	225d      	movs	r2, #93	@ 0x5d
 8007638:	2102      	movs	r1, #2
 800763a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2140      	movs	r1, #64	@ 0x40
 8007648:	438a      	bics	r2, r1
 800764a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68da      	ldr	r2, [r3, #12]
 8007650:	23e0      	movs	r3, #224	@ 0xe0
 8007652:	00db      	lsls	r3, r3, #3
 8007654:	429a      	cmp	r2, r3
 8007656:	d902      	bls.n	800765e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007658:	2300      	movs	r3, #0
 800765a:	60fb      	str	r3, [r7, #12]
 800765c:	e002      	b.n	8007664 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800765e:	2380      	movs	r3, #128	@ 0x80
 8007660:	015b      	lsls	r3, r3, #5
 8007662:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	23f0      	movs	r3, #240	@ 0xf0
 800766a:	011b      	lsls	r3, r3, #4
 800766c:	429a      	cmp	r2, r3
 800766e:	d008      	beq.n	8007682 <HAL_SPI_Init+0xaa>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68da      	ldr	r2, [r3, #12]
 8007674:	23e0      	movs	r3, #224	@ 0xe0
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	429a      	cmp	r2, r3
 800767a:	d002      	beq.n	8007682 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	2382      	movs	r3, #130	@ 0x82
 8007688:	005b      	lsls	r3, r3, #1
 800768a:	401a      	ands	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6899      	ldr	r1, [r3, #8]
 8007690:	2384      	movs	r3, #132	@ 0x84
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	400b      	ands	r3, r1
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	2102      	movs	r1, #2
 800769e:	400b      	ands	r3, r1
 80076a0:	431a      	orrs	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	2101      	movs	r1, #1
 80076a8:	400b      	ands	r3, r1
 80076aa:	431a      	orrs	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6999      	ldr	r1, [r3, #24]
 80076b0:	2380      	movs	r3, #128	@ 0x80
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	400b      	ands	r3, r1
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	69db      	ldr	r3, [r3, #28]
 80076bc:	2138      	movs	r1, #56	@ 0x38
 80076be:	400b      	ands	r3, r1
 80076c0:	431a      	orrs	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	2180      	movs	r1, #128	@ 0x80
 80076c8:	400b      	ands	r3, r1
 80076ca:	431a      	orrs	r2, r3
 80076cc:	0011      	movs	r1, r2
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80076d2:	2380      	movs	r3, #128	@ 0x80
 80076d4:	019b      	lsls	r3, r3, #6
 80076d6:	401a      	ands	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	0c1b      	lsrs	r3, r3, #16
 80076e6:	2204      	movs	r2, #4
 80076e8:	401a      	ands	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ee:	2110      	movs	r1, #16
 80076f0:	400b      	ands	r3, r1
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076f8:	2108      	movs	r1, #8
 80076fa:	400b      	ands	r3, r1
 80076fc:	431a      	orrs	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68d9      	ldr	r1, [r3, #12]
 8007702:	23f0      	movs	r3, #240	@ 0xf0
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	400b      	ands	r3, r1
 8007708:	431a      	orrs	r2, r3
 800770a:	0011      	movs	r1, r2
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	2380      	movs	r3, #128	@ 0x80
 8007710:	015b      	lsls	r3, r3, #5
 8007712:	401a      	ands	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	69da      	ldr	r2, [r3, #28]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4907      	ldr	r1, [pc, #28]	@ (8007744 <HAL_SPI_Init+0x16c>)
 8007728:	400a      	ands	r2, r1
 800772a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	225d      	movs	r2, #93	@ 0x5d
 8007736:	2101      	movs	r1, #1
 8007738:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	0018      	movs	r0, r3
 800773e:	46bd      	mov	sp, r7
 8007740:	b004      	add	sp, #16
 8007742:	bd80      	pop	{r7, pc}
 8007744:	fffff7ff 	.word	0xfffff7ff

08007748 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	603b      	str	r3, [r7, #0]
 8007754:	1dbb      	adds	r3, r7, #6
 8007756:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007758:	231f      	movs	r3, #31
 800775a:	18fb      	adds	r3, r7, r3
 800775c:	2200      	movs	r2, #0
 800775e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	225c      	movs	r2, #92	@ 0x5c
 8007764:	5c9b      	ldrb	r3, [r3, r2]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d101      	bne.n	800776e <HAL_SPI_Transmit+0x26>
 800776a:	2302      	movs	r3, #2
 800776c:	e147      	b.n	80079fe <HAL_SPI_Transmit+0x2b6>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	225c      	movs	r2, #92	@ 0x5c
 8007772:	2101      	movs	r1, #1
 8007774:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007776:	f7fc f971 	bl	8003a5c <HAL_GetTick>
 800777a:	0003      	movs	r3, r0
 800777c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800777e:	2316      	movs	r3, #22
 8007780:	18fb      	adds	r3, r7, r3
 8007782:	1dba      	adds	r2, r7, #6
 8007784:	8812      	ldrh	r2, [r2, #0]
 8007786:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	225d      	movs	r2, #93	@ 0x5d
 800778c:	5c9b      	ldrb	r3, [r3, r2]
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b01      	cmp	r3, #1
 8007792:	d004      	beq.n	800779e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007794:	231f      	movs	r3, #31
 8007796:	18fb      	adds	r3, r7, r3
 8007798:	2202      	movs	r2, #2
 800779a:	701a      	strb	r2, [r3, #0]
    goto error;
 800779c:	e128      	b.n	80079f0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d003      	beq.n	80077ac <HAL_SPI_Transmit+0x64>
 80077a4:	1dbb      	adds	r3, r7, #6
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d104      	bne.n	80077b6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80077ac:	231f      	movs	r3, #31
 80077ae:	18fb      	adds	r3, r7, r3
 80077b0:	2201      	movs	r2, #1
 80077b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80077b4:	e11c      	b.n	80079f0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	225d      	movs	r2, #93	@ 0x5d
 80077ba:	2103      	movs	r1, #3
 80077bc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	1dba      	adds	r2, r7, #6
 80077ce:	8812      	ldrh	r2, [r2, #0]
 80077d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	1dba      	adds	r2, r7, #6
 80077d6:	8812      	ldrh	r2, [r2, #0]
 80077d8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2244      	movs	r2, #68	@ 0x44
 80077e4:	2100      	movs	r1, #0
 80077e6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2246      	movs	r2, #70	@ 0x46
 80077ec:	2100      	movs	r1, #0
 80077ee:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	2380      	movs	r3, #128	@ 0x80
 8007802:	021b      	lsls	r3, r3, #8
 8007804:	429a      	cmp	r2, r3
 8007806:	d110      	bne.n	800782a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2140      	movs	r1, #64	@ 0x40
 8007814:	438a      	bics	r2, r1
 8007816:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2180      	movs	r1, #128	@ 0x80
 8007824:	01c9      	lsls	r1, r1, #7
 8007826:	430a      	orrs	r2, r1
 8007828:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2240      	movs	r2, #64	@ 0x40
 8007832:	4013      	ands	r3, r2
 8007834:	2b40      	cmp	r3, #64	@ 0x40
 8007836:	d007      	beq.n	8007848 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2140      	movs	r1, #64	@ 0x40
 8007844:	430a      	orrs	r2, r1
 8007846:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	23e0      	movs	r3, #224	@ 0xe0
 800784e:	00db      	lsls	r3, r3, #3
 8007850:	429a      	cmp	r2, r3
 8007852:	d952      	bls.n	80078fa <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d004      	beq.n	8007866 <HAL_SPI_Transmit+0x11e>
 800785c:	2316      	movs	r3, #22
 800785e:	18fb      	adds	r3, r7, r3
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d143      	bne.n	80078ee <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786a:	881a      	ldrh	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007876:	1c9a      	adds	r2, r3, #2
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007880:	b29b      	uxth	r3, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	b29a      	uxth	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800788a:	e030      	b.n	80078ee <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	2202      	movs	r2, #2
 8007894:	4013      	ands	r3, r2
 8007896:	2b02      	cmp	r3, #2
 8007898:	d112      	bne.n	80078c0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789e:	881a      	ldrh	r2, [r3, #0]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078aa:	1c9a      	adds	r2, r3, #2
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	3b01      	subs	r3, #1
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80078be:	e016      	b.n	80078ee <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078c0:	f7fc f8cc 	bl	8003a5c <HAL_GetTick>
 80078c4:	0002      	movs	r2, r0
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d802      	bhi.n	80078d6 <HAL_SPI_Transmit+0x18e>
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	3301      	adds	r3, #1
 80078d4:	d102      	bne.n	80078dc <HAL_SPI_Transmit+0x194>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d108      	bne.n	80078ee <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80078dc:	231f      	movs	r3, #31
 80078de:	18fb      	adds	r3, r7, r3
 80078e0:	2203      	movs	r2, #3
 80078e2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	225d      	movs	r2, #93	@ 0x5d
 80078e8:	2101      	movs	r1, #1
 80078ea:	5499      	strb	r1, [r3, r2]
          goto error;
 80078ec:	e080      	b.n	80079f0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1c9      	bne.n	800788c <HAL_SPI_Transmit+0x144>
 80078f8:	e053      	b.n	80079a2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d004      	beq.n	800790c <HAL_SPI_Transmit+0x1c4>
 8007902:	2316      	movs	r3, #22
 8007904:	18fb      	adds	r3, r7, r3
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d145      	bne.n	8007998 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	330c      	adds	r3, #12
 8007916:	7812      	ldrb	r2, [r2, #0]
 8007918:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800791e:	1c5a      	adds	r2, r3, #1
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007928:	b29b      	uxth	r3, r3
 800792a:	3b01      	subs	r3, #1
 800792c:	b29a      	uxth	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007932:	e031      	b.n	8007998 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2202      	movs	r2, #2
 800793c:	4013      	ands	r3, r2
 800793e:	2b02      	cmp	r3, #2
 8007940:	d113      	bne.n	800796a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	330c      	adds	r3, #12
 800794c:	7812      	ldrb	r2, [r2, #0]
 800794e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800795e:	b29b      	uxth	r3, r3
 8007960:	3b01      	subs	r3, #1
 8007962:	b29a      	uxth	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007968:	e016      	b.n	8007998 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800796a:	f7fc f877 	bl	8003a5c <HAL_GetTick>
 800796e:	0002      	movs	r2, r0
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	d802      	bhi.n	8007980 <HAL_SPI_Transmit+0x238>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	3301      	adds	r3, #1
 800797e:	d102      	bne.n	8007986 <HAL_SPI_Transmit+0x23e>
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d108      	bne.n	8007998 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8007986:	231f      	movs	r3, #31
 8007988:	18fb      	adds	r3, r7, r3
 800798a:	2203      	movs	r2, #3
 800798c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	225d      	movs	r2, #93	@ 0x5d
 8007992:	2101      	movs	r1, #1
 8007994:	5499      	strb	r1, [r3, r2]
          goto error;
 8007996:	e02b      	b.n	80079f0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1c8      	bne.n	8007934 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	0018      	movs	r0, r3
 80079aa:	f000 fcef 	bl	800838c <SPI_EndRxTxTransaction>
 80079ae:	1e03      	subs	r3, r0, #0
 80079b0:	d002      	beq.n	80079b8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2220      	movs	r2, #32
 80079b6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10a      	bne.n	80079d6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079c0:	2300      	movs	r3, #0
 80079c2:	613b      	str	r3, [r7, #16]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	613b      	str	r3, [r7, #16]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	613b      	str	r3, [r7, #16]
 80079d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d004      	beq.n	80079e8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80079de:	231f      	movs	r3, #31
 80079e0:	18fb      	adds	r3, r7, r3
 80079e2:	2201      	movs	r2, #1
 80079e4:	701a      	strb	r2, [r3, #0]
 80079e6:	e003      	b.n	80079f0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	225d      	movs	r2, #93	@ 0x5d
 80079ec:	2101      	movs	r1, #1
 80079ee:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	225c      	movs	r2, #92	@ 0x5c
 80079f4:	2100      	movs	r1, #0
 80079f6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80079f8:	231f      	movs	r3, #31
 80079fa:	18fb      	adds	r3, r7, r3
 80079fc:	781b      	ldrb	r3, [r3, #0]
}
 80079fe:	0018      	movs	r0, r3
 8007a00:	46bd      	mov	sp, r7
 8007a02:	b008      	add	sp, #32
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a08:	b590      	push	{r4, r7, lr}
 8007a0a:	b089      	sub	sp, #36	@ 0x24
 8007a0c:	af02      	add	r7, sp, #8
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	603b      	str	r3, [r7, #0]
 8007a14:	1dbb      	adds	r3, r7, #6
 8007a16:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a18:	2117      	movs	r1, #23
 8007a1a:	187b      	adds	r3, r7, r1
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	225d      	movs	r2, #93	@ 0x5d
 8007a24:	5c9b      	ldrb	r3, [r3, r2]
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d003      	beq.n	8007a34 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8007a2c:	187b      	adds	r3, r7, r1
 8007a2e:	2202      	movs	r2, #2
 8007a30:	701a      	strb	r2, [r3, #0]
    goto error;
 8007a32:	e12b      	b.n	8007c8c <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	2382      	movs	r3, #130	@ 0x82
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d113      	bne.n	8007a68 <HAL_SPI_Receive+0x60>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10f      	bne.n	8007a68 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	225d      	movs	r2, #93	@ 0x5d
 8007a4c:	2104      	movs	r1, #4
 8007a4e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007a50:	1dbb      	adds	r3, r7, #6
 8007a52:	881c      	ldrh	r4, [r3, #0]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	68b9      	ldr	r1, [r7, #8]
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	0023      	movs	r3, r4
 8007a60:	f000 f924 	bl	8007cac <HAL_SPI_TransmitReceive>
 8007a64:	0003      	movs	r3, r0
 8007a66:	e118      	b.n	8007c9a <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	225c      	movs	r2, #92	@ 0x5c
 8007a6c:	5c9b      	ldrb	r3, [r3, r2]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d101      	bne.n	8007a76 <HAL_SPI_Receive+0x6e>
 8007a72:	2302      	movs	r3, #2
 8007a74:	e111      	b.n	8007c9a <HAL_SPI_Receive+0x292>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	225c      	movs	r2, #92	@ 0x5c
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a7e:	f7fb ffed 	bl	8003a5c <HAL_GetTick>
 8007a82:	0003      	movs	r3, r0
 8007a84:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <HAL_SPI_Receive+0x8c>
 8007a8c:	1dbb      	adds	r3, r7, #6
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d104      	bne.n	8007a9e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8007a94:	2317      	movs	r3, #23
 8007a96:	18fb      	adds	r3, r7, r3
 8007a98:	2201      	movs	r2, #1
 8007a9a:	701a      	strb	r2, [r3, #0]
    goto error;
 8007a9c:	e0f6      	b.n	8007c8c <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	225d      	movs	r2, #93	@ 0x5d
 8007aa2:	2104      	movs	r1, #4
 8007aa4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	1dba      	adds	r2, r7, #6
 8007ab6:	2144      	movs	r1, #68	@ 0x44
 8007ab8:	8812      	ldrh	r2, [r2, #0]
 8007aba:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	1dba      	adds	r2, r7, #6
 8007ac0:	2146      	movs	r1, #70	@ 0x46
 8007ac2:	8812      	ldrh	r2, [r2, #0]
 8007ac4:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	23e0      	movs	r3, #224	@ 0xe0
 8007aea:	00db      	lsls	r3, r3, #3
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d908      	bls.n	8007b02 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	496a      	ldr	r1, [pc, #424]	@ (8007ca4 <HAL_SPI_Receive+0x29c>)
 8007afc:	400a      	ands	r2, r1
 8007afe:	605a      	str	r2, [r3, #4]
 8007b00:	e008      	b.n	8007b14 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2180      	movs	r1, #128	@ 0x80
 8007b0e:	0149      	lsls	r1, r1, #5
 8007b10:	430a      	orrs	r2, r1
 8007b12:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	2380      	movs	r3, #128	@ 0x80
 8007b1a:	021b      	lsls	r3, r3, #8
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d10f      	bne.n	8007b40 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2140      	movs	r1, #64	@ 0x40
 8007b2c:	438a      	bics	r2, r1
 8007b2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	495b      	ldr	r1, [pc, #364]	@ (8007ca8 <HAL_SPI_Receive+0x2a0>)
 8007b3c:	400a      	ands	r2, r1
 8007b3e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2240      	movs	r2, #64	@ 0x40
 8007b48:	4013      	ands	r3, r2
 8007b4a:	2b40      	cmp	r3, #64	@ 0x40
 8007b4c:	d007      	beq.n	8007b5e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2140      	movs	r1, #64	@ 0x40
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	68da      	ldr	r2, [r3, #12]
 8007b62:	23e0      	movs	r3, #224	@ 0xe0
 8007b64:	00db      	lsls	r3, r3, #3
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d900      	bls.n	8007b6c <HAL_SPI_Receive+0x164>
 8007b6a:	e071      	b.n	8007c50 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007b6c:	e035      	b.n	8007bda <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	2201      	movs	r2, #1
 8007b76:	4013      	ands	r3, r2
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d117      	bne.n	8007bac <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	330c      	adds	r3, #12
 8007b82:	001a      	movs	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b88:	7812      	ldrb	r2, [r2, #0]
 8007b8a:	b2d2      	uxtb	r2, r2
 8007b8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b92:	1c5a      	adds	r2, r3, #1
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2246      	movs	r2, #70	@ 0x46
 8007b9c:	5a9b      	ldrh	r3, [r3, r2]
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	b299      	uxth	r1, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2246      	movs	r2, #70	@ 0x46
 8007ba8:	5299      	strh	r1, [r3, r2]
 8007baa:	e016      	b.n	8007bda <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bac:	f7fb ff56 	bl	8003a5c <HAL_GetTick>
 8007bb0:	0002      	movs	r2, r0
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d802      	bhi.n	8007bc2 <HAL_SPI_Receive+0x1ba>
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	d102      	bne.n	8007bc8 <HAL_SPI_Receive+0x1c0>
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d108      	bne.n	8007bda <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8007bc8:	2317      	movs	r3, #23
 8007bca:	18fb      	adds	r3, r7, r3
 8007bcc:	2203      	movs	r2, #3
 8007bce:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	225d      	movs	r2, #93	@ 0x5d
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	5499      	strb	r1, [r3, r2]
          goto error;
 8007bd8:	e058      	b.n	8007c8c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2246      	movs	r2, #70	@ 0x46
 8007bde:	5a9b      	ldrh	r3, [r3, r2]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1c3      	bne.n	8007b6e <HAL_SPI_Receive+0x166>
 8007be6:	e039      	b.n	8007c5c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d115      	bne.n	8007c22 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68da      	ldr	r2, [r3, #12]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c00:	b292      	uxth	r2, r2
 8007c02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c08:	1c9a      	adds	r2, r3, #2
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2246      	movs	r2, #70	@ 0x46
 8007c12:	5a9b      	ldrh	r3, [r3, r2]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	3b01      	subs	r3, #1
 8007c18:	b299      	uxth	r1, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2246      	movs	r2, #70	@ 0x46
 8007c1e:	5299      	strh	r1, [r3, r2]
 8007c20:	e016      	b.n	8007c50 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c22:	f7fb ff1b 	bl	8003a5c <HAL_GetTick>
 8007c26:	0002      	movs	r2, r0
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d802      	bhi.n	8007c38 <HAL_SPI_Receive+0x230>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	3301      	adds	r3, #1
 8007c36:	d102      	bne.n	8007c3e <HAL_SPI_Receive+0x236>
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d108      	bne.n	8007c50 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8007c3e:	2317      	movs	r3, #23
 8007c40:	18fb      	adds	r3, r7, r3
 8007c42:	2203      	movs	r2, #3
 8007c44:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	225d      	movs	r2, #93	@ 0x5d
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	5499      	strb	r1, [r3, r2]
          goto error;
 8007c4e:	e01d      	b.n	8007c8c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2246      	movs	r2, #70	@ 0x46
 8007c54:	5a9b      	ldrh	r3, [r3, r2]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1c5      	bne.n	8007be8 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	0018      	movs	r0, r3
 8007c64:	f000 fb34 	bl	80082d0 <SPI_EndRxTransaction>
 8007c68:	1e03      	subs	r3, r0, #0
 8007c6a:	d002      	beq.n	8007c72 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d004      	beq.n	8007c84 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8007c7a:	2317      	movs	r3, #23
 8007c7c:	18fb      	adds	r3, r7, r3
 8007c7e:	2201      	movs	r2, #1
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	e003      	b.n	8007c8c <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	225d      	movs	r2, #93	@ 0x5d
 8007c88:	2101      	movs	r1, #1
 8007c8a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	225c      	movs	r2, #92	@ 0x5c
 8007c90:	2100      	movs	r1, #0
 8007c92:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007c94:	2317      	movs	r3, #23
 8007c96:	18fb      	adds	r3, r7, r3
 8007c98:	781b      	ldrb	r3, [r3, #0]
}
 8007c9a:	0018      	movs	r0, r3
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	b007      	add	sp, #28
 8007ca0:	bd90      	pop	{r4, r7, pc}
 8007ca2:	46c0      	nop			@ (mov r8, r8)
 8007ca4:	ffffefff 	.word	0xffffefff
 8007ca8:	ffffbfff 	.word	0xffffbfff

08007cac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b08a      	sub	sp, #40	@ 0x28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
 8007cb8:	001a      	movs	r2, r3
 8007cba:	1cbb      	adds	r3, r7, #2
 8007cbc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007cc2:	2323      	movs	r3, #35	@ 0x23
 8007cc4:	18fb      	adds	r3, r7, r3
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	225c      	movs	r2, #92	@ 0x5c
 8007cce:	5c9b      	ldrb	r3, [r3, r2]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d101      	bne.n	8007cd8 <HAL_SPI_TransmitReceive+0x2c>
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	e1c4      	b.n	8008062 <HAL_SPI_TransmitReceive+0x3b6>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	225c      	movs	r2, #92	@ 0x5c
 8007cdc:	2101      	movs	r1, #1
 8007cde:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ce0:	f7fb febc 	bl	8003a5c <HAL_GetTick>
 8007ce4:	0003      	movs	r3, r0
 8007ce6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ce8:	201b      	movs	r0, #27
 8007cea:	183b      	adds	r3, r7, r0
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	215d      	movs	r1, #93	@ 0x5d
 8007cf0:	5c52      	ldrb	r2, [r2, r1]
 8007cf2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007cfa:	2312      	movs	r3, #18
 8007cfc:	18fb      	adds	r3, r7, r3
 8007cfe:	1cba      	adds	r2, r7, #2
 8007d00:	8812      	ldrh	r2, [r2, #0]
 8007d02:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d04:	183b      	adds	r3, r7, r0
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d011      	beq.n	8007d30 <HAL_SPI_TransmitReceive+0x84>
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	2382      	movs	r3, #130	@ 0x82
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d107      	bne.n	8007d26 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d103      	bne.n	8007d26 <HAL_SPI_TransmitReceive+0x7a>
 8007d1e:	183b      	adds	r3, r7, r0
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	2b04      	cmp	r3, #4
 8007d24:	d004      	beq.n	8007d30 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8007d26:	2323      	movs	r3, #35	@ 0x23
 8007d28:	18fb      	adds	r3, r7, r3
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	701a      	strb	r2, [r3, #0]
    goto error;
 8007d2e:	e191      	b.n	8008054 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d006      	beq.n	8007d44 <HAL_SPI_TransmitReceive+0x98>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <HAL_SPI_TransmitReceive+0x98>
 8007d3c:	1cbb      	adds	r3, r7, #2
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d104      	bne.n	8007d4e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007d44:	2323      	movs	r3, #35	@ 0x23
 8007d46:	18fb      	adds	r3, r7, r3
 8007d48:	2201      	movs	r2, #1
 8007d4a:	701a      	strb	r2, [r3, #0]
    goto error;
 8007d4c:	e182      	b.n	8008054 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	225d      	movs	r2, #93	@ 0x5d
 8007d52:	5c9b      	ldrb	r3, [r3, r2]
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	d003      	beq.n	8007d62 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	225d      	movs	r2, #93	@ 0x5d
 8007d5e:	2105      	movs	r1, #5
 8007d60:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	1cba      	adds	r2, r7, #2
 8007d72:	2146      	movs	r1, #70	@ 0x46
 8007d74:	8812      	ldrh	r2, [r2, #0]
 8007d76:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	1cba      	adds	r2, r7, #2
 8007d7c:	2144      	movs	r1, #68	@ 0x44
 8007d7e:	8812      	ldrh	r2, [r2, #0]
 8007d80:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	1cba      	adds	r2, r7, #2
 8007d8c:	8812      	ldrh	r2, [r2, #0]
 8007d8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	1cba      	adds	r2, r7, #2
 8007d94:	8812      	ldrh	r2, [r2, #0]
 8007d96:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	23e0      	movs	r3, #224	@ 0xe0
 8007daa:	00db      	lsls	r3, r3, #3
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d908      	bls.n	8007dc2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	49ac      	ldr	r1, [pc, #688]	@ (800806c <HAL_SPI_TransmitReceive+0x3c0>)
 8007dbc:	400a      	ands	r2, r1
 8007dbe:	605a      	str	r2, [r3, #4]
 8007dc0:	e008      	b.n	8007dd4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2180      	movs	r1, #128	@ 0x80
 8007dce:	0149      	lsls	r1, r1, #5
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2240      	movs	r2, #64	@ 0x40
 8007ddc:	4013      	ands	r3, r2
 8007dde:	2b40      	cmp	r3, #64	@ 0x40
 8007de0:	d007      	beq.n	8007df2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2140      	movs	r1, #64	@ 0x40
 8007dee:	430a      	orrs	r2, r1
 8007df0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	68da      	ldr	r2, [r3, #12]
 8007df6:	23e0      	movs	r3, #224	@ 0xe0
 8007df8:	00db      	lsls	r3, r3, #3
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d800      	bhi.n	8007e00 <HAL_SPI_TransmitReceive+0x154>
 8007dfe:	e083      	b.n	8007f08 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d005      	beq.n	8007e14 <HAL_SPI_TransmitReceive+0x168>
 8007e08:	2312      	movs	r3, #18
 8007e0a:	18fb      	adds	r3, r7, r3
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d000      	beq.n	8007e14 <HAL_SPI_TransmitReceive+0x168>
 8007e12:	e06d      	b.n	8007ef0 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e18:	881a      	ldrh	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e24:	1c9a      	adds	r2, r3, #2
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	3b01      	subs	r3, #1
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e38:	e05a      	b.n	8007ef0 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	2202      	movs	r2, #2
 8007e42:	4013      	ands	r3, r2
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d11b      	bne.n	8007e80 <HAL_SPI_TransmitReceive+0x1d4>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d016      	beq.n	8007e80 <HAL_SPI_TransmitReceive+0x1d4>
 8007e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d113      	bne.n	8007e80 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e5c:	881a      	ldrh	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e68:	1c9a      	adds	r2, r3, #2
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	3b01      	subs	r3, #1
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	2201      	movs	r2, #1
 8007e88:	4013      	ands	r3, r2
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d11c      	bne.n	8007ec8 <HAL_SPI_TransmitReceive+0x21c>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2246      	movs	r2, #70	@ 0x46
 8007e92:	5a9b      	ldrh	r3, [r3, r2]
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d016      	beq.n	8007ec8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea4:	b292      	uxth	r2, r2
 8007ea6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eac:	1c9a      	adds	r2, r3, #2
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2246      	movs	r2, #70	@ 0x46
 8007eb6:	5a9b      	ldrh	r3, [r3, r2]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	b299      	uxth	r1, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2246      	movs	r2, #70	@ 0x46
 8007ec2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ec8:	f7fb fdc8 	bl	8003a5c <HAL_GetTick>
 8007ecc:	0002      	movs	r2, r0
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d80b      	bhi.n	8007ef0 <HAL_SPI_TransmitReceive+0x244>
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eda:	3301      	adds	r3, #1
 8007edc:	d008      	beq.n	8007ef0 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8007ede:	2323      	movs	r3, #35	@ 0x23
 8007ee0:	18fb      	adds	r3, r7, r3
 8007ee2:	2203      	movs	r2, #3
 8007ee4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	225d      	movs	r2, #93	@ 0x5d
 8007eea:	2101      	movs	r1, #1
 8007eec:	5499      	strb	r1, [r3, r2]
        goto error;
 8007eee:	e0b1      	b.n	8008054 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d19f      	bne.n	8007e3a <HAL_SPI_TransmitReceive+0x18e>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2246      	movs	r2, #70	@ 0x46
 8007efe:	5a9b      	ldrh	r3, [r3, r2]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d199      	bne.n	8007e3a <HAL_SPI_TransmitReceive+0x18e>
 8007f06:	e089      	b.n	800801c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d005      	beq.n	8007f1c <HAL_SPI_TransmitReceive+0x270>
 8007f10:	2312      	movs	r3, #18
 8007f12:	18fb      	adds	r3, r7, r3
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d000      	beq.n	8007f1c <HAL_SPI_TransmitReceive+0x270>
 8007f1a:	e074      	b.n	8008006 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	330c      	adds	r3, #12
 8007f26:	7812      	ldrb	r2, [r2, #0]
 8007f28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2e:	1c5a      	adds	r2, r3, #1
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f42:	e060      	b.n	8008006 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d11c      	bne.n	8007f8c <HAL_SPI_TransmitReceive+0x2e0>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d017      	beq.n	8007f8c <HAL_SPI_TransmitReceive+0x2e0>
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d114      	bne.n	8007f8c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	330c      	adds	r3, #12
 8007f6c:	7812      	ldrb	r2, [r2, #0]
 8007f6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f74:	1c5a      	adds	r2, r3, #1
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	3b01      	subs	r3, #1
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	2201      	movs	r2, #1
 8007f94:	4013      	ands	r3, r2
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d11e      	bne.n	8007fd8 <HAL_SPI_TransmitReceive+0x32c>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2246      	movs	r2, #70	@ 0x46
 8007f9e:	5a9b      	ldrh	r3, [r3, r2]
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d018      	beq.n	8007fd8 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	330c      	adds	r3, #12
 8007fac:	001a      	movs	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb2:	7812      	ldrb	r2, [r2, #0]
 8007fb4:	b2d2      	uxtb	r2, r2
 8007fb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2246      	movs	r2, #70	@ 0x46
 8007fc6:	5a9b      	ldrh	r3, [r3, r2]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	b299      	uxth	r1, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2246      	movs	r2, #70	@ 0x46
 8007fd2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007fd8:	f7fb fd40 	bl	8003a5c <HAL_GetTick>
 8007fdc:	0002      	movs	r2, r0
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d802      	bhi.n	8007fee <HAL_SPI_TransmitReceive+0x342>
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fea:	3301      	adds	r3, #1
 8007fec:	d102      	bne.n	8007ff4 <HAL_SPI_TransmitReceive+0x348>
 8007fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d108      	bne.n	8008006 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8007ff4:	2323      	movs	r3, #35	@ 0x23
 8007ff6:	18fb      	adds	r3, r7, r3
 8007ff8:	2203      	movs	r2, #3
 8007ffa:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	225d      	movs	r2, #93	@ 0x5d
 8008000:	2101      	movs	r1, #1
 8008002:	5499      	strb	r1, [r3, r2]
        goto error;
 8008004:	e026      	b.n	8008054 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800800a:	b29b      	uxth	r3, r3
 800800c:	2b00      	cmp	r3, #0
 800800e:	d199      	bne.n	8007f44 <HAL_SPI_TransmitReceive+0x298>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2246      	movs	r2, #70	@ 0x46
 8008014:	5a9b      	ldrh	r3, [r3, r2]
 8008016:	b29b      	uxth	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	d193      	bne.n	8007f44 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800801c:	69fa      	ldr	r2, [r7, #28]
 800801e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	0018      	movs	r0, r3
 8008024:	f000 f9b2 	bl	800838c <SPI_EndRxTxTransaction>
 8008028:	1e03      	subs	r3, r0, #0
 800802a:	d006      	beq.n	800803a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800802c:	2323      	movs	r3, #35	@ 0x23
 800802e:	18fb      	adds	r3, r7, r3
 8008030:	2201      	movs	r2, #1
 8008032:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2220      	movs	r2, #32
 8008038:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800803e:	2b00      	cmp	r3, #0
 8008040:	d004      	beq.n	800804c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8008042:	2323      	movs	r3, #35	@ 0x23
 8008044:	18fb      	adds	r3, r7, r3
 8008046:	2201      	movs	r2, #1
 8008048:	701a      	strb	r2, [r3, #0]
 800804a:	e003      	b.n	8008054 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	225d      	movs	r2, #93	@ 0x5d
 8008050:	2101      	movs	r1, #1
 8008052:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	225c      	movs	r2, #92	@ 0x5c
 8008058:	2100      	movs	r1, #0
 800805a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800805c:	2323      	movs	r3, #35	@ 0x23
 800805e:	18fb      	adds	r3, r7, r3
 8008060:	781b      	ldrb	r3, [r3, #0]
}
 8008062:	0018      	movs	r0, r3
 8008064:	46bd      	mov	sp, r7
 8008066:	b00a      	add	sp, #40	@ 0x28
 8008068:	bd80      	pop	{r7, pc}
 800806a:	46c0      	nop			@ (mov r8, r8)
 800806c:	ffffefff 	.word	0xffffefff

08008070 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b088      	sub	sp, #32
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	603b      	str	r3, [r7, #0]
 800807c:	1dfb      	adds	r3, r7, #7
 800807e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008080:	f7fb fcec 	bl	8003a5c <HAL_GetTick>
 8008084:	0002      	movs	r2, r0
 8008086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008088:	1a9b      	subs	r3, r3, r2
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	18d3      	adds	r3, r2, r3
 800808e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008090:	f7fb fce4 	bl	8003a5c <HAL_GetTick>
 8008094:	0003      	movs	r3, r0
 8008096:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008098:	4b3a      	ldr	r3, [pc, #232]	@ (8008184 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	015b      	lsls	r3, r3, #5
 800809e:	0d1b      	lsrs	r3, r3, #20
 80080a0:	69fa      	ldr	r2, [r7, #28]
 80080a2:	4353      	muls	r3, r2
 80080a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080a6:	e058      	b.n	800815a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	3301      	adds	r3, #1
 80080ac:	d055      	beq.n	800815a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080ae:	f7fb fcd5 	bl	8003a5c <HAL_GetTick>
 80080b2:	0002      	movs	r2, r0
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	69fa      	ldr	r2, [r7, #28]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d902      	bls.n	80080c4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d142      	bne.n	800814a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	21e0      	movs	r1, #224	@ 0xe0
 80080d0:	438a      	bics	r2, r1
 80080d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	2382      	movs	r3, #130	@ 0x82
 80080da:	005b      	lsls	r3, r3, #1
 80080dc:	429a      	cmp	r2, r3
 80080de:	d113      	bne.n	8008108 <SPI_WaitFlagStateUntilTimeout+0x98>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	2380      	movs	r3, #128	@ 0x80
 80080e6:	021b      	lsls	r3, r3, #8
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d005      	beq.n	80080f8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	2380      	movs	r3, #128	@ 0x80
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d107      	bne.n	8008108 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2140      	movs	r1, #64	@ 0x40
 8008104:	438a      	bics	r2, r1
 8008106:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800810c:	2380      	movs	r3, #128	@ 0x80
 800810e:	019b      	lsls	r3, r3, #6
 8008110:	429a      	cmp	r2, r3
 8008112:	d110      	bne.n	8008136 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	491a      	ldr	r1, [pc, #104]	@ (8008188 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008120:	400a      	ands	r2, r1
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2180      	movs	r1, #128	@ 0x80
 8008130:	0189      	lsls	r1, r1, #6
 8008132:	430a      	orrs	r2, r1
 8008134:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	225d      	movs	r2, #93	@ 0x5d
 800813a:	2101      	movs	r1, #1
 800813c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	225c      	movs	r2, #92	@ 0x5c
 8008142:	2100      	movs	r1, #0
 8008144:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e017      	b.n	800817a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	3b01      	subs	r3, #1
 8008158:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	4013      	ands	r3, r2
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	425a      	negs	r2, r3
 800816a:	4153      	adcs	r3, r2
 800816c:	b2db      	uxtb	r3, r3
 800816e:	001a      	movs	r2, r3
 8008170:	1dfb      	adds	r3, r7, #7
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	429a      	cmp	r2, r3
 8008176:	d197      	bne.n	80080a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	0018      	movs	r0, r3
 800817c:	46bd      	mov	sp, r7
 800817e:	b008      	add	sp, #32
 8008180:	bd80      	pop	{r7, pc}
 8008182:	46c0      	nop			@ (mov r8, r8)
 8008184:	2000008c 	.word	0x2000008c
 8008188:	ffffdfff 	.word	0xffffdfff

0800818c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b08a      	sub	sp, #40	@ 0x28
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
 8008198:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800819a:	2317      	movs	r3, #23
 800819c:	18fb      	adds	r3, r7, r3
 800819e:	2200      	movs	r2, #0
 80081a0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80081a2:	f7fb fc5b 	bl	8003a5c <HAL_GetTick>
 80081a6:	0002      	movs	r2, r0
 80081a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081aa:	1a9b      	subs	r3, r3, r2
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	18d3      	adds	r3, r2, r3
 80081b0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80081b2:	f7fb fc53 	bl	8003a5c <HAL_GetTick>
 80081b6:	0003      	movs	r3, r0
 80081b8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	330c      	adds	r3, #12
 80081c0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80081c2:	4b41      	ldr	r3, [pc, #260]	@ (80082c8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	0013      	movs	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	189b      	adds	r3, r3, r2
 80081cc:	00da      	lsls	r2, r3, #3
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	0d1b      	lsrs	r3, r3, #20
 80081d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081d4:	4353      	muls	r3, r2
 80081d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80081d8:	e068      	b.n	80082ac <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	23c0      	movs	r3, #192	@ 0xc0
 80081de:	00db      	lsls	r3, r3, #3
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d10a      	bne.n	80081fa <SPI_WaitFifoStateUntilTimeout+0x6e>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d107      	bne.n	80081fa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	b2da      	uxtb	r2, r3
 80081f0:	2117      	movs	r1, #23
 80081f2:	187b      	adds	r3, r7, r1
 80081f4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80081f6:	187b      	adds	r3, r7, r1
 80081f8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	3301      	adds	r3, #1
 80081fe:	d055      	beq.n	80082ac <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008200:	f7fb fc2c 	bl	8003a5c <HAL_GetTick>
 8008204:	0002      	movs	r2, r0
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800820c:	429a      	cmp	r2, r3
 800820e:	d902      	bls.n	8008216 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008212:	2b00      	cmp	r3, #0
 8008214:	d142      	bne.n	800829c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	21e0      	movs	r1, #224	@ 0xe0
 8008222:	438a      	bics	r2, r1
 8008224:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	2382      	movs	r3, #130	@ 0x82
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	429a      	cmp	r2, r3
 8008230:	d113      	bne.n	800825a <SPI_WaitFifoStateUntilTimeout+0xce>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	689a      	ldr	r2, [r3, #8]
 8008236:	2380      	movs	r3, #128	@ 0x80
 8008238:	021b      	lsls	r3, r3, #8
 800823a:	429a      	cmp	r2, r3
 800823c:	d005      	beq.n	800824a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	689a      	ldr	r2, [r3, #8]
 8008242:	2380      	movs	r3, #128	@ 0x80
 8008244:	00db      	lsls	r3, r3, #3
 8008246:	429a      	cmp	r2, r3
 8008248:	d107      	bne.n	800825a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2140      	movs	r1, #64	@ 0x40
 8008256:	438a      	bics	r2, r1
 8008258:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800825e:	2380      	movs	r3, #128	@ 0x80
 8008260:	019b      	lsls	r3, r3, #6
 8008262:	429a      	cmp	r2, r3
 8008264:	d110      	bne.n	8008288 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4916      	ldr	r1, [pc, #88]	@ (80082cc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8008272:	400a      	ands	r2, r1
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2180      	movs	r1, #128	@ 0x80
 8008282:	0189      	lsls	r1, r1, #6
 8008284:	430a      	orrs	r2, r1
 8008286:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	225d      	movs	r2, #93	@ 0x5d
 800828c:	2101      	movs	r1, #1
 800828e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	225c      	movs	r2, #92	@ 0x5c
 8008294:	2100      	movs	r1, #0
 8008296:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e010      	b.n	80082be <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d101      	bne.n	80082a6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	4013      	ands	r3, r2
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d18e      	bne.n	80081da <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	0018      	movs	r0, r3
 80082c0:	46bd      	mov	sp, r7
 80082c2:	b00a      	add	sp, #40	@ 0x28
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	46c0      	nop			@ (mov r8, r8)
 80082c8:	2000008c 	.word	0x2000008c
 80082cc:	ffffdfff 	.word	0xffffdfff

080082d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af02      	add	r7, sp, #8
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	2382      	movs	r3, #130	@ 0x82
 80082e2:	005b      	lsls	r3, r3, #1
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d113      	bne.n	8008310 <SPI_EndRxTransaction+0x40>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	2380      	movs	r3, #128	@ 0x80
 80082ee:	021b      	lsls	r3, r3, #8
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d005      	beq.n	8008300 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	2380      	movs	r3, #128	@ 0x80
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d107      	bne.n	8008310 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2140      	movs	r1, #64	@ 0x40
 800830c:	438a      	bics	r2, r1
 800830e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	0013      	movs	r3, r2
 800831a:	2200      	movs	r2, #0
 800831c:	2180      	movs	r1, #128	@ 0x80
 800831e:	f7ff fea7 	bl	8008070 <SPI_WaitFlagStateUntilTimeout>
 8008322:	1e03      	subs	r3, r0, #0
 8008324:	d007      	beq.n	8008336 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800832a:	2220      	movs	r2, #32
 800832c:	431a      	orrs	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e026      	b.n	8008384 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	2382      	movs	r3, #130	@ 0x82
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	429a      	cmp	r2, r3
 8008340:	d11f      	bne.n	8008382 <SPI_EndRxTransaction+0xb2>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	689a      	ldr	r2, [r3, #8]
 8008346:	2380      	movs	r3, #128	@ 0x80
 8008348:	021b      	lsls	r3, r3, #8
 800834a:	429a      	cmp	r2, r3
 800834c:	d005      	beq.n	800835a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	689a      	ldr	r2, [r3, #8]
 8008352:	2380      	movs	r3, #128	@ 0x80
 8008354:	00db      	lsls	r3, r3, #3
 8008356:	429a      	cmp	r2, r3
 8008358:	d113      	bne.n	8008382 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	23c0      	movs	r3, #192	@ 0xc0
 800835e:	00d9      	lsls	r1, r3, #3
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	0013      	movs	r3, r2
 8008368:	2200      	movs	r2, #0
 800836a:	f7ff ff0f 	bl	800818c <SPI_WaitFifoStateUntilTimeout>
 800836e:	1e03      	subs	r3, r0, #0
 8008370:	d007      	beq.n	8008382 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008376:	2220      	movs	r2, #32
 8008378:	431a      	orrs	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e000      	b.n	8008384 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	0018      	movs	r0, r3
 8008386:	46bd      	mov	sp, r7
 8008388:	b004      	add	sp, #16
 800838a:	bd80      	pop	{r7, pc}

0800838c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af02      	add	r7, sp, #8
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	23c0      	movs	r3, #192	@ 0xc0
 800839c:	0159      	lsls	r1, r3, #5
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	0013      	movs	r3, r2
 80083a6:	2200      	movs	r2, #0
 80083a8:	f7ff fef0 	bl	800818c <SPI_WaitFifoStateUntilTimeout>
 80083ac:	1e03      	subs	r3, r0, #0
 80083ae:	d007      	beq.n	80083c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083b4:	2220      	movs	r2, #32
 80083b6:	431a      	orrs	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e027      	b.n	8008410 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	0013      	movs	r3, r2
 80083ca:	2200      	movs	r2, #0
 80083cc:	2180      	movs	r1, #128	@ 0x80
 80083ce:	f7ff fe4f 	bl	8008070 <SPI_WaitFlagStateUntilTimeout>
 80083d2:	1e03      	subs	r3, r0, #0
 80083d4:	d007      	beq.n	80083e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083da:	2220      	movs	r2, #32
 80083dc:	431a      	orrs	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e014      	b.n	8008410 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	23c0      	movs	r3, #192	@ 0xc0
 80083ea:	00d9      	lsls	r1, r3, #3
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	0013      	movs	r3, r2
 80083f4:	2200      	movs	r2, #0
 80083f6:	f7ff fec9 	bl	800818c <SPI_WaitFifoStateUntilTimeout>
 80083fa:	1e03      	subs	r3, r0, #0
 80083fc:	d007      	beq.n	800840e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008402:	2220      	movs	r2, #32
 8008404:	431a      	orrs	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e000      	b.n	8008410 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	0018      	movs	r0, r3
 8008412:	46bd      	mov	sp, r7
 8008414:	b004      	add	sp, #16
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e04a      	b.n	80084c0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	223d      	movs	r2, #61	@ 0x3d
 800842e:	5c9b      	ldrb	r3, [r3, r2]
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d107      	bne.n	8008446 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	223c      	movs	r2, #60	@ 0x3c
 800843a:	2100      	movs	r1, #0
 800843c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	0018      	movs	r0, r3
 8008442:	f7fb f96d 	bl	8003720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	223d      	movs	r2, #61	@ 0x3d
 800844a:	2102      	movs	r1, #2
 800844c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	3304      	adds	r3, #4
 8008456:	0019      	movs	r1, r3
 8008458:	0010      	movs	r0, r2
 800845a:	f000 fc87 	bl	8008d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2248      	movs	r2, #72	@ 0x48
 8008462:	2101      	movs	r1, #1
 8008464:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	223e      	movs	r2, #62	@ 0x3e
 800846a:	2101      	movs	r1, #1
 800846c:	5499      	strb	r1, [r3, r2]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	223f      	movs	r2, #63	@ 0x3f
 8008472:	2101      	movs	r1, #1
 8008474:	5499      	strb	r1, [r3, r2]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2240      	movs	r2, #64	@ 0x40
 800847a:	2101      	movs	r1, #1
 800847c:	5499      	strb	r1, [r3, r2]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2241      	movs	r2, #65	@ 0x41
 8008482:	2101      	movs	r1, #1
 8008484:	5499      	strb	r1, [r3, r2]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2242      	movs	r2, #66	@ 0x42
 800848a:	2101      	movs	r1, #1
 800848c:	5499      	strb	r1, [r3, r2]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2243      	movs	r2, #67	@ 0x43
 8008492:	2101      	movs	r1, #1
 8008494:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2244      	movs	r2, #68	@ 0x44
 800849a:	2101      	movs	r1, #1
 800849c:	5499      	strb	r1, [r3, r2]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2245      	movs	r2, #69	@ 0x45
 80084a2:	2101      	movs	r1, #1
 80084a4:	5499      	strb	r1, [r3, r2]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2246      	movs	r2, #70	@ 0x46
 80084aa:	2101      	movs	r1, #1
 80084ac:	5499      	strb	r1, [r3, r2]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2247      	movs	r2, #71	@ 0x47
 80084b2:	2101      	movs	r1, #1
 80084b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	223d      	movs	r2, #61	@ 0x3d
 80084ba:	2101      	movs	r1, #1
 80084bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	0018      	movs	r0, r3
 80084c2:	46bd      	mov	sp, r7
 80084c4:	b002      	add	sp, #8
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	223d      	movs	r2, #61	@ 0x3d
 80084d4:	5c9b      	ldrb	r3, [r3, r2]
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d001      	beq.n	80084e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e035      	b.n	800854c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	223d      	movs	r2, #61	@ 0x3d
 80084e4:	2102      	movs	r1, #2
 80084e6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a19      	ldr	r2, [pc, #100]	@ (8008554 <HAL_TIM_Base_Start+0x8c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d00a      	beq.n	8008508 <HAL_TIM_Base_Start+0x40>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	2380      	movs	r3, #128	@ 0x80
 80084f8:	05db      	lsls	r3, r3, #23
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d004      	beq.n	8008508 <HAL_TIM_Base_Start+0x40>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a15      	ldr	r2, [pc, #84]	@ (8008558 <HAL_TIM_Base_Start+0x90>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d116      	bne.n	8008536 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	4a13      	ldr	r2, [pc, #76]	@ (800855c <HAL_TIM_Base_Start+0x94>)
 8008510:	4013      	ands	r3, r2
 8008512:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b06      	cmp	r3, #6
 8008518:	d016      	beq.n	8008548 <HAL_TIM_Base_Start+0x80>
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	2380      	movs	r3, #128	@ 0x80
 800851e:	025b      	lsls	r3, r3, #9
 8008520:	429a      	cmp	r2, r3
 8008522:	d011      	beq.n	8008548 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2101      	movs	r1, #1
 8008530:	430a      	orrs	r2, r1
 8008532:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008534:	e008      	b.n	8008548 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2101      	movs	r1, #1
 8008542:	430a      	orrs	r2, r1
 8008544:	601a      	str	r2, [r3, #0]
 8008546:	e000      	b.n	800854a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008548:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	0018      	movs	r0, r3
 800854e:	46bd      	mov	sp, r7
 8008550:	b004      	add	sp, #16
 8008552:	bd80      	pop	{r7, pc}
 8008554:	40012c00 	.word	0x40012c00
 8008558:	40000400 	.word	0x40000400
 800855c:	00010007 	.word	0x00010007

08008560 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	4a0d      	ldr	r2, [pc, #52]	@ (80085a4 <HAL_TIM_Base_Stop+0x44>)
 8008570:	4013      	ands	r3, r2
 8008572:	d10d      	bne.n	8008590 <HAL_TIM_Base_Stop+0x30>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	4a0b      	ldr	r2, [pc, #44]	@ (80085a8 <HAL_TIM_Base_Stop+0x48>)
 800857c:	4013      	ands	r3, r2
 800857e:	d107      	bne.n	8008590 <HAL_TIM_Base_Stop+0x30>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2101      	movs	r1, #1
 800858c:	438a      	bics	r2, r1
 800858e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	223d      	movs	r2, #61	@ 0x3d
 8008594:	2101      	movs	r1, #1
 8008596:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	0018      	movs	r0, r3
 800859c:	46bd      	mov	sp, r7
 800859e:	b002      	add	sp, #8
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	46c0      	nop			@ (mov r8, r8)
 80085a4:	00001111 	.word	0x00001111
 80085a8:	00000444 	.word	0x00000444

080085ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	223d      	movs	r2, #61	@ 0x3d
 80085b8:	5c9b      	ldrb	r3, [r3, r2]
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d001      	beq.n	80085c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e03d      	b.n	8008640 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	223d      	movs	r2, #61	@ 0x3d
 80085c8:	2102      	movs	r1, #2
 80085ca:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2101      	movs	r1, #1
 80085d8:	430a      	orrs	r2, r1
 80085da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a19      	ldr	r2, [pc, #100]	@ (8008648 <HAL_TIM_Base_Start_IT+0x9c>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d00a      	beq.n	80085fc <HAL_TIM_Base_Start_IT+0x50>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	2380      	movs	r3, #128	@ 0x80
 80085ec:	05db      	lsls	r3, r3, #23
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d004      	beq.n	80085fc <HAL_TIM_Base_Start_IT+0x50>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a15      	ldr	r2, [pc, #84]	@ (800864c <HAL_TIM_Base_Start_IT+0xa0>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d116      	bne.n	800862a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	4a13      	ldr	r2, [pc, #76]	@ (8008650 <HAL_TIM_Base_Start_IT+0xa4>)
 8008604:	4013      	ands	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2b06      	cmp	r3, #6
 800860c:	d016      	beq.n	800863c <HAL_TIM_Base_Start_IT+0x90>
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	2380      	movs	r3, #128	@ 0x80
 8008612:	025b      	lsls	r3, r3, #9
 8008614:	429a      	cmp	r2, r3
 8008616:	d011      	beq.n	800863c <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2101      	movs	r1, #1
 8008624:	430a      	orrs	r2, r1
 8008626:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008628:	e008      	b.n	800863c <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2101      	movs	r1, #1
 8008636:	430a      	orrs	r2, r1
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	e000      	b.n	800863e <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800863c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	0018      	movs	r0, r3
 8008642:	46bd      	mov	sp, r7
 8008644:	b004      	add	sp, #16
 8008646:	bd80      	pop	{r7, pc}
 8008648:	40012c00 	.word	0x40012c00
 800864c:	40000400 	.word	0x40000400
 8008650:	00010007 	.word	0x00010007

08008654 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68da      	ldr	r2, [r3, #12]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2101      	movs	r1, #1
 8008668:	438a      	bics	r2, r1
 800866a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	4a0d      	ldr	r2, [pc, #52]	@ (80086a8 <HAL_TIM_Base_Stop_IT+0x54>)
 8008674:	4013      	ands	r3, r2
 8008676:	d10d      	bne.n	8008694 <HAL_TIM_Base_Stop_IT+0x40>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	4a0b      	ldr	r2, [pc, #44]	@ (80086ac <HAL_TIM_Base_Stop_IT+0x58>)
 8008680:	4013      	ands	r3, r2
 8008682:	d107      	bne.n	8008694 <HAL_TIM_Base_Stop_IT+0x40>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2101      	movs	r1, #1
 8008690:	438a      	bics	r2, r1
 8008692:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	223d      	movs	r2, #61	@ 0x3d
 8008698:	2101      	movs	r1, #1
 800869a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	0018      	movs	r0, r3
 80086a0:	46bd      	mov	sp, r7
 80086a2:	b002      	add	sp, #8
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	46c0      	nop			@ (mov r8, r8)
 80086a8:	00001111 	.word	0x00001111
 80086ac:	00000444 	.word	0x00000444

080086b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e04a      	b.n	8008758 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	223d      	movs	r2, #61	@ 0x3d
 80086c6:	5c9b      	ldrb	r3, [r3, r2]
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d107      	bne.n	80086de <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	223c      	movs	r2, #60	@ 0x3c
 80086d2:	2100      	movs	r1, #0
 80086d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	0018      	movs	r0, r3
 80086da:	f7fb f805 	bl	80036e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	223d      	movs	r2, #61	@ 0x3d
 80086e2:	2102      	movs	r1, #2
 80086e4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	3304      	adds	r3, #4
 80086ee:	0019      	movs	r1, r3
 80086f0:	0010      	movs	r0, r2
 80086f2:	f000 fb3b 	bl	8008d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2248      	movs	r2, #72	@ 0x48
 80086fa:	2101      	movs	r1, #1
 80086fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	223e      	movs	r2, #62	@ 0x3e
 8008702:	2101      	movs	r1, #1
 8008704:	5499      	strb	r1, [r3, r2]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	223f      	movs	r2, #63	@ 0x3f
 800870a:	2101      	movs	r1, #1
 800870c:	5499      	strb	r1, [r3, r2]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2240      	movs	r2, #64	@ 0x40
 8008712:	2101      	movs	r1, #1
 8008714:	5499      	strb	r1, [r3, r2]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2241      	movs	r2, #65	@ 0x41
 800871a:	2101      	movs	r1, #1
 800871c:	5499      	strb	r1, [r3, r2]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2242      	movs	r2, #66	@ 0x42
 8008722:	2101      	movs	r1, #1
 8008724:	5499      	strb	r1, [r3, r2]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2243      	movs	r2, #67	@ 0x43
 800872a:	2101      	movs	r1, #1
 800872c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2244      	movs	r2, #68	@ 0x44
 8008732:	2101      	movs	r1, #1
 8008734:	5499      	strb	r1, [r3, r2]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2245      	movs	r2, #69	@ 0x45
 800873a:	2101      	movs	r1, #1
 800873c:	5499      	strb	r1, [r3, r2]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2246      	movs	r2, #70	@ 0x46
 8008742:	2101      	movs	r1, #1
 8008744:	5499      	strb	r1, [r3, r2]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2247      	movs	r2, #71	@ 0x47
 800874a:	2101      	movs	r1, #1
 800874c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	223d      	movs	r2, #61	@ 0x3d
 8008752:	2101      	movs	r1, #1
 8008754:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	0018      	movs	r0, r3
 800875a:	46bd      	mov	sp, r7
 800875c:	b002      	add	sp, #8
 800875e:	bd80      	pop	{r7, pc}

08008760 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d108      	bne.n	8008782 <HAL_TIM_PWM_Start+0x22>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	223e      	movs	r2, #62	@ 0x3e
 8008774:	5c9b      	ldrb	r3, [r3, r2]
 8008776:	b2db      	uxtb	r3, r3
 8008778:	3b01      	subs	r3, #1
 800877a:	1e5a      	subs	r2, r3, #1
 800877c:	4193      	sbcs	r3, r2
 800877e:	b2db      	uxtb	r3, r3
 8008780:	e037      	b.n	80087f2 <HAL_TIM_PWM_Start+0x92>
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	2b04      	cmp	r3, #4
 8008786:	d108      	bne.n	800879a <HAL_TIM_PWM_Start+0x3a>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	223f      	movs	r2, #63	@ 0x3f
 800878c:	5c9b      	ldrb	r3, [r3, r2]
 800878e:	b2db      	uxtb	r3, r3
 8008790:	3b01      	subs	r3, #1
 8008792:	1e5a      	subs	r2, r3, #1
 8008794:	4193      	sbcs	r3, r2
 8008796:	b2db      	uxtb	r3, r3
 8008798:	e02b      	b.n	80087f2 <HAL_TIM_PWM_Start+0x92>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b08      	cmp	r3, #8
 800879e:	d108      	bne.n	80087b2 <HAL_TIM_PWM_Start+0x52>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2240      	movs	r2, #64	@ 0x40
 80087a4:	5c9b      	ldrb	r3, [r3, r2]
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	3b01      	subs	r3, #1
 80087aa:	1e5a      	subs	r2, r3, #1
 80087ac:	4193      	sbcs	r3, r2
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	e01f      	b.n	80087f2 <HAL_TIM_PWM_Start+0x92>
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2b0c      	cmp	r3, #12
 80087b6:	d108      	bne.n	80087ca <HAL_TIM_PWM_Start+0x6a>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2241      	movs	r2, #65	@ 0x41
 80087bc:	5c9b      	ldrb	r3, [r3, r2]
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	3b01      	subs	r3, #1
 80087c2:	1e5a      	subs	r2, r3, #1
 80087c4:	4193      	sbcs	r3, r2
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	e013      	b.n	80087f2 <HAL_TIM_PWM_Start+0x92>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b10      	cmp	r3, #16
 80087ce:	d108      	bne.n	80087e2 <HAL_TIM_PWM_Start+0x82>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2242      	movs	r2, #66	@ 0x42
 80087d4:	5c9b      	ldrb	r3, [r3, r2]
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	3b01      	subs	r3, #1
 80087da:	1e5a      	subs	r2, r3, #1
 80087dc:	4193      	sbcs	r3, r2
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	e007      	b.n	80087f2 <HAL_TIM_PWM_Start+0x92>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2243      	movs	r2, #67	@ 0x43
 80087e6:	5c9b      	ldrb	r3, [r3, r2]
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	3b01      	subs	r3, #1
 80087ec:	1e5a      	subs	r2, r3, #1
 80087ee:	4193      	sbcs	r3, r2
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e081      	b.n	80088fe <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d104      	bne.n	800880a <HAL_TIM_PWM_Start+0xaa>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	223e      	movs	r2, #62	@ 0x3e
 8008804:	2102      	movs	r1, #2
 8008806:	5499      	strb	r1, [r3, r2]
 8008808:	e023      	b.n	8008852 <HAL_TIM_PWM_Start+0xf2>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b04      	cmp	r3, #4
 800880e:	d104      	bne.n	800881a <HAL_TIM_PWM_Start+0xba>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	223f      	movs	r2, #63	@ 0x3f
 8008814:	2102      	movs	r1, #2
 8008816:	5499      	strb	r1, [r3, r2]
 8008818:	e01b      	b.n	8008852 <HAL_TIM_PWM_Start+0xf2>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b08      	cmp	r3, #8
 800881e:	d104      	bne.n	800882a <HAL_TIM_PWM_Start+0xca>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2240      	movs	r2, #64	@ 0x40
 8008824:	2102      	movs	r1, #2
 8008826:	5499      	strb	r1, [r3, r2]
 8008828:	e013      	b.n	8008852 <HAL_TIM_PWM_Start+0xf2>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2b0c      	cmp	r3, #12
 800882e:	d104      	bne.n	800883a <HAL_TIM_PWM_Start+0xda>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2241      	movs	r2, #65	@ 0x41
 8008834:	2102      	movs	r1, #2
 8008836:	5499      	strb	r1, [r3, r2]
 8008838:	e00b      	b.n	8008852 <HAL_TIM_PWM_Start+0xf2>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2b10      	cmp	r3, #16
 800883e:	d104      	bne.n	800884a <HAL_TIM_PWM_Start+0xea>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2242      	movs	r2, #66	@ 0x42
 8008844:	2102      	movs	r1, #2
 8008846:	5499      	strb	r1, [r3, r2]
 8008848:	e003      	b.n	8008852 <HAL_TIM_PWM_Start+0xf2>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2243      	movs	r2, #67	@ 0x43
 800884e:	2102      	movs	r1, #2
 8008850:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	2201      	movs	r2, #1
 800885a:	0018      	movs	r0, r3
 800885c:	f000 fda6 	bl	80093ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a28      	ldr	r2, [pc, #160]	@ (8008908 <HAL_TIM_PWM_Start+0x1a8>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d009      	beq.n	800887e <HAL_TIM_PWM_Start+0x11e>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a27      	ldr	r2, [pc, #156]	@ (800890c <HAL_TIM_PWM_Start+0x1ac>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d004      	beq.n	800887e <HAL_TIM_PWM_Start+0x11e>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a25      	ldr	r2, [pc, #148]	@ (8008910 <HAL_TIM_PWM_Start+0x1b0>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d101      	bne.n	8008882 <HAL_TIM_PWM_Start+0x122>
 800887e:	2301      	movs	r3, #1
 8008880:	e000      	b.n	8008884 <HAL_TIM_PWM_Start+0x124>
 8008882:	2300      	movs	r3, #0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d008      	beq.n	800889a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2180      	movs	r1, #128	@ 0x80
 8008894:	0209      	lsls	r1, r1, #8
 8008896:	430a      	orrs	r2, r1
 8008898:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a1a      	ldr	r2, [pc, #104]	@ (8008908 <HAL_TIM_PWM_Start+0x1a8>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d00a      	beq.n	80088ba <HAL_TIM_PWM_Start+0x15a>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	2380      	movs	r3, #128	@ 0x80
 80088aa:	05db      	lsls	r3, r3, #23
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d004      	beq.n	80088ba <HAL_TIM_PWM_Start+0x15a>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a17      	ldr	r2, [pc, #92]	@ (8008914 <HAL_TIM_PWM_Start+0x1b4>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d116      	bne.n	80088e8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	4a15      	ldr	r2, [pc, #84]	@ (8008918 <HAL_TIM_PWM_Start+0x1b8>)
 80088c2:	4013      	ands	r3, r2
 80088c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2b06      	cmp	r3, #6
 80088ca:	d016      	beq.n	80088fa <HAL_TIM_PWM_Start+0x19a>
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	2380      	movs	r3, #128	@ 0x80
 80088d0:	025b      	lsls	r3, r3, #9
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d011      	beq.n	80088fa <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2101      	movs	r1, #1
 80088e2:	430a      	orrs	r2, r1
 80088e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088e6:	e008      	b.n	80088fa <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2101      	movs	r1, #1
 80088f4:	430a      	orrs	r2, r1
 80088f6:	601a      	str	r2, [r3, #0]
 80088f8:	e000      	b.n	80088fc <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088fa:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	0018      	movs	r0, r3
 8008900:	46bd      	mov	sp, r7
 8008902:	b004      	add	sp, #16
 8008904:	bd80      	pop	{r7, pc}
 8008906:	46c0      	nop			@ (mov r8, r8)
 8008908:	40012c00 	.word	0x40012c00
 800890c:	40014400 	.word	0x40014400
 8008910:	40014800 	.word	0x40014800
 8008914:	40000400 	.word	0x40000400
 8008918:	00010007 	.word	0x00010007

0800891c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2202      	movs	r2, #2
 8008938:	4013      	ands	r3, r2
 800893a:	d021      	beq.n	8008980 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2202      	movs	r2, #2
 8008940:	4013      	ands	r3, r2
 8008942:	d01d      	beq.n	8008980 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2203      	movs	r2, #3
 800894a:	4252      	negs	r2, r2
 800894c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	699b      	ldr	r3, [r3, #24]
 800895a:	2203      	movs	r2, #3
 800895c:	4013      	ands	r3, r2
 800895e:	d004      	beq.n	800896a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	0018      	movs	r0, r3
 8008964:	f000 f9ea 	bl	8008d3c <HAL_TIM_IC_CaptureCallback>
 8008968:	e007      	b.n	800897a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	0018      	movs	r0, r3
 800896e:	f000 f9dd 	bl	8008d2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	0018      	movs	r0, r3
 8008976:	f000 f9e9 	bl	8008d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	2204      	movs	r2, #4
 8008984:	4013      	ands	r3, r2
 8008986:	d022      	beq.n	80089ce <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2204      	movs	r2, #4
 800898c:	4013      	ands	r3, r2
 800898e:	d01e      	beq.n	80089ce <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2205      	movs	r2, #5
 8008996:	4252      	negs	r2, r2
 8008998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2202      	movs	r2, #2
 800899e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	699a      	ldr	r2, [r3, #24]
 80089a6:	23c0      	movs	r3, #192	@ 0xc0
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4013      	ands	r3, r2
 80089ac:	d004      	beq.n	80089b8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	0018      	movs	r0, r3
 80089b2:	f000 f9c3 	bl	8008d3c <HAL_TIM_IC_CaptureCallback>
 80089b6:	e007      	b.n	80089c8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	0018      	movs	r0, r3
 80089bc:	f000 f9b6 	bl	8008d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	0018      	movs	r0, r3
 80089c4:	f000 f9c2 	bl	8008d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	2208      	movs	r2, #8
 80089d2:	4013      	ands	r3, r2
 80089d4:	d021      	beq.n	8008a1a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2208      	movs	r2, #8
 80089da:	4013      	ands	r3, r2
 80089dc:	d01d      	beq.n	8008a1a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2209      	movs	r2, #9
 80089e4:	4252      	negs	r2, r2
 80089e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2204      	movs	r2, #4
 80089ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	69db      	ldr	r3, [r3, #28]
 80089f4:	2203      	movs	r2, #3
 80089f6:	4013      	ands	r3, r2
 80089f8:	d004      	beq.n	8008a04 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	0018      	movs	r0, r3
 80089fe:	f000 f99d 	bl	8008d3c <HAL_TIM_IC_CaptureCallback>
 8008a02:	e007      	b.n	8008a14 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	0018      	movs	r0, r3
 8008a08:	f000 f990 	bl	8008d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	0018      	movs	r0, r3
 8008a10:	f000 f99c 	bl	8008d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	2210      	movs	r2, #16
 8008a1e:	4013      	ands	r3, r2
 8008a20:	d022      	beq.n	8008a68 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2210      	movs	r2, #16
 8008a26:	4013      	ands	r3, r2
 8008a28:	d01e      	beq.n	8008a68 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2211      	movs	r2, #17
 8008a30:	4252      	negs	r2, r2
 8008a32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2208      	movs	r2, #8
 8008a38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	69da      	ldr	r2, [r3, #28]
 8008a40:	23c0      	movs	r3, #192	@ 0xc0
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4013      	ands	r3, r2
 8008a46:	d004      	beq.n	8008a52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	0018      	movs	r0, r3
 8008a4c:	f000 f976 	bl	8008d3c <HAL_TIM_IC_CaptureCallback>
 8008a50:	e007      	b.n	8008a62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	0018      	movs	r0, r3
 8008a56:	f000 f969 	bl	8008d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	f000 f975 	bl	8008d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	d00c      	beq.n	8008a8a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2201      	movs	r2, #1
 8008a74:	4013      	ands	r3, r2
 8008a76:	d008      	beq.n	8008a8a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2202      	movs	r2, #2
 8008a7e:	4252      	negs	r2, r2
 8008a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	0018      	movs	r0, r3
 8008a86:	f7f9 fd89 	bl	800259c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	2280      	movs	r2, #128	@ 0x80
 8008a8e:	4013      	ands	r3, r2
 8008a90:	d104      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	2380      	movs	r3, #128	@ 0x80
 8008a96:	019b      	lsls	r3, r3, #6
 8008a98:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a9a:	d00b      	beq.n	8008ab4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2280      	movs	r2, #128	@ 0x80
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	d007      	beq.n	8008ab4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8008b24 <HAL_TIM_IRQHandler+0x208>)
 8008aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	0018      	movs	r0, r3
 8008ab0:	f000 fd10 	bl	80094d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	2380      	movs	r3, #128	@ 0x80
 8008ab8:	005b      	lsls	r3, r3, #1
 8008aba:	4013      	ands	r3, r2
 8008abc:	d00b      	beq.n	8008ad6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2280      	movs	r2, #128	@ 0x80
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	d007      	beq.n	8008ad6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a17      	ldr	r2, [pc, #92]	@ (8008b28 <HAL_TIM_IRQHandler+0x20c>)
 8008acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	f000 fd07 	bl	80094e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	2240      	movs	r2, #64	@ 0x40
 8008ada:	4013      	ands	r3, r2
 8008adc:	d00c      	beq.n	8008af8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2240      	movs	r2, #64	@ 0x40
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	d008      	beq.n	8008af8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2241      	movs	r2, #65	@ 0x41
 8008aec:	4252      	negs	r2, r2
 8008aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	0018      	movs	r0, r3
 8008af4:	f000 f932 	bl	8008d5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	2220      	movs	r2, #32
 8008afc:	4013      	ands	r3, r2
 8008afe:	d00c      	beq.n	8008b1a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2220      	movs	r2, #32
 8008b04:	4013      	ands	r3, r2
 8008b06:	d008      	beq.n	8008b1a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2221      	movs	r2, #33	@ 0x21
 8008b0e:	4252      	negs	r2, r2
 8008b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	0018      	movs	r0, r3
 8008b16:	f000 fcd5 	bl	80094c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b1a:	46c0      	nop			@ (mov r8, r8)
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	b004      	add	sp, #16
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	46c0      	nop			@ (mov r8, r8)
 8008b24:	ffffdf7f 	.word	0xffffdf7f
 8008b28:	fffffeff 	.word	0xfffffeff

08008b2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b38:	2317      	movs	r3, #23
 8008b3a:	18fb      	adds	r3, r7, r3
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	223c      	movs	r2, #60	@ 0x3c
 8008b44:	5c9b      	ldrb	r3, [r3, r2]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d101      	bne.n	8008b4e <HAL_TIM_PWM_ConfigChannel+0x22>
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	e0e5      	b.n	8008d1a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	223c      	movs	r2, #60	@ 0x3c
 8008b52:	2101      	movs	r1, #1
 8008b54:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b14      	cmp	r3, #20
 8008b5a:	d900      	bls.n	8008b5e <HAL_TIM_PWM_ConfigChannel+0x32>
 8008b5c:	e0d1      	b.n	8008d02 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	009a      	lsls	r2, r3, #2
 8008b62:	4b70      	ldr	r3, [pc, #448]	@ (8008d24 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8008b64:	18d3      	adds	r3, r2, r3
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	0011      	movs	r1, r2
 8008b72:	0018      	movs	r0, r3
 8008b74:	f000 f97e 	bl	8008e74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	699a      	ldr	r2, [r3, #24]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2108      	movs	r1, #8
 8008b84:	430a      	orrs	r2, r1
 8008b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	699a      	ldr	r2, [r3, #24]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2104      	movs	r1, #4
 8008b94:	438a      	bics	r2, r1
 8008b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6999      	ldr	r1, [r3, #24]
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	691a      	ldr	r2, [r3, #16]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	619a      	str	r2, [r3, #24]
      break;
 8008baa:	e0af      	b.n	8008d0c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	0011      	movs	r1, r2
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	f000 f9dd 	bl	8008f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	699a      	ldr	r2, [r3, #24]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2180      	movs	r1, #128	@ 0x80
 8008bc6:	0109      	lsls	r1, r1, #4
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	699a      	ldr	r2, [r3, #24]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4954      	ldr	r1, [pc, #336]	@ (8008d28 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008bd8:	400a      	ands	r2, r1
 8008bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6999      	ldr	r1, [r3, #24]
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	021a      	lsls	r2, r3, #8
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	430a      	orrs	r2, r1
 8008bee:	619a      	str	r2, [r3, #24]
      break;
 8008bf0:	e08c      	b.n	8008d0c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	0011      	movs	r1, r2
 8008bfa:	0018      	movs	r0, r3
 8008bfc:	f000 fa38 	bl	8009070 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	69da      	ldr	r2, [r3, #28]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2108      	movs	r1, #8
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	69da      	ldr	r2, [r3, #28]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2104      	movs	r1, #4
 8008c1c:	438a      	bics	r2, r1
 8008c1e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	69d9      	ldr	r1, [r3, #28]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	691a      	ldr	r2, [r3, #16]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	61da      	str	r2, [r3, #28]
      break;
 8008c32:	e06b      	b.n	8008d0c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	0011      	movs	r1, r2
 8008c3c:	0018      	movs	r0, r3
 8008c3e:	f000 fa99 	bl	8009174 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	69da      	ldr	r2, [r3, #28]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2180      	movs	r1, #128	@ 0x80
 8008c4e:	0109      	lsls	r1, r1, #4
 8008c50:	430a      	orrs	r2, r1
 8008c52:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	69da      	ldr	r2, [r3, #28]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4932      	ldr	r1, [pc, #200]	@ (8008d28 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008c60:	400a      	ands	r2, r1
 8008c62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	69d9      	ldr	r1, [r3, #28]
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	021a      	lsls	r2, r3, #8
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	61da      	str	r2, [r3, #28]
      break;
 8008c78:	e048      	b.n	8008d0c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	0011      	movs	r1, r2
 8008c82:	0018      	movs	r0, r3
 8008c84:	f000 fada 	bl	800923c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2108      	movs	r1, #8
 8008c94:	430a      	orrs	r2, r1
 8008c96:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2104      	movs	r1, #4
 8008ca4:	438a      	bics	r2, r1
 8008ca6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	691a      	ldr	r2, [r3, #16]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008cba:	e027      	b.n	8008d0c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	0011      	movs	r1, r2
 8008cc4:	0018      	movs	r0, r3
 8008cc6:	f000 fb13 	bl	80092f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2180      	movs	r1, #128	@ 0x80
 8008cd6:	0109      	lsls	r1, r1, #4
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4910      	ldr	r1, [pc, #64]	@ (8008d28 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008ce8:	400a      	ands	r2, r1
 8008cea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	021a      	lsls	r2, r3, #8
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008d00:	e004      	b.n	8008d0c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8008d02:	2317      	movs	r3, #23
 8008d04:	18fb      	adds	r3, r7, r3
 8008d06:	2201      	movs	r2, #1
 8008d08:	701a      	strb	r2, [r3, #0]
      break;
 8008d0a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	223c      	movs	r2, #60	@ 0x3c
 8008d10:	2100      	movs	r1, #0
 8008d12:	5499      	strb	r1, [r3, r2]

  return status;
 8008d14:	2317      	movs	r3, #23
 8008d16:	18fb      	adds	r3, r7, r3
 8008d18:	781b      	ldrb	r3, [r3, #0]
}
 8008d1a:	0018      	movs	r0, r3
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	b006      	add	sp, #24
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	46c0      	nop			@ (mov r8, r8)
 8008d24:	08009618 	.word	0x08009618
 8008d28:	fffffbff 	.word	0xfffffbff

08008d2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d34:	46c0      	nop			@ (mov r8, r8)
 8008d36:	46bd      	mov	sp, r7
 8008d38:	b002      	add	sp, #8
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d44:	46c0      	nop			@ (mov r8, r8)
 8008d46:	46bd      	mov	sp, r7
 8008d48:	b002      	add	sp, #8
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d54:	46c0      	nop			@ (mov r8, r8)
 8008d56:	46bd      	mov	sp, r7
 8008d58:	b002      	add	sp, #8
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d64:	46c0      	nop			@ (mov r8, r8)
 8008d66:	46bd      	mov	sp, r7
 8008d68:	b002      	add	sp, #8
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a37      	ldr	r2, [pc, #220]	@ (8008e5c <TIM_Base_SetConfig+0xf0>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d008      	beq.n	8008d96 <TIM_Base_SetConfig+0x2a>
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	2380      	movs	r3, #128	@ 0x80
 8008d88:	05db      	lsls	r3, r3, #23
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d003      	beq.n	8008d96 <TIM_Base_SetConfig+0x2a>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a33      	ldr	r2, [pc, #204]	@ (8008e60 <TIM_Base_SetConfig+0xf4>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d108      	bne.n	8008da8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2270      	movs	r2, #112	@ 0x70
 8008d9a:	4393      	bics	r3, r2
 8008d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a2c      	ldr	r2, [pc, #176]	@ (8008e5c <TIM_Base_SetConfig+0xf0>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d014      	beq.n	8008dda <TIM_Base_SetConfig+0x6e>
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	2380      	movs	r3, #128	@ 0x80
 8008db4:	05db      	lsls	r3, r3, #23
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d00f      	beq.n	8008dda <TIM_Base_SetConfig+0x6e>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a28      	ldr	r2, [pc, #160]	@ (8008e60 <TIM_Base_SetConfig+0xf4>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d00b      	beq.n	8008dda <TIM_Base_SetConfig+0x6e>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a27      	ldr	r2, [pc, #156]	@ (8008e64 <TIM_Base_SetConfig+0xf8>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d007      	beq.n	8008dda <TIM_Base_SetConfig+0x6e>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a26      	ldr	r2, [pc, #152]	@ (8008e68 <TIM_Base_SetConfig+0xfc>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d003      	beq.n	8008dda <TIM_Base_SetConfig+0x6e>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a25      	ldr	r2, [pc, #148]	@ (8008e6c <TIM_Base_SetConfig+0x100>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d108      	bne.n	8008dec <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	4a24      	ldr	r2, [pc, #144]	@ (8008e70 <TIM_Base_SetConfig+0x104>)
 8008dde:	4013      	ands	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2280      	movs	r2, #128	@ 0x80
 8008df0:	4393      	bics	r3, r2
 8008df2:	001a      	movs	r2, r3
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	689a      	ldr	r2, [r3, #8]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a11      	ldr	r2, [pc, #68]	@ (8008e5c <TIM_Base_SetConfig+0xf0>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d007      	beq.n	8008e2a <TIM_Base_SetConfig+0xbe>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a12      	ldr	r2, [pc, #72]	@ (8008e68 <TIM_Base_SetConfig+0xfc>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d003      	beq.n	8008e2a <TIM_Base_SetConfig+0xbe>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a11      	ldr	r2, [pc, #68]	@ (8008e6c <TIM_Base_SetConfig+0x100>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d103      	bne.n	8008e32 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	691a      	ldr	r2, [r3, #16]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	4013      	ands	r3, r2
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d106      	bne.n	8008e52 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	4393      	bics	r3, r2
 8008e4c:	001a      	movs	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	611a      	str	r2, [r3, #16]
  }
}
 8008e52:	46c0      	nop			@ (mov r8, r8)
 8008e54:	46bd      	mov	sp, r7
 8008e56:	b004      	add	sp, #16
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	46c0      	nop			@ (mov r8, r8)
 8008e5c:	40012c00 	.word	0x40012c00
 8008e60:	40000400 	.word	0x40000400
 8008e64:	40002000 	.word	0x40002000
 8008e68:	40014400 	.word	0x40014400
 8008e6c:	40014800 	.word	0x40014800
 8008e70:	fffffcff 	.word	0xfffffcff

08008e74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a1b      	ldr	r3, [r3, #32]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	4393      	bics	r3, r2
 8008e8c:	001a      	movs	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8008f5c <TIM_OC1_SetConfig+0xe8>)
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2203      	movs	r2, #3
 8008eaa:	4393      	bics	r3, r2
 8008eac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	2202      	movs	r2, #2
 8008ebc:	4393      	bics	r3, r2
 8008ebe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a24      	ldr	r2, [pc, #144]	@ (8008f60 <TIM_OC1_SetConfig+0xec>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d007      	beq.n	8008ee2 <TIM_OC1_SetConfig+0x6e>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a23      	ldr	r2, [pc, #140]	@ (8008f64 <TIM_OC1_SetConfig+0xf0>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d003      	beq.n	8008ee2 <TIM_OC1_SetConfig+0x6e>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a22      	ldr	r2, [pc, #136]	@ (8008f68 <TIM_OC1_SetConfig+0xf4>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d10c      	bne.n	8008efc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2208      	movs	r2, #8
 8008ee6:	4393      	bics	r3, r2
 8008ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	2204      	movs	r2, #4
 8008ef8:	4393      	bics	r3, r2
 8008efa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a18      	ldr	r2, [pc, #96]	@ (8008f60 <TIM_OC1_SetConfig+0xec>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d007      	beq.n	8008f14 <TIM_OC1_SetConfig+0xa0>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a17      	ldr	r2, [pc, #92]	@ (8008f64 <TIM_OC1_SetConfig+0xf0>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d003      	beq.n	8008f14 <TIM_OC1_SetConfig+0xa0>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a16      	ldr	r2, [pc, #88]	@ (8008f68 <TIM_OC1_SetConfig+0xf4>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d111      	bne.n	8008f38 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	4a15      	ldr	r2, [pc, #84]	@ (8008f6c <TIM_OC1_SetConfig+0xf8>)
 8008f18:	4013      	ands	r3, r2
 8008f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	4a14      	ldr	r2, [pc, #80]	@ (8008f70 <TIM_OC1_SetConfig+0xfc>)
 8008f20:	4013      	ands	r3, r2
 8008f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	693a      	ldr	r2, [r7, #16]
 8008f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	621a      	str	r2, [r3, #32]
}
 8008f52:	46c0      	nop			@ (mov r8, r8)
 8008f54:	46bd      	mov	sp, r7
 8008f56:	b006      	add	sp, #24
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	46c0      	nop			@ (mov r8, r8)
 8008f5c:	fffeff8f 	.word	0xfffeff8f
 8008f60:	40012c00 	.word	0x40012c00
 8008f64:	40014400 	.word	0x40014400
 8008f68:	40014800 	.word	0x40014800
 8008f6c:	fffffeff 	.word	0xfffffeff
 8008f70:	fffffdff 	.word	0xfffffdff

08008f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	2210      	movs	r2, #16
 8008f8a:	4393      	bics	r3, r2
 8008f8c:	001a      	movs	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	4a2c      	ldr	r2, [pc, #176]	@ (8009054 <TIM_OC2_SetConfig+0xe0>)
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8009058 <TIM_OC2_SetConfig+0xe4>)
 8008faa:	4013      	ands	r3, r2
 8008fac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	021b      	lsls	r3, r3, #8
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	4393      	bics	r3, r2
 8008fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	011b      	lsls	r3, r3, #4
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a22      	ldr	r2, [pc, #136]	@ (800905c <TIM_OC2_SetConfig+0xe8>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d10d      	bne.n	8008ff2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	2280      	movs	r2, #128	@ 0x80
 8008fda:	4393      	bics	r3, r2
 8008fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	011b      	lsls	r3, r3, #4
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	2240      	movs	r2, #64	@ 0x40
 8008fee:	4393      	bics	r3, r2
 8008ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a19      	ldr	r2, [pc, #100]	@ (800905c <TIM_OC2_SetConfig+0xe8>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d007      	beq.n	800900a <TIM_OC2_SetConfig+0x96>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a18      	ldr	r2, [pc, #96]	@ (8009060 <TIM_OC2_SetConfig+0xec>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d003      	beq.n	800900a <TIM_OC2_SetConfig+0x96>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a17      	ldr	r2, [pc, #92]	@ (8009064 <TIM_OC2_SetConfig+0xf0>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d113      	bne.n	8009032 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	4a16      	ldr	r2, [pc, #88]	@ (8009068 <TIM_OC2_SetConfig+0xf4>)
 800900e:	4013      	ands	r3, r2
 8009010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	4a15      	ldr	r2, [pc, #84]	@ (800906c <TIM_OC2_SetConfig+0xf8>)
 8009016:	4013      	ands	r3, r2
 8009018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	4313      	orrs	r3, r2
 8009024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	4313      	orrs	r3, r2
 8009030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	685a      	ldr	r2, [r3, #4]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	697a      	ldr	r2, [r7, #20]
 800904a:	621a      	str	r2, [r3, #32]
}
 800904c:	46c0      	nop			@ (mov r8, r8)
 800904e:	46bd      	mov	sp, r7
 8009050:	b006      	add	sp, #24
 8009052:	bd80      	pop	{r7, pc}
 8009054:	feff8fff 	.word	0xfeff8fff
 8009058:	fffffcff 	.word	0xfffffcff
 800905c:	40012c00 	.word	0x40012c00
 8009060:	40014400 	.word	0x40014400
 8009064:	40014800 	.word	0x40014800
 8009068:	fffffbff 	.word	0xfffffbff
 800906c:	fffff7ff 	.word	0xfffff7ff

08009070 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a1b      	ldr	r3, [r3, #32]
 8009084:	4a31      	ldr	r2, [pc, #196]	@ (800914c <TIM_OC3_SetConfig+0xdc>)
 8009086:	401a      	ands	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	69db      	ldr	r3, [r3, #28]
 8009096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	4a2d      	ldr	r2, [pc, #180]	@ (8009150 <TIM_OC3_SetConfig+0xe0>)
 800909c:	4013      	ands	r3, r2
 800909e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2203      	movs	r2, #3
 80090a4:	4393      	bics	r3, r2
 80090a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	4a27      	ldr	r2, [pc, #156]	@ (8009154 <TIM_OC3_SetConfig+0xe4>)
 80090b6:	4013      	ands	r3, r2
 80090b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	021b      	lsls	r3, r3, #8
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a23      	ldr	r2, [pc, #140]	@ (8009158 <TIM_OC3_SetConfig+0xe8>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d10d      	bne.n	80090ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	4a22      	ldr	r2, [pc, #136]	@ (800915c <TIM_OC3_SetConfig+0xec>)
 80090d2:	4013      	ands	r3, r2
 80090d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	021b      	lsls	r3, r3, #8
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	4313      	orrs	r3, r2
 80090e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	4a1e      	ldr	r2, [pc, #120]	@ (8009160 <TIM_OC3_SetConfig+0xf0>)
 80090e6:	4013      	ands	r3, r2
 80090e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a1a      	ldr	r2, [pc, #104]	@ (8009158 <TIM_OC3_SetConfig+0xe8>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d007      	beq.n	8009102 <TIM_OC3_SetConfig+0x92>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a1b      	ldr	r2, [pc, #108]	@ (8009164 <TIM_OC3_SetConfig+0xf4>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d003      	beq.n	8009102 <TIM_OC3_SetConfig+0x92>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a1a      	ldr	r2, [pc, #104]	@ (8009168 <TIM_OC3_SetConfig+0xf8>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d113      	bne.n	800912a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	4a19      	ldr	r2, [pc, #100]	@ (800916c <TIM_OC3_SetConfig+0xfc>)
 8009106:	4013      	ands	r3, r2
 8009108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	4a18      	ldr	r2, [pc, #96]	@ (8009170 <TIM_OC3_SetConfig+0x100>)
 800910e:	4013      	ands	r3, r2
 8009110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	695b      	ldr	r3, [r3, #20]
 8009116:	011b      	lsls	r3, r3, #4
 8009118:	693a      	ldr	r2, [r7, #16]
 800911a:	4313      	orrs	r3, r2
 800911c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	011b      	lsls	r3, r3, #4
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	4313      	orrs	r3, r2
 8009128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	621a      	str	r2, [r3, #32]
}
 8009144:	46c0      	nop			@ (mov r8, r8)
 8009146:	46bd      	mov	sp, r7
 8009148:	b006      	add	sp, #24
 800914a:	bd80      	pop	{r7, pc}
 800914c:	fffffeff 	.word	0xfffffeff
 8009150:	fffeff8f 	.word	0xfffeff8f
 8009154:	fffffdff 	.word	0xfffffdff
 8009158:	40012c00 	.word	0x40012c00
 800915c:	fffff7ff 	.word	0xfffff7ff
 8009160:	fffffbff 	.word	0xfffffbff
 8009164:	40014400 	.word	0x40014400
 8009168:	40014800 	.word	0x40014800
 800916c:	ffffefff 	.word	0xffffefff
 8009170:	ffffdfff 	.word	0xffffdfff

08009174 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a1b      	ldr	r3, [r3, #32]
 8009188:	4a24      	ldr	r2, [pc, #144]	@ (800921c <TIM_OC4_SetConfig+0xa8>)
 800918a:	401a      	ands	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	4a20      	ldr	r2, [pc, #128]	@ (8009220 <TIM_OC4_SetConfig+0xac>)
 80091a0:	4013      	ands	r3, r2
 80091a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4a1f      	ldr	r2, [pc, #124]	@ (8009224 <TIM_OC4_SetConfig+0xb0>)
 80091a8:	4013      	ands	r3, r2
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	021b      	lsls	r3, r3, #8
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	4a1b      	ldr	r2, [pc, #108]	@ (8009228 <TIM_OC4_SetConfig+0xb4>)
 80091bc:	4013      	ands	r3, r2
 80091be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	031b      	lsls	r3, r3, #12
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a17      	ldr	r2, [pc, #92]	@ (800922c <TIM_OC4_SetConfig+0xb8>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d007      	beq.n	80091e4 <TIM_OC4_SetConfig+0x70>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a16      	ldr	r2, [pc, #88]	@ (8009230 <TIM_OC4_SetConfig+0xbc>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d003      	beq.n	80091e4 <TIM_OC4_SetConfig+0x70>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a15      	ldr	r2, [pc, #84]	@ (8009234 <TIM_OC4_SetConfig+0xc0>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d109      	bne.n	80091f8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	4a14      	ldr	r2, [pc, #80]	@ (8009238 <TIM_OC4_SetConfig+0xc4>)
 80091e8:	4013      	ands	r3, r2
 80091ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	695b      	ldr	r3, [r3, #20]
 80091f0:	019b      	lsls	r3, r3, #6
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	621a      	str	r2, [r3, #32]
}
 8009212:	46c0      	nop			@ (mov r8, r8)
 8009214:	46bd      	mov	sp, r7
 8009216:	b006      	add	sp, #24
 8009218:	bd80      	pop	{r7, pc}
 800921a:	46c0      	nop			@ (mov r8, r8)
 800921c:	ffffefff 	.word	0xffffefff
 8009220:	feff8fff 	.word	0xfeff8fff
 8009224:	fffffcff 	.word	0xfffffcff
 8009228:	ffffdfff 	.word	0xffffdfff
 800922c:	40012c00 	.word	0x40012c00
 8009230:	40014400 	.word	0x40014400
 8009234:	40014800 	.word	0x40014800
 8009238:	ffffbfff 	.word	0xffffbfff

0800923c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a1b      	ldr	r3, [r3, #32]
 8009250:	4a21      	ldr	r2, [pc, #132]	@ (80092d8 <TIM_OC5_SetConfig+0x9c>)
 8009252:	401a      	ands	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4a1d      	ldr	r2, [pc, #116]	@ (80092dc <TIM_OC5_SetConfig+0xa0>)
 8009268:	4013      	ands	r3, r2
 800926a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	4313      	orrs	r3, r2
 8009274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	4a19      	ldr	r2, [pc, #100]	@ (80092e0 <TIM_OC5_SetConfig+0xa4>)
 800927a:	4013      	ands	r3, r2
 800927c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	041b      	lsls	r3, r3, #16
 8009284:	693a      	ldr	r2, [r7, #16]
 8009286:	4313      	orrs	r3, r2
 8009288:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a15      	ldr	r2, [pc, #84]	@ (80092e4 <TIM_OC5_SetConfig+0xa8>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d007      	beq.n	80092a2 <TIM_OC5_SetConfig+0x66>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a14      	ldr	r2, [pc, #80]	@ (80092e8 <TIM_OC5_SetConfig+0xac>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d003      	beq.n	80092a2 <TIM_OC5_SetConfig+0x66>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a13      	ldr	r2, [pc, #76]	@ (80092ec <TIM_OC5_SetConfig+0xb0>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d109      	bne.n	80092b6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	4a0c      	ldr	r2, [pc, #48]	@ (80092d8 <TIM_OC5_SetConfig+0x9c>)
 80092a6:	4013      	ands	r3, r2
 80092a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	021b      	lsls	r3, r3, #8
 80092b0:	697a      	ldr	r2, [r7, #20]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	697a      	ldr	r2, [r7, #20]
 80092ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	685a      	ldr	r2, [r3, #4]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	621a      	str	r2, [r3, #32]
}
 80092d0:	46c0      	nop			@ (mov r8, r8)
 80092d2:	46bd      	mov	sp, r7
 80092d4:	b006      	add	sp, #24
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	fffeffff 	.word	0xfffeffff
 80092dc:	fffeff8f 	.word	0xfffeff8f
 80092e0:	fffdffff 	.word	0xfffdffff
 80092e4:	40012c00 	.word	0x40012c00
 80092e8:	40014400 	.word	0x40014400
 80092ec:	40014800 	.word	0x40014800

080092f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a1b      	ldr	r3, [r3, #32]
 8009304:	4a22      	ldr	r2, [pc, #136]	@ (8009390 <TIM_OC6_SetConfig+0xa0>)
 8009306:	401a      	ands	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	4a1e      	ldr	r2, [pc, #120]	@ (8009394 <TIM_OC6_SetConfig+0xa4>)
 800931c:	4013      	ands	r3, r2
 800931e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	021b      	lsls	r3, r3, #8
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	4313      	orrs	r3, r2
 800932a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	4a1a      	ldr	r2, [pc, #104]	@ (8009398 <TIM_OC6_SetConfig+0xa8>)
 8009330:	4013      	ands	r3, r2
 8009332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	051b      	lsls	r3, r3, #20
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	4313      	orrs	r3, r2
 800933e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a16      	ldr	r2, [pc, #88]	@ (800939c <TIM_OC6_SetConfig+0xac>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d007      	beq.n	8009358 <TIM_OC6_SetConfig+0x68>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a15      	ldr	r2, [pc, #84]	@ (80093a0 <TIM_OC6_SetConfig+0xb0>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d003      	beq.n	8009358 <TIM_OC6_SetConfig+0x68>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a14      	ldr	r2, [pc, #80]	@ (80093a4 <TIM_OC6_SetConfig+0xb4>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d109      	bne.n	800936c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	4a13      	ldr	r2, [pc, #76]	@ (80093a8 <TIM_OC6_SetConfig+0xb8>)
 800935c:	4013      	ands	r3, r2
 800935e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	695b      	ldr	r3, [r3, #20]
 8009364:	029b      	lsls	r3, r3, #10
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	4313      	orrs	r3, r2
 800936a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	693a      	ldr	r2, [r7, #16]
 8009384:	621a      	str	r2, [r3, #32]
}
 8009386:	46c0      	nop			@ (mov r8, r8)
 8009388:	46bd      	mov	sp, r7
 800938a:	b006      	add	sp, #24
 800938c:	bd80      	pop	{r7, pc}
 800938e:	46c0      	nop			@ (mov r8, r8)
 8009390:	ffefffff 	.word	0xffefffff
 8009394:	feff8fff 	.word	0xfeff8fff
 8009398:	ffdfffff 	.word	0xffdfffff
 800939c:	40012c00 	.word	0x40012c00
 80093a0:	40014400 	.word	0x40014400
 80093a4:	40014800 	.word	0x40014800
 80093a8:	fffbffff 	.word	0xfffbffff

080093ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b086      	sub	sp, #24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	221f      	movs	r2, #31
 80093bc:	4013      	ands	r3, r2
 80093be:	2201      	movs	r2, #1
 80093c0:	409a      	lsls	r2, r3
 80093c2:	0013      	movs	r3, r2
 80093c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6a1b      	ldr	r3, [r3, #32]
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	43d2      	mvns	r2, r2
 80093ce:	401a      	ands	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6a1a      	ldr	r2, [r3, #32]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	211f      	movs	r1, #31
 80093dc:	400b      	ands	r3, r1
 80093de:	6879      	ldr	r1, [r7, #4]
 80093e0:	4099      	lsls	r1, r3
 80093e2:	000b      	movs	r3, r1
 80093e4:	431a      	orrs	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	621a      	str	r2, [r3, #32]
}
 80093ea:	46c0      	nop			@ (mov r8, r8)
 80093ec:	46bd      	mov	sp, r7
 80093ee:	b006      	add	sp, #24
 80093f0:	bd80      	pop	{r7, pc}
	...

080093f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	223c      	movs	r2, #60	@ 0x3c
 8009402:	5c9b      	ldrb	r3, [r3, r2]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d101      	bne.n	800940c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009408:	2302      	movs	r3, #2
 800940a:	e050      	b.n	80094ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	223c      	movs	r2, #60	@ 0x3c
 8009410:	2101      	movs	r1, #1
 8009412:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	223d      	movs	r2, #61	@ 0x3d
 8009418:	2102      	movs	r1, #2
 800941a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a21      	ldr	r2, [pc, #132]	@ (80094b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d108      	bne.n	8009448 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	4a20      	ldr	r2, [pc, #128]	@ (80094bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800943a:	4013      	ands	r3, r2
 800943c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	4313      	orrs	r3, r2
 8009446:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2270      	movs	r2, #112	@ 0x70
 800944c:	4393      	bics	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	4313      	orrs	r3, r2
 8009458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a14      	ldr	r2, [pc, #80]	@ (80094b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d00a      	beq.n	8009482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	2380      	movs	r3, #128	@ 0x80
 8009472:	05db      	lsls	r3, r3, #23
 8009474:	429a      	cmp	r2, r3
 8009476:	d004      	beq.n	8009482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a10      	ldr	r2, [pc, #64]	@ (80094c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d10c      	bne.n	800949c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	2280      	movs	r2, #128	@ 0x80
 8009486:	4393      	bics	r3, r2
 8009488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	4313      	orrs	r3, r2
 8009492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	223d      	movs	r2, #61	@ 0x3d
 80094a0:	2101      	movs	r1, #1
 80094a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	223c      	movs	r2, #60	@ 0x3c
 80094a8:	2100      	movs	r1, #0
 80094aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	0018      	movs	r0, r3
 80094b0:	46bd      	mov	sp, r7
 80094b2:	b004      	add	sp, #16
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	46c0      	nop			@ (mov r8, r8)
 80094b8:	40012c00 	.word	0x40012c00
 80094bc:	ff0fffff 	.word	0xff0fffff
 80094c0:	40000400 	.word	0x40000400

080094c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094cc:	46c0      	nop			@ (mov r8, r8)
 80094ce:	46bd      	mov	sp, r7
 80094d0:	b002      	add	sp, #8
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094dc:	46c0      	nop			@ (mov r8, r8)
 80094de:	46bd      	mov	sp, r7
 80094e0:	b002      	add	sp, #8
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80094ec:	46c0      	nop			@ (mov r8, r8)
 80094ee:	46bd      	mov	sp, r7
 80094f0:	b002      	add	sp, #8
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <memset>:
 80094f4:	0003      	movs	r3, r0
 80094f6:	1882      	adds	r2, r0, r2
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d100      	bne.n	80094fe <memset+0xa>
 80094fc:	4770      	bx	lr
 80094fe:	7019      	strb	r1, [r3, #0]
 8009500:	3301      	adds	r3, #1
 8009502:	e7f9      	b.n	80094f8 <memset+0x4>

08009504 <__libc_init_array>:
 8009504:	b570      	push	{r4, r5, r6, lr}
 8009506:	2600      	movs	r6, #0
 8009508:	4c0c      	ldr	r4, [pc, #48]	@ (800953c <__libc_init_array+0x38>)
 800950a:	4d0d      	ldr	r5, [pc, #52]	@ (8009540 <__libc_init_array+0x3c>)
 800950c:	1b64      	subs	r4, r4, r5
 800950e:	10a4      	asrs	r4, r4, #2
 8009510:	42a6      	cmp	r6, r4
 8009512:	d109      	bne.n	8009528 <__libc_init_array+0x24>
 8009514:	2600      	movs	r6, #0
 8009516:	f000 f823 	bl	8009560 <_init>
 800951a:	4c0a      	ldr	r4, [pc, #40]	@ (8009544 <__libc_init_array+0x40>)
 800951c:	4d0a      	ldr	r5, [pc, #40]	@ (8009548 <__libc_init_array+0x44>)
 800951e:	1b64      	subs	r4, r4, r5
 8009520:	10a4      	asrs	r4, r4, #2
 8009522:	42a6      	cmp	r6, r4
 8009524:	d105      	bne.n	8009532 <__libc_init_array+0x2e>
 8009526:	bd70      	pop	{r4, r5, r6, pc}
 8009528:	00b3      	lsls	r3, r6, #2
 800952a:	58eb      	ldr	r3, [r5, r3]
 800952c:	4798      	blx	r3
 800952e:	3601      	adds	r6, #1
 8009530:	e7ee      	b.n	8009510 <__libc_init_array+0xc>
 8009532:	00b3      	lsls	r3, r6, #2
 8009534:	58eb      	ldr	r3, [r5, r3]
 8009536:	4798      	blx	r3
 8009538:	3601      	adds	r6, #1
 800953a:	e7f2      	b.n	8009522 <__libc_init_array+0x1e>
 800953c:	0800966c 	.word	0x0800966c
 8009540:	0800966c 	.word	0x0800966c
 8009544:	08009670 	.word	0x08009670
 8009548:	0800966c 	.word	0x0800966c

0800954c <memcpy>:
 800954c:	2300      	movs	r3, #0
 800954e:	b510      	push	{r4, lr}
 8009550:	429a      	cmp	r2, r3
 8009552:	d100      	bne.n	8009556 <memcpy+0xa>
 8009554:	bd10      	pop	{r4, pc}
 8009556:	5ccc      	ldrb	r4, [r1, r3]
 8009558:	54c4      	strb	r4, [r0, r3]
 800955a:	3301      	adds	r3, #1
 800955c:	e7f8      	b.n	8009550 <memcpy+0x4>
	...

08009560 <_init>:
 8009560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009562:	46c0      	nop			@ (mov r8, r8)
 8009564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009566:	bc08      	pop	{r3}
 8009568:	469e      	mov	lr, r3
 800956a:	4770      	bx	lr

0800956c <_fini>:
 800956c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956e:	46c0      	nop			@ (mov r8, r8)
 8009570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009572:	bc08      	pop	{r3}
 8009574:	469e      	mov	lr, r3
 8009576:	4770      	bx	lr
