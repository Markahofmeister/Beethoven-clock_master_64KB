
Beethoven-clock_master_64KB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092dc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08009398  08009398  0000a398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800948c  0800948c  0000b098  2**0
                  CONTENTS
  4 .ARM          00000000  0800948c  0800948c  0000b098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800948c  0800948c  0000b098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800948c  0800948c  0000a48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009490  08009490  0000a490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08009494  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  20000098  0800952c  0000b098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  0800952c  0000b5f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fe8  00000000  00000000  0000b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a7  00000000  00000000  000230a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00026750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e2  00000000  00000000  00027e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194f5  00000000  00000000  00029022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c626  00000000  00000000  00042517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c63d  00000000  00000000  0005eb3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb17a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000536c  00000000  00000000  000fb1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010052c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000098 	.word	0x20000098
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009380 	.word	0x08009380

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000009c 	.word	0x2000009c
 8000100:	08009380 	.word	0x08009380

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-low hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2200      	movs	r2, #0
 800025a:	0019      	movs	r1, r3
 800025c:	f004 f82b 	bl	80042b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2201      	movs	r2, #1
 800026c:	0019      	movs	r1, r3
 800026e:	f004 f822 	bl	80042b6 <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f008 f882 	bl	8008380 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f008 f831 	bl	80082e8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f004 f835 	bl	80044c8 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f004 f949 	bl	800471c <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	08009398 	.word	0x08009398

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f003 fff7 	bl	80044c8 <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f003 ffd1 	bl	80044c8 <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f004 f8e5 	bl	800471c <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	0800939c 	.word	0x0800939c

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f003 ff8d 	bl	80044c8 <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f004 f8a1 	bl	800471c <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	080093a0 	.word	0x080093a0

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f003 ff3d 	bl	80044c8 <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f004 f851 	bl	800471c <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	080093a4 	.word	0x080093a4
 8000700:	080093ac 	.word	0x080093ac

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f003 febb 	bl	80044c8 <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f003 ffcf 	bl	800471c <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f003 fe5c 	bl	80044c8 <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f003 fe3b 	bl	80044c8 <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f003 ff4f 	bl	800471c <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	080093a4 	.word	0x080093a4
 8000894:	080093ac 	.word	0x080093ac

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f003 fde1 	bl	80044c8 <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f003 fdbf 	bl	80044c8 <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f003 fedc 	bl	800471c <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	080093b4 	.word	0x080093b4
 8000978:	080093a4 	.word	0x080093a4

0800097c <NAU8315YG_Init>:

#ifndef NAU8315YG_H_
#include "../Inc/NAU8315YG.h"
#endif

void NAU8315YG_Init(NAU8315YG *nau, I2S_HandleTypeDef *hi2s, GPIO_TypeDef *enablePort, uint32_t enablePin) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	603b      	str	r3, [r7, #0]

	nau->hi2s = hi2s;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	601a      	str	r2, [r3, #0]

	nau->enablePort = enablePort;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	605a      	str	r2, [r3, #4]
	nau->enablePin = enablePin;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	609a      	str	r2, [r3, #8]

	NAU8315YG_AmpDisable(nau);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f818 	bl	80009d4 <NAU8315YG_AmpDisable>

}
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b004      	add	sp, #16
 80009aa:	bd80      	pop	{r7, pc}

080009ac <NAU8315YG_AmpEnable>:

void NAU8315YG_AmpEnable(NAU8315YG *nau) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

	// Set enable pin high
	HAL_GPIO_WritePin(nau->enablePort, nau->enablePin, GPIO_PIN_SET);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6858      	ldr	r0, [r3, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	2201      	movs	r2, #1
 80009c0:	0019      	movs	r1, r3
 80009c2:	f003 fc78 	bl	80042b6 <HAL_GPIO_WritePin>

	nau->ampEnableFlag = 1;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2201      	movs	r2, #1
 80009ca:	731a      	strb	r2, [r3, #12]

}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <NAU8315YG_AmpDisable>:


void NAU8315YG_AmpDisable(NAU8315YG *nau) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

	// Set enable pin high
	HAL_GPIO_WritePin(nau->enablePort, nau->enablePin, GPIO_PIN_RESET);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6858      	ldr	r0, [r3, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	2200      	movs	r2, #0
 80009e8:	0019      	movs	r1, r3
 80009ea:	f003 fc64 	bl	80042b6 <HAL_GPIO_WritePin>

	nau->ampEnableFlag = 0;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	731a      	strb	r2, [r3, #12]

}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b002      	add	sp, #8
 80009fa:	bd80      	pop	{r7, pc}

080009fc <W25Q_Init>:
#endif


uint8_t W25Q_Init(W25Q *wq, GPIO_TypeDef *nCSPort, GPIO_TypeDef *nWPPort, GPIO_TypeDef *nHOLDPort,
					uint32_t nCSPin, uint32_t nWPPin, uint32_t nHOLDPin, SPI_HandleTypeDef *hspi,
					uint8_t devID, uint8_t isQuadChip, uint8_t driveStrength) {
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
 8000a08:	603b      	str	r3, [r7, #0]

	// Map struct GPIO Ports & Pins to passed parameters
	wq->nCSPort = nCSPort;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	601a      	str	r2, [r3, #0]
	wq->nWPPort = nWPPort;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	605a      	str	r2, [r3, #4]
	wq->nHOLDPort = nHOLDPort;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	609a      	str	r2, [r3, #8]

	wq->nCSPin = nCSPin;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a20:	60da      	str	r2, [r3, #12]
	wq->nWPPin = nWPPin;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a26:	611a      	str	r2, [r3, #16]
	wq->nHOLDPin = nHOLDPin;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a2c:	615a      	str	r2, [r3, #20]

	wq->hspi = hspi;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a32:	619a      	str	r2, [r3, #24]

	wq->quadEnable = isQuadChip;		// Default state depends on PN of chip.
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	223c      	movs	r2, #60	@ 0x3c
 8000a38:	2108      	movs	r1, #8
 8000a3a:	1852      	adds	r2, r2, r1
 8000a3c:	19d2      	adds	r2, r2, r7
 8000a3e:	2125      	movs	r1, #37	@ 0x25
 8000a40:	7812      	ldrb	r2, [r2, #0]
 8000a42:	545a      	strb	r2, [r3, r1]
	wq->writeEnable = 0;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2223      	movs	r2, #35	@ 0x23
 8000a48:	2100      	movs	r1, #0
 8000a4a:	5499      	strb	r1, [r3, r2]

	// Set CS pin high
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	2201      	movs	r2, #1
 8000a58:	0019      	movs	r1, r3
 8000a5a:	f003 fc2c 	bl	80042b6 <HAL_GPIO_WritePin>

	// Set hold pin high (Disable)
	HAL_GPIO_WritePin(wq->nHOLDPort, wq->nHOLDPin, GPIO_PIN_SET);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6898      	ldr	r0, [r3, #8]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	2201      	movs	r2, #1
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	f003 fc23 	bl	80042b6 <HAL_GPIO_WritePin>

	// Set WP pin high (disable)
	HAL_GPIO_WritePin(wq->nWPPort, wq->nWPPin, GPIO_PIN_SET);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6858      	ldr	r0, [r3, #4]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	f003 fc1a 	bl	80042b6 <HAL_GPIO_WritePin>

	// HAL status handle used to indicate error messages
	HAL_StatusTypeDef halRet = HAL_OK;
 8000a82:	2116      	movs	r1, #22
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]

	uint8_t returnInc = 1;			// Integer error code return, incremented after successful things.
 8000a8a:	2617      	movs	r6, #23
 8000a8c:	19bb      	adds	r3, r7, r6
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]

	uint8_t errorsEnabled = 1;		// Use for debugging
 8000a92:	2315      	movs	r3, #21
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]

	// Release from power down mode
	halRet = W25Q_ReleasePowerDown(wq);
 8000a9a:	000d      	movs	r5, r1
 8000a9c:	187c      	adds	r4, r7, r1
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f000 f8ea 	bl	8000c7a <W25Q_ReleasePowerDown>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000aaa:	197b      	adds	r3, r7, r5
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d007      	beq.n	8000ac2 <W25Q_Init+0xc6>
 8000ab2:	2315      	movs	r3, #21
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d002      	beq.n	8000ac2 <W25Q_Init+0xc6>
		return returnInc;
 8000abc:	19bb      	adds	r3, r7, r6
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	e0d7      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000ac2:	2517      	movs	r5, #23
 8000ac4:	197b      	adds	r3, r7, r5
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	197b      	adds	r3, r7, r5
 8000aca:	3201      	adds	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]

	// Reset Device
	halRet = W25Q_ChipReset(wq);
 8000ace:	2616      	movs	r6, #22
 8000ad0:	19bc      	adds	r4, r7, r6
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 fc45 	bl	8001364 <W25Q_ChipReset>
 8000ada:	0003      	movs	r3, r0
 8000adc:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000ade:	19bb      	adds	r3, r7, r6
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d007      	beq.n	8000af6 <W25Q_Init+0xfa>
 8000ae6:	2315      	movs	r3, #21
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <W25Q_Init+0xfa>
		return returnInc;
 8000af0:	197b      	adds	r3, r7, r5
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	e0bd      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000af6:	2517      	movs	r5, #23
 8000af8:	197b      	adds	r3, r7, r5
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	197b      	adds	r3, r7, r5
 8000afe:	3201      	adds	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]

	// Read initial Status Registers
	halRet = W25Q_ReadStatusRegs(wq);
 8000b02:	2616      	movs	r6, #22
 8000b04:	19bc      	adds	r4, r7, r6
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 faef 	bl	80010ec <W25Q_ReadStatusRegs>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b12:	19bb      	adds	r3, r7, r6
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d007      	beq.n	8000b2a <W25Q_Init+0x12e>
 8000b1a:	2315      	movs	r3, #21
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <W25Q_Init+0x12e>
		return returnInc;
 8000b24:	197b      	adds	r3, r7, r5
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	e0a3      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000b2a:	2517      	movs	r5, #23
 8000b2c:	197b      	adds	r3, r7, r5
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	197b      	adds	r3, r7, r5
 8000b32:	3201      	adds	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]

	// Increase driver strength?
	halRet = W25Q_SetDriverStrength(wq, driveStrength);
 8000b36:	2616      	movs	r6, #22
 8000b38:	19bc      	adds	r4, r7, r6
 8000b3a:	2340      	movs	r3, #64	@ 0x40
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	189b      	adds	r3, r3, r2
 8000b40:	19db      	adds	r3, r3, r7
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	0011      	movs	r1, r2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 fc75 	bl	8001438 <W25Q_SetDriverStrength>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b52:	19bb      	adds	r3, r7, r6
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d007      	beq.n	8000b6a <W25Q_Init+0x16e>
 8000b5a:	2315      	movs	r3, #21
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d002      	beq.n	8000b6a <W25Q_Init+0x16e>
		return returnInc;
 8000b64:	197b      	adds	r3, r7, r5
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	e083      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000b6a:	2517      	movs	r5, #23
 8000b6c:	197b      	adds	r3, r7, r5
 8000b6e:	781a      	ldrb	r2, [r3, #0]
 8000b70:	197b      	adds	r3, r7, r5
 8000b72:	3201      	adds	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
//			returnInc++;
//	}


	// Get + Store IDs
	halRet = W25Q_GetIDs(wq, devID);
 8000b76:	2616      	movs	r6, #22
 8000b78:	19bc      	adds	r4, r7, r6
 8000b7a:	2338      	movs	r3, #56	@ 0x38
 8000b7c:	2208      	movs	r2, #8
 8000b7e:	189b      	adds	r3, r3, r2
 8000b80:	19db      	adds	r3, r3, r7
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	0011      	movs	r1, r2
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 f8bb 	bl	8000d04 <W25Q_GetIDs>
 8000b8e:	0003      	movs	r3, r0
 8000b90:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b92:	19bb      	adds	r3, r7, r6
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d007      	beq.n	8000baa <W25Q_Init+0x1ae>
 8000b9a:	2315      	movs	r3, #21
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <W25Q_Init+0x1ae>
		return returnInc;
 8000ba4:	197b      	adds	r3, r7, r5
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	e063      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000baa:	2517      	movs	r5, #23
 8000bac:	197b      	adds	r3, r7, r5
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	197b      	adds	r3, r7, r5
 8000bb2:	3201      	adds	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]

	// Get + Store Status Register Contents
	halRet = W25Q_ReadStatusRegs(wq);
 8000bb6:	2616      	movs	r6, #22
 8000bb8:	19bc      	adds	r4, r7, r6
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f000 fa95 	bl	80010ec <W25Q_ReadStatusRegs>
 8000bc2:	0003      	movs	r3, r0
 8000bc4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000bc6:	19bb      	adds	r3, r7, r6
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d007      	beq.n	8000bde <W25Q_Init+0x1e2>
 8000bce:	2315      	movs	r3, #21
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d002      	beq.n	8000bde <W25Q_Init+0x1e2>
		return returnInc;
 8000bd8:	197b      	adds	r3, r7, r5
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	e049      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000bde:	2517      	movs	r5, #23
 8000be0:	197b      	adds	r3, r7, r5
 8000be2:	781a      	ldrb	r2, [r3, #0]
 8000be4:	197b      	adds	r3, r7, r5
 8000be6:	3201      	adds	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]

	// Disable Write Access to Memory
	if(wq->writeEnable != 0) {
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2223      	movs	r2, #35	@ 0x23
 8000bee:	5c9b      	ldrb	r3, [r3, r2]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d019      	beq.n	8000c28 <W25Q_Init+0x22c>
		halRet = W25Q_DisableWrite(wq);
 8000bf4:	2616      	movs	r6, #22
 8000bf6:	19bc      	adds	r4, r7, r6
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 f985 	bl	8000f0a <W25Q_DisableWrite>
 8000c00:	0003      	movs	r3, r0
 8000c02:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK && errorsEnabled)
 8000c04:	19bb      	adds	r3, r7, r6
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d007      	beq.n	8000c1c <W25Q_Init+0x220>
 8000c0c:	2315      	movs	r3, #21
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <W25Q_Init+0x220>
			return returnInc;
 8000c16:	197b      	adds	r3, r7, r5
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	e02a      	b.n	8000c72 <W25Q_Init+0x276>
		else
			returnInc++;
 8000c1c:	2117      	movs	r1, #23
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	3201      	adds	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
	}

	// Get + Store Status Register Contents
	halRet = W25Q_ReadStatusRegs(wq);
 8000c28:	2516      	movs	r5, #22
 8000c2a:	197c      	adds	r4, r7, r5
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 fa5c 	bl	80010ec <W25Q_ReadStatusRegs>
 8000c34:	0003      	movs	r3, r0
 8000c36:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000c38:	197b      	adds	r3, r7, r5
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d008      	beq.n	8000c52 <W25Q_Init+0x256>
 8000c40:	2315      	movs	r3, #21
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <W25Q_Init+0x256>
		return returnInc;
 8000c4a:	2317      	movs	r3, #23
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	e00f      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000c52:	2117      	movs	r1, #23
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	781a      	ldrb	r2, [r3, #0]
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	3201      	adds	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]

	// Set WP pin low (Enable)
	HAL_GPIO_WritePin(wq->nWPPort, wq->nWPPin, GPIO_PIN_RESET);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	6858      	ldr	r0, [r3, #4]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	2200      	movs	r2, #0
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	f003 fb23 	bl	80042b6 <HAL_GPIO_WritePin>

	return 0;
 8000c70:	2300      	movs	r3, #0

}
 8000c72:	0018      	movs	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b007      	add	sp, #28
 8000c78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c7a <W25Q_ReleasePowerDown>:

HAL_StatusTypeDef W25Q_ReleasePowerDown(W25Q *wq) {
 8000c7a:	b590      	push	{r4, r7, lr}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000c82:	240e      	movs	r4, #14
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]

	// TX release power-down instruction
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6818      	ldr	r0, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	2200      	movs	r2, #0
 8000c96:	0019      	movs	r1, r3
 8000c98:	f003 fb0d 	bl	80042b6 <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_READ_RELEASE_ID}, 1, HAL_MAX_DELAY);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6998      	ldr	r0, [r3, #24]
 8000ca0:	210c      	movs	r1, #12
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	22ab      	movs	r2, #171	@ 0xab
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	193c      	adds	r4, r7, r4
 8000caa:	2301      	movs	r3, #1
 8000cac:	425b      	negs	r3, r3
 8000cae:	1879      	adds	r1, r7, r1
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f006 fc59 	bl	8007568 <HAL_SPI_Transmit>
 8000cb6:	0003      	movs	r3, r0
 8000cb8:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	0019      	movs	r1, r3
 8000cc8:	f003 faf5 	bl	80042b6 <HAL_GPIO_WritePin>

	// Delay for at least 3 us
	for(uint8_t i = 0; i < 15; i++) {
 8000ccc:	230f      	movs	r3, #15
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	e006      	b.n	8000ce4 <W25Q_ReleasePowerDown+0x6a>
		__NOP();
 8000cd6:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < 15; i++) {
 8000cd8:	210f      	movs	r1, #15
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	3201      	adds	r2, #1
 8000ce2:	701a      	strb	r2, [r3, #0]
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b0e      	cmp	r3, #14
 8000cec:	d9f3      	bls.n	8000cd6 <W25Q_ReleasePowerDown+0x5c>
	}

	wq->powerUp = 1; 		// We have now successfully exited power-down state
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2224      	movs	r2, #36	@ 0x24
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	5499      	strb	r1, [r3, r2]

	return halRet;
 8000cf6:	230e      	movs	r3, #14
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	781b      	ldrb	r3, [r3, #0]

}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b005      	add	sp, #20
 8000d02:	bd90      	pop	{r4, r7, pc}

08000d04 <W25Q_GetIDs>:

HAL_StatusTypeDef W25Q_GetIDs(W25Q *wq, uint8_t devID_passed) {
 8000d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d06:	b089      	sub	sp, #36	@ 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	000a      	movs	r2, r1
 8000d0e:	1cfb      	adds	r3, r7, #3
 8000d10:	701a      	strb	r2, [r3, #0]


	HAL_StatusTypeDef halRet = HAL_OK;
 8000d12:	241f      	movs	r4, #31
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]

	/*
	 * Release power down + read device ID
	 */
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6818      	ldr	r0, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	2200      	movs	r2, #0
 8000d26:	0019      	movs	r1, r3
 8000d28:	f003 fac5 	bl	80042b6 <HAL_GPIO_WritePin>
		// TX return device ID instruction
		halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[4]){CMD_READ_RELEASE_ID, 0x00, 0x00, 0x00}, 4, HAL_MAX_DELAY);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6998      	ldr	r0, [r3, #24]
 8000d30:	2118      	movs	r1, #24
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	22ab      	movs	r2, #171	@ 0xab
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	705a      	strb	r2, [r3, #1]
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	709a      	strb	r2, [r3, #2]
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	70da      	strb	r2, [r3, #3]
 8000d4a:	0025      	movs	r5, r4
 8000d4c:	193c      	adds	r4, r7, r4
 8000d4e:	2301      	movs	r3, #1
 8000d50:	425b      	negs	r3, r3
 8000d52:	1879      	adds	r1, r7, r1
 8000d54:	2204      	movs	r2, #4
 8000d56:	f006 fc07 	bl	8007568 <HAL_SPI_Transmit>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 8000d5e:	197b      	adds	r3, r7, r5
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00b      	beq.n	8000d7e <W25Q_GetIDs+0x7a>
			HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6818      	ldr	r0, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	2201      	movs	r2, #1
 8000d72:	0019      	movs	r1, r3
 8000d74:	f003 fa9f 	bl	80042b6 <HAL_GPIO_WritePin>
			return halRet;
 8000d78:	197b      	adds	r3, r7, r5
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	e07c      	b.n	8000e78 <W25Q_GetIDs+0x174>
		}

		// RX device ID into struct variable
		uint8_t devIDRet[1] = {0x00};
 8000d7e:	2514      	movs	r5, #20
 8000d80:	197b      	adds	r3, r7, r5
 8000d82:	4a3f      	ldr	r2, [pc, #252]	@ (8000e80 <W25Q_GetIDs+0x17c>)
 8000d84:	7812      	ldrb	r2, [r2, #0]
 8000d86:	701a      	strb	r2, [r3, #0]
		halRet = HAL_SPI_Receive(wq->hspi, devIDRet, 1, HAL_MAX_DELAY);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6998      	ldr	r0, [r3, #24]
 8000d8c:	261f      	movs	r6, #31
 8000d8e:	19bc      	adds	r4, r7, r6
 8000d90:	2301      	movs	r3, #1
 8000d92:	425b      	negs	r3, r3
 8000d94:	1979      	adds	r1, r7, r5
 8000d96:	2201      	movs	r2, #1
 8000d98:	f006 fd46 	bl	8007828 <HAL_SPI_Receive>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	2201      	movs	r2, #1
 8000dac:	0019      	movs	r1, r3
 8000dae:	f003 fa82 	bl	80042b6 <HAL_GPIO_WritePin>
		wq->devID = devIDRet[0];
 8000db2:	197b      	adds	r3, r7, r5
 8000db4:	781a      	ldrb	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	775a      	strb	r2, [r3, #29]


		 // Check to ensure that received device ID is equal to that passed by the user in the init function
		if((halRet != HAL_OK) || (wq->devID != devID_passed))
 8000dba:	19bb      	adds	r3, r7, r6
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d105      	bne.n	8000dce <W25Q_GetIDs+0xca>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7f5b      	ldrb	r3, [r3, #29]
 8000dc6:	1cfa      	adds	r2, r7, #3
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d001      	beq.n	8000dd2 <W25Q_GetIDs+0xce>
			return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e052      	b.n	8000e78 <W25Q_GetIDs+0x174>

	/*
	 * Read and check MFR ID
	 */
		// TX read mfr + device ID command
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6818      	ldr	r0, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	0019      	movs	r1, r3
 8000de0:	f003 fa69 	bl	80042b6 <HAL_GPIO_WritePin>
		halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[4]){CMD_READ_MFR_ID, 0x00, 0x00, 0x00}, 4, HAL_MAX_DELAY);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6998      	ldr	r0, [r3, #24]
 8000de8:	2110      	movs	r1, #16
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2290      	movs	r2, #144	@ 0x90
 8000dee:	701a      	strb	r2, [r3, #0]
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2200      	movs	r2, #0
 8000df4:	705a      	strb	r2, [r3, #1]
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2200      	movs	r2, #0
 8000dfa:	709a      	strb	r2, [r3, #2]
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2200      	movs	r2, #0
 8000e00:	70da      	strb	r2, [r3, #3]
 8000e02:	251f      	movs	r5, #31
 8000e04:	197c      	adds	r4, r7, r5
 8000e06:	2301      	movs	r3, #1
 8000e08:	425b      	negs	r3, r3
 8000e0a:	1879      	adds	r1, r7, r1
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	f006 fbab 	bl	8007568 <HAL_SPI_Transmit>
 8000e12:	0003      	movs	r3, r0
 8000e14:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000e16:	197b      	adds	r3, r7, r5
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <W25Q_GetIDs+0x120>
			return halRet;
 8000e1e:	197b      	adds	r3, r7, r5
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	e029      	b.n	8000e78 <W25Q_GetIDs+0x174>
		}



		// RX device and mfr ID, store in struct variable
		uint8_t retIDs[2] = {0x00, 0x00};
 8000e24:	250c      	movs	r5, #12
 8000e26:	197b      	adds	r3, r7, r5
 8000e28:	2200      	movs	r2, #0
 8000e2a:	801a      	strh	r2, [r3, #0]
		halRet = HAL_SPI_Receive(wq->hspi, retIDs, 2, HAL_MAX_DELAY);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6998      	ldr	r0, [r3, #24]
 8000e30:	261f      	movs	r6, #31
 8000e32:	19bc      	adds	r4, r7, r6
 8000e34:	2301      	movs	r3, #1
 8000e36:	425b      	negs	r3, r3
 8000e38:	1979      	adds	r1, r7, r5
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	f006 fcf4 	bl	8007828 <HAL_SPI_Receive>
 8000e40:	0003      	movs	r3, r0
 8000e42:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	2201      	movs	r2, #1
 8000e50:	0019      	movs	r1, r3
 8000e52:	f003 fa30 	bl	80042b6 <HAL_GPIO_WritePin>
		wq->mfrID = retIDs[0];
 8000e56:	197b      	adds	r3, r7, r5
 8000e58:	781a      	ldrb	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	771a      	strb	r2, [r3, #28]


		// Check to ensure that received mfr ID is correct.
		if((halRet != HAL_OK) || (wq->mfrID != 0xEF))
 8000e5e:	19bb      	adds	r3, r7, r6
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d103      	bne.n	8000e6e <W25Q_GetIDs+0x16a>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7f1b      	ldrb	r3, [r3, #28]
 8000e6a:	2bef      	cmp	r3, #239	@ 0xef
 8000e6c:	d001      	beq.n	8000e72 <W25Q_GetIDs+0x16e>
			return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e002      	b.n	8000e78 <W25Q_GetIDs+0x174>

	/*
	 * Leaving out for now: Read JEDEC ID
	 */

		return halRet;
 8000e72:	231f      	movs	r3, #31
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	781b      	ldrb	r3, [r3, #0]
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b009      	add	sp, #36	@ 0x24
 8000e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e80:	080093bc 	.word	0x080093bc

08000e84 <W25Q_EnableWrite>:

HAL_StatusTypeDef W25Q_EnableWrite(W25Q *wq) {
 8000e84:	b5b0      	push	{r4, r5, r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000e8c:	250f      	movs	r5, #15
 8000e8e:	197b      	adds	r3, r7, r5
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]

	// TX write enable command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	f003 fa08 	bl	80042b6 <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_WRITE_ENABLE}, 1, HAL_MAX_DELAY);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6998      	ldr	r0, [r3, #24]
 8000eaa:	210c      	movs	r1, #12
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2206      	movs	r2, #6
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	197c      	adds	r4, r7, r5
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f006 fb54 	bl	8007568 <HAL_SPI_Transmit>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	2201      	movs	r2, #1
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	f003 f9f0 	bl	80042b6 <HAL_GPIO_WritePin>

	if(halRet != HAL_OK)
 8000ed6:	197b      	adds	r3, r7, r5
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <W25Q_EnableWrite+0x60>
		return halRet;
 8000ede:	197b      	adds	r3, r7, r5
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	e00e      	b.n	8000f02 <W25Q_EnableWrite+0x7e>

	// Read back written value and confirm
	W25Q_ReadStatusReg(wq, 1);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f000 f851 	bl	8000f90 <W25Q_ReadStatusReg>

	// Bit 1 of status register 1 should now be 1
	if(wq->writeEnable != 1)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2223      	movs	r2, #35	@ 0x23
 8000ef2:	5c9b      	ldrb	r3, [r3, r2]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d001      	beq.n	8000efc <W25Q_EnableWrite+0x78>
		return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e002      	b.n	8000f02 <W25Q_EnableWrite+0x7e>

	return halRet;
 8000efc:	230f      	movs	r3, #15
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	781b      	ldrb	r3, [r3, #0]

}
 8000f02:	0018      	movs	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b004      	add	sp, #16
 8000f08:	bdb0      	pop	{r4, r5, r7, pc}

08000f0a <W25Q_DisableWrite>:

HAL_StatusTypeDef W25Q_DisableWrite(W25Q *wq) {
 8000f0a:	b5b0      	push	{r4, r5, r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000f12:	250f      	movs	r5, #15
 8000f14:	197b      	adds	r3, r7, r5
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]

	// TX write disable command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	2200      	movs	r2, #0
 8000f26:	0019      	movs	r1, r3
 8000f28:	f003 f9c5 	bl	80042b6 <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_WRITE_DISABLE}, 1, HAL_MAX_DELAY);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6998      	ldr	r0, [r3, #24]
 8000f30:	210c      	movs	r1, #12
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2204      	movs	r2, #4
 8000f36:	701a      	strb	r2, [r3, #0]
 8000f38:	197c      	adds	r4, r7, r5
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	425b      	negs	r3, r3
 8000f3e:	1879      	adds	r1, r7, r1
 8000f40:	2201      	movs	r2, #1
 8000f42:	f006 fb11 	bl	8007568 <HAL_SPI_Transmit>
 8000f46:	0003      	movs	r3, r0
 8000f48:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	2201      	movs	r2, #1
 8000f56:	0019      	movs	r1, r3
 8000f58:	f003 f9ad 	bl	80042b6 <HAL_GPIO_WritePin>

	if(halRet != HAL_OK)
 8000f5c:	197b      	adds	r3, r7, r5
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <W25Q_DisableWrite+0x60>
		return halRet;
 8000f64:	197b      	adds	r3, r7, r5
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	e00e      	b.n	8000f88 <W25Q_DisableWrite+0x7e>

	// Read back written value and confirm
	W25Q_ReadStatusReg(wq, 1);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f000 f80e 	bl	8000f90 <W25Q_ReadStatusReg>

	// Bit 1 of status register 1 should still be 0
	if(wq->writeEnable != 0)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2223      	movs	r2, #35	@ 0x23
 8000f78:	5c9b      	ldrb	r3, [r3, r2]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <W25Q_DisableWrite+0x78>
		return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e002      	b.n	8000f88 <W25Q_DisableWrite+0x7e>

	return halRet;
 8000f82:	230f      	movs	r3, #15
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	781b      	ldrb	r3, [r3, #0]

}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b004      	add	sp, #16
 8000f8e:	bdb0      	pop	{r4, r5, r7, pc}

08000f90 <W25Q_ReadStatusReg>:

HAL_StatusTypeDef W25Q_ReadStatusReg(W25Q *wq, uint8_t regNum) {
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	000a      	movs	r2, r1
 8000f9a:	1cfb      	adds	r3, r7, #3
 8000f9c:	701a      	strb	r2, [r3, #0]

	// Check register number is valid
	if(regNum < 1 || regNum > 3) {
 8000f9e:	1cfb      	adds	r3, r7, #3
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <W25Q_ReadStatusReg+0x1e>
 8000fa6:	1cfb      	adds	r3, r7, #3
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d901      	bls.n	8000fb2 <W25Q_ReadStatusReg+0x22>
		return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e094      	b.n	80010dc <W25Q_ReadStatusReg+0x14c>
	}

	HAL_StatusTypeDef halRet = HAL_OK;
 8000fb2:	2417      	movs	r4, #23
 8000fb4:	193b      	adds	r3, r7, r4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]

	// Array of commands for status registers 1-3
	uint8_t statRegCMDs[3] = {CMD_READ_STAT_1, CMD_READ_STAT_2, CMD_READ_STAT_3};
 8000fba:	2514      	movs	r5, #20
 8000fbc:	197b      	adds	r3, r7, r5
 8000fbe:	4a49      	ldr	r2, [pc, #292]	@ (80010e4 <W25Q_ReadStatusReg+0x154>)
 8000fc0:	8811      	ldrh	r1, [r2, #0]
 8000fc2:	8019      	strh	r1, [r3, #0]
 8000fc4:	7892      	ldrb	r2, [r2, #2]
 8000fc6:	709a      	strb	r2, [r3, #2]

	// TX read status register command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	0019      	movs	r1, r3
 8000fd6:	f003 f96e 	bl	80042b6 <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){statRegCMDs[regNum - 1]}, 1, HAL_MAX_DELAY);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6998      	ldr	r0, [r3, #24]
 8000fde:	1cfb      	adds	r3, r7, #3
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	197a      	adds	r2, r7, r5
 8000fe6:	5cd2      	ldrb	r2, [r2, r3]
 8000fe8:	2110      	movs	r1, #16
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	0025      	movs	r5, r4
 8000ff0:	193c      	adds	r4, r7, r4
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	425b      	negs	r3, r3
 8000ff6:	1879      	adds	r1, r7, r1
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f006 fab5 	bl	8007568 <HAL_SPI_Transmit>
 8000ffe:	0003      	movs	r3, r0
 8001000:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8001002:	197b      	adds	r3, r7, r5
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00b      	beq.n	8001022 <W25Q_ReadStatusReg+0x92>
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	b29b      	uxth	r3, r3
 8001014:	2201      	movs	r2, #1
 8001016:	0019      	movs	r1, r3
 8001018:	f003 f94d 	bl	80042b6 <HAL_GPIO_WritePin>
		return halRet;
 800101c:	197b      	adds	r3, r7, r5
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	e05c      	b.n	80010dc <W25Q_ReadStatusReg+0x14c>
	}

	// RX status register
	uint8_t statRegRet[1] = {0x00};
 8001022:	210c      	movs	r1, #12
 8001024:	187b      	adds	r3, r7, r1
 8001026:	4a30      	ldr	r2, [pc, #192]	@ (80010e8 <W25Q_ReadStatusReg+0x158>)
 8001028:	7812      	ldrb	r2, [r2, #0]
 800102a:	701a      	strb	r2, [r3, #0]
	halRet = HAL_SPI_Receive(wq->hspi, statRegRet, 1, HAL_MAX_DELAY);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6998      	ldr	r0, [r3, #24]
 8001030:	2317      	movs	r3, #23
 8001032:	18fc      	adds	r4, r7, r3
 8001034:	2301      	movs	r3, #1
 8001036:	425b      	negs	r3, r3
 8001038:	1879      	adds	r1, r7, r1
 800103a:	2201      	movs	r2, #1
 800103c:	f006 fbf4 	bl	8007828 <HAL_SPI_Receive>
 8001040:	0003      	movs	r3, r0
 8001042:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	b29b      	uxth	r3, r3
 800104e:	2201      	movs	r2, #1
 8001050:	0019      	movs	r1, r3
 8001052:	f003 f930 	bl	80042b6 <HAL_GPIO_WritePin>

	switch(regNum) {
 8001056:	1cfb      	adds	r3, r7, #3
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b03      	cmp	r3, #3
 800105c:	d029      	beq.n	80010b2 <W25Q_ReadStatusReg+0x122>
 800105e:	dc3a      	bgt.n	80010d6 <W25Q_ReadStatusReg+0x146>
 8001060:	2b01      	cmp	r3, #1
 8001062:	d002      	beq.n	800106a <W25Q_ReadStatusReg+0xda>
 8001064:	2b02      	cmp	r3, #2
 8001066:	d012      	beq.n	800108e <W25Q_ReadStatusReg+0xfe>
 8001068:	e035      	b.n	80010d6 <W25Q_ReadStatusReg+0x146>
	case 1:
		wq->statReg1 = statRegRet[0];
 800106a:	230c      	movs	r3, #12
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	7819      	ldrb	r1, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2220      	movs	r2, #32
 8001074:	5499      	strb	r1, [r3, r2]
		wq->writeEnable = (wq->statReg1 & 0b00000010) >> 1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2220      	movs	r2, #32
 800107a:	5c9b      	ldrb	r3, [r3, r2]
 800107c:	105b      	asrs	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2201      	movs	r2, #1
 8001082:	4013      	ands	r3, r2
 8001084:	b2d9      	uxtb	r1, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2223      	movs	r2, #35	@ 0x23
 800108a:	5499      	strb	r1, [r3, r2]
		break;
 800108c:	e023      	b.n	80010d6 <W25Q_ReadStatusReg+0x146>
	case 2:
		wq->statReg2 = statRegRet[0];
 800108e:	230c      	movs	r3, #12
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	7819      	ldrb	r1, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2221      	movs	r2, #33	@ 0x21
 8001098:	5499      	strb	r1, [r3, r2]
		wq->quadEnable = (wq->statReg2 & 0b00000010) >> 1;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2221      	movs	r2, #33	@ 0x21
 800109e:	5c9b      	ldrb	r3, [r3, r2]
 80010a0:	105b      	asrs	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2201      	movs	r2, #1
 80010a6:	4013      	ands	r3, r2
 80010a8:	b2d9      	uxtb	r1, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2225      	movs	r2, #37	@ 0x25
 80010ae:	5499      	strb	r1, [r3, r2]
		break;
 80010b0:	e011      	b.n	80010d6 <W25Q_ReadStatusReg+0x146>
	case 3:
		wq->statReg3 = statRegRet[0];
 80010b2:	230c      	movs	r3, #12
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	7819      	ldrb	r1, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2222      	movs	r2, #34	@ 0x22
 80010bc:	5499      	strb	r1, [r3, r2]
		wq->driverStrength = (wq->statReg3 & 0b01100000) >> 5;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2222      	movs	r2, #34	@ 0x22
 80010c2:	5c9b      	ldrb	r3, [r3, r2]
 80010c4:	115b      	asrs	r3, r3, #5
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2203      	movs	r2, #3
 80010ca:	4013      	ands	r3, r2
 80010cc:	b2d9      	uxtb	r1, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2226      	movs	r2, #38	@ 0x26
 80010d2:	5499      	strb	r1, [r3, r2]
		break;
 80010d4:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 80010d6:	2317      	movs	r3, #23
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	781b      	ldrb	r3, [r3, #0]

}
 80010dc:	0018      	movs	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	b006      	add	sp, #24
 80010e2:	bdb0      	pop	{r4, r5, r7, pc}
 80010e4:	080093c0 	.word	0x080093c0
 80010e8:	080093bc 	.word	0x080093bc

080010ec <W25Q_ReadStatusRegs>:

HAL_StatusTypeDef W25Q_ReadStatusRegs(W25Q *wq) {
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80010f4:	230e      	movs	r3, #14
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 1; i <=3; i++) {
 80010fc:	230f      	movs	r3, #15
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	e00d      	b.n	8001122 <W25Q_ReadStatusRegs+0x36>

		W25Q_ReadStatusReg(wq, i);
 8001106:	240f      	movs	r4, #15
 8001108:	193b      	adds	r3, r7, r4
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	0011      	movs	r1, r2
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff ff3d 	bl	8000f90 <W25Q_ReadStatusReg>
	for(uint8_t i = 1; i <=3; i++) {
 8001116:	0021      	movs	r1, r4
 8001118:	187b      	adds	r3, r7, r1
 800111a:	781a      	ldrb	r2, [r3, #0]
 800111c:	187b      	adds	r3, r7, r1
 800111e:	3201      	adds	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	230f      	movs	r3, #15
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b03      	cmp	r3, #3
 800112a:	d9ec      	bls.n	8001106 <W25Q_ReadStatusRegs+0x1a>

	}

	return halRet;
 800112c:	230e      	movs	r3, #14
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	781b      	ldrb	r3, [r3, #0]

}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b005      	add	sp, #20
 8001138:	bd90      	pop	{r4, r7, pc}
	...

0800113c <W25Q_WriteStatusReg>:

HAL_StatusTypeDef W25Q_WriteStatusReg(W25Q *wq, uint8_t regNum, uint8_t regVal) {
 800113c:	b5b0      	push	{r4, r5, r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	0008      	movs	r0, r1
 8001146:	0011      	movs	r1, r2
 8001148:	1cfb      	adds	r3, r7, #3
 800114a:	1c02      	adds	r2, r0, #0
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	1cbb      	adds	r3, r7, #2
 8001150:	1c0a      	adds	r2, r1, #0
 8001152:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8001154:	2513      	movs	r5, #19
 8001156:	197b      	adds	r3, r7, r5
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]

	// Enable Write Access to Memory
	// Write access will disable after status register write
	if(wq->writeEnable != 1) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2223      	movs	r2, #35	@ 0x23
 8001160:	5c9b      	ldrb	r3, [r3, r2]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d00c      	beq.n	8001180 <W25Q_WriteStatusReg+0x44>
		halRet = W25Q_EnableWrite(wq);
 8001166:	197c      	adds	r4, r7, r5
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	0018      	movs	r0, r3
 800116c:	f7ff fe8a 	bl	8000e84 <W25Q_EnableWrite>
 8001170:	0003      	movs	r3, r0
 8001172:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK)
 8001174:	197b      	adds	r3, r7, r5
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <W25Q_WriteStatusReg+0x44>
			return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e08a      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>
	}

	// Array of commands for status registers 1-3
	uint8_t statRegCMDs[3] = {CMD_WRITE_STAT_1, CMD_WRITE_STAT_2, CMD_WRITE_STAT_3};
 8001180:	2410      	movs	r4, #16
 8001182:	193b      	adds	r3, r7, r4
 8001184:	4a46      	ldr	r2, [pc, #280]	@ (80012a0 <W25Q_WriteStatusReg+0x164>)
 8001186:	8811      	ldrh	r1, [r2, #0]
 8001188:	8019      	strh	r1, [r3, #0]
 800118a:	7892      	ldrb	r2, [r2, #2]
 800118c:	709a      	strb	r2, [r3, #2]

	// TX write status reg with value
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	b29b      	uxth	r3, r3
 8001198:	2200      	movs	r2, #0
 800119a:	0019      	movs	r1, r3
 800119c:	f003 f88b 	bl	80042b6 <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[2]){statRegCMDs[regNum - 1], regVal}, 2, HAL_MAX_DELAY);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6998      	ldr	r0, [r3, #24]
 80011a4:	1cfb      	adds	r3, r7, #3
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	193a      	adds	r2, r7, r4
 80011ac:	5cd2      	ldrb	r2, [r2, r3]
 80011ae:	210c      	movs	r1, #12
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	701a      	strb	r2, [r3, #0]
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	1cba      	adds	r2, r7, #2
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	705a      	strb	r2, [r3, #1]
 80011bc:	2513      	movs	r5, #19
 80011be:	197c      	adds	r4, r7, r5
 80011c0:	2301      	movs	r3, #1
 80011c2:	425b      	negs	r3, r3
 80011c4:	1879      	adds	r1, r7, r1
 80011c6:	2202      	movs	r2, #2
 80011c8:	f006 f9ce 	bl	8007568 <HAL_SPI_Transmit>
 80011cc:	0003      	movs	r3, r0
 80011ce:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	2201      	movs	r2, #1
 80011dc:	0019      	movs	r1, r3
 80011de:	f003 f86a 	bl	80042b6 <HAL_GPIO_WritePin>

	// WEL bit will now be set back to 0
	halRet = W25Q_ReadStatusReg(wq, 1);
 80011e2:	197c      	adds	r4, r7, r5
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2101      	movs	r1, #1
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7ff fed1 	bl	8000f90 <W25Q_ReadStatusReg>
 80011ee:	0003      	movs	r3, r0
 80011f0:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80011f2:	197b      	adds	r3, r7, r5
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d002      	beq.n	8001200 <W25Q_WriteStatusReg+0xc4>
		return halRet;
 80011fa:	197b      	adds	r3, r7, r5
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	e04a      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>

	// Delay maximum status register write time (15ms), as given by chip datasheet.
	// ~235ns per i
	for(uint32_t i = 0; i < 70000; i++) {
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e003      	b.n	800120e <W25Q_WriteStatusReg+0xd2>
		__NOP();
 8001206:	46c0      	nop			@ (mov r8, r8)
	for(uint32_t i = 0; i < 70000; i++) {
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	3301      	adds	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	4a24      	ldr	r2, [pc, #144]	@ (80012a4 <W25Q_WriteStatusReg+0x168>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d9f7      	bls.n	8001206 <W25Q_WriteStatusReg+0xca>
	}

	if(halRet != HAL_OK)
 8001216:	2213      	movs	r2, #19
 8001218:	18bb      	adds	r3, r7, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <W25Q_WriteStatusReg+0xea>
		return halRet;
 8001220:	18bb      	adds	r3, r7, r2
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	e037      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>

	// Read back written value and confirm
	halRet = W25Q_ReadStatusReg(wq, regNum);
 8001226:	2313      	movs	r3, #19
 8001228:	18fc      	adds	r4, r7, r3
 800122a:	1cfb      	adds	r3, r7, #3
 800122c:	781a      	ldrb	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	0011      	movs	r1, r2
 8001232:	0018      	movs	r0, r3
 8001234:	f7ff feac 	bl	8000f90 <W25Q_ReadStatusReg>
 8001238:	0003      	movs	r3, r0
 800123a:	7023      	strb	r3, [r4, #0]
	switch(regNum) {
 800123c:	1cfb      	adds	r3, r7, #3
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b03      	cmp	r3, #3
 8001242:	d017      	beq.n	8001274 <W25Q_WriteStatusReg+0x138>
 8001244:	dc24      	bgt.n	8001290 <W25Q_WriteStatusReg+0x154>
 8001246:	2b01      	cmp	r3, #1
 8001248:	d002      	beq.n	8001250 <W25Q_WriteStatusReg+0x114>
 800124a:	2b02      	cmp	r3, #2
 800124c:	d009      	beq.n	8001262 <W25Q_WriteStatusReg+0x126>
 800124e:	e01f      	b.n	8001290 <W25Q_WriteStatusReg+0x154>
		case 1:
			if(wq->statReg1 != regVal)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2220      	movs	r2, #32
 8001254:	5c9b      	ldrb	r3, [r3, r2]
 8001256:	1cba      	adds	r2, r7, #2
 8001258:	7812      	ldrb	r2, [r2, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d013      	beq.n	8001286 <W25Q_WriteStatusReg+0x14a>
				return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e019      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>
			break;
		case 2:
			if(wq->statReg2 != regVal)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2221      	movs	r2, #33	@ 0x21
 8001266:	5c9b      	ldrb	r3, [r3, r2]
 8001268:	1cba      	adds	r2, r7, #2
 800126a:	7812      	ldrb	r2, [r2, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d00c      	beq.n	800128a <W25Q_WriteStatusReg+0x14e>
				return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e010      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>
			break;
		case 3:
			if(wq->statReg3 != regVal)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2222      	movs	r2, #34	@ 0x22
 8001278:	5c9b      	ldrb	r3, [r3, r2]
 800127a:	1cba      	adds	r2, r7, #2
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d005      	beq.n	800128e <W25Q_WriteStatusReg+0x152>
				return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e007      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>
			break;
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	e002      	b.n	8001290 <W25Q_WriteStatusReg+0x154>
			break;
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	e000      	b.n	8001290 <W25Q_WriteStatusReg+0x154>
			break;
 800128e:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 8001290:	2313      	movs	r3, #19
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	781b      	ldrb	r3, [r3, #0]


}
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b006      	add	sp, #24
 800129c:	bdb0      	pop	{r4, r5, r7, pc}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	080093c4 	.word	0x080093c4
 80012a4:	0001116f 	.word	0x0001116f

080012a8 <W25Q_readData>:

HAL_StatusTypeDef W25Q_readData(W25Q *wq, uint32_t startAddress, uint32_t dataSize, uint8_t *dataLocation) {
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80012b6:	2417      	movs	r4, #23
 80012b8:	193b      	adds	r3, r7, r4
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]

	// Create read data array with start address
	uint8_t readDataArr[4] = {CMD_READ_DATA, ((startAddress >> 16) & 0xFF), ((startAddress >> 8) & 0xFF), ((startAddress) & 0xFF)};
 80012be:	2510      	movs	r5, #16
 80012c0:	197b      	adds	r3, r7, r5
 80012c2:	2203      	movs	r2, #3
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	0c1b      	lsrs	r3, r3, #16
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	197b      	adds	r3, r7, r5
 80012ce:	705a      	strb	r2, [r3, #1]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	0a1b      	lsrs	r3, r3, #8
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	197b      	adds	r3, r7, r5
 80012d8:	709a      	strb	r2, [r3, #2]
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	197b      	adds	r3, r7, r5
 80012e0:	70da      	strb	r2, [r3, #3]

	// TX read data in single-SPI mode command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	2200      	movs	r2, #0
 80012ee:	0019      	movs	r1, r3
 80012f0:	f002 ffe1 	bl	80042b6 <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, readDataArr, 4, HAL_MAX_DELAY);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6998      	ldr	r0, [r3, #24]
 80012f8:	0026      	movs	r6, r4
 80012fa:	193c      	adds	r4, r7, r4
 80012fc:	2301      	movs	r3, #1
 80012fe:	425b      	negs	r3, r3
 8001300:	1979      	adds	r1, r7, r5
 8001302:	2204      	movs	r2, #4
 8001304:	f006 f930 	bl	8007568 <HAL_SPI_Transmit>
 8001308:	0003      	movs	r3, r0
 800130a:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 800130c:	19bb      	adds	r3, r7, r6
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00b      	beq.n	800132c <W25Q_readData+0x84>
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	b29b      	uxth	r3, r3
 800131e:	2201      	movs	r2, #1
 8001320:	0019      	movs	r1, r3
 8001322:	f002 ffc8 	bl	80042b6 <HAL_GPIO_WritePin>
		return halRet;
 8001326:	19bb      	adds	r3, r7, r6
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	e017      	b.n	800135c <W25Q_readData+0xb4>
	}

	// RX data
	halRet = HAL_SPI_Receive(wq->hspi, dataLocation, dataSize, HAL_MAX_DELAY);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6998      	ldr	r0, [r3, #24]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	b29a      	uxth	r2, r3
 8001334:	2517      	movs	r5, #23
 8001336:	197c      	adds	r4, r7, r5
 8001338:	2301      	movs	r3, #1
 800133a:	425b      	negs	r3, r3
 800133c:	6839      	ldr	r1, [r7, #0]
 800133e:	f006 fa73 	bl	8007828 <HAL_SPI_Receive>
 8001342:	0003      	movs	r3, r0
 8001344:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	b29b      	uxth	r3, r3
 8001350:	2201      	movs	r2, #1
 8001352:	0019      	movs	r1, r3
 8001354:	f002 ffaf 	bl	80042b6 <HAL_GPIO_WritePin>


	return halRet;
 8001358:	197b      	adds	r3, r7, r5
 800135a:	781b      	ldrb	r3, [r3, #0]

}
 800135c:	0018      	movs	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	b007      	add	sp, #28
 8001362:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001364 <W25Q_ChipReset>:
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);

	return halRet;
}

HAL_StatusTypeDef W25Q_ChipReset(W25Q *wq) {
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800136c:	250e      	movs	r5, #14
 800136e:	197b      	adds	r3, r7, r5
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]

	/*
	 * Send both enable reset an reset device commands
	 */
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	b29b      	uxth	r3, r3
 800137e:	2200      	movs	r2, #0
 8001380:	0019      	movs	r1, r3
 8001382:	f002 ff98 	bl	80042b6 <HAL_GPIO_WritePin>
	// TX enable reset instruction
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_RESET_ENABLE}, 1, HAL_MAX_DELAY);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6998      	ldr	r0, [r3, #24]
 800138a:	210c      	movs	r1, #12
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2266      	movs	r2, #102	@ 0x66
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	197c      	adds	r4, r7, r5
 8001394:	2301      	movs	r3, #1
 8001396:	425b      	negs	r3, r3
 8001398:	1879      	adds	r1, r7, r1
 800139a:	2201      	movs	r2, #1
 800139c:	f006 f8e4 	bl	8007568 <HAL_SPI_Transmit>
 80013a0:	0003      	movs	r3, r0
 80013a2:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	2201      	movs	r2, #1
 80013b0:	0019      	movs	r1, r3
 80013b2:	f002 ff80 	bl	80042b6 <HAL_GPIO_WritePin>
	if(halRet != HAL_OK)
 80013b6:	197b      	adds	r3, r7, r5
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <W25Q_ChipReset+0x60>
		return halRet;
 80013be:	197b      	adds	r3, r7, r5
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	e035      	b.n	8001430 <W25Q_ChipReset+0xcc>

	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	2200      	movs	r2, #0
 80013d0:	0019      	movs	r1, r3
 80013d2:	f002 ff70 	bl	80042b6 <HAL_GPIO_WritePin>
	// TX reset device instruction
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_RESET_DEVICE}, 1, HAL_MAX_DELAY);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6998      	ldr	r0, [r3, #24]
 80013da:	2108      	movs	r1, #8
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	2299      	movs	r2, #153	@ 0x99
 80013e0:	701a      	strb	r2, [r3, #0]
 80013e2:	230e      	movs	r3, #14
 80013e4:	18fc      	adds	r4, r7, r3
 80013e6:	2301      	movs	r3, #1
 80013e8:	425b      	negs	r3, r3
 80013ea:	1879      	adds	r1, r7, r1
 80013ec:	2201      	movs	r2, #1
 80013ee:	f006 f8bb 	bl	8007568 <HAL_SPI_Transmit>
 80013f2:	0003      	movs	r3, r0
 80013f4:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	2201      	movs	r2, #1
 8001402:	0019      	movs	r1, r3
 8001404:	f002 ff57 	bl	80042b6 <HAL_GPIO_WritePin>

	// Delay at least 30 us
	for(uint8_t i = 0; i < 180; i++) {
 8001408:	230f      	movs	r3, #15
 800140a:	18fb      	adds	r3, r7, r3
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	e006      	b.n	8001420 <W25Q_ChipReset+0xbc>
		__NOP();
 8001412:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < 180; i++) {
 8001414:	210f      	movs	r1, #15
 8001416:	187b      	adds	r3, r7, r1
 8001418:	781a      	ldrb	r2, [r3, #0]
 800141a:	187b      	adds	r3, r7, r1
 800141c:	3201      	adds	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	230f      	movs	r3, #15
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2bb3      	cmp	r3, #179	@ 0xb3
 8001428:	d9f3      	bls.n	8001412 <W25Q_ChipReset+0xae>
	}


	return halRet;
 800142a:	230e      	movs	r3, #14
 800142c:	18fb      	adds	r3, r7, r3
 800142e:	781b      	ldrb	r3, [r3, #0]

}
 8001430:	0018      	movs	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	b004      	add	sp, #16
 8001436:	bdb0      	pop	{r4, r5, r7, pc}

08001438 <W25Q_SetDriverStrength>:

	return halRet;

}

HAL_StatusTypeDef W25Q_SetDriverStrength(W25Q *wq, uint8_t driverStrength) {
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	000a      	movs	r2, r1
 8001442:	1cfb      	adds	r3, r7, #3
 8001444:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8001446:	230f      	movs	r3, #15
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]

	// Check to ensure passed driver strength value lies in range
	if(driverStrength < 0 || driverStrength > 3)
 800144e:	1cfb      	adds	r3, r7, #3
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d901      	bls.n	800145a <W25Q_SetDriverStrength+0x22>
		return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e041      	b.n	80014de <W25Q_SetDriverStrength+0xa6>

	// Read current value in status register 3
	halRet = W25Q_ReadStatusReg(wq, 3);
 800145a:	250f      	movs	r5, #15
 800145c:	197c      	adds	r4, r7, r5
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2103      	movs	r1, #3
 8001462:	0018      	movs	r0, r3
 8001464:	f7ff fd94 	bl	8000f90 <W25Q_ReadStatusReg>
 8001468:	0003      	movs	r3, r0
 800146a:	7023      	strb	r3, [r4, #0]

	// Isolate bits 5-6 and change value to reflect new driver strength
	uint8_t newRegVal = (wq->statReg3) & (0b10011111);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2222      	movs	r2, #34	@ 0x22
 8001470:	5c9a      	ldrb	r2, [r3, r2]
 8001472:	200e      	movs	r0, #14
 8001474:	183b      	adds	r3, r7, r0
 8001476:	2160      	movs	r1, #96	@ 0x60
 8001478:	438a      	bics	r2, r1
 800147a:	701a      	strb	r2, [r3, #0]
	newRegVal = (newRegVal) | (driverStrength << 5);
 800147c:	1cfb      	adds	r3, r7, #3
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	015b      	lsls	r3, r3, #5
 8001482:	b25a      	sxtb	r2, r3
 8001484:	183b      	adds	r3, r7, r0
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b25b      	sxtb	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b25a      	sxtb	r2, r3
 800148e:	183b      	adds	r3, r7, r0
 8001490:	701a      	strb	r2, [r3, #0]

	// Write status register 3 with new value
	halRet = W25Q_WriteStatusReg(wq, 3, newRegVal);
 8001492:	197c      	adds	r4, r7, r5
 8001494:	183b      	adds	r3, r7, r0
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2103      	movs	r1, #3
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff fe4d 	bl	800113c <W25Q_WriteStatusReg>
 80014a2:	0003      	movs	r3, r0
 80014a4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80014a6:	197b      	adds	r3, r7, r5
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <W25Q_SetDriverStrength+0x7c>
		return halRet;
 80014ae:	197b      	adds	r3, r7, r5
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	e014      	b.n	80014de <W25Q_SetDriverStrength+0xa6>

	// Read back status register 3 and confirm successful write
	halRet = W25Q_ReadStatusReg(wq, 3);
 80014b4:	230f      	movs	r3, #15
 80014b6:	18fc      	adds	r4, r7, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2103      	movs	r1, #3
 80014bc:	0018      	movs	r0, r3
 80014be:	f7ff fd67 	bl	8000f90 <W25Q_ReadStatusReg>
 80014c2:	0003      	movs	r3, r0
 80014c4:	7023      	strb	r3, [r4, #0]
	if(wq->driverStrength != driverStrength)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2226      	movs	r2, #38	@ 0x26
 80014ca:	5c9b      	ldrb	r3, [r3, r2]
 80014cc:	1cfa      	adds	r2, r7, #3
 80014ce:	7812      	ldrb	r2, [r2, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <W25Q_SetDriverStrength+0xa0>
		return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e002      	b.n	80014de <W25Q_SetDriverStrength+0xa6>

	return halRet;
 80014d8:	230f      	movs	r3, #15
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	781b      	ldrb	r3, [r3, #0]

}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b004      	add	sp, #16
 80014e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080014e8 <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b09a      	sub	sp, #104	@ 0x68
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80014f4:	2567      	movs	r5, #103	@ 0x67
 80014f6:	197b      	adds	r3, r7, r5
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 80014fc:	243c      	movs	r4, #60	@ 0x3c
 80014fe:	193b      	adds	r3, r7, r4
 8001500:	0018      	movs	r0, r3
 8001502:	2328      	movs	r3, #40	@ 0x28
 8001504:	001a      	movs	r2, r3
 8001506:	2100      	movs	r1, #0
 8001508:	f007 ff04 	bl	8009314 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	781a      	ldrb	r2, [r3, #0]
 8001510:	0021      	movs	r1, r4
 8001512:	187b      	adds	r3, r7, r1
 8001514:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	785b      	ldrb	r3, [r3, #1]
 800151a:	3301      	adds	r3, #1
 800151c:	b2da      	uxtb	r2, r3
 800151e:	187b      	adds	r3, r7, r1
 8001520:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	789a      	ldrb	r2, [r3, #2]
 8001526:	187b      	adds	r3, r7, r1
 8001528:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	187b      	adds	r3, r7, r1
 8001530:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	78da      	ldrb	r2, [r3, #3]
 8001536:	187b      	adds	r3, r7, r1
 8001538:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	78da      	ldrb	r2, [r3, #3]
 800153e:	187b      	adds	r3, r7, r1
 8001540:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001542:	0008      	movs	r0, r1
 8001544:	183b      	adds	r3, r7, r0
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800154a:	183b      	adds	r3, r7, r0
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8001550:	183b      	adds	r3, r7, r0
 8001552:	4a19      	ldr	r2, [pc, #100]	@ (80015b8 <initRTCInternalAlarm+0xd0>)
 8001554:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001556:	183b      	adds	r3, r7, r0
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800155c:	183b      	adds	r3, r7, r0
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 8001562:	183b      	adds	r3, r7, r0
 8001564:	2220      	movs	r2, #32
 8001566:	2101      	movs	r1, #1
 8001568:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 800156a:	0001      	movs	r1, r0
 800156c:	187b      	adds	r3, r7, r1
 800156e:	2280      	movs	r2, #128	@ 0x80
 8001570:	0052      	lsls	r2, r2, #1
 8001572:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8001574:	197c      	adds	r4, r7, r5
 8001576:	1879      	adds	r1, r7, r1
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	0018      	movs	r0, r3
 800157e:	f005 fb63 	bl	8006c48 <HAL_RTC_SetAlarm_IT>
 8001582:	0003      	movs	r3, r0
 8001584:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8001586:	197b      	adds	r3, r7, r5
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <initRTCInternalAlarm+0xac>
		return halRet;
 800158e:	197b      	adds	r3, r7, r5
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	e00d      	b.n	80015b0 <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8001594:	2567      	movs	r5, #103	@ 0x67
 8001596:	197c      	adds	r4, r7, r5
 8001598:	2380      	movs	r3, #128	@ 0x80
 800159a:	005a      	lsls	r2, r3, #1
 800159c:	2314      	movs	r3, #20
 800159e:	18f9      	adds	r1, r7, r3
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	2300      	movs	r3, #0
 80015a4:	f005 fc90 	bl	8006ec8 <HAL_RTC_GetAlarm>
 80015a8:	0003      	movs	r3, r0
 80015aa:	7023      	strb	r3, [r4, #0]
	return halRet;
 80015ac:	197b      	adds	r3, r7, r5
 80015ae:	781b      	ldrb	r3, [r3, #0]

}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b01a      	add	sp, #104	@ 0x68
 80015b6:	bdb0      	pop	{r4, r5, r7, pc}
 80015b8:	80800080 	.word	0x80800080

080015bc <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2200      	movs	r2, #0
 80015ce:	0018      	movs	r0, r3
 80015d0:	f005 fa90 	bl	8006af4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	0018      	movs	r0, r3
 80015dc:	f005 fae6 	bl	8006bac <HAL_RTC_GetDate>

}
 80015e0:	46c0      	nop			@ (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b004      	add	sp, #16
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	46de      	mov	lr, fp
 80015ec:	4657      	mov	r7, sl
 80015ee:	464e      	mov	r6, r9
 80015f0:	4645      	mov	r5, r8
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b08f      	sub	sp, #60	@ 0x3c
 80015f6:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015f8:	f002 f8c4 	bl	8003784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015fc:	f000 f9fc 	bl	80019f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001600:	f000 fc4e 	bl	8001ea0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001604:	f000 fc26 	bl	8001e54 <MX_DMA_Init>
  MX_RTC_Init();
 8001608:	f000 fac6 	bl	8001b98 <MX_RTC_Init>
  MX_I2C1_Init();
 800160c:	f000 fa5a 	bl	8001ac4 <MX_I2C1_Init>
  MX_I2S1_Init();
 8001610:	f000 fa98 	bl	8001b44 <MX_I2S1_Init>
  MX_SPI2_Init();
 8001614:	f000 fb30 	bl	8001c78 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001618:	f000 fb6c 	bl	8001cf4 <MX_TIM2_Init>
  MX_TIM14_Init();
 800161c:	f000 fbca 	bl	8001db4 <MX_TIM14_Init>
  MX_TIM16_Init();
 8001620:	f000 fbee 	bl	8001e00 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	  // HAL Status handle for error-checking
	  HAL_StatusTypeDef halRet = HAL_OK;
 8001624:	2317      	movs	r3, #23
 8001626:	18fb      	adds	r3, r7, r3
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]

	  // Determine which time format we will be using
	  	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 800162c:	4bcb      	ldr	r3, [pc, #812]	@ (800195c <main+0x374>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2210      	movs	r2, #16
 8001632:	0011      	movs	r1, r2
 8001634:	0018      	movs	r0, r3
 8001636:	f002 fe21 	bl	800427c <HAL_GPIO_ReadPin>
 800163a:	0003      	movs	r3, r0
 800163c:	001a      	movs	r2, r3
 800163e:	4bc8      	ldr	r3, [pc, #800]	@ (8001960 <main+0x378>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d103      	bne.n	800164e <main+0x66>
	  	  userTimeFormat = RTC_HOURFORMAT_12;
 8001646:	4bc7      	ldr	r3, [pc, #796]	@ (8001964 <main+0x37c>)
 8001648:	2240      	movs	r2, #64	@ 0x40
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e002      	b.n	8001654 <main+0x6c>
	  	}
	  	else {
	  	  userTimeFormat = RTC_HOURFORMAT_24;
 800164e:	4bc5      	ldr	r3, [pc, #788]	@ (8001964 <main+0x37c>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
	  	}

  	  // Set Smooth Calibration Value
	  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8001654:	4bc4      	ldr	r3, [pc, #784]	@ (8001968 <main+0x380>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2517      	movs	r5, #23
 800165a:	197c      	adds	r4, r7, r5
 800165c:	2280      	movs	r2, #128	@ 0x80
 800165e:	01d1      	lsls	r1, r2, #7
 8001660:	48c2      	ldr	r0, [pc, #776]	@ (800196c <main+0x384>)
 8001662:	2200      	movs	r2, #0
 8001664:	f005 fe25 	bl	80072b2 <HAL_RTCEx_SetSmoothCalib>
 8001668:	0003      	movs	r3, r0
 800166a:	7023      	strb	r3, [r4, #0]
									RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
	  if(halRet != HAL_OK) {
 800166c:	197b      	adds	r3, r7, r5
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <main+0x90>
		  // Failure to talk to RTC is a hard failure
		  dispFailure();
 8001674:	f001 f994 	bl	80029a0 <dispFailure>
	  }

	  // Init the internal RTC alarm time to track the current time
	  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 8001678:	2517      	movs	r5, #23
 800167a:	197c      	adds	r4, r7, r5
 800167c:	4abc      	ldr	r2, [pc, #752]	@ (8001970 <main+0x388>)
 800167e:	49bd      	ldr	r1, [pc, #756]	@ (8001974 <main+0x38c>)
 8001680:	4bba      	ldr	r3, [pc, #744]	@ (800196c <main+0x384>)
 8001682:	0018      	movs	r0, r3
 8001684:	f7ff ff30 	bl	80014e8 <initRTCInternalAlarm>
 8001688:	0003      	movs	r3, r0
 800168a:	7023      	strb	r3, [r4, #0]
	  if(halRet != HAL_OK) {
 800168c:	197b      	adds	r3, r7, r5
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <main+0xb0>
		  // Failure to initialize RTC alarm is a hard failure
		  dispFailure();
 8001694:	f001 f984 	bl	80029a0 <dispFailure>
		}

	  // Initialize all GPIOs to be used with 7 segment display
		sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	009c      	lsls	r4, r3, #2
 800169c:	2380      	movs	r3, #128	@ 0x80
 800169e:	00dd      	lsls	r5, r3, #3
 80016a0:	2680      	movs	r6, #128	@ 0x80
 80016a2:	2340      	movs	r3, #64	@ 0x40
 80016a4:	469c      	mov	ip, r3
 80016a6:	2380      	movs	r3, #128	@ 0x80
 80016a8:	011a      	lsls	r2, r3, #4
 80016aa:	4bb3      	ldr	r3, [pc, #716]	@ (8001978 <main+0x390>)
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	4bb3      	ldr	r3, [pc, #716]	@ (800197c <main+0x394>)
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	4bb3      	ldr	r3, [pc, #716]	@ (8001980 <main+0x398>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	9304      	str	r3, [sp, #16]
 80016b8:	9003      	str	r0, [sp, #12]
 80016ba:	9102      	str	r1, [sp, #8]
 80016bc:	4bb1      	ldr	r3, [pc, #708]	@ (8001984 <main+0x39c>)
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	9200      	str	r2, [sp, #0]
 80016c2:	4663      	mov	r3, ip
 80016c4:	0032      	movs	r2, r6
 80016c6:	0029      	movs	r1, r5
 80016c8:	0020      	movs	r0, r4
 80016ca:	f001 fab5 	bl	8002c38 <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


		halRet = updateAndDisplayTime();
 80016ce:	2517      	movs	r5, #23
 80016d0:	197c      	adds	r4, r7, r5
 80016d2:	f000 fce9 	bl	80020a8 <updateAndDisplayTime>
 80016d6:	0003      	movs	r3, r0
 80016d8:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 80016da:	197b      	adds	r3, r7, r5
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <main+0xfe>
		  // Failure to display current time is a hard failure
		  dispFailure();
 80016e2:	f001 f95d 	bl	80029a0 <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

		// Used to separate return initializations into critical and non-critical errors.
		uint8_t initRet = 0;
 80016e6:	2116      	movs	r1, #22
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]

		initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 80016ee:	4ba2      	ldr	r3, [pc, #648]	@ (8001978 <main+0x390>)
 80016f0:	681d      	ldr	r5, [r3, #0]
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4aa4      	ldr	r2, [pc, #656]	@ (8001988 <main+0x3a0>)
 80016f8:	7812      	ldrb	r2, [r2, #0]
 80016fa:	187c      	adds	r4, r7, r1
 80016fc:	4ea3      	ldr	r6, [pc, #652]	@ (800198c <main+0x3a4>)
 80016fe:	49a4      	ldr	r1, [pc, #656]	@ (8001990 <main+0x3a8>)
 8001700:	48a4      	ldr	r0, [pc, #656]	@ (8001994 <main+0x3ac>)
 8001702:	9201      	str	r2, [sp, #4]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	0033      	movs	r3, r6
 8001708:	002a      	movs	r2, r5
 800170a:	f7fe fd87 	bl	800021c <capTouch_Init>
 800170e:	0003      	movs	r3, r0
 8001710:	7023      	strb	r3, [r4, #0]
								&capTouchResetPort, capTouchResetPin, capTouchChannels);
		if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 8001712:	2116      	movs	r1, #22
 8001714:	187b      	adds	r3, r7, r1
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d007      	beq.n	800172c <main+0x144>
 800171c:	187b      	adds	r3, r7, r1
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d003      	beq.n	800172c <main+0x144>
 8001724:	187b      	adds	r3, r7, r1
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b04      	cmp	r3, #4
 800172a:	d102      	bne.n	8001732 <main+0x14a>
			/* Critical Errors:
			 * 1 = Failure to read correct device ID
			 * 2 = Failure to read Keys
			 * 3 = Failure to enable keys
			 */
			dispFailure();
 800172c:	f001 f938 	bl	80029a0 <dispFailure>
 8001730:	e00d      	b.n	800174e <main+0x166>
		}
		else if (initRet == 2) {
 8001732:	2316      	movs	r3, #22
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d102      	bne.n	8001742 <main+0x15a>
			/*
			 * Non-critical Errors:
			 * 2 = Failure to Recalibrate
			 */
			dispFault();
 800173c:	f001 f920 	bl	8002980 <dispFault>
 8001740:	e005      	b.n	800174e <main+0x166>
		}
		else if(initRet == 0) {
 8001742:	2316      	movs	r3, #22
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d100      	bne.n	800174e <main+0x166>
			// initRet = 0 = all is well
			__NOP();
 800174c:	46c0      	nop			@ (mov r8, r8)
		}

		// Set averaging factor
		uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 800174e:	4b92      	ldr	r3, [pc, #584]	@ (8001998 <main+0x3b0>)
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	210c      	movs	r1, #12
 8001754:	187b      	adds	r3, r7, r1
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	4b8f      	ldr	r3, [pc, #572]	@ (8001998 <main+0x3b0>)
 800175a:	781a      	ldrb	r2, [r3, #0]
 800175c:	187b      	adds	r3, r7, r1
 800175e:	705a      	strb	r2, [r3, #1]
 8001760:	4b8d      	ldr	r3, [pc, #564]	@ (8001998 <main+0x3b0>)
 8001762:	781a      	ldrb	r2, [r3, #0]
 8001764:	187b      	adds	r3, r7, r1
 8001766:	709a      	strb	r2, [r3, #2]
 8001768:	4b8b      	ldr	r3, [pc, #556]	@ (8001998 <main+0x3b0>)
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	187b      	adds	r3, r7, r1
 800176e:	70da      	strb	r2, [r3, #3]
 8001770:	187b      	adds	r3, r7, r1
 8001772:	2200      	movs	r2, #0
 8001774:	711a      	strb	r2, [r3, #4]
 8001776:	187b      	adds	r3, r7, r1
 8001778:	2200      	movs	r2, #0
 800177a:	715a      	strb	r2, [r3, #5]
 800177c:	187b      	adds	r3, r7, r1
 800177e:	2200      	movs	r2, #0
 8001780:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8001782:	2517      	movs	r5, #23
 8001784:	197c      	adds	r4, r7, r5
 8001786:	187a      	adds	r2, r7, r1
 8001788:	4b82      	ldr	r3, [pc, #520]	@ (8001994 <main+0x3ac>)
 800178a:	0011      	movs	r1, r2
 800178c:	0018      	movs	r0, r3
 800178e:	f7fe ffb9 	bl	8000704 <capTouch_SetAveragingFactor>
 8001792:	0003      	movs	r3, r0
 8001794:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 8001796:	197b      	adds	r3, r7, r5
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <main+0x1ba>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 800179e:	f001 f8ef 	bl	8002980 <dispFault>
		}

		// Set detection integration factors
		uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 80017a2:	4b7e      	ldr	r3, [pc, #504]	@ (800199c <main+0x3b4>)
 80017a4:	781a      	ldrb	r2, [r3, #0]
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	4b7c      	ldr	r3, [pc, #496]	@ (800199c <main+0x3b4>)
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	705a      	strb	r2, [r3, #1]
 80017b2:	4b7a      	ldr	r3, [pc, #488]	@ (800199c <main+0x3b4>)
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	709a      	strb	r2, [r3, #2]
 80017ba:	4b78      	ldr	r3, [pc, #480]	@ (800199c <main+0x3b4>)
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	70da      	strb	r2, [r3, #3]
 80017c2:	4b76      	ldr	r3, [pc, #472]	@ (800199c <main+0x3b4>)
 80017c4:	781a      	ldrb	r2, [r3, #0]
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	711a      	strb	r2, [r3, #4]
 80017ca:	4b74      	ldr	r3, [pc, #464]	@ (800199c <main+0x3b4>)
 80017cc:	781a      	ldrb	r2, [r3, #0]
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	715a      	strb	r2, [r3, #5]
 80017d2:	4b72      	ldr	r3, [pc, #456]	@ (800199c <main+0x3b4>)
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 80017da:	2517      	movs	r5, #23
 80017dc:	197c      	adds	r4, r7, r5
 80017de:	1d3a      	adds	r2, r7, #4
 80017e0:	4b6c      	ldr	r3, [pc, #432]	@ (8001994 <main+0x3ac>)
 80017e2:	0011      	movs	r1, r2
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff f857 	bl	8000898 <capTouch_SetDetectionIntegrator>
 80017ea:	0003      	movs	r3, r0
 80017ec:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 80017ee:	197b      	adds	r3, r7, r5
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <main+0x212>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 80017f6:	f001 f8c3 	bl	8002980 <dispFault>
		}

		userAlarmToggle = false;			//Default to off
 80017fa:	4b69      	ldr	r3, [pc, #420]	@ (80019a0 <main+0x3b8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

		if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8001800:	4b68      	ldr	r3, [pc, #416]	@ (80019a4 <main+0x3bc>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b59      	ldr	r3, [pc, #356]	@ (800196c <main+0x384>)
 8001806:	0011      	movs	r1, r2
 8001808:	0018      	movs	r0, r3
 800180a:	f005 fdd9 	bl	80073c0 <HAL_RTCEx_BKUPRead>
 800180e:	0003      	movs	r3, r0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d11c      	bne.n	8001850 <main+0x268>

			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8001816:	4b64      	ldr	r3, [pc, #400]	@ (80019a8 <main+0x3c0>)
 8001818:	6819      	ldr	r1, [r3, #0]
 800181a:	4b54      	ldr	r3, [pc, #336]	@ (800196c <main+0x384>)
 800181c:	2201      	movs	r2, #1
 800181e:	0018      	movs	r0, r3
 8001820:	f005 fdb1 	bl	8007386 <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8001824:	4b61      	ldr	r3, [pc, #388]	@ (80019ac <main+0x3c4>)
 8001826:	6819      	ldr	r1, [r3, #0]
 8001828:	4b50      	ldr	r3, [pc, #320]	@ (800196c <main+0x384>)
 800182a:	2200      	movs	r2, #0
 800182c:	0018      	movs	r0, r3
 800182e:	f005 fdaa 	bl	8007386 <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8001832:	4b5f      	ldr	r3, [pc, #380]	@ (80019b0 <main+0x3c8>)
 8001834:	6819      	ldr	r1, [r3, #0]
 8001836:	4b4d      	ldr	r3, [pc, #308]	@ (800196c <main+0x384>)
 8001838:	2200      	movs	r2, #0
 800183a:	0018      	movs	r0, r3
 800183c:	f005 fda3 	bl	8007386 <HAL_RTCEx_BKUPWrite>

			// Write backup register with a non-zero value to signify that it has been initialized before
			HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8001840:	4b58      	ldr	r3, [pc, #352]	@ (80019a4 <main+0x3bc>)
 8001842:	6819      	ldr	r1, [r3, #0]
 8001844:	2301      	movs	r3, #1
 8001846:	425a      	negs	r2, r3
 8001848:	4b48      	ldr	r3, [pc, #288]	@ (800196c <main+0x384>)
 800184a:	0018      	movs	r0, r3
 800184c:	f005 fd9b 	bl	8007386 <HAL_RTCEx_BKUPWrite>

		}

		userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8001850:	4b55      	ldr	r3, [pc, #340]	@ (80019a8 <main+0x3c0>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b45      	ldr	r3, [pc, #276]	@ (800196c <main+0x384>)
 8001856:	0011      	movs	r1, r2
 8001858:	0018      	movs	r0, r3
 800185a:	f005 fdb1 	bl	80073c0 <HAL_RTCEx_BKUPRead>
 800185e:	0003      	movs	r3, r0
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b54      	ldr	r3, [pc, #336]	@ (80019b4 <main+0x3cc>)
 8001864:	701a      	strb	r2, [r3, #0]
		userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8001866:	4b51      	ldr	r3, [pc, #324]	@ (80019ac <main+0x3c4>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4b40      	ldr	r3, [pc, #256]	@ (800196c <main+0x384>)
 800186c:	0011      	movs	r1, r2
 800186e:	0018      	movs	r0, r3
 8001870:	f005 fda6 	bl	80073c0 <HAL_RTCEx_BKUPRead>
 8001874:	0003      	movs	r3, r0
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b4e      	ldr	r3, [pc, #312]	@ (80019b4 <main+0x3cc>)
 800187a:	705a      	strb	r2, [r3, #1]
		userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 800187c:	4b4c      	ldr	r3, [pc, #304]	@ (80019b0 <main+0x3c8>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b3a      	ldr	r3, [pc, #232]	@ (800196c <main+0x384>)
 8001882:	0011      	movs	r1, r2
 8001884:	0018      	movs	r0, r3
 8001886:	f005 fd9b 	bl	80073c0 <HAL_RTCEx_BKUPRead>
 800188a:	0003      	movs	r3, r0
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b49      	ldr	r3, [pc, #292]	@ (80019b4 <main+0x3cc>)
 8001890:	70da      	strb	r2, [r3, #3]


		// Init Memory Chip
		initRet = W25Q_Init(&spiFlash, nCSPort, nWPPort, nHOLDPort,
 8001892:	4b49      	ldr	r3, [pc, #292]	@ (80019b8 <main+0x3d0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4698      	mov	r8, r3
 8001898:	4b48      	ldr	r3, [pc, #288]	@ (80019bc <main+0x3d4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4699      	mov	r9, r3
 800189e:	4b48      	ldr	r3, [pc, #288]	@ (80019c0 <main+0x3d8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	469a      	mov	sl, r3
 80018a4:	4b47      	ldr	r3, [pc, #284]	@ (80019c4 <main+0x3dc>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b47      	ldr	r3, [pc, #284]	@ (80019c8 <main+0x3e0>)
 80018aa:	6819      	ldr	r1, [r3, #0]
 80018ac:	4b47      	ldr	r3, [pc, #284]	@ (80019cc <main+0x3e4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	469b      	mov	fp, r3
 80018b2:	4847      	ldr	r0, [pc, #284]	@ (80019d0 <main+0x3e8>)
 80018b4:	7800      	ldrb	r0, [r0, #0]
 80018b6:	4c47      	ldr	r4, [pc, #284]	@ (80019d4 <main+0x3ec>)
 80018b8:	7825      	ldrb	r5, [r4, #0]
 80018ba:	4c47      	ldr	r4, [pc, #284]	@ (80019d8 <main+0x3f0>)
 80018bc:	7826      	ldrb	r6, [r4, #0]
 80018be:	2416      	movs	r4, #22
 80018c0:	193c      	adds	r4, r7, r4
 80018c2:	4b46      	ldr	r3, [pc, #280]	@ (80019dc <main+0x3f4>)
 80018c4:	469c      	mov	ip, r3
 80018c6:	9606      	str	r6, [sp, #24]
 80018c8:	9505      	str	r5, [sp, #20]
 80018ca:	9004      	str	r0, [sp, #16]
 80018cc:	4844      	ldr	r0, [pc, #272]	@ (80019e0 <main+0x3f8>)
 80018ce:	9003      	str	r0, [sp, #12]
 80018d0:	465b      	mov	r3, fp
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	9101      	str	r1, [sp, #4]
 80018d6:	9200      	str	r2, [sp, #0]
 80018d8:	4653      	mov	r3, sl
 80018da:	464a      	mov	r2, r9
 80018dc:	4641      	mov	r1, r8
 80018de:	4660      	mov	r0, ip
 80018e0:	f7ff f88c 	bl	80009fc <W25Q_Init>
 80018e4:	0003      	movs	r3, r0
 80018e6:	7023      	strb	r3, [r4, #0]
	    		 nCSPin, nWPPin, nHOLDPin, &hspi2, spiFlash_devID, spiFlash_isQuadChip, spiFlash_driveStrength);

		// Enter error loop if there's an error in initialization
		if( (initRet == 1) || (initRet == 7) ) {
 80018e8:	2216      	movs	r2, #22
 80018ea:	18bb      	adds	r3, r7, r2
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d003      	beq.n	80018fa <main+0x312>
 80018f2:	18bb      	adds	r3, r7, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b07      	cmp	r3, #7
 80018f8:	d102      	bne.n	8001900 <main+0x318>
			/* Critical Errors:
			* 1 = Failure to release chip from power down
			* 7 = Failure to disable write protection
			*/
			dispFailure();
 80018fa:	f001 f851 	bl	80029a0 <dispFailure>
 80018fe:	e016      	b.n	800192e <main+0x346>
		}
		else if ( ((initRet >= 2) && (initRet <= 6)) || (initRet == 8) ) {
 8001900:	2216      	movs	r2, #22
 8001902:	18bb      	adds	r3, r7, r2
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d903      	bls.n	8001912 <main+0x32a>
 800190a:	18bb      	adds	r3, r7, r2
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b06      	cmp	r3, #6
 8001910:	d904      	bls.n	800191c <main+0x334>
 8001912:	2316      	movs	r3, #22
 8001914:	18fb      	adds	r3, r7, r3
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b08      	cmp	r3, #8
 800191a:	d102      	bne.n	8001922 <main+0x33a>
			* 2 = Failure to reset chip
			* 3,6,8 = Failure to read status registers
			* 4 = Failure to set driver strength
			* 5 = Failure to read device ID
			*/
			dispFault();
 800191c:	f001 f830 	bl	8002980 <dispFault>
 8001920:	e005      	b.n	800192e <main+0x346>
		}
		else if(initRet == 0) {
 8001922:	2316      	movs	r3, #22
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d100      	bne.n	800192e <main+0x346>
			// initRet = 0 = all is well
			__NOP();
 800192c:	46c0      	nop			@ (mov r8, r8)
		}


		// Init i2s amplifier
		NAU8315YG_Init(&i2sAmp, &hi2s1, i2sAmp_enablePort, i2sAmp_enablePin);
 800192e:	4b2d      	ldr	r3, [pc, #180]	@ (80019e4 <main+0x3fc>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4b2d      	ldr	r3, [pc, #180]	@ (80019e8 <main+0x400>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	492d      	ldr	r1, [pc, #180]	@ (80019ec <main+0x404>)
 8001938:	482d      	ldr	r0, [pc, #180]	@ (80019f0 <main+0x408>)
 800193a:	f7ff f81f 	bl	800097c <NAU8315YG_Init>

		// Increase SPI clk driver power
		GPIOA->OSPEEDR |= 0b11;
 800193e:	23a0      	movs	r3, #160	@ 0xa0
 8001940:	05db      	lsls	r3, r3, #23
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	23a0      	movs	r3, #160	@ 0xa0
 8001946:	05db      	lsls	r3, r3, #23
 8001948:	2103      	movs	r1, #3
 800194a:	430a      	orrs	r2, r1
 800194c:	609a      	str	r2, [r3, #8]


  while (1)
  {
    /* USER CODE END WHILE */
	  if(beepMode) {
 800194e:	4b29      	ldr	r3, [pc, #164]	@ (80019f4 <main+0x40c>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0fb      	beq.n	800194e <main+0x366>
		  userAlarmBeep();
 8001956:	f000 fc65 	bl	8002224 <userAlarmBeep>
	  if(beepMode) {
 800195a:	e7f8      	b.n	800194e <main+0x366>
 800195c:	20000008 	.word	0x20000008
 8001960:	20000040 	.word	0x20000040
 8001964:	200000e8 	.word	0x200000e8
 8001968:	2000002c 	.word	0x2000002c
 800196c:	200001d8 	.word	0x200001d8
 8001970:	200000cc 	.word	0x200000cc
 8001974:	200000b8 	.word	0x200000b8
 8001978:	2000006c 	.word	0x2000006c
 800197c:	20000068 	.word	0x20000068
 8001980:	20000030 	.word	0x20000030
 8001984:	20000014 	.word	0x20000014
 8001988:	20000010 	.word	0x20000010
 800198c:	2000000c 	.word	0x2000000c
 8001990:	200000ec 	.word	0x200000ec
 8001994:	20000408 	.word	0x20000408
 8001998:	20000011 	.word	0x20000011
 800199c:	20000012 	.word	0x20000012
 80019a0:	200000b5 	.word	0x200000b5
 80019a4:	2000003c 	.word	0x2000003c
 80019a8:	200000e4 	.word	0x200000e4
 80019ac:	20000034 	.word	0x20000034
 80019b0:	20000038 	.word	0x20000038
 80019b4:	200000d0 	.word	0x200000d0
 80019b8:	20000044 	.word	0x20000044
 80019bc:	20000048 	.word	0x20000048
 80019c0:	2000004c 	.word	0x2000004c
 80019c4:	20000050 	.word	0x20000050
 80019c8:	20000054 	.word	0x20000054
 80019cc:	20000058 	.word	0x20000058
 80019d0:	2000005c 	.word	0x2000005c
 80019d4:	2000005d 	.word	0x2000005d
 80019d8:	2000005e 	.word	0x2000005e
 80019dc:	2000041c 	.word	0x2000041c
 80019e0:	20000204 	.word	0x20000204
 80019e4:	20000060 	.word	0x20000060
 80019e8:	20000064 	.word	0x20000064
 80019ec:	20000140 	.word	0x20000140
 80019f0:	20000444 	.word	0x20000444
 80019f4:	20000406 	.word	0x20000406

080019f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b093      	sub	sp, #76	@ 0x4c
 80019fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fe:	2410      	movs	r4, #16
 8001a00:	193b      	adds	r3, r7, r4
 8001a02:	0018      	movs	r0, r3
 8001a04:	2338      	movs	r3, #56	@ 0x38
 8001a06:	001a      	movs	r2, r3
 8001a08:	2100      	movs	r1, #0
 8001a0a:	f007 fc83 	bl	8009314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a0e:	003b      	movs	r3, r7
 8001a10:	0018      	movs	r0, r3
 8001a12:	2310      	movs	r3, #16
 8001a14:	001a      	movs	r2, r3
 8001a16:	2100      	movs	r1, #0
 8001a18:	f007 fc7c 	bl	8009314 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a1c:	2380      	movs	r3, #128	@ 0x80
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	0018      	movs	r0, r3
 8001a22:	f003 fdfd 	bl	8005620 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a26:	f003 fded 	bl	8005604 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a2a:	4b25      	ldr	r3, [pc, #148]	@ (8001ac0 <SystemClock_Config+0xc8>)
 8001a2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a2e:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <SystemClock_Config+0xc8>)
 8001a30:	2118      	movs	r1, #24
 8001a32:	438a      	bics	r2, r1
 8001a34:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001a36:	193b      	adds	r3, r7, r4
 8001a38:	2205      	movs	r2, #5
 8001a3a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a3c:	193b      	adds	r3, r7, r4
 8001a3e:	2280      	movs	r2, #128	@ 0x80
 8001a40:	0252      	lsls	r2, r2, #9
 8001a42:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a44:	0021      	movs	r1, r4
 8001a46:	187b      	adds	r3, r7, r1
 8001a48:	2201      	movs	r2, #1
 8001a4a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	2202      	movs	r2, #2
 8001a50:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a52:	187b      	adds	r3, r7, r1
 8001a54:	2203      	movs	r2, #3
 8001a56:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001a5e:	187b      	adds	r3, r7, r1
 8001a60:	2208      	movs	r2, #8
 8001a62:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	22c0      	movs	r2, #192	@ 0xc0
 8001a68:	02d2      	lsls	r2, r2, #11
 8001a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a6c:	187b      	adds	r3, r7, r1
 8001a6e:	2280      	movs	r2, #128	@ 0x80
 8001a70:	0492      	lsls	r2, r2, #18
 8001a72:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	2280      	movs	r2, #128	@ 0x80
 8001a78:	0592      	lsls	r2, r2, #22
 8001a7a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f003 fe1a 	bl	80056b8 <HAL_RCC_OscConfig>
 8001a84:	1e03      	subs	r3, r0, #0
 8001a86:	d001      	beq.n	8001a8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a88:	f001 f8cf 	bl	8002c2a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a8c:	003b      	movs	r3, r7
 8001a8e:	2207      	movs	r2, #7
 8001a90:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a92:	003b      	movs	r3, r7
 8001a94:	2202      	movs	r2, #2
 8001a96:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a98:	003b      	movs	r3, r7
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a9e:	003b      	movs	r3, r7
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aa4:	003b      	movs	r3, r7
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f004 f91f 	bl	8005cec <HAL_RCC_ClockConfig>
 8001aae:	1e03      	subs	r3, r0, #0
 8001ab0:	d001      	beq.n	8001ab6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001ab2:	f001 f8ba 	bl	8002c2a <Error_Handler>
  }
}
 8001ab6:	46c0      	nop			@ (mov r8, r8)
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b013      	add	sp, #76	@ 0x4c
 8001abc:	bd90      	pop	{r4, r7, pc}
 8001abe:	46c0      	nop			@ (mov r8, r8)
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <MX_I2C1_Init+0x74>)
 8001aca:	4a1c      	ldr	r2, [pc, #112]	@ (8001b3c <MX_I2C1_Init+0x78>)
 8001acc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12166;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	@ (8001b38 <MX_I2C1_Init+0x74>)
 8001ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b40 <MX_I2C1_Init+0x7c>)
 8001ad2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <MX_I2C1_Init+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ada:	4b17      	ldr	r3, [pc, #92]	@ (8001b38 <MX_I2C1_Init+0x74>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae0:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <MX_I2C1_Init+0x74>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ae6:	4b14      	ldr	r3, [pc, #80]	@ (8001b38 <MX_I2C1_Init+0x74>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001aec:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <MX_I2C1_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af2:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <MX_I2C1_Init+0x74>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <MX_I2C1_Init+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <MX_I2C1_Init+0x74>)
 8001b00:	0018      	movs	r0, r3
 8001b02:	f002 fc3b 	bl	800437c <HAL_I2C_Init>
 8001b06:	1e03      	subs	r3, r0, #0
 8001b08:	d001      	beq.n	8001b0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b0a:	f001 f88e 	bl	8002c2a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <MX_I2C1_Init+0x74>)
 8001b10:	2100      	movs	r1, #0
 8001b12:	0018      	movs	r0, r3
 8001b14:	f003 f9de 	bl	8004ed4 <HAL_I2CEx_ConfigAnalogFilter>
 8001b18:	1e03      	subs	r3, r0, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b1c:	f001 f885 	bl	8002c2a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <MX_I2C1_Init+0x74>)
 8001b22:	2100      	movs	r1, #0
 8001b24:	0018      	movs	r0, r3
 8001b26:	f003 fa21 	bl	8004f6c <HAL_I2CEx_ConfigDigitalFilter>
 8001b2a:	1e03      	subs	r3, r0, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b2e:	f001 f87c 	bl	8002c2a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b32:	46c0      	nop			@ (mov r8, r8)
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	200000ec 	.word	0x200000ec
 8001b3c:	40005400 	.word	0x40005400
 8001b40:	00c12166 	.word	0x00c12166

08001b44 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001b48:	4b10      	ldr	r3, [pc, #64]	@ (8001b8c <MX_I2S1_Init+0x48>)
 8001b4a:	4a11      	ldr	r2, [pc, #68]	@ (8001b90 <MX_I2S1_Init+0x4c>)
 8001b4c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <MX_I2S1_Init+0x48>)
 8001b50:	2280      	movs	r2, #128	@ 0x80
 8001b52:	0092      	lsls	r2, r2, #2
 8001b54:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001b56:	4b0d      	ldr	r3, [pc, #52]	@ (8001b8c <MX_I2S1_Init+0x48>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <MX_I2S1_Init+0x48>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001b62:	4b0a      	ldr	r3, [pc, #40]	@ (8001b8c <MX_I2S1_Init+0x48>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001b68:	4b08      	ldr	r3, [pc, #32]	@ (8001b8c <MX_I2S1_Init+0x48>)
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b94 <MX_I2S1_Init+0x50>)
 8001b6c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	@ (8001b8c <MX_I2S1_Init+0x48>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <MX_I2S1_Init+0x48>)
 8001b76:	0018      	movs	r0, r3
 8001b78:	f003 fa44 	bl	8005004 <HAL_I2S_Init>
 8001b7c:	1e03      	subs	r3, r0, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_I2S1_Init+0x40>
  {
    Error_Handler();
 8001b80:	f001 f853 	bl	8002c2a <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8001b84:	46c0      	nop			@ (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	20000140 	.word	0x20000140
 8001b90:	40013000 	.word	0x40013000
 8001b94:	0000ac44 	.word	0x0000ac44

08001b98 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	@ 0x28
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 0 */

//  RTC_TimeTypeDef sTime = {0};
//  RTC_DateTypeDef sDate = {0};
  RTC_AlarmTypeDef sAlarm = {0};
 8001b9e:	003b      	movs	r3, r7
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	2328      	movs	r3, #40	@ 0x28
 8001ba4:	001a      	movs	r2, r3
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	f007 fbb4 	bl	8009314 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bac:	4b2e      	ldr	r3, [pc, #184]	@ (8001c68 <MX_RTC_Init+0xd0>)
 8001bae:	4a2f      	ldr	r2, [pc, #188]	@ (8001c6c <MX_RTC_Init+0xd4>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c68 <MX_RTC_Init+0xd0>)
 8001bb4:	2240      	movs	r2, #64	@ 0x40
 8001bb6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c68 <MX_RTC_Init+0xd0>)
 8001bba:	227f      	movs	r2, #127	@ 0x7f
 8001bbc:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8001bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001c68 <MX_RTC_Init+0xd0>)
 8001bc0:	22ff      	movs	r2, #255	@ 0xff
 8001bc2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bc4:	4b28      	ldr	r3, [pc, #160]	@ (8001c68 <MX_RTC_Init+0xd0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bca:	4b27      	ldr	r3, [pc, #156]	@ (8001c68 <MX_RTC_Init+0xd0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bd0:	4b25      	ldr	r3, [pc, #148]	@ (8001c68 <MX_RTC_Init+0xd0>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bd6:	4b24      	ldr	r3, [pc, #144]	@ (8001c68 <MX_RTC_Init+0xd0>)
 8001bd8:	2280      	movs	r2, #128	@ 0x80
 8001bda:	05d2      	lsls	r2, r2, #23
 8001bdc:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001bde:	4b22      	ldr	r3, [pc, #136]	@ (8001c68 <MX_RTC_Init+0xd0>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001be4:	4b20      	ldr	r3, [pc, #128]	@ (8001c68 <MX_RTC_Init+0xd0>)
 8001be6:	0018      	movs	r0, r3
 8001be8:	f004 fe3a 	bl	8006860 <HAL_RTC_Init>
 8001bec:	1e03      	subs	r3, r0, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001bf0:	f001 f81b 	bl	8002c2a <Error_Handler>
//    Error_Handler();
//  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8001bf4:	003b      	movs	r3, r7
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001bfa:	003b      	movs	r3, r7
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001c00:	003b      	movs	r3, r7
 8001c02:	2200      	movs	r2, #0
 8001c04:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c06:	003b      	movs	r3, r7
 8001c08:	2200      	movs	r2, #0
 8001c0a:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001c0c:	003b      	movs	r3, r7
 8001c0e:	2200      	movs	r2, #0
 8001c10:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c12:	003b      	movs	r3, r7
 8001c14:	2200      	movs	r2, #0
 8001c16:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c18:	003b      	movs	r3, r7
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8001c1e:	003b      	movs	r3, r7
 8001c20:	4a13      	ldr	r2, [pc, #76]	@ (8001c70 <MX_RTC_Init+0xd8>)
 8001c22:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c24:	003b      	movs	r3, r7
 8001c26:	2200      	movs	r2, #0
 8001c28:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c2a:	003b      	movs	r3, r7
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001c30:	003b      	movs	r3, r7
 8001c32:	2220      	movs	r2, #32
 8001c34:	2101      	movs	r1, #1
 8001c36:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c38:	003b      	movs	r3, r7
 8001c3a:	2280      	movs	r2, #128	@ 0x80
 8001c3c:	0052      	lsls	r2, r2, #1
 8001c3e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c40:	0039      	movs	r1, r7
 8001c42:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <MX_RTC_Init+0xd0>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	0018      	movs	r0, r3
 8001c48:	f004 fffe 	bl	8006c48 <HAL_RTC_SetAlarm_IT>
 8001c4c:	1e03      	subs	r3, r0, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8001c50:	f000 ffeb 	bl	8002c2a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8001c54:	4907      	ldr	r1, [pc, #28]	@ (8001c74 <MX_RTC_Init+0xdc>)
 8001c56:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <MX_RTC_Init+0xd0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f004 ff4a 	bl	8006af4 <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8001c60:	46c0      	nop			@ (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b00a      	add	sp, #40	@ 0x28
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200001d8 	.word	0x200001d8
 8001c6c:	40002800 	.word	0x40002800
 8001c70:	80800080 	.word	0x80800080
 8001c74:	200000b8 	.word	0x200000b8

08001c78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <MX_SPI2_Init+0x74>)
 8001c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cf0 <MX_SPI2_Init+0x78>)
 8001c80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c82:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <MX_SPI2_Init+0x74>)
 8001c84:	2282      	movs	r2, #130	@ 0x82
 8001c86:	0052      	lsls	r2, r2, #1
 8001c88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c8a:	4b18      	ldr	r3, [pc, #96]	@ (8001cec <MX_SPI2_Init+0x74>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c90:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <MX_SPI2_Init+0x74>)
 8001c92:	22e0      	movs	r2, #224	@ 0xe0
 8001c94:	00d2      	lsls	r2, r2, #3
 8001c96:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c98:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <MX_SPI2_Init+0x74>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c9e:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <MX_SPI2_Init+0x74>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <MX_SPI2_Init+0x74>)
 8001ca6:	2280      	movs	r2, #128	@ 0x80
 8001ca8:	0092      	lsls	r2, r2, #2
 8001caa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <MX_SPI2_Init+0x74>)
 8001cae:	2208      	movs	r2, #8
 8001cb0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <MX_SPI2_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <MX_SPI2_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <MX_SPI2_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001cc4:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <MX_SPI2_Init+0x74>)
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cca:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <MX_SPI2_Init+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <MX_SPI2_Init+0x74>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cd6:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <MX_SPI2_Init+0x74>)
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f005 fb8d 	bl	80073f8 <HAL_SPI_Init>
 8001cde:	1e03      	subs	r3, r0, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001ce2:	f000 ffa2 	bl	8002c2a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000204 	.word	0x20000204
 8001cf0:	40003800 	.word	0x40003800

08001cf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	@ 0x28
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfa:	231c      	movs	r3, #28
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	0018      	movs	r0, r3
 8001d00:	230c      	movs	r3, #12
 8001d02:	001a      	movs	r2, r3
 8001d04:	2100      	movs	r1, #0
 8001d06:	f007 fb05 	bl	8009314 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d0a:	003b      	movs	r3, r7
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	231c      	movs	r3, #28
 8001d10:	001a      	movs	r2, r3
 8001d12:	2100      	movs	r1, #0
 8001d14:	f007 fafe 	bl	8009314 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d18:	4b24      	ldr	r3, [pc, #144]	@ (8001dac <MX_TIM2_Init+0xb8>)
 8001d1a:	2280      	movs	r2, #128	@ 0x80
 8001d1c:	05d2      	lsls	r2, r2, #23
 8001d1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8001d20:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <MX_TIM2_Init+0xb8>)
 8001d22:	4a23      	ldr	r2, [pc, #140]	@ (8001db0 <MX_TIM2_Init+0xbc>)
 8001d24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d26:	4b21      	ldr	r3, [pc, #132]	@ (8001dac <MX_TIM2_Init+0xb8>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dac <MX_TIM2_Init+0xb8>)
 8001d2e:	2263      	movs	r2, #99	@ 0x63
 8001d30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d32:	4b1e      	ldr	r3, [pc, #120]	@ (8001dac <MX_TIM2_Init+0xb8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d38:	4b1c      	ldr	r3, [pc, #112]	@ (8001dac <MX_TIM2_Init+0xb8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <MX_TIM2_Init+0xb8>)
 8001d40:	0018      	movs	r0, r3
 8001d42:	f006 fbc5 	bl	80084d0 <HAL_TIM_PWM_Init>
 8001d46:	1e03      	subs	r3, r0, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d4a:	f000 ff6e 	bl	8002c2a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4e:	211c      	movs	r1, #28
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d56:	187b      	adds	r3, r7, r1
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d5c:	187a      	adds	r2, r7, r1
 8001d5e:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <MX_TIM2_Init+0xb8>)
 8001d60:	0011      	movs	r1, r2
 8001d62:	0018      	movs	r0, r3
 8001d64:	f007 fa56 	bl	8009214 <HAL_TIMEx_MasterConfigSynchronization>
 8001d68:	1e03      	subs	r3, r0, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001d6c:	f000 ff5d 	bl	8002c2a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d70:	003b      	movs	r3, r7
 8001d72:	2260      	movs	r2, #96	@ 0x60
 8001d74:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001d76:	003b      	movs	r3, r7
 8001d78:	2200      	movs	r2, #0
 8001d7a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d7c:	003b      	movs	r3, r7
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d82:	003b      	movs	r3, r7
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d88:	0039      	movs	r1, r7
 8001d8a:	4b08      	ldr	r3, [pc, #32]	@ (8001dac <MX_TIM2_Init+0xb8>)
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f006 fddc 	bl	800894c <HAL_TIM_PWM_ConfigChannel>
 8001d94:	1e03      	subs	r3, r0, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001d98:	f000 ff47 	bl	8002c2a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d9c:	4b03      	ldr	r3, [pc, #12]	@ (8001dac <MX_TIM2_Init+0xb8>)
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f001 fc0c 	bl	80035bc <HAL_TIM_MspPostInit>

}
 8001da4:	46c0      	nop			@ (mov r8, r8)
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b00a      	add	sp, #40	@ 0x28
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000320 	.word	0x20000320
 8001db0:	0000031f 	.word	0x0000031f

08001db4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001db8:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <MX_TIM14_Init+0x40>)
 8001dba:	4a0f      	ldr	r2, [pc, #60]	@ (8001df8 <MX_TIM14_Init+0x44>)
 8001dbc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001df4 <MX_TIM14_Init+0x40>)
 8001dc0:	22f4      	movs	r2, #244	@ 0xf4
 8001dc2:	0092      	lsls	r2, r2, #2
 8001dc4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <MX_TIM14_Init+0x40>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001dcc:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <MX_TIM14_Init+0x40>)
 8001dce:	4a0b      	ldr	r2, [pc, #44]	@ (8001dfc <MX_TIM14_Init+0x48>)
 8001dd0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd2:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <MX_TIM14_Init+0x40>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <MX_TIM14_Init+0x40>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001dde:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <MX_TIM14_Init+0x40>)
 8001de0:	0018      	movs	r0, r3
 8001de2:	f006 fa29 	bl	8008238 <HAL_TIM_Base_Init>
 8001de6:	1e03      	subs	r3, r0, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001dea:	f000 ff1e 	bl	8002c2a <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001dee:	46c0      	nop			@ (mov r8, r8)
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000036c 	.word	0x2000036c
 8001df8:	40002000 	.word	0x40002000
 8001dfc:	0000ffff 	.word	0x0000ffff

08001e00 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <MX_TIM16_Init+0x44>)
 8001e06:	4a10      	ldr	r2, [pc, #64]	@ (8001e48 <MX_TIM16_Init+0x48>)
 8001e08:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 58595;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <MX_TIM16_Init+0x44>)
 8001e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001e4c <MX_TIM16_Init+0x4c>)
 8001e0e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e10:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <MX_TIM16_Init+0x44>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001e16:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <MX_TIM16_Init+0x44>)
 8001e18:	4a0d      	ldr	r2, [pc, #52]	@ (8001e50 <MX_TIM16_Init+0x50>)
 8001e1a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1c:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <MX_TIM16_Init+0x44>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 10;
 8001e22:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <MX_TIM16_Init+0x44>)
 8001e24:	220a      	movs	r2, #10
 8001e26:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <MX_TIM16_Init+0x44>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e2e:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <MX_TIM16_Init+0x44>)
 8001e30:	0018      	movs	r0, r3
 8001e32:	f006 fa01 	bl	8008238 <HAL_TIM_Base_Init>
 8001e36:	1e03      	subs	r3, r0, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001e3a:	f000 fef6 	bl	8002c2a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001e3e:	46c0      	nop			@ (mov r8, r8)
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	200003b8 	.word	0x200003b8
 8001e48:	40014400 	.word	0x40014400
 8001e4c:	0000e4e3 	.word	0x0000e4e3
 8001e50:	0000ffff 	.word	0x0000ffff

08001e54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e5a:	4b10      	ldr	r3, [pc, #64]	@ (8001e9c <MX_DMA_Init+0x48>)
 8001e5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e9c <MX_DMA_Init+0x48>)
 8001e60:	2101      	movs	r1, #1
 8001e62:	430a      	orrs	r2, r1
 8001e64:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e66:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <MX_DMA_Init+0x48>)
 8001e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	2009      	movs	r0, #9
 8001e78:	f001 fdb6 	bl	80039e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e7c:	2009      	movs	r0, #9
 8001e7e:	f001 fdc8 	bl	8003a12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	200a      	movs	r0, #10
 8001e88:	f001 fdae 	bl	80039e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001e8c:	200a      	movs	r0, #10
 8001e8e:	f001 fdc0 	bl	8003a12 <HAL_NVIC_EnableIRQ>

}
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b002      	add	sp, #8
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			@ (mov r8, r8)
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b08b      	sub	sp, #44	@ 0x2c
 8001ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea6:	2414      	movs	r4, #20
 8001ea8:	193b      	adds	r3, r7, r4
 8001eaa:	0018      	movs	r0, r3
 8001eac:	2314      	movs	r3, #20
 8001eae:	001a      	movs	r2, r3
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	f007 fa2f 	bl	8009314 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb6:	4b76      	ldr	r3, [pc, #472]	@ (8002090 <MX_GPIO_Init+0x1f0>)
 8001eb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eba:	4b75      	ldr	r3, [pc, #468]	@ (8002090 <MX_GPIO_Init+0x1f0>)
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ec2:	4b73      	ldr	r3, [pc, #460]	@ (8002090 <MX_GPIO_Init+0x1f0>)
 8001ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ece:	4b70      	ldr	r3, [pc, #448]	@ (8002090 <MX_GPIO_Init+0x1f0>)
 8001ed0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ed2:	4b6f      	ldr	r3, [pc, #444]	@ (8002090 <MX_GPIO_Init+0x1f0>)
 8001ed4:	2120      	movs	r1, #32
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eda:	4b6d      	ldr	r3, [pc, #436]	@ (8002090 <MX_GPIO_Init+0x1f0>)
 8001edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ede:	2220      	movs	r2, #32
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	4b6a      	ldr	r3, [pc, #424]	@ (8002090 <MX_GPIO_Init+0x1f0>)
 8001ee8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eea:	4b69      	ldr	r3, [pc, #420]	@ (8002090 <MX_GPIO_Init+0x1f0>)
 8001eec:	2101      	movs	r1, #1
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ef2:	4b67      	ldr	r3, [pc, #412]	@ (8002090 <MX_GPIO_Init+0x1f0>)
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efe:	4b64      	ldr	r3, [pc, #400]	@ (8002090 <MX_GPIO_Init+0x1f0>)
 8001f00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f02:	4b63      	ldr	r3, [pc, #396]	@ (8002090 <MX_GPIO_Init+0x1f0>)
 8001f04:	2102      	movs	r1, #2
 8001f06:	430a      	orrs	r2, r1
 8001f08:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f0a:	4b61      	ldr	r3, [pc, #388]	@ (8002090 <MX_GPIO_Init+0x1f0>)
 8001f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f0e:	2202      	movs	r2, #2
 8001f10:	4013      	ands	r3, r2
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f16:	4b5e      	ldr	r3, [pc, #376]	@ (8002090 <MX_GPIO_Init+0x1f0>)
 8001f18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8002090 <MX_GPIO_Init+0x1f0>)
 8001f1c:	2108      	movs	r1, #8
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f22:	4b5b      	ldr	r3, [pc, #364]	@ (8002090 <MX_GPIO_Init+0x1f0>)
 8001f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f26:	2208      	movs	r2, #8
 8001f28:	4013      	ands	r3, r2
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8001f2e:	2382      	movs	r3, #130	@ 0x82
 8001f30:	019b      	lsls	r3, r3, #6
 8001f32:	4858      	ldr	r0, [pc, #352]	@ (8002094 <MX_GPIO_Init+0x1f4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	0019      	movs	r1, r3
 8001f38:	f002 f9bd 	bl	80042b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_MCLR_Pin, GPIO_PIN_SET);
 8001f3c:	238e      	movs	r3, #142	@ 0x8e
 8001f3e:	0119      	lsls	r1, r3, #4
 8001f40:	23a0      	movs	r3, #160	@ 0xa0
 8001f42:	05db      	lsls	r3, r3, #23
 8001f44:	2201      	movs	r2, #1
 8001f46:	0018      	movs	r0, r3
 8001f48:	f002 f9b5 	bl	80042b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_ENABLE_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001f4c:	4952      	ldr	r1, [pc, #328]	@ (8002098 <MX_GPIO_Init+0x1f8>)
 8001f4e:	4b53      	ldr	r3, [pc, #332]	@ (800209c <MX_GPIO_Init+0x1fc>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	0018      	movs	r0, r3
 8001f54:	f002 f9af 	bl	80042b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin, GPIO_PIN_RESET);
 8001f58:	23c0      	movs	r3, #192	@ 0xc0
 8001f5a:	00d9      	lsls	r1, r3, #3
 8001f5c:	23a0      	movs	r3, #160	@ 0xa0
 8001f5e:	05db      	lsls	r3, r3, #23
 8001f60:	2200      	movs	r2, #0
 8001f62:	0018      	movs	r0, r3
 8001f64:	f002 f9a7 	bl	80042b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAPTOUCH_RESET_GPIO_Port, CAPTOUCH_RESET_Pin, GPIO_PIN_SET);
 8001f68:	2380      	movs	r3, #128	@ 0x80
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	484b      	ldr	r0, [pc, #300]	@ (800209c <MX_GPIO_Init+0x1fc>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	0019      	movs	r1, r3
 8001f72:	f002 f9a0 	bl	80042b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|SHIFT_STORE_CLK_Pin;
 8001f76:	193b      	adds	r3, r7, r4
 8001f78:	2282      	movs	r2, #130	@ 0x82
 8001f7a:	0192      	lsls	r2, r2, #6
 8001f7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7e:	193b      	adds	r3, r7, r4
 8001f80:	2201      	movs	r2, #1
 8001f82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	193b      	adds	r3, r7, r4
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	193b      	adds	r3, r7, r4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f90:	193b      	adds	r3, r7, r4
 8001f92:	4a40      	ldr	r2, [pc, #256]	@ (8002094 <MX_GPIO_Init+0x1f4>)
 8001f94:	0019      	movs	r1, r3
 8001f96:	0010      	movs	r0, r2
 8001f98:	f002 f80c 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CHIP_SELECT_Pin MEM_nWP_Pin MEM_nHOLD_Pin SHIFT_DATA_IN_Pin
                           SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_DATA_IN_Pin
 8001f9c:	0021      	movs	r1, r4
 8001f9e:	187b      	adds	r3, r7, r1
 8001fa0:	22ee      	movs	r2, #238	@ 0xee
 8001fa2:	0112      	lsls	r2, r2, #4
 8001fa4:	601a      	str	r2, [r3, #0]
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa6:	000c      	movs	r4, r1
 8001fa8:	193b      	adds	r3, r7, r4
 8001faa:	2201      	movs	r2, #1
 8001fac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	193b      	adds	r3, r7, r4
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	193b      	adds	r3, r7, r4
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fba:	193a      	adds	r2, r7, r4
 8001fbc:	23a0      	movs	r3, #160	@ 0xa0
 8001fbe:	05db      	lsls	r3, r3, #23
 8001fc0:	0011      	movs	r1, r2
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f001 fff6 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_ENABLE_Pin DEBUG_LED_Pin CAPTOUCH_RESET_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin;
 8001fc8:	193b      	adds	r3, r7, r4
 8001fca:	4a35      	ldr	r2, [pc, #212]	@ (80020a0 <MX_GPIO_Init+0x200>)
 8001fcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fce:	193b      	adds	r3, r7, r4
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	193b      	adds	r3, r7, r4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	193b      	adds	r3, r7, r4
 8001fdc:	2200      	movs	r2, #0
 8001fde:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	193b      	adds	r3, r7, r4
 8001fe2:	4a2e      	ldr	r2, [pc, #184]	@ (800209c <MX_GPIO_Init+0x1fc>)
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	0010      	movs	r0, r2
 8001fe8:	f001 ffe4 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_SET_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = ALARM_SET_BUTTON_EXTI_Pin;
 8001fec:	193b      	adds	r3, r7, r4
 8001fee:	2280      	movs	r2, #128	@ 0x80
 8001ff0:	0212      	lsls	r2, r2, #8
 8001ff2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ff4:	193b      	adds	r3, r7, r4
 8001ff6:	2284      	movs	r2, #132	@ 0x84
 8001ff8:	0392      	lsls	r2, r2, #14
 8001ffa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ffc:	193b      	adds	r3, r7, r4
 8001ffe:	2201      	movs	r2, #1
 8002000:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALARM_SET_BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 8002002:	193a      	adds	r2, r7, r4
 8002004:	23a0      	movs	r3, #160	@ 0xa0
 8002006:	05db      	lsls	r3, r3, #23
 8002008:	0011      	movs	r1, r2
 800200a:	0018      	movs	r0, r3
 800200c:	f001 ffd2 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_EXTI_Pin MINUTE_SET_BUTTON_EXTI_Pin ALARM_EN_BUTTON_EXTI_Pin DISPLAY_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_EXTI_Pin|MINUTE_SET_BUTTON_EXTI_Pin|ALARM_EN_BUTTON_EXTI_Pin|DISPLAY_BUTTON_EXTI_Pin;
 8002010:	0021      	movs	r1, r4
 8002012:	187b      	adds	r3, r7, r1
 8002014:	220f      	movs	r2, #15
 8002016:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002018:	187b      	adds	r3, r7, r1
 800201a:	2284      	movs	r2, #132	@ 0x84
 800201c:	0392      	lsls	r2, r2, #14
 800201e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002020:	187b      	adds	r3, r7, r1
 8002022:	2201      	movs	r2, #1
 8002024:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002026:	000c      	movs	r4, r1
 8002028:	187b      	adds	r3, r7, r1
 800202a:	4a1e      	ldr	r2, [pc, #120]	@ (80020a4 <MX_GPIO_Init+0x204>)
 800202c:	0019      	movs	r1, r3
 800202e:	0010      	movs	r0, r2
 8002030:	f001 ffc0 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIME_SWITCH_EXTI_Pin */
  GPIO_InitStruct.Pin = TIME_SWITCH_EXTI_Pin;
 8002034:	0021      	movs	r1, r4
 8002036:	187b      	adds	r3, r7, r1
 8002038:	2210      	movs	r2, #16
 800203a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800203c:	187b      	adds	r3, r7, r1
 800203e:	22c4      	movs	r2, #196	@ 0xc4
 8002040:	0392      	lsls	r2, r2, #14
 8002042:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002044:	187b      	adds	r3, r7, r1
 8002046:	2201      	movs	r2, #1
 8002048:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TIME_SWITCH_EXTI_GPIO_Port, &GPIO_InitStruct);
 800204a:	187b      	adds	r3, r7, r1
 800204c:	4a13      	ldr	r2, [pc, #76]	@ (800209c <MX_GPIO_Init+0x1fc>)
 800204e:	0019      	movs	r1, r3
 8002050:	0010      	movs	r0, r2
 8002052:	f001 ffaf 	bl	8003fb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2101      	movs	r1, #1
 800205a:	2005      	movs	r0, #5
 800205c:	f001 fcc4 	bl	80039e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002060:	2005      	movs	r0, #5
 8002062:	f001 fcd6 	bl	8003a12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2102      	movs	r1, #2
 800206a:	2006      	movs	r0, #6
 800206c:	f001 fcbc 	bl	80039e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002070:	2006      	movs	r0, #6
 8002072:	f001 fcce 	bl	8003a12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	2102      	movs	r1, #2
 800207a:	2007      	movs	r0, #7
 800207c:	f001 fcb4 	bl	80039e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002080:	2007      	movs	r0, #7
 8002082:	f001 fcc6 	bl	8003a12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b00b      	add	sp, #44	@ 0x2c
 800208c:	bd90      	pop	{r4, r7, pc}
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	40021000 	.word	0x40021000
 8002094:	50000800 	.word	0x50000800
 8002098:	00001002 	.word	0x00001002
 800209c:	50000400 	.word	0x50000400
 80020a0:	00001102 	.word	0x00001102
 80020a4:	50000c00 	.word	0x50000c00

080020a8 <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80020ae:	2317      	movs	r3, #23
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 80020b6:	4a14      	ldr	r2, [pc, #80]	@ (8002108 <updateAndDisplayTime+0x60>)
 80020b8:	4914      	ldr	r1, [pc, #80]	@ (800210c <updateAndDisplayTime+0x64>)
 80020ba:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <updateAndDisplayTime+0x68>)
 80020bc:	0018      	movs	r0, r3
 80020be:	f7ff fa7d 	bl	80015bc <getRTCTime>

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 80020c2:	4b14      	ldr	r3, [pc, #80]	@ (8002114 <updateAndDisplayTime+0x6c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10e      	bne.n	80020e8 <updateAndDisplayTime+0x40>

		RTC_TimeTypeDef currTimeMil = conv2Mil(&currTime);
 80020ca:	003b      	movs	r3, r7
 80020cc:	4a0f      	ldr	r2, [pc, #60]	@ (800210c <updateAndDisplayTime+0x64>)
 80020ce:	0011      	movs	r1, r2
 80020d0:	0018      	movs	r0, r3
 80020d2:	f000 fcd1 	bl	8002a78 <conv2Mil>

		sevSeg_updateDigits(&currTimeMil, userAlarmToggle);
 80020d6:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <updateAndDisplayTime+0x70>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	001a      	movs	r2, r3
 80020dc:	003b      	movs	r3, r7
 80020de:	0011      	movs	r1, r2
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 fec9 	bl	8002e78 <sevSeg_updateDigits>
 80020e6:	e007      	b.n	80020f8 <updateAndDisplayTime+0x50>

	}
	else {
		sevSeg_updateDigits(&currTime, userAlarmToggle);
 80020e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <updateAndDisplayTime+0x70>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	001a      	movs	r2, r3
 80020ee:	4b07      	ldr	r3, [pc, #28]	@ (800210c <updateAndDisplayTime+0x64>)
 80020f0:	0011      	movs	r1, r2
 80020f2:	0018      	movs	r0, r3
 80020f4:	f000 fec0 	bl	8002e78 <sevSeg_updateDigits>
	}

	return halRet;
 80020f8:	2317      	movs	r3, #23
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	781b      	ldrb	r3, [r3, #0]

}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b006      	add	sp, #24
 8002104:	bd80      	pop	{r7, pc}
 8002106:	46c0      	nop			@ (mov r8, r8)
 8002108:	200000cc 	.word	0x200000cc
 800210c:	200000b8 	.word	0x200000b8
 8002110:	200001d8 	.word	0x200001d8
 8002114:	200000e8 	.word	0x200000e8
 8002118:	200000b5 	.word	0x200000b5

0800211c <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8002122:	2317      	movs	r3, #23
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 800212a:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <updateAndDisplayAlarm+0x54>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10e      	bne.n	8002150 <updateAndDisplayAlarm+0x34>

		RTC_TimeTypeDef userAlarmTimeMil = conv2Mil(&userAlarmTime);
 8002132:	003b      	movs	r3, r7
 8002134:	4a0f      	ldr	r2, [pc, #60]	@ (8002174 <updateAndDisplayAlarm+0x58>)
 8002136:	0011      	movs	r1, r2
 8002138:	0018      	movs	r0, r3
 800213a:	f000 fc9d 	bl	8002a78 <conv2Mil>

		sevSeg_updateDigits(&userAlarmTimeMil, userAlarmToggle);
 800213e:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <updateAndDisplayAlarm+0x5c>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	001a      	movs	r2, r3
 8002144:	003b      	movs	r3, r7
 8002146:	0011      	movs	r1, r2
 8002148:	0018      	movs	r0, r3
 800214a:	f000 fe95 	bl	8002e78 <sevSeg_updateDigits>
 800214e:	e007      	b.n	8002160 <updateAndDisplayAlarm+0x44>

	}
	else {
		sevSeg_updateDigits(&userAlarmTime, userAlarmToggle);
 8002150:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <updateAndDisplayAlarm+0x5c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	001a      	movs	r2, r3
 8002156:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <updateAndDisplayAlarm+0x58>)
 8002158:	0011      	movs	r1, r2
 800215a:	0018      	movs	r0, r3
 800215c:	f000 fe8c 	bl	8002e78 <sevSeg_updateDigits>
	}



	return halRet;
 8002160:	2317      	movs	r3, #23
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	781b      	ldrb	r3, [r3, #0]

}
 8002166:	0018      	movs	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	b006      	add	sp, #24
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	200000e8 	.word	0x200000e8
 8002174:	200000d0 	.word	0x200000d0
 8002178:	200000b5 	.word	0x200000b5

0800217c <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 800217c:	b590      	push	{r4, r7, lr}
 800217e:	b08d      	sub	sp, #52	@ 0x34
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 8002184:	2408      	movs	r4, #8
 8002186:	193b      	adds	r3, r7, r4
 8002188:	0018      	movs	r0, r3
 800218a:	2328      	movs	r3, #40	@ 0x28
 800218c:	001a      	movs	r2, r3
 800218e:	2100      	movs	r1, #0
 8002190:	f007 f8c0 	bl	8009314 <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8002194:	2380      	movs	r3, #128	@ 0x80
 8002196:	005a      	lsls	r2, r3, #1
 8002198:	1939      	adds	r1, r7, r4
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	2300      	movs	r3, #0
 800219e:	f004 fe93 	bl	8006ec8 <HAL_RTC_GetAlarm>


	  if(sAlarm.AlarmTime.Minutes>58) {
 80021a2:	193b      	adds	r3, r7, r4
 80021a4:	785b      	ldrb	r3, [r3, #1]
 80021a6:	2b3a      	cmp	r3, #58	@ 0x3a
 80021a8:	d903      	bls.n	80021b2 <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 80021aa:	193b      	adds	r3, r7, r4
 80021ac:	2200      	movs	r2, #0
 80021ae:	705a      	strb	r2, [r3, #1]
 80021b0:	e006      	b.n	80021c0 <HAL_RTC_AlarmAEventCallback+0x44>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 80021b2:	2108      	movs	r1, #8
 80021b4:	187b      	adds	r3, r7, r1
 80021b6:	785b      	ldrb	r3, [r3, #1]
 80021b8:	3301      	adds	r3, #1
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	187b      	adds	r3, r7, r1
 80021be:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 80021c0:	46c0      	nop			@ (mov r8, r8)
 80021c2:	2308      	movs	r3, #8
 80021c4:	18f9      	adds	r1, r7, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	0018      	movs	r0, r3
 80021cc:	f004 fd3c 	bl	8006c48 <HAL_RTC_SetAlarm_IT>
 80021d0:	1e03      	subs	r3, r0, #0
 80021d2:	d1f6      	bne.n	80021c2 <HAL_RTC_AlarmAEventCallback+0x46>

	  updateAndDisplayTime();
 80021d4:	f7ff ff68 	bl	80020a8 <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 80021d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <HAL_RTC_AlarmAEventCallback+0x98>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d014      	beq.n	800220a <HAL_RTC_AlarmAEventCallback+0x8e>
 80021e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002218 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80021e2:	781a      	ldrb	r2, [r3, #0]
 80021e4:	4b0d      	ldr	r3, [pc, #52]	@ (800221c <HAL_RTC_AlarmAEventCallback+0xa0>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d10e      	bne.n	800220a <HAL_RTC_AlarmAEventCallback+0x8e>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 80021ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80021ee:	785a      	ldrb	r2, [r3, #1]
 80021f0:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <HAL_RTC_AlarmAEventCallback+0xa0>)
 80021f2:	785b      	ldrb	r3, [r3, #1]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d108      	bne.n	800220a <HAL_RTC_AlarmAEventCallback+0x8e>
 80021f8:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80021fa:	78da      	ldrb	r2, [r3, #3]
 80021fc:	4b07      	ldr	r3, [pc, #28]	@ (800221c <HAL_RTC_AlarmAEventCallback+0xa0>)
 80021fe:	78db      	ldrb	r3, [r3, #3]
 8002200:	429a      	cmp	r2, r3
 8002202:	d102      	bne.n	800220a <HAL_RTC_AlarmAEventCallback+0x8e>
		  beepMode = true;
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_RTC_AlarmAEventCallback+0xa4>)
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
	  }


}
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	46bd      	mov	sp, r7
 800220e:	b00d      	add	sp, #52	@ 0x34
 8002210:	bd90      	pop	{r4, r7, pc}
 8002212:	46c0      	nop			@ (mov r8, r8)
 8002214:	200000b5 	.word	0x200000b5
 8002218:	200000d0 	.word	0x200000d0
 800221c:	200000b8 	.word	0x200000b8
 8002220:	20000406 	.word	0x20000406

08002224 <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 800222a:	4b53      	ldr	r3, [pc, #332]	@ (8002378 <userAlarmBeep+0x154>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d02d      	beq.n	800228e <userAlarmBeep+0x6a>

		// Stop the timer and
		HAL_TIM_Base_Stop_IT(timerSnooze);
 8002232:	4b52      	ldr	r3, [pc, #328]	@ (800237c <userAlarmBeep+0x158>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0018      	movs	r0, r3
 8002238:	f006 f91c 	bl	8008474 <HAL_TIM_Base_Stop_IT>

		// Reset count to 0
		// only bits 0 - 15 should be changed.
		timerSnooze->Instance->CNT &= 0xFFFF0000;
 800223c:	4b4f      	ldr	r3, [pc, #316]	@ (800237c <userAlarmBeep+0x158>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002244:	4b4d      	ldr	r3, [pc, #308]	@ (800237c <userAlarmBeep+0x158>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	0c12      	lsrs	r2, r2, #16
 800224c:	0412      	lsls	r2, r2, #16
 800224e:	625a      	str	r2, [r3, #36]	@ 0x24

		// Reset interrupt status register
		timerSnooze->Instance->SR &= 0xFFFC;
 8002250:	4b4a      	ldr	r3, [pc, #296]	@ (800237c <userAlarmBeep+0x158>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	4b48      	ldr	r3, [pc, #288]	@ (800237c <userAlarmBeep+0x158>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4948      	ldr	r1, [pc, #288]	@ (8002380 <userAlarmBeep+0x15c>)
 8002260:	400a      	ands	r2, r1
 8002262:	611a      	str	r2, [r3, #16]

		// Re-write RCR with 10
		timerSnooze->Instance->RCR &= 0xFF00;
 8002264:	4b45      	ldr	r3, [pc, #276]	@ (800237c <userAlarmBeep+0x158>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800226c:	4b43      	ldr	r3, [pc, #268]	@ (800237c <userAlarmBeep+0x158>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	22ff      	movs	r2, #255	@ 0xff
 8002274:	0212      	lsls	r2, r2, #8
 8002276:	400a      	ands	r2, r1
 8002278:	631a      	str	r2, [r3, #48]	@ 0x30
		timerSnooze->Instance->RCR |= timerSnooze_RCR;
 800227a:	4b40      	ldr	r3, [pc, #256]	@ (800237c <userAlarmBeep+0x158>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002282:	2164      	movs	r1, #100	@ 0x64
 8002284:	4b3d      	ldr	r3, [pc, #244]	@ (800237c <userAlarmBeep+0x158>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	631a      	str	r2, [r3, #48]	@ 0x30

	}

	HAL_TIM_Base_Stop(timerDelay);
 800228e:	4b3d      	ldr	r3, [pc, #244]	@ (8002384 <userAlarmBeep+0x160>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	0018      	movs	r0, r3
 8002294:	f006 f874 	bl	8008380 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8002298:	4b3a      	ldr	r3, [pc, #232]	@ (8002384 <userAlarmBeep+0x160>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0018      	movs	r0, r3
 800229e:	f006 f823 	bl	80082e8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80022a2:	4b38      	ldr	r3, [pc, #224]	@ (8002384 <userAlarmBeep+0x160>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022aa:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80022ac:	1cfb      	adds	r3, r7, #3
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]

	// Start audio DMA streams
	startAudioStream();
 80022b2:	f000 fc17 	bl	8002ae4 <startAudioStream>

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 80022b6:	f7ff fef7 	bl	80020a8 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 80022ba:	4b32      	ldr	r3, [pc, #200]	@ (8002384 <userAlarmBeep+0x160>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	4a30      	ldr	r2, [pc, #192]	@ (8002388 <userAlarmBeep+0x164>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d91a      	bls.n	8002302 <userAlarmBeep+0xde>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 80022cc:	1cfb      	adds	r3, r7, #3
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4a2e      	ldr	r2, [pc, #184]	@ (800238c <userAlarmBeep+0x168>)
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	0018      	movs	r0, r3
 80022d6:	f000 fe83 	bl	8002fe0 <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80022da:	4b2a      	ldr	r3, [pc, #168]	@ (8002384 <userAlarmBeep+0x160>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80022e4:	1cfb      	adds	r3, r7, #3
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	1e5a      	subs	r2, r3, #1
 80022ea:	4193      	sbcs	r3, r2
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2201      	movs	r2, #1
 80022f0:	4053      	eors	r3, r2
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	001a      	movs	r2, r3
 80022f6:	1cfb      	adds	r3, r7, #3
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	781a      	ldrb	r2, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	400a      	ands	r2, r1
 8002300:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 8002302:	4b23      	ldr	r3, [pc, #140]	@ (8002390 <userAlarmBeep+0x16c>)
 8002304:	0018      	movs	r0, r3
 8002306:	f7fe f935 	bl	8000574 <capTouch_readChannels>

	} while(capTouch.keyStat == 0x00 &&
 800230a:	4b21      	ldr	r3, [pc, #132]	@ (8002390 <userAlarmBeep+0x16c>)
 800230c:	7c1b      	ldrb	r3, [r3, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d108      	bne.n	8002324 <userAlarmBeep+0x100>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 8002312:	4b20      	ldr	r3, [pc, #128]	@ (8002394 <userAlarmBeep+0x170>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2204      	movs	r2, #4
 8002318:	0011      	movs	r1, r2
 800231a:	0018      	movs	r0, r3
 800231c:	f001 ffae 	bl	800427c <HAL_GPIO_ReadPin>
 8002320:	1e03      	subs	r3, r0, #0
	} while(capTouch.keyStat == 0x00 &&
 8002322:	d1c8      	bne.n	80022b6 <userAlarmBeep+0x92>

	/*
	 * Stop blinking, turn off audio, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 8002324:	4b17      	ldr	r3, [pc, #92]	@ (8002384 <userAlarmBeep+0x160>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	0018      	movs	r0, r3
 800232a:	f006 f829 	bl	8008380 <HAL_TIM_Base_Stop>

	// Stop audio stream
	stopAudioStream();
 800232e:	f000 fbf5 	bl	8002b1c <stopAudioStream>

	updateAndDisplayTime();				// Update to current time and display
 8002332:	f7ff feb9 	bl	80020a8 <updateAndDisplayTime>
	sevSeg_setIntensity(sevSeg_intensityDuty[1]);	// Set to 50% duty cycle
 8002336:	2332      	movs	r3, #50	@ 0x32
 8002338:	0018      	movs	r0, r3
 800233a:	f000 fe51 	bl	8002fe0 <sevSeg_setIntensity>
	displayToggle = 2;								// Set to 2 for future display button ISRs
 800233e:	4b16      	ldr	r3, [pc, #88]	@ (8002398 <userAlarmBeep+0x174>)
 8002340:	2202      	movs	r2, #2
 8002342:	701a      	strb	r2, [r3, #0]


	// If this is the first snooze,
	if(!secondSnooze) {
 8002344:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <userAlarmBeep+0x154>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2201      	movs	r2, #1
 800234a:	4053      	eors	r3, r2
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d008      	beq.n	8002364 <userAlarmBeep+0x140>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 8002352:	4b0a      	ldr	r3, [pc, #40]	@ (800237c <userAlarmBeep+0x158>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0018      	movs	r0, r3
 8002358:	f006 f838 	bl	80083cc <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 800235c:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <userAlarmBeep+0x154>)
 800235e:	2201      	movs	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	e002      	b.n	800236a <userAlarmBeep+0x146>
		// Reset flag
		/*
		 * This must be done here because if it's done
		 * in the top conditional, the secondSnooze is always true;
		 */
		secondSnooze = false;
 8002364:	4b04      	ldr	r3, [pc, #16]	@ (8002378 <userAlarmBeep+0x154>)
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]

	}

	// Reset beepMode bool
	beepMode = false;
 800236a:	4b0c      	ldr	r3, [pc, #48]	@ (800239c <userAlarmBeep+0x178>)
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]

}
 8002370:	46c0      	nop			@ (mov r8, r8)
 8002372:	46bd      	mov	sp, r7
 8002374:	b002      	add	sp, #8
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000405 	.word	0x20000405
 800237c:	20000070 	.word	0x20000070
 8002380:	0000fffc 	.word	0x0000fffc
 8002384:	2000006c 	.word	0x2000006c
 8002388:	00007ffe 	.word	0x00007ffe
 800238c:	080093c8 	.word	0x080093c8
 8002390:	20000408 	.word	0x20000408
 8002394:	20000000 	.word	0x20000000
 8002398:	200000b4 	.word	0x200000b4
 800239c:	20000406 	.word	0x20000406

080023a0 <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	0002      	movs	r2, r0
 80023a8:	1dbb      	adds	r3, r7, #6
 80023aa:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 80023ac:	2208      	movs	r2, #8
 80023ae:	1dbb      	adds	r3, r7, #6
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d106      	bne.n	80023c4 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 80023b6:	230f      	movs	r3, #15
 80023b8:	18fc      	adds	r4, r7, r3
 80023ba:	f000 f86f 	bl	800249c <displayButtonISR>
 80023be:	0003      	movs	r3, r0
 80023c0:	7023      	strb	r3, [r4, #0]

	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 80023c2:	e03d      	b.n	8002440 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 80023c4:	2204      	movs	r2, #4
 80023c6:	1dbb      	adds	r3, r7, #6
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d106      	bne.n	80023dc <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 80023ce:	230f      	movs	r3, #15
 80023d0:	18fc      	adds	r4, r7, r3
 80023d2:	f000 f88b 	bl	80024ec <alarmEnableISR>
 80023d6:	0003      	movs	r3, r0
 80023d8:	7023      	strb	r3, [r4, #0]
}
 80023da:	e031      	b.n	8002440 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmSetButtonPin) {
 80023dc:	2380      	movs	r3, #128	@ 0x80
 80023de:	021b      	lsls	r3, r3, #8
 80023e0:	1dba      	adds	r2, r7, #6
 80023e2:	8812      	ldrh	r2, [r2, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d106      	bne.n	80023f6 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 80023e8:	230f      	movs	r3, #15
 80023ea:	18fc      	adds	r4, r7, r3
 80023ec:	f000 f8a8 	bl	8002540 <alarmSetISR>
 80023f0:	0003      	movs	r3, r0
 80023f2:	7023      	strb	r3, [r4, #0]
}
 80023f4:	e024      	b.n	8002440 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == hourSetButtonPin) {
 80023f6:	2201      	movs	r2, #1
 80023f8:	1dbb      	adds	r3, r7, #6
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d106      	bne.n	800240e <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 8002400:	230f      	movs	r3, #15
 8002402:	18fc      	adds	r4, r7, r3
 8002404:	f000 f95c 	bl	80026c0 <hourSetISR>
 8002408:	0003      	movs	r3, r0
 800240a:	7023      	strb	r3, [r4, #0]
}
 800240c:	e018      	b.n	8002440 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == minuteSetButtonPin) {
 800240e:	2202      	movs	r2, #2
 8002410:	1dbb      	adds	r3, r7, #6
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	4293      	cmp	r3, r2
 8002416:	d106      	bne.n	8002426 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 8002418:	230f      	movs	r3, #15
 800241a:	18fc      	adds	r4, r7, r3
 800241c:	f000 f97c 	bl	8002718 <minuteSetISR>
 8002420:	0003      	movs	r3, r0
 8002422:	7023      	strb	r3, [r4, #0]
}
 8002424:	e00c      	b.n	8002440 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == timeFormatSwitchPin) {
 8002426:	2210      	movs	r2, #16
 8002428:	1dbb      	adds	r3, r7, #6
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	4293      	cmp	r3, r2
 800242e:	d106      	bne.n	800243e <HAL_GPIO_EXTI_Falling_Callback+0x9e>
		halRet = timeFormatSwitchISR();
 8002430:	230f      	movs	r3, #15
 8002432:	18fc      	adds	r4, r7, r3
 8002434:	f000 f9c2 	bl	80027bc <timeFormatSwitchISR>
 8002438:	0003      	movs	r3, r0
 800243a:	7023      	strb	r3, [r4, #0]
}
 800243c:	e000      	b.n	8002440 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
		__NOP();
 800243e:	46c0      	nop			@ (mov r8, r8)
}
 8002440:	46c0      	nop			@ (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b005      	add	sp, #20
 8002446:	bd90      	pop	{r4, r7, pc}

08002448 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	0002      	movs	r2, r0
 8002450:	1dbb      	adds	r3, r7, #6
 8002452:	801a      	strh	r2, [r3, #0]

	if(GPIO_Pin == timeFormatSwitchPin) {
 8002454:	2210      	movs	r2, #16
 8002456:	1dbb      	adds	r3, r7, #6
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	4293      	cmp	r3, r2
 800245c:	d101      	bne.n	8002462 <HAL_GPIO_EXTI_Rising_Callback+0x1a>

		timeFormatSwitchISR();
 800245e:	f000 f9ad 	bl	80027bc <timeFormatSwitchISR>

	}

}
 8002462:	46c0      	nop			@ (mov r8, r8)
 8002464:	46bd      	mov	sp, r7
 8002466:	b002      	add	sp, #8
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

	if((htim == timerSnooze) && (secondSnooze == true)) {
 8002474:	4b07      	ldr	r3, [pc, #28]	@ (8002494 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	429a      	cmp	r2, r3
 800247c:	d105      	bne.n	800248a <HAL_TIM_PeriodElapsedCallback+0x1e>
 800247e:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_TIM_PeriodElapsedCallback+0x1e>

		userAlarmBeep();
 8002486:	f7ff fecd 	bl	8002224 <userAlarmBeep>

	}

}
 800248a:	46c0      	nop			@ (mov r8, r8)
 800248c:	46bd      	mov	sp, r7
 800248e:	b002      	add	sp, #8
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			@ (mov r8, r8)
 8002494:	20000070 	.word	0x20000070
 8002498:	20000405 	.word	0x20000405

0800249c <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80024a2:	1dfb      	adds	r3, r7, #7
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 80024a8:	f7ff fdfe 	bl	80020a8 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 80024ac:	4b0d      	ldr	r3, [pc, #52]	@ (80024e4 <displayButtonISR+0x48>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	001a      	movs	r2, r3
 80024b2:	4b0d      	ldr	r3, [pc, #52]	@ (80024e8 <displayButtonISR+0x4c>)
 80024b4:	5c9b      	ldrb	r3, [r3, r2]
 80024b6:	0018      	movs	r0, r3
 80024b8:	f000 fd92 	bl	8002fe0 <sevSeg_setIntensity>

	if(displayToggle >= 1) {			// Increment display toggle or reset back down to 0;
 80024bc:	4b09      	ldr	r3, [pc, #36]	@ (80024e4 <displayButtonISR+0x48>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <displayButtonISR+0x30>
		displayToggle = 0;
 80024c4:	4b07      	ldr	r3, [pc, #28]	@ (80024e4 <displayButtonISR+0x48>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
 80024ca:	e005      	b.n	80024d8 <displayButtonISR+0x3c>
	} else {
		displayToggle++;
 80024cc:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <displayButtonISR+0x48>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	4b03      	ldr	r3, [pc, #12]	@ (80024e4 <displayButtonISR+0x48>)
 80024d6:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 80024d8:	1dfb      	adds	r3, r7, #7
 80024da:	781b      	ldrb	r3, [r3, #0]

}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200000b4 	.word	0x200000b4
 80024e8:	080093c8 	.word	0x080093c8

080024ec <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0



	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80024f2:	1dfb      	adds	r3, r7, #7
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 80024f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002538 <alarmEnableISR+0x4c>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2201      	movs	r2, #1
 80024fe:	4053      	eors	r3, r2
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <alarmEnableISR+0x22>

		userAlarmToggle = true;								// Toggle internal flag to true
 8002506:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <alarmEnableISR+0x4c>)
 8002508:	2201      	movs	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e008      	b.n	8002520 <alarmEnableISR+0x34>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 800250e:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <alarmEnableISR+0x4c>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <alarmEnableISR+0x32>

		userAlarmToggle = false;							// Toggle internal flag to false
 8002516:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <alarmEnableISR+0x4c>)
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
 800251c:	e000      	b.n	8002520 <alarmEnableISR+0x34>
	}
	else {
		__NOP();							//Code should never reach here.
 800251e:	46c0      	nop			@ (mov r8, r8)
	}

	updateAndDisplayTime();				// Update display with correct decimal point
 8002520:	f7ff fdc2 	bl	80020a8 <updateAndDisplayTime>

	// Reset snooze time
	secondSnooze = false;
 8002524:	4b05      	ldr	r3, [pc, #20]	@ (800253c <alarmEnableISR+0x50>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]

	return halRet;
 800252a:	1dfb      	adds	r3, r7, #7
 800252c:	781b      	ldrb	r3, [r3, #0]

}
 800252e:	0018      	movs	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	b002      	add	sp, #8
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	200000b5 	.word	0x200000b5
 800253c:	20000405 	.word	0x20000405

08002540 <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 8002546:	1c7b      	adds	r3, r7, #1
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 800254c:	1dfb      	adds	r3, r7, #7
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	e01a      	b.n	800258a <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 8002554:	4b55      	ldr	r3, [pc, #340]	@ (80026ac <alarmSetISR+0x16c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	0018      	movs	r0, r3
 800255a:	f005 ff11 	bl	8008380 <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 800255e:	4b53      	ldr	r3, [pc, #332]	@ (80026ac <alarmSetISR+0x16c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2200      	movs	r2, #0
 8002566:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8002568:	4b50      	ldr	r3, [pc, #320]	@ (80026ac <alarmSetISR+0x16c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0018      	movs	r0, r3
 800256e:	f005 febb 	bl	80082e8 <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 8002572:	4b4e      	ldr	r3, [pc, #312]	@ (80026ac <alarmSetISR+0x16c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	4a4d      	ldr	r2, [pc, #308]	@ (80026b0 <alarmSetISR+0x170>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d9f8      	bls.n	8002572 <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 8002580:	1dfb      	adds	r3, r7, #7
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	1dfb      	adds	r3, r7, #7
 8002586:	3201      	adds	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	1dfb      	adds	r3, r7, #7
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d9e0      	bls.n	8002554 <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 8002592:	4b48      	ldr	r3, [pc, #288]	@ (80026b4 <alarmSetISR+0x174>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2280      	movs	r2, #128	@ 0x80
 8002598:	0212      	lsls	r2, r2, #8
 800259a:	0011      	movs	r1, r2
 800259c:	0018      	movs	r0, r3
 800259e:	f001 fe6d 	bl	800427c <HAL_GPIO_ReadPin>
 80025a2:	1e03      	subs	r3, r0, #0
 80025a4:	d11f      	bne.n	80025e6 <alarmSetISR+0xa6>
		alarmSetMode = true;
 80025a6:	4b44      	ldr	r3, [pc, #272]	@ (80026b8 <alarmSetISR+0x178>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 80025ac:	4b3f      	ldr	r3, [pc, #252]	@ (80026ac <alarmSetISR+0x16c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	0018      	movs	r0, r3
 80025b2:	f005 fee5 	bl	8008380 <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 80025b6:	4b3d      	ldr	r3, [pc, #244]	@ (80026ac <alarmSetISR+0x16c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2200      	movs	r2, #0
 80025be:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80025c0:	4b3a      	ldr	r3, [pc, #232]	@ (80026ac <alarmSetISR+0x16c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f005 fe8f 	bl	80082e8 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80025ca:	4b38      	ldr	r3, [pc, #224]	@ (80026ac <alarmSetISR+0x16c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 80025d6:	1cfb      	adds	r3, r7, #3
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 80025dc:	4b36      	ldr	r3, [pc, #216]	@ (80026b8 <alarmSetISR+0x178>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d059      	beq.n	8002698 <alarmSetISR+0x158>
 80025e4:	e002      	b.n	80025ec <alarmSetISR+0xac>
		return halRet;
 80025e6:	1c7b      	adds	r3, r7, #1
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	e05a      	b.n	80026a2 <alarmSetISR+0x162>

		bool displayBlink = false;
 80025ec:	1cbb      	adds	r3, r7, #2
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 80025f2:	4b30      	ldr	r3, [pc, #192]	@ (80026b4 <alarmSetISR+0x174>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2280      	movs	r2, #128	@ 0x80
 80025f8:	0212      	lsls	r2, r2, #8
 80025fa:	0011      	movs	r1, r2
 80025fc:	0018      	movs	r0, r3
 80025fe:	f001 fe3d 	bl	800427c <HAL_GPIO_ReadPin>
 8002602:	0003      	movs	r3, r0
 8002604:	2b01      	cmp	r3, #1
 8002606:	d102      	bne.n	800260e <alarmSetISR+0xce>
				alarmSetButtonReset = true;
 8002608:	1cfb      	adds	r3, r7, #3
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 800260e:	f7ff fd85 	bl	800211c <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 8002612:	4b26      	ldr	r3, [pc, #152]	@ (80026ac <alarmSetISR+0x16c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	1ad2      	subs	r2, r2, r3
 8002620:	2380      	movs	r3, #128	@ 0x80
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	429a      	cmp	r2, r3
 8002626:	d31b      	bcc.n	8002660 <alarmSetISR+0x120>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8002628:	1cbb      	adds	r3, r7, #2
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	4a23      	ldr	r2, [pc, #140]	@ (80026bc <alarmSetISR+0x17c>)
 800262e:	5cd3      	ldrb	r3, [r2, r3]
 8002630:	0018      	movs	r0, r3
 8002632:	f000 fcd5 	bl	8002fe0 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 8002636:	4b1d      	ldr	r3, [pc, #116]	@ (80026ac <alarmSetISR+0x16c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 8002642:	1cbb      	adds	r3, r7, #2
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	1e5a      	subs	r2, r3, #1
 8002648:	4193      	sbcs	r3, r2
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2201      	movs	r2, #1
 800264e:	4053      	eors	r3, r2
 8002650:	b2db      	uxtb	r3, r3
 8002652:	001a      	movs	r2, r3
 8002654:	1cbb      	adds	r3, r7, #2
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	781a      	ldrb	r2, [r3, #0]
 800265a:	2101      	movs	r1, #1
 800265c:	400a      	ands	r2, r1
 800265e:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 8002660:	4b14      	ldr	r3, [pc, #80]	@ (80026b4 <alarmSetISR+0x174>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2280      	movs	r2, #128	@ 0x80
 8002666:	0212      	lsls	r2, r2, #8
 8002668:	0011      	movs	r1, r2
 800266a:	0018      	movs	r0, r3
 800266c:	f001 fe06 	bl	800427c <HAL_GPIO_ReadPin>
 8002670:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 8002672:	d1be      	bne.n	80025f2 <alarmSetISR+0xb2>
 8002674:	1cfb      	adds	r3, r7, #3
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2201      	movs	r2, #1
 800267a:	4053      	eors	r3, r2
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1b7      	bne.n	80025f2 <alarmSetISR+0xb2>

		sevSeg_setIntensity(sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 8002682:	2332      	movs	r3, #50	@ 0x32
 8002684:	0018      	movs	r0, r3
 8002686:	f000 fcab 	bl	8002fe0 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 800268a:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <alarmSetISR+0x16c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	0018      	movs	r0, r3
 8002690:	f005 fe76 	bl	8008380 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8002694:	f7ff fd08 	bl	80020a8 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8002698:	4b07      	ldr	r3, [pc, #28]	@ (80026b8 <alarmSetISR+0x178>)
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 800269e:	1c7b      	adds	r3, r7, #1
 80026a0:	781b      	ldrb	r3, [r3, #0]

}
 80026a2:	0018      	movs	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b002      	add	sp, #8
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			@ (mov r8, r8)
 80026ac:	2000006c 	.word	0x2000006c
 80026b0:	0000fffe 	.word	0x0000fffe
 80026b4:	20000004 	.word	0x20000004
 80026b8:	20000404 	.word	0x20000404
 80026bc:	080093c8 	.word	0x080093c8

080026c0 <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 80026c6:	1dfb      	adds	r3, r7, #7
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80026cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002708 <hourSetISR+0x48>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <hourSetISR+0x1a>

		alarmHourInc();
 80026d4:	f000 f89a 	bl	800280c <alarmHourInc>
 80026d8:	e00f      	b.n	80026fa <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 80026da:	f000 f8c7 	bl	800286c <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80026de:	490b      	ldr	r1, [pc, #44]	@ (800270c <hourSetISR+0x4c>)
 80026e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <hourSetISR+0x50>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	0018      	movs	r0, r3
 80026e6:	f004 f95d 	bl	80069a4 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80026ea:	f7ff fcdd 	bl	80020a8 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80026ee:	4a09      	ldr	r2, [pc, #36]	@ (8002714 <hourSetISR+0x54>)
 80026f0:	4906      	ldr	r1, [pc, #24]	@ (800270c <hourSetISR+0x4c>)
 80026f2:	4b07      	ldr	r3, [pc, #28]	@ (8002710 <hourSetISR+0x50>)
 80026f4:	0018      	movs	r0, r3
 80026f6:	f7fe ff61 	bl	80015bc <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 80026fa:	1dfb      	adds	r3, r7, #7
 80026fc:	781b      	ldrb	r3, [r3, #0]

}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b002      	add	sp, #8
 8002704:	bd80      	pop	{r7, pc}
 8002706:	46c0      	nop			@ (mov r8, r8)
 8002708:	20000404 	.word	0x20000404
 800270c:	200000b8 	.word	0x200000b8
 8002710:	200001d8 	.word	0x200001d8
 8002714:	200000cc 	.word	0x200000cc

08002718 <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b08c      	sub	sp, #48	@ 0x30
 800271c:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 800271e:	232f      	movs	r3, #47	@ 0x2f
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8002726:	4b21      	ldr	r3, [pc, #132]	@ (80027ac <minuteSetISR+0x94>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <minuteSetISR+0x1c>

		alarmMinuteInc();
 800272e:	f000 f8dd 	bl	80028ec <alarmMinuteInc>
 8002732:	e034      	b.n	800279e <minuteSetISR+0x86>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8002734:	f000 f8f8 	bl	8002928 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8002738:	491d      	ldr	r1, [pc, #116]	@ (80027b0 <minuteSetISR+0x98>)
 800273a:	4b1e      	ldr	r3, [pc, #120]	@ (80027b4 <minuteSetISR+0x9c>)
 800273c:	2200      	movs	r2, #0
 800273e:	0018      	movs	r0, r3
 8002740:	f004 f930 	bl	80069a4 <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	0018      	movs	r0, r3
 8002748:	2328      	movs	r3, #40	@ 0x28
 800274a:	001a      	movs	r2, r3
 800274c:	2100      	movs	r1, #0
 800274e:	f006 fde1 	bl	8009314 <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8002752:	2380      	movs	r3, #128	@ 0x80
 8002754:	005a      	lsls	r2, r3, #1
 8002756:	1d39      	adds	r1, r7, #4
 8002758:	4816      	ldr	r0, [pc, #88]	@ (80027b4 <minuteSetISR+0x9c>)
 800275a:	2300      	movs	r3, #0
 800275c:	f004 fbb4 	bl	8006ec8 <HAL_RTC_GetAlarm>

		if(sAlarm.AlarmTime.Minutes>58) {
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	785b      	ldrb	r3, [r3, #1]
 8002764:	2b3a      	cmp	r3, #58	@ 0x3a
 8002766:	d903      	bls.n	8002770 <minuteSetISR+0x58>
			sAlarm.AlarmTime.Minutes=0;
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	2200      	movs	r2, #0
 800276c:	705a      	strb	r2, [r3, #1]
 800276e:	e005      	b.n	800277c <minuteSetISR+0x64>
			//printf("Reset alarm time\n\r");
		} else {
			sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	785b      	ldrb	r3, [r3, #1]
 8002774:	3301      	adds	r3, #1
 8002776:	b2da      	uxtb	r2, r3
 8002778:	1d3b      	adds	r3, r7, #4
 800277a:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 800277c:	46c0      	nop			@ (mov r8, r8)
 800277e:	1d39      	adds	r1, r7, #4
 8002780:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <minuteSetISR+0x9c>)
 8002782:	2200      	movs	r2, #0
 8002784:	0018      	movs	r0, r3
 8002786:	f004 fa5f 	bl	8006c48 <HAL_RTC_SetAlarm_IT>
 800278a:	1e03      	subs	r3, r0, #0
 800278c:	d1f7      	bne.n	800277e <minuteSetISR+0x66>

		updateAndDisplayTime();
 800278e:	f7ff fc8b 	bl	80020a8 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8002792:	4a09      	ldr	r2, [pc, #36]	@ (80027b8 <minuteSetISR+0xa0>)
 8002794:	4906      	ldr	r1, [pc, #24]	@ (80027b0 <minuteSetISR+0x98>)
 8002796:	4b07      	ldr	r3, [pc, #28]	@ (80027b4 <minuteSetISR+0x9c>)
 8002798:	0018      	movs	r0, r3
 800279a:	f7fe ff0f 	bl	80015bc <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 800279e:	232f      	movs	r3, #47	@ 0x2f
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	781b      	ldrb	r3, [r3, #0]
}
 80027a4:	0018      	movs	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b00c      	add	sp, #48	@ 0x30
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000404 	.word	0x20000404
 80027b0:	200000b8 	.word	0x200000b8
 80027b4:	200001d8 	.word	0x200001d8
 80027b8:	200000cc 	.word	0x200000cc

080027bc <timeFormatSwitchISR>:

/*
 * Switch hour format (12 or 24 hr)
 */
HAL_StatusTypeDef timeFormatSwitchISR(void) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80027c2:	1dfb      	adds	r3, r7, #7
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]

	// Determine which time format we will be using
	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 80027c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002800 <timeFormatSwitchISR+0x44>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2210      	movs	r2, #16
 80027ce:	0011      	movs	r1, r2
 80027d0:	0018      	movs	r0, r3
 80027d2:	f001 fd53 	bl	800427c <HAL_GPIO_ReadPin>
 80027d6:	0003      	movs	r3, r0
 80027d8:	001a      	movs	r2, r3
 80027da:	4b0a      	ldr	r3, [pc, #40]	@ (8002804 <timeFormatSwitchISR+0x48>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d103      	bne.n	80027ea <timeFormatSwitchISR+0x2e>
	  userTimeFormat = RTC_HOURFORMAT_12;
 80027e2:	4b09      	ldr	r3, [pc, #36]	@ (8002808 <timeFormatSwitchISR+0x4c>)
 80027e4:	2240      	movs	r2, #64	@ 0x40
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e002      	b.n	80027f0 <timeFormatSwitchISR+0x34>
	}
	else {
	  userTimeFormat = RTC_HOURFORMAT_24;
 80027ea:	4b07      	ldr	r3, [pc, #28]	@ (8002808 <timeFormatSwitchISR+0x4c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
	}

	updateAndDisplayTime();
 80027f0:	f7ff fc5a 	bl	80020a8 <updateAndDisplayTime>

	return halRet;
 80027f4:	1dfb      	adds	r3, r7, #7
 80027f6:	781b      	ldrb	r3, [r3, #0]

}
 80027f8:	0018      	movs	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b002      	add	sp, #8
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000008 	.word	0x20000008
 8002804:	20000040 	.word	0x20000040
 8002808:	200000e8 	.word	0x200000e8

0800280c <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8002810:	4b15      	ldr	r3, [pc, #84]	@ (8002868 <alarmHourInc+0x5c>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b0b      	cmp	r3, #11
 8002816:	d903      	bls.n	8002820 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8002818:	4b13      	ldr	r3, [pc, #76]	@ (8002868 <alarmHourInc+0x5c>)
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	e01e      	b.n	800285e <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8002820:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <alarmHourInc+0x5c>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b0b      	cmp	r3, #11
 8002826:	d10e      	bne.n	8002846 <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8002828:	4b0f      	ldr	r3, [pc, #60]	@ (8002868 <alarmHourInc+0x5c>)
 800282a:	78db      	ldrb	r3, [r3, #3]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d103      	bne.n	8002838 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8002830:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <alarmHourInc+0x5c>)
 8002832:	2201      	movs	r2, #1
 8002834:	70da      	strb	r2, [r3, #3]
 8002836:	e002      	b.n	800283e <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002838:	4b0b      	ldr	r3, [pc, #44]	@ (8002868 <alarmHourInc+0x5c>)
 800283a:	2200      	movs	r2, #0
 800283c:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 800283e:	4b0a      	ldr	r3, [pc, #40]	@ (8002868 <alarmHourInc+0x5c>)
 8002840:	220c      	movs	r2, #12
 8002842:	701a      	strb	r2, [r3, #0]
 8002844:	e00b      	b.n	800285e <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 8002846:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <alarmHourInc+0x5c>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b0a      	cmp	r3, #10
 800284c:	d806      	bhi.n	800285c <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 800284e:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <alarmHourInc+0x5c>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	3301      	adds	r3, #1
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4b04      	ldr	r3, [pc, #16]	@ (8002868 <alarmHourInc+0x5c>)
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	e000      	b.n	800285e <alarmHourInc+0x52>
	}
	else {
		__NOP();
 800285c:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 800285e:	f000 f8e1 	bl	8002a24 <updateRTCBackupReg>

}
 8002862:	46c0      	nop			@ (mov r8, r8)
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	200000d0 	.word	0x200000d0

0800286c <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8002870:	4a1a      	ldr	r2, [pc, #104]	@ (80028dc <currHourInc+0x70>)
 8002872:	491b      	ldr	r1, [pc, #108]	@ (80028e0 <currHourInc+0x74>)
 8002874:	4b1b      	ldr	r3, [pc, #108]	@ (80028e4 <currHourInc+0x78>)
 8002876:	0018      	movs	r0, r3
 8002878:	f7fe fea0 	bl	80015bc <getRTCTime>

	if(currTime.Hours >= 12) {
 800287c:	4b18      	ldr	r3, [pc, #96]	@ (80028e0 <currHourInc+0x74>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b0b      	cmp	r3, #11
 8002882:	d903      	bls.n	800288c <currHourInc+0x20>
		currTime.Hours = 1;
 8002884:	4b16      	ldr	r3, [pc, #88]	@ (80028e0 <currHourInc+0x74>)
 8002886:	2201      	movs	r2, #1
 8002888:	701a      	strb	r2, [r3, #0]
 800288a:	e01e      	b.n	80028ca <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 800288c:	4b14      	ldr	r3, [pc, #80]	@ (80028e0 <currHourInc+0x74>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b0b      	cmp	r3, #11
 8002892:	d10e      	bne.n	80028b2 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8002894:	4b12      	ldr	r3, [pc, #72]	@ (80028e0 <currHourInc+0x74>)
 8002896:	78db      	ldrb	r3, [r3, #3]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d103      	bne.n	80028a4 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800289c:	4b10      	ldr	r3, [pc, #64]	@ (80028e0 <currHourInc+0x74>)
 800289e:	2201      	movs	r2, #1
 80028a0:	70da      	strb	r2, [r3, #3]
 80028a2:	e002      	b.n	80028aa <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80028a4:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <currHourInc+0x74>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 80028aa:	4b0d      	ldr	r3, [pc, #52]	@ (80028e0 <currHourInc+0x74>)
 80028ac:	220c      	movs	r2, #12
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	e00b      	b.n	80028ca <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 80028b2:	4b0d      	ldr	r3, [pc, #52]	@ (80028e8 <currHourInc+0x7c>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b0a      	cmp	r3, #10
 80028b8:	d806      	bhi.n	80028c8 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 80028ba:	4b09      	ldr	r3, [pc, #36]	@ (80028e0 <currHourInc+0x74>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	3301      	adds	r3, #1
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4b07      	ldr	r3, [pc, #28]	@ (80028e0 <currHourInc+0x74>)
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	e000      	b.n	80028ca <currHourInc+0x5e>
	}
	else {
		__NOP();
 80028c8:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 80028ca:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <currHourInc+0x74>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 80028d0:	4b03      	ldr	r3, [pc, #12]	@ (80028e0 <currHourInc+0x74>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]

}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	200000cc 	.word	0x200000cc
 80028e0:	200000b8 	.word	0x200000b8
 80028e4:	200001d8 	.word	0x200001d8
 80028e8:	200000d0 	.word	0x200000d0

080028ec <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 80028f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002924 <alarmMinuteInc+0x38>)
 80028f2:	785b      	ldrb	r3, [r3, #1]
 80028f4:	2b3a      	cmp	r3, #58	@ 0x3a
 80028f6:	d903      	bls.n	8002900 <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 80028f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002924 <alarmMinuteInc+0x38>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	705a      	strb	r2, [r3, #1]
 80028fe:	e00b      	b.n	8002918 <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 8002900:	4b08      	ldr	r3, [pc, #32]	@ (8002924 <alarmMinuteInc+0x38>)
 8002902:	785b      	ldrb	r3, [r3, #1]
 8002904:	2b3a      	cmp	r3, #58	@ 0x3a
 8002906:	d806      	bhi.n	8002916 <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8002908:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <alarmMinuteInc+0x38>)
 800290a:	785b      	ldrb	r3, [r3, #1]
 800290c:	3301      	adds	r3, #1
 800290e:	b2da      	uxtb	r2, r3
 8002910:	4b04      	ldr	r3, [pc, #16]	@ (8002924 <alarmMinuteInc+0x38>)
 8002912:	705a      	strb	r2, [r3, #1]
 8002914:	e000      	b.n	8002918 <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 8002916:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8002918:	f000 f884 	bl	8002a24 <updateRTCBackupReg>

}
 800291c:	46c0      	nop			@ (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	200000d0 	.word	0x200000d0

08002928 <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 800292c:	4a11      	ldr	r2, [pc, #68]	@ (8002974 <currMinuteInc+0x4c>)
 800292e:	4912      	ldr	r1, [pc, #72]	@ (8002978 <currMinuteInc+0x50>)
 8002930:	4b12      	ldr	r3, [pc, #72]	@ (800297c <currMinuteInc+0x54>)
 8002932:	0018      	movs	r0, r3
 8002934:	f7fe fe42 	bl	80015bc <getRTCTime>

	if(currTime.Minutes >= 59) {
 8002938:	4b0f      	ldr	r3, [pc, #60]	@ (8002978 <currMinuteInc+0x50>)
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	2b3a      	cmp	r3, #58	@ 0x3a
 800293e:	d903      	bls.n	8002948 <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 8002940:	4b0d      	ldr	r3, [pc, #52]	@ (8002978 <currMinuteInc+0x50>)
 8002942:	2200      	movs	r2, #0
 8002944:	705a      	strb	r2, [r3, #1]
 8002946:	e00b      	b.n	8002960 <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 8002948:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <currMinuteInc+0x50>)
 800294a:	785b      	ldrb	r3, [r3, #1]
 800294c:	2b3a      	cmp	r3, #58	@ 0x3a
 800294e:	d806      	bhi.n	800295e <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 8002950:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <currMinuteInc+0x50>)
 8002952:	785b      	ldrb	r3, [r3, #1]
 8002954:	3301      	adds	r3, #1
 8002956:	b2da      	uxtb	r2, r3
 8002958:	4b07      	ldr	r3, [pc, #28]	@ (8002978 <currMinuteInc+0x50>)
 800295a:	705a      	strb	r2, [r3, #1]
 800295c:	e000      	b.n	8002960 <currMinuteInc+0x38>
	}
	else {
		__NOP();
 800295e:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8002960:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <currMinuteInc+0x50>)
 8002962:	2200      	movs	r2, #0
 8002964:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8002966:	4b04      	ldr	r3, [pc, #16]	@ (8002978 <currMinuteInc+0x50>)
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]

}
 800296c:	46c0      	nop			@ (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			@ (mov r8, r8)
 8002974:	200000cc 	.word	0x200000cc
 8002978:	200000b8 	.word	0x200000b8
 800297c:	200001d8 	.word	0x200001d8

08002980 <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 8002984:	4b05      	ldr	r3, [pc, #20]	@ (800299c <dispFault+0x1c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2280      	movs	r2, #128	@ 0x80
 800298a:	0151      	lsls	r1, r2, #5
 800298c:	2201      	movs	r2, #1
 800298e:	0018      	movs	r0, r3
 8002990:	f001 fc91 	bl	80042b6 <HAL_GPIO_WritePin>
}
 8002994:	46c0      	nop			@ (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	20000028 	.word	0x20000028

080029a0 <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 80029a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a18 <dispFailure+0x78>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f005 fce8 	bl	8008380 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 80029b0:	4b19      	ldr	r3, [pc, #100]	@ (8002a18 <dispFailure+0x78>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	0018      	movs	r0, r3
 80029b6:	f005 fc97 	bl	80082e8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80029ba:	4b17      	ldr	r3, [pc, #92]	@ (8002a18 <dispFailure+0x78>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80029c4:	1cfb      	adds	r3, r7, #3
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 80029ca:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <dispFailure+0x78>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	4a11      	ldr	r2, [pc, #68]	@ (8002a1c <dispFailure+0x7c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d9f6      	bls.n	80029ca <dispFailure+0x2a>

			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 80029dc:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <dispFailure+0x80>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2280      	movs	r2, #128	@ 0x80
 80029e2:	0152      	lsls	r2, r2, #5
 80029e4:	0011      	movs	r1, r2
 80029e6:	0018      	movs	r0, r3
 80029e8:	f001 fc82 	bl	80042f0 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80029ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002a18 <dispFailure+0x78>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f4:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80029f6:	1cfb      	adds	r3, r7, #3
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	1e5a      	subs	r2, r3, #1
 80029fc:	4193      	sbcs	r3, r2
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2201      	movs	r2, #1
 8002a02:	4053      	eors	r3, r2
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	001a      	movs	r2, r3
 8002a08:	1cfb      	adds	r3, r7, #3
 8002a0a:	701a      	strb	r2, [r3, #0]
 8002a0c:	781a      	ldrb	r2, [r3, #0]
 8002a0e:	2101      	movs	r1, #1
 8002a10:	400a      	ands	r2, r1
 8002a12:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8002a14:	e7d9      	b.n	80029ca <dispFailure+0x2a>
 8002a16:	46c0      	nop			@ (mov r8, r8)
 8002a18:	2000006c 	.word	0x2000006c
 8002a1c:	00003ffe 	.word	0x00003ffe
 8002a20:	20000028 	.word	0x20000028

08002a24 <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8002a28:	4b0e      	ldr	r3, [pc, #56]	@ (8002a64 <updateRTCBackupReg+0x40>)
 8002a2a:	6819      	ldr	r1, [r3, #0]
 8002a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a68 <updateRTCBackupReg+0x44>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	001a      	movs	r2, r3
 8002a32:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <updateRTCBackupReg+0x48>)
 8002a34:	0018      	movs	r0, r3
 8002a36:	f004 fca6 	bl	8007386 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a70 <updateRTCBackupReg+0x4c>)
 8002a3c:	6819      	ldr	r1, [r3, #0]
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a68 <updateRTCBackupReg+0x44>)
 8002a40:	785b      	ldrb	r3, [r3, #1]
 8002a42:	001a      	movs	r2, r3
 8002a44:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <updateRTCBackupReg+0x48>)
 8002a46:	0018      	movs	r0, r3
 8002a48:	f004 fc9d 	bl	8007386 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8002a4c:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <updateRTCBackupReg+0x50>)
 8002a4e:	6819      	ldr	r1, [r3, #0]
 8002a50:	4b05      	ldr	r3, [pc, #20]	@ (8002a68 <updateRTCBackupReg+0x44>)
 8002a52:	78db      	ldrb	r3, [r3, #3]
 8002a54:	001a      	movs	r2, r3
 8002a56:	4b05      	ldr	r3, [pc, #20]	@ (8002a6c <updateRTCBackupReg+0x48>)
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f004 fc94 	bl	8007386 <HAL_RTCEx_BKUPWrite>

}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	200000e4 	.word	0x200000e4
 8002a68:	200000d0 	.word	0x200000d0
 8002a6c:	200001d8 	.word	0x200001d8
 8002a70:	20000034 	.word	0x20000034
 8002a74:	20000038 	.word	0x20000038

08002a78 <conv2Mil>:

/*
 * Converts the time in an AM/PM RTC time to 24-hour time
 * Returns this time in an RTC Time Def object
 */
RTC_TimeTypeDef conv2Mil(RTC_TimeTypeDef *oldTime) {
 8002a78:	b5b0      	push	{r4, r5, r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]

	RTC_TimeTypeDef convertedTime = *oldTime;
 8002a82:	250c      	movs	r5, #12
 8002a84:	197b      	adds	r3, r7, r5
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a8a:	c313      	stmia	r3!, {r0, r1, r4}
 8002a8c:	ca03      	ldmia	r2!, {r0, r1}
 8002a8e:	c303      	stmia	r3!, {r0, r1}

	// If we are in PM, increment hours by 12 (but not if it is 12 p.m.)
	if(oldTime->TimeFormat == RTC_HOURFORMAT12_PM && oldTime->Hours != 12) {
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	78db      	ldrb	r3, [r3, #3]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d10a      	bne.n	8002aae <conv2Mil+0x36>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b0c      	cmp	r3, #12
 8002a9e:	d006      	beq.n	8002aae <conv2Mil+0x36>
		convertedTime.Hours += 12;
 8002aa0:	197b      	adds	r3, r7, r5
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	197b      	adds	r3, r7, r5
 8002aaa:	701a      	strb	r2, [r3, #0]
 8002aac:	e00b      	b.n	8002ac6 <conv2Mil+0x4e>
	}
	// If we are in AM and the hours are 12, set hours to 0.
	else if(oldTime->TimeFormat == RTC_HOURFORMAT12_AM && oldTime->Hours == 12) {
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	78db      	ldrb	r3, [r3, #3]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d107      	bne.n	8002ac6 <conv2Mil+0x4e>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d103      	bne.n	8002ac6 <conv2Mil+0x4e>
		convertedTime.Hours = 0;
 8002abe:	230c      	movs	r3, #12
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
	else { // No change

	}

	// Make the update and display time function think that it is AM always
	convertedTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002ac6:	210c      	movs	r1, #12
 8002ac8:	187b      	adds	r3, r7, r1
 8002aca:	2200      	movs	r2, #0
 8002acc:	70da      	strb	r2, [r3, #3]

	return convertedTime;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	187a      	adds	r2, r7, r1
 8002ad2:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ad4:	c313      	stmia	r3!, {r0, r1, r4}
 8002ad6:	ca03      	ldmia	r2!, {r0, r1}
 8002ad8:	c303      	stmia	r3!, {r0, r1}

}
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b008      	add	sp, #32
 8002ae0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002ae4 <startAudioStream>:

/*
 * Begins DMA streams to pull data from memory, process data, and push to i2s amplifier.
 */
void startAudioStream(void) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0

	// Pre-fill TX buffer
	fillTxBuffer(0);
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f000 f843 	bl	8002b74 <fillTxBuffer>
	fillTxBuffer(BUFFER_SIZE);
 8002aee:	2040      	movs	r0, #64	@ 0x40
 8002af0:	f000 f840 	bl	8002b74 <fillTxBuffer>

	// Start TX DMA stream
	HAL_I2S_Transmit_DMA(&hi2s1, i2sTxBuff, BUFFER_SIZE * 2);
 8002af4:	4906      	ldr	r1, [pc, #24]	@ (8002b10 <startAudioStream+0x2c>)
 8002af6:	4b07      	ldr	r3, [pc, #28]	@ (8002b14 <startAudioStream+0x30>)
 8002af8:	2280      	movs	r2, #128	@ 0x80
 8002afa:	0018      	movs	r0, r3
 8002afc:	f002 fb78 	bl	80051f0 <HAL_I2S_Transmit_DMA>

	// Enable Amplifier
	NAU8315YG_AmpEnable(&i2sAmp);
 8002b00:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <startAudioStream+0x34>)
 8002b02:	0018      	movs	r0, r3
 8002b04:	f7fd ff52 	bl	80009ac <NAU8315YG_AmpEnable>

	// Interrupts will take care of the rest.

}
 8002b08:	46c0      	nop			@ (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	20000494 	.word	0x20000494
 8002b14:	20000140 	.word	0x20000140
 8002b18:	20000444 	.word	0x20000444

08002b1c <stopAudioStream>:

/*
 * Halts DMA streams
 */
void stopAudioStream(void) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0

	// Disable Amplifier
	NAU8315YG_AmpDisable(&i2sAmp);
 8002b20:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <stopAudioStream+0x20>)
 8002b22:	0018      	movs	r0, r3
 8002b24:	f7fd ff56 	bl	80009d4 <NAU8315YG_AmpDisable>

	// Stop DMA Stream
	HAL_I2S_DMAStop(&hi2s1);
 8002b28:	4b05      	ldr	r3, [pc, #20]	@ (8002b40 <stopAudioStream+0x24>)
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f002 fc0c 	bl	8005348 <HAL_I2S_DMAStop>

	// Reset memory address pointer
	flashReadAddr = initialMemoryOffset;
 8002b30:	4b04      	ldr	r3, [pc, #16]	@ (8002b44 <stopAudioStream+0x28>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]

}
 8002b36:	46c0      	nop			@ (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000444 	.word	0x20000444
 8002b40:	20000140 	.word	0x20000140
 8002b44:	20000594 	.word	0x20000594

08002b48 <HAL_I2S_TxHalfCpltCallback>:

/*
 * DMA completion callbacks
 */

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

	// Fill first half of i2s TX buffer
	fillTxBuffer(0);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f000 f80f 	bl	8002b74 <fillTxBuffer>


}
 8002b56:	46c0      	nop			@ (mov r8, r8)
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b002      	add	sp, #8
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]

	// Fill second half of i2s transmit buffer
	fillTxBuffer(BUFFER_SIZE);
 8002b66:	2040      	movs	r0, #64	@ 0x40
 8002b68:	f000 f804 	bl	8002b74 <fillTxBuffer>


}
 8002b6c:	46c0      	nop			@ (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b002      	add	sp, #8
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <fillTxBuffer>:

void fillTxBuffer(uint16_t offset) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	1dbb      	adds	r3, r7, #6
 8002b7e:	801a      	strh	r2, [r3, #0]

	// Read next chunk of audio data, increment flash read address
	W25Q_readData(&spiFlash, flashReadAddr, BUFFER_SIZE, spiRxBuff);
 8002b80:	4b20      	ldr	r3, [pc, #128]	@ (8002c04 <fillTxBuffer+0x90>)
 8002b82:	6819      	ldr	r1, [r3, #0]
 8002b84:	4b20      	ldr	r3, [pc, #128]	@ (8002c08 <fillTxBuffer+0x94>)
 8002b86:	4821      	ldr	r0, [pc, #132]	@ (8002c0c <fillTxBuffer+0x98>)
 8002b88:	2240      	movs	r2, #64	@ 0x40
 8002b8a:	f7fe fb8d 	bl	80012a8 <W25Q_readData>
	flashReadAddr += BUFFER_SIZE;
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002c04 <fillTxBuffer+0x90>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	3340      	adds	r3, #64	@ 0x40
 8002b94:	001a      	movs	r2, r3
 8002b96:	4b1b      	ldr	r3, [pc, #108]	@ (8002c04 <fillTxBuffer+0x90>)
 8002b98:	601a      	str	r2, [r3, #0]

	// Playing all of a mono file canS-mono-reduced
	 for(uint16_t i = 0; i < BUFFER_SIZE; i += 2) {
 8002b9a:	230e      	movs	r3, #14
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	801a      	strh	r2, [r3, #0]
 8002ba2:	e01d      	b.n	8002be0 <fillTxBuffer+0x6c>

		 i2sTxBuff[offset + (i) + 1] = (spiRxBuff[i + 1] << 8) | spiRxBuff[i];
 8002ba4:	200e      	movs	r0, #14
 8002ba6:	183b      	adds	r3, r7, r0
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	3301      	adds	r3, #1
 8002bac:	4a16      	ldr	r2, [pc, #88]	@ (8002c08 <fillTxBuffer+0x94>)
 8002bae:	5cd3      	ldrb	r3, [r2, r3]
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	b21a      	sxth	r2, r3
 8002bb4:	183b      	adds	r3, r7, r0
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	4913      	ldr	r1, [pc, #76]	@ (8002c08 <fillTxBuffer+0x94>)
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	b21b      	sxth	r3, r3
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	b219      	sxth	r1, r3
 8002bc2:	1dbb      	adds	r3, r7, #6
 8002bc4:	881a      	ldrh	r2, [r3, #0]
 8002bc6:	183b      	adds	r3, r7, r0
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	18d3      	adds	r3, r2, r3
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	b289      	uxth	r1, r1
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c10 <fillTxBuffer+0x9c>)
 8002bd2:	0052      	lsls	r2, r2, #1
 8002bd4:	52d1      	strh	r1, [r2, r3]
	 for(uint16_t i = 0; i < BUFFER_SIZE; i += 2) {
 8002bd6:	183b      	adds	r3, r7, r0
 8002bd8:	183a      	adds	r2, r7, r0
 8002bda:	8812      	ldrh	r2, [r2, #0]
 8002bdc:	3202      	adds	r2, #2
 8002bde:	801a      	strh	r2, [r3, #0]
 8002be0:	230e      	movs	r3, #14
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002be8:	d9dc      	bls.n	8002ba4 <fillTxBuffer+0x30>

	 }


	// If we have reached the end of the audio clip, reset flash read address
	if(flashReadAddr > audioAddr_END) {
 8002bea:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <fillTxBuffer+0x90>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a09      	ldr	r2, [pc, #36]	@ (8002c14 <fillTxBuffer+0xa0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d902      	bls.n	8002bfa <fillTxBuffer+0x86>
		flashReadAddr = initialMemoryOffset;
 8002bf4:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <fillTxBuffer+0x90>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
	}


}
 8002bfa:	46c0      	nop			@ (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b004      	add	sp, #16
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			@ (mov r8, r8)
 8002c04:	20000594 	.word	0x20000594
 8002c08:	20000454 	.word	0x20000454
 8002c0c:	2000041c 	.word	0x2000041c
 8002c10:	20000494 	.word	0x20000494
 8002c14:	00890e0e 	.word	0x00890e0e

08002c18 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

	//TEST?
	__NOP();
 8002c20:	46c0      	nop			@ (mov r8, r8)


}
 8002c22:	46c0      	nop			@ (mov r8, r8)
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b002      	add	sp, #8
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c2e:	b672      	cpsid	i
}
 8002c30:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c32:	46c0      	nop			@ (mov r8, r8)
 8002c34:	e7fd      	b.n	8002c32 <Error_Handler+0x8>
	...

08002c38 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8002c38:	b5b0      	push	{r4, r5, r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	0005      	movs	r5, r0
 8002c40:	000c      	movs	r4, r1
 8002c42:	0010      	movs	r0, r2
 8002c44:	0019      	movs	r1, r3
 8002c46:	1dbb      	adds	r3, r7, #6
 8002c48:	1c2a      	adds	r2, r5, #0
 8002c4a:	801a      	strh	r2, [r3, #0]
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	1c22      	adds	r2, r4, #0
 8002c50:	801a      	strh	r2, [r3, #0]
 8002c52:	1cbb      	adds	r3, r7, #2
 8002c54:	1c02      	adds	r2, r0, #0
 8002c56:	801a      	strh	r2, [r3, #0]
 8002c58:	003b      	movs	r3, r7
 8002c5a:	1c0a      	adds	r2, r1, #0
 8002c5c:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8002c5e:	4b7c      	ldr	r3, [pc, #496]	@ (8002e50 <sevSeg_Init+0x218>)
 8002c60:	1dba      	adds	r2, r7, #6
 8002c62:	8812      	ldrh	r2, [r2, #0]
 8002c64:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8002c66:	4b7b      	ldr	r3, [pc, #492]	@ (8002e54 <sevSeg_Init+0x21c>)
 8002c68:	1d3a      	adds	r2, r7, #4
 8002c6a:	8812      	ldrh	r2, [r2, #0]
 8002c6c:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8002c6e:	4b7a      	ldr	r3, [pc, #488]	@ (8002e58 <sevSeg_Init+0x220>)
 8002c70:	1cba      	adds	r2, r7, #2
 8002c72:	8812      	ldrh	r2, [r2, #0]
 8002c74:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8002c76:	4b79      	ldr	r3, [pc, #484]	@ (8002e5c <sevSeg_Init+0x224>)
 8002c78:	003a      	movs	r2, r7
 8002c7a:	8812      	ldrh	r2, [r2, #0]
 8002c7c:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8002c7e:	4a78      	ldr	r2, [pc, #480]	@ (8002e60 <sevSeg_Init+0x228>)
 8002c80:	2330      	movs	r3, #48	@ 0x30
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8002c88:	4a76      	ldr	r2, [pc, #472]	@ (8002e64 <sevSeg_Init+0x22c>)
 8002c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c8c:	0010      	movs	r0, r2
 8002c8e:	0019      	movs	r1, r3
 8002c90:	234c      	movs	r3, #76	@ 0x4c
 8002c92:	001a      	movs	r2, r3
 8002c94:	f006 fb6a 	bl	800936c <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8002c98:	4b73      	ldr	r3, [pc, #460]	@ (8002e68 <sevSeg_Init+0x230>)
 8002c9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c9c:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	e00b      	b.n	8002cbc <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002caa:	18d3      	adds	r3, r2, r3
 8002cac:	6819      	ldr	r1, [r3, #0]
 8002cae:	4b6f      	ldr	r3, [pc, #444]	@ (8002e6c <sevSeg_Init+0x234>)
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	0092      	lsls	r2, r2, #2
 8002cb4:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	61fb      	str	r3, [r7, #28]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	ddf0      	ble.n	8002ca4 <sevSeg_Init+0x6c>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8002cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8002e6c <sevSeg_Init+0x234>)
 8002cc4:	6918      	ldr	r0, [r3, #16]
 8002cc6:	4b66      	ldr	r3, [pc, #408]	@ (8002e60 <sevSeg_Init+0x228>)
 8002cc8:	8819      	ldrh	r1, [r3, #0]
 8002cca:	4b69      	ldr	r3, [pc, #420]	@ (8002e70 <sevSeg_Init+0x238>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	001a      	movs	r2, r3
 8002cd0:	f001 faf1 	bl	80042b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8002cd4:	4b65      	ldr	r3, [pc, #404]	@ (8002e6c <sevSeg_Init+0x234>)
 8002cd6:	6918      	ldr	r0, [r3, #16]
 8002cd8:	4b61      	ldr	r3, [pc, #388]	@ (8002e60 <sevSeg_Init+0x228>)
 8002cda:	8819      	ldrh	r1, [r3, #0]
 8002cdc:	4b64      	ldr	r3, [pc, #400]	@ (8002e70 <sevSeg_Init+0x238>)
 8002cde:	785b      	ldrb	r3, [r3, #1]
 8002ce0:	001a      	movs	r2, r3
 8002ce2:	f001 fae8 	bl	80042b6 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002ce6:	4b61      	ldr	r3, [pc, #388]	@ (8002e6c <sevSeg_Init+0x234>)
 8002ce8:	6898      	ldr	r0, [r3, #8]
 8002cea:	4b5b      	ldr	r3, [pc, #364]	@ (8002e58 <sevSeg_Init+0x220>)
 8002cec:	8819      	ldrh	r1, [r3, #0]
 8002cee:	4b60      	ldr	r3, [pc, #384]	@ (8002e70 <sevSeg_Init+0x238>)
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	001a      	movs	r2, r3
 8002cf4:	f001 fadf 	bl	80042b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002cf8:	4b5c      	ldr	r3, [pc, #368]	@ (8002e6c <sevSeg_Init+0x234>)
 8002cfa:	6898      	ldr	r0, [r3, #8]
 8002cfc:	4b56      	ldr	r3, [pc, #344]	@ (8002e58 <sevSeg_Init+0x220>)
 8002cfe:	8819      	ldrh	r1, [r3, #0]
 8002d00:	4b5b      	ldr	r3, [pc, #364]	@ (8002e70 <sevSeg_Init+0x238>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	001a      	movs	r2, r3
 8002d06:	f001 fad6 	bl	80042b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8002d0a:	4b58      	ldr	r3, [pc, #352]	@ (8002e6c <sevSeg_Init+0x234>)
 8002d0c:	68d8      	ldr	r0, [r3, #12]
 8002d0e:	4b53      	ldr	r3, [pc, #332]	@ (8002e5c <sevSeg_Init+0x224>)
 8002d10:	8819      	ldrh	r1, [r3, #0]
 8002d12:	4b57      	ldr	r3, [pc, #348]	@ (8002e70 <sevSeg_Init+0x238>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	001a      	movs	r2, r3
 8002d18:	f001 facd 	bl	80042b6 <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(50);
 8002d1c:	2032      	movs	r0, #50	@ 0x32
 8002d1e:	f000 f95f 	bl	8002fe0 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8002d22:	2308      	movs	r3, #8
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	4a53      	ldr	r2, [pc, #332]	@ (8002e74 <sevSeg_Init+0x23c>)
 8002d28:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	e038      	b.n	8002da2 <sevSeg_Init+0x16a>

		sendByte = hofSymb[i];
 8002d30:	231b      	movs	r3, #27
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	2208      	movs	r2, #8
 8002d36:	18b9      	adds	r1, r7, r2
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	188a      	adds	r2, r1, r2
 8002d3c:	7812      	ldrb	r2, [r2, #0]
 8002d3e:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8002d40:	2300      	movs	r3, #0
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	e027      	b.n	8002d96 <sevSeg_Init+0x15e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8002d46:	4b49      	ldr	r3, [pc, #292]	@ (8002e6c <sevSeg_Init+0x234>)
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	4b41      	ldr	r3, [pc, #260]	@ (8002e50 <sevSeg_Init+0x218>)
 8002d4c:	8819      	ldrh	r1, [r3, #0]
 8002d4e:	241b      	movs	r4, #27
 8002d50:	193b      	adds	r3, r7, r4
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2201      	movs	r2, #1
 8002d56:	4013      	ands	r3, r2
 8002d58:	4a45      	ldr	r2, [pc, #276]	@ (8002e70 <sevSeg_Init+0x238>)
 8002d5a:	5cd3      	ldrb	r3, [r2, r3]
 8002d5c:	001a      	movs	r2, r3
 8002d5e:	f001 faaa 	bl	80042b6 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8002d62:	4b42      	ldr	r3, [pc, #264]	@ (8002e6c <sevSeg_Init+0x234>)
 8002d64:	6858      	ldr	r0, [r3, #4]
 8002d66:	4b3b      	ldr	r3, [pc, #236]	@ (8002e54 <sevSeg_Init+0x21c>)
 8002d68:	8819      	ldrh	r1, [r3, #0]
 8002d6a:	4b41      	ldr	r3, [pc, #260]	@ (8002e70 <sevSeg_Init+0x238>)
 8002d6c:	785b      	ldrb	r3, [r3, #1]
 8002d6e:	001a      	movs	r2, r3
 8002d70:	f001 faa1 	bl	80042b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8002d74:	4b3d      	ldr	r3, [pc, #244]	@ (8002e6c <sevSeg_Init+0x234>)
 8002d76:	6858      	ldr	r0, [r3, #4]
 8002d78:	4b36      	ldr	r3, [pc, #216]	@ (8002e54 <sevSeg_Init+0x21c>)
 8002d7a:	8819      	ldrh	r1, [r3, #0]
 8002d7c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e70 <sevSeg_Init+0x238>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	001a      	movs	r2, r3
 8002d82:	f001 fa98 	bl	80042b6 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8002d86:	193b      	adds	r3, r7, r4
 8002d88:	193a      	adds	r2, r7, r4
 8002d8a:	7812      	ldrb	r2, [r2, #0]
 8002d8c:	0852      	lsrs	r2, r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	3301      	adds	r3, #1
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b07      	cmp	r3, #7
 8002d9a:	ddd4      	ble.n	8002d46 <sevSeg_Init+0x10e>
	for(int i = 0; i <= 3; i++) {
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	ddc3      	ble.n	8002d30 <sevSeg_Init+0xf8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002da8:	4b30      	ldr	r3, [pc, #192]	@ (8002e6c <sevSeg_Init+0x234>)
 8002daa:	6898      	ldr	r0, [r3, #8]
 8002dac:	4b2a      	ldr	r3, [pc, #168]	@ (8002e58 <sevSeg_Init+0x220>)
 8002dae:	8819      	ldrh	r1, [r3, #0]
 8002db0:	4b2f      	ldr	r3, [pc, #188]	@ (8002e70 <sevSeg_Init+0x238>)
 8002db2:	785b      	ldrb	r3, [r3, #1]
 8002db4:	001a      	movs	r2, r3
 8002db6:	f001 fa7e 	bl	80042b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002dba:	4b2c      	ldr	r3, [pc, #176]	@ (8002e6c <sevSeg_Init+0x234>)
 8002dbc:	6898      	ldr	r0, [r3, #8]
 8002dbe:	4b26      	ldr	r3, [pc, #152]	@ (8002e58 <sevSeg_Init+0x220>)
 8002dc0:	8819      	ldrh	r1, [r3, #0]
 8002dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e70 <sevSeg_Init+0x238>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	001a      	movs	r2, r3
 8002dc8:	f001 fa75 	bl	80042b6 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f005 fad6 	bl	8008380 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f005 fa86 	bl	80082e8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de2:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8002de4:	46c0      	nop			@ (mov r8, r8)
 8002de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1ad2      	subs	r2, r2, r3
 8002df0:	2380      	movs	r3, #128	@ 0x80
 8002df2:	01db      	lsls	r3, r3, #7
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d3f6      	bcc.n	8002de6 <sevSeg_Init+0x1ae>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8002df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f005 fac0 	bl	8008380 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8002e00:	4b1a      	ldr	r3, [pc, #104]	@ (8002e6c <sevSeg_Init+0x234>)
 8002e02:	6918      	ldr	r0, [r3, #16]
 8002e04:	4b16      	ldr	r3, [pc, #88]	@ (8002e60 <sevSeg_Init+0x228>)
 8002e06:	8819      	ldrh	r1, [r3, #0]
 8002e08:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <sevSeg_Init+0x238>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	f001 fa52 	bl	80042b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8002e12:	4b16      	ldr	r3, [pc, #88]	@ (8002e6c <sevSeg_Init+0x234>)
 8002e14:	6918      	ldr	r0, [r3, #16]
 8002e16:	4b12      	ldr	r3, [pc, #72]	@ (8002e60 <sevSeg_Init+0x228>)
 8002e18:	8819      	ldrh	r1, [r3, #0]
 8002e1a:	4b15      	ldr	r3, [pc, #84]	@ (8002e70 <sevSeg_Init+0x238>)
 8002e1c:	785b      	ldrb	r3, [r3, #1]
 8002e1e:	001a      	movs	r2, r3
 8002e20:	f001 fa49 	bl	80042b6 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002e24:	4b11      	ldr	r3, [pc, #68]	@ (8002e6c <sevSeg_Init+0x234>)
 8002e26:	6898      	ldr	r0, [r3, #8]
 8002e28:	4b0b      	ldr	r3, [pc, #44]	@ (8002e58 <sevSeg_Init+0x220>)
 8002e2a:	8819      	ldrh	r1, [r3, #0]
 8002e2c:	4b10      	ldr	r3, [pc, #64]	@ (8002e70 <sevSeg_Init+0x238>)
 8002e2e:	785b      	ldrb	r3, [r3, #1]
 8002e30:	001a      	movs	r2, r3
 8002e32:	f001 fa40 	bl	80042b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002e36:	4b0d      	ldr	r3, [pc, #52]	@ (8002e6c <sevSeg_Init+0x234>)
 8002e38:	6898      	ldr	r0, [r3, #8]
 8002e3a:	4b07      	ldr	r3, [pc, #28]	@ (8002e58 <sevSeg_Init+0x220>)
 8002e3c:	8819      	ldrh	r1, [r3, #0]
 8002e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e70 <sevSeg_Init+0x238>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	001a      	movs	r2, r3
 8002e44:	f001 fa37 	bl	80042b6 <HAL_GPIO_WritePin>

}
 8002e48:	46c0      	nop			@ (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b008      	add	sp, #32
 8002e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e50:	20000598 	.word	0x20000598
 8002e54:	2000059a 	.word	0x2000059a
 8002e58:	2000059c 	.word	0x2000059c
 8002e5c:	2000059e 	.word	0x2000059e
 8002e60:	200005a0 	.word	0x200005a0
 8002e64:	200005a4 	.word	0x200005a4
 8002e68:	200005f0 	.word	0x200005f0
 8002e6c:	20000074 	.word	0x20000074
 8002e70:	20000088 	.word	0x20000088
 8002e74:	471d3700 	.word	0x471d3700

08002e78 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime, uint8_t userAlarmEnable) {
 8002e78:	b590      	push	{r4, r7, lr}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	000a      	movs	r2, r1
 8002e82:	1cfb      	adds	r3, r7, #3
 8002e84:	701a      	strb	r2, [r3, #0]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	210a      	movs	r1, #10
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7fd f939 	bl	8000104 <__udivsi3>
 8002e92:	0003      	movs	r3, r0
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	2408      	movs	r4, #8
 8002e98:	193b      	adds	r3, r7, r4
 8002e9a:	701a      	strb	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	210a      	movs	r1, #10
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f7fd f9b4 	bl	8000210 <__aeabi_uidivmod>
 8002ea8:	000b      	movs	r3, r1
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	193b      	adds	r3, r7, r4
 8002eae:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002eb4:	210a      	movs	r1, #10
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f7fd f924 	bl	8000104 <__udivsi3>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	193b      	adds	r3, r7, r4
 8002ec2:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002ec8:	210a      	movs	r1, #10
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f7fd f9a0 	bl	8000210 <__aeabi_uidivmod>
 8002ed0:	000b      	movs	r3, r1
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	193b      	adds	r3, r7, r4
 8002ed6:	70da      	strb	r2, [r3, #3]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 3; i >= 0; i--) {
 8002ed8:	2303      	movs	r3, #3
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	e05b      	b.n	8002f96 <sevSeg_updateDigits+0x11e>

		sendByte = dispDigits[sendTime[i]];
 8002ede:	2308      	movs	r3, #8
 8002ee0:	18fa      	adds	r2, r7, r3
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	18d3      	adds	r3, r2, r3
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	0019      	movs	r1, r3
 8002eea:	2017      	movs	r0, #23
 8002eec:	183b      	adds	r3, r7, r0
 8002eee:	4a36      	ldr	r2, [pc, #216]	@ (8002fc8 <sevSeg_updateDigits+0x150>)
 8002ef0:	5c52      	ldrb	r2, [r2, r1]
 8002ef2:	701a      	strb	r2, [r3, #0]

		// If tenth's place of hour and zero, disable this segment
		if( (i == 0) && (sendByte == dispDigits[0])) {
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d107      	bne.n	8002f0a <sevSeg_updateDigits+0x92>
 8002efa:	2242      	movs	r2, #66	@ 0x42
 8002efc:	183b      	adds	r3, r7, r0
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d102      	bne.n	8002f0a <sevSeg_updateDigits+0x92>
			sendByte = 0xFF;
 8002f04:	183b      	adds	r3, r7, r0
 8002f06:	22ff      	movs	r2, #255	@ 0xff
 8002f08:	701a      	strb	r2, [r3, #0]
		}

		// If one's place of hour, set decimal point based on AM/PM.
		// OR
		// If one's place of minute, set decimal place based on user alarm enabled
		if( ((i == 1) && (updateTime->TimeFormat == RTC_HOURFORMAT12_PM)) ||
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d103      	bne.n	8002f18 <sevSeg_updateDigits+0xa0>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	78db      	ldrb	r3, [r3, #3]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d006      	beq.n	8002f26 <sevSeg_updateDigits+0xae>
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d10a      	bne.n	8002f34 <sevSeg_updateDigits+0xbc>
			((i == 3) && userAlarmEnable)	) {
 8002f1e:	1cfb      	adds	r3, r7, #3
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d006      	beq.n	8002f34 <sevSeg_updateDigits+0xbc>
			sendByte = (sendByte & 0b11111101);
 8002f26:	2217      	movs	r2, #23
 8002f28:	18bb      	adds	r3, r7, r2
 8002f2a:	18ba      	adds	r2, r7, r2
 8002f2c:	7812      	ldrb	r2, [r2, #0]
 8002f2e:	2102      	movs	r1, #2
 8002f30:	438a      	bics	r2, r1
 8002f32:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	e027      	b.n	8002f8a <sevSeg_updateDigits+0x112>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[(sendByte & 1)]);
 8002f3a:	4b24      	ldr	r3, [pc, #144]	@ (8002fcc <sevSeg_updateDigits+0x154>)
 8002f3c:	6818      	ldr	r0, [r3, #0]
 8002f3e:	4b24      	ldr	r3, [pc, #144]	@ (8002fd0 <sevSeg_updateDigits+0x158>)
 8002f40:	8819      	ldrh	r1, [r3, #0]
 8002f42:	2417      	movs	r4, #23
 8002f44:	193b      	adds	r3, r7, r4
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	4a21      	ldr	r2, [pc, #132]	@ (8002fd4 <sevSeg_updateDigits+0x15c>)
 8002f4e:	5cd3      	ldrb	r3, [r2, r3]
 8002f50:	001a      	movs	r2, r3
 8002f52:	f001 f9b0 	bl	80042b6 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8002f56:	4b1d      	ldr	r3, [pc, #116]	@ (8002fcc <sevSeg_updateDigits+0x154>)
 8002f58:	6858      	ldr	r0, [r3, #4]
 8002f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd8 <sevSeg_updateDigits+0x160>)
 8002f5c:	8819      	ldrh	r1, [r3, #0]
 8002f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd4 <sevSeg_updateDigits+0x15c>)
 8002f60:	785b      	ldrb	r3, [r3, #1]
 8002f62:	001a      	movs	r2, r3
 8002f64:	f001 f9a7 	bl	80042b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8002f68:	4b18      	ldr	r3, [pc, #96]	@ (8002fcc <sevSeg_updateDigits+0x154>)
 8002f6a:	6858      	ldr	r0, [r3, #4]
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd8 <sevSeg_updateDigits+0x160>)
 8002f6e:	8819      	ldrh	r1, [r3, #0]
 8002f70:	4b18      	ldr	r3, [pc, #96]	@ (8002fd4 <sevSeg_updateDigits+0x15c>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	001a      	movs	r2, r3
 8002f76:	f001 f99e 	bl	80042b6 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8002f7a:	193b      	adds	r3, r7, r4
 8002f7c:	193a      	adds	r2, r7, r4
 8002f7e:	7812      	ldrb	r2, [r2, #0]
 8002f80:	0852      	lsrs	r2, r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3301      	adds	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b07      	cmp	r3, #7
 8002f8e:	ddd4      	ble.n	8002f3a <sevSeg_updateDigits+0xc2>
	for(int i = 3; i >= 0; i--) {
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	daa0      	bge.n	8002ede <sevSeg_updateDigits+0x66>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fcc <sevSeg_updateDigits+0x154>)
 8002f9e:	6898      	ldr	r0, [r3, #8]
 8002fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8002fdc <sevSeg_updateDigits+0x164>)
 8002fa2:	8819      	ldrh	r1, [r3, #0]
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <sevSeg_updateDigits+0x15c>)
 8002fa6:	785b      	ldrb	r3, [r3, #1]
 8002fa8:	001a      	movs	r2, r3
 8002faa:	f001 f984 	bl	80042b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002fae:	4b07      	ldr	r3, [pc, #28]	@ (8002fcc <sevSeg_updateDigits+0x154>)
 8002fb0:	6898      	ldr	r0, [r3, #8]
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fdc <sevSeg_updateDigits+0x164>)
 8002fb4:	8819      	ldrh	r1, [r3, #0]
 8002fb6:	4b07      	ldr	r3, [pc, #28]	@ (8002fd4 <sevSeg_updateDigits+0x15c>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	001a      	movs	r2, r3
 8002fbc:	f001 f97b 	bl	80042b6 <HAL_GPIO_WritePin>

	return;
 8002fc0:	46c0      	nop			@ (mov r8, r8)

}
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b007      	add	sp, #28
 8002fc6:	bd90      	pop	{r4, r7, pc}
 8002fc8:	080093cc 	.word	0x080093cc
 8002fcc:	20000074 	.word	0x20000074
 8002fd0:	20000598 	.word	0x20000598
 8002fd4:	20000088 	.word	0x20000088
 8002fd8:	2000059a 	.word	0x2000059a
 8002fdc:	2000059c 	.word	0x2000059c

08002fe0 <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	1dbb      	adds	r3, r7, #6
 8002fea:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8002fec:	4b20      	ldr	r3, [pc, #128]	@ (8003070 <sevSeg_setIntensity+0x90>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d105      	bne.n	8003000 <sevSeg_setIntensity+0x20>
 8002ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8003074 <sevSeg_setIntensity+0x94>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	1dba      	adds	r2, r7, #6
 8002ffa:	8812      	ldrh	r2, [r2, #0]
 8002ffc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ffe:	e02c      	b.n	800305a <sevSeg_setIntensity+0x7a>
 8003000:	4b1b      	ldr	r3, [pc, #108]	@ (8003070 <sevSeg_setIntensity+0x90>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b04      	cmp	r3, #4
 8003006:	d105      	bne.n	8003014 <sevSeg_setIntensity+0x34>
 8003008:	4b1a      	ldr	r3, [pc, #104]	@ (8003074 <sevSeg_setIntensity+0x94>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	1dbb      	adds	r3, r7, #6
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	6393      	str	r3, [r2, #56]	@ 0x38
 8003012:	e022      	b.n	800305a <sevSeg_setIntensity+0x7a>
 8003014:	4b16      	ldr	r3, [pc, #88]	@ (8003070 <sevSeg_setIntensity+0x90>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b08      	cmp	r3, #8
 800301a:	d105      	bne.n	8003028 <sevSeg_setIntensity+0x48>
 800301c:	4b15      	ldr	r3, [pc, #84]	@ (8003074 <sevSeg_setIntensity+0x94>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	1dbb      	adds	r3, r7, #6
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003026:	e018      	b.n	800305a <sevSeg_setIntensity+0x7a>
 8003028:	4b11      	ldr	r3, [pc, #68]	@ (8003070 <sevSeg_setIntensity+0x90>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b0c      	cmp	r3, #12
 800302e:	d105      	bne.n	800303c <sevSeg_setIntensity+0x5c>
 8003030:	4b10      	ldr	r3, [pc, #64]	@ (8003074 <sevSeg_setIntensity+0x94>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	1dbb      	adds	r3, r7, #6
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	6413      	str	r3, [r2, #64]	@ 0x40
 800303a:	e00e      	b.n	800305a <sevSeg_setIntensity+0x7a>
 800303c:	4b0c      	ldr	r3, [pc, #48]	@ (8003070 <sevSeg_setIntensity+0x90>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b10      	cmp	r3, #16
 8003042:	d105      	bne.n	8003050 <sevSeg_setIntensity+0x70>
 8003044:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <sevSeg_setIntensity+0x94>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	1dbb      	adds	r3, r7, #6
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	6593      	str	r3, [r2, #88]	@ 0x58
 800304e:	e004      	b.n	800305a <sevSeg_setIntensity+0x7a>
 8003050:	4b08      	ldr	r3, [pc, #32]	@ (8003074 <sevSeg_setIntensity+0x94>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	1dbb      	adds	r3, r7, #6
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 800305a:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <sevSeg_setIntensity+0x90>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	4b05      	ldr	r3, [pc, #20]	@ (8003074 <sevSeg_setIntensity+0x94>)
 8003060:	0011      	movs	r1, r2
 8003062:	0018      	movs	r0, r3
 8003064:	f005 fa8c 	bl	8008580 <HAL_TIM_PWM_Start>

}
 8003068:	46c0      	nop			@ (mov r8, r8)
 800306a:	46bd      	mov	sp, r7
 800306c:	b002      	add	sp, #8
 800306e:	bd80      	pop	{r7, pc}
 8003070:	200005f0 	.word	0x200005f0
 8003074:	200005a4 	.word	0x200005a4

08003078 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307e:	4b13      	ldr	r3, [pc, #76]	@ (80030cc <HAL_MspInit+0x54>)
 8003080:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003082:	4b12      	ldr	r3, [pc, #72]	@ (80030cc <HAL_MspInit+0x54>)
 8003084:	2101      	movs	r1, #1
 8003086:	430a      	orrs	r2, r1
 8003088:	641a      	str	r2, [r3, #64]	@ 0x40
 800308a:	4b10      	ldr	r3, [pc, #64]	@ (80030cc <HAL_MspInit+0x54>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	2201      	movs	r2, #1
 8003090:	4013      	ands	r3, r2
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	4b0d      	ldr	r3, [pc, #52]	@ (80030cc <HAL_MspInit+0x54>)
 8003098:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800309a:	4b0c      	ldr	r3, [pc, #48]	@ (80030cc <HAL_MspInit+0x54>)
 800309c:	2180      	movs	r1, #128	@ 0x80
 800309e:	0549      	lsls	r1, r1, #21
 80030a0:	430a      	orrs	r2, r1
 80030a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030a4:	4b09      	ldr	r3, [pc, #36]	@ (80030cc <HAL_MspInit+0x54>)
 80030a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030a8:	2380      	movs	r3, #128	@ 0x80
 80030aa:	055b      	lsls	r3, r3, #21
 80030ac:	4013      	ands	r3, r2
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80030b2:	2200      	movs	r2, #0
 80030b4:	2100      	movs	r1, #0
 80030b6:	2004      	movs	r0, #4
 80030b8:	f000 fc96 	bl	80039e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80030bc:	2004      	movs	r0, #4
 80030be:	f000 fca8 	bl	8003a12 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030c2:	46c0      	nop			@ (mov r8, r8)
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b002      	add	sp, #8
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	46c0      	nop			@ (mov r8, r8)
 80030cc:	40021000 	.word	0x40021000

080030d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030d0:	b590      	push	{r4, r7, lr}
 80030d2:	b095      	sub	sp, #84	@ 0x54
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d8:	233c      	movs	r3, #60	@ 0x3c
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	0018      	movs	r0, r3
 80030de:	2314      	movs	r3, #20
 80030e0:	001a      	movs	r2, r3
 80030e2:	2100      	movs	r1, #0
 80030e4:	f006 f916 	bl	8009314 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030e8:	2414      	movs	r4, #20
 80030ea:	193b      	adds	r3, r7, r4
 80030ec:	0018      	movs	r0, r3
 80030ee:	2328      	movs	r3, #40	@ 0x28
 80030f0:	001a      	movs	r2, r3
 80030f2:	2100      	movs	r1, #0
 80030f4:	f006 f90e 	bl	8009314 <memset>
  if(hi2c->Instance==I2C1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a22      	ldr	r2, [pc, #136]	@ (8003188 <HAL_I2C_MspInit+0xb8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d13d      	bne.n	800317e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003102:	193b      	adds	r3, r7, r4
 8003104:	2220      	movs	r2, #32
 8003106:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003108:	193b      	adds	r3, r7, r4
 800310a:	2200      	movs	r2, #0
 800310c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800310e:	193b      	adds	r3, r7, r4
 8003110:	0018      	movs	r0, r3
 8003112:	f002 ff93 	bl	800603c <HAL_RCCEx_PeriphCLKConfig>
 8003116:	1e03      	subs	r3, r0, #0
 8003118:	d001      	beq.n	800311e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800311a:	f7ff fd86 	bl	8002c2a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800311e:	4b1b      	ldr	r3, [pc, #108]	@ (800318c <HAL_I2C_MspInit+0xbc>)
 8003120:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003122:	4b1a      	ldr	r3, [pc, #104]	@ (800318c <HAL_I2C_MspInit+0xbc>)
 8003124:	2102      	movs	r1, #2
 8003126:	430a      	orrs	r2, r1
 8003128:	635a      	str	r2, [r3, #52]	@ 0x34
 800312a:	4b18      	ldr	r3, [pc, #96]	@ (800318c <HAL_I2C_MspInit+0xbc>)
 800312c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800312e:	2202      	movs	r2, #2
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003136:	213c      	movs	r1, #60	@ 0x3c
 8003138:	187b      	adds	r3, r7, r1
 800313a:	22c0      	movs	r2, #192	@ 0xc0
 800313c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800313e:	187b      	adds	r3, r7, r1
 8003140:	2212      	movs	r2, #18
 8003142:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	187b      	adds	r3, r7, r1
 8003146:	2200      	movs	r2, #0
 8003148:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314a:	187b      	adds	r3, r7, r1
 800314c:	2200      	movs	r2, #0
 800314e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003150:	187b      	adds	r3, r7, r1
 8003152:	2206      	movs	r2, #6
 8003154:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003156:	187b      	adds	r3, r7, r1
 8003158:	4a0d      	ldr	r2, [pc, #52]	@ (8003190 <HAL_I2C_MspInit+0xc0>)
 800315a:	0019      	movs	r1, r3
 800315c:	0010      	movs	r0, r2
 800315e:	f000 ff29 	bl	8003fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003162:	4b0a      	ldr	r3, [pc, #40]	@ (800318c <HAL_I2C_MspInit+0xbc>)
 8003164:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003166:	4b09      	ldr	r3, [pc, #36]	@ (800318c <HAL_I2C_MspInit+0xbc>)
 8003168:	2180      	movs	r1, #128	@ 0x80
 800316a:	0389      	lsls	r1, r1, #14
 800316c:	430a      	orrs	r2, r1
 800316e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003170:	4b06      	ldr	r3, [pc, #24]	@ (800318c <HAL_I2C_MspInit+0xbc>)
 8003172:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003174:	2380      	movs	r3, #128	@ 0x80
 8003176:	039b      	lsls	r3, r3, #14
 8003178:	4013      	ands	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800317e:	46c0      	nop			@ (mov r8, r8)
 8003180:	46bd      	mov	sp, r7
 8003182:	b015      	add	sp, #84	@ 0x54
 8003184:	bd90      	pop	{r4, r7, pc}
 8003186:	46c0      	nop			@ (mov r8, r8)
 8003188:	40005400 	.word	0x40005400
 800318c:	40021000 	.word	0x40021000
 8003190:	50000400 	.word	0x50000400

08003194 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b095      	sub	sp, #84	@ 0x54
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319c:	233c      	movs	r3, #60	@ 0x3c
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	0018      	movs	r0, r3
 80031a2:	2314      	movs	r3, #20
 80031a4:	001a      	movs	r2, r3
 80031a6:	2100      	movs	r1, #0
 80031a8:	f006 f8b4 	bl	8009314 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031ac:	2414      	movs	r4, #20
 80031ae:	193b      	adds	r3, r7, r4
 80031b0:	0018      	movs	r0, r3
 80031b2:	2328      	movs	r3, #40	@ 0x28
 80031b4:	001a      	movs	r2, r3
 80031b6:	2100      	movs	r1, #0
 80031b8:	f006 f8ac 	bl	8009314 <memset>
  if(hi2s->Instance==SPI1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a4a      	ldr	r2, [pc, #296]	@ (80032ec <HAL_I2S_MspInit+0x158>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d000      	beq.n	80031c8 <HAL_I2S_MspInit+0x34>
 80031c6:	e08d      	b.n	80032e4 <HAL_I2S_MspInit+0x150>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80031c8:	193b      	adds	r3, r7, r4
 80031ca:	2280      	movs	r2, #128	@ 0x80
 80031cc:	0112      	lsls	r2, r2, #4
 80031ce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80031d0:	193b      	adds	r3, r7, r4
 80031d2:	2200      	movs	r2, #0
 80031d4:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031d6:	193b      	adds	r3, r7, r4
 80031d8:	0018      	movs	r0, r3
 80031da:	f002 ff2f 	bl	800603c <HAL_RCCEx_PeriphCLKConfig>
 80031de:	1e03      	subs	r3, r0, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80031e2:	f7ff fd22 	bl	8002c2a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031e6:	4b42      	ldr	r3, [pc, #264]	@ (80032f0 <HAL_I2S_MspInit+0x15c>)
 80031e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ea:	4b41      	ldr	r3, [pc, #260]	@ (80032f0 <HAL_I2S_MspInit+0x15c>)
 80031ec:	2180      	movs	r1, #128	@ 0x80
 80031ee:	0149      	lsls	r1, r1, #5
 80031f0:	430a      	orrs	r2, r1
 80031f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80031f4:	4b3e      	ldr	r3, [pc, #248]	@ (80032f0 <HAL_I2S_MspInit+0x15c>)
 80031f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031f8:	2380      	movs	r3, #128	@ 0x80
 80031fa:	015b      	lsls	r3, r3, #5
 80031fc:	4013      	ands	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003202:	4b3b      	ldr	r3, [pc, #236]	@ (80032f0 <HAL_I2S_MspInit+0x15c>)
 8003204:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003206:	4b3a      	ldr	r3, [pc, #232]	@ (80032f0 <HAL_I2S_MspInit+0x15c>)
 8003208:	2101      	movs	r1, #1
 800320a:	430a      	orrs	r2, r1
 800320c:	635a      	str	r2, [r3, #52]	@ 0x34
 800320e:	4b38      	ldr	r3, [pc, #224]	@ (80032f0 <HAL_I2S_MspInit+0x15c>)
 8003210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003212:	2201      	movs	r2, #1
 8003214:	4013      	ands	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800321a:	4b35      	ldr	r3, [pc, #212]	@ (80032f0 <HAL_I2S_MspInit+0x15c>)
 800321c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800321e:	4b34      	ldr	r3, [pc, #208]	@ (80032f0 <HAL_I2S_MspInit+0x15c>)
 8003220:	2102      	movs	r1, #2
 8003222:	430a      	orrs	r2, r1
 8003224:	635a      	str	r2, [r3, #52]	@ 0x34
 8003226:	4b32      	ldr	r3, [pc, #200]	@ (80032f0 <HAL_I2S_MspInit+0x15c>)
 8003228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800322a:	2202      	movs	r2, #2
 800322c:	4013      	ands	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA1     ------> I2S1_CK
    PA2     ------> I2S1_SD
    PB0     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003232:	243c      	movs	r4, #60	@ 0x3c
 8003234:	193b      	adds	r3, r7, r4
 8003236:	2206      	movs	r2, #6
 8003238:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323a:	193b      	adds	r3, r7, r4
 800323c:	2202      	movs	r2, #2
 800323e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	193b      	adds	r3, r7, r4
 8003242:	2200      	movs	r2, #0
 8003244:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003246:	193b      	adds	r3, r7, r4
 8003248:	2200      	movs	r2, #0
 800324a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800324c:	193b      	adds	r3, r7, r4
 800324e:	2200      	movs	r2, #0
 8003250:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003252:	193a      	adds	r2, r7, r4
 8003254:	23a0      	movs	r3, #160	@ 0xa0
 8003256:	05db      	lsls	r3, r3, #23
 8003258:	0011      	movs	r1, r2
 800325a:	0018      	movs	r0, r3
 800325c:	f000 feaa 	bl	8003fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003260:	0021      	movs	r1, r4
 8003262:	187b      	adds	r3, r7, r1
 8003264:	2201      	movs	r2, #1
 8003266:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003268:	187b      	adds	r3, r7, r1
 800326a:	2202      	movs	r2, #2
 800326c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326e:	187b      	adds	r3, r7, r1
 8003270:	2200      	movs	r2, #0
 8003272:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003274:	187b      	adds	r3, r7, r1
 8003276:	2200      	movs	r2, #0
 8003278:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800327a:	187b      	adds	r3, r7, r1
 800327c:	2200      	movs	r2, #0
 800327e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003280:	187b      	adds	r3, r7, r1
 8003282:	4a1c      	ldr	r2, [pc, #112]	@ (80032f4 <HAL_I2S_MspInit+0x160>)
 8003284:	0019      	movs	r1, r3
 8003286:	0010      	movs	r0, r2
 8003288:	f000 fe94 	bl	8003fb4 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 800328c:	4b1a      	ldr	r3, [pc, #104]	@ (80032f8 <HAL_I2S_MspInit+0x164>)
 800328e:	4a1b      	ldr	r2, [pc, #108]	@ (80032fc <HAL_I2S_MspInit+0x168>)
 8003290:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003292:	4b19      	ldr	r3, [pc, #100]	@ (80032f8 <HAL_I2S_MspInit+0x164>)
 8003294:	2211      	movs	r2, #17
 8003296:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003298:	4b17      	ldr	r3, [pc, #92]	@ (80032f8 <HAL_I2S_MspInit+0x164>)
 800329a:	2210      	movs	r2, #16
 800329c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800329e:	4b16      	ldr	r3, [pc, #88]	@ (80032f8 <HAL_I2S_MspInit+0x164>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032a4:	4b14      	ldr	r3, [pc, #80]	@ (80032f8 <HAL_I2S_MspInit+0x164>)
 80032a6:	2280      	movs	r2, #128	@ 0x80
 80032a8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032aa:	4b13      	ldr	r3, [pc, #76]	@ (80032f8 <HAL_I2S_MspInit+0x164>)
 80032ac:	2280      	movs	r2, #128	@ 0x80
 80032ae:	0052      	lsls	r2, r2, #1
 80032b0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032b2:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <HAL_I2S_MspInit+0x164>)
 80032b4:	2280      	movs	r2, #128	@ 0x80
 80032b6:	00d2      	lsls	r2, r2, #3
 80032b8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80032ba:	4b0f      	ldr	r3, [pc, #60]	@ (80032f8 <HAL_I2S_MspInit+0x164>)
 80032bc:	2220      	movs	r2, #32
 80032be:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032c0:	4b0d      	ldr	r3, [pc, #52]	@ (80032f8 <HAL_I2S_MspInit+0x164>)
 80032c2:	22c0      	movs	r2, #192	@ 0xc0
 80032c4:	0192      	lsls	r2, r2, #6
 80032c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80032c8:	4b0b      	ldr	r3, [pc, #44]	@ (80032f8 <HAL_I2S_MspInit+0x164>)
 80032ca:	0018      	movs	r0, r3
 80032cc:	f000 fbbe 	bl	8003a4c <HAL_DMA_Init>
 80032d0:	1e03      	subs	r3, r0, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_I2S_MspInit+0x144>
    {
      Error_Handler();
 80032d4:	f7ff fca9 	bl	8002c2a <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a07      	ldr	r2, [pc, #28]	@ (80032f8 <HAL_I2S_MspInit+0x164>)
 80032dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80032de:	4b06      	ldr	r3, [pc, #24]	@ (80032f8 <HAL_I2S_MspInit+0x164>)
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80032e4:	46c0      	nop			@ (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b015      	add	sp, #84	@ 0x54
 80032ea:	bd90      	pop	{r4, r7, pc}
 80032ec:	40013000 	.word	0x40013000
 80032f0:	40021000 	.word	0x40021000
 80032f4:	50000400 	.word	0x50000400
 80032f8:	2000017c 	.word	0x2000017c
 80032fc:	40020008 	.word	0x40020008

08003300 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b08f      	sub	sp, #60	@ 0x3c
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003308:	2410      	movs	r4, #16
 800330a:	193b      	adds	r3, r7, r4
 800330c:	0018      	movs	r0, r3
 800330e:	2328      	movs	r3, #40	@ 0x28
 8003310:	001a      	movs	r2, r3
 8003312:	2100      	movs	r1, #0
 8003314:	f005 fffe 	bl	8009314 <memset>
  if(hrtc->Instance==RTC)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a19      	ldr	r2, [pc, #100]	@ (8003384 <HAL_RTC_MspInit+0x84>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d12c      	bne.n	800337c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003322:	193b      	adds	r3, r7, r4
 8003324:	2280      	movs	r2, #128	@ 0x80
 8003326:	0292      	lsls	r2, r2, #10
 8003328:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800332a:	193b      	adds	r3, r7, r4
 800332c:	2280      	movs	r2, #128	@ 0x80
 800332e:	0052      	lsls	r2, r2, #1
 8003330:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003332:	193b      	adds	r3, r7, r4
 8003334:	0018      	movs	r0, r3
 8003336:	f002 fe81 	bl	800603c <HAL_RCCEx_PeriphCLKConfig>
 800333a:	1e03      	subs	r3, r0, #0
 800333c:	d001      	beq.n	8003342 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800333e:	f7ff fc74 	bl	8002c2a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003342:	4b11      	ldr	r3, [pc, #68]	@ (8003388 <HAL_RTC_MspInit+0x88>)
 8003344:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003346:	4b10      	ldr	r3, [pc, #64]	@ (8003388 <HAL_RTC_MspInit+0x88>)
 8003348:	2180      	movs	r1, #128	@ 0x80
 800334a:	0209      	lsls	r1, r1, #8
 800334c:	430a      	orrs	r2, r1
 800334e:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003350:	4b0d      	ldr	r3, [pc, #52]	@ (8003388 <HAL_RTC_MspInit+0x88>)
 8003352:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003354:	4b0c      	ldr	r3, [pc, #48]	@ (8003388 <HAL_RTC_MspInit+0x88>)
 8003356:	2180      	movs	r1, #128	@ 0x80
 8003358:	00c9      	lsls	r1, r1, #3
 800335a:	430a      	orrs	r2, r1
 800335c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800335e:	4b0a      	ldr	r3, [pc, #40]	@ (8003388 <HAL_RTC_MspInit+0x88>)
 8003360:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003362:	2380      	movs	r3, #128	@ 0x80
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4013      	ands	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800336c:	2200      	movs	r2, #0
 800336e:	2100      	movs	r1, #0
 8003370:	2002      	movs	r0, #2
 8003372:	f000 fb39 	bl	80039e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8003376:	2002      	movs	r0, #2
 8003378:	f000 fb4b 	bl	8003a12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800337c:	46c0      	nop			@ (mov r8, r8)
 800337e:	46bd      	mov	sp, r7
 8003380:	b00f      	add	sp, #60	@ 0x3c
 8003382:	bd90      	pop	{r4, r7, pc}
 8003384:	40002800 	.word	0x40002800
 8003388:	40021000 	.word	0x40021000

0800338c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b08b      	sub	sp, #44	@ 0x2c
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003394:	2414      	movs	r4, #20
 8003396:	193b      	adds	r3, r7, r4
 8003398:	0018      	movs	r0, r3
 800339a:	2314      	movs	r3, #20
 800339c:	001a      	movs	r2, r3
 800339e:	2100      	movs	r1, #0
 80033a0:	f005 ffb8 	bl	8009314 <memset>
  if(hspi->Instance==SPI2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a51      	ldr	r2, [pc, #324]	@ (80034f0 <HAL_SPI_MspInit+0x164>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d000      	beq.n	80033b0 <HAL_SPI_MspInit+0x24>
 80033ae:	e09a      	b.n	80034e6 <HAL_SPI_MspInit+0x15a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033b0:	4b50      	ldr	r3, [pc, #320]	@ (80034f4 <HAL_SPI_MspInit+0x168>)
 80033b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033b4:	4b4f      	ldr	r3, [pc, #316]	@ (80034f4 <HAL_SPI_MspInit+0x168>)
 80033b6:	2180      	movs	r1, #128	@ 0x80
 80033b8:	01c9      	lsls	r1, r1, #7
 80033ba:	430a      	orrs	r2, r1
 80033bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033be:	4b4d      	ldr	r3, [pc, #308]	@ (80034f4 <HAL_SPI_MspInit+0x168>)
 80033c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033c2:	2380      	movs	r3, #128	@ 0x80
 80033c4:	01db      	lsls	r3, r3, #7
 80033c6:	4013      	ands	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033cc:	4b49      	ldr	r3, [pc, #292]	@ (80034f4 <HAL_SPI_MspInit+0x168>)
 80033ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033d0:	4b48      	ldr	r3, [pc, #288]	@ (80034f4 <HAL_SPI_MspInit+0x168>)
 80033d2:	2101      	movs	r1, #1
 80033d4:	430a      	orrs	r2, r1
 80033d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80033d8:	4b46      	ldr	r3, [pc, #280]	@ (80034f4 <HAL_SPI_MspInit+0x168>)
 80033da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033dc:	2201      	movs	r2, #1
 80033de:	4013      	ands	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80033e4:	193b      	adds	r3, r7, r4
 80033e6:	2209      	movs	r2, #9
 80033e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ea:	193b      	adds	r3, r7, r4
 80033ec:	2202      	movs	r2, #2
 80033ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f0:	193b      	adds	r3, r7, r4
 80033f2:	2200      	movs	r2, #0
 80033f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f6:	193b      	adds	r3, r7, r4
 80033f8:	2200      	movs	r2, #0
 80033fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80033fc:	193b      	adds	r3, r7, r4
 80033fe:	2200      	movs	r2, #0
 8003400:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003402:	193a      	adds	r2, r7, r4
 8003404:	23a0      	movs	r3, #160	@ 0xa0
 8003406:	05db      	lsls	r3, r3, #23
 8003408:	0011      	movs	r1, r2
 800340a:	0018      	movs	r0, r3
 800340c:	f000 fdd2 	bl	8003fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003410:	0021      	movs	r1, r4
 8003412:	187b      	adds	r3, r7, r1
 8003414:	2210      	movs	r2, #16
 8003416:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003418:	187b      	adds	r3, r7, r1
 800341a:	2202      	movs	r2, #2
 800341c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	187b      	adds	r3, r7, r1
 8003420:	2200      	movs	r2, #0
 8003422:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003424:	187b      	adds	r3, r7, r1
 8003426:	2200      	movs	r2, #0
 8003428:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 800342a:	187b      	adds	r3, r7, r1
 800342c:	2201      	movs	r2, #1
 800342e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003430:	187a      	adds	r2, r7, r1
 8003432:	23a0      	movs	r3, #160	@ 0xa0
 8003434:	05db      	lsls	r3, r3, #23
 8003436:	0011      	movs	r1, r2
 8003438:	0018      	movs	r0, r3
 800343a:	f000 fdbb 	bl	8003fb4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel3;
 800343e:	4b2e      	ldr	r3, [pc, #184]	@ (80034f8 <HAL_SPI_MspInit+0x16c>)
 8003440:	4a2e      	ldr	r2, [pc, #184]	@ (80034fc <HAL_SPI_MspInit+0x170>)
 8003442:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8003444:	4b2c      	ldr	r3, [pc, #176]	@ (80034f8 <HAL_SPI_MspInit+0x16c>)
 8003446:	2212      	movs	r2, #18
 8003448:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800344a:	4b2b      	ldr	r3, [pc, #172]	@ (80034f8 <HAL_SPI_MspInit+0x16c>)
 800344c:	2200      	movs	r2, #0
 800344e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003450:	4b29      	ldr	r3, [pc, #164]	@ (80034f8 <HAL_SPI_MspInit+0x16c>)
 8003452:	2200      	movs	r2, #0
 8003454:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003456:	4b28      	ldr	r3, [pc, #160]	@ (80034f8 <HAL_SPI_MspInit+0x16c>)
 8003458:	2280      	movs	r2, #128	@ 0x80
 800345a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800345c:	4b26      	ldr	r3, [pc, #152]	@ (80034f8 <HAL_SPI_MspInit+0x16c>)
 800345e:	2200      	movs	r2, #0
 8003460:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003462:	4b25      	ldr	r3, [pc, #148]	@ (80034f8 <HAL_SPI_MspInit+0x16c>)
 8003464:	2200      	movs	r2, #0
 8003466:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003468:	4b23      	ldr	r3, [pc, #140]	@ (80034f8 <HAL_SPI_MspInit+0x16c>)
 800346a:	2200      	movs	r2, #0
 800346c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800346e:	4b22      	ldr	r3, [pc, #136]	@ (80034f8 <HAL_SPI_MspInit+0x16c>)
 8003470:	2280      	movs	r2, #128	@ 0x80
 8003472:	0192      	lsls	r2, r2, #6
 8003474:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003476:	4b20      	ldr	r3, [pc, #128]	@ (80034f8 <HAL_SPI_MspInit+0x16c>)
 8003478:	0018      	movs	r0, r3
 800347a:	f000 fae7 	bl	8003a4c <HAL_DMA_Init>
 800347e:	1e03      	subs	r3, r0, #0
 8003480:	d001      	beq.n	8003486 <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 8003482:	f7ff fbd2 	bl	8002c2a <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a1b      	ldr	r2, [pc, #108]	@ (80034f8 <HAL_SPI_MspInit+0x16c>)
 800348a:	659a      	str	r2, [r3, #88]	@ 0x58
 800348c:	4b1a      	ldr	r3, [pc, #104]	@ (80034f8 <HAL_SPI_MspInit+0x16c>)
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel2;
 8003492:	4b1b      	ldr	r3, [pc, #108]	@ (8003500 <HAL_SPI_MspInit+0x174>)
 8003494:	4a1b      	ldr	r2, [pc, #108]	@ (8003504 <HAL_SPI_MspInit+0x178>)
 8003496:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8003498:	4b19      	ldr	r3, [pc, #100]	@ (8003500 <HAL_SPI_MspInit+0x174>)
 800349a:	2213      	movs	r2, #19
 800349c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800349e:	4b18      	ldr	r3, [pc, #96]	@ (8003500 <HAL_SPI_MspInit+0x174>)
 80034a0:	2210      	movs	r2, #16
 80034a2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034a4:	4b16      	ldr	r3, [pc, #88]	@ (8003500 <HAL_SPI_MspInit+0x174>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034aa:	4b15      	ldr	r3, [pc, #84]	@ (8003500 <HAL_SPI_MspInit+0x174>)
 80034ac:	2280      	movs	r2, #128	@ 0x80
 80034ae:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034b0:	4b13      	ldr	r3, [pc, #76]	@ (8003500 <HAL_SPI_MspInit+0x174>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034b6:	4b12      	ldr	r3, [pc, #72]	@ (8003500 <HAL_SPI_MspInit+0x174>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80034bc:	4b10      	ldr	r3, [pc, #64]	@ (8003500 <HAL_SPI_MspInit+0x174>)
 80034be:	2200      	movs	r2, #0
 80034c0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80034c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003500 <HAL_SPI_MspInit+0x174>)
 80034c4:	2280      	movs	r2, #128	@ 0x80
 80034c6:	0192      	lsls	r2, r2, #6
 80034c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80034ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003500 <HAL_SPI_MspInit+0x174>)
 80034cc:	0018      	movs	r0, r3
 80034ce:	f000 fabd 	bl	8003a4c <HAL_DMA_Init>
 80034d2:	1e03      	subs	r3, r0, #0
 80034d4:	d001      	beq.n	80034da <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 80034d6:	f7ff fba8 	bl	8002c2a <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a08      	ldr	r2, [pc, #32]	@ (8003500 <HAL_SPI_MspInit+0x174>)
 80034de:	655a      	str	r2, [r3, #84]	@ 0x54
 80034e0:	4b07      	ldr	r3, [pc, #28]	@ (8003500 <HAL_SPI_MspInit+0x174>)
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b00b      	add	sp, #44	@ 0x2c
 80034ec:	bd90      	pop	{r4, r7, pc}
 80034ee:	46c0      	nop			@ (mov r8, r8)
 80034f0:	40003800 	.word	0x40003800
 80034f4:	40021000 	.word	0x40021000
 80034f8:	20000268 	.word	0x20000268
 80034fc:	40020030 	.word	0x40020030
 8003500:	200002c4 	.word	0x200002c4
 8003504:	4002001c 	.word	0x4002001c

08003508 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	2380      	movs	r3, #128	@ 0x80
 8003516:	05db      	lsls	r3, r3, #23
 8003518:	429a      	cmp	r2, r3
 800351a:	d10b      	bne.n	8003534 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800351c:	4b07      	ldr	r3, [pc, #28]	@ (800353c <HAL_TIM_PWM_MspInit+0x34>)
 800351e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003520:	4b06      	ldr	r3, [pc, #24]	@ (800353c <HAL_TIM_PWM_MspInit+0x34>)
 8003522:	2101      	movs	r1, #1
 8003524:	430a      	orrs	r2, r1
 8003526:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003528:	4b04      	ldr	r3, [pc, #16]	@ (800353c <HAL_TIM_PWM_MspInit+0x34>)
 800352a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352c:	2201      	movs	r2, #1
 800352e:	4013      	ands	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003534:	46c0      	nop			@ (mov r8, r8)
 8003536:	46bd      	mov	sp, r7
 8003538:	b004      	add	sp, #16
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000

08003540 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a18      	ldr	r2, [pc, #96]	@ (80035b0 <HAL_TIM_Base_MspInit+0x70>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d10e      	bne.n	8003570 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003552:	4b18      	ldr	r3, [pc, #96]	@ (80035b4 <HAL_TIM_Base_MspInit+0x74>)
 8003554:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003556:	4b17      	ldr	r3, [pc, #92]	@ (80035b4 <HAL_TIM_Base_MspInit+0x74>)
 8003558:	2180      	movs	r1, #128	@ 0x80
 800355a:	0209      	lsls	r1, r1, #8
 800355c:	430a      	orrs	r2, r1
 800355e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003560:	4b14      	ldr	r3, [pc, #80]	@ (80035b4 <HAL_TIM_Base_MspInit+0x74>)
 8003562:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003564:	2380      	movs	r3, #128	@ 0x80
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	4013      	ands	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800356e:	e01a      	b.n	80035a6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a10      	ldr	r2, [pc, #64]	@ (80035b8 <HAL_TIM_Base_MspInit+0x78>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d115      	bne.n	80035a6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800357a:	4b0e      	ldr	r3, [pc, #56]	@ (80035b4 <HAL_TIM_Base_MspInit+0x74>)
 800357c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800357e:	4b0d      	ldr	r3, [pc, #52]	@ (80035b4 <HAL_TIM_Base_MspInit+0x74>)
 8003580:	2180      	movs	r1, #128	@ 0x80
 8003582:	0289      	lsls	r1, r1, #10
 8003584:	430a      	orrs	r2, r1
 8003586:	641a      	str	r2, [r3, #64]	@ 0x40
 8003588:	4b0a      	ldr	r3, [pc, #40]	@ (80035b4 <HAL_TIM_Base_MspInit+0x74>)
 800358a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800358c:	2380      	movs	r3, #128	@ 0x80
 800358e:	029b      	lsls	r3, r3, #10
 8003590:	4013      	ands	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8003596:	2200      	movs	r2, #0
 8003598:	2101      	movs	r1, #1
 800359a:	2015      	movs	r0, #21
 800359c:	f000 fa24 	bl	80039e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80035a0:	2015      	movs	r0, #21
 80035a2:	f000 fa36 	bl	8003a12 <HAL_NVIC_EnableIRQ>
}
 80035a6:	46c0      	nop			@ (mov r8, r8)
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b004      	add	sp, #16
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	40002000 	.word	0x40002000
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40014400 	.word	0x40014400

080035bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035bc:	b590      	push	{r4, r7, lr}
 80035be:	b089      	sub	sp, #36	@ 0x24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c4:	240c      	movs	r4, #12
 80035c6:	193b      	adds	r3, r7, r4
 80035c8:	0018      	movs	r0, r3
 80035ca:	2314      	movs	r3, #20
 80035cc:	001a      	movs	r2, r3
 80035ce:	2100      	movs	r1, #0
 80035d0:	f005 fea0 	bl	8009314 <memset>
  if(htim->Instance==TIM2)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2380      	movs	r3, #128	@ 0x80
 80035da:	05db      	lsls	r3, r3, #23
 80035dc:	429a      	cmp	r2, r3
 80035de:	d121      	bne.n	8003624 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e0:	4b12      	ldr	r3, [pc, #72]	@ (800362c <HAL_TIM_MspPostInit+0x70>)
 80035e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035e4:	4b11      	ldr	r3, [pc, #68]	@ (800362c <HAL_TIM_MspPostInit+0x70>)
 80035e6:	2104      	movs	r1, #4
 80035e8:	430a      	orrs	r2, r1
 80035ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80035ec:	4b0f      	ldr	r3, [pc, #60]	@ (800362c <HAL_TIM_MspPostInit+0x70>)
 80035ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f0:	2204      	movs	r2, #4
 80035f2:	4013      	ands	r3, r2
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_SHIFT_nOE_Pin;
 80035f8:	0021      	movs	r1, r4
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	2240      	movs	r2, #64	@ 0x40
 80035fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003600:	187b      	adds	r3, r7, r1
 8003602:	2202      	movs	r2, #2
 8003604:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	187b      	adds	r3, r7, r1
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360c:	187b      	adds	r3, r7, r1
 800360e:	2200      	movs	r2, #0
 8003610:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003612:	187b      	adds	r3, r7, r1
 8003614:	2202      	movs	r2, #2
 8003616:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_SHIFT_nOE_GPIO_Port, &GPIO_InitStruct);
 8003618:	187b      	adds	r3, r7, r1
 800361a:	4a05      	ldr	r2, [pc, #20]	@ (8003630 <HAL_TIM_MspPostInit+0x74>)
 800361c:	0019      	movs	r1, r3
 800361e:	0010      	movs	r0, r2
 8003620:	f000 fcc8 	bl	8003fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003624:	46c0      	nop			@ (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	b009      	add	sp, #36	@ 0x24
 800362a:	bd90      	pop	{r4, r7, pc}
 800362c:	40021000 	.word	0x40021000
 8003630:	50000800 	.word	0x50000800

08003634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003638:	46c0      	nop			@ (mov r8, r8)
 800363a:	e7fd      	b.n	8003638 <NMI_Handler+0x4>

0800363c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	e7fd      	b.n	8003640 <HardFault_Handler+0x4>

08003644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003648:	46c0      	nop			@ (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003652:	46c0      	nop			@ (mov r8, r8)
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800365c:	f000 f8fc 	bl	8003858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003660:	46c0      	nop			@ (mov r8, r8)
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800366c:	4b03      	ldr	r3, [pc, #12]	@ (800367c <RTC_TAMP_IRQHandler+0x14>)
 800366e:	0018      	movs	r0, r3
 8003670:	f003 fcf0 	bl	8007054 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003674:	46c0      	nop			@ (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	200001d8 	.word	0x200001d8

08003680 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003684:	46c0      	nop			@ (mov r8, r8)
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_EXTI_Pin);
 800368e:	2001      	movs	r0, #1
 8003690:	f000 fe4a 	bl	8004328 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_EXTI_Pin);
 8003694:	2002      	movs	r0, #2
 8003696:	f000 fe47 	bl	8004328 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_EXTI_Pin);
 80036a4:	2004      	movs	r0, #4
 80036a6:	f000 fe3f 	bl	8004328 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_EXTI_Pin);
 80036aa:	2008      	movs	r0, #8
 80036ac:	f000 fe3c 	bl	8004328 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_SWITCH_EXTI_Pin);
 80036ba:	2010      	movs	r0, #16
 80036bc:	f000 fe34 	bl	8004328 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_EXTI_Pin);
 80036c0:	2380      	movs	r3, #128	@ 0x80
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	0018      	movs	r0, r3
 80036c6:	f000 fe2f 	bl	8004328 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80036ca:	46c0      	nop			@ (mov r8, r8)
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80036d4:	4b03      	ldr	r3, [pc, #12]	@ (80036e4 <DMA1_Channel1_IRQHandler+0x14>)
 80036d6:	0018      	movs	r0, r3
 80036d8:	f000 fb2a 	bl	8003d30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80036dc:	46c0      	nop			@ (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	2000017c 	.word	0x2000017c

080036e8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80036ec:	4b05      	ldr	r3, [pc, #20]	@ (8003704 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80036ee:	0018      	movs	r0, r3
 80036f0:	f000 fb1e 	bl	8003d30 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80036f4:	4b04      	ldr	r3, [pc, #16]	@ (8003708 <DMA1_Channel2_3_IRQHandler+0x20>)
 80036f6:	0018      	movs	r0, r3
 80036f8:	f000 fb1a 	bl	8003d30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80036fc:	46c0      	nop			@ (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	200002c4 	.word	0x200002c4
 8003708:	20000268 	.word	0x20000268

0800370c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003710:	4b03      	ldr	r3, [pc, #12]	@ (8003720 <TIM16_IRQHandler+0x14>)
 8003712:	0018      	movs	r0, r3
 8003714:	f005 f812 	bl	800873c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003718:	46c0      	nop			@ (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	200003b8 	.word	0x200003b8

08003724 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003728:	46c0      	nop			@ (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003730:	480d      	ldr	r0, [pc, #52]	@ (8003768 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003732:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003734:	f7ff fff6 	bl	8003724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003738:	480c      	ldr	r0, [pc, #48]	@ (800376c <LoopForever+0x6>)
  ldr r1, =_edata
 800373a:	490d      	ldr	r1, [pc, #52]	@ (8003770 <LoopForever+0xa>)
  ldr r2, =_sidata
 800373c:	4a0d      	ldr	r2, [pc, #52]	@ (8003774 <LoopForever+0xe>)
  movs r3, #0
 800373e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003740:	e002      	b.n	8003748 <LoopCopyDataInit>

08003742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003746:	3304      	adds	r3, #4

08003748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800374a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800374c:	d3f9      	bcc.n	8003742 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800374e:	4a0a      	ldr	r2, [pc, #40]	@ (8003778 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003750:	4c0a      	ldr	r4, [pc, #40]	@ (800377c <LoopForever+0x16>)
  movs r3, #0
 8003752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003754:	e001      	b.n	800375a <LoopFillZerobss>

08003756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003758:	3204      	adds	r2, #4

0800375a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800375a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800375c:	d3fb      	bcc.n	8003756 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800375e:	f005 fde1 	bl	8009324 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003762:	f7fd ff41 	bl	80015e8 <main>

08003766 <LoopForever>:

LoopForever:
  b LoopForever
 8003766:	e7fe      	b.n	8003766 <LoopForever>
  ldr   r0, =_estack
 8003768:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800376c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003770:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003774:	08009494 	.word	0x08009494
  ldr r2, =_sbss
 8003778:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800377c:	200005f8 	.word	0x200005f8

08003780 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003780:	e7fe      	b.n	8003780 <ADC1_IRQHandler>
	...

08003784 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800378a:	1dfb      	adds	r3, r7, #7
 800378c:	2200      	movs	r2, #0
 800378e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003790:	4b0b      	ldr	r3, [pc, #44]	@ (80037c0 <HAL_Init+0x3c>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4b0a      	ldr	r3, [pc, #40]	@ (80037c0 <HAL_Init+0x3c>)
 8003796:	2180      	movs	r1, #128	@ 0x80
 8003798:	0049      	lsls	r1, r1, #1
 800379a:	430a      	orrs	r2, r1
 800379c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800379e:	2003      	movs	r0, #3
 80037a0:	f000 f810 	bl	80037c4 <HAL_InitTick>
 80037a4:	1e03      	subs	r3, r0, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80037a8:	1dfb      	adds	r3, r7, #7
 80037aa:	2201      	movs	r2, #1
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	e001      	b.n	80037b4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80037b0:	f7ff fc62 	bl	8003078 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037b4:	1dfb      	adds	r3, r7, #7
 80037b6:	781b      	ldrb	r3, [r3, #0]
}
 80037b8:	0018      	movs	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b002      	add	sp, #8
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40022000 	.word	0x40022000

080037c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80037cc:	230f      	movs	r3, #15
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80037d4:	4b1d      	ldr	r3, [pc, #116]	@ (800384c <HAL_InitTick+0x88>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d02b      	beq.n	8003834 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80037dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003850 <HAL_InitTick+0x8c>)
 80037de:	681c      	ldr	r4, [r3, #0]
 80037e0:	4b1a      	ldr	r3, [pc, #104]	@ (800384c <HAL_InitTick+0x88>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	0019      	movs	r1, r3
 80037e6:	23fa      	movs	r3, #250	@ 0xfa
 80037e8:	0098      	lsls	r0, r3, #2
 80037ea:	f7fc fc8b 	bl	8000104 <__udivsi3>
 80037ee:	0003      	movs	r3, r0
 80037f0:	0019      	movs	r1, r3
 80037f2:	0020      	movs	r0, r4
 80037f4:	f7fc fc86 	bl	8000104 <__udivsi3>
 80037f8:	0003      	movs	r3, r0
 80037fa:	0018      	movs	r0, r3
 80037fc:	f000 f919 	bl	8003a32 <HAL_SYSTICK_Config>
 8003800:	1e03      	subs	r3, r0, #0
 8003802:	d112      	bne.n	800382a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b03      	cmp	r3, #3
 8003808:	d80a      	bhi.n	8003820 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	2301      	movs	r3, #1
 800380e:	425b      	negs	r3, r3
 8003810:	2200      	movs	r2, #0
 8003812:	0018      	movs	r0, r3
 8003814:	f000 f8e8 	bl	80039e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003818:	4b0e      	ldr	r3, [pc, #56]	@ (8003854 <HAL_InitTick+0x90>)
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	e00d      	b.n	800383c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003820:	230f      	movs	r3, #15
 8003822:	18fb      	adds	r3, r7, r3
 8003824:	2201      	movs	r2, #1
 8003826:	701a      	strb	r2, [r3, #0]
 8003828:	e008      	b.n	800383c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800382a:	230f      	movs	r3, #15
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	2201      	movs	r2, #1
 8003830:	701a      	strb	r2, [r3, #0]
 8003832:	e003      	b.n	800383c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003834:	230f      	movs	r3, #15
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800383c:	230f      	movs	r3, #15
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	781b      	ldrb	r3, [r3, #0]
}
 8003842:	0018      	movs	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	b005      	add	sp, #20
 8003848:	bd90      	pop	{r4, r7, pc}
 800384a:	46c0      	nop			@ (mov r8, r8)
 800384c:	20000094 	.word	0x20000094
 8003850:	2000008c 	.word	0x2000008c
 8003854:	20000090 	.word	0x20000090

08003858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800385c:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <HAL_IncTick+0x1c>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	001a      	movs	r2, r3
 8003862:	4b05      	ldr	r3, [pc, #20]	@ (8003878 <HAL_IncTick+0x20>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	18d2      	adds	r2, r2, r3
 8003868:	4b03      	ldr	r3, [pc, #12]	@ (8003878 <HAL_IncTick+0x20>)
 800386a:	601a      	str	r2, [r3, #0]
}
 800386c:	46c0      	nop			@ (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	20000094 	.word	0x20000094
 8003878:	200005f4 	.word	0x200005f4

0800387c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  return uwTick;
 8003880:	4b02      	ldr	r3, [pc, #8]	@ (800388c <HAL_GetTick+0x10>)
 8003882:	681b      	ldr	r3, [r3, #0]
}
 8003884:	0018      	movs	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	200005f4 	.word	0x200005f4

08003890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	0002      	movs	r2, r0
 8003898:	1dfb      	adds	r3, r7, #7
 800389a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800389c:	1dfb      	adds	r3, r7, #7
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80038a2:	d809      	bhi.n	80038b8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038a4:	1dfb      	adds	r3, r7, #7
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	001a      	movs	r2, r3
 80038aa:	231f      	movs	r3, #31
 80038ac:	401a      	ands	r2, r3
 80038ae:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <__NVIC_EnableIRQ+0x30>)
 80038b0:	2101      	movs	r1, #1
 80038b2:	4091      	lsls	r1, r2
 80038b4:	000a      	movs	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80038b8:	46c0      	nop			@ (mov r8, r8)
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b002      	add	sp, #8
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	e000e100 	.word	0xe000e100

080038c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c4:	b590      	push	{r4, r7, lr}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	0002      	movs	r2, r0
 80038cc:	6039      	str	r1, [r7, #0]
 80038ce:	1dfb      	adds	r3, r7, #7
 80038d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038d2:	1dfb      	adds	r3, r7, #7
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80038d8:	d828      	bhi.n	800392c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038da:	4a2f      	ldr	r2, [pc, #188]	@ (8003998 <__NVIC_SetPriority+0xd4>)
 80038dc:	1dfb      	adds	r3, r7, #7
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	b25b      	sxtb	r3, r3
 80038e2:	089b      	lsrs	r3, r3, #2
 80038e4:	33c0      	adds	r3, #192	@ 0xc0
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	589b      	ldr	r3, [r3, r2]
 80038ea:	1dfa      	adds	r2, r7, #7
 80038ec:	7812      	ldrb	r2, [r2, #0]
 80038ee:	0011      	movs	r1, r2
 80038f0:	2203      	movs	r2, #3
 80038f2:	400a      	ands	r2, r1
 80038f4:	00d2      	lsls	r2, r2, #3
 80038f6:	21ff      	movs	r1, #255	@ 0xff
 80038f8:	4091      	lsls	r1, r2
 80038fa:	000a      	movs	r2, r1
 80038fc:	43d2      	mvns	r2, r2
 80038fe:	401a      	ands	r2, r3
 8003900:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	019b      	lsls	r3, r3, #6
 8003906:	22ff      	movs	r2, #255	@ 0xff
 8003908:	401a      	ands	r2, r3
 800390a:	1dfb      	adds	r3, r7, #7
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	0018      	movs	r0, r3
 8003910:	2303      	movs	r3, #3
 8003912:	4003      	ands	r3, r0
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003918:	481f      	ldr	r0, [pc, #124]	@ (8003998 <__NVIC_SetPriority+0xd4>)
 800391a:	1dfb      	adds	r3, r7, #7
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	b25b      	sxtb	r3, r3
 8003920:	089b      	lsrs	r3, r3, #2
 8003922:	430a      	orrs	r2, r1
 8003924:	33c0      	adds	r3, #192	@ 0xc0
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800392a:	e031      	b.n	8003990 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800392c:	4a1b      	ldr	r2, [pc, #108]	@ (800399c <__NVIC_SetPriority+0xd8>)
 800392e:	1dfb      	adds	r3, r7, #7
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	0019      	movs	r1, r3
 8003934:	230f      	movs	r3, #15
 8003936:	400b      	ands	r3, r1
 8003938:	3b08      	subs	r3, #8
 800393a:	089b      	lsrs	r3, r3, #2
 800393c:	3306      	adds	r3, #6
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	18d3      	adds	r3, r2, r3
 8003942:	3304      	adds	r3, #4
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	1dfa      	adds	r2, r7, #7
 8003948:	7812      	ldrb	r2, [r2, #0]
 800394a:	0011      	movs	r1, r2
 800394c:	2203      	movs	r2, #3
 800394e:	400a      	ands	r2, r1
 8003950:	00d2      	lsls	r2, r2, #3
 8003952:	21ff      	movs	r1, #255	@ 0xff
 8003954:	4091      	lsls	r1, r2
 8003956:	000a      	movs	r2, r1
 8003958:	43d2      	mvns	r2, r2
 800395a:	401a      	ands	r2, r3
 800395c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	019b      	lsls	r3, r3, #6
 8003962:	22ff      	movs	r2, #255	@ 0xff
 8003964:	401a      	ands	r2, r3
 8003966:	1dfb      	adds	r3, r7, #7
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	0018      	movs	r0, r3
 800396c:	2303      	movs	r3, #3
 800396e:	4003      	ands	r3, r0
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003974:	4809      	ldr	r0, [pc, #36]	@ (800399c <__NVIC_SetPriority+0xd8>)
 8003976:	1dfb      	adds	r3, r7, #7
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	001c      	movs	r4, r3
 800397c:	230f      	movs	r3, #15
 800397e:	4023      	ands	r3, r4
 8003980:	3b08      	subs	r3, #8
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	430a      	orrs	r2, r1
 8003986:	3306      	adds	r3, #6
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	18c3      	adds	r3, r0, r3
 800398c:	3304      	adds	r3, #4
 800398e:	601a      	str	r2, [r3, #0]
}
 8003990:	46c0      	nop			@ (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b003      	add	sp, #12
 8003996:	bd90      	pop	{r4, r7, pc}
 8003998:	e000e100 	.word	0xe000e100
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	1e5a      	subs	r2, r3, #1
 80039ac:	2380      	movs	r3, #128	@ 0x80
 80039ae:	045b      	lsls	r3, r3, #17
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d301      	bcc.n	80039b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039b4:	2301      	movs	r3, #1
 80039b6:	e010      	b.n	80039da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039b8:	4b0a      	ldr	r3, [pc, #40]	@ (80039e4 <SysTick_Config+0x44>)
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	3a01      	subs	r2, #1
 80039be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039c0:	2301      	movs	r3, #1
 80039c2:	425b      	negs	r3, r3
 80039c4:	2103      	movs	r1, #3
 80039c6:	0018      	movs	r0, r3
 80039c8:	f7ff ff7c 	bl	80038c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039cc:	4b05      	ldr	r3, [pc, #20]	@ (80039e4 <SysTick_Config+0x44>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039d2:	4b04      	ldr	r3, [pc, #16]	@ (80039e4 <SysTick_Config+0x44>)
 80039d4:	2207      	movs	r2, #7
 80039d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039d8:	2300      	movs	r3, #0
}
 80039da:	0018      	movs	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	b002      	add	sp, #8
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	46c0      	nop			@ (mov r8, r8)
 80039e4:	e000e010 	.word	0xe000e010

080039e8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	210f      	movs	r1, #15
 80039f4:	187b      	adds	r3, r7, r1
 80039f6:	1c02      	adds	r2, r0, #0
 80039f8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	187b      	adds	r3, r7, r1
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	b25b      	sxtb	r3, r3
 8003a02:	0011      	movs	r1, r2
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7ff ff5d 	bl	80038c4 <__NVIC_SetPriority>
}
 8003a0a:	46c0      	nop			@ (mov r8, r8)
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	b004      	add	sp, #16
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	0002      	movs	r2, r0
 8003a1a:	1dfb      	adds	r3, r7, #7
 8003a1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a1e:	1dfb      	adds	r3, r7, #7
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	b25b      	sxtb	r3, r3
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7ff ff33 	bl	8003890 <__NVIC_EnableIRQ>
}
 8003a2a:	46c0      	nop			@ (mov r8, r8)
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b002      	add	sp, #8
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f7ff ffaf 	bl	80039a0 <SysTick_Config>
 8003a42:	0003      	movs	r3, r0
}
 8003a44:	0018      	movs	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b002      	add	sp, #8
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e077      	b.n	8003b4e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a3d      	ldr	r2, [pc, #244]	@ (8003b58 <HAL_DMA_Init+0x10c>)
 8003a64:	4694      	mov	ip, r2
 8003a66:	4463      	add	r3, ip
 8003a68:	2114      	movs	r1, #20
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f7fc fb4a 	bl	8000104 <__udivsi3>
 8003a70:	0003      	movs	r3, r0
 8003a72:	009a      	lsls	r2, r3, #2
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2225      	movs	r2, #37	@ 0x25
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4934      	ldr	r1, [pc, #208]	@ (8003b5c <HAL_DMA_Init+0x110>)
 8003a8c:	400a      	ands	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6819      	ldr	r1, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f000 fa23 	bl	8003f14 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	2380      	movs	r3, #128	@ 0x80
 8003ad4:	01db      	lsls	r3, r3, #7
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d102      	bne.n	8003ae0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae8:	213f      	movs	r1, #63	@ 0x3f
 8003aea:	400a      	ands	r2, r1
 8003aec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003af6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d011      	beq.n	8003b24 <HAL_DMA_Init+0xd8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d80d      	bhi.n	8003b24 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f000 fa2e 	bl	8003f6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	e008      	b.n	8003b36 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2225      	movs	r2, #37	@ 0x25
 8003b40:	2101      	movs	r1, #1
 8003b42:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2224      	movs	r2, #36	@ 0x24
 8003b48:	2100      	movs	r1, #0
 8003b4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b002      	add	sp, #8
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	46c0      	nop			@ (mov r8, r8)
 8003b58:	bffdfff8 	.word	0xbffdfff8
 8003b5c:	ffff800f 	.word	0xffff800f

08003b60 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6e:	2317      	movs	r3, #23
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	2200      	movs	r2, #0
 8003b74:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2224      	movs	r2, #36	@ 0x24
 8003b7a:	5c9b      	ldrb	r3, [r3, r2]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_DMA_Start_IT+0x24>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e06f      	b.n	8003c64 <HAL_DMA_Start_IT+0x104>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2224      	movs	r2, #36	@ 0x24
 8003b88:	2101      	movs	r1, #1
 8003b8a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2225      	movs	r2, #37	@ 0x25
 8003b90:	5c9b      	ldrb	r3, [r3, r2]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d157      	bne.n	8003c48 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2225      	movs	r2, #37	@ 0x25
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	438a      	bics	r2, r1
 8003bb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f969 	bl	8003e94 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d008      	beq.n	8003bdc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	210e      	movs	r1, #14
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	e00f      	b.n	8003bfc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2104      	movs	r1, #4
 8003be8:	438a      	bics	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	210a      	movs	r1, #10
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	2380      	movs	r3, #128	@ 0x80
 8003c04:	025b      	lsls	r3, r3, #9
 8003c06:	4013      	ands	r3, r2
 8003c08:	d008      	beq.n	8003c1c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c14:	2180      	movs	r1, #128	@ 0x80
 8003c16:	0049      	lsls	r1, r1, #1
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c2e:	2180      	movs	r1, #128	@ 0x80
 8003c30:	0049      	lsls	r1, r1, #1
 8003c32:	430a      	orrs	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2101      	movs	r1, #1
 8003c42:	430a      	orrs	r2, r1
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	e00a      	b.n	8003c5e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2280      	movs	r2, #128	@ 0x80
 8003c4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2224      	movs	r2, #36	@ 0x24
 8003c52:	2100      	movs	r1, #0
 8003c54:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003c56:	2317      	movs	r3, #23
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003c5e:	2317      	movs	r3, #23
 8003c60:	18fb      	adds	r3, r7, r3
 8003c62:	781b      	ldrb	r3, [r3, #0]
}
 8003c64:	0018      	movs	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b006      	add	sp, #24
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e050      	b.n	8003d20 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2225      	movs	r2, #37	@ 0x25
 8003c82:	5c9b      	ldrb	r3, [r3, r2]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d008      	beq.n	8003c9c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2224      	movs	r2, #36	@ 0x24
 8003c94:	2100      	movs	r1, #0
 8003c96:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e041      	b.n	8003d20 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	210e      	movs	r1, #14
 8003ca8:	438a      	bics	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb6:	491c      	ldr	r1, [pc, #112]	@ (8003d28 <HAL_DMA_Abort+0xbc>)
 8003cb8:	400a      	ands	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	438a      	bics	r2, r1
 8003cca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003ccc:	4b17      	ldr	r3, [pc, #92]	@ (8003d2c <HAL_DMA_Abort+0xc0>)
 8003cce:	6859      	ldr	r1, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd4:	221c      	movs	r2, #28
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2201      	movs	r2, #1
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	4b13      	ldr	r3, [pc, #76]	@ (8003d2c <HAL_DMA_Abort+0xc0>)
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003cea:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00c      	beq.n	8003d0e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cfe:	490a      	ldr	r1, [pc, #40]	@ (8003d28 <HAL_DMA_Abort+0xbc>)
 8003d00:	400a      	ands	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003d0c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2225      	movs	r2, #37	@ 0x25
 8003d12:	2101      	movs	r1, #1
 8003d14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2224      	movs	r2, #36	@ 0x24
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b002      	add	sp, #8
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	fffffeff 	.word	0xfffffeff
 8003d2c:	40020000 	.word	0x40020000

08003d30 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003d38:	4b55      	ldr	r3, [pc, #340]	@ (8003e90 <HAL_DMA_IRQHandler+0x160>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4a:	221c      	movs	r2, #28
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2204      	movs	r2, #4
 8003d50:	409a      	lsls	r2, r3
 8003d52:	0013      	movs	r3, r2
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4013      	ands	r3, r2
 8003d58:	d027      	beq.n	8003daa <HAL_DMA_IRQHandler+0x7a>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2204      	movs	r2, #4
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d023      	beq.n	8003daa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d107      	bne.n	8003d7e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2104      	movs	r1, #4
 8003d7a:	438a      	bics	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003d7e:	4b44      	ldr	r3, [pc, #272]	@ (8003e90 <HAL_DMA_IRQHandler+0x160>)
 8003d80:	6859      	ldr	r1, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	221c      	movs	r2, #28
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	409a      	lsls	r2, r3
 8003d8e:	4b40      	ldr	r3, [pc, #256]	@ (8003e90 <HAL_DMA_IRQHandler+0x160>)
 8003d90:	430a      	orrs	r2, r1
 8003d92:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d100      	bne.n	8003d9e <HAL_DMA_IRQHandler+0x6e>
 8003d9c:	e073      	b.n	8003e86 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	0010      	movs	r0, r2
 8003da6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003da8:	e06d      	b.n	8003e86 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dae:	221c      	movs	r2, #28
 8003db0:	4013      	ands	r3, r2
 8003db2:	2202      	movs	r2, #2
 8003db4:	409a      	lsls	r2, r3
 8003db6:	0013      	movs	r3, r2
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d02e      	beq.n	8003e1c <HAL_DMA_IRQHandler+0xec>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d02a      	beq.n	8003e1c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d10b      	bne.n	8003dea <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	210a      	movs	r1, #10
 8003dde:	438a      	bics	r2, r1
 8003de0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2225      	movs	r2, #37	@ 0x25
 8003de6:	2101      	movs	r1, #1
 8003de8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003dea:	4b29      	ldr	r3, [pc, #164]	@ (8003e90 <HAL_DMA_IRQHandler+0x160>)
 8003dec:	6859      	ldr	r1, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	221c      	movs	r2, #28
 8003df4:	4013      	ands	r3, r2
 8003df6:	2202      	movs	r2, #2
 8003df8:	409a      	lsls	r2, r3
 8003dfa:	4b25      	ldr	r3, [pc, #148]	@ (8003e90 <HAL_DMA_IRQHandler+0x160>)
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2224      	movs	r2, #36	@ 0x24
 8003e04:	2100      	movs	r1, #0
 8003e06:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d03a      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	0010      	movs	r0, r2
 8003e18:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003e1a:	e034      	b.n	8003e86 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e20:	221c      	movs	r2, #28
 8003e22:	4013      	ands	r3, r2
 8003e24:	2208      	movs	r2, #8
 8003e26:	409a      	lsls	r2, r3
 8003e28:	0013      	movs	r3, r2
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d02b      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x158>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2208      	movs	r2, #8
 8003e34:	4013      	ands	r3, r2
 8003e36:	d027      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	210e      	movs	r1, #14
 8003e44:	438a      	bics	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003e48:	4b11      	ldr	r3, [pc, #68]	@ (8003e90 <HAL_DMA_IRQHandler+0x160>)
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	221c      	movs	r2, #28
 8003e52:	4013      	ands	r3, r2
 8003e54:	2201      	movs	r2, #1
 8003e56:	409a      	lsls	r2, r3
 8003e58:	4b0d      	ldr	r3, [pc, #52]	@ (8003e90 <HAL_DMA_IRQHandler+0x160>)
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2225      	movs	r2, #37	@ 0x25
 8003e68:	2101      	movs	r1, #1
 8003e6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2224      	movs	r2, #36	@ 0x24
 8003e70:	2100      	movs	r1, #0
 8003e72:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	0010      	movs	r0, r2
 8003e84:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e86:	46c0      	nop			@ (mov r8, r8)
 8003e88:	46c0      	nop			@ (mov r8, r8)
}
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b004      	add	sp, #16
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40020000 	.word	0x40020000

08003e94 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003eaa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003ebc:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003ebe:	4b14      	ldr	r3, [pc, #80]	@ (8003f10 <DMA_SetConfig+0x7c>)
 8003ec0:	6859      	ldr	r1, [r3, #4]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec6:	221c      	movs	r2, #28
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2201      	movs	r2, #1
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	4b10      	ldr	r3, [pc, #64]	@ (8003f10 <DMA_SetConfig+0x7c>)
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d108      	bne.n	8003ef6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ef4:	e007      	b.n	8003f06 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	60da      	str	r2, [r3, #12]
}
 8003f06:	46c0      	nop			@ (mov r8, r8)
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b004      	add	sp, #16
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	46c0      	nop			@ (mov r8, r8)
 8003f10:	40020000 	.word	0x40020000

08003f14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f20:	089b      	lsrs	r3, r3, #2
 8003f22:	4a10      	ldr	r2, [pc, #64]	@ (8003f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003f24:	4694      	mov	ip, r2
 8003f26:	4463      	add	r3, ip
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	001a      	movs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	001a      	movs	r2, r3
 8003f36:	23ff      	movs	r3, #255	@ 0xff
 8003f38:	4013      	ands	r3, r2
 8003f3a:	3b08      	subs	r3, #8
 8003f3c:	2114      	movs	r1, #20
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f7fc f8e0 	bl	8000104 <__udivsi3>
 8003f44:	0003      	movs	r3, r0
 8003f46:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a07      	ldr	r2, [pc, #28]	@ (8003f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003f4c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	221f      	movs	r2, #31
 8003f52:	4013      	ands	r3, r2
 8003f54:	2201      	movs	r2, #1
 8003f56:	409a      	lsls	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003f5c:	46c0      	nop			@ (mov r8, r8)
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	b004      	add	sp, #16
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	10008200 	.word	0x10008200
 8003f68:	40020880 	.word	0x40020880

08003f6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	223f      	movs	r2, #63	@ 0x3f
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4a0a      	ldr	r2, [pc, #40]	@ (8003fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f82:	4694      	mov	ip, r2
 8003f84:	4463      	add	r3, ip
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	001a      	movs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a07      	ldr	r2, [pc, #28]	@ (8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f92:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	2203      	movs	r2, #3
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003fa4:	46c0      	nop			@ (mov r8, r8)
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b004      	add	sp, #16
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	1000823f 	.word	0x1000823f
 8003fb0:	40020940 	.word	0x40020940

08003fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fc2:	e147      	b.n	8004254 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2101      	movs	r1, #1
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4091      	lsls	r1, r2
 8003fce:	000a      	movs	r2, r1
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d100      	bne.n	8003fdc <HAL_GPIO_Init+0x28>
 8003fda:	e138      	b.n	800424e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d005      	beq.n	8003ff4 <HAL_GPIO_Init+0x40>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2203      	movs	r2, #3
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d130      	bne.n	8004056 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	2203      	movs	r2, #3
 8004000:	409a      	lsls	r2, r3
 8004002:	0013      	movs	r3, r2
 8004004:	43da      	mvns	r2, r3
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4013      	ands	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	409a      	lsls	r2, r3
 8004016:	0013      	movs	r3, r2
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800402a:	2201      	movs	r2, #1
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	409a      	lsls	r2, r3
 8004030:	0013      	movs	r3, r2
 8004032:	43da      	mvns	r2, r3
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	4013      	ands	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	091b      	lsrs	r3, r3, #4
 8004040:	2201      	movs	r2, #1
 8004042:	401a      	ands	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	409a      	lsls	r2, r3
 8004048:	0013      	movs	r3, r2
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2203      	movs	r2, #3
 800405c:	4013      	ands	r3, r2
 800405e:	2b03      	cmp	r3, #3
 8004060:	d017      	beq.n	8004092 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	2203      	movs	r2, #3
 800406e:	409a      	lsls	r2, r3
 8004070:	0013      	movs	r3, r2
 8004072:	43da      	mvns	r2, r3
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4013      	ands	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	409a      	lsls	r2, r3
 8004084:	0013      	movs	r3, r2
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2203      	movs	r2, #3
 8004098:	4013      	ands	r3, r2
 800409a:	2b02      	cmp	r3, #2
 800409c:	d123      	bne.n	80040e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	08da      	lsrs	r2, r3, #3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3208      	adds	r2, #8
 80040a6:	0092      	lsls	r2, r2, #2
 80040a8:	58d3      	ldr	r3, [r2, r3]
 80040aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2207      	movs	r2, #7
 80040b0:	4013      	ands	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	220f      	movs	r2, #15
 80040b6:	409a      	lsls	r2, r3
 80040b8:	0013      	movs	r3, r2
 80040ba:	43da      	mvns	r2, r3
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4013      	ands	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2107      	movs	r1, #7
 80040ca:	400b      	ands	r3, r1
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	409a      	lsls	r2, r3
 80040d0:	0013      	movs	r3, r2
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	08da      	lsrs	r2, r3, #3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3208      	adds	r2, #8
 80040e0:	0092      	lsls	r2, r2, #2
 80040e2:	6939      	ldr	r1, [r7, #16]
 80040e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	2203      	movs	r2, #3
 80040f2:	409a      	lsls	r2, r3
 80040f4:	0013      	movs	r3, r2
 80040f6:	43da      	mvns	r2, r3
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4013      	ands	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2203      	movs	r2, #3
 8004104:	401a      	ands	r2, r3
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	409a      	lsls	r2, r3
 800410c:	0013      	movs	r3, r2
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	23c0      	movs	r3, #192	@ 0xc0
 8004120:	029b      	lsls	r3, r3, #10
 8004122:	4013      	ands	r3, r2
 8004124:	d100      	bne.n	8004128 <HAL_GPIO_Init+0x174>
 8004126:	e092      	b.n	800424e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004128:	4a50      	ldr	r2, [pc, #320]	@ (800426c <HAL_GPIO_Init+0x2b8>)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	089b      	lsrs	r3, r3, #2
 800412e:	3318      	adds	r3, #24
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	589b      	ldr	r3, [r3, r2]
 8004134:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2203      	movs	r2, #3
 800413a:	4013      	ands	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	220f      	movs	r2, #15
 8004140:	409a      	lsls	r2, r3
 8004142:	0013      	movs	r3, r2
 8004144:	43da      	mvns	r2, r3
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	4013      	ands	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	23a0      	movs	r3, #160	@ 0xa0
 8004150:	05db      	lsls	r3, r3, #23
 8004152:	429a      	cmp	r2, r3
 8004154:	d013      	beq.n	800417e <HAL_GPIO_Init+0x1ca>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a45      	ldr	r2, [pc, #276]	@ (8004270 <HAL_GPIO_Init+0x2bc>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00d      	beq.n	800417a <HAL_GPIO_Init+0x1c6>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a44      	ldr	r2, [pc, #272]	@ (8004274 <HAL_GPIO_Init+0x2c0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <HAL_GPIO_Init+0x1c2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a43      	ldr	r2, [pc, #268]	@ (8004278 <HAL_GPIO_Init+0x2c4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d101      	bne.n	8004172 <HAL_GPIO_Init+0x1be>
 800416e:	2303      	movs	r3, #3
 8004170:	e006      	b.n	8004180 <HAL_GPIO_Init+0x1cc>
 8004172:	2305      	movs	r3, #5
 8004174:	e004      	b.n	8004180 <HAL_GPIO_Init+0x1cc>
 8004176:	2302      	movs	r3, #2
 8004178:	e002      	b.n	8004180 <HAL_GPIO_Init+0x1cc>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <HAL_GPIO_Init+0x1cc>
 800417e:	2300      	movs	r3, #0
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	2103      	movs	r1, #3
 8004184:	400a      	ands	r2, r1
 8004186:	00d2      	lsls	r2, r2, #3
 8004188:	4093      	lsls	r3, r2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004190:	4936      	ldr	r1, [pc, #216]	@ (800426c <HAL_GPIO_Init+0x2b8>)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	3318      	adds	r3, #24
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800419e:	4b33      	ldr	r3, [pc, #204]	@ (800426c <HAL_GPIO_Init+0x2b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	43da      	mvns	r2, r3
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4013      	ands	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	2380      	movs	r3, #128	@ 0x80
 80041b4:	035b      	lsls	r3, r3, #13
 80041b6:	4013      	ands	r3, r2
 80041b8:	d003      	beq.n	80041c2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041c2:	4b2a      	ldr	r3, [pc, #168]	@ (800426c <HAL_GPIO_Init+0x2b8>)
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80041c8:	4b28      	ldr	r3, [pc, #160]	@ (800426c <HAL_GPIO_Init+0x2b8>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	43da      	mvns	r2, r3
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4013      	ands	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	2380      	movs	r3, #128	@ 0x80
 80041de:	039b      	lsls	r3, r3, #14
 80041e0:	4013      	ands	r3, r2
 80041e2:	d003      	beq.n	80041ec <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041ec:	4b1f      	ldr	r3, [pc, #124]	@ (800426c <HAL_GPIO_Init+0x2b8>)
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80041f2:	4a1e      	ldr	r2, [pc, #120]	@ (800426c <HAL_GPIO_Init+0x2b8>)
 80041f4:	2384      	movs	r3, #132	@ 0x84
 80041f6:	58d3      	ldr	r3, [r2, r3]
 80041f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	43da      	mvns	r2, r3
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	4013      	ands	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	2380      	movs	r3, #128	@ 0x80
 800420a:	029b      	lsls	r3, r3, #10
 800420c:	4013      	ands	r3, r2
 800420e:	d003      	beq.n	8004218 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004218:	4914      	ldr	r1, [pc, #80]	@ (800426c <HAL_GPIO_Init+0x2b8>)
 800421a:	2284      	movs	r2, #132	@ 0x84
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004220:	4a12      	ldr	r2, [pc, #72]	@ (800426c <HAL_GPIO_Init+0x2b8>)
 8004222:	2380      	movs	r3, #128	@ 0x80
 8004224:	58d3      	ldr	r3, [r2, r3]
 8004226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	43da      	mvns	r2, r3
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	4013      	ands	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	2380      	movs	r3, #128	@ 0x80
 8004238:	025b      	lsls	r3, r3, #9
 800423a:	4013      	ands	r3, r2
 800423c:	d003      	beq.n	8004246 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004246:	4909      	ldr	r1, [pc, #36]	@ (800426c <HAL_GPIO_Init+0x2b8>)
 8004248:	2280      	movs	r2, #128	@ 0x80
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	3301      	adds	r3, #1
 8004252:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	40da      	lsrs	r2, r3
 800425c:	1e13      	subs	r3, r2, #0
 800425e:	d000      	beq.n	8004262 <HAL_GPIO_Init+0x2ae>
 8004260:	e6b0      	b.n	8003fc4 <HAL_GPIO_Init+0x10>
  }
}
 8004262:	46c0      	nop			@ (mov r8, r8)
 8004264:	46c0      	nop			@ (mov r8, r8)
 8004266:	46bd      	mov	sp, r7
 8004268:	b006      	add	sp, #24
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40021800 	.word	0x40021800
 8004270:	50000400 	.word	0x50000400
 8004274:	50000800 	.word	0x50000800
 8004278:	50000c00 	.word	0x50000c00

0800427c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	000a      	movs	r2, r1
 8004286:	1cbb      	adds	r3, r7, #2
 8004288:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	1cba      	adds	r2, r7, #2
 8004290:	8812      	ldrh	r2, [r2, #0]
 8004292:	4013      	ands	r3, r2
 8004294:	d004      	beq.n	80042a0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004296:	230f      	movs	r3, #15
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	2201      	movs	r2, #1
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e003      	b.n	80042a8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042a0:	230f      	movs	r3, #15
 80042a2:	18fb      	adds	r3, r7, r3
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80042a8:	230f      	movs	r3, #15
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	781b      	ldrb	r3, [r3, #0]
}
 80042ae:	0018      	movs	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b004      	add	sp, #16
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	0008      	movs	r0, r1
 80042c0:	0011      	movs	r1, r2
 80042c2:	1cbb      	adds	r3, r7, #2
 80042c4:	1c02      	adds	r2, r0, #0
 80042c6:	801a      	strh	r2, [r3, #0]
 80042c8:	1c7b      	adds	r3, r7, #1
 80042ca:	1c0a      	adds	r2, r1, #0
 80042cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042ce:	1c7b      	adds	r3, r7, #1
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d004      	beq.n	80042e0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042d6:	1cbb      	adds	r3, r7, #2
 80042d8:	881a      	ldrh	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042de:	e003      	b.n	80042e8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042e0:	1cbb      	adds	r3, r7, #2
 80042e2:	881a      	ldrh	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80042e8:	46c0      	nop			@ (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b002      	add	sp, #8
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	000a      	movs	r2, r1
 80042fa:	1cbb      	adds	r3, r7, #2
 80042fc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004304:	1cbb      	adds	r3, r7, #2
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4013      	ands	r3, r2
 800430c:	041a      	lsls	r2, r3, #16
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	43db      	mvns	r3, r3
 8004312:	1cb9      	adds	r1, r7, #2
 8004314:	8809      	ldrh	r1, [r1, #0]
 8004316:	400b      	ands	r3, r1
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	619a      	str	r2, [r3, #24]
}
 800431e:	46c0      	nop			@ (mov r8, r8)
 8004320:	46bd      	mov	sp, r7
 8004322:	b004      	add	sp, #16
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	0002      	movs	r2, r0
 8004330:	1dbb      	adds	r3, r7, #6
 8004332:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004334:	4b10      	ldr	r3, [pc, #64]	@ (8004378 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	1dba      	adds	r2, r7, #6
 800433a:	8812      	ldrh	r2, [r2, #0]
 800433c:	4013      	ands	r3, r2
 800433e:	d008      	beq.n	8004352 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004340:	4b0d      	ldr	r3, [pc, #52]	@ (8004378 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004342:	1dba      	adds	r2, r7, #6
 8004344:	8812      	ldrh	r2, [r2, #0]
 8004346:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004348:	1dbb      	adds	r3, r7, #6
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	0018      	movs	r0, r3
 800434e:	f7fe f87b 	bl	8002448 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004352:	4b09      	ldr	r3, [pc, #36]	@ (8004378 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	1dba      	adds	r2, r7, #6
 8004358:	8812      	ldrh	r2, [r2, #0]
 800435a:	4013      	ands	r3, r2
 800435c:	d008      	beq.n	8004370 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800435e:	4b06      	ldr	r3, [pc, #24]	@ (8004378 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004360:	1dba      	adds	r2, r7, #6
 8004362:	8812      	ldrh	r2, [r2, #0]
 8004364:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004366:	1dbb      	adds	r3, r7, #6
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	0018      	movs	r0, r3
 800436c:	f7fe f818 	bl	80023a0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004370:	46c0      	nop			@ (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	b002      	add	sp, #8
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40021800 	.word	0x40021800

0800437c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e08f      	b.n	80044ae <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2241      	movs	r2, #65	@ 0x41
 8004392:	5c9b      	ldrb	r3, [r3, r2]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d107      	bne.n	80043aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2240      	movs	r2, #64	@ 0x40
 800439e:	2100      	movs	r1, #0
 80043a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	0018      	movs	r0, r3
 80043a6:	f7fe fe93 	bl	80030d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2241      	movs	r2, #65	@ 0x41
 80043ae:	2124      	movs	r1, #36	@ 0x24
 80043b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2101      	movs	r1, #1
 80043be:	438a      	bics	r2, r1
 80043c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	493b      	ldr	r1, [pc, #236]	@ (80044b8 <HAL_I2C_Init+0x13c>)
 80043cc:	400a      	ands	r2, r1
 80043ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4938      	ldr	r1, [pc, #224]	@ (80044bc <HAL_I2C_Init+0x140>)
 80043dc:	400a      	ands	r2, r1
 80043de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d108      	bne.n	80043fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2180      	movs	r1, #128	@ 0x80
 80043f2:	0209      	lsls	r1, r1, #8
 80043f4:	430a      	orrs	r2, r1
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	e007      	b.n	800440a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2184      	movs	r1, #132	@ 0x84
 8004404:	0209      	lsls	r1, r1, #8
 8004406:	430a      	orrs	r2, r1
 8004408:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d109      	bne.n	8004426 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2180      	movs	r1, #128	@ 0x80
 800441e:	0109      	lsls	r1, r1, #4
 8004420:	430a      	orrs	r2, r1
 8004422:	605a      	str	r2, [r3, #4]
 8004424:	e007      	b.n	8004436 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4923      	ldr	r1, [pc, #140]	@ (80044c0 <HAL_I2C_Init+0x144>)
 8004432:	400a      	ands	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4920      	ldr	r1, [pc, #128]	@ (80044c4 <HAL_I2C_Init+0x148>)
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	491a      	ldr	r1, [pc, #104]	@ (80044bc <HAL_I2C_Init+0x140>)
 8004452:	400a      	ands	r2, r1
 8004454:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	431a      	orrs	r2, r3
 8004460:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69d9      	ldr	r1, [r3, #28]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1a      	ldr	r2, [r3, #32]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2101      	movs	r1, #1
 800448c:	430a      	orrs	r2, r1
 800448e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2241      	movs	r2, #65	@ 0x41
 800449a:	2120      	movs	r1, #32
 800449c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2242      	movs	r2, #66	@ 0x42
 80044a8:	2100      	movs	r1, #0
 80044aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	0018      	movs	r0, r3
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b002      	add	sp, #8
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	46c0      	nop			@ (mov r8, r8)
 80044b8:	f0ffffff 	.word	0xf0ffffff
 80044bc:	ffff7fff 	.word	0xffff7fff
 80044c0:	fffff7ff 	.word	0xfffff7ff
 80044c4:	02008000 	.word	0x02008000

080044c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044c8:	b590      	push	{r4, r7, lr}
 80044ca:	b089      	sub	sp, #36	@ 0x24
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	0008      	movs	r0, r1
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	0019      	movs	r1, r3
 80044d6:	230a      	movs	r3, #10
 80044d8:	18fb      	adds	r3, r7, r3
 80044da:	1c02      	adds	r2, r0, #0
 80044dc:	801a      	strh	r2, [r3, #0]
 80044de:	2308      	movs	r3, #8
 80044e0:	18fb      	adds	r3, r7, r3
 80044e2:	1c0a      	adds	r2, r1, #0
 80044e4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2241      	movs	r2, #65	@ 0x41
 80044ea:	5c9b      	ldrb	r3, [r3, r2]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	d000      	beq.n	80044f4 <HAL_I2C_Master_Transmit+0x2c>
 80044f2:	e10a      	b.n	800470a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2240      	movs	r2, #64	@ 0x40
 80044f8:	5c9b      	ldrb	r3, [r3, r2]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_I2C_Master_Transmit+0x3a>
 80044fe:	2302      	movs	r3, #2
 8004500:	e104      	b.n	800470c <HAL_I2C_Master_Transmit+0x244>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2240      	movs	r2, #64	@ 0x40
 8004506:	2101      	movs	r1, #1
 8004508:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800450a:	f7ff f9b7 	bl	800387c <HAL_GetTick>
 800450e:	0003      	movs	r3, r0
 8004510:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004512:	2380      	movs	r3, #128	@ 0x80
 8004514:	0219      	lsls	r1, r3, #8
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	2319      	movs	r3, #25
 800451e:	2201      	movs	r2, #1
 8004520:	f000 fa26 	bl	8004970 <I2C_WaitOnFlagUntilTimeout>
 8004524:	1e03      	subs	r3, r0, #0
 8004526:	d001      	beq.n	800452c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0ef      	b.n	800470c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2241      	movs	r2, #65	@ 0x41
 8004530:	2121      	movs	r1, #33	@ 0x21
 8004532:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2242      	movs	r2, #66	@ 0x42
 8004538:	2110      	movs	r1, #16
 800453a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2208      	movs	r2, #8
 800454c:	18ba      	adds	r2, r7, r2
 800454e:	8812      	ldrh	r2, [r2, #0]
 8004550:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2bff      	cmp	r3, #255	@ 0xff
 8004560:	d906      	bls.n	8004570 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	22ff      	movs	r2, #255	@ 0xff
 8004566:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004568:	2380      	movs	r3, #128	@ 0x80
 800456a:	045b      	lsls	r3, r3, #17
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	e007      	b.n	8004580 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004574:	b29a      	uxth	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800457a:	2380      	movs	r3, #128	@ 0x80
 800457c:	049b      	lsls	r3, r3, #18
 800457e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004584:	2b00      	cmp	r3, #0
 8004586:	d027      	beq.n	80045d8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458c:	781a      	ldrb	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	3301      	adds	r3, #1
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	697c      	ldr	r4, [r7, #20]
 80045c4:	230a      	movs	r3, #10
 80045c6:	18fb      	adds	r3, r7, r3
 80045c8:	8819      	ldrh	r1, [r3, #0]
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	4b51      	ldr	r3, [pc, #324]	@ (8004714 <HAL_I2C_Master_Transmit+0x24c>)
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	0023      	movs	r3, r4
 80045d2:	f000 fc45 	bl	8004e60 <I2C_TransferConfig>
 80045d6:	e06f      	b.n	80046b8 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	697c      	ldr	r4, [r7, #20]
 80045e0:	230a      	movs	r3, #10
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	8819      	ldrh	r1, [r3, #0]
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004714 <HAL_I2C_Master_Transmit+0x24c>)
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	0023      	movs	r3, r4
 80045ee:	f000 fc37 	bl	8004e60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80045f2:	e061      	b.n	80046b8 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	0018      	movs	r0, r3
 80045fc:	f000 fa10 	bl	8004a20 <I2C_WaitOnTXISFlagUntilTimeout>
 8004600:	1e03      	subs	r3, r0, #0
 8004602:	d001      	beq.n	8004608 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e081      	b.n	800470c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	781a      	ldrb	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d03a      	beq.n	80046b8 <HAL_I2C_Master_Transmit+0x1f0>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004646:	2b00      	cmp	r3, #0
 8004648:	d136      	bne.n	80046b8 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800464a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	0013      	movs	r3, r2
 8004654:	2200      	movs	r2, #0
 8004656:	2180      	movs	r1, #128	@ 0x80
 8004658:	f000 f98a 	bl	8004970 <I2C_WaitOnFlagUntilTimeout>
 800465c:	1e03      	subs	r3, r0, #0
 800465e:	d001      	beq.n	8004664 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e053      	b.n	800470c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	2bff      	cmp	r3, #255	@ 0xff
 800466c:	d911      	bls.n	8004692 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	22ff      	movs	r2, #255	@ 0xff
 8004672:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004678:	b2da      	uxtb	r2, r3
 800467a:	2380      	movs	r3, #128	@ 0x80
 800467c:	045c      	lsls	r4, r3, #17
 800467e:	230a      	movs	r3, #10
 8004680:	18fb      	adds	r3, r7, r3
 8004682:	8819      	ldrh	r1, [r3, #0]
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	2300      	movs	r3, #0
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	0023      	movs	r3, r4
 800468c:	f000 fbe8 	bl	8004e60 <I2C_TransferConfig>
 8004690:	e012      	b.n	80046b8 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	2380      	movs	r3, #128	@ 0x80
 80046a4:	049c      	lsls	r4, r3, #18
 80046a6:	230a      	movs	r3, #10
 80046a8:	18fb      	adds	r3, r7, r3
 80046aa:	8819      	ldrh	r1, [r3, #0]
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	2300      	movs	r3, #0
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	0023      	movs	r3, r4
 80046b4:	f000 fbd4 	bl	8004e60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d198      	bne.n	80045f4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f000 f9ef 	bl	8004aac <I2C_WaitOnSTOPFlagUntilTimeout>
 80046ce:	1e03      	subs	r3, r0, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e01a      	b.n	800470c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2220      	movs	r2, #32
 80046dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	490b      	ldr	r1, [pc, #44]	@ (8004718 <HAL_I2C_Master_Transmit+0x250>)
 80046ea:	400a      	ands	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2241      	movs	r2, #65	@ 0x41
 80046f2:	2120      	movs	r1, #32
 80046f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2242      	movs	r2, #66	@ 0x42
 80046fa:	2100      	movs	r1, #0
 80046fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2240      	movs	r2, #64	@ 0x40
 8004702:	2100      	movs	r1, #0
 8004704:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	e000      	b.n	800470c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800470a:	2302      	movs	r3, #2
  }
}
 800470c:	0018      	movs	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	b007      	add	sp, #28
 8004712:	bd90      	pop	{r4, r7, pc}
 8004714:	80002000 	.word	0x80002000
 8004718:	fe00e800 	.word	0xfe00e800

0800471c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	b089      	sub	sp, #36	@ 0x24
 8004720:	af02      	add	r7, sp, #8
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	0008      	movs	r0, r1
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	0019      	movs	r1, r3
 800472a:	230a      	movs	r3, #10
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	1c02      	adds	r2, r0, #0
 8004730:	801a      	strh	r2, [r3, #0]
 8004732:	2308      	movs	r3, #8
 8004734:	18fb      	adds	r3, r7, r3
 8004736:	1c0a      	adds	r2, r1, #0
 8004738:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2241      	movs	r2, #65	@ 0x41
 800473e:	5c9b      	ldrb	r3, [r3, r2]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b20      	cmp	r3, #32
 8004744:	d000      	beq.n	8004748 <HAL_I2C_Master_Receive+0x2c>
 8004746:	e0e8      	b.n	800491a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2240      	movs	r2, #64	@ 0x40
 800474c:	5c9b      	ldrb	r3, [r3, r2]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_I2C_Master_Receive+0x3a>
 8004752:	2302      	movs	r3, #2
 8004754:	e0e2      	b.n	800491c <HAL_I2C_Master_Receive+0x200>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2240      	movs	r2, #64	@ 0x40
 800475a:	2101      	movs	r1, #1
 800475c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800475e:	f7ff f88d 	bl	800387c <HAL_GetTick>
 8004762:	0003      	movs	r3, r0
 8004764:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004766:	2380      	movs	r3, #128	@ 0x80
 8004768:	0219      	lsls	r1, r3, #8
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	2319      	movs	r3, #25
 8004772:	2201      	movs	r2, #1
 8004774:	f000 f8fc 	bl	8004970 <I2C_WaitOnFlagUntilTimeout>
 8004778:	1e03      	subs	r3, r0, #0
 800477a:	d001      	beq.n	8004780 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0cd      	b.n	800491c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2241      	movs	r2, #65	@ 0x41
 8004784:	2122      	movs	r1, #34	@ 0x22
 8004786:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2242      	movs	r2, #66	@ 0x42
 800478c:	2110      	movs	r1, #16
 800478e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2208      	movs	r2, #8
 80047a0:	18ba      	adds	r2, r7, r2
 80047a2:	8812      	ldrh	r2, [r2, #0]
 80047a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2bff      	cmp	r3, #255	@ 0xff
 80047b4:	d911      	bls.n	80047da <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	22ff      	movs	r2, #255	@ 0xff
 80047ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	2380      	movs	r3, #128	@ 0x80
 80047c4:	045c      	lsls	r4, r3, #17
 80047c6:	230a      	movs	r3, #10
 80047c8:	18fb      	adds	r3, r7, r3
 80047ca:	8819      	ldrh	r1, [r3, #0]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	4b55      	ldr	r3, [pc, #340]	@ (8004924 <HAL_I2C_Master_Receive+0x208>)
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	0023      	movs	r3, r4
 80047d4:	f000 fb44 	bl	8004e60 <I2C_TransferConfig>
 80047d8:	e076      	b.n	80048c8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	2380      	movs	r3, #128	@ 0x80
 80047ec:	049c      	lsls	r4, r3, #18
 80047ee:	230a      	movs	r3, #10
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	8819      	ldrh	r1, [r3, #0]
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004924 <HAL_I2C_Master_Receive+0x208>)
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	0023      	movs	r3, r4
 80047fc:	f000 fb30 	bl	8004e60 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004800:	e062      	b.n	80048c8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	0018      	movs	r0, r3
 800480a:	f000 f993 	bl	8004b34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800480e:	1e03      	subs	r3, r0, #0
 8004810:	d001      	beq.n	8004816 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e082      	b.n	800491c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d03a      	beq.n	80048c8 <HAL_I2C_Master_Receive+0x1ac>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004856:	2b00      	cmp	r3, #0
 8004858:	d136      	bne.n	80048c8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800485a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	0013      	movs	r3, r2
 8004864:	2200      	movs	r2, #0
 8004866:	2180      	movs	r1, #128	@ 0x80
 8004868:	f000 f882 	bl	8004970 <I2C_WaitOnFlagUntilTimeout>
 800486c:	1e03      	subs	r3, r0, #0
 800486e:	d001      	beq.n	8004874 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e053      	b.n	800491c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004878:	b29b      	uxth	r3, r3
 800487a:	2bff      	cmp	r3, #255	@ 0xff
 800487c:	d911      	bls.n	80048a2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	22ff      	movs	r2, #255	@ 0xff
 8004882:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004888:	b2da      	uxtb	r2, r3
 800488a:	2380      	movs	r3, #128	@ 0x80
 800488c:	045c      	lsls	r4, r3, #17
 800488e:	230a      	movs	r3, #10
 8004890:	18fb      	adds	r3, r7, r3
 8004892:	8819      	ldrh	r1, [r3, #0]
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	2300      	movs	r3, #0
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	0023      	movs	r3, r4
 800489c:	f000 fae0 	bl	8004e60 <I2C_TransferConfig>
 80048a0:	e012      	b.n	80048c8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	2380      	movs	r3, #128	@ 0x80
 80048b4:	049c      	lsls	r4, r3, #18
 80048b6:	230a      	movs	r3, #10
 80048b8:	18fb      	adds	r3, r7, r3
 80048ba:	8819      	ldrh	r1, [r3, #0]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	2300      	movs	r3, #0
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	0023      	movs	r3, r4
 80048c4:	f000 facc 	bl	8004e60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d197      	bne.n	8004802 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	0018      	movs	r0, r3
 80048da:	f000 f8e7 	bl	8004aac <I2C_WaitOnSTOPFlagUntilTimeout>
 80048de:	1e03      	subs	r3, r0, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e01a      	b.n	800491c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2220      	movs	r2, #32
 80048ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	490b      	ldr	r1, [pc, #44]	@ (8004928 <HAL_I2C_Master_Receive+0x20c>)
 80048fa:	400a      	ands	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2241      	movs	r2, #65	@ 0x41
 8004902:	2120      	movs	r1, #32
 8004904:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2242      	movs	r2, #66	@ 0x42
 800490a:	2100      	movs	r1, #0
 800490c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2240      	movs	r2, #64	@ 0x40
 8004912:	2100      	movs	r1, #0
 8004914:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	e000      	b.n	800491c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800491a:	2302      	movs	r3, #2
  }
}
 800491c:	0018      	movs	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	b007      	add	sp, #28
 8004922:	bd90      	pop	{r4, r7, pc}
 8004924:	80002400 	.word	0x80002400
 8004928:	fe00e800 	.word	0xfe00e800

0800492c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	2202      	movs	r2, #2
 800493c:	4013      	ands	r3, r2
 800493e:	2b02      	cmp	r3, #2
 8004940:	d103      	bne.n	800494a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2200      	movs	r2, #0
 8004948:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	2201      	movs	r2, #1
 8004952:	4013      	ands	r3, r2
 8004954:	2b01      	cmp	r3, #1
 8004956:	d007      	beq.n	8004968 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2101      	movs	r1, #1
 8004964:	430a      	orrs	r2, r1
 8004966:	619a      	str	r2, [r3, #24]
  }
}
 8004968:	46c0      	nop			@ (mov r8, r8)
 800496a:	46bd      	mov	sp, r7
 800496c:	b002      	add	sp, #8
 800496e:	bd80      	pop	{r7, pc}

08004970 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	1dfb      	adds	r3, r7, #7
 800497e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004980:	e03a      	b.n	80049f8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	6839      	ldr	r1, [r7, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	0018      	movs	r0, r3
 800498a:	f000 f971 	bl	8004c70 <I2C_IsErrorOccurred>
 800498e:	1e03      	subs	r3, r0, #0
 8004990:	d001      	beq.n	8004996 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e040      	b.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	3301      	adds	r3, #1
 800499a:	d02d      	beq.n	80049f8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499c:	f7fe ff6e 	bl	800387c <HAL_GetTick>
 80049a0:	0002      	movs	r2, r0
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d302      	bcc.n	80049b2 <I2C_WaitOnFlagUntilTimeout+0x42>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d122      	bne.n	80049f8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	4013      	ands	r3, r2
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	425a      	negs	r2, r3
 80049c2:	4153      	adcs	r3, r2
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	001a      	movs	r2, r3
 80049c8:	1dfb      	adds	r3, r7, #7
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d113      	bne.n	80049f8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d4:	2220      	movs	r2, #32
 80049d6:	431a      	orrs	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2241      	movs	r2, #65	@ 0x41
 80049e0:	2120      	movs	r1, #32
 80049e2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2242      	movs	r2, #66	@ 0x42
 80049e8:	2100      	movs	r1, #0
 80049ea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2240      	movs	r2, #64	@ 0x40
 80049f0:	2100      	movs	r1, #0
 80049f2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e00f      	b.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	4013      	ands	r3, r2
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	425a      	negs	r2, r3
 8004a08:	4153      	adcs	r3, r2
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	001a      	movs	r2, r3
 8004a0e:	1dfb      	adds	r3, r7, #7
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d0b5      	beq.n	8004982 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	0018      	movs	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b004      	add	sp, #16
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a2c:	e032      	b.n	8004a94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	68b9      	ldr	r1, [r7, #8]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	0018      	movs	r0, r3
 8004a36:	f000 f91b 	bl	8004c70 <I2C_IsErrorOccurred>
 8004a3a:	1e03      	subs	r3, r0, #0
 8004a3c:	d001      	beq.n	8004a42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e030      	b.n	8004aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	3301      	adds	r3, #1
 8004a46:	d025      	beq.n	8004a94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a48:	f7fe ff18 	bl	800387c <HAL_GetTick>
 8004a4c:	0002      	movs	r2, r0
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d302      	bcc.n	8004a5e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d11a      	bne.n	8004a94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	2202      	movs	r2, #2
 8004a66:	4013      	ands	r3, r2
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d013      	beq.n	8004a94 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a70:	2220      	movs	r2, #32
 8004a72:	431a      	orrs	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2241      	movs	r2, #65	@ 0x41
 8004a7c:	2120      	movs	r1, #32
 8004a7e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2242      	movs	r2, #66	@ 0x42
 8004a84:	2100      	movs	r1, #0
 8004a86:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2240      	movs	r2, #64	@ 0x40
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e007      	b.n	8004aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d1c5      	bne.n	8004a2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b004      	add	sp, #16
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ab8:	e02f      	b.n	8004b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f000 f8d5 	bl	8004c70 <I2C_IsErrorOccurred>
 8004ac6:	1e03      	subs	r3, r0, #0
 8004ac8:	d001      	beq.n	8004ace <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e02d      	b.n	8004b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ace:	f7fe fed5 	bl	800387c <HAL_GetTick>
 8004ad2:	0002      	movs	r2, r0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d302      	bcc.n	8004ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d11a      	bne.n	8004b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	2220      	movs	r2, #32
 8004aec:	4013      	ands	r3, r2
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	d013      	beq.n	8004b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af6:	2220      	movs	r2, #32
 8004af8:	431a      	orrs	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2241      	movs	r2, #65	@ 0x41
 8004b02:	2120      	movs	r1, #32
 8004b04:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2242      	movs	r2, #66	@ 0x42
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2240      	movs	r2, #64	@ 0x40
 8004b12:	2100      	movs	r1, #0
 8004b14:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e007      	b.n	8004b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2220      	movs	r2, #32
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d1c8      	bne.n	8004aba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	b004      	add	sp, #16
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b40:	2317      	movs	r3, #23
 8004b42:	18fb      	adds	r3, r7, r3
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004b48:	e07b      	b.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	0018      	movs	r0, r3
 8004b52:	f000 f88d 	bl	8004c70 <I2C_IsErrorOccurred>
 8004b56:	1e03      	subs	r3, r0, #0
 8004b58:	d003      	beq.n	8004b62 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004b5a:	2317      	movs	r3, #23
 8004b5c:	18fb      	adds	r3, r7, r3
 8004b5e:	2201      	movs	r2, #1
 8004b60:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d140      	bne.n	8004bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004b70:	2117      	movs	r1, #23
 8004b72:	187b      	adds	r3, r7, r1
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d13b      	bne.n	8004bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	2204      	movs	r2, #4
 8004b82:	4013      	ands	r3, r2
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	d106      	bne.n	8004b96 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004b90:	187b      	adds	r3, r7, r1
 8004b92:	2200      	movs	r2, #0
 8004b94:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	2210      	movs	r2, #16
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b10      	cmp	r3, #16
 8004ba2:	d123      	bne.n	8004bec <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2210      	movs	r2, #16
 8004baa:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2204      	movs	r2, #4
 8004bb0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4929      	ldr	r1, [pc, #164]	@ (8004c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004bc6:	400a      	ands	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2241      	movs	r2, #65	@ 0x41
 8004bce:	2120      	movs	r1, #32
 8004bd0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2242      	movs	r2, #66	@ 0x42
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2240      	movs	r2, #64	@ 0x40
 8004bde:	2100      	movs	r1, #0
 8004be0:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004be2:	2317      	movs	r3, #23
 8004be4:	18fb      	adds	r3, r7, r3
 8004be6:	2201      	movs	r2, #1
 8004be8:	701a      	strb	r2, [r3, #0]
 8004bea:	e002      	b.n	8004bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004bf2:	f7fe fe43 	bl	800387c <HAL_GetTick>
 8004bf6:	0002      	movs	r2, r0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d302      	bcc.n	8004c08 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d11c      	bne.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004c08:	2017      	movs	r0, #23
 8004c0a:	183b      	adds	r3, r7, r0
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d117      	bne.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	2204      	movs	r2, #4
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d010      	beq.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c24:	2220      	movs	r2, #32
 8004c26:	431a      	orrs	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2241      	movs	r2, #65	@ 0x41
 8004c30:	2120      	movs	r1, #32
 8004c32:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2240      	movs	r2, #64	@ 0x40
 8004c38:	2100      	movs	r1, #0
 8004c3a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004c3c:	183b      	adds	r3, r7, r0
 8004c3e:	2201      	movs	r2, #1
 8004c40:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	2204      	movs	r2, #4
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d005      	beq.n	8004c5c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004c50:	2317      	movs	r3, #23
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d100      	bne.n	8004c5c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004c5a:	e776      	b.n	8004b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004c5c:	2317      	movs	r3, #23
 8004c5e:	18fb      	adds	r3, r7, r3
 8004c60:	781b      	ldrb	r3, [r3, #0]
}
 8004c62:	0018      	movs	r0, r3
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b006      	add	sp, #24
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	46c0      	nop			@ (mov r8, r8)
 8004c6c:	fe00e800 	.word	0xfe00e800

08004c70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08a      	sub	sp, #40	@ 0x28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c7c:	2327      	movs	r3, #39	@ 0x27
 8004c7e:	18fb      	adds	r3, r7, r3
 8004c80:	2200      	movs	r2, #0
 8004c82:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	2210      	movs	r2, #16
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d100      	bne.n	8004c9e <I2C_IsErrorOccurred+0x2e>
 8004c9c:	e079      	b.n	8004d92 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2210      	movs	r2, #16
 8004ca4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ca6:	e057      	b.n	8004d58 <I2C_IsErrorOccurred+0xe8>
 8004ca8:	2227      	movs	r2, #39	@ 0x27
 8004caa:	18bb      	adds	r3, r7, r2
 8004cac:	18ba      	adds	r2, r7, r2
 8004cae:	7812      	ldrb	r2, [r2, #0]
 8004cb0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	d04f      	beq.n	8004d58 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004cb8:	f7fe fde0 	bl	800387c <HAL_GetTick>
 8004cbc:	0002      	movs	r2, r0
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d302      	bcc.n	8004cce <I2C_IsErrorOccurred+0x5e>
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d144      	bne.n	8004d58 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	2380      	movs	r3, #128	@ 0x80
 8004cd6:	01db      	lsls	r3, r3, #7
 8004cd8:	4013      	ands	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004cdc:	2013      	movs	r0, #19
 8004cde:	183b      	adds	r3, r7, r0
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	2142      	movs	r1, #66	@ 0x42
 8004ce4:	5c52      	ldrb	r2, [r2, r1]
 8004ce6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699a      	ldr	r2, [r3, #24]
 8004cee:	2380      	movs	r3, #128	@ 0x80
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	401a      	ands	r2, r3
 8004cf4:	2380      	movs	r3, #128	@ 0x80
 8004cf6:	021b      	lsls	r3, r3, #8
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d126      	bne.n	8004d4a <I2C_IsErrorOccurred+0xda>
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	2380      	movs	r3, #128	@ 0x80
 8004d00:	01db      	lsls	r3, r3, #7
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d021      	beq.n	8004d4a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004d06:	183b      	adds	r3, r7, r0
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d01d      	beq.n	8004d4a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2180      	movs	r1, #128	@ 0x80
 8004d1a:	01c9      	lsls	r1, r1, #7
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d20:	f7fe fdac 	bl	800387c <HAL_GetTick>
 8004d24:	0003      	movs	r3, r0
 8004d26:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d28:	e00f      	b.n	8004d4a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d2a:	f7fe fda7 	bl	800387c <HAL_GetTick>
 8004d2e:	0002      	movs	r2, r0
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b19      	cmp	r3, #25
 8004d36:	d908      	bls.n	8004d4a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004d40:	2327      	movs	r3, #39	@ 0x27
 8004d42:	18fb      	adds	r3, r7, r3
 8004d44:	2201      	movs	r2, #1
 8004d46:	701a      	strb	r2, [r3, #0]

              break;
 8004d48:	e006      	b.n	8004d58 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	2220      	movs	r2, #32
 8004d52:	4013      	ands	r3, r2
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	d1e8      	bne.n	8004d2a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	4013      	ands	r3, r2
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	d004      	beq.n	8004d70 <I2C_IsErrorOccurred+0x100>
 8004d66:	2327      	movs	r3, #39	@ 0x27
 8004d68:	18fb      	adds	r3, r7, r3
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d09b      	beq.n	8004ca8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d70:	2327      	movs	r3, #39	@ 0x27
 8004d72:	18fb      	adds	r3, r7, r3
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d103      	bne.n	8004d82 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	2204      	movs	r2, #4
 8004d86:	4313      	orrs	r3, r2
 8004d88:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d8a:	2327      	movs	r3, #39	@ 0x27
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	2201      	movs	r2, #1
 8004d90:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	2380      	movs	r3, #128	@ 0x80
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	4013      	ands	r3, r2
 8004da2:	d00c      	beq.n	8004dbe <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	2201      	movs	r2, #1
 8004da8:	4313      	orrs	r3, r2
 8004daa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2280      	movs	r2, #128	@ 0x80
 8004db2:	0052      	lsls	r2, r2, #1
 8004db4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004db6:	2327      	movs	r3, #39	@ 0x27
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	2201      	movs	r2, #1
 8004dbc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	2380      	movs	r3, #128	@ 0x80
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d00c      	beq.n	8004de2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	2208      	movs	r2, #8
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2280      	movs	r2, #128	@ 0x80
 8004dd6:	00d2      	lsls	r2, r2, #3
 8004dd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dda:	2327      	movs	r3, #39	@ 0x27
 8004ddc:	18fb      	adds	r3, r7, r3
 8004dde:	2201      	movs	r2, #1
 8004de0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	2380      	movs	r3, #128	@ 0x80
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4013      	ands	r3, r2
 8004dea:	d00c      	beq.n	8004e06 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	2202      	movs	r2, #2
 8004df0:	4313      	orrs	r3, r2
 8004df2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2280      	movs	r2, #128	@ 0x80
 8004dfa:	0092      	lsls	r2, r2, #2
 8004dfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dfe:	2327      	movs	r3, #39	@ 0x27
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	2201      	movs	r2, #1
 8004e04:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004e06:	2327      	movs	r3, #39	@ 0x27
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01d      	beq.n	8004e4c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	0018      	movs	r0, r3
 8004e14:	f7ff fd8a 	bl	800492c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	490e      	ldr	r1, [pc, #56]	@ (8004e5c <I2C_IsErrorOccurred+0x1ec>)
 8004e24:	400a      	ands	r2, r1
 8004e26:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2241      	movs	r2, #65	@ 0x41
 8004e38:	2120      	movs	r1, #32
 8004e3a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2242      	movs	r2, #66	@ 0x42
 8004e40:	2100      	movs	r1, #0
 8004e42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2240      	movs	r2, #64	@ 0x40
 8004e48:	2100      	movs	r1, #0
 8004e4a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004e4c:	2327      	movs	r3, #39	@ 0x27
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	781b      	ldrb	r3, [r3, #0]
}
 8004e52:	0018      	movs	r0, r3
 8004e54:	46bd      	mov	sp, r7
 8004e56:	b00a      	add	sp, #40	@ 0x28
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	46c0      	nop			@ (mov r8, r8)
 8004e5c:	fe00e800 	.word	0xfe00e800

08004e60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e60:	b590      	push	{r4, r7, lr}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	0008      	movs	r0, r1
 8004e6a:	0011      	movs	r1, r2
 8004e6c:	607b      	str	r3, [r7, #4]
 8004e6e:	240a      	movs	r4, #10
 8004e70:	193b      	adds	r3, r7, r4
 8004e72:	1c02      	adds	r2, r0, #0
 8004e74:	801a      	strh	r2, [r3, #0]
 8004e76:	2009      	movs	r0, #9
 8004e78:	183b      	adds	r3, r7, r0
 8004e7a:	1c0a      	adds	r2, r1, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e7e:	193b      	adds	r3, r7, r4
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	059b      	lsls	r3, r3, #22
 8004e84:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e86:	183b      	adds	r3, r7, r0
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	0419      	lsls	r1, r3, #16
 8004e8c:	23ff      	movs	r3, #255	@ 0xff
 8004e8e:	041b      	lsls	r3, r3, #16
 8004e90:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e92:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eaa:	0d51      	lsrs	r1, r2, #21
 8004eac:	2280      	movs	r2, #128	@ 0x80
 8004eae:	00d2      	lsls	r2, r2, #3
 8004eb0:	400a      	ands	r2, r1
 8004eb2:	4907      	ldr	r1, [pc, #28]	@ (8004ed0 <I2C_TransferConfig+0x70>)
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	43d2      	mvns	r2, r2
 8004eb8:	401a      	ands	r2, r3
 8004eba:	0011      	movs	r1, r2
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ec6:	46c0      	nop			@ (mov r8, r8)
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	b007      	add	sp, #28
 8004ecc:	bd90      	pop	{r4, r7, pc}
 8004ece:	46c0      	nop			@ (mov r8, r8)
 8004ed0:	03ff63ff 	.word	0x03ff63ff

08004ed4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2241      	movs	r2, #65	@ 0x41
 8004ee2:	5c9b      	ldrb	r3, [r3, r2]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	d138      	bne.n	8004f5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2240      	movs	r2, #64	@ 0x40
 8004eee:	5c9b      	ldrb	r3, [r3, r2]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e032      	b.n	8004f5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2240      	movs	r2, #64	@ 0x40
 8004efc:	2101      	movs	r1, #1
 8004efe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2241      	movs	r2, #65	@ 0x41
 8004f04:	2124      	movs	r1, #36	@ 0x24
 8004f06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2101      	movs	r1, #1
 8004f14:	438a      	bics	r2, r1
 8004f16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4911      	ldr	r1, [pc, #68]	@ (8004f68 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004f24:	400a      	ands	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6819      	ldr	r1, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2101      	movs	r1, #1
 8004f44:	430a      	orrs	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2241      	movs	r2, #65	@ 0x41
 8004f4c:	2120      	movs	r1, #32
 8004f4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2240      	movs	r2, #64	@ 0x40
 8004f54:	2100      	movs	r1, #0
 8004f56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e000      	b.n	8004f5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f5c:	2302      	movs	r3, #2
  }
}
 8004f5e:	0018      	movs	r0, r3
 8004f60:	46bd      	mov	sp, r7
 8004f62:	b002      	add	sp, #8
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	46c0      	nop			@ (mov r8, r8)
 8004f68:	ffffefff 	.word	0xffffefff

08004f6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2241      	movs	r2, #65	@ 0x41
 8004f7a:	5c9b      	ldrb	r3, [r3, r2]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	d139      	bne.n	8004ff6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2240      	movs	r2, #64	@ 0x40
 8004f86:	5c9b      	ldrb	r3, [r3, r2]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e033      	b.n	8004ff8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2240      	movs	r2, #64	@ 0x40
 8004f94:	2101      	movs	r1, #1
 8004f96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2241      	movs	r2, #65	@ 0x41
 8004f9c:	2124      	movs	r1, #36	@ 0x24
 8004f9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2101      	movs	r1, #1
 8004fac:	438a      	bics	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4a11      	ldr	r2, [pc, #68]	@ (8005000 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	021b      	lsls	r3, r3, #8
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2101      	movs	r1, #1
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2241      	movs	r2, #65	@ 0x41
 8004fe6:	2120      	movs	r1, #32
 8004fe8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2240      	movs	r2, #64	@ 0x40
 8004fee:	2100      	movs	r1, #0
 8004ff0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e000      	b.n	8004ff8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ff6:	2302      	movs	r3, #2
  }
}
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	b004      	add	sp, #16
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	fffff0ff 	.word	0xfffff0ff

08005004 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e0e5      	b.n	80051e2 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2235      	movs	r2, #53	@ 0x35
 800501a:	5c9b      	ldrb	r3, [r3, r2]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d107      	bne.n	8005032 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2234      	movs	r2, #52	@ 0x34
 8005026:	2100      	movs	r1, #0
 8005028:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	0018      	movs	r0, r3
 800502e:	f7fe f8b1 	bl	8003194 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2235      	movs	r2, #53	@ 0x35
 8005036:	2102      	movs	r1, #2
 8005038:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69da      	ldr	r2, [r3, #28]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4969      	ldr	r1, [pc, #420]	@ (80051ec <HAL_I2S_Init+0x1e8>)
 8005046:	400a      	ands	r2, r1
 8005048:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2202      	movs	r2, #2
 8005050:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d100      	bne.n	800505c <HAL_I2S_Init+0x58>
 800505a:	e076      	b.n	800514a <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005064:	2310      	movs	r3, #16
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	e001      	b.n	800506e <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800506a:	2320      	movs	r3, #32
 800506c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	2b20      	cmp	r3, #32
 8005074:	d802      	bhi.n	800507c <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 800507c:	2380      	movs	r3, #128	@ 0x80
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	0018      	movs	r0, r3
 8005082:	f001 f955 	bl	8006330 <HAL_RCCEx_GetPeriphCLKFreq>
 8005086:	0003      	movs	r3, r0
 8005088:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	2380      	movs	r3, #128	@ 0x80
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	429a      	cmp	r2, r3
 8005094:	d131      	bne.n	80050fa <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d016      	beq.n	80050cc <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	0019      	movs	r1, r3
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f7fb f82d 	bl	8000104 <__udivsi3>
 80050aa:	0003      	movs	r3, r0
 80050ac:	001a      	movs	r2, r3
 80050ae:	0013      	movs	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	189b      	adds	r3, r3, r2
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	001a      	movs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	0019      	movs	r1, r3
 80050be:	0010      	movs	r0, r2
 80050c0:	f7fb f820 	bl	8000104 <__udivsi3>
 80050c4:	0003      	movs	r3, r0
 80050c6:	3305      	adds	r3, #5
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	e02a      	b.n	8005122 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	0019      	movs	r1, r3
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f7fb f816 	bl	8000104 <__udivsi3>
 80050d8:	0003      	movs	r3, r0
 80050da:	001a      	movs	r2, r3
 80050dc:	0013      	movs	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	189b      	adds	r3, r3, r2
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	001a      	movs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	0019      	movs	r1, r3
 80050ec:	0010      	movs	r0, r2
 80050ee:	f7fb f809 	bl	8000104 <__udivsi3>
 80050f2:	0003      	movs	r3, r0
 80050f4:	3305      	adds	r3, #5
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	e013      	b.n	8005122 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050fa:	6979      	ldr	r1, [r7, #20]
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f7fb f801 	bl	8000104 <__udivsi3>
 8005102:	0003      	movs	r3, r0
 8005104:	001a      	movs	r2, r3
 8005106:	0013      	movs	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	189b      	adds	r3, r3, r2
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	001a      	movs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	0019      	movs	r1, r3
 8005116:	0010      	movs	r0, r2
 8005118:	f7fa fff4 	bl	8000104 <__udivsi3>
 800511c:	0003      	movs	r3, r0
 800511e:	3305      	adds	r3, #5
 8005120:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	210a      	movs	r1, #10
 8005126:	0018      	movs	r0, r3
 8005128:	f7fa ffec 	bl	8000104 <__udivsi3>
 800512c:	0003      	movs	r3, r0
 800512e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2201      	movs	r2, #1
 8005134:	4013      	ands	r3, r2
 8005136:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	085b      	lsrs	r3, r3, #1
 8005140:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	021b      	lsls	r3, r3, #8
 8005146:	61bb      	str	r3, [r7, #24]
 8005148:	e003      	b.n	8005152 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800514a:	2302      	movs	r3, #2
 800514c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d902      	bls.n	800515e <HAL_I2S_Init+0x15a>
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2bff      	cmp	r3, #255	@ 0xff
 800515c:	d907      	bls.n	800516e <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	2210      	movs	r2, #16
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e039      	b.n	80051e2 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691a      	ldr	r2, [r3, #16]
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	431a      	orrs	r2, r3
 8005176:	0011      	movs	r1, r2
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	430a      	orrs	r2, r1
 8005180:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	4a18      	ldr	r2, [pc, #96]	@ (80051ec <HAL_I2S_Init+0x1e8>)
 800518a:	401a      	ands	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6859      	ldr	r1, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	4319      	orrs	r1, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	4319      	orrs	r1, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	430b      	orrs	r3, r1
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2180      	movs	r1, #128	@ 0x80
 80051aa:	0109      	lsls	r1, r1, #4
 80051ac:	430a      	orrs	r2, r1
 80051ae:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b30      	cmp	r3, #48	@ 0x30
 80051b6:	d003      	beq.n	80051c0 <HAL_I2S_Init+0x1bc>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2bb0      	cmp	r3, #176	@ 0xb0
 80051be:	d108      	bne.n	80051d2 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69da      	ldr	r2, [r3, #28]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2180      	movs	r1, #128	@ 0x80
 80051cc:	0149      	lsls	r1, r1, #5
 80051ce:	430a      	orrs	r2, r1
 80051d0:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2235      	movs	r2, #53	@ 0x35
 80051dc:	2101      	movs	r1, #1
 80051de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	0018      	movs	r0, r3
 80051e4:	46bd      	mov	sp, r7
 80051e6:	b008      	add	sp, #32
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	46c0      	nop			@ (mov r8, r8)
 80051ec:	fffff040 	.word	0xfffff040

080051f0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	1dbb      	adds	r3, r7, #6
 80051fc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <HAL_I2S_Transmit_DMA+0x1c>
 8005204:	1dbb      	adds	r3, r7, #6
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e091      	b.n	8005334 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2234      	movs	r2, #52	@ 0x34
 8005214:	5c9b      	ldrb	r3, [r3, r2]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_I2S_Transmit_DMA+0x30>
 800521c:	2302      	movs	r3, #2
 800521e:	e089      	b.n	8005334 <HAL_I2S_Transmit_DMA+0x144>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2234      	movs	r2, #52	@ 0x34
 8005224:	2101      	movs	r1, #1
 8005226:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2235      	movs	r2, #53	@ 0x35
 800522c:	5c9b      	ldrb	r3, [r3, r2]
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b01      	cmp	r3, #1
 8005232:	d005      	beq.n	8005240 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2234      	movs	r2, #52	@ 0x34
 8005238:	2100      	movs	r1, #0
 800523a:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800523c:	2302      	movs	r3, #2
 800523e:	e079      	b.n	8005334 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2235      	movs	r2, #53	@ 0x35
 8005244:	2103      	movs	r1, #3
 8005246:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	2207      	movs	r2, #7
 800525c:	4013      	ands	r3, r2
 800525e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2b03      	cmp	r3, #3
 8005264:	d002      	beq.n	800526c <HAL_I2S_Transmit_DMA+0x7c>
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b05      	cmp	r3, #5
 800526a:	d10c      	bne.n	8005286 <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 800526c:	1dbb      	adds	r3, r7, #6
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	18db      	adds	r3, r3, r3
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8005278:	1dbb      	adds	r3, r7, #6
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	18db      	adds	r3, r3, r3
 800527e:	b29a      	uxth	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	845a      	strh	r2, [r3, #34]	@ 0x22
 8005284:	e007      	b.n	8005296 <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	1dba      	adds	r2, r7, #6
 800528a:	8812      	ldrh	r2, [r2, #0]
 800528c:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	1dba      	adds	r2, r7, #6
 8005292:	8812      	ldrh	r2, [r2, #0]
 8005294:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529a:	4a28      	ldr	r2, [pc, #160]	@ (800533c <HAL_I2S_Transmit_DMA+0x14c>)
 800529c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a2:	4a27      	ldr	r2, [pc, #156]	@ (8005340 <HAL_I2S_Transmit_DMA+0x150>)
 80052a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052aa:	4a26      	ldr	r2, [pc, #152]	@ (8005344 <HAL_I2S_Transmit_DMA+0x154>)
 80052ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80052b6:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80052be:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8c1b      	ldrh	r3, [r3, #32]
 80052c4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80052c6:	f7fe fc4b 	bl	8003b60 <HAL_DMA_Start_IT>
 80052ca:	1e03      	subs	r3, r0, #0
 80052cc:	d00f      	beq.n	80052ee <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d2:	2208      	movs	r2, #8
 80052d4:	431a      	orrs	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2235      	movs	r2, #53	@ 0x35
 80052de:	2101      	movs	r1, #1
 80052e0:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2234      	movs	r2, #52	@ 0x34
 80052e6:	2100      	movs	r1, #0
 80052e8:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e022      	b.n	8005334 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69da      	ldr	r2, [r3, #28]
 80052f4:	2380      	movs	r3, #128	@ 0x80
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	4013      	ands	r3, r2
 80052fa:	d108      	bne.n	800530e <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69da      	ldr	r2, [r3, #28]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2180      	movs	r1, #128	@ 0x80
 8005308:	00c9      	lsls	r1, r1, #3
 800530a:	430a      	orrs	r2, r1
 800530c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2202      	movs	r2, #2
 8005316:	4013      	ands	r3, r2
 8005318:	d107      	bne.n	800532a <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2102      	movs	r1, #2
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2234      	movs	r2, #52	@ 0x34
 800532e:	2100      	movs	r1, #0
 8005330:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	b006      	add	sp, #24
 800533a:	bd80      	pop	{r7, pc}
 800533c:	08005525 	.word	0x08005525
 8005340:	080054e1 	.word	0x080054e1
 8005344:	08005543 	.word	0x08005543

08005348 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005350:	2317      	movs	r3, #23
 8005352:	18fb      	adds	r3, r7, r3
 8005354:	2200      	movs	r2, #0
 8005356:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	2380      	movs	r3, #128	@ 0x80
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	429a      	cmp	r2, r3
 8005362:	d003      	beq.n	800536c <HAL_I2S_DMAStop+0x24>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d158      	bne.n	800541e <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d010      	beq.n	8005396 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005378:	0018      	movs	r0, r3
 800537a:	f7fe fc77 	bl	8003c6c <HAL_DMA_Abort>
 800537e:	1e03      	subs	r3, r0, #0
 8005380:	d009      	beq.n	8005396 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005386:	2208      	movs	r2, #8
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800538e:	2317      	movs	r3, #23
 8005390:	18fb      	adds	r3, r7, r3
 8005392:	2201      	movs	r2, #1
 8005394:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	2364      	movs	r3, #100	@ 0x64
 800539a:	2201      	movs	r2, #1
 800539c:	2102      	movs	r1, #2
 800539e:	f000 f8f7 	bl	8005590 <I2S_WaitFlagStateUntilTimeout>
 80053a2:	1e03      	subs	r3, r0, #0
 80053a4:	d00d      	beq.n	80053c2 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053aa:	2201      	movs	r2, #1
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2235      	movs	r2, #53	@ 0x35
 80053b6:	2101      	movs	r1, #1
 80053b8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80053ba:	2317      	movs	r3, #23
 80053bc:	18fb      	adds	r3, r7, r3
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	2364      	movs	r3, #100	@ 0x64
 80053c6:	2200      	movs	r2, #0
 80053c8:	2180      	movs	r1, #128	@ 0x80
 80053ca:	f000 f8e1 	bl	8005590 <I2S_WaitFlagStateUntilTimeout>
 80053ce:	1e03      	subs	r3, r0, #0
 80053d0:	d00d      	beq.n	80053ee <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d6:	2201      	movs	r2, #1
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2235      	movs	r2, #53	@ 0x35
 80053e2:	2101      	movs	r1, #1
 80053e4:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80053e6:	2317      	movs	r3, #23
 80053e8:	18fb      	adds	r3, r7, r3
 80053ea:	2201      	movs	r2, #1
 80053ec:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4938      	ldr	r1, [pc, #224]	@ (80054dc <HAL_I2S_DMAStop+0x194>)
 80053fa:	400a      	ands	r2, r1
 80053fc:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80053fe:	2300      	movs	r3, #0
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2102      	movs	r1, #2
 8005418:	438a      	bics	r2, r1
 800541a:	605a      	str	r2, [r3, #4]
 800541c:	e053      	b.n	80054c6 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	23c0      	movs	r3, #192	@ 0xc0
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	429a      	cmp	r2, r3
 8005428:	d005      	beq.n	8005436 <HAL_I2S_DMAStop+0xee>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	2380      	movs	r3, #128	@ 0x80
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	429a      	cmp	r2, r3
 8005434:	d147      	bne.n	80054c6 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543a:	2b00      	cmp	r3, #0
 800543c:	d010      	beq.n	8005460 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005442:	0018      	movs	r0, r3
 8005444:	f7fe fc12 	bl	8003c6c <HAL_DMA_Abort>
 8005448:	1e03      	subs	r3, r0, #0
 800544a:	d009      	beq.n	8005460 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005450:	2208      	movs	r2, #8
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8005458:	2317      	movs	r3, #23
 800545a:	18fb      	adds	r3, r7, r3
 800545c:	2201      	movs	r2, #1
 800545e:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	69da      	ldr	r2, [r3, #28]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	491c      	ldr	r1, [pc, #112]	@ (80054dc <HAL_I2S_DMAStop+0x194>)
 800546c:	400a      	ands	r2, r1
 800546e:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2101      	movs	r1, #1
 8005492:	438a      	bics	r2, r1
 8005494:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	2380      	movs	r3, #128	@ 0x80
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	429a      	cmp	r2, r3
 80054a0:	d10e      	bne.n	80054c0 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a6:	2240      	movs	r2, #64	@ 0x40
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2235      	movs	r2, #53	@ 0x35
 80054b2:	2101      	movs	r1, #1
 80054b4:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80054b6:	2317      	movs	r3, #23
 80054b8:	18fb      	adds	r3, r7, r3
 80054ba:	2201      	movs	r2, #1
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	e002      	b.n	80054c6 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2235      	movs	r2, #53	@ 0x35
 80054ca:	2101      	movs	r1, #1
 80054cc:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80054ce:	2317      	movs	r3, #23
 80054d0:	18fb      	adds	r3, r7, r3
 80054d2:	781b      	ldrb	r3, [r3, #0]
}
 80054d4:	0018      	movs	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	b006      	add	sp, #24
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	fffffbff 	.word	0xfffffbff

080054e0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ec:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10e      	bne.n	8005514 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2102      	movs	r1, #2
 8005502:	438a      	bics	r2, r1
 8005504:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	845a      	strh	r2, [r3, #34]	@ 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2235      	movs	r2, #53	@ 0x35
 8005510:	2101      	movs	r1, #1
 8005512:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	0018      	movs	r0, r3
 8005518:	f7fd fb21 	bl	8002b5e <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800551c:	46c0      	nop			@ (mov r8, r8)
 800551e:	46bd      	mov	sp, r7
 8005520:	b004      	add	sp, #16
 8005522:	bd80      	pop	{r7, pc}

08005524 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005530:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	0018      	movs	r0, r3
 8005536:	f7fd fb07 	bl	8002b48 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800553a:	46c0      	nop			@ (mov r8, r8)
 800553c:	46bd      	mov	sp, r7
 800553e:	b004      	add	sp, #16
 8005540:	bd80      	pop	{r7, pc}

08005542 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b084      	sub	sp, #16
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2103      	movs	r1, #3
 800555c:	438a      	bics	r2, r1
 800555e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2235      	movs	r2, #53	@ 0x35
 8005570:	2101      	movs	r1, #1
 8005572:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005578:	2208      	movs	r2, #8
 800557a:	431a      	orrs	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	0018      	movs	r0, r3
 8005584:	f7fd fb48 	bl	8002c18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005588:	46c0      	nop			@ (mov r8, r8)
 800558a:	46bd      	mov	sp, r7
 800558c:	b004      	add	sp, #16
 800558e:	bd80      	pop	{r7, pc}

08005590 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	1dfb      	adds	r3, r7, #7
 800559e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80055a0:	f7fe f96c 	bl	800387c <HAL_GetTick>
 80055a4:	0003      	movs	r3, r0
 80055a6:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80055a8:	e017      	b.n	80055da <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	3301      	adds	r3, #1
 80055ae:	d014      	beq.n	80055da <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80055b0:	f7fe f964 	bl	800387c <HAL_GetTick>
 80055b4:	0002      	movs	r2, r0
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d902      	bls.n	80055c6 <I2S_WaitFlagStateUntilTimeout+0x36>
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2235      	movs	r2, #53	@ 0x35
 80055ca:	2101      	movs	r1, #1
 80055cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2234      	movs	r2, #52	@ 0x34
 80055d2:	2100      	movs	r1, #0
 80055d4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e00f      	b.n	80055fa <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	4013      	ands	r3, r2
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	425a      	negs	r2, r3
 80055ea:	4153      	adcs	r3, r2
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	001a      	movs	r2, r3
 80055f0:	1dfb      	adds	r3, r7, #7
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d1d8      	bne.n	80055aa <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	0018      	movs	r0, r3
 80055fc:	46bd      	mov	sp, r7
 80055fe:	b006      	add	sp, #24
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005608:	4b04      	ldr	r3, [pc, #16]	@ (800561c <HAL_PWR_EnableBkUpAccess+0x18>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	4b03      	ldr	r3, [pc, #12]	@ (800561c <HAL_PWR_EnableBkUpAccess+0x18>)
 800560e:	2180      	movs	r1, #128	@ 0x80
 8005610:	0049      	lsls	r1, r1, #1
 8005612:	430a      	orrs	r2, r1
 8005614:	601a      	str	r2, [r3, #0]
}
 8005616:	46c0      	nop			@ (mov r8, r8)
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40007000 	.word	0x40007000

08005620 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005628:	4b19      	ldr	r3, [pc, #100]	@ (8005690 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a19      	ldr	r2, [pc, #100]	@ (8005694 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800562e:	4013      	ands	r3, r2
 8005630:	0019      	movs	r1, r3
 8005632:	4b17      	ldr	r3, [pc, #92]	@ (8005690 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	430a      	orrs	r2, r1
 8005638:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	2380      	movs	r3, #128	@ 0x80
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	429a      	cmp	r2, r3
 8005642:	d11f      	bne.n	8005684 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005644:	4b14      	ldr	r3, [pc, #80]	@ (8005698 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	0013      	movs	r3, r2
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	189b      	adds	r3, r3, r2
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	4912      	ldr	r1, [pc, #72]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005652:	0018      	movs	r0, r3
 8005654:	f7fa fd56 	bl	8000104 <__udivsi3>
 8005658:	0003      	movs	r3, r0
 800565a:	3301      	adds	r3, #1
 800565c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800565e:	e008      	b.n	8005672 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3b01      	subs	r3, #1
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	e001      	b.n	8005672 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e009      	b.n	8005686 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005672:	4b07      	ldr	r3, [pc, #28]	@ (8005690 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	2380      	movs	r3, #128	@ 0x80
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	401a      	ands	r2, r3
 800567c:	2380      	movs	r3, #128	@ 0x80
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	429a      	cmp	r2, r3
 8005682:	d0ed      	beq.n	8005660 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	0018      	movs	r0, r3
 8005688:	46bd      	mov	sp, r7
 800568a:	b004      	add	sp, #16
 800568c:	bd80      	pop	{r7, pc}
 800568e:	46c0      	nop			@ (mov r8, r8)
 8005690:	40007000 	.word	0x40007000
 8005694:	fffff9ff 	.word	0xfffff9ff
 8005698:	2000008c 	.word	0x2000008c
 800569c:	000f4240 	.word	0x000f4240

080056a0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80056a4:	4b03      	ldr	r3, [pc, #12]	@ (80056b4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	23e0      	movs	r3, #224	@ 0xe0
 80056aa:	01db      	lsls	r3, r3, #7
 80056ac:	4013      	ands	r3, r2
}
 80056ae:	0018      	movs	r0, r3
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	40021000 	.word	0x40021000

080056b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e2fe      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2201      	movs	r2, #1
 80056d0:	4013      	ands	r3, r2
 80056d2:	d100      	bne.n	80056d6 <HAL_RCC_OscConfig+0x1e>
 80056d4:	e07c      	b.n	80057d0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056d6:	4bc3      	ldr	r3, [pc, #780]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2238      	movs	r2, #56	@ 0x38
 80056dc:	4013      	ands	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056e0:	4bc0      	ldr	r3, [pc, #768]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	2203      	movs	r2, #3
 80056e6:	4013      	ands	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d102      	bne.n	80056f6 <HAL_RCC_OscConfig+0x3e>
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d002      	beq.n	80056fc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d10b      	bne.n	8005714 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056fc:	4bb9      	ldr	r3, [pc, #740]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	2380      	movs	r3, #128	@ 0x80
 8005702:	029b      	lsls	r3, r3, #10
 8005704:	4013      	ands	r3, r2
 8005706:	d062      	beq.n	80057ce <HAL_RCC_OscConfig+0x116>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d15e      	bne.n	80057ce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e2d9      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	2380      	movs	r3, #128	@ 0x80
 800571a:	025b      	lsls	r3, r3, #9
 800571c:	429a      	cmp	r2, r3
 800571e:	d107      	bne.n	8005730 <HAL_RCC_OscConfig+0x78>
 8005720:	4bb0      	ldr	r3, [pc, #704]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	4baf      	ldr	r3, [pc, #700]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 8005726:	2180      	movs	r1, #128	@ 0x80
 8005728:	0249      	lsls	r1, r1, #9
 800572a:	430a      	orrs	r2, r1
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	e020      	b.n	8005772 <HAL_RCC_OscConfig+0xba>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	23a0      	movs	r3, #160	@ 0xa0
 8005736:	02db      	lsls	r3, r3, #11
 8005738:	429a      	cmp	r2, r3
 800573a:	d10e      	bne.n	800575a <HAL_RCC_OscConfig+0xa2>
 800573c:	4ba9      	ldr	r3, [pc, #676]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4ba8      	ldr	r3, [pc, #672]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 8005742:	2180      	movs	r1, #128	@ 0x80
 8005744:	02c9      	lsls	r1, r1, #11
 8005746:	430a      	orrs	r2, r1
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	4ba6      	ldr	r3, [pc, #664]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4ba5      	ldr	r3, [pc, #660]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 8005750:	2180      	movs	r1, #128	@ 0x80
 8005752:	0249      	lsls	r1, r1, #9
 8005754:	430a      	orrs	r2, r1
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	e00b      	b.n	8005772 <HAL_RCC_OscConfig+0xba>
 800575a:	4ba2      	ldr	r3, [pc, #648]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4ba1      	ldr	r3, [pc, #644]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 8005760:	49a1      	ldr	r1, [pc, #644]	@ (80059e8 <HAL_RCC_OscConfig+0x330>)
 8005762:	400a      	ands	r2, r1
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	4b9f      	ldr	r3, [pc, #636]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	4b9e      	ldr	r3, [pc, #632]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 800576c:	499f      	ldr	r1, [pc, #636]	@ (80059ec <HAL_RCC_OscConfig+0x334>)
 800576e:	400a      	ands	r2, r1
 8005770:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d014      	beq.n	80057a4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577a:	f7fe f87f 	bl	800387c <HAL_GetTick>
 800577e:	0003      	movs	r3, r0
 8005780:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005784:	f7fe f87a 	bl	800387c <HAL_GetTick>
 8005788:	0002      	movs	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b64      	cmp	r3, #100	@ 0x64
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e298      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005796:	4b93      	ldr	r3, [pc, #588]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	2380      	movs	r3, #128	@ 0x80
 800579c:	029b      	lsls	r3, r3, #10
 800579e:	4013      	ands	r3, r2
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0xcc>
 80057a2:	e015      	b.n	80057d0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a4:	f7fe f86a 	bl	800387c <HAL_GetTick>
 80057a8:	0003      	movs	r3, r0
 80057aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057ae:	f7fe f865 	bl	800387c <HAL_GetTick>
 80057b2:	0002      	movs	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b64      	cmp	r3, #100	@ 0x64
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e283      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057c0:	4b88      	ldr	r3, [pc, #544]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	2380      	movs	r3, #128	@ 0x80
 80057c6:	029b      	lsls	r3, r3, #10
 80057c8:	4013      	ands	r3, r2
 80057ca:	d1f0      	bne.n	80057ae <HAL_RCC_OscConfig+0xf6>
 80057cc:	e000      	b.n	80057d0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057ce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2202      	movs	r2, #2
 80057d6:	4013      	ands	r3, r2
 80057d8:	d100      	bne.n	80057dc <HAL_RCC_OscConfig+0x124>
 80057da:	e099      	b.n	8005910 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057dc:	4b81      	ldr	r3, [pc, #516]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2238      	movs	r2, #56	@ 0x38
 80057e2:	4013      	ands	r3, r2
 80057e4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057e6:	4b7f      	ldr	r3, [pc, #508]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	2203      	movs	r2, #3
 80057ec:	4013      	ands	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b10      	cmp	r3, #16
 80057f4:	d102      	bne.n	80057fc <HAL_RCC_OscConfig+0x144>
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d002      	beq.n	8005802 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d135      	bne.n	800586e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005802:	4b78      	ldr	r3, [pc, #480]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	2380      	movs	r3, #128	@ 0x80
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	4013      	ands	r3, r2
 800580c:	d005      	beq.n	800581a <HAL_RCC_OscConfig+0x162>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e256      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800581a:	4b72      	ldr	r3, [pc, #456]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	4a74      	ldr	r2, [pc, #464]	@ (80059f0 <HAL_RCC_OscConfig+0x338>)
 8005820:	4013      	ands	r3, r2
 8005822:	0019      	movs	r1, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	021a      	lsls	r2, r3, #8
 800582a:	4b6e      	ldr	r3, [pc, #440]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 800582c:	430a      	orrs	r2, r1
 800582e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d112      	bne.n	800585c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005836:	4b6b      	ldr	r3, [pc, #428]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a6e      	ldr	r2, [pc, #440]	@ (80059f4 <HAL_RCC_OscConfig+0x33c>)
 800583c:	4013      	ands	r3, r2
 800583e:	0019      	movs	r1, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691a      	ldr	r2, [r3, #16]
 8005844:	4b67      	ldr	r3, [pc, #412]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 8005846:	430a      	orrs	r2, r1
 8005848:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800584a:	4b66      	ldr	r3, [pc, #408]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	0adb      	lsrs	r3, r3, #11
 8005850:	2207      	movs	r2, #7
 8005852:	4013      	ands	r3, r2
 8005854:	4a68      	ldr	r2, [pc, #416]	@ (80059f8 <HAL_RCC_OscConfig+0x340>)
 8005856:	40da      	lsrs	r2, r3
 8005858:	4b68      	ldr	r3, [pc, #416]	@ (80059fc <HAL_RCC_OscConfig+0x344>)
 800585a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800585c:	4b68      	ldr	r3, [pc, #416]	@ (8005a00 <HAL_RCC_OscConfig+0x348>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	0018      	movs	r0, r3
 8005862:	f7fd ffaf 	bl	80037c4 <HAL_InitTick>
 8005866:	1e03      	subs	r3, r0, #0
 8005868:	d051      	beq.n	800590e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e22c      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d030      	beq.n	80058d8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005876:	4b5b      	ldr	r3, [pc, #364]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a5e      	ldr	r2, [pc, #376]	@ (80059f4 <HAL_RCC_OscConfig+0x33c>)
 800587c:	4013      	ands	r3, r2
 800587e:	0019      	movs	r1, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	4b57      	ldr	r3, [pc, #348]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 8005886:	430a      	orrs	r2, r1
 8005888:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800588a:	4b56      	ldr	r3, [pc, #344]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4b55      	ldr	r3, [pc, #340]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 8005890:	2180      	movs	r1, #128	@ 0x80
 8005892:	0049      	lsls	r1, r1, #1
 8005894:	430a      	orrs	r2, r1
 8005896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005898:	f7fd fff0 	bl	800387c <HAL_GetTick>
 800589c:	0003      	movs	r3, r0
 800589e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058a2:	f7fd ffeb 	bl	800387c <HAL_GetTick>
 80058a6:	0002      	movs	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e209      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058b4:	4b4b      	ldr	r3, [pc, #300]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	2380      	movs	r3, #128	@ 0x80
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	4013      	ands	r3, r2
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c0:	4b48      	ldr	r3, [pc, #288]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	4a4a      	ldr	r2, [pc, #296]	@ (80059f0 <HAL_RCC_OscConfig+0x338>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	0019      	movs	r1, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	021a      	lsls	r2, r3, #8
 80058d0:	4b44      	ldr	r3, [pc, #272]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 80058d2:	430a      	orrs	r2, r1
 80058d4:	605a      	str	r2, [r3, #4]
 80058d6:	e01b      	b.n	8005910 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80058d8:	4b42      	ldr	r3, [pc, #264]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4b41      	ldr	r3, [pc, #260]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 80058de:	4949      	ldr	r1, [pc, #292]	@ (8005a04 <HAL_RCC_OscConfig+0x34c>)
 80058e0:	400a      	ands	r2, r1
 80058e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e4:	f7fd ffca 	bl	800387c <HAL_GetTick>
 80058e8:	0003      	movs	r3, r0
 80058ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058ec:	e008      	b.n	8005900 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ee:	f7fd ffc5 	bl	800387c <HAL_GetTick>
 80058f2:	0002      	movs	r2, r0
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e1e3      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005900:	4b38      	ldr	r3, [pc, #224]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	2380      	movs	r3, #128	@ 0x80
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	4013      	ands	r3, r2
 800590a:	d1f0      	bne.n	80058ee <HAL_RCC_OscConfig+0x236>
 800590c:	e000      	b.n	8005910 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800590e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2208      	movs	r2, #8
 8005916:	4013      	ands	r3, r2
 8005918:	d047      	beq.n	80059aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800591a:	4b32      	ldr	r3, [pc, #200]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2238      	movs	r2, #56	@ 0x38
 8005920:	4013      	ands	r3, r2
 8005922:	2b18      	cmp	r3, #24
 8005924:	d10a      	bne.n	800593c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005926:	4b2f      	ldr	r3, [pc, #188]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 8005928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800592a:	2202      	movs	r2, #2
 800592c:	4013      	ands	r3, r2
 800592e:	d03c      	beq.n	80059aa <HAL_RCC_OscConfig+0x2f2>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d138      	bne.n	80059aa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e1c5      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d019      	beq.n	8005978 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005944:	4b27      	ldr	r3, [pc, #156]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 8005946:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005948:	4b26      	ldr	r3, [pc, #152]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 800594a:	2101      	movs	r1, #1
 800594c:	430a      	orrs	r2, r1
 800594e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005950:	f7fd ff94 	bl	800387c <HAL_GetTick>
 8005954:	0003      	movs	r3, r0
 8005956:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005958:	e008      	b.n	800596c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800595a:	f7fd ff8f 	bl	800387c <HAL_GetTick>
 800595e:	0002      	movs	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d901      	bls.n	800596c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e1ad      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800596c:	4b1d      	ldr	r3, [pc, #116]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 800596e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005970:	2202      	movs	r2, #2
 8005972:	4013      	ands	r3, r2
 8005974:	d0f1      	beq.n	800595a <HAL_RCC_OscConfig+0x2a2>
 8005976:	e018      	b.n	80059aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005978:	4b1a      	ldr	r3, [pc, #104]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 800597a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800597c:	4b19      	ldr	r3, [pc, #100]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 800597e:	2101      	movs	r1, #1
 8005980:	438a      	bics	r2, r1
 8005982:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005984:	f7fd ff7a 	bl	800387c <HAL_GetTick>
 8005988:	0003      	movs	r3, r0
 800598a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800598e:	f7fd ff75 	bl	800387c <HAL_GetTick>
 8005992:	0002      	movs	r2, r0
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e193      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059a0:	4b10      	ldr	r3, [pc, #64]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 80059a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059a4:	2202      	movs	r2, #2
 80059a6:	4013      	ands	r3, r2
 80059a8:	d1f1      	bne.n	800598e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2204      	movs	r2, #4
 80059b0:	4013      	ands	r3, r2
 80059b2:	d100      	bne.n	80059b6 <HAL_RCC_OscConfig+0x2fe>
 80059b4:	e0c6      	b.n	8005b44 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059b6:	231f      	movs	r3, #31
 80059b8:	18fb      	adds	r3, r7, r3
 80059ba:	2200      	movs	r2, #0
 80059bc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80059be:	4b09      	ldr	r3, [pc, #36]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2238      	movs	r2, #56	@ 0x38
 80059c4:	4013      	ands	r3, r2
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d11e      	bne.n	8005a08 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80059ca:	4b06      	ldr	r3, [pc, #24]	@ (80059e4 <HAL_RCC_OscConfig+0x32c>)
 80059cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ce:	2202      	movs	r2, #2
 80059d0:	4013      	ands	r3, r2
 80059d2:	d100      	bne.n	80059d6 <HAL_RCC_OscConfig+0x31e>
 80059d4:	e0b6      	b.n	8005b44 <HAL_RCC_OscConfig+0x48c>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d000      	beq.n	80059e0 <HAL_RCC_OscConfig+0x328>
 80059de:	e0b1      	b.n	8005b44 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e171      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
 80059e4:	40021000 	.word	0x40021000
 80059e8:	fffeffff 	.word	0xfffeffff
 80059ec:	fffbffff 	.word	0xfffbffff
 80059f0:	ffff80ff 	.word	0xffff80ff
 80059f4:	ffffc7ff 	.word	0xffffc7ff
 80059f8:	00f42400 	.word	0x00f42400
 80059fc:	2000008c 	.word	0x2000008c
 8005a00:	20000090 	.word	0x20000090
 8005a04:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a08:	4bb1      	ldr	r3, [pc, #708]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005a0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a0c:	2380      	movs	r3, #128	@ 0x80
 8005a0e:	055b      	lsls	r3, r3, #21
 8005a10:	4013      	ands	r3, r2
 8005a12:	d101      	bne.n	8005a18 <HAL_RCC_OscConfig+0x360>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <HAL_RCC_OscConfig+0x362>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d011      	beq.n	8005a42 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005a1e:	4bac      	ldr	r3, [pc, #688]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005a20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a22:	4bab      	ldr	r3, [pc, #684]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005a24:	2180      	movs	r1, #128	@ 0x80
 8005a26:	0549      	lsls	r1, r1, #21
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a2c:	4ba8      	ldr	r3, [pc, #672]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005a2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a30:	2380      	movs	r3, #128	@ 0x80
 8005a32:	055b      	lsls	r3, r3, #21
 8005a34:	4013      	ands	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005a3a:	231f      	movs	r3, #31
 8005a3c:	18fb      	adds	r3, r7, r3
 8005a3e:	2201      	movs	r2, #1
 8005a40:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a42:	4ba4      	ldr	r3, [pc, #656]	@ (8005cd4 <HAL_RCC_OscConfig+0x61c>)
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	2380      	movs	r3, #128	@ 0x80
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	d11a      	bne.n	8005a84 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a4e:	4ba1      	ldr	r3, [pc, #644]	@ (8005cd4 <HAL_RCC_OscConfig+0x61c>)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4ba0      	ldr	r3, [pc, #640]	@ (8005cd4 <HAL_RCC_OscConfig+0x61c>)
 8005a54:	2180      	movs	r1, #128	@ 0x80
 8005a56:	0049      	lsls	r1, r1, #1
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005a5c:	f7fd ff0e 	bl	800387c <HAL_GetTick>
 8005a60:	0003      	movs	r3, r0
 8005a62:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a64:	e008      	b.n	8005a78 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a66:	f7fd ff09 	bl	800387c <HAL_GetTick>
 8005a6a:	0002      	movs	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e127      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a78:	4b96      	ldr	r3, [pc, #600]	@ (8005cd4 <HAL_RCC_OscConfig+0x61c>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	2380      	movs	r3, #128	@ 0x80
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	4013      	ands	r3, r2
 8005a82:	d0f0      	beq.n	8005a66 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d106      	bne.n	8005a9a <HAL_RCC_OscConfig+0x3e2>
 8005a8c:	4b90      	ldr	r3, [pc, #576]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005a8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a90:	4b8f      	ldr	r3, [pc, #572]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005a92:	2101      	movs	r1, #1
 8005a94:	430a      	orrs	r2, r1
 8005a96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a98:	e01c      	b.n	8005ad4 <HAL_RCC_OscConfig+0x41c>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b05      	cmp	r3, #5
 8005aa0:	d10c      	bne.n	8005abc <HAL_RCC_OscConfig+0x404>
 8005aa2:	4b8b      	ldr	r3, [pc, #556]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005aa4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005aa6:	4b8a      	ldr	r3, [pc, #552]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005aa8:	2104      	movs	r1, #4
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005aae:	4b88      	ldr	r3, [pc, #544]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005ab0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ab2:	4b87      	ldr	r3, [pc, #540]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005aba:	e00b      	b.n	8005ad4 <HAL_RCC_OscConfig+0x41c>
 8005abc:	4b84      	ldr	r3, [pc, #528]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005abe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ac0:	4b83      	ldr	r3, [pc, #524]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	438a      	bics	r2, r1
 8005ac6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ac8:	4b81      	ldr	r3, [pc, #516]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005aca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005acc:	4b80      	ldr	r3, [pc, #512]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005ace:	2104      	movs	r1, #4
 8005ad0:	438a      	bics	r2, r1
 8005ad2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d014      	beq.n	8005b06 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005adc:	f7fd fece 	bl	800387c <HAL_GetTick>
 8005ae0:	0003      	movs	r3, r0
 8005ae2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ae4:	e009      	b.n	8005afa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ae6:	f7fd fec9 	bl	800387c <HAL_GetTick>
 8005aea:	0002      	movs	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	4a79      	ldr	r2, [pc, #484]	@ (8005cd8 <HAL_RCC_OscConfig+0x620>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e0e6      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005afa:	4b75      	ldr	r3, [pc, #468]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005afe:	2202      	movs	r2, #2
 8005b00:	4013      	ands	r3, r2
 8005b02:	d0f0      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x42e>
 8005b04:	e013      	b.n	8005b2e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b06:	f7fd feb9 	bl	800387c <HAL_GetTick>
 8005b0a:	0003      	movs	r3, r0
 8005b0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b0e:	e009      	b.n	8005b24 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b10:	f7fd feb4 	bl	800387c <HAL_GetTick>
 8005b14:	0002      	movs	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	4a6f      	ldr	r2, [pc, #444]	@ (8005cd8 <HAL_RCC_OscConfig+0x620>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e0d1      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b24:	4b6a      	ldr	r3, [pc, #424]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b28:	2202      	movs	r2, #2
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d1f0      	bne.n	8005b10 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005b2e:	231f      	movs	r3, #31
 8005b30:	18fb      	adds	r3, r7, r3
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d105      	bne.n	8005b44 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005b38:	4b65      	ldr	r3, [pc, #404]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005b3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b3c:	4b64      	ldr	r3, [pc, #400]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005b3e:	4967      	ldr	r1, [pc, #412]	@ (8005cdc <HAL_RCC_OscConfig+0x624>)
 8005b40:	400a      	ands	r2, r1
 8005b42:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d100      	bne.n	8005b4e <HAL_RCC_OscConfig+0x496>
 8005b4c:	e0bb      	b.n	8005cc6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b4e:	4b60      	ldr	r3, [pc, #384]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	2238      	movs	r2, #56	@ 0x38
 8005b54:	4013      	ands	r3, r2
 8005b56:	2b10      	cmp	r3, #16
 8005b58:	d100      	bne.n	8005b5c <HAL_RCC_OscConfig+0x4a4>
 8005b5a:	e07b      	b.n	8005c54 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d156      	bne.n	8005c12 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b64:	4b5a      	ldr	r3, [pc, #360]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	4b59      	ldr	r3, [pc, #356]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005b6a:	495d      	ldr	r1, [pc, #372]	@ (8005ce0 <HAL_RCC_OscConfig+0x628>)
 8005b6c:	400a      	ands	r2, r1
 8005b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b70:	f7fd fe84 	bl	800387c <HAL_GetTick>
 8005b74:	0003      	movs	r3, r0
 8005b76:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b7a:	f7fd fe7f 	bl	800387c <HAL_GetTick>
 8005b7e:	0002      	movs	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e09d      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b8c:	4b50      	ldr	r3, [pc, #320]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	2380      	movs	r3, #128	@ 0x80
 8005b92:	049b      	lsls	r3, r3, #18
 8005b94:	4013      	ands	r3, r2
 8005b96:	d1f0      	bne.n	8005b7a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b98:	4b4d      	ldr	r3, [pc, #308]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	4a51      	ldr	r2, [pc, #324]	@ (8005ce4 <HAL_RCC_OscConfig+0x62c>)
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	0019      	movs	r1, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1a      	ldr	r2, [r3, #32]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	4b42      	ldr	r3, [pc, #264]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bcc:	4b40      	ldr	r3, [pc, #256]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	4b3f      	ldr	r3, [pc, #252]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005bd2:	2180      	movs	r1, #128	@ 0x80
 8005bd4:	0449      	lsls	r1, r1, #17
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005bda:	4b3d      	ldr	r3, [pc, #244]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	4b3c      	ldr	r3, [pc, #240]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005be0:	2180      	movs	r1, #128	@ 0x80
 8005be2:	0549      	lsls	r1, r1, #21
 8005be4:	430a      	orrs	r2, r1
 8005be6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be8:	f7fd fe48 	bl	800387c <HAL_GetTick>
 8005bec:	0003      	movs	r3, r0
 8005bee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bf0:	e008      	b.n	8005c04 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf2:	f7fd fe43 	bl	800387c <HAL_GetTick>
 8005bf6:	0002      	movs	r2, r0
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e061      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c04:	4b32      	ldr	r3, [pc, #200]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	2380      	movs	r3, #128	@ 0x80
 8005c0a:	049b      	lsls	r3, r3, #18
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	d0f0      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x53a>
 8005c10:	e059      	b.n	8005cc6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c12:	4b2f      	ldr	r3, [pc, #188]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	4b2e      	ldr	r3, [pc, #184]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005c18:	4931      	ldr	r1, [pc, #196]	@ (8005ce0 <HAL_RCC_OscConfig+0x628>)
 8005c1a:	400a      	ands	r2, r1
 8005c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1e:	f7fd fe2d 	bl	800387c <HAL_GetTick>
 8005c22:	0003      	movs	r3, r0
 8005c24:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c28:	f7fd fe28 	bl	800387c <HAL_GetTick>
 8005c2c:	0002      	movs	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e046      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c3a:	4b25      	ldr	r3, [pc, #148]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	2380      	movs	r3, #128	@ 0x80
 8005c40:	049b      	lsls	r3, r3, #18
 8005c42:	4013      	ands	r3, r2
 8005c44:	d1f0      	bne.n	8005c28 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005c46:	4b22      	ldr	r3, [pc, #136]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	4b21      	ldr	r3, [pc, #132]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005c4c:	4926      	ldr	r1, [pc, #152]	@ (8005ce8 <HAL_RCC_OscConfig+0x630>)
 8005c4e:	400a      	ands	r2, r1
 8005c50:	60da      	str	r2, [r3, #12]
 8005c52:	e038      	b.n	8005cc6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e033      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005c60:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd0 <HAL_RCC_OscConfig+0x618>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2203      	movs	r2, #3
 8005c6a:	401a      	ands	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d126      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2270      	movs	r2, #112	@ 0x70
 8005c78:	401a      	ands	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d11f      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	23fe      	movs	r3, #254	@ 0xfe
 8005c86:	01db      	lsls	r3, r3, #7
 8005c88:	401a      	ands	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d116      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	23f8      	movs	r3, #248	@ 0xf8
 8005c98:	039b      	lsls	r3, r3, #14
 8005c9a:	401a      	ands	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d10e      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	23e0      	movs	r3, #224	@ 0xe0
 8005ca8:	051b      	lsls	r3, r3, #20
 8005caa:	401a      	ands	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d106      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	0f5b      	lsrs	r3, r3, #29
 8005cb8:	075a      	lsls	r2, r3, #29
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d001      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	0018      	movs	r0, r3
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	b008      	add	sp, #32
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	40007000 	.word	0x40007000
 8005cd8:	00001388 	.word	0x00001388
 8005cdc:	efffffff 	.word	0xefffffff
 8005ce0:	feffffff 	.word	0xfeffffff
 8005ce4:	11c1808c 	.word	0x11c1808c
 8005ce8:	eefefffc 	.word	0xeefefffc

08005cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e0e9      	b.n	8005ed4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d00:	4b76      	ldr	r3, [pc, #472]	@ (8005edc <HAL_RCC_ClockConfig+0x1f0>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2207      	movs	r2, #7
 8005d06:	4013      	ands	r3, r2
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d91e      	bls.n	8005d4c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d0e:	4b73      	ldr	r3, [pc, #460]	@ (8005edc <HAL_RCC_ClockConfig+0x1f0>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2207      	movs	r2, #7
 8005d14:	4393      	bics	r3, r2
 8005d16:	0019      	movs	r1, r3
 8005d18:	4b70      	ldr	r3, [pc, #448]	@ (8005edc <HAL_RCC_ClockConfig+0x1f0>)
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d20:	f7fd fdac 	bl	800387c <HAL_GetTick>
 8005d24:	0003      	movs	r3, r0
 8005d26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d28:	e009      	b.n	8005d3e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d2a:	f7fd fda7 	bl	800387c <HAL_GetTick>
 8005d2e:	0002      	movs	r2, r0
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	4a6a      	ldr	r2, [pc, #424]	@ (8005ee0 <HAL_RCC_ClockConfig+0x1f4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e0ca      	b.n	8005ed4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d3e:	4b67      	ldr	r3, [pc, #412]	@ (8005edc <HAL_RCC_ClockConfig+0x1f0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2207      	movs	r2, #7
 8005d44:	4013      	ands	r3, r2
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d1ee      	bne.n	8005d2a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2202      	movs	r2, #2
 8005d52:	4013      	ands	r3, r2
 8005d54:	d015      	beq.n	8005d82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2204      	movs	r2, #4
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	d006      	beq.n	8005d6e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005d60:	4b60      	ldr	r3, [pc, #384]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	4b5f      	ldr	r3, [pc, #380]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8005d66:	21e0      	movs	r1, #224	@ 0xe0
 8005d68:	01c9      	lsls	r1, r1, #7
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d6e:	4b5d      	ldr	r3, [pc, #372]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	4a5d      	ldr	r2, [pc, #372]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1fc>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	0019      	movs	r1, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	4b59      	ldr	r3, [pc, #356]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2201      	movs	r2, #1
 8005d88:	4013      	ands	r3, r2
 8005d8a:	d057      	beq.n	8005e3c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d107      	bne.n	8005da4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d94:	4b53      	ldr	r3, [pc, #332]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	2380      	movs	r3, #128	@ 0x80
 8005d9a:	029b      	lsls	r3, r3, #10
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d12b      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e097      	b.n	8005ed4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d107      	bne.n	8005dbc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dac:	4b4d      	ldr	r3, [pc, #308]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	2380      	movs	r3, #128	@ 0x80
 8005db2:	049b      	lsls	r3, r3, #18
 8005db4:	4013      	ands	r3, r2
 8005db6:	d11f      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e08b      	b.n	8005ed4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d107      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dc4:	4b47      	ldr	r3, [pc, #284]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	2380      	movs	r3, #128	@ 0x80
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	4013      	ands	r3, r2
 8005dce:	d113      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e07f      	b.n	8005ed4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d106      	bne.n	8005dea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ddc:	4b41      	ldr	r3, [pc, #260]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8005dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005de0:	2202      	movs	r2, #2
 8005de2:	4013      	ands	r3, r2
 8005de4:	d108      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e074      	b.n	8005ed4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dea:	4b3e      	ldr	r3, [pc, #248]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8005dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dee:	2202      	movs	r2, #2
 8005df0:	4013      	ands	r3, r2
 8005df2:	d101      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e06d      	b.n	8005ed4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005df8:	4b3a      	ldr	r3, [pc, #232]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	2207      	movs	r2, #7
 8005dfe:	4393      	bics	r3, r2
 8005e00:	0019      	movs	r1, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	4b37      	ldr	r3, [pc, #220]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e0c:	f7fd fd36 	bl	800387c <HAL_GetTick>
 8005e10:	0003      	movs	r3, r0
 8005e12:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e14:	e009      	b.n	8005e2a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e16:	f7fd fd31 	bl	800387c <HAL_GetTick>
 8005e1a:	0002      	movs	r2, r0
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	4a2f      	ldr	r2, [pc, #188]	@ (8005ee0 <HAL_RCC_ClockConfig+0x1f4>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e054      	b.n	8005ed4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e2a:	4b2e      	ldr	r3, [pc, #184]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	2238      	movs	r2, #56	@ 0x38
 8005e30:	401a      	ands	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d1ec      	bne.n	8005e16 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e3c:	4b27      	ldr	r3, [pc, #156]	@ (8005edc <HAL_RCC_ClockConfig+0x1f0>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2207      	movs	r2, #7
 8005e42:	4013      	ands	r3, r2
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d21e      	bcs.n	8005e88 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e4a:	4b24      	ldr	r3, [pc, #144]	@ (8005edc <HAL_RCC_ClockConfig+0x1f0>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2207      	movs	r2, #7
 8005e50:	4393      	bics	r3, r2
 8005e52:	0019      	movs	r1, r3
 8005e54:	4b21      	ldr	r3, [pc, #132]	@ (8005edc <HAL_RCC_ClockConfig+0x1f0>)
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e5c:	f7fd fd0e 	bl	800387c <HAL_GetTick>
 8005e60:	0003      	movs	r3, r0
 8005e62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005e64:	e009      	b.n	8005e7a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e66:	f7fd fd09 	bl	800387c <HAL_GetTick>
 8005e6a:	0002      	movs	r2, r0
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	4a1b      	ldr	r2, [pc, #108]	@ (8005ee0 <HAL_RCC_ClockConfig+0x1f4>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e02c      	b.n	8005ed4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005e7a:	4b18      	ldr	r3, [pc, #96]	@ (8005edc <HAL_RCC_ClockConfig+0x1f0>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2207      	movs	r2, #7
 8005e80:	4013      	ands	r3, r2
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d1ee      	bne.n	8005e66 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	4013      	ands	r3, r2
 8005e90:	d009      	beq.n	8005ea6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005e92:	4b14      	ldr	r3, [pc, #80]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	4a15      	ldr	r2, [pc, #84]	@ (8005eec <HAL_RCC_ClockConfig+0x200>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	0019      	movs	r1, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	4b10      	ldr	r3, [pc, #64]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005ea6:	f000 f829 	bl	8005efc <HAL_RCC_GetSysClockFreq>
 8005eaa:	0001      	movs	r1, r0
 8005eac:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	0a1b      	lsrs	r3, r3, #8
 8005eb2:	220f      	movs	r2, #15
 8005eb4:	401a      	ands	r2, r3
 8005eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef0 <HAL_RCC_ClockConfig+0x204>)
 8005eb8:	0092      	lsls	r2, r2, #2
 8005eba:	58d3      	ldr	r3, [r2, r3]
 8005ebc:	221f      	movs	r2, #31
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	000a      	movs	r2, r1
 8005ec2:	40da      	lsrs	r2, r3
 8005ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef4 <HAL_RCC_ClockConfig+0x208>)
 8005ec6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef8 <HAL_RCC_ClockConfig+0x20c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	0018      	movs	r0, r3
 8005ece:	f7fd fc79 	bl	80037c4 <HAL_InitTick>
 8005ed2:	0003      	movs	r3, r0
}
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	b004      	add	sp, #16
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	40022000 	.word	0x40022000
 8005ee0:	00001388 	.word	0x00001388
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	fffff0ff 	.word	0xfffff0ff
 8005eec:	ffff8fff 	.word	0xffff8fff
 8005ef0:	080093d8 	.word	0x080093d8
 8005ef4:	2000008c 	.word	0x2000008c
 8005ef8:	20000090 	.word	0x20000090

08005efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f02:	4b3c      	ldr	r3, [pc, #240]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	2238      	movs	r2, #56	@ 0x38
 8005f08:	4013      	ands	r3, r2
 8005f0a:	d10f      	bne.n	8005f2c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005f0c:	4b39      	ldr	r3, [pc, #228]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	0adb      	lsrs	r3, r3, #11
 8005f12:	2207      	movs	r2, #7
 8005f14:	4013      	ands	r3, r2
 8005f16:	2201      	movs	r2, #1
 8005f18:	409a      	lsls	r2, r3
 8005f1a:	0013      	movs	r3, r2
 8005f1c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005f1e:	6839      	ldr	r1, [r7, #0]
 8005f20:	4835      	ldr	r0, [pc, #212]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f22:	f7fa f8ef 	bl	8000104 <__udivsi3>
 8005f26:	0003      	movs	r3, r0
 8005f28:	613b      	str	r3, [r7, #16]
 8005f2a:	e05d      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f2c:	4b31      	ldr	r3, [pc, #196]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	2238      	movs	r2, #56	@ 0x38
 8005f32:	4013      	ands	r3, r2
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d102      	bne.n	8005f3e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f38:	4b2f      	ldr	r3, [pc, #188]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	e054      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	2238      	movs	r2, #56	@ 0x38
 8005f44:	4013      	ands	r3, r2
 8005f46:	2b10      	cmp	r3, #16
 8005f48:	d138      	bne.n	8005fbc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	2203      	movs	r2, #3
 8005f50:	4013      	ands	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f54:	4b27      	ldr	r3, [pc, #156]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	091b      	lsrs	r3, r3, #4
 8005f5a:	2207      	movs	r2, #7
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	3301      	adds	r3, #1
 8005f60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d10d      	bne.n	8005f84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	4823      	ldr	r0, [pc, #140]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f6c:	f7fa f8ca 	bl	8000104 <__udivsi3>
 8005f70:	0003      	movs	r3, r0
 8005f72:	0019      	movs	r1, r3
 8005f74:	4b1f      	ldr	r3, [pc, #124]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	0a1b      	lsrs	r3, r3, #8
 8005f7a:	227f      	movs	r2, #127	@ 0x7f
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	434b      	muls	r3, r1
 8005f80:	617b      	str	r3, [r7, #20]
        break;
 8005f82:	e00d      	b.n	8005fa0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005f84:	68b9      	ldr	r1, [r7, #8]
 8005f86:	481c      	ldr	r0, [pc, #112]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f88:	f7fa f8bc 	bl	8000104 <__udivsi3>
 8005f8c:	0003      	movs	r3, r0
 8005f8e:	0019      	movs	r1, r3
 8005f90:	4b18      	ldr	r3, [pc, #96]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	0a1b      	lsrs	r3, r3, #8
 8005f96:	227f      	movs	r2, #127	@ 0x7f
 8005f98:	4013      	ands	r3, r2
 8005f9a:	434b      	muls	r3, r1
 8005f9c:	617b      	str	r3, [r7, #20]
        break;
 8005f9e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005fa0:	4b14      	ldr	r3, [pc, #80]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	0f5b      	lsrs	r3, r3, #29
 8005fa6:	2207      	movs	r2, #7
 8005fa8:	4013      	ands	r3, r2
 8005faa:	3301      	adds	r3, #1
 8005fac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	6978      	ldr	r0, [r7, #20]
 8005fb2:	f7fa f8a7 	bl	8000104 <__udivsi3>
 8005fb6:	0003      	movs	r3, r0
 8005fb8:	613b      	str	r3, [r7, #16]
 8005fba:	e015      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	2238      	movs	r2, #56	@ 0x38
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d103      	bne.n	8005fd0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005fc8:	2380      	movs	r3, #128	@ 0x80
 8005fca:	021b      	lsls	r3, r3, #8
 8005fcc:	613b      	str	r3, [r7, #16]
 8005fce:	e00b      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005fd0:	4b08      	ldr	r3, [pc, #32]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	2238      	movs	r2, #56	@ 0x38
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	2b18      	cmp	r3, #24
 8005fda:	d103      	bne.n	8005fe4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005fdc:	23fa      	movs	r3, #250	@ 0xfa
 8005fde:	01db      	lsls	r3, r3, #7
 8005fe0:	613b      	str	r3, [r7, #16]
 8005fe2:	e001      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005fe8:	693b      	ldr	r3, [r7, #16]
}
 8005fea:	0018      	movs	r0, r3
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b006      	add	sp, #24
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	46c0      	nop			@ (mov r8, r8)
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	00f42400 	.word	0x00f42400

08005ffc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006000:	4b02      	ldr	r3, [pc, #8]	@ (800600c <HAL_RCC_GetHCLKFreq+0x10>)
 8006002:	681b      	ldr	r3, [r3, #0]
}
 8006004:	0018      	movs	r0, r3
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	46c0      	nop			@ (mov r8, r8)
 800600c:	2000008c 	.word	0x2000008c

08006010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006010:	b5b0      	push	{r4, r5, r7, lr}
 8006012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006014:	f7ff fff2 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 8006018:	0004      	movs	r4, r0
 800601a:	f7ff fb41 	bl	80056a0 <LL_RCC_GetAPB1Prescaler>
 800601e:	0003      	movs	r3, r0
 8006020:	0b1a      	lsrs	r2, r3, #12
 8006022:	4b05      	ldr	r3, [pc, #20]	@ (8006038 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006024:	0092      	lsls	r2, r2, #2
 8006026:	58d3      	ldr	r3, [r2, r3]
 8006028:	221f      	movs	r2, #31
 800602a:	4013      	ands	r3, r2
 800602c:	40dc      	lsrs	r4, r3
 800602e:	0023      	movs	r3, r4
}
 8006030:	0018      	movs	r0, r3
 8006032:	46bd      	mov	sp, r7
 8006034:	bdb0      	pop	{r4, r5, r7, pc}
 8006036:	46c0      	nop			@ (mov r8, r8)
 8006038:	08009418 	.word	0x08009418

0800603c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006044:	2313      	movs	r3, #19
 8006046:	18fb      	adds	r3, r7, r3
 8006048:	2200      	movs	r2, #0
 800604a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800604c:	2312      	movs	r3, #18
 800604e:	18fb      	adds	r3, r7, r3
 8006050:	2200      	movs	r2, #0
 8006052:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	2380      	movs	r3, #128	@ 0x80
 800605a:	029b      	lsls	r3, r3, #10
 800605c:	4013      	ands	r3, r2
 800605e:	d100      	bne.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006060:	e0a3      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006062:	2011      	movs	r0, #17
 8006064:	183b      	adds	r3, r7, r0
 8006066:	2200      	movs	r2, #0
 8006068:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800606a:	4ba5      	ldr	r3, [pc, #660]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800606c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800606e:	2380      	movs	r3, #128	@ 0x80
 8006070:	055b      	lsls	r3, r3, #21
 8006072:	4013      	ands	r3, r2
 8006074:	d110      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006076:	4ba2      	ldr	r3, [pc, #648]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006078:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800607a:	4ba1      	ldr	r3, [pc, #644]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800607c:	2180      	movs	r1, #128	@ 0x80
 800607e:	0549      	lsls	r1, r1, #21
 8006080:	430a      	orrs	r2, r1
 8006082:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006084:	4b9e      	ldr	r3, [pc, #632]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006086:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006088:	2380      	movs	r3, #128	@ 0x80
 800608a:	055b      	lsls	r3, r3, #21
 800608c:	4013      	ands	r3, r2
 800608e:	60bb      	str	r3, [r7, #8]
 8006090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006092:	183b      	adds	r3, r7, r0
 8006094:	2201      	movs	r2, #1
 8006096:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006098:	4b9a      	ldr	r3, [pc, #616]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	4b99      	ldr	r3, [pc, #612]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800609e:	2180      	movs	r1, #128	@ 0x80
 80060a0:	0049      	lsls	r1, r1, #1
 80060a2:	430a      	orrs	r2, r1
 80060a4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060a6:	f7fd fbe9 	bl	800387c <HAL_GetTick>
 80060aa:	0003      	movs	r3, r0
 80060ac:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060ae:	e00b      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060b0:	f7fd fbe4 	bl	800387c <HAL_GetTick>
 80060b4:	0002      	movs	r2, r0
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d904      	bls.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80060be:	2313      	movs	r3, #19
 80060c0:	18fb      	adds	r3, r7, r3
 80060c2:	2203      	movs	r2, #3
 80060c4:	701a      	strb	r2, [r3, #0]
        break;
 80060c6:	e005      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060c8:	4b8e      	ldr	r3, [pc, #568]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	2380      	movs	r3, #128	@ 0x80
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	4013      	ands	r3, r2
 80060d2:	d0ed      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80060d4:	2313      	movs	r3, #19
 80060d6:	18fb      	adds	r3, r7, r3
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d154      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060de:	4b88      	ldr	r3, [pc, #544]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060e2:	23c0      	movs	r3, #192	@ 0xc0
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4013      	ands	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d019      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d014      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060fa:	4b81      	ldr	r3, [pc, #516]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060fe:	4a82      	ldr	r2, [pc, #520]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006100:	4013      	ands	r3, r2
 8006102:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006104:	4b7e      	ldr	r3, [pc, #504]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006106:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006108:	4b7d      	ldr	r3, [pc, #500]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800610a:	2180      	movs	r1, #128	@ 0x80
 800610c:	0249      	lsls	r1, r1, #9
 800610e:	430a      	orrs	r2, r1
 8006110:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006112:	4b7b      	ldr	r3, [pc, #492]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006114:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006116:	4b7a      	ldr	r3, [pc, #488]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006118:	497c      	ldr	r1, [pc, #496]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800611a:	400a      	ands	r2, r1
 800611c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800611e:	4b78      	ldr	r3, [pc, #480]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	2201      	movs	r2, #1
 8006128:	4013      	ands	r3, r2
 800612a:	d016      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800612c:	f7fd fba6 	bl	800387c <HAL_GetTick>
 8006130:	0003      	movs	r3, r0
 8006132:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006134:	e00c      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006136:	f7fd fba1 	bl	800387c <HAL_GetTick>
 800613a:	0002      	movs	r2, r0
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	4a73      	ldr	r2, [pc, #460]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d904      	bls.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006146:	2313      	movs	r3, #19
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	2203      	movs	r2, #3
 800614c:	701a      	strb	r2, [r3, #0]
            break;
 800614e:	e004      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006150:	4b6b      	ldr	r3, [pc, #428]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006154:	2202      	movs	r2, #2
 8006156:	4013      	ands	r3, r2
 8006158:	d0ed      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800615a:	2313      	movs	r3, #19
 800615c:	18fb      	adds	r3, r7, r3
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006164:	4b66      	ldr	r3, [pc, #408]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006168:	4a67      	ldr	r2, [pc, #412]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800616a:	4013      	ands	r3, r2
 800616c:	0019      	movs	r1, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006172:	4b63      	ldr	r3, [pc, #396]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006174:	430a      	orrs	r2, r1
 8006176:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006178:	e00c      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800617a:	2312      	movs	r3, #18
 800617c:	18fb      	adds	r3, r7, r3
 800617e:	2213      	movs	r2, #19
 8006180:	18ba      	adds	r2, r7, r2
 8006182:	7812      	ldrb	r2, [r2, #0]
 8006184:	701a      	strb	r2, [r3, #0]
 8006186:	e005      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006188:	2312      	movs	r3, #18
 800618a:	18fb      	adds	r3, r7, r3
 800618c:	2213      	movs	r2, #19
 800618e:	18ba      	adds	r2, r7, r2
 8006190:	7812      	ldrb	r2, [r2, #0]
 8006192:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006194:	2311      	movs	r3, #17
 8006196:	18fb      	adds	r3, r7, r3
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d105      	bne.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800619e:	4b58      	ldr	r3, [pc, #352]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061a2:	4b57      	ldr	r3, [pc, #348]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061a4:	495b      	ldr	r1, [pc, #364]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80061a6:	400a      	ands	r2, r1
 80061a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2201      	movs	r2, #1
 80061b0:	4013      	ands	r3, r2
 80061b2:	d009      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061b4:	4b52      	ldr	r3, [pc, #328]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b8:	2203      	movs	r2, #3
 80061ba:	4393      	bics	r3, r2
 80061bc:	0019      	movs	r1, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	4b4f      	ldr	r3, [pc, #316]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061c4:	430a      	orrs	r2, r1
 80061c6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2210      	movs	r2, #16
 80061ce:	4013      	ands	r3, r2
 80061d0:	d009      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061d6:	4a50      	ldr	r2, [pc, #320]	@ (8006318 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80061d8:	4013      	ands	r3, r2
 80061da:	0019      	movs	r1, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	4b47      	ldr	r3, [pc, #284]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061e2:	430a      	orrs	r2, r1
 80061e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	2380      	movs	r3, #128	@ 0x80
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4013      	ands	r3, r2
 80061f0:	d009      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061f2:	4b43      	ldr	r3, [pc, #268]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f6:	4a49      	ldr	r2, [pc, #292]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	0019      	movs	r1, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	695a      	ldr	r2, [r3, #20]
 8006200:	4b3f      	ldr	r3, [pc, #252]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006202:	430a      	orrs	r2, r1
 8006204:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	2380      	movs	r3, #128	@ 0x80
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	4013      	ands	r3, r2
 8006210:	d009      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006212:	4b3b      	ldr	r3, [pc, #236]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006216:	4a42      	ldr	r2, [pc, #264]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006218:	4013      	ands	r3, r2
 800621a:	0019      	movs	r1, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	699a      	ldr	r2, [r3, #24]
 8006220:	4b37      	ldr	r3, [pc, #220]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006222:	430a      	orrs	r2, r1
 8006224:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2220      	movs	r2, #32
 800622c:	4013      	ands	r3, r2
 800622e:	d009      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006230:	4b33      	ldr	r3, [pc, #204]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006234:	4a3b      	ldr	r2, [pc, #236]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006236:	4013      	ands	r3, r2
 8006238:	0019      	movs	r1, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	4b30      	ldr	r3, [pc, #192]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006240:	430a      	orrs	r2, r1
 8006242:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	2380      	movs	r3, #128	@ 0x80
 800624a:	01db      	lsls	r3, r3, #7
 800624c:	4013      	ands	r3, r2
 800624e:	d015      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006250:	4b2b      	ldr	r3, [pc, #172]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	0899      	lsrs	r1, r3, #2
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	69da      	ldr	r2, [r3, #28]
 800625c:	4b28      	ldr	r3, [pc, #160]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800625e:	430a      	orrs	r2, r1
 8006260:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	69da      	ldr	r2, [r3, #28]
 8006266:	2380      	movs	r3, #128	@ 0x80
 8006268:	05db      	lsls	r3, r3, #23
 800626a:	429a      	cmp	r2, r3
 800626c:	d106      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800626e:	4b24      	ldr	r3, [pc, #144]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	4b23      	ldr	r3, [pc, #140]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006274:	2180      	movs	r1, #128	@ 0x80
 8006276:	0249      	lsls	r1, r1, #9
 8006278:	430a      	orrs	r2, r1
 800627a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	2380      	movs	r3, #128	@ 0x80
 8006282:	039b      	lsls	r3, r3, #14
 8006284:	4013      	ands	r3, r2
 8006286:	d016      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006288:	4b1d      	ldr	r3, [pc, #116]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800628a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800628c:	4a26      	ldr	r2, [pc, #152]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800628e:	4013      	ands	r3, r2
 8006290:	0019      	movs	r1, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1a      	ldr	r2, [r3, #32]
 8006296:	4b1a      	ldr	r3, [pc, #104]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006298:	430a      	orrs	r2, r1
 800629a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1a      	ldr	r2, [r3, #32]
 80062a0:	2380      	movs	r3, #128	@ 0x80
 80062a2:	03db      	lsls	r3, r3, #15
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d106      	bne.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80062a8:	4b15      	ldr	r3, [pc, #84]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	4b14      	ldr	r3, [pc, #80]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062ae:	2180      	movs	r1, #128	@ 0x80
 80062b0:	0449      	lsls	r1, r1, #17
 80062b2:	430a      	orrs	r2, r1
 80062b4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	2380      	movs	r3, #128	@ 0x80
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	4013      	ands	r3, r2
 80062c0:	d016      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80062c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062c6:	4a19      	ldr	r2, [pc, #100]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	0019      	movs	r1, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062d2:	430a      	orrs	r2, r1
 80062d4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691a      	ldr	r2, [r3, #16]
 80062da:	2380      	movs	r3, #128	@ 0x80
 80062dc:	01db      	lsls	r3, r3, #7
 80062de:	429a      	cmp	r2, r3
 80062e0:	d106      	bne.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80062e2:	4b07      	ldr	r3, [pc, #28]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	4b06      	ldr	r3, [pc, #24]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062e8:	2180      	movs	r1, #128	@ 0x80
 80062ea:	0249      	lsls	r1, r1, #9
 80062ec:	430a      	orrs	r2, r1
 80062ee:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80062f0:	2312      	movs	r3, #18
 80062f2:	18fb      	adds	r3, r7, r3
 80062f4:	781b      	ldrb	r3, [r3, #0]
}
 80062f6:	0018      	movs	r0, r3
 80062f8:	46bd      	mov	sp, r7
 80062fa:	b006      	add	sp, #24
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	46c0      	nop			@ (mov r8, r8)
 8006300:	40021000 	.word	0x40021000
 8006304:	40007000 	.word	0x40007000
 8006308:	fffffcff 	.word	0xfffffcff
 800630c:	fffeffff 	.word	0xfffeffff
 8006310:	00001388 	.word	0x00001388
 8006314:	efffffff 	.word	0xefffffff
 8006318:	fffff3ff 	.word	0xfffff3ff
 800631c:	fff3ffff 	.word	0xfff3ffff
 8006320:	ffcfffff 	.word	0xffcfffff
 8006324:	ffffcfff 	.word	0xffffcfff
 8006328:	ffbfffff 	.word	0xffbfffff
 800632c:	ffff3fff 	.word	0xffff3fff

08006330 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	2380      	movs	r3, #128	@ 0x80
 8006340:	029b      	lsls	r3, r3, #10
 8006342:	429a      	cmp	r2, r3
 8006344:	d136      	bne.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006346:	4bcd      	ldr	r3, [pc, #820]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006348:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800634a:	23c0      	movs	r3, #192	@ 0xc0
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4013      	ands	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006352:	4bca      	ldr	r3, [pc, #808]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006356:	2202      	movs	r2, #2
 8006358:	4013      	ands	r3, r2
 800635a:	2b02      	cmp	r3, #2
 800635c:	d108      	bne.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	2380      	movs	r3, #128	@ 0x80
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	429a      	cmp	r2, r3
 8006366:	d103      	bne.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8006368:	2380      	movs	r3, #128	@ 0x80
 800636a:	021b      	lsls	r3, r3, #8
 800636c:	617b      	str	r3, [r7, #20]
 800636e:	e26b      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006370:	4bc2      	ldr	r3, [pc, #776]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006374:	2202      	movs	r2, #2
 8006376:	4013      	ands	r3, r2
 8006378:	2b02      	cmp	r3, #2
 800637a:	d108      	bne.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	2380      	movs	r3, #128	@ 0x80
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	429a      	cmp	r2, r3
 8006384:	d103      	bne.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8006386:	23fa      	movs	r3, #250	@ 0xfa
 8006388:	01db      	lsls	r3, r3, #7
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	e25c      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800638e:	4bbb      	ldr	r3, [pc, #748]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	2380      	movs	r3, #128	@ 0x80
 8006394:	029b      	lsls	r3, r3, #10
 8006396:	401a      	ands	r2, r3
 8006398:	2380      	movs	r3, #128	@ 0x80
 800639a:	029b      	lsls	r3, r3, #10
 800639c:	429a      	cmp	r2, r3
 800639e:	d000      	beq.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80063a0:	e252      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	23c0      	movs	r3, #192	@ 0xc0
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d000      	beq.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 80063ac:	e24c      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    {
      frequency = HSE_VALUE / 32U;
 80063ae:	4bb4      	ldr	r3, [pc, #720]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80063b0:	617b      	str	r3, [r7, #20]
 80063b2:	e249      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 80063b4:	4bb1      	ldr	r3, [pc, #708]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	2203      	movs	r2, #3
 80063ba:	4013      	ands	r3, r2
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d102      	bne.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 80063c0:	4bb0      	ldr	r3, [pc, #704]	@ (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80063c2:	613b      	str	r3, [r7, #16]
 80063c4:	e00a      	b.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 80063c6:	4bad      	ldr	r3, [pc, #692]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	2203      	movs	r2, #3
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	d102      	bne.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 80063d2:	4bac      	ldr	r3, [pc, #688]	@ (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80063d4:	613b      	str	r3, [r7, #16]
 80063d6:	e001      	b.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80063dc:	4ba7      	ldr	r3, [pc, #668]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	091b      	lsrs	r3, r3, #4
 80063e2:	2207      	movs	r2, #7
 80063e4:	4013      	ands	r3, r2
 80063e6:	3301      	adds	r3, #1
 80063e8:	0019      	movs	r1, r3
 80063ea:	6938      	ldr	r0, [r7, #16]
 80063ec:	f7f9 fe8a 	bl	8000104 <__udivsi3>
 80063f0:	0003      	movs	r3, r0
 80063f2:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	2380      	movs	r3, #128	@ 0x80
 80063f8:	039b      	lsls	r3, r3, #14
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d100      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 80063fe:	e1e3      	b.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	2380      	movs	r3, #128	@ 0x80
 8006404:	039b      	lsls	r3, r3, #14
 8006406:	429a      	cmp	r2, r3
 8006408:	d900      	bls.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800640a:	e20c      	b.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	2380      	movs	r3, #128	@ 0x80
 8006410:	01db      	lsls	r3, r3, #7
 8006412:	429a      	cmp	r2, r3
 8006414:	d100      	bne.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8006416:	e0a5      	b.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	2380      	movs	r3, #128	@ 0x80
 800641c:	01db      	lsls	r3, r3, #7
 800641e:	429a      	cmp	r2, r3
 8006420:	d900      	bls.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006422:	e200      	b.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	2380      	movs	r3, #128	@ 0x80
 8006428:	011b      	lsls	r3, r3, #4
 800642a:	429a      	cmp	r2, r3
 800642c:	d100      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800642e:	e0fc      	b.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	2380      	movs	r3, #128	@ 0x80
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	429a      	cmp	r2, r3
 8006438:	d900      	bls.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800643a:	e1f4      	b.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	2380      	movs	r3, #128	@ 0x80
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	429a      	cmp	r2, r3
 8006444:	d100      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8006446:	e181      	b.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	2380      	movs	r3, #128	@ 0x80
 800644c:	00db      	lsls	r3, r3, #3
 800644e:	429a      	cmp	r2, r3
 8006450:	d900      	bls.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006452:	e1e8      	b.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	2380      	movs	r3, #128	@ 0x80
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	429a      	cmp	r2, r3
 800645c:	d100      	bne.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800645e:	e135      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	2380      	movs	r3, #128	@ 0x80
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	429a      	cmp	r2, r3
 8006468:	d900      	bls.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800646a:	e1dc      	b.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b20      	cmp	r3, #32
 8006470:	d100      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8006472:	e0af      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b20      	cmp	r3, #32
 8006478:	d900      	bls.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800647a:	e1d4      	b.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d003      	beq.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b10      	cmp	r3, #16
 8006486:	d033      	beq.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8006488:	e1cd      	b.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800648a:	4b7c      	ldr	r3, [pc, #496]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800648c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800648e:	2203      	movs	r2, #3
 8006490:	4013      	ands	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d104      	bne.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
          frequency = HAL_RCC_GetPCLK1Freq();
 800649a:	f7ff fdb9 	bl	8006010 <HAL_RCC_GetPCLK1Freq>
 800649e:	0003      	movs	r3, r0
 80064a0:	617b      	str	r3, [r7, #20]
        break;
 80064a2:	e1c2      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d104      	bne.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          frequency = HAL_RCC_GetSysClockFreq();
 80064aa:	f7ff fd27 	bl	8005efc <HAL_RCC_GetSysClockFreq>
 80064ae:	0003      	movs	r3, r0
 80064b0:	617b      	str	r3, [r7, #20]
        break;
 80064b2:	e1ba      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80064b4:	4b71      	ldr	r3, [pc, #452]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	2380      	movs	r3, #128	@ 0x80
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	401a      	ands	r2, r3
 80064be:	2380      	movs	r3, #128	@ 0x80
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d105      	bne.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d102      	bne.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = HSI_VALUE;
 80064cc:	4b6d      	ldr	r3, [pc, #436]	@ (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80064ce:	617b      	str	r3, [r7, #20]
        break;
 80064d0:	e1ab      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80064d2:	4b6a      	ldr	r3, [pc, #424]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80064d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d6:	2202      	movs	r2, #2
 80064d8:	4013      	ands	r3, r2
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d000      	beq.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 80064de:	e1a4      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d000      	beq.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80064e6:	e1a0      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          frequency = LSE_VALUE;
 80064e8:	2380      	movs	r3, #128	@ 0x80
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	617b      	str	r3, [r7, #20]
        break;
 80064ee:	e19c      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80064f0:	4b62      	ldr	r3, [pc, #392]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80064f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064f4:	23c0      	movs	r3, #192	@ 0xc0
 80064f6:	011b      	lsls	r3, r3, #4
 80064f8:	4013      	ands	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d104      	bne.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006502:	f7ff fd85 	bl	8006010 <HAL_RCC_GetPCLK1Freq>
 8006506:	0003      	movs	r3, r0
 8006508:	617b      	str	r3, [r7, #20]
        break;
 800650a:	e190      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	2380      	movs	r3, #128	@ 0x80
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	429a      	cmp	r2, r3
 8006514:	d104      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006516:	f7ff fcf1 	bl	8005efc <HAL_RCC_GetSysClockFreq>
 800651a:	0003      	movs	r3, r0
 800651c:	617b      	str	r3, [r7, #20]
        break;
 800651e:	e186      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006520:	4b56      	ldr	r3, [pc, #344]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	2380      	movs	r3, #128	@ 0x80
 8006526:	00db      	lsls	r3, r3, #3
 8006528:	401a      	ands	r2, r3
 800652a:	2380      	movs	r3, #128	@ 0x80
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	429a      	cmp	r2, r3
 8006530:	d107      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	2380      	movs	r3, #128	@ 0x80
 8006536:	011b      	lsls	r3, r3, #4
 8006538:	429a      	cmp	r2, r3
 800653a:	d102      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = HSI_VALUE;
 800653c:	4b51      	ldr	r3, [pc, #324]	@ (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800653e:	617b      	str	r3, [r7, #20]
        break;
 8006540:	e175      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006542:	4b4e      	ldr	r3, [pc, #312]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006546:	2202      	movs	r2, #2
 8006548:	4013      	ands	r3, r2
 800654a:	2b02      	cmp	r3, #2
 800654c:	d000      	beq.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800654e:	e16e      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	23c0      	movs	r3, #192	@ 0xc0
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	429a      	cmp	r2, r3
 8006558:	d000      	beq.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800655a:	e168      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          frequency = LSE_VALUE;
 800655c:	2380      	movs	r3, #128	@ 0x80
 800655e:	021b      	lsls	r3, r3, #8
 8006560:	617b      	str	r3, [r7, #20]
        break;
 8006562:	e164      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006564:	4b45      	ldr	r3, [pc, #276]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006568:	0f9b      	lsrs	r3, r3, #30
 800656a:	079b      	lsls	r3, r3, #30
 800656c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006574:	f7ff fcc2 	bl	8005efc <HAL_RCC_GetSysClockFreq>
 8006578:	0003      	movs	r3, r0
 800657a:	617b      	str	r3, [r7, #20]
        break;
 800657c:	e159      	b.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	2380      	movs	r3, #128	@ 0x80
 8006582:	061b      	lsls	r3, r3, #24
 8006584:	429a      	cmp	r2, r3
 8006586:	d102      	bne.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          frequency = HSI_VALUE;
 8006588:	4b3e      	ldr	r3, [pc, #248]	@ (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800658a:	617b      	str	r3, [r7, #20]
        break;
 800658c:	e151      	b.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	2380      	movs	r3, #128	@ 0x80
 8006592:	05db      	lsls	r3, r3, #23
 8006594:	429a      	cmp	r2, r3
 8006596:	d000      	beq.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006598:	e14b      	b.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800659a:	4b38      	ldr	r3, [pc, #224]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	2380      	movs	r3, #128	@ 0x80
 80065a0:	025b      	lsls	r3, r3, #9
 80065a2:	4013      	ands	r3, r2
 80065a4:	d100      	bne.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 80065a6:	e144      	b.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80065a8:	4b34      	ldr	r3, [pc, #208]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	0a1b      	lsrs	r3, r3, #8
 80065ae:	227f      	movs	r2, #127	@ 0x7f
 80065b0:	4013      	ands	r3, r2
 80065b2:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	435a      	muls	r2, r3
 80065ba:	4b30      	ldr	r3, [pc, #192]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	0c5b      	lsrs	r3, r3, #17
 80065c0:	211f      	movs	r1, #31
 80065c2:	400b      	ands	r3, r1
 80065c4:	3301      	adds	r3, #1
 80065c6:	0019      	movs	r1, r3
 80065c8:	0010      	movs	r0, r2
 80065ca:	f7f9 fd9b 	bl	8000104 <__udivsi3>
 80065ce:	0003      	movs	r3, r0
 80065d0:	617b      	str	r3, [r7, #20]
        break;
 80065d2:	e12e      	b.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80065d4:	4b29      	ldr	r3, [pc, #164]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80065d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80065d8:	23c0      	movs	r3, #192	@ 0xc0
 80065da:	019b      	lsls	r3, r3, #6
 80065dc:	4013      	ands	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d104      	bne.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065e6:	f7ff fd13 	bl	8006010 <HAL_RCC_GetPCLK1Freq>
 80065ea:	0003      	movs	r3, r0
 80065ec:	617b      	str	r3, [r7, #20]
        break;
 80065ee:	e122      	b.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	2380      	movs	r3, #128	@ 0x80
 80065f4:	015b      	lsls	r3, r3, #5
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d104      	bne.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
          frequency = HAL_RCC_GetSysClockFreq();
 80065fa:	f7ff fc7f 	bl	8005efc <HAL_RCC_GetSysClockFreq>
 80065fe:	0003      	movs	r3, r0
 8006600:	617b      	str	r3, [r7, #20]
        break;
 8006602:	e118      	b.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006604:	4b1d      	ldr	r3, [pc, #116]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	2380      	movs	r3, #128	@ 0x80
 800660a:	00db      	lsls	r3, r3, #3
 800660c:	401a      	ands	r2, r3
 800660e:	2380      	movs	r3, #128	@ 0x80
 8006610:	00db      	lsls	r3, r3, #3
 8006612:	429a      	cmp	r2, r3
 8006614:	d000      	beq.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006616:	e10e      	b.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	2380      	movs	r3, #128	@ 0x80
 800661c:	019b      	lsls	r3, r3, #6
 800661e:	429a      	cmp	r2, r3
 8006620:	d000      	beq.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8006622:	e108      	b.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          frequency = HSI_VALUE;
 8006624:	4b17      	ldr	r3, [pc, #92]	@ (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006626:	617b      	str	r3, [r7, #20]
        break;
 8006628:	e105      	b.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 800662a:	4b14      	ldr	r3, [pc, #80]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800662c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800662e:	23c0      	movs	r3, #192	@ 0xc0
 8006630:	021b      	lsls	r3, r3, #8
 8006632:	4013      	ands	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	2380      	movs	r3, #128	@ 0x80
 800663a:	01db      	lsls	r3, r3, #7
 800663c:	429a      	cmp	r2, r3
 800663e:	d123      	bne.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8006640:	4b0e      	ldr	r3, [pc, #56]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	2380      	movs	r3, #128	@ 0x80
 8006646:	025b      	lsls	r3, r3, #9
 8006648:	4013      	ands	r3, r2
 800664a:	d100      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800664c:	e0f5      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800664e:	4b0b      	ldr	r3, [pc, #44]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	0a1b      	lsrs	r3, r3, #8
 8006654:	227f      	movs	r2, #127	@ 0x7f
 8006656:	4013      	ands	r3, r2
 8006658:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	435a      	muls	r2, r3
 8006660:	4b06      	ldr	r3, [pc, #24]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	0c5b      	lsrs	r3, r3, #17
 8006666:	211f      	movs	r1, #31
 8006668:	400b      	ands	r3, r1
 800666a:	3301      	adds	r3, #1
 800666c:	0019      	movs	r1, r3
 800666e:	0010      	movs	r0, r2
 8006670:	f7f9 fd48 	bl	8000104 <__udivsi3>
 8006674:	0003      	movs	r3, r0
 8006676:	617b      	str	r3, [r7, #20]
        break;
 8006678:	e0df      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800667a:	46c0      	nop			@ (mov r8, r8)
 800667c:	40021000 	.word	0x40021000
 8006680:	0007a120 	.word	0x0007a120
 8006684:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d104      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          frequency = HAL_RCC_GetSysClockFreq();
 800668e:	f7ff fc35 	bl	8005efc <HAL_RCC_GetSysClockFreq>
 8006692:	0003      	movs	r3, r0
 8006694:	617b      	str	r3, [r7, #20]
        break;
 8006696:	e0d0      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8006698:	4b6e      	ldr	r3, [pc, #440]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	2380      	movs	r3, #128	@ 0x80
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	401a      	ands	r2, r3
 80066a2:	2380      	movs	r3, #128	@ 0x80
 80066a4:	00db      	lsls	r3, r3, #3
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d107      	bne.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	2380      	movs	r3, #128	@ 0x80
 80066ae:	021b      	lsls	r3, r3, #8
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d102      	bne.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
          frequency = HSI_VALUE;
 80066b4:	4b68      	ldr	r3, [pc, #416]	@ (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80066b6:	617b      	str	r3, [r7, #20]
        break;
 80066b8:	e0bf      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	23c0      	movs	r3, #192	@ 0xc0
 80066be:	021b      	lsls	r3, r3, #8
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d000      	beq.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80066c4:	e0b9      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 80066c6:	4b65      	ldr	r3, [pc, #404]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80066c8:	617b      	str	r3, [r7, #20]
        break;
 80066ca:	e0b6      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80066cc:	4b61      	ldr	r3, [pc, #388]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066d0:	23c0      	movs	r3, #192	@ 0xc0
 80066d2:	031b      	lsls	r3, r3, #12
 80066d4:	4013      	ands	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d104      	bne.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066de:	f7ff fc97 	bl	8006010 <HAL_RCC_GetPCLK1Freq>
 80066e2:	0003      	movs	r3, r0
 80066e4:	617b      	str	r3, [r7, #20]
        break;
 80066e6:	e0aa      	b.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80066e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ec:	2202      	movs	r2, #2
 80066ee:	4013      	ands	r3, r2
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d108      	bne.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	2380      	movs	r3, #128	@ 0x80
 80066f8:	02db      	lsls	r3, r3, #11
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d103      	bne.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = LSI_VALUE;
 80066fe:	23fa      	movs	r3, #250	@ 0xfa
 8006700:	01db      	lsls	r3, r3, #7
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	e021      	b.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006706:	4b53      	ldr	r3, [pc, #332]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	2380      	movs	r3, #128	@ 0x80
 800670c:	00db      	lsls	r3, r3, #3
 800670e:	401a      	ands	r2, r3
 8006710:	2380      	movs	r3, #128	@ 0x80
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	429a      	cmp	r2, r3
 8006716:	d107      	bne.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	2380      	movs	r3, #128	@ 0x80
 800671c:	031b      	lsls	r3, r3, #12
 800671e:	429a      	cmp	r2, r3
 8006720:	d102      	bne.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          frequency = HSI_VALUE;
 8006722:	4b4d      	ldr	r3, [pc, #308]	@ (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	e010      	b.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006728:	4b4a      	ldr	r3, [pc, #296]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800672a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800672c:	2202      	movs	r2, #2
 800672e:	4013      	ands	r3, r2
 8006730:	2b02      	cmp	r3, #2
 8006732:	d000      	beq.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 8006734:	e083      	b.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	23c0      	movs	r3, #192	@ 0xc0
 800673a:	031b      	lsls	r3, r3, #12
 800673c:	429a      	cmp	r2, r3
 800673e:	d000      	beq.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8006740:	e07d      	b.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
          frequency = LSE_VALUE;
 8006742:	2380      	movs	r3, #128	@ 0x80
 8006744:	021b      	lsls	r3, r3, #8
 8006746:	617b      	str	r3, [r7, #20]
        break;
 8006748:	e079      	b.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800674a:	e078      	b.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800674c:	4b41      	ldr	r3, [pc, #260]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800674e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006750:	23c0      	movs	r3, #192	@ 0xc0
 8006752:	039b      	lsls	r3, r3, #14
 8006754:	4013      	ands	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d104      	bne.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          frequency = HAL_RCC_GetPCLK1Freq();
 800675e:	f7ff fc57 	bl	8006010 <HAL_RCC_GetPCLK1Freq>
 8006762:	0003      	movs	r3, r0
 8006764:	617b      	str	r3, [r7, #20]
        break;
 8006766:	e06c      	b.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006768:	4b3a      	ldr	r3, [pc, #232]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800676a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800676c:	2202      	movs	r2, #2
 800676e:	4013      	ands	r3, r2
 8006770:	2b02      	cmp	r3, #2
 8006772:	d108      	bne.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	2380      	movs	r3, #128	@ 0x80
 8006778:	035b      	lsls	r3, r3, #13
 800677a:	429a      	cmp	r2, r3
 800677c:	d103      	bne.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          frequency = LSI_VALUE;
 800677e:	23fa      	movs	r3, #250	@ 0xfa
 8006780:	01db      	lsls	r3, r3, #7
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	e01f      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006786:	4b33      	ldr	r3, [pc, #204]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	2380      	movs	r3, #128	@ 0x80
 800678c:	00db      	lsls	r3, r3, #3
 800678e:	401a      	ands	r2, r3
 8006790:	2380      	movs	r3, #128	@ 0x80
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	429a      	cmp	r2, r3
 8006796:	d107      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	2380      	movs	r3, #128	@ 0x80
 800679c:	039b      	lsls	r3, r3, #14
 800679e:	429a      	cmp	r2, r3
 80067a0:	d102      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HSI_VALUE;
 80067a2:	4b2d      	ldr	r3, [pc, #180]	@ (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	e00e      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80067a8:	4b2a      	ldr	r3, [pc, #168]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ac:	2202      	movs	r2, #2
 80067ae:	4013      	ands	r3, r2
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d146      	bne.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	23c0      	movs	r3, #192	@ 0xc0
 80067b8:	039b      	lsls	r3, r3, #14
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d141      	bne.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          frequency = LSE_VALUE;
 80067be:	2380      	movs	r3, #128	@ 0x80
 80067c0:	021b      	lsls	r3, r3, #8
 80067c2:	617b      	str	r3, [r7, #20]
        break;
 80067c4:	e03d      	b.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 80067c6:	e03c      	b.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 80067c8:	4b22      	ldr	r3, [pc, #136]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067cc:	2380      	movs	r3, #128	@ 0x80
 80067ce:	03db      	lsls	r3, r3, #15
 80067d0:	4013      	ands	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	2380      	movs	r3, #128	@ 0x80
 80067d8:	03db      	lsls	r3, r3, #15
 80067da:	429a      	cmp	r2, r3
 80067dc:	d11b      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80067de:	4b1d      	ldr	r3, [pc, #116]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	2380      	movs	r3, #128	@ 0x80
 80067e4:	045b      	lsls	r3, r3, #17
 80067e6:	4013      	ands	r3, r2
 80067e8:	d02d      	beq.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80067ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	0a1b      	lsrs	r3, r3, #8
 80067f0:	227f      	movs	r2, #127	@ 0x7f
 80067f2:	4013      	ands	r3, r2
 80067f4:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	435a      	muls	r2, r3
 80067fc:	4b15      	ldr	r3, [pc, #84]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	0e5b      	lsrs	r3, r3, #25
 8006802:	2107      	movs	r1, #7
 8006804:	400b      	ands	r3, r1
 8006806:	3301      	adds	r3, #1
 8006808:	0019      	movs	r1, r3
 800680a:	0010      	movs	r0, r2
 800680c:	f7f9 fc7a 	bl	8000104 <__udivsi3>
 8006810:	0003      	movs	r3, r0
 8006812:	617b      	str	r3, [r7, #20]
        break;
 8006814:	e017      	b.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d114      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          frequency = HAL_RCC_GetPCLK1Freq();
 800681c:	f7ff fbf8 	bl	8006010 <HAL_RCC_GetPCLK1Freq>
 8006820:	0003      	movs	r3, r0
 8006822:	617b      	str	r3, [r7, #20]
        break;
 8006824:	e00f      	b.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        break;
 8006826:	46c0      	nop			@ (mov r8, r8)
 8006828:	e00e      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800682a:	46c0      	nop			@ (mov r8, r8)
 800682c:	e00c      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800682e:	46c0      	nop			@ (mov r8, r8)
 8006830:	e00a      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006832:	46c0      	nop			@ (mov r8, r8)
 8006834:	e008      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006836:	46c0      	nop			@ (mov r8, r8)
 8006838:	e006      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800683a:	46c0      	nop			@ (mov r8, r8)
 800683c:	e004      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800683e:	46c0      	nop			@ (mov r8, r8)
 8006840:	e002      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006842:	46c0      	nop			@ (mov r8, r8)
 8006844:	e000      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006846:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return (frequency);
 8006848:	697b      	ldr	r3, [r7, #20]
}
 800684a:	0018      	movs	r0, r3
 800684c:	46bd      	mov	sp, r7
 800684e:	b006      	add	sp, #24
 8006850:	bd80      	pop	{r7, pc}
 8006852:	46c0      	nop			@ (mov r8, r8)
 8006854:	40021000 	.word	0x40021000
 8006858:	00f42400 	.word	0x00f42400
 800685c:	00bb8000 	.word	0x00bb8000

08006860 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006860:	b5b0      	push	{r4, r5, r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006868:	230f      	movs	r3, #15
 800686a:	18fb      	adds	r3, r7, r3
 800686c:	2201      	movs	r2, #1
 800686e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d100      	bne.n	8006878 <HAL_RTC_Init+0x18>
 8006876:	e08c      	b.n	8006992 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2229      	movs	r2, #41	@ 0x29
 800687c:	5c9b      	ldrb	r3, [r3, r2]
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10b      	bne.n	800689c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2228      	movs	r2, #40	@ 0x28
 8006888:	2100      	movs	r1, #0
 800688a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2288      	movs	r2, #136	@ 0x88
 8006890:	0212      	lsls	r2, r2, #8
 8006892:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	0018      	movs	r0, r3
 8006898:	f7fc fd32 	bl	8003300 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2229      	movs	r2, #41	@ 0x29
 80068a0:	2102      	movs	r1, #2
 80068a2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	2210      	movs	r2, #16
 80068ac:	4013      	ands	r3, r2
 80068ae:	2b10      	cmp	r3, #16
 80068b0:	d062      	beq.n	8006978 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	22ca      	movs	r2, #202	@ 0xca
 80068b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2253      	movs	r2, #83	@ 0x53
 80068c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80068c2:	250f      	movs	r5, #15
 80068c4:	197c      	adds	r4, r7, r5
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	0018      	movs	r0, r3
 80068ca:	f000 fc27 	bl	800711c <RTC_EnterInitMode>
 80068ce:	0003      	movs	r3, r0
 80068d0:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80068d2:	0028      	movs	r0, r5
 80068d4:	183b      	adds	r3, r7, r0
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d12c      	bne.n	8006936 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699a      	ldr	r2, [r3, #24]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	492e      	ldr	r1, [pc, #184]	@ (80069a0 <HAL_RTC_Init+0x140>)
 80068e8:	400a      	ands	r2, r1
 80068ea:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6999      	ldr	r1, [r3, #24]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	6912      	ldr	r2, [r2, #16]
 8006912:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6919      	ldr	r1, [r3, #16]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	041a      	lsls	r2, r3, #16
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006928:	183c      	adds	r4, r7, r0
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	0018      	movs	r0, r3
 800692e:	f000 fc37 	bl	80071a0 <RTC_ExitInitMode>
 8006932:	0003      	movs	r3, r0
 8006934:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8006936:	230f      	movs	r3, #15
 8006938:	18fb      	adds	r3, r7, r3
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d116      	bne.n	800696e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699a      	ldr	r2, [r3, #24]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	00d2      	lsls	r2, r2, #3
 800694c:	08d2      	lsrs	r2, r2, #3
 800694e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6999      	ldr	r1, [r3, #24]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	431a      	orrs	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	22ff      	movs	r2, #255	@ 0xff
 8006974:	625a      	str	r2, [r3, #36]	@ 0x24
 8006976:	e003      	b.n	8006980 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006978:	230f      	movs	r3, #15
 800697a:	18fb      	adds	r3, r7, r3
 800697c:	2200      	movs	r2, #0
 800697e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8006980:	230f      	movs	r3, #15
 8006982:	18fb      	adds	r3, r7, r3
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d103      	bne.n	8006992 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2229      	movs	r2, #41	@ 0x29
 800698e:	2101      	movs	r1, #1
 8006990:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8006992:	230f      	movs	r3, #15
 8006994:	18fb      	adds	r3, r7, r3
 8006996:	781b      	ldrb	r3, [r3, #0]
}
 8006998:	0018      	movs	r0, r3
 800699a:	46bd      	mov	sp, r7
 800699c:	b004      	add	sp, #16
 800699e:	bdb0      	pop	{r4, r5, r7, pc}
 80069a0:	fb8fffbf 	.word	0xfb8fffbf

080069a4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80069a4:	b5b0      	push	{r4, r5, r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2228      	movs	r2, #40	@ 0x28
 80069b4:	5c9b      	ldrb	r3, [r3, r2]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d101      	bne.n	80069be <HAL_RTC_SetTime+0x1a>
 80069ba:	2302      	movs	r3, #2
 80069bc:	e092      	b.n	8006ae4 <HAL_RTC_SetTime+0x140>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2228      	movs	r2, #40	@ 0x28
 80069c2:	2101      	movs	r1, #1
 80069c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2229      	movs	r2, #41	@ 0x29
 80069ca:	2102      	movs	r1, #2
 80069cc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	22ca      	movs	r2, #202	@ 0xca
 80069d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2253      	movs	r2, #83	@ 0x53
 80069dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80069de:	2513      	movs	r5, #19
 80069e0:	197c      	adds	r4, r7, r5
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	0018      	movs	r0, r3
 80069e6:	f000 fb99 	bl	800711c <RTC_EnterInitMode>
 80069ea:	0003      	movs	r3, r0
 80069ec:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80069ee:	197b      	adds	r3, r7, r5
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d162      	bne.n	8006abc <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d125      	bne.n	8006a48 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	2240      	movs	r2, #64	@ 0x40
 8006a04:	4013      	ands	r3, r2
 8006a06:	d102      	bne.n	8006a0e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	0018      	movs	r0, r3
 8006a14:	f000 fc08 	bl	8007228 <RTC_ByteToBcd2>
 8006a18:	0003      	movs	r3, r0
 8006a1a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	785b      	ldrb	r3, [r3, #1]
 8006a20:	0018      	movs	r0, r3
 8006a22:	f000 fc01 	bl	8007228 <RTC_ByteToBcd2>
 8006a26:	0003      	movs	r3, r0
 8006a28:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a2a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	789b      	ldrb	r3, [r3, #2]
 8006a30:	0018      	movs	r0, r3
 8006a32:	f000 fbf9 	bl	8007228 <RTC_ByteToBcd2>
 8006a36:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a38:	0022      	movs	r2, r4
 8006a3a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	78db      	ldrb	r3, [r3, #3]
 8006a40:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a42:	4313      	orrs	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	e017      	b.n	8006a78 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	2240      	movs	r2, #64	@ 0x40
 8006a50:	4013      	ands	r3, r2
 8006a52:	d102      	bne.n	8006a5a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2200      	movs	r2, #0
 8006a58:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	785b      	ldrb	r3, [r3, #1]
 8006a64:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a66:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a6c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	78db      	ldrb	r3, [r3, #3]
 8006a72:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a74:	4313      	orrs	r3, r2
 8006a76:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	491b      	ldr	r1, [pc, #108]	@ (8006aec <HAL_RTC_SetTime+0x148>)
 8006a80:	400a      	ands	r2, r1
 8006a82:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4918      	ldr	r1, [pc, #96]	@ (8006af0 <HAL_RTC_SetTime+0x14c>)
 8006a90:	400a      	ands	r2, r1
 8006a92:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6999      	ldr	r1, [r3, #24]
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006aac:	2313      	movs	r3, #19
 8006aae:	18fc      	adds	r4, r7, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	f000 fb74 	bl	80071a0 <RTC_ExitInitMode>
 8006ab8:	0003      	movs	r3, r0
 8006aba:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	22ff      	movs	r2, #255	@ 0xff
 8006ac2:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8006ac4:	2313      	movs	r3, #19
 8006ac6:	18fb      	adds	r3, r7, r3
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d103      	bne.n	8006ad6 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2229      	movs	r2, #41	@ 0x29
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2228      	movs	r2, #40	@ 0x28
 8006ada:	2100      	movs	r1, #0
 8006adc:	5499      	strb	r1, [r3, r2]

  return status;
 8006ade:	2313      	movs	r3, #19
 8006ae0:	18fb      	adds	r3, r7, r3
 8006ae2:	781b      	ldrb	r3, [r3, #0]
}
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	b006      	add	sp, #24
 8006aea:	bdb0      	pop	{r4, r5, r7, pc}
 8006aec:	007f7f7f 	.word	0x007f7f7f
 8006af0:	fffbffff 	.word	0xfffbffff

08006af4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	045b      	lsls	r3, r3, #17
 8006b12:	0c5a      	lsrs	r2, r3, #17
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a22      	ldr	r2, [pc, #136]	@ (8006ba8 <HAL_RTC_GetTime+0xb4>)
 8006b20:	4013      	ands	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	0c1b      	lsrs	r3, r3, #16
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	223f      	movs	r2, #63	@ 0x3f
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	0a1b      	lsrs	r3, r3, #8
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	227f      	movs	r2, #127	@ 0x7f
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	227f      	movs	r2, #127	@ 0x7f
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	0d9b      	lsrs	r3, r3, #22
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2201      	movs	r2, #1
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d11a      	bne.n	8006b9e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f000 fb83 	bl	8007278 <RTC_Bcd2ToByte>
 8006b72:	0003      	movs	r3, r0
 8006b74:	001a      	movs	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	785b      	ldrb	r3, [r3, #1]
 8006b7e:	0018      	movs	r0, r3
 8006b80:	f000 fb7a 	bl	8007278 <RTC_Bcd2ToByte>
 8006b84:	0003      	movs	r3, r0
 8006b86:	001a      	movs	r2, r3
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	789b      	ldrb	r3, [r3, #2]
 8006b90:	0018      	movs	r0, r3
 8006b92:	f000 fb71 	bl	8007278 <RTC_Bcd2ToByte>
 8006b96:	0003      	movs	r3, r0
 8006b98:	001a      	movs	r2, r3
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	b006      	add	sp, #24
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	007f7f7f 	.word	0x007f7f7f

08006bac <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	4a21      	ldr	r2, [pc, #132]	@ (8006c44 <HAL_RTC_GetDate+0x98>)
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	0c1b      	lsrs	r3, r3, #16
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	0a1b      	lsrs	r3, r3, #8
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	221f      	movs	r2, #31
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	223f      	movs	r2, #63	@ 0x3f
 8006be4:	4013      	ands	r3, r2
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	0b5b      	lsrs	r3, r3, #13
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2207      	movs	r2, #7
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d11a      	bne.n	8006c38 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	78db      	ldrb	r3, [r3, #3]
 8006c06:	0018      	movs	r0, r3
 8006c08:	f000 fb36 	bl	8007278 <RTC_Bcd2ToByte>
 8006c0c:	0003      	movs	r3, r0
 8006c0e:	001a      	movs	r2, r3
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	785b      	ldrb	r3, [r3, #1]
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f000 fb2d 	bl	8007278 <RTC_Bcd2ToByte>
 8006c1e:	0003      	movs	r3, r0
 8006c20:	001a      	movs	r2, r3
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	789b      	ldrb	r3, [r3, #2]
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f000 fb24 	bl	8007278 <RTC_Bcd2ToByte>
 8006c30:	0003      	movs	r3, r0
 8006c32:	001a      	movs	r2, r3
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	b006      	add	sp, #24
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	46c0      	nop			@ (mov r8, r8)
 8006c44:	00ffff3f 	.word	0x00ffff3f

08006c48 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006c48:	b590      	push	{r4, r7, lr}
 8006c4a:	b089      	sub	sp, #36	@ 0x24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2228      	movs	r2, #40	@ 0x28
 8006c58:	5c9b      	ldrb	r3, [r3, r2]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_RTC_SetAlarm_IT+0x1a>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	e127      	b.n	8006eb2 <HAL_RTC_SetAlarm_IT+0x26a>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2228      	movs	r2, #40	@ 0x28
 8006c66:	2101      	movs	r1, #1
 8006c68:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2229      	movs	r2, #41	@ 0x29
 8006c6e:	2102      	movs	r1, #2
 8006c70:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d136      	bne.n	8006ce6 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	2240      	movs	r2, #64	@ 0x40
 8006c80:	4013      	ands	r3, r2
 8006c82:	d102      	bne.n	8006c8a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2200      	movs	r2, #0
 8006c88:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	0018      	movs	r0, r3
 8006c90:	f000 faca 	bl	8007228 <RTC_ByteToBcd2>
 8006c94:	0003      	movs	r3, r0
 8006c96:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	785b      	ldrb	r3, [r3, #1]
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	f000 fac3 	bl	8007228 <RTC_ByteToBcd2>
 8006ca2:	0003      	movs	r3, r0
 8006ca4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ca6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	789b      	ldrb	r3, [r3, #2]
 8006cac:	0018      	movs	r0, r3
 8006cae:	f000 fabb 	bl	8007228 <RTC_ByteToBcd2>
 8006cb2:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006cb4:	0022      	movs	r2, r4
 8006cb6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	78db      	ldrb	r3, [r3, #3]
 8006cbc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	5c9b      	ldrb	r3, [r3, r2]
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f000 faad 	bl	8007228 <RTC_ByteToBcd2>
 8006cce:	0003      	movs	r3, r0
 8006cd0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006cd2:	0022      	movs	r2, r4
 8006cd4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006cda:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	61fb      	str	r3, [r7, #28]
 8006ce4:	e022      	b.n	8006d2c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	2240      	movs	r2, #64	@ 0x40
 8006cee:	4013      	ands	r3, r2
 8006cf0:	d102      	bne.n	8006cf8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	785b      	ldrb	r3, [r3, #1]
 8006d02:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d04:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006d0a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	78db      	ldrb	r3, [r3, #3]
 8006d10:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006d12:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2120      	movs	r1, #32
 8006d18:	5c5b      	ldrb	r3, [r3, r1]
 8006d1a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d1c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d22:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	22ca      	movs	r2, #202	@ 0xca
 8006d3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2253      	movs	r2, #83	@ 0x53
 8006d46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d4c:	2380      	movs	r3, #128	@ 0x80
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d14c      	bne.n	8006dee <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699a      	ldr	r2, [r3, #24]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4957      	ldr	r1, [pc, #348]	@ (8006ebc <HAL_RTC_SetAlarm_IT+0x274>)
 8006d60:	400a      	ands	r2, r1
 8006d62:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2101      	movs	r1, #1
 8006d70:	430a      	orrs	r2, r1
 8006d72:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8006d74:	f7fc fd82 	bl	800387c <HAL_GetTick>
 8006d78:	0003      	movs	r3, r0
 8006d7a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006d7c:	e016      	b.n	8006dac <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006d7e:	f7fc fd7d 	bl	800387c <HAL_GetTick>
 8006d82:	0002      	movs	r2, r0
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	1ad2      	subs	r2, r2, r3
 8006d88:	23fa      	movs	r3, #250	@ 0xfa
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d90d      	bls.n	8006dac <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	22ff      	movs	r2, #255	@ 0xff
 8006d96:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2229      	movs	r2, #41	@ 0x29
 8006d9c:	2103      	movs	r1, #3
 8006d9e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2228      	movs	r2, #40	@ 0x28
 8006da4:	2100      	movs	r1, #0
 8006da6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e082      	b.n	8006eb2 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	2201      	movs	r2, #1
 8006db4:	4013      	ands	r3, r2
 8006db6:	d0e2      	beq.n	8006d7e <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	69fa      	ldr	r2, [r7, #28]
 8006dbe:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2180      	movs	r1, #128	@ 0x80
 8006dd4:	0049      	lsls	r1, r1, #1
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	699a      	ldr	r2, [r3, #24]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2180      	movs	r1, #128	@ 0x80
 8006de6:	0149      	lsls	r1, r1, #5
 8006de8:	430a      	orrs	r2, r1
 8006dea:	619a      	str	r2, [r3, #24]
 8006dec:	e04b      	b.n	8006e86 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	699a      	ldr	r2, [r3, #24]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4931      	ldr	r1, [pc, #196]	@ (8006ec0 <HAL_RTC_SetAlarm_IT+0x278>)
 8006dfa:	400a      	ands	r2, r1
 8006dfc:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2102      	movs	r1, #2
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8006e0e:	f7fc fd35 	bl	800387c <HAL_GetTick>
 8006e12:	0003      	movs	r3, r0
 8006e14:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006e16:	e016      	b.n	8006e46 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006e18:	f7fc fd30 	bl	800387c <HAL_GetTick>
 8006e1c:	0002      	movs	r2, r0
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	1ad2      	subs	r2, r2, r3
 8006e22:	23fa      	movs	r3, #250	@ 0xfa
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d90d      	bls.n	8006e46 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	22ff      	movs	r2, #255	@ 0xff
 8006e30:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2229      	movs	r2, #41	@ 0x29
 8006e36:	2103      	movs	r1, #3
 8006e38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2228      	movs	r2, #40	@ 0x28
 8006e3e:	2100      	movs	r1, #0
 8006e40:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e035      	b.n	8006eb2 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	4013      	ands	r3, r2
 8006e50:	d0e2      	beq.n	8006e18 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	69fa      	ldr	r2, [r7, #28]
 8006e58:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	699a      	ldr	r2, [r3, #24]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2180      	movs	r1, #128	@ 0x80
 8006e6e:	0089      	lsls	r1, r1, #2
 8006e70:	430a      	orrs	r2, r1
 8006e72:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	699a      	ldr	r2, [r3, #24]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2180      	movs	r1, #128	@ 0x80
 8006e80:	0189      	lsls	r1, r1, #6
 8006e82:	430a      	orrs	r2, r1
 8006e84:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006e86:	4a0f      	ldr	r2, [pc, #60]	@ (8006ec4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006e88:	2380      	movs	r3, #128	@ 0x80
 8006e8a:	58d3      	ldr	r3, [r2, r3]
 8006e8c:	490d      	ldr	r1, [pc, #52]	@ (8006ec4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006e8e:	2280      	movs	r2, #128	@ 0x80
 8006e90:	0312      	lsls	r2, r2, #12
 8006e92:	4313      	orrs	r3, r2
 8006e94:	2280      	movs	r2, #128	@ 0x80
 8006e96:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	22ff      	movs	r2, #255	@ 0xff
 8006e9e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2229      	movs	r2, #41	@ 0x29
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2228      	movs	r2, #40	@ 0x28
 8006eac:	2100      	movs	r1, #0
 8006eae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	b009      	add	sp, #36	@ 0x24
 8006eb8:	bd90      	pop	{r4, r7, pc}
 8006eba:	46c0      	nop			@ (mov r8, r8)
 8006ebc:	fffffeff 	.word	0xfffffeff
 8006ec0:	fffffdff 	.word	0xfffffdff
 8006ec4:	40021800 	.word	0x40021800

08006ec8 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
 8006ed4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	2380      	movs	r3, #128	@ 0x80
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d144      	bne.n	8006f6a <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2280      	movs	r2, #128	@ 0x80
 8006ee4:	0052      	lsls	r2, r2, #1
 8006ee6:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eee:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef6:	045b      	lsls	r3, r3, #17
 8006ef8:	0c5b      	lsrs	r3, r3, #17
 8006efa:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	0c1b      	lsrs	r3, r3, #16
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	223f      	movs	r2, #63	@ 0x3f
 8006f04:	4013      	ands	r3, r2
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	0a1b      	lsrs	r3, r3, #8
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	227f      	movs	r2, #127	@ 0x7f
 8006f14:	4013      	ands	r3, r2
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	227f      	movs	r2, #127	@ 0x7f
 8006f22:	4013      	ands	r3, r2
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	0d9b      	lsrs	r3, r3, #22
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2201      	movs	r2, #1
 8006f32:	4013      	ands	r3, r2
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	0e1b      	lsrs	r3, r3, #24
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	223f      	movs	r2, #63	@ 0x3f
 8006f48:	4013      	ands	r3, r2
 8006f4a:	b2d9      	uxtb	r1, r3
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	2380      	movs	r3, #128	@ 0x80
 8006f56:	05db      	lsls	r3, r3, #23
 8006f58:	401a      	ands	r2, r3
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	4a3b      	ldr	r2, [pc, #236]	@ (8007050 <HAL_RTC_GetAlarm+0x188>)
 8006f62:	401a      	ands	r2, r3
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	615a      	str	r2, [r3, #20]
 8006f68:	e043      	b.n	8006ff2 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2280      	movs	r2, #128	@ 0x80
 8006f6e:	0092      	lsls	r2, r2, #2
 8006f70:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f78:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f80:	045b      	lsls	r3, r3, #17
 8006f82:	0c5b      	lsrs	r3, r3, #17
 8006f84:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	0c1b      	lsrs	r3, r3, #16
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	223f      	movs	r2, #63	@ 0x3f
 8006f8e:	4013      	ands	r3, r2
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	0a1b      	lsrs	r3, r3, #8
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	227f      	movs	r2, #127	@ 0x7f
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	227f      	movs	r2, #127	@ 0x7f
 8006fac:	4013      	ands	r3, r2
 8006fae:	b2da      	uxtb	r2, r3
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	0d9b      	lsrs	r3, r3, #22
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2201      	movs	r2, #1
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	0e1b      	lsrs	r3, r3, #24
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	223f      	movs	r2, #63	@ 0x3f
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	b2d9      	uxtb	r1, r3
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	2380      	movs	r3, #128	@ 0x80
 8006fe0:	05db      	lsls	r3, r3, #23
 8006fe2:	401a      	ands	r2, r3
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	4a19      	ldr	r2, [pc, #100]	@ (8007050 <HAL_RTC_GetAlarm+0x188>)
 8006fec:	401a      	ands	r2, r3
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d125      	bne.n	8007044 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	f000 f93b 	bl	8007278 <RTC_Bcd2ToByte>
 8007002:	0003      	movs	r3, r0
 8007004:	001a      	movs	r2, r3
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	785b      	ldrb	r3, [r3, #1]
 800700e:	0018      	movs	r0, r3
 8007010:	f000 f932 	bl	8007278 <RTC_Bcd2ToByte>
 8007014:	0003      	movs	r3, r0
 8007016:	001a      	movs	r2, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	789b      	ldrb	r3, [r3, #2]
 8007020:	0018      	movs	r0, r3
 8007022:	f000 f929 	bl	8007278 <RTC_Bcd2ToByte>
 8007026:	0003      	movs	r3, r0
 8007028:	001a      	movs	r2, r3
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2220      	movs	r2, #32
 8007032:	5c9b      	ldrb	r3, [r3, r2]
 8007034:	0018      	movs	r0, r3
 8007036:	f000 f91f 	bl	8007278 <RTC_Bcd2ToByte>
 800703a:	0003      	movs	r3, r0
 800703c:	0019      	movs	r1, r3
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2220      	movs	r2, #32
 8007042:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	0018      	movs	r0, r3
 8007048:	46bd      	mov	sp, r7
 800704a:	b006      	add	sp, #24
 800704c:	bd80      	pop	{r7, pc}
 800704e:	46c0      	nop			@ (mov r8, r8)
 8007050:	80808080 	.word	0x80808080

08007054 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	699a      	ldr	r2, [r3, #24]
 8007062:	2380      	movs	r3, #128	@ 0x80
 8007064:	015b      	lsls	r3, r3, #5
 8007066:	4013      	ands	r3, r2
 8007068:	d011      	beq.n	800708e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007070:	2201      	movs	r2, #1
 8007072:	4013      	ands	r3, r2
 8007074:	d00b      	beq.n	800708e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2101      	movs	r1, #1
 8007082:	430a      	orrs	r2, r1
 8007084:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	0018      	movs	r0, r3
 800708a:	f7fb f877 	bl	800217c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	699a      	ldr	r2, [r3, #24]
 8007094:	2380      	movs	r3, #128	@ 0x80
 8007096:	019b      	lsls	r3, r3, #6
 8007098:	4013      	ands	r3, r2
 800709a:	d011      	beq.n	80070c0 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070a2:	2202      	movs	r2, #2
 80070a4:	4013      	ands	r3, r2
 80070a6:	d00b      	beq.n	80070c0 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2102      	movs	r1, #2
 80070b4:	430a      	orrs	r2, r1
 80070b6:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	0018      	movs	r0, r3
 80070bc:	f000 f95b 	bl	8007376 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2229      	movs	r2, #41	@ 0x29
 80070c4:	2101      	movs	r1, #1
 80070c6:	5499      	strb	r1, [r3, r2]
}
 80070c8:	46c0      	nop			@ (mov r8, r8)
 80070ca:	46bd      	mov	sp, r7
 80070cc:	b002      	add	sp, #8
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a0e      	ldr	r2, [pc, #56]	@ (8007118 <HAL_RTC_WaitForSynchro+0x48>)
 80070de:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80070e0:	f7fc fbcc 	bl	800387c <HAL_GetTick>
 80070e4:	0003      	movs	r3, r0
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80070e8:	e00a      	b.n	8007100 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80070ea:	f7fc fbc7 	bl	800387c <HAL_GetTick>
 80070ee:	0002      	movs	r2, r0
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	1ad2      	subs	r2, r2, r3
 80070f4:	23fa      	movs	r3, #250	@ 0xfa
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d901      	bls.n	8007100 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e006      	b.n	800710e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	2220      	movs	r2, #32
 8007108:	4013      	ands	r3, r2
 800710a:	d0ee      	beq.n	80070ea <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	0018      	movs	r0, r3
 8007110:	46bd      	mov	sp, r7
 8007112:	b004      	add	sp, #16
 8007114:	bd80      	pop	{r7, pc}
 8007116:	46c0      	nop			@ (mov r8, r8)
 8007118:	0001005f 	.word	0x0001005f

0800711c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8007124:	230f      	movs	r3, #15
 8007126:	18fb      	adds	r3, r7, r3
 8007128:	2200      	movs	r2, #0
 800712a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	2240      	movs	r2, #64	@ 0x40
 8007134:	4013      	ands	r3, r2
 8007136:	d12c      	bne.n	8007192 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2180      	movs	r1, #128	@ 0x80
 8007144:	430a      	orrs	r2, r1
 8007146:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007148:	f7fc fb98 	bl	800387c <HAL_GetTick>
 800714c:	0003      	movs	r3, r0
 800714e:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007150:	e014      	b.n	800717c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007152:	f7fc fb93 	bl	800387c <HAL_GetTick>
 8007156:	0002      	movs	r2, r0
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	1ad2      	subs	r2, r2, r3
 800715c:	200f      	movs	r0, #15
 800715e:	183b      	adds	r3, r7, r0
 8007160:	1839      	adds	r1, r7, r0
 8007162:	7809      	ldrb	r1, [r1, #0]
 8007164:	7019      	strb	r1, [r3, #0]
 8007166:	23fa      	movs	r3, #250	@ 0xfa
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	429a      	cmp	r2, r3
 800716c:	d906      	bls.n	800717c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800716e:	183b      	adds	r3, r7, r0
 8007170:	2203      	movs	r2, #3
 8007172:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2229      	movs	r2, #41	@ 0x29
 8007178:	2103      	movs	r1, #3
 800717a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	2240      	movs	r2, #64	@ 0x40
 8007184:	4013      	ands	r3, r2
 8007186:	d104      	bne.n	8007192 <RTC_EnterInitMode+0x76>
 8007188:	230f      	movs	r3, #15
 800718a:	18fb      	adds	r3, r7, r3
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b03      	cmp	r3, #3
 8007190:	d1df      	bne.n	8007152 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007192:	230f      	movs	r3, #15
 8007194:	18fb      	adds	r3, r7, r3
 8007196:	781b      	ldrb	r3, [r3, #0]
}
 8007198:	0018      	movs	r0, r3
 800719a:	46bd      	mov	sp, r7
 800719c:	b004      	add	sp, #16
 800719e:	bd80      	pop	{r7, pc}

080071a0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80071a0:	b590      	push	{r4, r7, lr}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071a8:	240f      	movs	r4, #15
 80071aa:	193b      	adds	r3, r7, r4
 80071ac:	2200      	movs	r2, #0
 80071ae:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80071b0:	4b1c      	ldr	r3, [pc, #112]	@ (8007224 <RTC_ExitInitMode+0x84>)
 80071b2:	68da      	ldr	r2, [r3, #12]
 80071b4:	4b1b      	ldr	r3, [pc, #108]	@ (8007224 <RTC_ExitInitMode+0x84>)
 80071b6:	2180      	movs	r1, #128	@ 0x80
 80071b8:	438a      	bics	r2, r1
 80071ba:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80071bc:	4b19      	ldr	r3, [pc, #100]	@ (8007224 <RTC_ExitInitMode+0x84>)
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	2220      	movs	r2, #32
 80071c2:	4013      	ands	r3, r2
 80071c4:	d10d      	bne.n	80071e2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	0018      	movs	r0, r3
 80071ca:	f7ff ff81 	bl	80070d0 <HAL_RTC_WaitForSynchro>
 80071ce:	1e03      	subs	r3, r0, #0
 80071d0:	d021      	beq.n	8007216 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2229      	movs	r2, #41	@ 0x29
 80071d6:	2103      	movs	r1, #3
 80071d8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80071da:	193b      	adds	r3, r7, r4
 80071dc:	2203      	movs	r2, #3
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	e019      	b.n	8007216 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80071e2:	4b10      	ldr	r3, [pc, #64]	@ (8007224 <RTC_ExitInitMode+0x84>)
 80071e4:	699a      	ldr	r2, [r3, #24]
 80071e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007224 <RTC_ExitInitMode+0x84>)
 80071e8:	2120      	movs	r1, #32
 80071ea:	438a      	bics	r2, r1
 80071ec:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	0018      	movs	r0, r3
 80071f2:	f7ff ff6d 	bl	80070d0 <HAL_RTC_WaitForSynchro>
 80071f6:	1e03      	subs	r3, r0, #0
 80071f8:	d007      	beq.n	800720a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2229      	movs	r2, #41	@ 0x29
 80071fe:	2103      	movs	r1, #3
 8007200:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8007202:	230f      	movs	r3, #15
 8007204:	18fb      	adds	r3, r7, r3
 8007206:	2203      	movs	r2, #3
 8007208:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800720a:	4b06      	ldr	r3, [pc, #24]	@ (8007224 <RTC_ExitInitMode+0x84>)
 800720c:	699a      	ldr	r2, [r3, #24]
 800720e:	4b05      	ldr	r3, [pc, #20]	@ (8007224 <RTC_ExitInitMode+0x84>)
 8007210:	2120      	movs	r1, #32
 8007212:	430a      	orrs	r2, r1
 8007214:	619a      	str	r2, [r3, #24]
  }

  return status;
 8007216:	230f      	movs	r3, #15
 8007218:	18fb      	adds	r3, r7, r3
 800721a:	781b      	ldrb	r3, [r3, #0]
}
 800721c:	0018      	movs	r0, r3
 800721e:	46bd      	mov	sp, r7
 8007220:	b005      	add	sp, #20
 8007222:	bd90      	pop	{r4, r7, pc}
 8007224:	40002800 	.word	0x40002800

08007228 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	0002      	movs	r2, r0
 8007230:	1dfb      	adds	r3, r7, #7
 8007232:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8007238:	230b      	movs	r3, #11
 800723a:	18fb      	adds	r3, r7, r3
 800723c:	1dfa      	adds	r2, r7, #7
 800723e:	7812      	ldrb	r2, [r2, #0]
 8007240:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8007242:	e008      	b.n	8007256 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3301      	adds	r3, #1
 8007248:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800724a:	220b      	movs	r2, #11
 800724c:	18bb      	adds	r3, r7, r2
 800724e:	18ba      	adds	r2, r7, r2
 8007250:	7812      	ldrb	r2, [r2, #0]
 8007252:	3a0a      	subs	r2, #10
 8007254:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8007256:	210b      	movs	r1, #11
 8007258:	187b      	adds	r3, r7, r1
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	2b09      	cmp	r3, #9
 800725e:	d8f1      	bhi.n	8007244 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	b2db      	uxtb	r3, r3
 8007264:	011b      	lsls	r3, r3, #4
 8007266:	b2da      	uxtb	r2, r3
 8007268:	187b      	adds	r3, r7, r1
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	4313      	orrs	r3, r2
 800726e:	b2db      	uxtb	r3, r3
}
 8007270:	0018      	movs	r0, r3
 8007272:	46bd      	mov	sp, r7
 8007274:	b004      	add	sp, #16
 8007276:	bd80      	pop	{r7, pc}

08007278 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	0002      	movs	r2, r0
 8007280:	1dfb      	adds	r3, r7, #7
 8007282:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8007284:	1dfb      	adds	r3, r7, #7
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	091b      	lsrs	r3, r3, #4
 800728a:	b2db      	uxtb	r3, r3
 800728c:	001a      	movs	r2, r3
 800728e:	0013      	movs	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	189b      	adds	r3, r3, r2
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	b2da      	uxtb	r2, r3
 800729c:	1dfb      	adds	r3, r7, #7
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	210f      	movs	r1, #15
 80072a2:	400b      	ands	r3, r1
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	18d3      	adds	r3, r2, r3
 80072a8:	b2db      	uxtb	r3, r3
}
 80072aa:	0018      	movs	r0, r3
 80072ac:	46bd      	mov	sp, r7
 80072ae:	b004      	add	sp, #16
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b086      	sub	sp, #24
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	607a      	str	r2, [r7, #4]
 80072be:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2228      	movs	r2, #40	@ 0x28
 80072c4:	5c9b      	ldrb	r3, [r3, r2]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d101      	bne.n	80072ce <HAL_RTCEx_SetSmoothCalib+0x1c>
 80072ca:	2302      	movs	r3, #2
 80072cc:	e04f      	b.n	800736e <HAL_RTCEx_SetSmoothCalib+0xbc>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2228      	movs	r2, #40	@ 0x28
 80072d2:	2101      	movs	r1, #1
 80072d4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2229      	movs	r2, #41	@ 0x29
 80072da:	2102      	movs	r1, #2
 80072dc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	22ca      	movs	r2, #202	@ 0xca
 80072e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2253      	movs	r2, #83	@ 0x53
 80072ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68da      	ldr	r2, [r3, #12]
 80072f4:	2380      	movs	r3, #128	@ 0x80
 80072f6:	025b      	lsls	r3, r3, #9
 80072f8:	4013      	ands	r3, r2
 80072fa:	d022      	beq.n	8007342 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 80072fc:	f7fc fabe 	bl	800387c <HAL_GetTick>
 8007300:	0003      	movs	r3, r0
 8007302:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8007304:	e016      	b.n	8007334 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007306:	f7fc fab9 	bl	800387c <HAL_GetTick>
 800730a:	0002      	movs	r2, r0
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	1ad2      	subs	r2, r2, r3
 8007310:	23fa      	movs	r3, #250	@ 0xfa
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	429a      	cmp	r2, r3
 8007316:	d90d      	bls.n	8007334 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	22ff      	movs	r2, #255	@ 0xff
 800731e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2229      	movs	r2, #41	@ 0x29
 8007324:	2103      	movs	r1, #3
 8007326:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2228      	movs	r2, #40	@ 0x28
 800732c:	2100      	movs	r1, #0
 800732e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e01c      	b.n	800736e <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	2380      	movs	r3, #128	@ 0x80
 800733c:	025b      	lsls	r3, r3, #9
 800733e:	4013      	ands	r3, r2
 8007340:	d1e1      	bne.n	8007306 <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	431a      	orrs	r2, r3
 8007348:	0011      	movs	r1, r2
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	430a      	orrs	r2, r1
 8007352:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	22ff      	movs	r2, #255	@ 0xff
 800735a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2229      	movs	r2, #41	@ 0x29
 8007360:	2101      	movs	r1, #1
 8007362:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2228      	movs	r2, #40	@ 0x28
 8007368:	2100      	movs	r1, #0
 800736a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	0018      	movs	r0, r3
 8007370:	46bd      	mov	sp, r7
 8007372:	b006      	add	sp, #24
 8007374:	bd80      	pop	{r7, pc}

08007376 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b082      	sub	sp, #8
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800737e:	46c0      	nop			@ (mov r8, r8)
 8007380:	46bd      	mov	sp, r7
 8007382:	b002      	add	sp, #8
 8007384:	bd80      	pop	{r7, pc}

08007386 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b086      	sub	sp, #24
 800738a:	af00      	add	r7, sp, #0
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	001a      	movs	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	18d3      	adds	r3, r2, r3
 800739e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	3301      	adds	r3, #1
 80073a4:	33ff      	adds	r3, #255	@ 0xff
 80073a6:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	18d3      	adds	r3, r2, r3
 80073b0:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	601a      	str	r2, [r3, #0]
}
 80073b8:	46c0      	nop			@ (mov r8, r8)
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b006      	add	sp, #24
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	001a      	movs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	18d3      	adds	r3, r2, r3
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3301      	adds	r3, #1
 80073dc:	33ff      	adds	r3, #255	@ 0xff
 80073de:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	18d3      	adds	r3, r2, r3
 80073e8:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	681b      	ldr	r3, [r3, #0]
}
 80073ee:	0018      	movs	r0, r3
 80073f0:	46bd      	mov	sp, r7
 80073f2:	b004      	add	sp, #16
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e0a8      	b.n	800755c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	2382      	movs	r3, #130	@ 0x82
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	429a      	cmp	r2, r3
 800741c:	d009      	beq.n	8007432 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	61da      	str	r2, [r3, #28]
 8007424:	e005      	b.n	8007432 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	225d      	movs	r2, #93	@ 0x5d
 800743c:	5c9b      	ldrb	r3, [r3, r2]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b00      	cmp	r3, #0
 8007442:	d107      	bne.n	8007454 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	225c      	movs	r2, #92	@ 0x5c
 8007448:	2100      	movs	r1, #0
 800744a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	0018      	movs	r0, r3
 8007450:	f7fb ff9c 	bl	800338c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	225d      	movs	r2, #93	@ 0x5d
 8007458:	2102      	movs	r1, #2
 800745a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2140      	movs	r1, #64	@ 0x40
 8007468:	438a      	bics	r2, r1
 800746a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	23e0      	movs	r3, #224	@ 0xe0
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	429a      	cmp	r2, r3
 8007476:	d902      	bls.n	800747e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]
 800747c:	e002      	b.n	8007484 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800747e:	2380      	movs	r3, #128	@ 0x80
 8007480:	015b      	lsls	r3, r3, #5
 8007482:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68da      	ldr	r2, [r3, #12]
 8007488:	23f0      	movs	r3, #240	@ 0xf0
 800748a:	011b      	lsls	r3, r3, #4
 800748c:	429a      	cmp	r2, r3
 800748e:	d008      	beq.n	80074a2 <HAL_SPI_Init+0xaa>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68da      	ldr	r2, [r3, #12]
 8007494:	23e0      	movs	r3, #224	@ 0xe0
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	429a      	cmp	r2, r3
 800749a:	d002      	beq.n	80074a2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	2382      	movs	r3, #130	@ 0x82
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	401a      	ands	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6899      	ldr	r1, [r3, #8]
 80074b0:	2384      	movs	r3, #132	@ 0x84
 80074b2:	021b      	lsls	r3, r3, #8
 80074b4:	400b      	ands	r3, r1
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	2102      	movs	r1, #2
 80074be:	400b      	ands	r3, r1
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	2101      	movs	r1, #1
 80074c8:	400b      	ands	r3, r1
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6999      	ldr	r1, [r3, #24]
 80074d0:	2380      	movs	r3, #128	@ 0x80
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	400b      	ands	r3, r1
 80074d6:	431a      	orrs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	2138      	movs	r1, #56	@ 0x38
 80074de:	400b      	ands	r3, r1
 80074e0:	431a      	orrs	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	2180      	movs	r1, #128	@ 0x80
 80074e8:	400b      	ands	r3, r1
 80074ea:	431a      	orrs	r2, r3
 80074ec:	0011      	movs	r1, r2
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074f2:	2380      	movs	r3, #128	@ 0x80
 80074f4:	019b      	lsls	r3, r3, #6
 80074f6:	401a      	ands	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	430a      	orrs	r2, r1
 80074fe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	0c1b      	lsrs	r3, r3, #16
 8007506:	2204      	movs	r2, #4
 8007508:	401a      	ands	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750e:	2110      	movs	r1, #16
 8007510:	400b      	ands	r3, r1
 8007512:	431a      	orrs	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007518:	2108      	movs	r1, #8
 800751a:	400b      	ands	r3, r1
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68d9      	ldr	r1, [r3, #12]
 8007522:	23f0      	movs	r3, #240	@ 0xf0
 8007524:	011b      	lsls	r3, r3, #4
 8007526:	400b      	ands	r3, r1
 8007528:	431a      	orrs	r2, r3
 800752a:	0011      	movs	r1, r2
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	2380      	movs	r3, #128	@ 0x80
 8007530:	015b      	lsls	r3, r3, #5
 8007532:	401a      	ands	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	430a      	orrs	r2, r1
 800753a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	69da      	ldr	r2, [r3, #28]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4907      	ldr	r1, [pc, #28]	@ (8007564 <HAL_SPI_Init+0x16c>)
 8007548:	400a      	ands	r2, r1
 800754a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	225d      	movs	r2, #93	@ 0x5d
 8007556:	2101      	movs	r1, #1
 8007558:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	0018      	movs	r0, r3
 800755e:	46bd      	mov	sp, r7
 8007560:	b004      	add	sp, #16
 8007562:	bd80      	pop	{r7, pc}
 8007564:	fffff7ff 	.word	0xfffff7ff

08007568 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b088      	sub	sp, #32
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	603b      	str	r3, [r7, #0]
 8007574:	1dbb      	adds	r3, r7, #6
 8007576:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007578:	231f      	movs	r3, #31
 800757a:	18fb      	adds	r3, r7, r3
 800757c:	2200      	movs	r2, #0
 800757e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	225c      	movs	r2, #92	@ 0x5c
 8007584:	5c9b      	ldrb	r3, [r3, r2]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d101      	bne.n	800758e <HAL_SPI_Transmit+0x26>
 800758a:	2302      	movs	r3, #2
 800758c:	e147      	b.n	800781e <HAL_SPI_Transmit+0x2b6>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	225c      	movs	r2, #92	@ 0x5c
 8007592:	2101      	movs	r1, #1
 8007594:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007596:	f7fc f971 	bl	800387c <HAL_GetTick>
 800759a:	0003      	movs	r3, r0
 800759c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800759e:	2316      	movs	r3, #22
 80075a0:	18fb      	adds	r3, r7, r3
 80075a2:	1dba      	adds	r2, r7, #6
 80075a4:	8812      	ldrh	r2, [r2, #0]
 80075a6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	225d      	movs	r2, #93	@ 0x5d
 80075ac:	5c9b      	ldrb	r3, [r3, r2]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d004      	beq.n	80075be <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80075b4:	231f      	movs	r3, #31
 80075b6:	18fb      	adds	r3, r7, r3
 80075b8:	2202      	movs	r2, #2
 80075ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80075bc:	e128      	b.n	8007810 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <HAL_SPI_Transmit+0x64>
 80075c4:	1dbb      	adds	r3, r7, #6
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d104      	bne.n	80075d6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80075cc:	231f      	movs	r3, #31
 80075ce:	18fb      	adds	r3, r7, r3
 80075d0:	2201      	movs	r2, #1
 80075d2:	701a      	strb	r2, [r3, #0]
    goto error;
 80075d4:	e11c      	b.n	8007810 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	225d      	movs	r2, #93	@ 0x5d
 80075da:	2103      	movs	r1, #3
 80075dc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	1dba      	adds	r2, r7, #6
 80075ee:	8812      	ldrh	r2, [r2, #0]
 80075f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1dba      	adds	r2, r7, #6
 80075f6:	8812      	ldrh	r2, [r2, #0]
 80075f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2244      	movs	r2, #68	@ 0x44
 8007604:	2100      	movs	r1, #0
 8007606:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2246      	movs	r2, #70	@ 0x46
 800760c:	2100      	movs	r1, #0
 800760e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	2380      	movs	r3, #128	@ 0x80
 8007622:	021b      	lsls	r3, r3, #8
 8007624:	429a      	cmp	r2, r3
 8007626:	d110      	bne.n	800764a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2140      	movs	r1, #64	@ 0x40
 8007634:	438a      	bics	r2, r1
 8007636:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2180      	movs	r1, #128	@ 0x80
 8007644:	01c9      	lsls	r1, r1, #7
 8007646:	430a      	orrs	r2, r1
 8007648:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2240      	movs	r2, #64	@ 0x40
 8007652:	4013      	ands	r3, r2
 8007654:	2b40      	cmp	r3, #64	@ 0x40
 8007656:	d007      	beq.n	8007668 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2140      	movs	r1, #64	@ 0x40
 8007664:	430a      	orrs	r2, r1
 8007666:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	23e0      	movs	r3, #224	@ 0xe0
 800766e:	00db      	lsls	r3, r3, #3
 8007670:	429a      	cmp	r2, r3
 8007672:	d952      	bls.n	800771a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d004      	beq.n	8007686 <HAL_SPI_Transmit+0x11e>
 800767c:	2316      	movs	r3, #22
 800767e:	18fb      	adds	r3, r7, r3
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d143      	bne.n	800770e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768a:	881a      	ldrh	r2, [r3, #0]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007696:	1c9a      	adds	r2, r3, #2
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80076aa:	e030      	b.n	800770e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	2202      	movs	r2, #2
 80076b4:	4013      	ands	r3, r2
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d112      	bne.n	80076e0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076be:	881a      	ldrh	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ca:	1c9a      	adds	r2, r3, #2
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	3b01      	subs	r3, #1
 80076d8:	b29a      	uxth	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80076de:	e016      	b.n	800770e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076e0:	f7fc f8cc 	bl	800387c <HAL_GetTick>
 80076e4:	0002      	movs	r2, r0
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d802      	bhi.n	80076f6 <HAL_SPI_Transmit+0x18e>
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	3301      	adds	r3, #1
 80076f4:	d102      	bne.n	80076fc <HAL_SPI_Transmit+0x194>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d108      	bne.n	800770e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80076fc:	231f      	movs	r3, #31
 80076fe:	18fb      	adds	r3, r7, r3
 8007700:	2203      	movs	r2, #3
 8007702:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	225d      	movs	r2, #93	@ 0x5d
 8007708:	2101      	movs	r1, #1
 800770a:	5499      	strb	r1, [r3, r2]
          goto error;
 800770c:	e080      	b.n	8007810 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007712:	b29b      	uxth	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1c9      	bne.n	80076ac <HAL_SPI_Transmit+0x144>
 8007718:	e053      	b.n	80077c2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d004      	beq.n	800772c <HAL_SPI_Transmit+0x1c4>
 8007722:	2316      	movs	r3, #22
 8007724:	18fb      	adds	r3, r7, r3
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d145      	bne.n	80077b8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	330c      	adds	r3, #12
 8007736:	7812      	ldrb	r2, [r2, #0]
 8007738:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007748:	b29b      	uxth	r3, r3
 800774a:	3b01      	subs	r3, #1
 800774c:	b29a      	uxth	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007752:	e031      	b.n	80077b8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	2202      	movs	r2, #2
 800775c:	4013      	ands	r3, r2
 800775e:	2b02      	cmp	r3, #2
 8007760:	d113      	bne.n	800778a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	330c      	adds	r3, #12
 800776c:	7812      	ldrb	r2, [r2, #0]
 800776e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007774:	1c5a      	adds	r2, r3, #1
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800777e:	b29b      	uxth	r3, r3
 8007780:	3b01      	subs	r3, #1
 8007782:	b29a      	uxth	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007788:	e016      	b.n	80077b8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800778a:	f7fc f877 	bl	800387c <HAL_GetTick>
 800778e:	0002      	movs	r2, r0
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	429a      	cmp	r2, r3
 8007798:	d802      	bhi.n	80077a0 <HAL_SPI_Transmit+0x238>
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	3301      	adds	r3, #1
 800779e:	d102      	bne.n	80077a6 <HAL_SPI_Transmit+0x23e>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d108      	bne.n	80077b8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80077a6:	231f      	movs	r3, #31
 80077a8:	18fb      	adds	r3, r7, r3
 80077aa:	2203      	movs	r2, #3
 80077ac:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	225d      	movs	r2, #93	@ 0x5d
 80077b2:	2101      	movs	r1, #1
 80077b4:	5499      	strb	r1, [r3, r2]
          goto error;
 80077b6:	e02b      	b.n	8007810 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1c8      	bne.n	8007754 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	0018      	movs	r0, r3
 80077ca:	f000 fcef 	bl	80081ac <SPI_EndRxTxTransaction>
 80077ce:	1e03      	subs	r3, r0, #0
 80077d0:	d002      	beq.n	80077d8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2220      	movs	r2, #32
 80077d6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10a      	bne.n	80077f6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077e0:	2300      	movs	r3, #0
 80077e2:	613b      	str	r3, [r7, #16]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	613b      	str	r3, [r7, #16]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	613b      	str	r3, [r7, #16]
 80077f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d004      	beq.n	8007808 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80077fe:	231f      	movs	r3, #31
 8007800:	18fb      	adds	r3, r7, r3
 8007802:	2201      	movs	r2, #1
 8007804:	701a      	strb	r2, [r3, #0]
 8007806:	e003      	b.n	8007810 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	225d      	movs	r2, #93	@ 0x5d
 800780c:	2101      	movs	r1, #1
 800780e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	225c      	movs	r2, #92	@ 0x5c
 8007814:	2100      	movs	r1, #0
 8007816:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007818:	231f      	movs	r3, #31
 800781a:	18fb      	adds	r3, r7, r3
 800781c:	781b      	ldrb	r3, [r3, #0]
}
 800781e:	0018      	movs	r0, r3
 8007820:	46bd      	mov	sp, r7
 8007822:	b008      	add	sp, #32
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007828:	b590      	push	{r4, r7, lr}
 800782a:	b089      	sub	sp, #36	@ 0x24
 800782c:	af02      	add	r7, sp, #8
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	1dbb      	adds	r3, r7, #6
 8007836:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007838:	2117      	movs	r1, #23
 800783a:	187b      	adds	r3, r7, r1
 800783c:	2200      	movs	r2, #0
 800783e:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	225d      	movs	r2, #93	@ 0x5d
 8007844:	5c9b      	ldrb	r3, [r3, r2]
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b01      	cmp	r3, #1
 800784a:	d003      	beq.n	8007854 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800784c:	187b      	adds	r3, r7, r1
 800784e:	2202      	movs	r2, #2
 8007850:	701a      	strb	r2, [r3, #0]
    goto error;
 8007852:	e12b      	b.n	8007aac <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	2382      	movs	r3, #130	@ 0x82
 800785a:	005b      	lsls	r3, r3, #1
 800785c:	429a      	cmp	r2, r3
 800785e:	d113      	bne.n	8007888 <HAL_SPI_Receive+0x60>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10f      	bne.n	8007888 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	225d      	movs	r2, #93	@ 0x5d
 800786c:	2104      	movs	r1, #4
 800786e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007870:	1dbb      	adds	r3, r7, #6
 8007872:	881c      	ldrh	r4, [r3, #0]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	68b9      	ldr	r1, [r7, #8]
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	0023      	movs	r3, r4
 8007880:	f000 f924 	bl	8007acc <HAL_SPI_TransmitReceive>
 8007884:	0003      	movs	r3, r0
 8007886:	e118      	b.n	8007aba <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	225c      	movs	r2, #92	@ 0x5c
 800788c:	5c9b      	ldrb	r3, [r3, r2]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d101      	bne.n	8007896 <HAL_SPI_Receive+0x6e>
 8007892:	2302      	movs	r3, #2
 8007894:	e111      	b.n	8007aba <HAL_SPI_Receive+0x292>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	225c      	movs	r2, #92	@ 0x5c
 800789a:	2101      	movs	r1, #1
 800789c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800789e:	f7fb ffed 	bl	800387c <HAL_GetTick>
 80078a2:	0003      	movs	r3, r0
 80078a4:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d003      	beq.n	80078b4 <HAL_SPI_Receive+0x8c>
 80078ac:	1dbb      	adds	r3, r7, #6
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d104      	bne.n	80078be <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80078b4:	2317      	movs	r3, #23
 80078b6:	18fb      	adds	r3, r7, r3
 80078b8:	2201      	movs	r2, #1
 80078ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80078bc:	e0f6      	b.n	8007aac <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	225d      	movs	r2, #93	@ 0x5d
 80078c2:	2104      	movs	r1, #4
 80078c4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	1dba      	adds	r2, r7, #6
 80078d6:	2144      	movs	r1, #68	@ 0x44
 80078d8:	8812      	ldrh	r2, [r2, #0]
 80078da:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	1dba      	adds	r2, r7, #6
 80078e0:	2146      	movs	r1, #70	@ 0x46
 80078e2:	8812      	ldrh	r2, [r2, #0]
 80078e4:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	68da      	ldr	r2, [r3, #12]
 8007908:	23e0      	movs	r3, #224	@ 0xe0
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	429a      	cmp	r2, r3
 800790e:	d908      	bls.n	8007922 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	496a      	ldr	r1, [pc, #424]	@ (8007ac4 <HAL_SPI_Receive+0x29c>)
 800791c:	400a      	ands	r2, r1
 800791e:	605a      	str	r2, [r3, #4]
 8007920:	e008      	b.n	8007934 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2180      	movs	r1, #128	@ 0x80
 800792e:	0149      	lsls	r1, r1, #5
 8007930:	430a      	orrs	r2, r1
 8007932:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	2380      	movs	r3, #128	@ 0x80
 800793a:	021b      	lsls	r3, r3, #8
 800793c:	429a      	cmp	r2, r3
 800793e:	d10f      	bne.n	8007960 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2140      	movs	r1, #64	@ 0x40
 800794c:	438a      	bics	r2, r1
 800794e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	495b      	ldr	r1, [pc, #364]	@ (8007ac8 <HAL_SPI_Receive+0x2a0>)
 800795c:	400a      	ands	r2, r1
 800795e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2240      	movs	r2, #64	@ 0x40
 8007968:	4013      	ands	r3, r2
 800796a:	2b40      	cmp	r3, #64	@ 0x40
 800796c:	d007      	beq.n	800797e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2140      	movs	r1, #64	@ 0x40
 800797a:	430a      	orrs	r2, r1
 800797c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	68da      	ldr	r2, [r3, #12]
 8007982:	23e0      	movs	r3, #224	@ 0xe0
 8007984:	00db      	lsls	r3, r3, #3
 8007986:	429a      	cmp	r2, r3
 8007988:	d900      	bls.n	800798c <HAL_SPI_Receive+0x164>
 800798a:	e071      	b.n	8007a70 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800798c:	e035      	b.n	80079fa <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	2201      	movs	r2, #1
 8007996:	4013      	ands	r3, r2
 8007998:	2b01      	cmp	r3, #1
 800799a:	d117      	bne.n	80079cc <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	330c      	adds	r3, #12
 80079a2:	001a      	movs	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a8:	7812      	ldrb	r2, [r2, #0]
 80079aa:	b2d2      	uxtb	r2, r2
 80079ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2246      	movs	r2, #70	@ 0x46
 80079bc:	5a9b      	ldrh	r3, [r3, r2]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	3b01      	subs	r3, #1
 80079c2:	b299      	uxth	r1, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2246      	movs	r2, #70	@ 0x46
 80079c8:	5299      	strh	r1, [r3, r2]
 80079ca:	e016      	b.n	80079fa <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079cc:	f7fb ff56 	bl	800387c <HAL_GetTick>
 80079d0:	0002      	movs	r2, r0
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d802      	bhi.n	80079e2 <HAL_SPI_Receive+0x1ba>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	3301      	adds	r3, #1
 80079e0:	d102      	bne.n	80079e8 <HAL_SPI_Receive+0x1c0>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d108      	bne.n	80079fa <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 80079e8:	2317      	movs	r3, #23
 80079ea:	18fb      	adds	r3, r7, r3
 80079ec:	2203      	movs	r2, #3
 80079ee:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	225d      	movs	r2, #93	@ 0x5d
 80079f4:	2101      	movs	r1, #1
 80079f6:	5499      	strb	r1, [r3, r2]
          goto error;
 80079f8:	e058      	b.n	8007aac <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2246      	movs	r2, #70	@ 0x46
 80079fe:	5a9b      	ldrh	r3, [r3, r2]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1c3      	bne.n	800798e <HAL_SPI_Receive+0x166>
 8007a06:	e039      	b.n	8007a7c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	4013      	ands	r3, r2
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d115      	bne.n	8007a42 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68da      	ldr	r2, [r3, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a20:	b292      	uxth	r2, r2
 8007a22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a28:	1c9a      	adds	r2, r3, #2
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2246      	movs	r2, #70	@ 0x46
 8007a32:	5a9b      	ldrh	r3, [r3, r2]
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	3b01      	subs	r3, #1
 8007a38:	b299      	uxth	r1, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2246      	movs	r2, #70	@ 0x46
 8007a3e:	5299      	strh	r1, [r3, r2]
 8007a40:	e016      	b.n	8007a70 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a42:	f7fb ff1b 	bl	800387c <HAL_GetTick>
 8007a46:	0002      	movs	r2, r0
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d802      	bhi.n	8007a58 <HAL_SPI_Receive+0x230>
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	3301      	adds	r3, #1
 8007a56:	d102      	bne.n	8007a5e <HAL_SPI_Receive+0x236>
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d108      	bne.n	8007a70 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8007a5e:	2317      	movs	r3, #23
 8007a60:	18fb      	adds	r3, r7, r3
 8007a62:	2203      	movs	r2, #3
 8007a64:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	225d      	movs	r2, #93	@ 0x5d
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	5499      	strb	r1, [r3, r2]
          goto error;
 8007a6e:	e01d      	b.n	8007aac <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2246      	movs	r2, #70	@ 0x46
 8007a74:	5a9b      	ldrh	r3, [r3, r2]
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1c5      	bne.n	8007a08 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	0018      	movs	r0, r3
 8007a84:	f000 fb34 	bl	80080f0 <SPI_EndRxTransaction>
 8007a88:	1e03      	subs	r3, r0, #0
 8007a8a:	d002      	beq.n	8007a92 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d004      	beq.n	8007aa4 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8007a9a:	2317      	movs	r3, #23
 8007a9c:	18fb      	adds	r3, r7, r3
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	701a      	strb	r2, [r3, #0]
 8007aa2:	e003      	b.n	8007aac <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	225d      	movs	r2, #93	@ 0x5d
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	225c      	movs	r2, #92	@ 0x5c
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007ab4:	2317      	movs	r3, #23
 8007ab6:	18fb      	adds	r3, r7, r3
 8007ab8:	781b      	ldrb	r3, [r3, #0]
}
 8007aba:	0018      	movs	r0, r3
 8007abc:	46bd      	mov	sp, r7
 8007abe:	b007      	add	sp, #28
 8007ac0:	bd90      	pop	{r4, r7, pc}
 8007ac2:	46c0      	nop			@ (mov r8, r8)
 8007ac4:	ffffefff 	.word	0xffffefff
 8007ac8:	ffffbfff 	.word	0xffffbfff

08007acc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08a      	sub	sp, #40	@ 0x28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
 8007ad8:	001a      	movs	r2, r3
 8007ada:	1cbb      	adds	r3, r7, #2
 8007adc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ae2:	2323      	movs	r3, #35	@ 0x23
 8007ae4:	18fb      	adds	r3, r7, r3
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	225c      	movs	r2, #92	@ 0x5c
 8007aee:	5c9b      	ldrb	r3, [r3, r2]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d101      	bne.n	8007af8 <HAL_SPI_TransmitReceive+0x2c>
 8007af4:	2302      	movs	r3, #2
 8007af6:	e1c4      	b.n	8007e82 <HAL_SPI_TransmitReceive+0x3b6>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	225c      	movs	r2, #92	@ 0x5c
 8007afc:	2101      	movs	r1, #1
 8007afe:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b00:	f7fb febc 	bl	800387c <HAL_GetTick>
 8007b04:	0003      	movs	r3, r0
 8007b06:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b08:	201b      	movs	r0, #27
 8007b0a:	183b      	adds	r3, r7, r0
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	215d      	movs	r1, #93	@ 0x5d
 8007b10:	5c52      	ldrb	r2, [r2, r1]
 8007b12:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007b1a:	2312      	movs	r3, #18
 8007b1c:	18fb      	adds	r3, r7, r3
 8007b1e:	1cba      	adds	r2, r7, #2
 8007b20:	8812      	ldrh	r2, [r2, #0]
 8007b22:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b24:	183b      	adds	r3, r7, r0
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d011      	beq.n	8007b50 <HAL_SPI_TransmitReceive+0x84>
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	2382      	movs	r3, #130	@ 0x82
 8007b30:	005b      	lsls	r3, r3, #1
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d107      	bne.n	8007b46 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d103      	bne.n	8007b46 <HAL_SPI_TransmitReceive+0x7a>
 8007b3e:	183b      	adds	r3, r7, r0
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	d004      	beq.n	8007b50 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8007b46:	2323      	movs	r3, #35	@ 0x23
 8007b48:	18fb      	adds	r3, r7, r3
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	701a      	strb	r2, [r3, #0]
    goto error;
 8007b4e:	e191      	b.n	8007e74 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d006      	beq.n	8007b64 <HAL_SPI_TransmitReceive+0x98>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <HAL_SPI_TransmitReceive+0x98>
 8007b5c:	1cbb      	adds	r3, r7, #2
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d104      	bne.n	8007b6e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007b64:	2323      	movs	r3, #35	@ 0x23
 8007b66:	18fb      	adds	r3, r7, r3
 8007b68:	2201      	movs	r2, #1
 8007b6a:	701a      	strb	r2, [r3, #0]
    goto error;
 8007b6c:	e182      	b.n	8007e74 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	225d      	movs	r2, #93	@ 0x5d
 8007b72:	5c9b      	ldrb	r3, [r3, r2]
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	d003      	beq.n	8007b82 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	225d      	movs	r2, #93	@ 0x5d
 8007b7e:	2105      	movs	r1, #5
 8007b80:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	1cba      	adds	r2, r7, #2
 8007b92:	2146      	movs	r1, #70	@ 0x46
 8007b94:	8812      	ldrh	r2, [r2, #0]
 8007b96:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	1cba      	adds	r2, r7, #2
 8007b9c:	2144      	movs	r1, #68	@ 0x44
 8007b9e:	8812      	ldrh	r2, [r2, #0]
 8007ba0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	1cba      	adds	r2, r7, #2
 8007bac:	8812      	ldrh	r2, [r2, #0]
 8007bae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	1cba      	adds	r2, r7, #2
 8007bb4:	8812      	ldrh	r2, [r2, #0]
 8007bb6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	68da      	ldr	r2, [r3, #12]
 8007bc8:	23e0      	movs	r3, #224	@ 0xe0
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d908      	bls.n	8007be2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	49ac      	ldr	r1, [pc, #688]	@ (8007e8c <HAL_SPI_TransmitReceive+0x3c0>)
 8007bdc:	400a      	ands	r2, r1
 8007bde:	605a      	str	r2, [r3, #4]
 8007be0:	e008      	b.n	8007bf4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2180      	movs	r1, #128	@ 0x80
 8007bee:	0149      	lsls	r1, r1, #5
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2240      	movs	r2, #64	@ 0x40
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	2b40      	cmp	r3, #64	@ 0x40
 8007c00:	d007      	beq.n	8007c12 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2140      	movs	r1, #64	@ 0x40
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	23e0      	movs	r3, #224	@ 0xe0
 8007c18:	00db      	lsls	r3, r3, #3
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d800      	bhi.n	8007c20 <HAL_SPI_TransmitReceive+0x154>
 8007c1e:	e083      	b.n	8007d28 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d005      	beq.n	8007c34 <HAL_SPI_TransmitReceive+0x168>
 8007c28:	2312      	movs	r3, #18
 8007c2a:	18fb      	adds	r3, r7, r3
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d000      	beq.n	8007c34 <HAL_SPI_TransmitReceive+0x168>
 8007c32:	e06d      	b.n	8007d10 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c38:	881a      	ldrh	r2, [r3, #0]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c44:	1c9a      	adds	r2, r3, #2
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c58:	e05a      	b.n	8007d10 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	2202      	movs	r2, #2
 8007c62:	4013      	ands	r3, r2
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d11b      	bne.n	8007ca0 <HAL_SPI_TransmitReceive+0x1d4>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d016      	beq.n	8007ca0 <HAL_SPI_TransmitReceive+0x1d4>
 8007c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d113      	bne.n	8007ca0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c7c:	881a      	ldrh	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c88:	1c9a      	adds	r2, r3, #2
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	3b01      	subs	r3, #1
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	4013      	ands	r3, r2
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d11c      	bne.n	8007ce8 <HAL_SPI_TransmitReceive+0x21c>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2246      	movs	r2, #70	@ 0x46
 8007cb2:	5a9b      	ldrh	r3, [r3, r2]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d016      	beq.n	8007ce8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc4:	b292      	uxth	r2, r2
 8007cc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ccc:	1c9a      	adds	r2, r3, #2
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2246      	movs	r2, #70	@ 0x46
 8007cd6:	5a9b      	ldrh	r3, [r3, r2]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	b299      	uxth	r1, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2246      	movs	r2, #70	@ 0x46
 8007ce2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ce8:	f7fb fdc8 	bl	800387c <HAL_GetTick>
 8007cec:	0002      	movs	r2, r0
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d80b      	bhi.n	8007d10 <HAL_SPI_TransmitReceive+0x244>
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	d008      	beq.n	8007d10 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8007cfe:	2323      	movs	r3, #35	@ 0x23
 8007d00:	18fb      	adds	r3, r7, r3
 8007d02:	2203      	movs	r2, #3
 8007d04:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	225d      	movs	r2, #93	@ 0x5d
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	5499      	strb	r1, [r3, r2]
        goto error;
 8007d0e:	e0b1      	b.n	8007e74 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d19f      	bne.n	8007c5a <HAL_SPI_TransmitReceive+0x18e>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2246      	movs	r2, #70	@ 0x46
 8007d1e:	5a9b      	ldrh	r3, [r3, r2]
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d199      	bne.n	8007c5a <HAL_SPI_TransmitReceive+0x18e>
 8007d26:	e089      	b.n	8007e3c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d005      	beq.n	8007d3c <HAL_SPI_TransmitReceive+0x270>
 8007d30:	2312      	movs	r3, #18
 8007d32:	18fb      	adds	r3, r7, r3
 8007d34:	881b      	ldrh	r3, [r3, #0]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d000      	beq.n	8007d3c <HAL_SPI_TransmitReceive+0x270>
 8007d3a:	e074      	b.n	8007e26 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	330c      	adds	r3, #12
 8007d46:	7812      	ldrb	r2, [r2, #0]
 8007d48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d62:	e060      	b.n	8007e26 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d11c      	bne.n	8007dac <HAL_SPI_TransmitReceive+0x2e0>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d017      	beq.n	8007dac <HAL_SPI_TransmitReceive+0x2e0>
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d114      	bne.n	8007dac <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	330c      	adds	r3, #12
 8007d8c:	7812      	ldrb	r2, [r2, #0]
 8007d8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d94:	1c5a      	adds	r2, r3, #1
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	3b01      	subs	r3, #1
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007da8:	2300      	movs	r3, #0
 8007daa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	2201      	movs	r2, #1
 8007db4:	4013      	ands	r3, r2
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d11e      	bne.n	8007df8 <HAL_SPI_TransmitReceive+0x32c>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2246      	movs	r2, #70	@ 0x46
 8007dbe:	5a9b      	ldrh	r3, [r3, r2]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d018      	beq.n	8007df8 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	330c      	adds	r3, #12
 8007dcc:	001a      	movs	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd2:	7812      	ldrb	r2, [r2, #0]
 8007dd4:	b2d2      	uxtb	r2, r2
 8007dd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ddc:	1c5a      	adds	r2, r3, #1
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2246      	movs	r2, #70	@ 0x46
 8007de6:	5a9b      	ldrh	r3, [r3, r2]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	3b01      	subs	r3, #1
 8007dec:	b299      	uxth	r1, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2246      	movs	r2, #70	@ 0x46
 8007df2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007df4:	2301      	movs	r3, #1
 8007df6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007df8:	f7fb fd40 	bl	800387c <HAL_GetTick>
 8007dfc:	0002      	movs	r2, r0
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d802      	bhi.n	8007e0e <HAL_SPI_TransmitReceive+0x342>
 8007e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	d102      	bne.n	8007e14 <HAL_SPI_TransmitReceive+0x348>
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d108      	bne.n	8007e26 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8007e14:	2323      	movs	r3, #35	@ 0x23
 8007e16:	18fb      	adds	r3, r7, r3
 8007e18:	2203      	movs	r2, #3
 8007e1a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	225d      	movs	r2, #93	@ 0x5d
 8007e20:	2101      	movs	r1, #1
 8007e22:	5499      	strb	r1, [r3, r2]
        goto error;
 8007e24:	e026      	b.n	8007e74 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d199      	bne.n	8007d64 <HAL_SPI_TransmitReceive+0x298>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2246      	movs	r2, #70	@ 0x46
 8007e34:	5a9b      	ldrh	r3, [r3, r2]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d193      	bne.n	8007d64 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e3c:	69fa      	ldr	r2, [r7, #28]
 8007e3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	0018      	movs	r0, r3
 8007e44:	f000 f9b2 	bl	80081ac <SPI_EndRxTxTransaction>
 8007e48:	1e03      	subs	r3, r0, #0
 8007e4a:	d006      	beq.n	8007e5a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8007e4c:	2323      	movs	r3, #35	@ 0x23
 8007e4e:	18fb      	adds	r3, r7, r3
 8007e50:	2201      	movs	r2, #1
 8007e52:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2220      	movs	r2, #32
 8007e58:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d004      	beq.n	8007e6c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8007e62:	2323      	movs	r3, #35	@ 0x23
 8007e64:	18fb      	adds	r3, r7, r3
 8007e66:	2201      	movs	r2, #1
 8007e68:	701a      	strb	r2, [r3, #0]
 8007e6a:	e003      	b.n	8007e74 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	225d      	movs	r2, #93	@ 0x5d
 8007e70:	2101      	movs	r1, #1
 8007e72:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	225c      	movs	r2, #92	@ 0x5c
 8007e78:	2100      	movs	r1, #0
 8007e7a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007e7c:	2323      	movs	r3, #35	@ 0x23
 8007e7e:	18fb      	adds	r3, r7, r3
 8007e80:	781b      	ldrb	r3, [r3, #0]
}
 8007e82:	0018      	movs	r0, r3
 8007e84:	46bd      	mov	sp, r7
 8007e86:	b00a      	add	sp, #40	@ 0x28
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	46c0      	nop			@ (mov r8, r8)
 8007e8c:	ffffefff 	.word	0xffffefff

08007e90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b088      	sub	sp, #32
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	603b      	str	r3, [r7, #0]
 8007e9c:	1dfb      	adds	r3, r7, #7
 8007e9e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ea0:	f7fb fcec 	bl	800387c <HAL_GetTick>
 8007ea4:	0002      	movs	r2, r0
 8007ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea8:	1a9b      	subs	r3, r3, r2
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	18d3      	adds	r3, r2, r3
 8007eae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007eb0:	f7fb fce4 	bl	800387c <HAL_GetTick>
 8007eb4:	0003      	movs	r3, r0
 8007eb6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007eb8:	4b3a      	ldr	r3, [pc, #232]	@ (8007fa4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	015b      	lsls	r3, r3, #5
 8007ebe:	0d1b      	lsrs	r3, r3, #20
 8007ec0:	69fa      	ldr	r2, [r7, #28]
 8007ec2:	4353      	muls	r3, r2
 8007ec4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ec6:	e058      	b.n	8007f7a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	d055      	beq.n	8007f7a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ece:	f7fb fcd5 	bl	800387c <HAL_GetTick>
 8007ed2:	0002      	movs	r2, r0
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	69fa      	ldr	r2, [r7, #28]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d902      	bls.n	8007ee4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d142      	bne.n	8007f6a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	21e0      	movs	r1, #224	@ 0xe0
 8007ef0:	438a      	bics	r2, r1
 8007ef2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	2382      	movs	r3, #130	@ 0x82
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d113      	bne.n	8007f28 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	689a      	ldr	r2, [r3, #8]
 8007f04:	2380      	movs	r3, #128	@ 0x80
 8007f06:	021b      	lsls	r3, r3, #8
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d005      	beq.n	8007f18 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	2380      	movs	r3, #128	@ 0x80
 8007f12:	00db      	lsls	r3, r3, #3
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d107      	bne.n	8007f28 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2140      	movs	r1, #64	@ 0x40
 8007f24:	438a      	bics	r2, r1
 8007f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f2c:	2380      	movs	r3, #128	@ 0x80
 8007f2e:	019b      	lsls	r3, r3, #6
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d110      	bne.n	8007f56 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	491a      	ldr	r1, [pc, #104]	@ (8007fa8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007f40:	400a      	ands	r2, r1
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2180      	movs	r1, #128	@ 0x80
 8007f50:	0189      	lsls	r1, r1, #6
 8007f52:	430a      	orrs	r2, r1
 8007f54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	225d      	movs	r2, #93	@ 0x5d
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	225c      	movs	r2, #92	@ 0x5c
 8007f62:	2100      	movs	r1, #0
 8007f64:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e017      	b.n	8007f9a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	3b01      	subs	r3, #1
 8007f78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	4013      	ands	r3, r2
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	425a      	negs	r2, r3
 8007f8a:	4153      	adcs	r3, r2
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	001a      	movs	r2, r3
 8007f90:	1dfb      	adds	r3, r7, #7
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d197      	bne.n	8007ec8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	0018      	movs	r0, r3
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	b008      	add	sp, #32
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	46c0      	nop			@ (mov r8, r8)
 8007fa4:	2000008c 	.word	0x2000008c
 8007fa8:	ffffdfff 	.word	0xffffdfff

08007fac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08a      	sub	sp, #40	@ 0x28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007fba:	2317      	movs	r3, #23
 8007fbc:	18fb      	adds	r3, r7, r3
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007fc2:	f7fb fc5b 	bl	800387c <HAL_GetTick>
 8007fc6:	0002      	movs	r2, r0
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fca:	1a9b      	subs	r3, r3, r2
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	18d3      	adds	r3, r2, r3
 8007fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007fd2:	f7fb fc53 	bl	800387c <HAL_GetTick>
 8007fd6:	0003      	movs	r3, r0
 8007fd8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	330c      	adds	r3, #12
 8007fe0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007fe2:	4b41      	ldr	r3, [pc, #260]	@ (80080e8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	0013      	movs	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	189b      	adds	r3, r3, r2
 8007fec:	00da      	lsls	r2, r3, #3
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	0d1b      	lsrs	r3, r3, #20
 8007ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ff4:	4353      	muls	r3, r2
 8007ff6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007ff8:	e068      	b.n	80080cc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	23c0      	movs	r3, #192	@ 0xc0
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	429a      	cmp	r2, r3
 8008002:	d10a      	bne.n	800801a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d107      	bne.n	800801a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	b2da      	uxtb	r2, r3
 8008010:	2117      	movs	r1, #23
 8008012:	187b      	adds	r3, r7, r1
 8008014:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008016:	187b      	adds	r3, r7, r1
 8008018:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	3301      	adds	r3, #1
 800801e:	d055      	beq.n	80080cc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008020:	f7fb fc2c 	bl	800387c <HAL_GetTick>
 8008024:	0002      	movs	r2, r0
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800802c:	429a      	cmp	r2, r3
 800802e:	d902      	bls.n	8008036 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008032:	2b00      	cmp	r3, #0
 8008034:	d142      	bne.n	80080bc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	21e0      	movs	r1, #224	@ 0xe0
 8008042:	438a      	bics	r2, r1
 8008044:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	2382      	movs	r3, #130	@ 0x82
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	429a      	cmp	r2, r3
 8008050:	d113      	bne.n	800807a <SPI_WaitFifoStateUntilTimeout+0xce>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	689a      	ldr	r2, [r3, #8]
 8008056:	2380      	movs	r3, #128	@ 0x80
 8008058:	021b      	lsls	r3, r3, #8
 800805a:	429a      	cmp	r2, r3
 800805c:	d005      	beq.n	800806a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	689a      	ldr	r2, [r3, #8]
 8008062:	2380      	movs	r3, #128	@ 0x80
 8008064:	00db      	lsls	r3, r3, #3
 8008066:	429a      	cmp	r2, r3
 8008068:	d107      	bne.n	800807a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2140      	movs	r1, #64	@ 0x40
 8008076:	438a      	bics	r2, r1
 8008078:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800807e:	2380      	movs	r3, #128	@ 0x80
 8008080:	019b      	lsls	r3, r3, #6
 8008082:	429a      	cmp	r2, r3
 8008084:	d110      	bne.n	80080a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4916      	ldr	r1, [pc, #88]	@ (80080ec <SPI_WaitFifoStateUntilTimeout+0x140>)
 8008092:	400a      	ands	r2, r1
 8008094:	601a      	str	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2180      	movs	r1, #128	@ 0x80
 80080a2:	0189      	lsls	r1, r1, #6
 80080a4:	430a      	orrs	r2, r1
 80080a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	225d      	movs	r2, #93	@ 0x5d
 80080ac:	2101      	movs	r1, #1
 80080ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	225c      	movs	r2, #92	@ 0x5c
 80080b4:	2100      	movs	r1, #0
 80080b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e010      	b.n	80080de <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	4013      	ands	r3, r2
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d18e      	bne.n	8007ffa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	0018      	movs	r0, r3
 80080e0:	46bd      	mov	sp, r7
 80080e2:	b00a      	add	sp, #40	@ 0x28
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	46c0      	nop			@ (mov r8, r8)
 80080e8:	2000008c 	.word	0x2000008c
 80080ec:	ffffdfff 	.word	0xffffdfff

080080f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af02      	add	r7, sp, #8
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	685a      	ldr	r2, [r3, #4]
 8008100:	2382      	movs	r3, #130	@ 0x82
 8008102:	005b      	lsls	r3, r3, #1
 8008104:	429a      	cmp	r2, r3
 8008106:	d113      	bne.n	8008130 <SPI_EndRxTransaction+0x40>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	689a      	ldr	r2, [r3, #8]
 800810c:	2380      	movs	r3, #128	@ 0x80
 800810e:	021b      	lsls	r3, r3, #8
 8008110:	429a      	cmp	r2, r3
 8008112:	d005      	beq.n	8008120 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	689a      	ldr	r2, [r3, #8]
 8008118:	2380      	movs	r3, #128	@ 0x80
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	429a      	cmp	r2, r3
 800811e:	d107      	bne.n	8008130 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2140      	movs	r1, #64	@ 0x40
 800812c:	438a      	bics	r2, r1
 800812e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	0013      	movs	r3, r2
 800813a:	2200      	movs	r2, #0
 800813c:	2180      	movs	r1, #128	@ 0x80
 800813e:	f7ff fea7 	bl	8007e90 <SPI_WaitFlagStateUntilTimeout>
 8008142:	1e03      	subs	r3, r0, #0
 8008144:	d007      	beq.n	8008156 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800814a:	2220      	movs	r2, #32
 800814c:	431a      	orrs	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e026      	b.n	80081a4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	2382      	movs	r3, #130	@ 0x82
 800815c:	005b      	lsls	r3, r3, #1
 800815e:	429a      	cmp	r2, r3
 8008160:	d11f      	bne.n	80081a2 <SPI_EndRxTransaction+0xb2>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	689a      	ldr	r2, [r3, #8]
 8008166:	2380      	movs	r3, #128	@ 0x80
 8008168:	021b      	lsls	r3, r3, #8
 800816a:	429a      	cmp	r2, r3
 800816c:	d005      	beq.n	800817a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	2380      	movs	r3, #128	@ 0x80
 8008174:	00db      	lsls	r3, r3, #3
 8008176:	429a      	cmp	r2, r3
 8008178:	d113      	bne.n	80081a2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	23c0      	movs	r3, #192	@ 0xc0
 800817e:	00d9      	lsls	r1, r3, #3
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	0013      	movs	r3, r2
 8008188:	2200      	movs	r2, #0
 800818a:	f7ff ff0f 	bl	8007fac <SPI_WaitFifoStateUntilTimeout>
 800818e:	1e03      	subs	r3, r0, #0
 8008190:	d007      	beq.n	80081a2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008196:	2220      	movs	r2, #32
 8008198:	431a      	orrs	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e000      	b.n	80081a4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	0018      	movs	r0, r3
 80081a6:	46bd      	mov	sp, r7
 80081a8:	b004      	add	sp, #16
 80081aa:	bd80      	pop	{r7, pc}

080081ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af02      	add	r7, sp, #8
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	23c0      	movs	r3, #192	@ 0xc0
 80081bc:	0159      	lsls	r1, r3, #5
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	0013      	movs	r3, r2
 80081c6:	2200      	movs	r2, #0
 80081c8:	f7ff fef0 	bl	8007fac <SPI_WaitFifoStateUntilTimeout>
 80081cc:	1e03      	subs	r3, r0, #0
 80081ce:	d007      	beq.n	80081e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081d4:	2220      	movs	r2, #32
 80081d6:	431a      	orrs	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e027      	b.n	8008230 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	0013      	movs	r3, r2
 80081ea:	2200      	movs	r2, #0
 80081ec:	2180      	movs	r1, #128	@ 0x80
 80081ee:	f7ff fe4f 	bl	8007e90 <SPI_WaitFlagStateUntilTimeout>
 80081f2:	1e03      	subs	r3, r0, #0
 80081f4:	d007      	beq.n	8008206 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081fa:	2220      	movs	r2, #32
 80081fc:	431a      	orrs	r2, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e014      	b.n	8008230 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	23c0      	movs	r3, #192	@ 0xc0
 800820a:	00d9      	lsls	r1, r3, #3
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	0013      	movs	r3, r2
 8008214:	2200      	movs	r2, #0
 8008216:	f7ff fec9 	bl	8007fac <SPI_WaitFifoStateUntilTimeout>
 800821a:	1e03      	subs	r3, r0, #0
 800821c:	d007      	beq.n	800822e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008222:	2220      	movs	r2, #32
 8008224:	431a      	orrs	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e000      	b.n	8008230 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	0018      	movs	r0, r3
 8008232:	46bd      	mov	sp, r7
 8008234:	b004      	add	sp, #16
 8008236:	bd80      	pop	{r7, pc}

08008238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e04a      	b.n	80082e0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	223d      	movs	r2, #61	@ 0x3d
 800824e:	5c9b      	ldrb	r3, [r3, r2]
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d107      	bne.n	8008266 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	223c      	movs	r2, #60	@ 0x3c
 800825a:	2100      	movs	r1, #0
 800825c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	0018      	movs	r0, r3
 8008262:	f7fb f96d 	bl	8003540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	223d      	movs	r2, #61	@ 0x3d
 800826a:	2102      	movs	r1, #2
 800826c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	3304      	adds	r3, #4
 8008276:	0019      	movs	r1, r3
 8008278:	0010      	movs	r0, r2
 800827a:	f000 fc87 	bl	8008b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2248      	movs	r2, #72	@ 0x48
 8008282:	2101      	movs	r1, #1
 8008284:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	223e      	movs	r2, #62	@ 0x3e
 800828a:	2101      	movs	r1, #1
 800828c:	5499      	strb	r1, [r3, r2]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	223f      	movs	r2, #63	@ 0x3f
 8008292:	2101      	movs	r1, #1
 8008294:	5499      	strb	r1, [r3, r2]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2240      	movs	r2, #64	@ 0x40
 800829a:	2101      	movs	r1, #1
 800829c:	5499      	strb	r1, [r3, r2]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2241      	movs	r2, #65	@ 0x41
 80082a2:	2101      	movs	r1, #1
 80082a4:	5499      	strb	r1, [r3, r2]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2242      	movs	r2, #66	@ 0x42
 80082aa:	2101      	movs	r1, #1
 80082ac:	5499      	strb	r1, [r3, r2]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2243      	movs	r2, #67	@ 0x43
 80082b2:	2101      	movs	r1, #1
 80082b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2244      	movs	r2, #68	@ 0x44
 80082ba:	2101      	movs	r1, #1
 80082bc:	5499      	strb	r1, [r3, r2]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2245      	movs	r2, #69	@ 0x45
 80082c2:	2101      	movs	r1, #1
 80082c4:	5499      	strb	r1, [r3, r2]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2246      	movs	r2, #70	@ 0x46
 80082ca:	2101      	movs	r1, #1
 80082cc:	5499      	strb	r1, [r3, r2]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2247      	movs	r2, #71	@ 0x47
 80082d2:	2101      	movs	r1, #1
 80082d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	223d      	movs	r2, #61	@ 0x3d
 80082da:	2101      	movs	r1, #1
 80082dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	0018      	movs	r0, r3
 80082e2:	46bd      	mov	sp, r7
 80082e4:	b002      	add	sp, #8
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	223d      	movs	r2, #61	@ 0x3d
 80082f4:	5c9b      	ldrb	r3, [r3, r2]
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d001      	beq.n	8008300 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e035      	b.n	800836c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	223d      	movs	r2, #61	@ 0x3d
 8008304:	2102      	movs	r1, #2
 8008306:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a19      	ldr	r2, [pc, #100]	@ (8008374 <HAL_TIM_Base_Start+0x8c>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d00a      	beq.n	8008328 <HAL_TIM_Base_Start+0x40>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	2380      	movs	r3, #128	@ 0x80
 8008318:	05db      	lsls	r3, r3, #23
 800831a:	429a      	cmp	r2, r3
 800831c:	d004      	beq.n	8008328 <HAL_TIM_Base_Start+0x40>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a15      	ldr	r2, [pc, #84]	@ (8008378 <HAL_TIM_Base_Start+0x90>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d116      	bne.n	8008356 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	4a13      	ldr	r2, [pc, #76]	@ (800837c <HAL_TIM_Base_Start+0x94>)
 8008330:	4013      	ands	r3, r2
 8008332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b06      	cmp	r3, #6
 8008338:	d016      	beq.n	8008368 <HAL_TIM_Base_Start+0x80>
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	2380      	movs	r3, #128	@ 0x80
 800833e:	025b      	lsls	r3, r3, #9
 8008340:	429a      	cmp	r2, r3
 8008342:	d011      	beq.n	8008368 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2101      	movs	r1, #1
 8008350:	430a      	orrs	r2, r1
 8008352:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008354:	e008      	b.n	8008368 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2101      	movs	r1, #1
 8008362:	430a      	orrs	r2, r1
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	e000      	b.n	800836a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008368:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	0018      	movs	r0, r3
 800836e:	46bd      	mov	sp, r7
 8008370:	b004      	add	sp, #16
 8008372:	bd80      	pop	{r7, pc}
 8008374:	40012c00 	.word	0x40012c00
 8008378:	40000400 	.word	0x40000400
 800837c:	00010007 	.word	0x00010007

08008380 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	4a0d      	ldr	r2, [pc, #52]	@ (80083c4 <HAL_TIM_Base_Stop+0x44>)
 8008390:	4013      	ands	r3, r2
 8008392:	d10d      	bne.n	80083b0 <HAL_TIM_Base_Stop+0x30>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	4a0b      	ldr	r2, [pc, #44]	@ (80083c8 <HAL_TIM_Base_Stop+0x48>)
 800839c:	4013      	ands	r3, r2
 800839e:	d107      	bne.n	80083b0 <HAL_TIM_Base_Stop+0x30>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2101      	movs	r1, #1
 80083ac:	438a      	bics	r2, r1
 80083ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	223d      	movs	r2, #61	@ 0x3d
 80083b4:	2101      	movs	r1, #1
 80083b6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	0018      	movs	r0, r3
 80083bc:	46bd      	mov	sp, r7
 80083be:	b002      	add	sp, #8
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	46c0      	nop			@ (mov r8, r8)
 80083c4:	00001111 	.word	0x00001111
 80083c8:	00000444 	.word	0x00000444

080083cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	223d      	movs	r2, #61	@ 0x3d
 80083d8:	5c9b      	ldrb	r3, [r3, r2]
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d001      	beq.n	80083e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e03d      	b.n	8008460 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	223d      	movs	r2, #61	@ 0x3d
 80083e8:	2102      	movs	r1, #2
 80083ea:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2101      	movs	r1, #1
 80083f8:	430a      	orrs	r2, r1
 80083fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a19      	ldr	r2, [pc, #100]	@ (8008468 <HAL_TIM_Base_Start_IT+0x9c>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d00a      	beq.n	800841c <HAL_TIM_Base_Start_IT+0x50>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	2380      	movs	r3, #128	@ 0x80
 800840c:	05db      	lsls	r3, r3, #23
 800840e:	429a      	cmp	r2, r3
 8008410:	d004      	beq.n	800841c <HAL_TIM_Base_Start_IT+0x50>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a15      	ldr	r2, [pc, #84]	@ (800846c <HAL_TIM_Base_Start_IT+0xa0>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d116      	bne.n	800844a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	4a13      	ldr	r2, [pc, #76]	@ (8008470 <HAL_TIM_Base_Start_IT+0xa4>)
 8008424:	4013      	ands	r3, r2
 8008426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2b06      	cmp	r3, #6
 800842c:	d016      	beq.n	800845c <HAL_TIM_Base_Start_IT+0x90>
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	2380      	movs	r3, #128	@ 0x80
 8008432:	025b      	lsls	r3, r3, #9
 8008434:	429a      	cmp	r2, r3
 8008436:	d011      	beq.n	800845c <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2101      	movs	r1, #1
 8008444:	430a      	orrs	r2, r1
 8008446:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008448:	e008      	b.n	800845c <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2101      	movs	r1, #1
 8008456:	430a      	orrs	r2, r1
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	e000      	b.n	800845e <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800845c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	0018      	movs	r0, r3
 8008462:	46bd      	mov	sp, r7
 8008464:	b004      	add	sp, #16
 8008466:	bd80      	pop	{r7, pc}
 8008468:	40012c00 	.word	0x40012c00
 800846c:	40000400 	.word	0x40000400
 8008470:	00010007 	.word	0x00010007

08008474 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68da      	ldr	r2, [r3, #12]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2101      	movs	r1, #1
 8008488:	438a      	bics	r2, r1
 800848a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	4a0d      	ldr	r2, [pc, #52]	@ (80084c8 <HAL_TIM_Base_Stop_IT+0x54>)
 8008494:	4013      	ands	r3, r2
 8008496:	d10d      	bne.n	80084b4 <HAL_TIM_Base_Stop_IT+0x40>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	4a0b      	ldr	r2, [pc, #44]	@ (80084cc <HAL_TIM_Base_Stop_IT+0x58>)
 80084a0:	4013      	ands	r3, r2
 80084a2:	d107      	bne.n	80084b4 <HAL_TIM_Base_Stop_IT+0x40>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2101      	movs	r1, #1
 80084b0:	438a      	bics	r2, r1
 80084b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	223d      	movs	r2, #61	@ 0x3d
 80084b8:	2101      	movs	r1, #1
 80084ba:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	0018      	movs	r0, r3
 80084c0:	46bd      	mov	sp, r7
 80084c2:	b002      	add	sp, #8
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	46c0      	nop			@ (mov r8, r8)
 80084c8:	00001111 	.word	0x00001111
 80084cc:	00000444 	.word	0x00000444

080084d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e04a      	b.n	8008578 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	223d      	movs	r2, #61	@ 0x3d
 80084e6:	5c9b      	ldrb	r3, [r3, r2]
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d107      	bne.n	80084fe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	223c      	movs	r2, #60	@ 0x3c
 80084f2:	2100      	movs	r1, #0
 80084f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	0018      	movs	r0, r3
 80084fa:	f7fb f805 	bl	8003508 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	223d      	movs	r2, #61	@ 0x3d
 8008502:	2102      	movs	r1, #2
 8008504:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	3304      	adds	r3, #4
 800850e:	0019      	movs	r1, r3
 8008510:	0010      	movs	r0, r2
 8008512:	f000 fb3b 	bl	8008b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2248      	movs	r2, #72	@ 0x48
 800851a:	2101      	movs	r1, #1
 800851c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	223e      	movs	r2, #62	@ 0x3e
 8008522:	2101      	movs	r1, #1
 8008524:	5499      	strb	r1, [r3, r2]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	223f      	movs	r2, #63	@ 0x3f
 800852a:	2101      	movs	r1, #1
 800852c:	5499      	strb	r1, [r3, r2]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2240      	movs	r2, #64	@ 0x40
 8008532:	2101      	movs	r1, #1
 8008534:	5499      	strb	r1, [r3, r2]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2241      	movs	r2, #65	@ 0x41
 800853a:	2101      	movs	r1, #1
 800853c:	5499      	strb	r1, [r3, r2]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2242      	movs	r2, #66	@ 0x42
 8008542:	2101      	movs	r1, #1
 8008544:	5499      	strb	r1, [r3, r2]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2243      	movs	r2, #67	@ 0x43
 800854a:	2101      	movs	r1, #1
 800854c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2244      	movs	r2, #68	@ 0x44
 8008552:	2101      	movs	r1, #1
 8008554:	5499      	strb	r1, [r3, r2]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2245      	movs	r2, #69	@ 0x45
 800855a:	2101      	movs	r1, #1
 800855c:	5499      	strb	r1, [r3, r2]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2246      	movs	r2, #70	@ 0x46
 8008562:	2101      	movs	r1, #1
 8008564:	5499      	strb	r1, [r3, r2]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2247      	movs	r2, #71	@ 0x47
 800856a:	2101      	movs	r1, #1
 800856c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	223d      	movs	r2, #61	@ 0x3d
 8008572:	2101      	movs	r1, #1
 8008574:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	0018      	movs	r0, r3
 800857a:	46bd      	mov	sp, r7
 800857c:	b002      	add	sp, #8
 800857e:	bd80      	pop	{r7, pc}

08008580 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d108      	bne.n	80085a2 <HAL_TIM_PWM_Start+0x22>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	223e      	movs	r2, #62	@ 0x3e
 8008594:	5c9b      	ldrb	r3, [r3, r2]
 8008596:	b2db      	uxtb	r3, r3
 8008598:	3b01      	subs	r3, #1
 800859a:	1e5a      	subs	r2, r3, #1
 800859c:	4193      	sbcs	r3, r2
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	e037      	b.n	8008612 <HAL_TIM_PWM_Start+0x92>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b04      	cmp	r3, #4
 80085a6:	d108      	bne.n	80085ba <HAL_TIM_PWM_Start+0x3a>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	223f      	movs	r2, #63	@ 0x3f
 80085ac:	5c9b      	ldrb	r3, [r3, r2]
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	3b01      	subs	r3, #1
 80085b2:	1e5a      	subs	r2, r3, #1
 80085b4:	4193      	sbcs	r3, r2
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	e02b      	b.n	8008612 <HAL_TIM_PWM_Start+0x92>
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2b08      	cmp	r3, #8
 80085be:	d108      	bne.n	80085d2 <HAL_TIM_PWM_Start+0x52>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2240      	movs	r2, #64	@ 0x40
 80085c4:	5c9b      	ldrb	r3, [r3, r2]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	3b01      	subs	r3, #1
 80085ca:	1e5a      	subs	r2, r3, #1
 80085cc:	4193      	sbcs	r3, r2
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	e01f      	b.n	8008612 <HAL_TIM_PWM_Start+0x92>
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b0c      	cmp	r3, #12
 80085d6:	d108      	bne.n	80085ea <HAL_TIM_PWM_Start+0x6a>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2241      	movs	r2, #65	@ 0x41
 80085dc:	5c9b      	ldrb	r3, [r3, r2]
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	3b01      	subs	r3, #1
 80085e2:	1e5a      	subs	r2, r3, #1
 80085e4:	4193      	sbcs	r3, r2
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	e013      	b.n	8008612 <HAL_TIM_PWM_Start+0x92>
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2b10      	cmp	r3, #16
 80085ee:	d108      	bne.n	8008602 <HAL_TIM_PWM_Start+0x82>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2242      	movs	r2, #66	@ 0x42
 80085f4:	5c9b      	ldrb	r3, [r3, r2]
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	3b01      	subs	r3, #1
 80085fa:	1e5a      	subs	r2, r3, #1
 80085fc:	4193      	sbcs	r3, r2
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	e007      	b.n	8008612 <HAL_TIM_PWM_Start+0x92>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2243      	movs	r2, #67	@ 0x43
 8008606:	5c9b      	ldrb	r3, [r3, r2]
 8008608:	b2db      	uxtb	r3, r3
 800860a:	3b01      	subs	r3, #1
 800860c:	1e5a      	subs	r2, r3, #1
 800860e:	4193      	sbcs	r3, r2
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d001      	beq.n	800861a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e081      	b.n	800871e <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d104      	bne.n	800862a <HAL_TIM_PWM_Start+0xaa>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	223e      	movs	r2, #62	@ 0x3e
 8008624:	2102      	movs	r1, #2
 8008626:	5499      	strb	r1, [r3, r2]
 8008628:	e023      	b.n	8008672 <HAL_TIM_PWM_Start+0xf2>
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2b04      	cmp	r3, #4
 800862e:	d104      	bne.n	800863a <HAL_TIM_PWM_Start+0xba>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	223f      	movs	r2, #63	@ 0x3f
 8008634:	2102      	movs	r1, #2
 8008636:	5499      	strb	r1, [r3, r2]
 8008638:	e01b      	b.n	8008672 <HAL_TIM_PWM_Start+0xf2>
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b08      	cmp	r3, #8
 800863e:	d104      	bne.n	800864a <HAL_TIM_PWM_Start+0xca>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2240      	movs	r2, #64	@ 0x40
 8008644:	2102      	movs	r1, #2
 8008646:	5499      	strb	r1, [r3, r2]
 8008648:	e013      	b.n	8008672 <HAL_TIM_PWM_Start+0xf2>
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b0c      	cmp	r3, #12
 800864e:	d104      	bne.n	800865a <HAL_TIM_PWM_Start+0xda>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2241      	movs	r2, #65	@ 0x41
 8008654:	2102      	movs	r1, #2
 8008656:	5499      	strb	r1, [r3, r2]
 8008658:	e00b      	b.n	8008672 <HAL_TIM_PWM_Start+0xf2>
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2b10      	cmp	r3, #16
 800865e:	d104      	bne.n	800866a <HAL_TIM_PWM_Start+0xea>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2242      	movs	r2, #66	@ 0x42
 8008664:	2102      	movs	r1, #2
 8008666:	5499      	strb	r1, [r3, r2]
 8008668:	e003      	b.n	8008672 <HAL_TIM_PWM_Start+0xf2>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2243      	movs	r2, #67	@ 0x43
 800866e:	2102      	movs	r1, #2
 8008670:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	2201      	movs	r2, #1
 800867a:	0018      	movs	r0, r3
 800867c:	f000 fda6 	bl	80091cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a28      	ldr	r2, [pc, #160]	@ (8008728 <HAL_TIM_PWM_Start+0x1a8>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d009      	beq.n	800869e <HAL_TIM_PWM_Start+0x11e>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a27      	ldr	r2, [pc, #156]	@ (800872c <HAL_TIM_PWM_Start+0x1ac>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d004      	beq.n	800869e <HAL_TIM_PWM_Start+0x11e>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a25      	ldr	r2, [pc, #148]	@ (8008730 <HAL_TIM_PWM_Start+0x1b0>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d101      	bne.n	80086a2 <HAL_TIM_PWM_Start+0x122>
 800869e:	2301      	movs	r3, #1
 80086a0:	e000      	b.n	80086a4 <HAL_TIM_PWM_Start+0x124>
 80086a2:	2300      	movs	r3, #0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d008      	beq.n	80086ba <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2180      	movs	r1, #128	@ 0x80
 80086b4:	0209      	lsls	r1, r1, #8
 80086b6:	430a      	orrs	r2, r1
 80086b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a1a      	ldr	r2, [pc, #104]	@ (8008728 <HAL_TIM_PWM_Start+0x1a8>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d00a      	beq.n	80086da <HAL_TIM_PWM_Start+0x15a>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	2380      	movs	r3, #128	@ 0x80
 80086ca:	05db      	lsls	r3, r3, #23
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d004      	beq.n	80086da <HAL_TIM_PWM_Start+0x15a>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a17      	ldr	r2, [pc, #92]	@ (8008734 <HAL_TIM_PWM_Start+0x1b4>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d116      	bne.n	8008708 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	4a15      	ldr	r2, [pc, #84]	@ (8008738 <HAL_TIM_PWM_Start+0x1b8>)
 80086e2:	4013      	ands	r3, r2
 80086e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b06      	cmp	r3, #6
 80086ea:	d016      	beq.n	800871a <HAL_TIM_PWM_Start+0x19a>
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	2380      	movs	r3, #128	@ 0x80
 80086f0:	025b      	lsls	r3, r3, #9
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d011      	beq.n	800871a <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2101      	movs	r1, #1
 8008702:	430a      	orrs	r2, r1
 8008704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008706:	e008      	b.n	800871a <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2101      	movs	r1, #1
 8008714:	430a      	orrs	r2, r1
 8008716:	601a      	str	r2, [r3, #0]
 8008718:	e000      	b.n	800871c <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800871a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	0018      	movs	r0, r3
 8008720:	46bd      	mov	sp, r7
 8008722:	b004      	add	sp, #16
 8008724:	bd80      	pop	{r7, pc}
 8008726:	46c0      	nop			@ (mov r8, r8)
 8008728:	40012c00 	.word	0x40012c00
 800872c:	40014400 	.word	0x40014400
 8008730:	40014800 	.word	0x40014800
 8008734:	40000400 	.word	0x40000400
 8008738:	00010007 	.word	0x00010007

0800873c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2202      	movs	r2, #2
 8008758:	4013      	ands	r3, r2
 800875a:	d021      	beq.n	80087a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2202      	movs	r2, #2
 8008760:	4013      	ands	r3, r2
 8008762:	d01d      	beq.n	80087a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2203      	movs	r2, #3
 800876a:	4252      	negs	r2, r2
 800876c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	2203      	movs	r2, #3
 800877c:	4013      	ands	r3, r2
 800877e:	d004      	beq.n	800878a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	0018      	movs	r0, r3
 8008784:	f000 f9ea 	bl	8008b5c <HAL_TIM_IC_CaptureCallback>
 8008788:	e007      	b.n	800879a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	0018      	movs	r0, r3
 800878e:	f000 f9dd 	bl	8008b4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	0018      	movs	r0, r3
 8008796:	f000 f9e9 	bl	8008b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	2204      	movs	r2, #4
 80087a4:	4013      	ands	r3, r2
 80087a6:	d022      	beq.n	80087ee <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2204      	movs	r2, #4
 80087ac:	4013      	ands	r3, r2
 80087ae:	d01e      	beq.n	80087ee <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2205      	movs	r2, #5
 80087b6:	4252      	negs	r2, r2
 80087b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2202      	movs	r2, #2
 80087be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	699a      	ldr	r2, [r3, #24]
 80087c6:	23c0      	movs	r3, #192	@ 0xc0
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4013      	ands	r3, r2
 80087cc:	d004      	beq.n	80087d8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	0018      	movs	r0, r3
 80087d2:	f000 f9c3 	bl	8008b5c <HAL_TIM_IC_CaptureCallback>
 80087d6:	e007      	b.n	80087e8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	0018      	movs	r0, r3
 80087dc:	f000 f9b6 	bl	8008b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	0018      	movs	r0, r3
 80087e4:	f000 f9c2 	bl	8008b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2208      	movs	r2, #8
 80087f2:	4013      	ands	r3, r2
 80087f4:	d021      	beq.n	800883a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2208      	movs	r2, #8
 80087fa:	4013      	ands	r3, r2
 80087fc:	d01d      	beq.n	800883a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2209      	movs	r2, #9
 8008804:	4252      	negs	r2, r2
 8008806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2204      	movs	r2, #4
 800880c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	69db      	ldr	r3, [r3, #28]
 8008814:	2203      	movs	r2, #3
 8008816:	4013      	ands	r3, r2
 8008818:	d004      	beq.n	8008824 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	0018      	movs	r0, r3
 800881e:	f000 f99d 	bl	8008b5c <HAL_TIM_IC_CaptureCallback>
 8008822:	e007      	b.n	8008834 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	0018      	movs	r0, r3
 8008828:	f000 f990 	bl	8008b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	0018      	movs	r0, r3
 8008830:	f000 f99c 	bl	8008b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	2210      	movs	r2, #16
 800883e:	4013      	ands	r3, r2
 8008840:	d022      	beq.n	8008888 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2210      	movs	r2, #16
 8008846:	4013      	ands	r3, r2
 8008848:	d01e      	beq.n	8008888 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2211      	movs	r2, #17
 8008850:	4252      	negs	r2, r2
 8008852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2208      	movs	r2, #8
 8008858:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	69da      	ldr	r2, [r3, #28]
 8008860:	23c0      	movs	r3, #192	@ 0xc0
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4013      	ands	r3, r2
 8008866:	d004      	beq.n	8008872 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	0018      	movs	r0, r3
 800886c:	f000 f976 	bl	8008b5c <HAL_TIM_IC_CaptureCallback>
 8008870:	e007      	b.n	8008882 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	0018      	movs	r0, r3
 8008876:	f000 f969 	bl	8008b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	0018      	movs	r0, r3
 800887e:	f000 f975 	bl	8008b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	2201      	movs	r2, #1
 800888c:	4013      	ands	r3, r2
 800888e:	d00c      	beq.n	80088aa <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2201      	movs	r2, #1
 8008894:	4013      	ands	r3, r2
 8008896:	d008      	beq.n	80088aa <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2202      	movs	r2, #2
 800889e:	4252      	negs	r2, r2
 80088a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	0018      	movs	r0, r3
 80088a6:	f7f9 fde1 	bl	800246c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2280      	movs	r2, #128	@ 0x80
 80088ae:	4013      	ands	r3, r2
 80088b0:	d104      	bne.n	80088bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	2380      	movs	r3, #128	@ 0x80
 80088b6:	019b      	lsls	r3, r3, #6
 80088b8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80088ba:	d00b      	beq.n	80088d4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2280      	movs	r2, #128	@ 0x80
 80088c0:	4013      	ands	r3, r2
 80088c2:	d007      	beq.n	80088d4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a1e      	ldr	r2, [pc, #120]	@ (8008944 <HAL_TIM_IRQHandler+0x208>)
 80088ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	0018      	movs	r0, r3
 80088d0:	f000 fd10 	bl	80092f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	2380      	movs	r3, #128	@ 0x80
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	4013      	ands	r3, r2
 80088dc:	d00b      	beq.n	80088f6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2280      	movs	r2, #128	@ 0x80
 80088e2:	4013      	ands	r3, r2
 80088e4:	d007      	beq.n	80088f6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a17      	ldr	r2, [pc, #92]	@ (8008948 <HAL_TIM_IRQHandler+0x20c>)
 80088ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	0018      	movs	r0, r3
 80088f2:	f000 fd07 	bl	8009304 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2240      	movs	r2, #64	@ 0x40
 80088fa:	4013      	ands	r3, r2
 80088fc:	d00c      	beq.n	8008918 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2240      	movs	r2, #64	@ 0x40
 8008902:	4013      	ands	r3, r2
 8008904:	d008      	beq.n	8008918 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2241      	movs	r2, #65	@ 0x41
 800890c:	4252      	negs	r2, r2
 800890e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	0018      	movs	r0, r3
 8008914:	f000 f932 	bl	8008b7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2220      	movs	r2, #32
 800891c:	4013      	ands	r3, r2
 800891e:	d00c      	beq.n	800893a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2220      	movs	r2, #32
 8008924:	4013      	ands	r3, r2
 8008926:	d008      	beq.n	800893a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2221      	movs	r2, #33	@ 0x21
 800892e:	4252      	negs	r2, r2
 8008930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	0018      	movs	r0, r3
 8008936:	f000 fcd5 	bl	80092e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800893a:	46c0      	nop			@ (mov r8, r8)
 800893c:	46bd      	mov	sp, r7
 800893e:	b004      	add	sp, #16
 8008940:	bd80      	pop	{r7, pc}
 8008942:	46c0      	nop			@ (mov r8, r8)
 8008944:	ffffdf7f 	.word	0xffffdf7f
 8008948:	fffffeff 	.word	0xfffffeff

0800894c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008958:	2317      	movs	r3, #23
 800895a:	18fb      	adds	r3, r7, r3
 800895c:	2200      	movs	r2, #0
 800895e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	223c      	movs	r2, #60	@ 0x3c
 8008964:	5c9b      	ldrb	r3, [r3, r2]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d101      	bne.n	800896e <HAL_TIM_PWM_ConfigChannel+0x22>
 800896a:	2302      	movs	r3, #2
 800896c:	e0e5      	b.n	8008b3a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	223c      	movs	r2, #60	@ 0x3c
 8008972:	2101      	movs	r1, #1
 8008974:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b14      	cmp	r3, #20
 800897a:	d900      	bls.n	800897e <HAL_TIM_PWM_ConfigChannel+0x32>
 800897c:	e0d1      	b.n	8008b22 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	009a      	lsls	r2, r3, #2
 8008982:	4b70      	ldr	r3, [pc, #448]	@ (8008b44 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8008984:	18d3      	adds	r3, r2, r3
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	0011      	movs	r1, r2
 8008992:	0018      	movs	r0, r3
 8008994:	f000 f97e 	bl	8008c94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	699a      	ldr	r2, [r3, #24]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2108      	movs	r1, #8
 80089a4:	430a      	orrs	r2, r1
 80089a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	699a      	ldr	r2, [r3, #24]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2104      	movs	r1, #4
 80089b4:	438a      	bics	r2, r1
 80089b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6999      	ldr	r1, [r3, #24]
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	691a      	ldr	r2, [r3, #16]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	619a      	str	r2, [r3, #24]
      break;
 80089ca:	e0af      	b.n	8008b2c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68ba      	ldr	r2, [r7, #8]
 80089d2:	0011      	movs	r1, r2
 80089d4:	0018      	movs	r0, r3
 80089d6:	f000 f9dd 	bl	8008d94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	699a      	ldr	r2, [r3, #24]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2180      	movs	r1, #128	@ 0x80
 80089e6:	0109      	lsls	r1, r1, #4
 80089e8:	430a      	orrs	r2, r1
 80089ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	699a      	ldr	r2, [r3, #24]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4954      	ldr	r1, [pc, #336]	@ (8008b48 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80089f8:	400a      	ands	r2, r1
 80089fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6999      	ldr	r1, [r3, #24]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	021a      	lsls	r2, r3, #8
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	619a      	str	r2, [r3, #24]
      break;
 8008a10:	e08c      	b.n	8008b2c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	0011      	movs	r1, r2
 8008a1a:	0018      	movs	r0, r3
 8008a1c:	f000 fa38 	bl	8008e90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	69da      	ldr	r2, [r3, #28]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2108      	movs	r1, #8
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	69da      	ldr	r2, [r3, #28]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2104      	movs	r1, #4
 8008a3c:	438a      	bics	r2, r1
 8008a3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	69d9      	ldr	r1, [r3, #28]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	691a      	ldr	r2, [r3, #16]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	61da      	str	r2, [r3, #28]
      break;
 8008a52:	e06b      	b.n	8008b2c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	0011      	movs	r1, r2
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	f000 fa99 	bl	8008f94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	69da      	ldr	r2, [r3, #28]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2180      	movs	r1, #128	@ 0x80
 8008a6e:	0109      	lsls	r1, r1, #4
 8008a70:	430a      	orrs	r2, r1
 8008a72:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	69da      	ldr	r2, [r3, #28]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4932      	ldr	r1, [pc, #200]	@ (8008b48 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008a80:	400a      	ands	r2, r1
 8008a82:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	69d9      	ldr	r1, [r3, #28]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	021a      	lsls	r2, r3, #8
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	430a      	orrs	r2, r1
 8008a96:	61da      	str	r2, [r3, #28]
      break;
 8008a98:	e048      	b.n	8008b2c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	0011      	movs	r1, r2
 8008aa2:	0018      	movs	r0, r3
 8008aa4:	f000 fada 	bl	800905c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2108      	movs	r1, #8
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2104      	movs	r1, #4
 8008ac4:	438a      	bics	r2, r1
 8008ac6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	691a      	ldr	r2, [r3, #16]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008ada:	e027      	b.n	8008b2c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	0011      	movs	r1, r2
 8008ae4:	0018      	movs	r0, r3
 8008ae6:	f000 fb13 	bl	8009110 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2180      	movs	r1, #128	@ 0x80
 8008af6:	0109      	lsls	r1, r1, #4
 8008af8:	430a      	orrs	r2, r1
 8008afa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4910      	ldr	r1, [pc, #64]	@ (8008b48 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008b08:	400a      	ands	r2, r1
 8008b0a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	021a      	lsls	r2, r3, #8
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	430a      	orrs	r2, r1
 8008b1e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008b20:	e004      	b.n	8008b2c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8008b22:	2317      	movs	r3, #23
 8008b24:	18fb      	adds	r3, r7, r3
 8008b26:	2201      	movs	r2, #1
 8008b28:	701a      	strb	r2, [r3, #0]
      break;
 8008b2a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	223c      	movs	r2, #60	@ 0x3c
 8008b30:	2100      	movs	r1, #0
 8008b32:	5499      	strb	r1, [r3, r2]

  return status;
 8008b34:	2317      	movs	r3, #23
 8008b36:	18fb      	adds	r3, r7, r3
 8008b38:	781b      	ldrb	r3, [r3, #0]
}
 8008b3a:	0018      	movs	r0, r3
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	b006      	add	sp, #24
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	46c0      	nop			@ (mov r8, r8)
 8008b44:	08009438 	.word	0x08009438
 8008b48:	fffffbff 	.word	0xfffffbff

08008b4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b54:	46c0      	nop			@ (mov r8, r8)
 8008b56:	46bd      	mov	sp, r7
 8008b58:	b002      	add	sp, #8
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b64:	46c0      	nop			@ (mov r8, r8)
 8008b66:	46bd      	mov	sp, r7
 8008b68:	b002      	add	sp, #8
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b74:	46c0      	nop			@ (mov r8, r8)
 8008b76:	46bd      	mov	sp, r7
 8008b78:	b002      	add	sp, #8
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b84:	46c0      	nop			@ (mov r8, r8)
 8008b86:	46bd      	mov	sp, r7
 8008b88:	b002      	add	sp, #8
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a37      	ldr	r2, [pc, #220]	@ (8008c7c <TIM_Base_SetConfig+0xf0>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d008      	beq.n	8008bb6 <TIM_Base_SetConfig+0x2a>
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	2380      	movs	r3, #128	@ 0x80
 8008ba8:	05db      	lsls	r3, r3, #23
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d003      	beq.n	8008bb6 <TIM_Base_SetConfig+0x2a>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a33      	ldr	r2, [pc, #204]	@ (8008c80 <TIM_Base_SetConfig+0xf4>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d108      	bne.n	8008bc8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2270      	movs	r2, #112	@ 0x70
 8008bba:	4393      	bics	r3, r2
 8008bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a2c      	ldr	r2, [pc, #176]	@ (8008c7c <TIM_Base_SetConfig+0xf0>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d014      	beq.n	8008bfa <TIM_Base_SetConfig+0x6e>
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	2380      	movs	r3, #128	@ 0x80
 8008bd4:	05db      	lsls	r3, r3, #23
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d00f      	beq.n	8008bfa <TIM_Base_SetConfig+0x6e>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a28      	ldr	r2, [pc, #160]	@ (8008c80 <TIM_Base_SetConfig+0xf4>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00b      	beq.n	8008bfa <TIM_Base_SetConfig+0x6e>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a27      	ldr	r2, [pc, #156]	@ (8008c84 <TIM_Base_SetConfig+0xf8>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d007      	beq.n	8008bfa <TIM_Base_SetConfig+0x6e>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a26      	ldr	r2, [pc, #152]	@ (8008c88 <TIM_Base_SetConfig+0xfc>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d003      	beq.n	8008bfa <TIM_Base_SetConfig+0x6e>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a25      	ldr	r2, [pc, #148]	@ (8008c8c <TIM_Base_SetConfig+0x100>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d108      	bne.n	8008c0c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	4a24      	ldr	r2, [pc, #144]	@ (8008c90 <TIM_Base_SetConfig+0x104>)
 8008bfe:	4013      	ands	r3, r2
 8008c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2280      	movs	r2, #128	@ 0x80
 8008c10:	4393      	bics	r3, r2
 8008c12:	001a      	movs	r2, r3
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	689a      	ldr	r2, [r3, #8]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a11      	ldr	r2, [pc, #68]	@ (8008c7c <TIM_Base_SetConfig+0xf0>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d007      	beq.n	8008c4a <TIM_Base_SetConfig+0xbe>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a12      	ldr	r2, [pc, #72]	@ (8008c88 <TIM_Base_SetConfig+0xfc>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d003      	beq.n	8008c4a <TIM_Base_SetConfig+0xbe>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a11      	ldr	r2, [pc, #68]	@ (8008c8c <TIM_Base_SetConfig+0x100>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d103      	bne.n	8008c52 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	691a      	ldr	r2, [r3, #16]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	4013      	ands	r3, r2
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d106      	bne.n	8008c72 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	4393      	bics	r3, r2
 8008c6c:	001a      	movs	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	611a      	str	r2, [r3, #16]
  }
}
 8008c72:	46c0      	nop			@ (mov r8, r8)
 8008c74:	46bd      	mov	sp, r7
 8008c76:	b004      	add	sp, #16
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	46c0      	nop			@ (mov r8, r8)
 8008c7c:	40012c00 	.word	0x40012c00
 8008c80:	40000400 	.word	0x40000400
 8008c84:	40002000 	.word	0x40002000
 8008c88:	40014400 	.word	0x40014400
 8008c8c:	40014800 	.word	0x40014800
 8008c90:	fffffcff 	.word	0xfffffcff

08008c94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b086      	sub	sp, #24
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a1b      	ldr	r3, [r3, #32]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	4393      	bics	r3, r2
 8008cac:	001a      	movs	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	4a2e      	ldr	r2, [pc, #184]	@ (8008d7c <TIM_OC1_SetConfig+0xe8>)
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2203      	movs	r2, #3
 8008cca:	4393      	bics	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	2202      	movs	r2, #2
 8008cdc:	4393      	bics	r3, r2
 8008cde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	697a      	ldr	r2, [r7, #20]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a24      	ldr	r2, [pc, #144]	@ (8008d80 <TIM_OC1_SetConfig+0xec>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d007      	beq.n	8008d02 <TIM_OC1_SetConfig+0x6e>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a23      	ldr	r2, [pc, #140]	@ (8008d84 <TIM_OC1_SetConfig+0xf0>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d003      	beq.n	8008d02 <TIM_OC1_SetConfig+0x6e>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a22      	ldr	r2, [pc, #136]	@ (8008d88 <TIM_OC1_SetConfig+0xf4>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d10c      	bne.n	8008d1c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2208      	movs	r2, #8
 8008d06:	4393      	bics	r3, r2
 8008d08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	2204      	movs	r2, #4
 8008d18:	4393      	bics	r3, r2
 8008d1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a18      	ldr	r2, [pc, #96]	@ (8008d80 <TIM_OC1_SetConfig+0xec>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d007      	beq.n	8008d34 <TIM_OC1_SetConfig+0xa0>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a17      	ldr	r2, [pc, #92]	@ (8008d84 <TIM_OC1_SetConfig+0xf0>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d003      	beq.n	8008d34 <TIM_OC1_SetConfig+0xa0>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a16      	ldr	r2, [pc, #88]	@ (8008d88 <TIM_OC1_SetConfig+0xf4>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d111      	bne.n	8008d58 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	4a15      	ldr	r2, [pc, #84]	@ (8008d8c <TIM_OC1_SetConfig+0xf8>)
 8008d38:	4013      	ands	r3, r2
 8008d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	4a14      	ldr	r2, [pc, #80]	@ (8008d90 <TIM_OC1_SetConfig+0xfc>)
 8008d40:	4013      	ands	r3, r2
 8008d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	685a      	ldr	r2, [r3, #4]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	621a      	str	r2, [r3, #32]
}
 8008d72:	46c0      	nop			@ (mov r8, r8)
 8008d74:	46bd      	mov	sp, r7
 8008d76:	b006      	add	sp, #24
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	46c0      	nop			@ (mov r8, r8)
 8008d7c:	fffeff8f 	.word	0xfffeff8f
 8008d80:	40012c00 	.word	0x40012c00
 8008d84:	40014400 	.word	0x40014400
 8008d88:	40014800 	.word	0x40014800
 8008d8c:	fffffeff 	.word	0xfffffeff
 8008d90:	fffffdff 	.word	0xfffffdff

08008d94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a1b      	ldr	r3, [r3, #32]
 8008da8:	2210      	movs	r2, #16
 8008daa:	4393      	bics	r3, r2
 8008dac:	001a      	movs	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	4a2c      	ldr	r2, [pc, #176]	@ (8008e74 <TIM_OC2_SetConfig+0xe0>)
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4a2b      	ldr	r2, [pc, #172]	@ (8008e78 <TIM_OC2_SetConfig+0xe4>)
 8008dca:	4013      	ands	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	021b      	lsls	r3, r3, #8
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2220      	movs	r2, #32
 8008dde:	4393      	bics	r3, r2
 8008de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	011b      	lsls	r3, r3, #4
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a22      	ldr	r2, [pc, #136]	@ (8008e7c <TIM_OC2_SetConfig+0xe8>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d10d      	bne.n	8008e12 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2280      	movs	r2, #128	@ 0x80
 8008dfa:	4393      	bics	r3, r2
 8008dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	011b      	lsls	r3, r3, #4
 8008e04:	697a      	ldr	r2, [r7, #20]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2240      	movs	r2, #64	@ 0x40
 8008e0e:	4393      	bics	r3, r2
 8008e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a19      	ldr	r2, [pc, #100]	@ (8008e7c <TIM_OC2_SetConfig+0xe8>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d007      	beq.n	8008e2a <TIM_OC2_SetConfig+0x96>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a18      	ldr	r2, [pc, #96]	@ (8008e80 <TIM_OC2_SetConfig+0xec>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d003      	beq.n	8008e2a <TIM_OC2_SetConfig+0x96>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a17      	ldr	r2, [pc, #92]	@ (8008e84 <TIM_OC2_SetConfig+0xf0>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d113      	bne.n	8008e52 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	4a16      	ldr	r2, [pc, #88]	@ (8008e88 <TIM_OC2_SetConfig+0xf4>)
 8008e2e:	4013      	ands	r3, r2
 8008e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	4a15      	ldr	r2, [pc, #84]	@ (8008e8c <TIM_OC2_SetConfig+0xf8>)
 8008e36:	4013      	ands	r3, r2
 8008e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	693a      	ldr	r2, [r7, #16]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	693a      	ldr	r2, [r7, #16]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	621a      	str	r2, [r3, #32]
}
 8008e6c:	46c0      	nop			@ (mov r8, r8)
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	b006      	add	sp, #24
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	feff8fff 	.word	0xfeff8fff
 8008e78:	fffffcff 	.word	0xfffffcff
 8008e7c:	40012c00 	.word	0x40012c00
 8008e80:	40014400 	.word	0x40014400
 8008e84:	40014800 	.word	0x40014800
 8008e88:	fffffbff 	.word	0xfffffbff
 8008e8c:	fffff7ff 	.word	0xfffff7ff

08008e90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a1b      	ldr	r3, [r3, #32]
 8008ea4:	4a31      	ldr	r2, [pc, #196]	@ (8008f6c <TIM_OC3_SetConfig+0xdc>)
 8008ea6:	401a      	ands	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	69db      	ldr	r3, [r3, #28]
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4a2d      	ldr	r2, [pc, #180]	@ (8008f70 <TIM_OC3_SetConfig+0xe0>)
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2203      	movs	r2, #3
 8008ec4:	4393      	bics	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	4a27      	ldr	r2, [pc, #156]	@ (8008f74 <TIM_OC3_SetConfig+0xe4>)
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	021b      	lsls	r3, r3, #8
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a23      	ldr	r2, [pc, #140]	@ (8008f78 <TIM_OC3_SetConfig+0xe8>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d10d      	bne.n	8008f0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	4a22      	ldr	r2, [pc, #136]	@ (8008f7c <TIM_OC3_SetConfig+0xec>)
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	021b      	lsls	r3, r3, #8
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	4a1e      	ldr	r2, [pc, #120]	@ (8008f80 <TIM_OC3_SetConfig+0xf0>)
 8008f06:	4013      	ands	r3, r2
 8008f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8008f78 <TIM_OC3_SetConfig+0xe8>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d007      	beq.n	8008f22 <TIM_OC3_SetConfig+0x92>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a1b      	ldr	r2, [pc, #108]	@ (8008f84 <TIM_OC3_SetConfig+0xf4>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d003      	beq.n	8008f22 <TIM_OC3_SetConfig+0x92>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a1a      	ldr	r2, [pc, #104]	@ (8008f88 <TIM_OC3_SetConfig+0xf8>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d113      	bne.n	8008f4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	4a19      	ldr	r2, [pc, #100]	@ (8008f8c <TIM_OC3_SetConfig+0xfc>)
 8008f26:	4013      	ands	r3, r2
 8008f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	4a18      	ldr	r2, [pc, #96]	@ (8008f90 <TIM_OC3_SetConfig+0x100>)
 8008f2e:	4013      	ands	r3, r2
 8008f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	011b      	lsls	r3, r3, #4
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	699b      	ldr	r3, [r3, #24]
 8008f42:	011b      	lsls	r3, r3, #4
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	685a      	ldr	r2, [r3, #4]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	621a      	str	r2, [r3, #32]
}
 8008f64:	46c0      	nop			@ (mov r8, r8)
 8008f66:	46bd      	mov	sp, r7
 8008f68:	b006      	add	sp, #24
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	fffffeff 	.word	0xfffffeff
 8008f70:	fffeff8f 	.word	0xfffeff8f
 8008f74:	fffffdff 	.word	0xfffffdff
 8008f78:	40012c00 	.word	0x40012c00
 8008f7c:	fffff7ff 	.word	0xfffff7ff
 8008f80:	fffffbff 	.word	0xfffffbff
 8008f84:	40014400 	.word	0x40014400
 8008f88:	40014800 	.word	0x40014800
 8008f8c:	ffffefff 	.word	0xffffefff
 8008f90:	ffffdfff 	.word	0xffffdfff

08008f94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a1b      	ldr	r3, [r3, #32]
 8008fa8:	4a24      	ldr	r2, [pc, #144]	@ (800903c <TIM_OC4_SetConfig+0xa8>)
 8008faa:	401a      	ands	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	69db      	ldr	r3, [r3, #28]
 8008fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4a20      	ldr	r2, [pc, #128]	@ (8009040 <TIM_OC4_SetConfig+0xac>)
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8009044 <TIM_OC4_SetConfig+0xb0>)
 8008fc8:	4013      	ands	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	021b      	lsls	r3, r3, #8
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	4a1b      	ldr	r2, [pc, #108]	@ (8009048 <TIM_OC4_SetConfig+0xb4>)
 8008fdc:	4013      	ands	r3, r2
 8008fde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	031b      	lsls	r3, r3, #12
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a17      	ldr	r2, [pc, #92]	@ (800904c <TIM_OC4_SetConfig+0xb8>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d007      	beq.n	8009004 <TIM_OC4_SetConfig+0x70>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a16      	ldr	r2, [pc, #88]	@ (8009050 <TIM_OC4_SetConfig+0xbc>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d003      	beq.n	8009004 <TIM_OC4_SetConfig+0x70>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a15      	ldr	r2, [pc, #84]	@ (8009054 <TIM_OC4_SetConfig+0xc0>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d109      	bne.n	8009018 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	4a14      	ldr	r2, [pc, #80]	@ (8009058 <TIM_OC4_SetConfig+0xc4>)
 8009008:	4013      	ands	r3, r2
 800900a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	019b      	lsls	r3, r3, #6
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	4313      	orrs	r3, r2
 8009016:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	697a      	ldr	r2, [r7, #20]
 800901c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	685a      	ldr	r2, [r3, #4]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	621a      	str	r2, [r3, #32]
}
 8009032:	46c0      	nop			@ (mov r8, r8)
 8009034:	46bd      	mov	sp, r7
 8009036:	b006      	add	sp, #24
 8009038:	bd80      	pop	{r7, pc}
 800903a:	46c0      	nop			@ (mov r8, r8)
 800903c:	ffffefff 	.word	0xffffefff
 8009040:	feff8fff 	.word	0xfeff8fff
 8009044:	fffffcff 	.word	0xfffffcff
 8009048:	ffffdfff 	.word	0xffffdfff
 800904c:	40012c00 	.word	0x40012c00
 8009050:	40014400 	.word	0x40014400
 8009054:	40014800 	.word	0x40014800
 8009058:	ffffbfff 	.word	0xffffbfff

0800905c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a1b      	ldr	r3, [r3, #32]
 8009070:	4a21      	ldr	r2, [pc, #132]	@ (80090f8 <TIM_OC5_SetConfig+0x9c>)
 8009072:	401a      	ands	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	4a1d      	ldr	r2, [pc, #116]	@ (80090fc <TIM_OC5_SetConfig+0xa0>)
 8009088:	4013      	ands	r3, r2
 800908a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	4313      	orrs	r3, r2
 8009094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	4a19      	ldr	r2, [pc, #100]	@ (8009100 <TIM_OC5_SetConfig+0xa4>)
 800909a:	4013      	ands	r3, r2
 800909c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	041b      	lsls	r3, r3, #16
 80090a4:	693a      	ldr	r2, [r7, #16]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a15      	ldr	r2, [pc, #84]	@ (8009104 <TIM_OC5_SetConfig+0xa8>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d007      	beq.n	80090c2 <TIM_OC5_SetConfig+0x66>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a14      	ldr	r2, [pc, #80]	@ (8009108 <TIM_OC5_SetConfig+0xac>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d003      	beq.n	80090c2 <TIM_OC5_SetConfig+0x66>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a13      	ldr	r2, [pc, #76]	@ (800910c <TIM_OC5_SetConfig+0xb0>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d109      	bne.n	80090d6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	4a0c      	ldr	r2, [pc, #48]	@ (80090f8 <TIM_OC5_SetConfig+0x9c>)
 80090c6:	4013      	ands	r3, r2
 80090c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	021b      	lsls	r3, r3, #8
 80090d0:	697a      	ldr	r2, [r7, #20]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	621a      	str	r2, [r3, #32]
}
 80090f0:	46c0      	nop			@ (mov r8, r8)
 80090f2:	46bd      	mov	sp, r7
 80090f4:	b006      	add	sp, #24
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	fffeffff 	.word	0xfffeffff
 80090fc:	fffeff8f 	.word	0xfffeff8f
 8009100:	fffdffff 	.word	0xfffdffff
 8009104:	40012c00 	.word	0x40012c00
 8009108:	40014400 	.word	0x40014400
 800910c:	40014800 	.word	0x40014800

08009110 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	4a22      	ldr	r2, [pc, #136]	@ (80091b0 <TIM_OC6_SetConfig+0xa0>)
 8009126:	401a      	ands	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	4a1e      	ldr	r2, [pc, #120]	@ (80091b4 <TIM_OC6_SetConfig+0xa4>)
 800913c:	4013      	ands	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	021b      	lsls	r3, r3, #8
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	4313      	orrs	r3, r2
 800914a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	4a1a      	ldr	r2, [pc, #104]	@ (80091b8 <TIM_OC6_SetConfig+0xa8>)
 8009150:	4013      	ands	r3, r2
 8009152:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	051b      	lsls	r3, r3, #20
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	4313      	orrs	r3, r2
 800915e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a16      	ldr	r2, [pc, #88]	@ (80091bc <TIM_OC6_SetConfig+0xac>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d007      	beq.n	8009178 <TIM_OC6_SetConfig+0x68>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a15      	ldr	r2, [pc, #84]	@ (80091c0 <TIM_OC6_SetConfig+0xb0>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d003      	beq.n	8009178 <TIM_OC6_SetConfig+0x68>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a14      	ldr	r2, [pc, #80]	@ (80091c4 <TIM_OC6_SetConfig+0xb4>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d109      	bne.n	800918c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	4a13      	ldr	r2, [pc, #76]	@ (80091c8 <TIM_OC6_SetConfig+0xb8>)
 800917c:	4013      	ands	r3, r2
 800917e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	695b      	ldr	r3, [r3, #20]
 8009184:	029b      	lsls	r3, r3, #10
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	4313      	orrs	r3, r2
 800918a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	621a      	str	r2, [r3, #32]
}
 80091a6:	46c0      	nop			@ (mov r8, r8)
 80091a8:	46bd      	mov	sp, r7
 80091aa:	b006      	add	sp, #24
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	46c0      	nop			@ (mov r8, r8)
 80091b0:	ffefffff 	.word	0xffefffff
 80091b4:	feff8fff 	.word	0xfeff8fff
 80091b8:	ffdfffff 	.word	0xffdfffff
 80091bc:	40012c00 	.word	0x40012c00
 80091c0:	40014400 	.word	0x40014400
 80091c4:	40014800 	.word	0x40014800
 80091c8:	fffbffff 	.word	0xfffbffff

080091cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b086      	sub	sp, #24
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	221f      	movs	r2, #31
 80091dc:	4013      	ands	r3, r2
 80091de:	2201      	movs	r2, #1
 80091e0:	409a      	lsls	r2, r3
 80091e2:	0013      	movs	r3, r2
 80091e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	43d2      	mvns	r2, r2
 80091ee:	401a      	ands	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6a1a      	ldr	r2, [r3, #32]
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	211f      	movs	r1, #31
 80091fc:	400b      	ands	r3, r1
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	4099      	lsls	r1, r3
 8009202:	000b      	movs	r3, r1
 8009204:	431a      	orrs	r2, r3
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	621a      	str	r2, [r3, #32]
}
 800920a:	46c0      	nop			@ (mov r8, r8)
 800920c:	46bd      	mov	sp, r7
 800920e:	b006      	add	sp, #24
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	223c      	movs	r2, #60	@ 0x3c
 8009222:	5c9b      	ldrb	r3, [r3, r2]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d101      	bne.n	800922c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009228:	2302      	movs	r3, #2
 800922a:	e050      	b.n	80092ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	223c      	movs	r2, #60	@ 0x3c
 8009230:	2101      	movs	r1, #1
 8009232:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	223d      	movs	r2, #61	@ 0x3d
 8009238:	2102      	movs	r1, #2
 800923a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a21      	ldr	r2, [pc, #132]	@ (80092d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d108      	bne.n	8009268 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	4a20      	ldr	r2, [pc, #128]	@ (80092dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800925a:	4013      	ands	r3, r2
 800925c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	4313      	orrs	r3, r2
 8009266:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2270      	movs	r2, #112	@ 0x70
 800926c:	4393      	bics	r3, r2
 800926e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	4313      	orrs	r3, r2
 8009278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a14      	ldr	r2, [pc, #80]	@ (80092d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d00a      	beq.n	80092a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	2380      	movs	r3, #128	@ 0x80
 8009292:	05db      	lsls	r3, r3, #23
 8009294:	429a      	cmp	r2, r3
 8009296:	d004      	beq.n	80092a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a10      	ldr	r2, [pc, #64]	@ (80092e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d10c      	bne.n	80092bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2280      	movs	r2, #128	@ 0x80
 80092a6:	4393      	bics	r3, r2
 80092a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	223d      	movs	r2, #61	@ 0x3d
 80092c0:	2101      	movs	r1, #1
 80092c2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	223c      	movs	r2, #60	@ 0x3c
 80092c8:	2100      	movs	r1, #0
 80092ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	0018      	movs	r0, r3
 80092d0:	46bd      	mov	sp, r7
 80092d2:	b004      	add	sp, #16
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	46c0      	nop			@ (mov r8, r8)
 80092d8:	40012c00 	.word	0x40012c00
 80092dc:	ff0fffff 	.word	0xff0fffff
 80092e0:	40000400 	.word	0x40000400

080092e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092ec:	46c0      	nop			@ (mov r8, r8)
 80092ee:	46bd      	mov	sp, r7
 80092f0:	b002      	add	sp, #8
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092fc:	46c0      	nop			@ (mov r8, r8)
 80092fe:	46bd      	mov	sp, r7
 8009300:	b002      	add	sp, #8
 8009302:	bd80      	pop	{r7, pc}

08009304 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800930c:	46c0      	nop			@ (mov r8, r8)
 800930e:	46bd      	mov	sp, r7
 8009310:	b002      	add	sp, #8
 8009312:	bd80      	pop	{r7, pc}

08009314 <memset>:
 8009314:	0003      	movs	r3, r0
 8009316:	1882      	adds	r2, r0, r2
 8009318:	4293      	cmp	r3, r2
 800931a:	d100      	bne.n	800931e <memset+0xa>
 800931c:	4770      	bx	lr
 800931e:	7019      	strb	r1, [r3, #0]
 8009320:	3301      	adds	r3, #1
 8009322:	e7f9      	b.n	8009318 <memset+0x4>

08009324 <__libc_init_array>:
 8009324:	b570      	push	{r4, r5, r6, lr}
 8009326:	2600      	movs	r6, #0
 8009328:	4c0c      	ldr	r4, [pc, #48]	@ (800935c <__libc_init_array+0x38>)
 800932a:	4d0d      	ldr	r5, [pc, #52]	@ (8009360 <__libc_init_array+0x3c>)
 800932c:	1b64      	subs	r4, r4, r5
 800932e:	10a4      	asrs	r4, r4, #2
 8009330:	42a6      	cmp	r6, r4
 8009332:	d109      	bne.n	8009348 <__libc_init_array+0x24>
 8009334:	2600      	movs	r6, #0
 8009336:	f000 f823 	bl	8009380 <_init>
 800933a:	4c0a      	ldr	r4, [pc, #40]	@ (8009364 <__libc_init_array+0x40>)
 800933c:	4d0a      	ldr	r5, [pc, #40]	@ (8009368 <__libc_init_array+0x44>)
 800933e:	1b64      	subs	r4, r4, r5
 8009340:	10a4      	asrs	r4, r4, #2
 8009342:	42a6      	cmp	r6, r4
 8009344:	d105      	bne.n	8009352 <__libc_init_array+0x2e>
 8009346:	bd70      	pop	{r4, r5, r6, pc}
 8009348:	00b3      	lsls	r3, r6, #2
 800934a:	58eb      	ldr	r3, [r5, r3]
 800934c:	4798      	blx	r3
 800934e:	3601      	adds	r6, #1
 8009350:	e7ee      	b.n	8009330 <__libc_init_array+0xc>
 8009352:	00b3      	lsls	r3, r6, #2
 8009354:	58eb      	ldr	r3, [r5, r3]
 8009356:	4798      	blx	r3
 8009358:	3601      	adds	r6, #1
 800935a:	e7f2      	b.n	8009342 <__libc_init_array+0x1e>
 800935c:	0800948c 	.word	0x0800948c
 8009360:	0800948c 	.word	0x0800948c
 8009364:	08009490 	.word	0x08009490
 8009368:	0800948c 	.word	0x0800948c

0800936c <memcpy>:
 800936c:	2300      	movs	r3, #0
 800936e:	b510      	push	{r4, lr}
 8009370:	429a      	cmp	r2, r3
 8009372:	d100      	bne.n	8009376 <memcpy+0xa>
 8009374:	bd10      	pop	{r4, pc}
 8009376:	5ccc      	ldrb	r4, [r1, r3]
 8009378:	54c4      	strb	r4, [r0, r3]
 800937a:	3301      	adds	r3, #1
 800937c:	e7f8      	b.n	8009370 <memcpy+0x4>
	...

08009380 <_init>:
 8009380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009382:	46c0      	nop			@ (mov r8, r8)
 8009384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009386:	bc08      	pop	{r3}
 8009388:	469e      	mov	lr, r3
 800938a:	4770      	bx	lr

0800938c <_fini>:
 800938c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938e:	46c0      	nop			@ (mov r8, r8)
 8009390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009392:	bc08      	pop	{r3}
 8009394:	469e      	mov	lr, r3
 8009396:	4770      	bx	lr
