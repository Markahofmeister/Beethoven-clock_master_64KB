
Beethoven-clock_master_64KB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095b0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800966c  0800966c  0000a66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009760  08009760  0000b09c  2**0
                  CONTENTS
  4 .ARM          00000000  08009760  08009760  0000b09c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009760  08009760  0000b09c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009760  08009760  0000a760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009764  08009764  0000a764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08009768  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  2000009c  08009804  0000b09c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b8  08009804  0000b8b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180ff  00000000  00000000  0000b0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036c0  00000000  00000000  000231c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00026888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e2  00000000  00000000  00027f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194e7  00000000  00000000  0002915a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c69b  00000000  00000000  00042641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c664  00000000  00000000  0005ecdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb340  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005370  00000000  00000000  000fb384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001006f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000009c 	.word	0x2000009c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009654 	.word	0x08009654

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a0 	.word	0x200000a0
 8000100:	08009654 	.word	0x08009654

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-low hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2200      	movs	r2, #0
 800025a:	0019      	movs	r1, r3
 800025c:	f003 ffff 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2201      	movs	r2, #1
 800026c:	0019      	movs	r1, r3
 800026e:	f003 fff6 	bl	800425e <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f008 f9ec 	bl	8008654 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f008 f99b 	bl	80085bc <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f004 f809 	bl	8004470 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f004 f91d 	bl	80046c4 <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	0800966c 	.word	0x0800966c

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f003 ffcb 	bl	8004470 <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f003 ffa5 	bl	8004470 <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f004 f8b9 	bl	80046c4 <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	08009670 	.word	0x08009670

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f003 ff61 	bl	8004470 <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f004 f875 	bl	80046c4 <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	08009674 	.word	0x08009674

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f003 ff11 	bl	8004470 <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f004 f825 	bl	80046c4 <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	08009678 	.word	0x08009678
 8000700:	08009680 	.word	0x08009680

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f003 fe8f 	bl	8004470 <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f003 ffa3 	bl	80046c4 <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f003 fe30 	bl	8004470 <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f003 fe0f 	bl	8004470 <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f003 ff23 	bl	80046c4 <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	08009678 	.word	0x08009678
 8000894:	08009680 	.word	0x08009680

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f003 fdb5 	bl	8004470 <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f003 fd93 	bl	8004470 <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f003 feb0 	bl	80046c4 <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	08009688 	.word	0x08009688
 8000978:	08009678 	.word	0x08009678

0800097c <NAU8315YG_Init>:

#ifndef NAU8315YG_H_
#include "../Inc/NAU8315YG.h"
#endif

void NAU8315YG_Init(NAU8315YG *nau, I2S_HandleTypeDef *hi2s, GPIO_TypeDef *enablePort, uint32_t enablePin) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	603b      	str	r3, [r7, #0]

	nau->hi2s = hi2s;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	601a      	str	r2, [r3, #0]

	nau->enablePort = enablePort;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	605a      	str	r2, [r3, #4]
	nau->enablePin = enablePin;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	609a      	str	r2, [r3, #8]

	NAU8315YG_AmpDisable(nau);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f818 	bl	80009d4 <NAU8315YG_AmpDisable>

}
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b004      	add	sp, #16
 80009aa:	bd80      	pop	{r7, pc}

080009ac <NAU8315YG_AmpEnable>:

void NAU8315YG_AmpEnable(NAU8315YG *nau) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

	// Set enable pin high
	HAL_GPIO_WritePin(nau->enablePort, nau->enablePin, GPIO_PIN_SET);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6858      	ldr	r0, [r3, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	2201      	movs	r2, #1
 80009c0:	0019      	movs	r1, r3
 80009c2:	f003 fc4c 	bl	800425e <HAL_GPIO_WritePin>

	nau->ampEnableFlag = 1;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2201      	movs	r2, #1
 80009ca:	731a      	strb	r2, [r3, #12]

}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <NAU8315YG_AmpDisable>:


void NAU8315YG_AmpDisable(NAU8315YG *nau) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

	// Set enable pin high
	HAL_GPIO_WritePin(nau->enablePort, nau->enablePin, GPIO_PIN_RESET);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6858      	ldr	r0, [r3, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	2200      	movs	r2, #0
 80009e8:	0019      	movs	r1, r3
 80009ea:	f003 fc38 	bl	800425e <HAL_GPIO_WritePin>

	nau->ampEnableFlag = 0;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	731a      	strb	r2, [r3, #12]

}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b002      	add	sp, #8
 80009fa:	bd80      	pop	{r7, pc}

080009fc <W25Q_Init>:
#endif


uint8_t W25Q_Init(W25Q *wq, GPIO_TypeDef *nCSPort, GPIO_TypeDef *nWPPort, GPIO_TypeDef *nHOLDPort,
					uint32_t nCSPin, uint32_t nWPPin, uint32_t nHOLDPin, SPI_HandleTypeDef *hspi,
					uint8_t devID, uint8_t isQuadChip, uint8_t driveStrength) {
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
 8000a08:	603b      	str	r3, [r7, #0]

	// Map struct GPIO Ports & Pins to passed parameters
	wq->nCSPort = nCSPort;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	601a      	str	r2, [r3, #0]
	wq->nWPPort = nWPPort;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	605a      	str	r2, [r3, #4]
	wq->nHOLDPort = nHOLDPort;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	609a      	str	r2, [r3, #8]

	wq->nCSPin = nCSPin;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a20:	60da      	str	r2, [r3, #12]
	wq->nWPPin = nWPPin;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a26:	611a      	str	r2, [r3, #16]
	wq->nHOLDPin = nHOLDPin;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a2c:	615a      	str	r2, [r3, #20]

	wq->hspi = hspi;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a32:	619a      	str	r2, [r3, #24]

	wq->quadEnable = isQuadChip;		// Default state depends on PN of chip.
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	223c      	movs	r2, #60	@ 0x3c
 8000a38:	2108      	movs	r1, #8
 8000a3a:	1852      	adds	r2, r2, r1
 8000a3c:	19d2      	adds	r2, r2, r7
 8000a3e:	2125      	movs	r1, #37	@ 0x25
 8000a40:	7812      	ldrb	r2, [r2, #0]
 8000a42:	545a      	strb	r2, [r3, r1]
	wq->writeEnable = 0;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2223      	movs	r2, #35	@ 0x23
 8000a48:	2100      	movs	r1, #0
 8000a4a:	5499      	strb	r1, [r3, r2]

	// Set CS pin high
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	2201      	movs	r2, #1
 8000a58:	0019      	movs	r1, r3
 8000a5a:	f003 fc00 	bl	800425e <HAL_GPIO_WritePin>

	// Set hold pin high (Disable)
	HAL_GPIO_WritePin(wq->nHOLDPort, wq->nHOLDPin, GPIO_PIN_SET);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6898      	ldr	r0, [r3, #8]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	2201      	movs	r2, #1
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	f003 fbf7 	bl	800425e <HAL_GPIO_WritePin>

	// Set WP pin high (disable)
	HAL_GPIO_WritePin(wq->nWPPort, wq->nWPPin, GPIO_PIN_SET);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6858      	ldr	r0, [r3, #4]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	f003 fbee 	bl	800425e <HAL_GPIO_WritePin>

	// HAL status handle used to indicate error messages
	HAL_StatusTypeDef halRet = HAL_OK;
 8000a82:	2116      	movs	r1, #22
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]

	uint8_t returnInc = 1;			// Integer error code return, incremented after successful things.
 8000a8a:	2617      	movs	r6, #23
 8000a8c:	19bb      	adds	r3, r7, r6
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]

	uint8_t errorsEnabled = 1;		// Use for debugging
 8000a92:	2315      	movs	r3, #21
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]

	// Release from power down mode
	halRet = W25Q_ReleasePowerDown(wq);
 8000a9a:	000d      	movs	r5, r1
 8000a9c:	187c      	adds	r4, r7, r1
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f000 f8ea 	bl	8000c7a <W25Q_ReleasePowerDown>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000aaa:	197b      	adds	r3, r7, r5
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d007      	beq.n	8000ac2 <W25Q_Init+0xc6>
 8000ab2:	2315      	movs	r3, #21
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d002      	beq.n	8000ac2 <W25Q_Init+0xc6>
		return returnInc;
 8000abc:	19bb      	adds	r3, r7, r6
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	e0d7      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000ac2:	2517      	movs	r5, #23
 8000ac4:	197b      	adds	r3, r7, r5
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	197b      	adds	r3, r7, r5
 8000aca:	3201      	adds	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]

	// Reset Device
	halRet = W25Q_ChipReset(wq);
 8000ace:	2616      	movs	r6, #22
 8000ad0:	19bc      	adds	r4, r7, r6
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 fc45 	bl	8001364 <W25Q_ChipReset>
 8000ada:	0003      	movs	r3, r0
 8000adc:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000ade:	19bb      	adds	r3, r7, r6
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d007      	beq.n	8000af6 <W25Q_Init+0xfa>
 8000ae6:	2315      	movs	r3, #21
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <W25Q_Init+0xfa>
		return returnInc;
 8000af0:	197b      	adds	r3, r7, r5
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	e0bd      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000af6:	2517      	movs	r5, #23
 8000af8:	197b      	adds	r3, r7, r5
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	197b      	adds	r3, r7, r5
 8000afe:	3201      	adds	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]

	// Read initial Status Registers
	halRet = W25Q_ReadStatusRegs(wq);
 8000b02:	2616      	movs	r6, #22
 8000b04:	19bc      	adds	r4, r7, r6
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 faef 	bl	80010ec <W25Q_ReadStatusRegs>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b12:	19bb      	adds	r3, r7, r6
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d007      	beq.n	8000b2a <W25Q_Init+0x12e>
 8000b1a:	2315      	movs	r3, #21
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <W25Q_Init+0x12e>
		return returnInc;
 8000b24:	197b      	adds	r3, r7, r5
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	e0a3      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000b2a:	2517      	movs	r5, #23
 8000b2c:	197b      	adds	r3, r7, r5
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	197b      	adds	r3, r7, r5
 8000b32:	3201      	adds	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]

	// Increase driver strength?
	halRet = W25Q_SetDriverStrength(wq, driveStrength);
 8000b36:	2616      	movs	r6, #22
 8000b38:	19bc      	adds	r4, r7, r6
 8000b3a:	2340      	movs	r3, #64	@ 0x40
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	189b      	adds	r3, r3, r2
 8000b40:	19db      	adds	r3, r3, r7
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	0011      	movs	r1, r2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 fc75 	bl	8001438 <W25Q_SetDriverStrength>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b52:	19bb      	adds	r3, r7, r6
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d007      	beq.n	8000b6a <W25Q_Init+0x16e>
 8000b5a:	2315      	movs	r3, #21
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d002      	beq.n	8000b6a <W25Q_Init+0x16e>
		return returnInc;
 8000b64:	197b      	adds	r3, r7, r5
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	e083      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000b6a:	2517      	movs	r5, #23
 8000b6c:	197b      	adds	r3, r7, r5
 8000b6e:	781a      	ldrb	r2, [r3, #0]
 8000b70:	197b      	adds	r3, r7, r5
 8000b72:	3201      	adds	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
//			returnInc++;
//	}


	// Get + Store IDs
	halRet = W25Q_GetIDs(wq, devID);
 8000b76:	2616      	movs	r6, #22
 8000b78:	19bc      	adds	r4, r7, r6
 8000b7a:	2338      	movs	r3, #56	@ 0x38
 8000b7c:	2208      	movs	r2, #8
 8000b7e:	189b      	adds	r3, r3, r2
 8000b80:	19db      	adds	r3, r3, r7
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	0011      	movs	r1, r2
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 f8bb 	bl	8000d04 <W25Q_GetIDs>
 8000b8e:	0003      	movs	r3, r0
 8000b90:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b92:	19bb      	adds	r3, r7, r6
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d007      	beq.n	8000baa <W25Q_Init+0x1ae>
 8000b9a:	2315      	movs	r3, #21
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <W25Q_Init+0x1ae>
		return returnInc;
 8000ba4:	197b      	adds	r3, r7, r5
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	e063      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000baa:	2517      	movs	r5, #23
 8000bac:	197b      	adds	r3, r7, r5
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	197b      	adds	r3, r7, r5
 8000bb2:	3201      	adds	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]

	// Get + Store Status Register Contents
	halRet = W25Q_ReadStatusRegs(wq);
 8000bb6:	2616      	movs	r6, #22
 8000bb8:	19bc      	adds	r4, r7, r6
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f000 fa95 	bl	80010ec <W25Q_ReadStatusRegs>
 8000bc2:	0003      	movs	r3, r0
 8000bc4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000bc6:	19bb      	adds	r3, r7, r6
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d007      	beq.n	8000bde <W25Q_Init+0x1e2>
 8000bce:	2315      	movs	r3, #21
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d002      	beq.n	8000bde <W25Q_Init+0x1e2>
		return returnInc;
 8000bd8:	197b      	adds	r3, r7, r5
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	e049      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000bde:	2517      	movs	r5, #23
 8000be0:	197b      	adds	r3, r7, r5
 8000be2:	781a      	ldrb	r2, [r3, #0]
 8000be4:	197b      	adds	r3, r7, r5
 8000be6:	3201      	adds	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]

	// Disable Write Access to Memory
	if(wq->writeEnable != 0) {
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2223      	movs	r2, #35	@ 0x23
 8000bee:	5c9b      	ldrb	r3, [r3, r2]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d019      	beq.n	8000c28 <W25Q_Init+0x22c>
		halRet = W25Q_DisableWrite(wq);
 8000bf4:	2616      	movs	r6, #22
 8000bf6:	19bc      	adds	r4, r7, r6
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 f985 	bl	8000f0a <W25Q_DisableWrite>
 8000c00:	0003      	movs	r3, r0
 8000c02:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK && errorsEnabled)
 8000c04:	19bb      	adds	r3, r7, r6
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d007      	beq.n	8000c1c <W25Q_Init+0x220>
 8000c0c:	2315      	movs	r3, #21
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <W25Q_Init+0x220>
			return returnInc;
 8000c16:	197b      	adds	r3, r7, r5
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	e02a      	b.n	8000c72 <W25Q_Init+0x276>
		else
			returnInc++;
 8000c1c:	2117      	movs	r1, #23
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	3201      	adds	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
	}

	// Get + Store Status Register Contents
	halRet = W25Q_ReadStatusRegs(wq);
 8000c28:	2516      	movs	r5, #22
 8000c2a:	197c      	adds	r4, r7, r5
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 fa5c 	bl	80010ec <W25Q_ReadStatusRegs>
 8000c34:	0003      	movs	r3, r0
 8000c36:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000c38:	197b      	adds	r3, r7, r5
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d008      	beq.n	8000c52 <W25Q_Init+0x256>
 8000c40:	2315      	movs	r3, #21
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <W25Q_Init+0x256>
		return returnInc;
 8000c4a:	2317      	movs	r3, #23
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	e00f      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000c52:	2117      	movs	r1, #23
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	781a      	ldrb	r2, [r3, #0]
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	3201      	adds	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]

	// Set WP pin low (Enable)
	HAL_GPIO_WritePin(wq->nWPPort, wq->nWPPin, GPIO_PIN_RESET);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	6858      	ldr	r0, [r3, #4]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	2200      	movs	r2, #0
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	f003 faf7 	bl	800425e <HAL_GPIO_WritePin>

	return 0;
 8000c70:	2300      	movs	r3, #0

}
 8000c72:	0018      	movs	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b007      	add	sp, #28
 8000c78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c7a <W25Q_ReleasePowerDown>:

HAL_StatusTypeDef W25Q_ReleasePowerDown(W25Q *wq) {
 8000c7a:	b590      	push	{r4, r7, lr}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000c82:	240e      	movs	r4, #14
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]

	// TX release power-down instruction
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6818      	ldr	r0, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	2200      	movs	r2, #0
 8000c96:	0019      	movs	r1, r3
 8000c98:	f003 fae1 	bl	800425e <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_READ_RELEASE_ID}, 1, HAL_MAX_DELAY);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6998      	ldr	r0, [r3, #24]
 8000ca0:	210c      	movs	r1, #12
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	22ab      	movs	r2, #171	@ 0xab
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	193c      	adds	r4, r7, r4
 8000caa:	2301      	movs	r3, #1
 8000cac:	425b      	negs	r3, r3
 8000cae:	1879      	adds	r1, r7, r1
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f006 fdc3 	bl	800783c <HAL_SPI_Transmit>
 8000cb6:	0003      	movs	r3, r0
 8000cb8:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	0019      	movs	r1, r3
 8000cc8:	f003 fac9 	bl	800425e <HAL_GPIO_WritePin>

	// Delay for at least 3 us
	for(uint8_t i = 0; i < 15; i++) {
 8000ccc:	230f      	movs	r3, #15
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	e006      	b.n	8000ce4 <W25Q_ReleasePowerDown+0x6a>
		__NOP();
 8000cd6:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < 15; i++) {
 8000cd8:	210f      	movs	r1, #15
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	3201      	adds	r2, #1
 8000ce2:	701a      	strb	r2, [r3, #0]
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b0e      	cmp	r3, #14
 8000cec:	d9f3      	bls.n	8000cd6 <W25Q_ReleasePowerDown+0x5c>
	}

	wq->powerUp = 1; 		// We have now successfully exited power-down state
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2224      	movs	r2, #36	@ 0x24
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	5499      	strb	r1, [r3, r2]

	return halRet;
 8000cf6:	230e      	movs	r3, #14
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	781b      	ldrb	r3, [r3, #0]

}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b005      	add	sp, #20
 8000d02:	bd90      	pop	{r4, r7, pc}

08000d04 <W25Q_GetIDs>:

HAL_StatusTypeDef W25Q_GetIDs(W25Q *wq, uint8_t devID_passed) {
 8000d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d06:	b089      	sub	sp, #36	@ 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	000a      	movs	r2, r1
 8000d0e:	1cfb      	adds	r3, r7, #3
 8000d10:	701a      	strb	r2, [r3, #0]


	HAL_StatusTypeDef halRet = HAL_OK;
 8000d12:	241f      	movs	r4, #31
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]

	/*
	 * Release power down + read device ID
	 */
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6818      	ldr	r0, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	2200      	movs	r2, #0
 8000d26:	0019      	movs	r1, r3
 8000d28:	f003 fa99 	bl	800425e <HAL_GPIO_WritePin>
		// TX return device ID instruction
		halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[4]){CMD_READ_RELEASE_ID, 0x00, 0x00, 0x00}, 4, HAL_MAX_DELAY);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6998      	ldr	r0, [r3, #24]
 8000d30:	2118      	movs	r1, #24
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	22ab      	movs	r2, #171	@ 0xab
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	705a      	strb	r2, [r3, #1]
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	709a      	strb	r2, [r3, #2]
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	70da      	strb	r2, [r3, #3]
 8000d4a:	0025      	movs	r5, r4
 8000d4c:	193c      	adds	r4, r7, r4
 8000d4e:	2301      	movs	r3, #1
 8000d50:	425b      	negs	r3, r3
 8000d52:	1879      	adds	r1, r7, r1
 8000d54:	2204      	movs	r2, #4
 8000d56:	f006 fd71 	bl	800783c <HAL_SPI_Transmit>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 8000d5e:	197b      	adds	r3, r7, r5
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00b      	beq.n	8000d7e <W25Q_GetIDs+0x7a>
			HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6818      	ldr	r0, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	2201      	movs	r2, #1
 8000d72:	0019      	movs	r1, r3
 8000d74:	f003 fa73 	bl	800425e <HAL_GPIO_WritePin>
			return halRet;
 8000d78:	197b      	adds	r3, r7, r5
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	e07c      	b.n	8000e78 <W25Q_GetIDs+0x174>
		}

		// RX device ID into struct variable
		uint8_t devIDRet[1] = {0x00};
 8000d7e:	2514      	movs	r5, #20
 8000d80:	197b      	adds	r3, r7, r5
 8000d82:	4a3f      	ldr	r2, [pc, #252]	@ (8000e80 <W25Q_GetIDs+0x17c>)
 8000d84:	7812      	ldrb	r2, [r2, #0]
 8000d86:	701a      	strb	r2, [r3, #0]
		halRet = HAL_SPI_Receive(wq->hspi, devIDRet, 1, HAL_MAX_DELAY);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6998      	ldr	r0, [r3, #24]
 8000d8c:	261f      	movs	r6, #31
 8000d8e:	19bc      	adds	r4, r7, r6
 8000d90:	2301      	movs	r3, #1
 8000d92:	425b      	negs	r3, r3
 8000d94:	1979      	adds	r1, r7, r5
 8000d96:	2201      	movs	r2, #1
 8000d98:	f006 feb0 	bl	8007afc <HAL_SPI_Receive>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	2201      	movs	r2, #1
 8000dac:	0019      	movs	r1, r3
 8000dae:	f003 fa56 	bl	800425e <HAL_GPIO_WritePin>
		wq->devID = devIDRet[0];
 8000db2:	197b      	adds	r3, r7, r5
 8000db4:	781a      	ldrb	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	775a      	strb	r2, [r3, #29]


		 // Check to ensure that received device ID is equal to that passed by the user in the init function
		if((halRet != HAL_OK) || (wq->devID != devID_passed))
 8000dba:	19bb      	adds	r3, r7, r6
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d105      	bne.n	8000dce <W25Q_GetIDs+0xca>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7f5b      	ldrb	r3, [r3, #29]
 8000dc6:	1cfa      	adds	r2, r7, #3
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d001      	beq.n	8000dd2 <W25Q_GetIDs+0xce>
			return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e052      	b.n	8000e78 <W25Q_GetIDs+0x174>

	/*
	 * Read and check MFR ID
	 */
		// TX read mfr + device ID command
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6818      	ldr	r0, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	0019      	movs	r1, r3
 8000de0:	f003 fa3d 	bl	800425e <HAL_GPIO_WritePin>
		halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[4]){CMD_READ_MFR_ID, 0x00, 0x00, 0x00}, 4, HAL_MAX_DELAY);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6998      	ldr	r0, [r3, #24]
 8000de8:	2110      	movs	r1, #16
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2290      	movs	r2, #144	@ 0x90
 8000dee:	701a      	strb	r2, [r3, #0]
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2200      	movs	r2, #0
 8000df4:	705a      	strb	r2, [r3, #1]
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2200      	movs	r2, #0
 8000dfa:	709a      	strb	r2, [r3, #2]
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2200      	movs	r2, #0
 8000e00:	70da      	strb	r2, [r3, #3]
 8000e02:	251f      	movs	r5, #31
 8000e04:	197c      	adds	r4, r7, r5
 8000e06:	2301      	movs	r3, #1
 8000e08:	425b      	negs	r3, r3
 8000e0a:	1879      	adds	r1, r7, r1
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	f006 fd15 	bl	800783c <HAL_SPI_Transmit>
 8000e12:	0003      	movs	r3, r0
 8000e14:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000e16:	197b      	adds	r3, r7, r5
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <W25Q_GetIDs+0x120>
			return halRet;
 8000e1e:	197b      	adds	r3, r7, r5
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	e029      	b.n	8000e78 <W25Q_GetIDs+0x174>
		}



		// RX device and mfr ID, store in struct variable
		uint8_t retIDs[2] = {0x00, 0x00};
 8000e24:	250c      	movs	r5, #12
 8000e26:	197b      	adds	r3, r7, r5
 8000e28:	2200      	movs	r2, #0
 8000e2a:	801a      	strh	r2, [r3, #0]
		halRet = HAL_SPI_Receive(wq->hspi, retIDs, 2, HAL_MAX_DELAY);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6998      	ldr	r0, [r3, #24]
 8000e30:	261f      	movs	r6, #31
 8000e32:	19bc      	adds	r4, r7, r6
 8000e34:	2301      	movs	r3, #1
 8000e36:	425b      	negs	r3, r3
 8000e38:	1979      	adds	r1, r7, r5
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	f006 fe5e 	bl	8007afc <HAL_SPI_Receive>
 8000e40:	0003      	movs	r3, r0
 8000e42:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	2201      	movs	r2, #1
 8000e50:	0019      	movs	r1, r3
 8000e52:	f003 fa04 	bl	800425e <HAL_GPIO_WritePin>
		wq->mfrID = retIDs[0];
 8000e56:	197b      	adds	r3, r7, r5
 8000e58:	781a      	ldrb	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	771a      	strb	r2, [r3, #28]


		// Check to ensure that received mfr ID is correct.
		if((halRet != HAL_OK) || (wq->mfrID != 0xEF))
 8000e5e:	19bb      	adds	r3, r7, r6
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d103      	bne.n	8000e6e <W25Q_GetIDs+0x16a>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7f1b      	ldrb	r3, [r3, #28]
 8000e6a:	2bef      	cmp	r3, #239	@ 0xef
 8000e6c:	d001      	beq.n	8000e72 <W25Q_GetIDs+0x16e>
			return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e002      	b.n	8000e78 <W25Q_GetIDs+0x174>

	/*
	 * Leaving out for now: Read JEDEC ID
	 */

		return halRet;
 8000e72:	231f      	movs	r3, #31
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	781b      	ldrb	r3, [r3, #0]
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b009      	add	sp, #36	@ 0x24
 8000e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e80:	08009690 	.word	0x08009690

08000e84 <W25Q_EnableWrite>:

HAL_StatusTypeDef W25Q_EnableWrite(W25Q *wq) {
 8000e84:	b5b0      	push	{r4, r5, r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000e8c:	250f      	movs	r5, #15
 8000e8e:	197b      	adds	r3, r7, r5
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]

	// TX write enable command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	f003 f9dc 	bl	800425e <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_WRITE_ENABLE}, 1, HAL_MAX_DELAY);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6998      	ldr	r0, [r3, #24]
 8000eaa:	210c      	movs	r1, #12
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2206      	movs	r2, #6
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	197c      	adds	r4, r7, r5
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f006 fcbe 	bl	800783c <HAL_SPI_Transmit>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	2201      	movs	r2, #1
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	f003 f9c4 	bl	800425e <HAL_GPIO_WritePin>

	if(halRet != HAL_OK)
 8000ed6:	197b      	adds	r3, r7, r5
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <W25Q_EnableWrite+0x60>
		return halRet;
 8000ede:	197b      	adds	r3, r7, r5
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	e00e      	b.n	8000f02 <W25Q_EnableWrite+0x7e>

	// Read back written value and confirm
	W25Q_ReadStatusReg(wq, 1);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f000 f851 	bl	8000f90 <W25Q_ReadStatusReg>

	// Bit 1 of status register 1 should now be 1
	if(wq->writeEnable != 1)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2223      	movs	r2, #35	@ 0x23
 8000ef2:	5c9b      	ldrb	r3, [r3, r2]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d001      	beq.n	8000efc <W25Q_EnableWrite+0x78>
		return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e002      	b.n	8000f02 <W25Q_EnableWrite+0x7e>

	return halRet;
 8000efc:	230f      	movs	r3, #15
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	781b      	ldrb	r3, [r3, #0]

}
 8000f02:	0018      	movs	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b004      	add	sp, #16
 8000f08:	bdb0      	pop	{r4, r5, r7, pc}

08000f0a <W25Q_DisableWrite>:

HAL_StatusTypeDef W25Q_DisableWrite(W25Q *wq) {
 8000f0a:	b5b0      	push	{r4, r5, r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000f12:	250f      	movs	r5, #15
 8000f14:	197b      	adds	r3, r7, r5
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]

	// TX write disable command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	2200      	movs	r2, #0
 8000f26:	0019      	movs	r1, r3
 8000f28:	f003 f999 	bl	800425e <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_WRITE_DISABLE}, 1, HAL_MAX_DELAY);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6998      	ldr	r0, [r3, #24]
 8000f30:	210c      	movs	r1, #12
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2204      	movs	r2, #4
 8000f36:	701a      	strb	r2, [r3, #0]
 8000f38:	197c      	adds	r4, r7, r5
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	425b      	negs	r3, r3
 8000f3e:	1879      	adds	r1, r7, r1
 8000f40:	2201      	movs	r2, #1
 8000f42:	f006 fc7b 	bl	800783c <HAL_SPI_Transmit>
 8000f46:	0003      	movs	r3, r0
 8000f48:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	2201      	movs	r2, #1
 8000f56:	0019      	movs	r1, r3
 8000f58:	f003 f981 	bl	800425e <HAL_GPIO_WritePin>

	if(halRet != HAL_OK)
 8000f5c:	197b      	adds	r3, r7, r5
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <W25Q_DisableWrite+0x60>
		return halRet;
 8000f64:	197b      	adds	r3, r7, r5
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	e00e      	b.n	8000f88 <W25Q_DisableWrite+0x7e>

	// Read back written value and confirm
	W25Q_ReadStatusReg(wq, 1);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f000 f80e 	bl	8000f90 <W25Q_ReadStatusReg>

	// Bit 1 of status register 1 should still be 0
	if(wq->writeEnable != 0)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2223      	movs	r2, #35	@ 0x23
 8000f78:	5c9b      	ldrb	r3, [r3, r2]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <W25Q_DisableWrite+0x78>
		return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e002      	b.n	8000f88 <W25Q_DisableWrite+0x7e>

	return halRet;
 8000f82:	230f      	movs	r3, #15
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	781b      	ldrb	r3, [r3, #0]

}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b004      	add	sp, #16
 8000f8e:	bdb0      	pop	{r4, r5, r7, pc}

08000f90 <W25Q_ReadStatusReg>:

HAL_StatusTypeDef W25Q_ReadStatusReg(W25Q *wq, uint8_t regNum) {
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	000a      	movs	r2, r1
 8000f9a:	1cfb      	adds	r3, r7, #3
 8000f9c:	701a      	strb	r2, [r3, #0]

	// Check register number is valid
	if(regNum < 1 || regNum > 3) {
 8000f9e:	1cfb      	adds	r3, r7, #3
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <W25Q_ReadStatusReg+0x1e>
 8000fa6:	1cfb      	adds	r3, r7, #3
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d901      	bls.n	8000fb2 <W25Q_ReadStatusReg+0x22>
		return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e094      	b.n	80010dc <W25Q_ReadStatusReg+0x14c>
	}

	HAL_StatusTypeDef halRet = HAL_OK;
 8000fb2:	2417      	movs	r4, #23
 8000fb4:	193b      	adds	r3, r7, r4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]

	// Array of commands for status registers 1-3
	uint8_t statRegCMDs[3] = {CMD_READ_STAT_1, CMD_READ_STAT_2, CMD_READ_STAT_3};
 8000fba:	2514      	movs	r5, #20
 8000fbc:	197b      	adds	r3, r7, r5
 8000fbe:	4a49      	ldr	r2, [pc, #292]	@ (80010e4 <W25Q_ReadStatusReg+0x154>)
 8000fc0:	8811      	ldrh	r1, [r2, #0]
 8000fc2:	8019      	strh	r1, [r3, #0]
 8000fc4:	7892      	ldrb	r2, [r2, #2]
 8000fc6:	709a      	strb	r2, [r3, #2]

	// TX read status register command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	0019      	movs	r1, r3
 8000fd6:	f003 f942 	bl	800425e <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){statRegCMDs[regNum - 1]}, 1, HAL_MAX_DELAY);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6998      	ldr	r0, [r3, #24]
 8000fde:	1cfb      	adds	r3, r7, #3
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	197a      	adds	r2, r7, r5
 8000fe6:	5cd2      	ldrb	r2, [r2, r3]
 8000fe8:	2110      	movs	r1, #16
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	0025      	movs	r5, r4
 8000ff0:	193c      	adds	r4, r7, r4
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	425b      	negs	r3, r3
 8000ff6:	1879      	adds	r1, r7, r1
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f006 fc1f 	bl	800783c <HAL_SPI_Transmit>
 8000ffe:	0003      	movs	r3, r0
 8001000:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8001002:	197b      	adds	r3, r7, r5
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00b      	beq.n	8001022 <W25Q_ReadStatusReg+0x92>
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	b29b      	uxth	r3, r3
 8001014:	2201      	movs	r2, #1
 8001016:	0019      	movs	r1, r3
 8001018:	f003 f921 	bl	800425e <HAL_GPIO_WritePin>
		return halRet;
 800101c:	197b      	adds	r3, r7, r5
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	e05c      	b.n	80010dc <W25Q_ReadStatusReg+0x14c>
	}

	// RX status register
	uint8_t statRegRet[1] = {0x00};
 8001022:	210c      	movs	r1, #12
 8001024:	187b      	adds	r3, r7, r1
 8001026:	4a30      	ldr	r2, [pc, #192]	@ (80010e8 <W25Q_ReadStatusReg+0x158>)
 8001028:	7812      	ldrb	r2, [r2, #0]
 800102a:	701a      	strb	r2, [r3, #0]
	halRet = HAL_SPI_Receive(wq->hspi, statRegRet, 1, HAL_MAX_DELAY);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6998      	ldr	r0, [r3, #24]
 8001030:	2317      	movs	r3, #23
 8001032:	18fc      	adds	r4, r7, r3
 8001034:	2301      	movs	r3, #1
 8001036:	425b      	negs	r3, r3
 8001038:	1879      	adds	r1, r7, r1
 800103a:	2201      	movs	r2, #1
 800103c:	f006 fd5e 	bl	8007afc <HAL_SPI_Receive>
 8001040:	0003      	movs	r3, r0
 8001042:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	b29b      	uxth	r3, r3
 800104e:	2201      	movs	r2, #1
 8001050:	0019      	movs	r1, r3
 8001052:	f003 f904 	bl	800425e <HAL_GPIO_WritePin>

	switch(regNum) {
 8001056:	1cfb      	adds	r3, r7, #3
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b03      	cmp	r3, #3
 800105c:	d029      	beq.n	80010b2 <W25Q_ReadStatusReg+0x122>
 800105e:	dc3a      	bgt.n	80010d6 <W25Q_ReadStatusReg+0x146>
 8001060:	2b01      	cmp	r3, #1
 8001062:	d002      	beq.n	800106a <W25Q_ReadStatusReg+0xda>
 8001064:	2b02      	cmp	r3, #2
 8001066:	d012      	beq.n	800108e <W25Q_ReadStatusReg+0xfe>
 8001068:	e035      	b.n	80010d6 <W25Q_ReadStatusReg+0x146>
	case 1:
		wq->statReg1 = statRegRet[0];
 800106a:	230c      	movs	r3, #12
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	7819      	ldrb	r1, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2220      	movs	r2, #32
 8001074:	5499      	strb	r1, [r3, r2]
		wq->writeEnable = (wq->statReg1 & 0b00000010) >> 1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2220      	movs	r2, #32
 800107a:	5c9b      	ldrb	r3, [r3, r2]
 800107c:	105b      	asrs	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2201      	movs	r2, #1
 8001082:	4013      	ands	r3, r2
 8001084:	b2d9      	uxtb	r1, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2223      	movs	r2, #35	@ 0x23
 800108a:	5499      	strb	r1, [r3, r2]
		break;
 800108c:	e023      	b.n	80010d6 <W25Q_ReadStatusReg+0x146>
	case 2:
		wq->statReg2 = statRegRet[0];
 800108e:	230c      	movs	r3, #12
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	7819      	ldrb	r1, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2221      	movs	r2, #33	@ 0x21
 8001098:	5499      	strb	r1, [r3, r2]
		wq->quadEnable = (wq->statReg2 & 0b00000010) >> 1;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2221      	movs	r2, #33	@ 0x21
 800109e:	5c9b      	ldrb	r3, [r3, r2]
 80010a0:	105b      	asrs	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2201      	movs	r2, #1
 80010a6:	4013      	ands	r3, r2
 80010a8:	b2d9      	uxtb	r1, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2225      	movs	r2, #37	@ 0x25
 80010ae:	5499      	strb	r1, [r3, r2]
		break;
 80010b0:	e011      	b.n	80010d6 <W25Q_ReadStatusReg+0x146>
	case 3:
		wq->statReg3 = statRegRet[0];
 80010b2:	230c      	movs	r3, #12
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	7819      	ldrb	r1, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2222      	movs	r2, #34	@ 0x22
 80010bc:	5499      	strb	r1, [r3, r2]
		wq->driverStrength = (wq->statReg3 & 0b01100000) >> 5;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2222      	movs	r2, #34	@ 0x22
 80010c2:	5c9b      	ldrb	r3, [r3, r2]
 80010c4:	115b      	asrs	r3, r3, #5
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2203      	movs	r2, #3
 80010ca:	4013      	ands	r3, r2
 80010cc:	b2d9      	uxtb	r1, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2226      	movs	r2, #38	@ 0x26
 80010d2:	5499      	strb	r1, [r3, r2]
		break;
 80010d4:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 80010d6:	2317      	movs	r3, #23
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	781b      	ldrb	r3, [r3, #0]

}
 80010dc:	0018      	movs	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	b006      	add	sp, #24
 80010e2:	bdb0      	pop	{r4, r5, r7, pc}
 80010e4:	08009694 	.word	0x08009694
 80010e8:	08009690 	.word	0x08009690

080010ec <W25Q_ReadStatusRegs>:

HAL_StatusTypeDef W25Q_ReadStatusRegs(W25Q *wq) {
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80010f4:	230e      	movs	r3, #14
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 1; i <=3; i++) {
 80010fc:	230f      	movs	r3, #15
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	e00d      	b.n	8001122 <W25Q_ReadStatusRegs+0x36>

		W25Q_ReadStatusReg(wq, i);
 8001106:	240f      	movs	r4, #15
 8001108:	193b      	adds	r3, r7, r4
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	0011      	movs	r1, r2
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff ff3d 	bl	8000f90 <W25Q_ReadStatusReg>
	for(uint8_t i = 1; i <=3; i++) {
 8001116:	0021      	movs	r1, r4
 8001118:	187b      	adds	r3, r7, r1
 800111a:	781a      	ldrb	r2, [r3, #0]
 800111c:	187b      	adds	r3, r7, r1
 800111e:	3201      	adds	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	230f      	movs	r3, #15
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b03      	cmp	r3, #3
 800112a:	d9ec      	bls.n	8001106 <W25Q_ReadStatusRegs+0x1a>

	}

	return halRet;
 800112c:	230e      	movs	r3, #14
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	781b      	ldrb	r3, [r3, #0]

}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b005      	add	sp, #20
 8001138:	bd90      	pop	{r4, r7, pc}
	...

0800113c <W25Q_WriteStatusReg>:

HAL_StatusTypeDef W25Q_WriteStatusReg(W25Q *wq, uint8_t regNum, uint8_t regVal) {
 800113c:	b5b0      	push	{r4, r5, r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	0008      	movs	r0, r1
 8001146:	0011      	movs	r1, r2
 8001148:	1cfb      	adds	r3, r7, #3
 800114a:	1c02      	adds	r2, r0, #0
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	1cbb      	adds	r3, r7, #2
 8001150:	1c0a      	adds	r2, r1, #0
 8001152:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8001154:	2513      	movs	r5, #19
 8001156:	197b      	adds	r3, r7, r5
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]

	// Enable Write Access to Memory
	// Write access will disable after status register write
	if(wq->writeEnable != 1) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2223      	movs	r2, #35	@ 0x23
 8001160:	5c9b      	ldrb	r3, [r3, r2]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d00c      	beq.n	8001180 <W25Q_WriteStatusReg+0x44>
		halRet = W25Q_EnableWrite(wq);
 8001166:	197c      	adds	r4, r7, r5
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	0018      	movs	r0, r3
 800116c:	f7ff fe8a 	bl	8000e84 <W25Q_EnableWrite>
 8001170:	0003      	movs	r3, r0
 8001172:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK)
 8001174:	197b      	adds	r3, r7, r5
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <W25Q_WriteStatusReg+0x44>
			return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e08a      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>
	}

	// Array of commands for status registers 1-3
	uint8_t statRegCMDs[3] = {CMD_WRITE_STAT_1, CMD_WRITE_STAT_2, CMD_WRITE_STAT_3};
 8001180:	2410      	movs	r4, #16
 8001182:	193b      	adds	r3, r7, r4
 8001184:	4a46      	ldr	r2, [pc, #280]	@ (80012a0 <W25Q_WriteStatusReg+0x164>)
 8001186:	8811      	ldrh	r1, [r2, #0]
 8001188:	8019      	strh	r1, [r3, #0]
 800118a:	7892      	ldrb	r2, [r2, #2]
 800118c:	709a      	strb	r2, [r3, #2]

	// TX write status reg with value
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	b29b      	uxth	r3, r3
 8001198:	2200      	movs	r2, #0
 800119a:	0019      	movs	r1, r3
 800119c:	f003 f85f 	bl	800425e <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[2]){statRegCMDs[regNum - 1], regVal}, 2, HAL_MAX_DELAY);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6998      	ldr	r0, [r3, #24]
 80011a4:	1cfb      	adds	r3, r7, #3
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	193a      	adds	r2, r7, r4
 80011ac:	5cd2      	ldrb	r2, [r2, r3]
 80011ae:	210c      	movs	r1, #12
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	701a      	strb	r2, [r3, #0]
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	1cba      	adds	r2, r7, #2
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	705a      	strb	r2, [r3, #1]
 80011bc:	2513      	movs	r5, #19
 80011be:	197c      	adds	r4, r7, r5
 80011c0:	2301      	movs	r3, #1
 80011c2:	425b      	negs	r3, r3
 80011c4:	1879      	adds	r1, r7, r1
 80011c6:	2202      	movs	r2, #2
 80011c8:	f006 fb38 	bl	800783c <HAL_SPI_Transmit>
 80011cc:	0003      	movs	r3, r0
 80011ce:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	2201      	movs	r2, #1
 80011dc:	0019      	movs	r1, r3
 80011de:	f003 f83e 	bl	800425e <HAL_GPIO_WritePin>

	// WEL bit will now be set back to 0
	halRet = W25Q_ReadStatusReg(wq, 1);
 80011e2:	197c      	adds	r4, r7, r5
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2101      	movs	r1, #1
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7ff fed1 	bl	8000f90 <W25Q_ReadStatusReg>
 80011ee:	0003      	movs	r3, r0
 80011f0:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80011f2:	197b      	adds	r3, r7, r5
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d002      	beq.n	8001200 <W25Q_WriteStatusReg+0xc4>
		return halRet;
 80011fa:	197b      	adds	r3, r7, r5
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	e04a      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>

	// Delay maximum status register write time (15ms), as given by chip datasheet.
	// ~235ns per i
	for(uint32_t i = 0; i < 70000; i++) {
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e003      	b.n	800120e <W25Q_WriteStatusReg+0xd2>
		__NOP();
 8001206:	46c0      	nop			@ (mov r8, r8)
	for(uint32_t i = 0; i < 70000; i++) {
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	3301      	adds	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	4a24      	ldr	r2, [pc, #144]	@ (80012a4 <W25Q_WriteStatusReg+0x168>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d9f7      	bls.n	8001206 <W25Q_WriteStatusReg+0xca>
	}

	if(halRet != HAL_OK)
 8001216:	2213      	movs	r2, #19
 8001218:	18bb      	adds	r3, r7, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <W25Q_WriteStatusReg+0xea>
		return halRet;
 8001220:	18bb      	adds	r3, r7, r2
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	e037      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>

	// Read back written value and confirm
	halRet = W25Q_ReadStatusReg(wq, regNum);
 8001226:	2313      	movs	r3, #19
 8001228:	18fc      	adds	r4, r7, r3
 800122a:	1cfb      	adds	r3, r7, #3
 800122c:	781a      	ldrb	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	0011      	movs	r1, r2
 8001232:	0018      	movs	r0, r3
 8001234:	f7ff feac 	bl	8000f90 <W25Q_ReadStatusReg>
 8001238:	0003      	movs	r3, r0
 800123a:	7023      	strb	r3, [r4, #0]
	switch(regNum) {
 800123c:	1cfb      	adds	r3, r7, #3
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b03      	cmp	r3, #3
 8001242:	d017      	beq.n	8001274 <W25Q_WriteStatusReg+0x138>
 8001244:	dc24      	bgt.n	8001290 <W25Q_WriteStatusReg+0x154>
 8001246:	2b01      	cmp	r3, #1
 8001248:	d002      	beq.n	8001250 <W25Q_WriteStatusReg+0x114>
 800124a:	2b02      	cmp	r3, #2
 800124c:	d009      	beq.n	8001262 <W25Q_WriteStatusReg+0x126>
 800124e:	e01f      	b.n	8001290 <W25Q_WriteStatusReg+0x154>
		case 1:
			if(wq->statReg1 != regVal)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2220      	movs	r2, #32
 8001254:	5c9b      	ldrb	r3, [r3, r2]
 8001256:	1cba      	adds	r2, r7, #2
 8001258:	7812      	ldrb	r2, [r2, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d013      	beq.n	8001286 <W25Q_WriteStatusReg+0x14a>
				return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e019      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>
			break;
		case 2:
			if(wq->statReg2 != regVal)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2221      	movs	r2, #33	@ 0x21
 8001266:	5c9b      	ldrb	r3, [r3, r2]
 8001268:	1cba      	adds	r2, r7, #2
 800126a:	7812      	ldrb	r2, [r2, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d00c      	beq.n	800128a <W25Q_WriteStatusReg+0x14e>
				return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e010      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>
			break;
		case 3:
			if(wq->statReg3 != regVal)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2222      	movs	r2, #34	@ 0x22
 8001278:	5c9b      	ldrb	r3, [r3, r2]
 800127a:	1cba      	adds	r2, r7, #2
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d005      	beq.n	800128e <W25Q_WriteStatusReg+0x152>
				return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e007      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>
			break;
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	e002      	b.n	8001290 <W25Q_WriteStatusReg+0x154>
			break;
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	e000      	b.n	8001290 <W25Q_WriteStatusReg+0x154>
			break;
 800128e:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 8001290:	2313      	movs	r3, #19
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	781b      	ldrb	r3, [r3, #0]


}
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b006      	add	sp, #24
 800129c:	bdb0      	pop	{r4, r5, r7, pc}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	08009698 	.word	0x08009698
 80012a4:	0001116f 	.word	0x0001116f

080012a8 <W25Q_readData>:

HAL_StatusTypeDef W25Q_readData(W25Q *wq, uint32_t startAddress, uint32_t dataSize, uint8_t *dataLocation) {
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80012b6:	2417      	movs	r4, #23
 80012b8:	193b      	adds	r3, r7, r4
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]

	// Create read data array with start address
	uint8_t readDataArr[4] = {CMD_READ_DATA, ((startAddress >> 16) & 0xFF), ((startAddress >> 8) & 0xFF), ((startAddress) & 0xFF)};
 80012be:	2510      	movs	r5, #16
 80012c0:	197b      	adds	r3, r7, r5
 80012c2:	2203      	movs	r2, #3
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	0c1b      	lsrs	r3, r3, #16
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	197b      	adds	r3, r7, r5
 80012ce:	705a      	strb	r2, [r3, #1]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	0a1b      	lsrs	r3, r3, #8
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	197b      	adds	r3, r7, r5
 80012d8:	709a      	strb	r2, [r3, #2]
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	197b      	adds	r3, r7, r5
 80012e0:	70da      	strb	r2, [r3, #3]

	// TX read data in single-SPI mode command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	2200      	movs	r2, #0
 80012ee:	0019      	movs	r1, r3
 80012f0:	f002 ffb5 	bl	800425e <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, readDataArr, 4, HAL_MAX_DELAY);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6998      	ldr	r0, [r3, #24]
 80012f8:	0026      	movs	r6, r4
 80012fa:	193c      	adds	r4, r7, r4
 80012fc:	2301      	movs	r3, #1
 80012fe:	425b      	negs	r3, r3
 8001300:	1979      	adds	r1, r7, r5
 8001302:	2204      	movs	r2, #4
 8001304:	f006 fa9a 	bl	800783c <HAL_SPI_Transmit>
 8001308:	0003      	movs	r3, r0
 800130a:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 800130c:	19bb      	adds	r3, r7, r6
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00b      	beq.n	800132c <W25Q_readData+0x84>
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	b29b      	uxth	r3, r3
 800131e:	2201      	movs	r2, #1
 8001320:	0019      	movs	r1, r3
 8001322:	f002 ff9c 	bl	800425e <HAL_GPIO_WritePin>
		return halRet;
 8001326:	19bb      	adds	r3, r7, r6
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	e017      	b.n	800135c <W25Q_readData+0xb4>
	}

	// RX data
	halRet = HAL_SPI_Receive(wq->hspi, dataLocation, dataSize, HAL_MAX_DELAY);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6998      	ldr	r0, [r3, #24]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	b29a      	uxth	r2, r3
 8001334:	2517      	movs	r5, #23
 8001336:	197c      	adds	r4, r7, r5
 8001338:	2301      	movs	r3, #1
 800133a:	425b      	negs	r3, r3
 800133c:	6839      	ldr	r1, [r7, #0]
 800133e:	f006 fbdd 	bl	8007afc <HAL_SPI_Receive>
 8001342:	0003      	movs	r3, r0
 8001344:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	b29b      	uxth	r3, r3
 8001350:	2201      	movs	r2, #1
 8001352:	0019      	movs	r1, r3
 8001354:	f002 ff83 	bl	800425e <HAL_GPIO_WritePin>


	return halRet;
 8001358:	197b      	adds	r3, r7, r5
 800135a:	781b      	ldrb	r3, [r3, #0]

}
 800135c:	0018      	movs	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	b007      	add	sp, #28
 8001362:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001364 <W25Q_ChipReset>:
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);

	return halRet;
}

HAL_StatusTypeDef W25Q_ChipReset(W25Q *wq) {
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800136c:	250e      	movs	r5, #14
 800136e:	197b      	adds	r3, r7, r5
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]

	/*
	 * Send both enable reset an reset device commands
	 */
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	b29b      	uxth	r3, r3
 800137e:	2200      	movs	r2, #0
 8001380:	0019      	movs	r1, r3
 8001382:	f002 ff6c 	bl	800425e <HAL_GPIO_WritePin>
	// TX enable reset instruction
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_RESET_ENABLE}, 1, HAL_MAX_DELAY);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6998      	ldr	r0, [r3, #24]
 800138a:	210c      	movs	r1, #12
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2266      	movs	r2, #102	@ 0x66
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	197c      	adds	r4, r7, r5
 8001394:	2301      	movs	r3, #1
 8001396:	425b      	negs	r3, r3
 8001398:	1879      	adds	r1, r7, r1
 800139a:	2201      	movs	r2, #1
 800139c:	f006 fa4e 	bl	800783c <HAL_SPI_Transmit>
 80013a0:	0003      	movs	r3, r0
 80013a2:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	2201      	movs	r2, #1
 80013b0:	0019      	movs	r1, r3
 80013b2:	f002 ff54 	bl	800425e <HAL_GPIO_WritePin>
	if(halRet != HAL_OK)
 80013b6:	197b      	adds	r3, r7, r5
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <W25Q_ChipReset+0x60>
		return halRet;
 80013be:	197b      	adds	r3, r7, r5
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	e035      	b.n	8001430 <W25Q_ChipReset+0xcc>

	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	2200      	movs	r2, #0
 80013d0:	0019      	movs	r1, r3
 80013d2:	f002 ff44 	bl	800425e <HAL_GPIO_WritePin>
	// TX reset device instruction
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_RESET_DEVICE}, 1, HAL_MAX_DELAY);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6998      	ldr	r0, [r3, #24]
 80013da:	2108      	movs	r1, #8
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	2299      	movs	r2, #153	@ 0x99
 80013e0:	701a      	strb	r2, [r3, #0]
 80013e2:	230e      	movs	r3, #14
 80013e4:	18fc      	adds	r4, r7, r3
 80013e6:	2301      	movs	r3, #1
 80013e8:	425b      	negs	r3, r3
 80013ea:	1879      	adds	r1, r7, r1
 80013ec:	2201      	movs	r2, #1
 80013ee:	f006 fa25 	bl	800783c <HAL_SPI_Transmit>
 80013f2:	0003      	movs	r3, r0
 80013f4:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	2201      	movs	r2, #1
 8001402:	0019      	movs	r1, r3
 8001404:	f002 ff2b 	bl	800425e <HAL_GPIO_WritePin>

	// Delay at least 30 us
	for(uint8_t i = 0; i < 180; i++) {
 8001408:	230f      	movs	r3, #15
 800140a:	18fb      	adds	r3, r7, r3
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	e006      	b.n	8001420 <W25Q_ChipReset+0xbc>
		__NOP();
 8001412:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < 180; i++) {
 8001414:	210f      	movs	r1, #15
 8001416:	187b      	adds	r3, r7, r1
 8001418:	781a      	ldrb	r2, [r3, #0]
 800141a:	187b      	adds	r3, r7, r1
 800141c:	3201      	adds	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	230f      	movs	r3, #15
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2bb3      	cmp	r3, #179	@ 0xb3
 8001428:	d9f3      	bls.n	8001412 <W25Q_ChipReset+0xae>
	}


	return halRet;
 800142a:	230e      	movs	r3, #14
 800142c:	18fb      	adds	r3, r7, r3
 800142e:	781b      	ldrb	r3, [r3, #0]

}
 8001430:	0018      	movs	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	b004      	add	sp, #16
 8001436:	bdb0      	pop	{r4, r5, r7, pc}

08001438 <W25Q_SetDriverStrength>:

	return halRet;

}

HAL_StatusTypeDef W25Q_SetDriverStrength(W25Q *wq, uint8_t driverStrength) {
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	000a      	movs	r2, r1
 8001442:	1cfb      	adds	r3, r7, #3
 8001444:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8001446:	230f      	movs	r3, #15
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]

	// Check to ensure passed driver strength value lies in range
	if(driverStrength < 0 || driverStrength > 3)
 800144e:	1cfb      	adds	r3, r7, #3
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d901      	bls.n	800145a <W25Q_SetDriverStrength+0x22>
		return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e041      	b.n	80014de <W25Q_SetDriverStrength+0xa6>

	// Read current value in status register 3
	halRet = W25Q_ReadStatusReg(wq, 3);
 800145a:	250f      	movs	r5, #15
 800145c:	197c      	adds	r4, r7, r5
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2103      	movs	r1, #3
 8001462:	0018      	movs	r0, r3
 8001464:	f7ff fd94 	bl	8000f90 <W25Q_ReadStatusReg>
 8001468:	0003      	movs	r3, r0
 800146a:	7023      	strb	r3, [r4, #0]

	// Isolate bits 5-6 and change value to reflect new driver strength
	uint8_t newRegVal = (wq->statReg3) & (0b10011111);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2222      	movs	r2, #34	@ 0x22
 8001470:	5c9a      	ldrb	r2, [r3, r2]
 8001472:	200e      	movs	r0, #14
 8001474:	183b      	adds	r3, r7, r0
 8001476:	2160      	movs	r1, #96	@ 0x60
 8001478:	438a      	bics	r2, r1
 800147a:	701a      	strb	r2, [r3, #0]
	newRegVal = (newRegVal) | (driverStrength << 5);
 800147c:	1cfb      	adds	r3, r7, #3
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	015b      	lsls	r3, r3, #5
 8001482:	b25a      	sxtb	r2, r3
 8001484:	183b      	adds	r3, r7, r0
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b25b      	sxtb	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b25a      	sxtb	r2, r3
 800148e:	183b      	adds	r3, r7, r0
 8001490:	701a      	strb	r2, [r3, #0]

	// Write status register 3 with new value
	halRet = W25Q_WriteStatusReg(wq, 3, newRegVal);
 8001492:	197c      	adds	r4, r7, r5
 8001494:	183b      	adds	r3, r7, r0
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2103      	movs	r1, #3
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff fe4d 	bl	800113c <W25Q_WriteStatusReg>
 80014a2:	0003      	movs	r3, r0
 80014a4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80014a6:	197b      	adds	r3, r7, r5
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <W25Q_SetDriverStrength+0x7c>
		return halRet;
 80014ae:	197b      	adds	r3, r7, r5
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	e014      	b.n	80014de <W25Q_SetDriverStrength+0xa6>

	// Read back status register 3 and confirm successful write
	halRet = W25Q_ReadStatusReg(wq, 3);
 80014b4:	230f      	movs	r3, #15
 80014b6:	18fc      	adds	r4, r7, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2103      	movs	r1, #3
 80014bc:	0018      	movs	r0, r3
 80014be:	f7ff fd67 	bl	8000f90 <W25Q_ReadStatusReg>
 80014c2:	0003      	movs	r3, r0
 80014c4:	7023      	strb	r3, [r4, #0]
	if(wq->driverStrength != driverStrength)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2226      	movs	r2, #38	@ 0x26
 80014ca:	5c9b      	ldrb	r3, [r3, r2]
 80014cc:	1cfa      	adds	r2, r7, #3
 80014ce:	7812      	ldrb	r2, [r2, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <W25Q_SetDriverStrength+0xa0>
		return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e002      	b.n	80014de <W25Q_SetDriverStrength+0xa6>

	return halRet;
 80014d8:	230f      	movs	r3, #15
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	781b      	ldrb	r3, [r3, #0]

}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b004      	add	sp, #16
 80014e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080014e8 <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b09a      	sub	sp, #104	@ 0x68
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80014f4:	2567      	movs	r5, #103	@ 0x67
 80014f6:	197b      	adds	r3, r7, r5
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 80014fc:	243c      	movs	r4, #60	@ 0x3c
 80014fe:	193b      	adds	r3, r7, r4
 8001500:	0018      	movs	r0, r3
 8001502:	2328      	movs	r3, #40	@ 0x28
 8001504:	001a      	movs	r2, r3
 8001506:	2100      	movs	r1, #0
 8001508:	f008 f86e 	bl	80095e8 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	781a      	ldrb	r2, [r3, #0]
 8001510:	0021      	movs	r1, r4
 8001512:	187b      	adds	r3, r7, r1
 8001514:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	785b      	ldrb	r3, [r3, #1]
 800151a:	3301      	adds	r3, #1
 800151c:	b2da      	uxtb	r2, r3
 800151e:	187b      	adds	r3, r7, r1
 8001520:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	789a      	ldrb	r2, [r3, #2]
 8001526:	187b      	adds	r3, r7, r1
 8001528:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	187b      	adds	r3, r7, r1
 8001530:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	78da      	ldrb	r2, [r3, #3]
 8001536:	187b      	adds	r3, r7, r1
 8001538:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	78da      	ldrb	r2, [r3, #3]
 800153e:	187b      	adds	r3, r7, r1
 8001540:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001542:	0008      	movs	r0, r1
 8001544:	183b      	adds	r3, r7, r0
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800154a:	183b      	adds	r3, r7, r0
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8001550:	183b      	adds	r3, r7, r0
 8001552:	4a19      	ldr	r2, [pc, #100]	@ (80015b8 <initRTCInternalAlarm+0xd0>)
 8001554:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001556:	183b      	adds	r3, r7, r0
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800155c:	183b      	adds	r3, r7, r0
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 8001562:	183b      	adds	r3, r7, r0
 8001564:	2220      	movs	r2, #32
 8001566:	2101      	movs	r1, #1
 8001568:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 800156a:	0001      	movs	r1, r0
 800156c:	187b      	adds	r3, r7, r1
 800156e:	2280      	movs	r2, #128	@ 0x80
 8001570:	0052      	lsls	r2, r2, #1
 8001572:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8001574:	197c      	adds	r4, r7, r5
 8001576:	1879      	adds	r1, r7, r1
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	0018      	movs	r0, r3
 800157e:	f005 fc85 	bl	8006e8c <HAL_RTC_SetAlarm_IT>
 8001582:	0003      	movs	r3, r0
 8001584:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8001586:	197b      	adds	r3, r7, r5
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <initRTCInternalAlarm+0xac>
		return halRet;
 800158e:	197b      	adds	r3, r7, r5
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	e00d      	b.n	80015b0 <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8001594:	2567      	movs	r5, #103	@ 0x67
 8001596:	197c      	adds	r4, r7, r5
 8001598:	2380      	movs	r3, #128	@ 0x80
 800159a:	005a      	lsls	r2, r3, #1
 800159c:	2314      	movs	r3, #20
 800159e:	18f9      	adds	r1, r7, r3
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	2300      	movs	r3, #0
 80015a4:	f005 fdb2 	bl	800710c <HAL_RTC_GetAlarm>
 80015a8:	0003      	movs	r3, r0
 80015aa:	7023      	strb	r3, [r4, #0]
	return halRet;
 80015ac:	197b      	adds	r3, r7, r5
 80015ae:	781b      	ldrb	r3, [r3, #0]

}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b01a      	add	sp, #104	@ 0x68
 80015b6:	bdb0      	pop	{r4, r5, r7, pc}
 80015b8:	80800080 	.word	0x80800080

080015bc <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2200      	movs	r2, #0
 80015ce:	0018      	movs	r0, r3
 80015d0:	f005 fb20 	bl	8006c14 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	0018      	movs	r0, r3
 80015dc:	f005 fc08 	bl	8006df0 <HAL_RTC_GetDate>

}
 80015e0:	46c0      	nop			@ (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b004      	add	sp, #16
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	46de      	mov	lr, fp
 80015ec:	4657      	mov	r7, sl
 80015ee:	464e      	mov	r6, r9
 80015f0:	4645      	mov	r5, r8
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b08f      	sub	sp, #60	@ 0x3c
 80015f6:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f8:	f002 f8fa 	bl	80037f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015fc:	f000 f9f0 	bl	80019e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001600:	f000 fc6c 	bl	8001edc <MX_GPIO_Init>
  MX_DMA_Init();
 8001604:	f000 fc44 	bl	8001e90 <MX_DMA_Init>
  MX_RTC_Init();
 8001608:	f000 fac0 	bl	8001b8c <MX_RTC_Init>
  MX_I2C1_Init();
 800160c:	f000 fa54 	bl	8001ab8 <MX_I2C1_Init>
  MX_I2S1_Init();
 8001610:	f000 fa92 	bl	8001b38 <MX_I2S1_Init>
  MX_SPI2_Init();
 8001614:	f000 fb4e 	bl	8001cb4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001618:	f000 fb8a 	bl	8001d30 <MX_TIM2_Init>
  MX_TIM14_Init();
 800161c:	f000 fbe8 	bl	8001df0 <MX_TIM14_Init>
  MX_TIM16_Init();
 8001620:	f000 fc0c 	bl	8001e3c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	  // HAL Status handle for error-checking
	  HAL_StatusTypeDef halRet = HAL_OK;
 8001624:	2317      	movs	r3, #23
 8001626:	18fb      	adds	r3, r7, r3
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]

	  // Determine which time format we will be using
	  	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 800162c:	4bc6      	ldr	r3, [pc, #792]	@ (8001948 <main+0x360>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2210      	movs	r2, #16
 8001632:	0011      	movs	r1, r2
 8001634:	0018      	movs	r0, r3
 8001636:	f002 fdf5 	bl	8004224 <HAL_GPIO_ReadPin>
 800163a:	0003      	movs	r3, r0
 800163c:	001a      	movs	r2, r3
 800163e:	4bc3      	ldr	r3, [pc, #780]	@ (800194c <main+0x364>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d103      	bne.n	800164e <main+0x66>
	  	  userTimeFormat = RTC_HOURFORMAT_12;
 8001646:	4bc2      	ldr	r3, [pc, #776]	@ (8001950 <main+0x368>)
 8001648:	2240      	movs	r2, #64	@ 0x40
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e002      	b.n	8001654 <main+0x6c>
	  	}
	  	else {
	  	  userTimeFormat = RTC_HOURFORMAT_24;
 800164e:	4bc0      	ldr	r3, [pc, #768]	@ (8001950 <main+0x368>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
	  	}

  	  // Set Smooth Calibration Value
	  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8001654:	4bbf      	ldr	r3, [pc, #764]	@ (8001954 <main+0x36c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2517      	movs	r5, #23
 800165a:	197c      	adds	r4, r7, r5
 800165c:	2280      	movs	r2, #128	@ 0x80
 800165e:	01d1      	lsls	r1, r2, #7
 8001660:	48bd      	ldr	r0, [pc, #756]	@ (8001958 <main+0x370>)
 8001662:	2200      	movs	r2, #0
 8001664:	f005 ff47 	bl	80074f6 <HAL_RTCEx_SetSmoothCalib>
 8001668:	0003      	movs	r3, r0
 800166a:	7023      	strb	r3, [r4, #0]
									RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
	  if(halRet != HAL_OK) {
 800166c:	197b      	adds	r3, r7, r5
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <main+0x90>
		  // Failure to talk to RTC is a hard failure
		  dispFailure();
 8001674:	f001 f9b8 	bl	80029e8 <dispFailure>
	  }

	  // Init the internal RTC alarm time to track the current time
	  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 8001678:	2517      	movs	r5, #23
 800167a:	197c      	adds	r4, r7, r5
 800167c:	4ab7      	ldr	r2, [pc, #732]	@ (800195c <main+0x374>)
 800167e:	49b8      	ldr	r1, [pc, #736]	@ (8001960 <main+0x378>)
 8001680:	4bb5      	ldr	r3, [pc, #724]	@ (8001958 <main+0x370>)
 8001682:	0018      	movs	r0, r3
 8001684:	f7ff ff30 	bl	80014e8 <initRTCInternalAlarm>
 8001688:	0003      	movs	r3, r0
 800168a:	7023      	strb	r3, [r4, #0]
	  if(halRet != HAL_OK) {
 800168c:	197b      	adds	r3, r7, r5
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <main+0xb0>
		  // Failure to initialize RTC alarm is a hard failure
		  dispFailure();
 8001694:	f001 f9a8 	bl	80029e8 <dispFailure>
		}

	  // Initialize all GPIOs to be used with 7 segment display
		sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	009c      	lsls	r4, r3, #2
 800169c:	2380      	movs	r3, #128	@ 0x80
 800169e:	00dd      	lsls	r5, r3, #3
 80016a0:	2680      	movs	r6, #128	@ 0x80
 80016a2:	2340      	movs	r3, #64	@ 0x40
 80016a4:	469c      	mov	ip, r3
 80016a6:	2380      	movs	r3, #128	@ 0x80
 80016a8:	011a      	lsls	r2, r3, #4
 80016aa:	4bae      	ldr	r3, [pc, #696]	@ (8001964 <main+0x37c>)
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	4bae      	ldr	r3, [pc, #696]	@ (8001968 <main+0x380>)
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	4bae      	ldr	r3, [pc, #696]	@ (800196c <main+0x384>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	9304      	str	r3, [sp, #16]
 80016b8:	9003      	str	r0, [sp, #12]
 80016ba:	9102      	str	r1, [sp, #8]
 80016bc:	4bac      	ldr	r3, [pc, #688]	@ (8001970 <main+0x388>)
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	9200      	str	r2, [sp, #0]
 80016c2:	4663      	mov	r3, ip
 80016c4:	0032      	movs	r2, r6
 80016c6:	0029      	movs	r1, r5
 80016c8:	0020      	movs	r0, r4
 80016ca:	f001 faeb 	bl	8002ca4 <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


		halRet = updateAndDisplayTime();
 80016ce:	2517      	movs	r5, #23
 80016d0:	197c      	adds	r4, r7, r5
 80016d2:	f000 fd15 	bl	8002100 <updateAndDisplayTime>
 80016d6:	0003      	movs	r3, r0
 80016d8:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 80016da:	197b      	adds	r3, r7, r5
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <main+0xfe>
		  // Failure to display current time is a hard failure
		  dispFailure();
 80016e2:	f001 f981 	bl	80029e8 <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

		// Used to separate return initializations into critical and non-critical errors.
		uint8_t initRet = 0;
 80016e6:	2116      	movs	r1, #22
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]

		initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 80016ee:	4b9d      	ldr	r3, [pc, #628]	@ (8001964 <main+0x37c>)
 80016f0:	681d      	ldr	r5, [r3, #0]
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4a9f      	ldr	r2, [pc, #636]	@ (8001974 <main+0x38c>)
 80016f8:	7812      	ldrb	r2, [r2, #0]
 80016fa:	187c      	adds	r4, r7, r1
 80016fc:	4e9e      	ldr	r6, [pc, #632]	@ (8001978 <main+0x390>)
 80016fe:	499f      	ldr	r1, [pc, #636]	@ (800197c <main+0x394>)
 8001700:	489f      	ldr	r0, [pc, #636]	@ (8001980 <main+0x398>)
 8001702:	9201      	str	r2, [sp, #4]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	0033      	movs	r3, r6
 8001708:	002a      	movs	r2, r5
 800170a:	f7fe fd87 	bl	800021c <capTouch_Init>
 800170e:	0003      	movs	r3, r0
 8001710:	7023      	strb	r3, [r4, #0]
								&capTouchResetPort, capTouchResetPin, capTouchChannels);
		if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 8001712:	2116      	movs	r1, #22
 8001714:	187b      	adds	r3, r7, r1
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d007      	beq.n	800172c <main+0x144>
 800171c:	187b      	adds	r3, r7, r1
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d003      	beq.n	800172c <main+0x144>
 8001724:	187b      	adds	r3, r7, r1
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b04      	cmp	r3, #4
 800172a:	d102      	bne.n	8001732 <main+0x14a>
			/* Critical Errors:
			 * 1 = Failure to read correct device ID
			 * 2 = Failure to read Keys
			 * 3 = Failure to enable keys
			 */
			dispFailure();
 800172c:	f001 f95c 	bl	80029e8 <dispFailure>
 8001730:	e00d      	b.n	800174e <main+0x166>
		}
		else if (initRet == 2) {
 8001732:	2316      	movs	r3, #22
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d102      	bne.n	8001742 <main+0x15a>
			/*
			 * Non-critical Errors:
			 * 2 = Failure to Recalibrate
			 */
			dispFault();
 800173c:	f001 f944 	bl	80029c8 <dispFault>
 8001740:	e005      	b.n	800174e <main+0x166>
		}
		else if(initRet == 0) {
 8001742:	2316      	movs	r3, #22
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d100      	bne.n	800174e <main+0x166>
			// initRet = 0 = all is well
			__NOP();
 800174c:	46c0      	nop			@ (mov r8, r8)
		}

		// Set averaging factor
		uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 800174e:	4b8d      	ldr	r3, [pc, #564]	@ (8001984 <main+0x39c>)
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	210c      	movs	r1, #12
 8001754:	187b      	adds	r3, r7, r1
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	4b8a      	ldr	r3, [pc, #552]	@ (8001984 <main+0x39c>)
 800175a:	781a      	ldrb	r2, [r3, #0]
 800175c:	187b      	adds	r3, r7, r1
 800175e:	705a      	strb	r2, [r3, #1]
 8001760:	4b88      	ldr	r3, [pc, #544]	@ (8001984 <main+0x39c>)
 8001762:	781a      	ldrb	r2, [r3, #0]
 8001764:	187b      	adds	r3, r7, r1
 8001766:	709a      	strb	r2, [r3, #2]
 8001768:	4b86      	ldr	r3, [pc, #536]	@ (8001984 <main+0x39c>)
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	187b      	adds	r3, r7, r1
 800176e:	70da      	strb	r2, [r3, #3]
 8001770:	187b      	adds	r3, r7, r1
 8001772:	2200      	movs	r2, #0
 8001774:	711a      	strb	r2, [r3, #4]
 8001776:	187b      	adds	r3, r7, r1
 8001778:	2200      	movs	r2, #0
 800177a:	715a      	strb	r2, [r3, #5]
 800177c:	187b      	adds	r3, r7, r1
 800177e:	2200      	movs	r2, #0
 8001780:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8001782:	2517      	movs	r5, #23
 8001784:	197c      	adds	r4, r7, r5
 8001786:	187a      	adds	r2, r7, r1
 8001788:	4b7d      	ldr	r3, [pc, #500]	@ (8001980 <main+0x398>)
 800178a:	0011      	movs	r1, r2
 800178c:	0018      	movs	r0, r3
 800178e:	f7fe ffb9 	bl	8000704 <capTouch_SetAveragingFactor>
 8001792:	0003      	movs	r3, r0
 8001794:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 8001796:	197b      	adds	r3, r7, r5
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <main+0x1ba>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 800179e:	f001 f913 	bl	80029c8 <dispFault>
		}

		// Set detection integration factors
		uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 80017a2:	4b79      	ldr	r3, [pc, #484]	@ (8001988 <main+0x3a0>)
 80017a4:	781a      	ldrb	r2, [r3, #0]
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	4b77      	ldr	r3, [pc, #476]	@ (8001988 <main+0x3a0>)
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	705a      	strb	r2, [r3, #1]
 80017b2:	4b75      	ldr	r3, [pc, #468]	@ (8001988 <main+0x3a0>)
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	709a      	strb	r2, [r3, #2]
 80017ba:	4b73      	ldr	r3, [pc, #460]	@ (8001988 <main+0x3a0>)
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	70da      	strb	r2, [r3, #3]
 80017c2:	4b71      	ldr	r3, [pc, #452]	@ (8001988 <main+0x3a0>)
 80017c4:	781a      	ldrb	r2, [r3, #0]
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	711a      	strb	r2, [r3, #4]
 80017ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001988 <main+0x3a0>)
 80017cc:	781a      	ldrb	r2, [r3, #0]
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	715a      	strb	r2, [r3, #5]
 80017d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001988 <main+0x3a0>)
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 80017da:	2517      	movs	r5, #23
 80017dc:	197c      	adds	r4, r7, r5
 80017de:	1d3a      	adds	r2, r7, #4
 80017e0:	4b67      	ldr	r3, [pc, #412]	@ (8001980 <main+0x398>)
 80017e2:	0011      	movs	r1, r2
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff f857 	bl	8000898 <capTouch_SetDetectionIntegrator>
 80017ea:	0003      	movs	r3, r0
 80017ec:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 80017ee:	197b      	adds	r3, r7, r5
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <main+0x212>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 80017f6:	f001 f8e7 	bl	80029c8 <dispFault>
		}

		userAlarmToggle = false;			//Default to off
 80017fa:	4b64      	ldr	r3, [pc, #400]	@ (800198c <main+0x3a4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

		if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8001800:	4b63      	ldr	r3, [pc, #396]	@ (8001990 <main+0x3a8>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b54      	ldr	r3, [pc, #336]	@ (8001958 <main+0x370>)
 8001806:	0011      	movs	r1, r2
 8001808:	0018      	movs	r0, r3
 800180a:	f005 ff44 	bl	8007696 <HAL_RTCEx_BKUPRead>
 800180e:	0003      	movs	r3, r0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d11c      	bne.n	8001850 <main+0x268>

			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8001816:	4b5f      	ldr	r3, [pc, #380]	@ (8001994 <main+0x3ac>)
 8001818:	6819      	ldr	r1, [r3, #0]
 800181a:	4b4f      	ldr	r3, [pc, #316]	@ (8001958 <main+0x370>)
 800181c:	2201      	movs	r2, #1
 800181e:	0018      	movs	r0, r3
 8001820:	f005 ff1c 	bl	800765c <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8001824:	4b5c      	ldr	r3, [pc, #368]	@ (8001998 <main+0x3b0>)
 8001826:	6819      	ldr	r1, [r3, #0]
 8001828:	4b4b      	ldr	r3, [pc, #300]	@ (8001958 <main+0x370>)
 800182a:	2200      	movs	r2, #0
 800182c:	0018      	movs	r0, r3
 800182e:	f005 ff15 	bl	800765c <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8001832:	4b5a      	ldr	r3, [pc, #360]	@ (800199c <main+0x3b4>)
 8001834:	6819      	ldr	r1, [r3, #0]
 8001836:	4b48      	ldr	r3, [pc, #288]	@ (8001958 <main+0x370>)
 8001838:	2200      	movs	r2, #0
 800183a:	0018      	movs	r0, r3
 800183c:	f005 ff0e 	bl	800765c <HAL_RTCEx_BKUPWrite>

			// Write backup register with a non-zero value to signify that it has been initialized before
			HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8001840:	4b53      	ldr	r3, [pc, #332]	@ (8001990 <main+0x3a8>)
 8001842:	6819      	ldr	r1, [r3, #0]
 8001844:	2301      	movs	r3, #1
 8001846:	425a      	negs	r2, r3
 8001848:	4b43      	ldr	r3, [pc, #268]	@ (8001958 <main+0x370>)
 800184a:	0018      	movs	r0, r3
 800184c:	f005 ff06 	bl	800765c <HAL_RTCEx_BKUPWrite>

		}

		userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8001850:	4b50      	ldr	r3, [pc, #320]	@ (8001994 <main+0x3ac>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b40      	ldr	r3, [pc, #256]	@ (8001958 <main+0x370>)
 8001856:	0011      	movs	r1, r2
 8001858:	0018      	movs	r0, r3
 800185a:	f005 ff1c 	bl	8007696 <HAL_RTCEx_BKUPRead>
 800185e:	0003      	movs	r3, r0
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b4f      	ldr	r3, [pc, #316]	@ (80019a0 <main+0x3b8>)
 8001864:	701a      	strb	r2, [r3, #0]
		userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8001866:	4b4c      	ldr	r3, [pc, #304]	@ (8001998 <main+0x3b0>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4b3b      	ldr	r3, [pc, #236]	@ (8001958 <main+0x370>)
 800186c:	0011      	movs	r1, r2
 800186e:	0018      	movs	r0, r3
 8001870:	f005 ff11 	bl	8007696 <HAL_RTCEx_BKUPRead>
 8001874:	0003      	movs	r3, r0
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b49      	ldr	r3, [pc, #292]	@ (80019a0 <main+0x3b8>)
 800187a:	705a      	strb	r2, [r3, #1]
		userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 800187c:	4b47      	ldr	r3, [pc, #284]	@ (800199c <main+0x3b4>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b35      	ldr	r3, [pc, #212]	@ (8001958 <main+0x370>)
 8001882:	0011      	movs	r1, r2
 8001884:	0018      	movs	r0, r3
 8001886:	f005 ff06 	bl	8007696 <HAL_RTCEx_BKUPRead>
 800188a:	0003      	movs	r3, r0
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b44      	ldr	r3, [pc, #272]	@ (80019a0 <main+0x3b8>)
 8001890:	70da      	strb	r2, [r3, #3]


		// Init Memory Chip
		initRet = W25Q_Init(&spiFlash, nCSPort, nWPPort, nHOLDPort,
 8001892:	4b44      	ldr	r3, [pc, #272]	@ (80019a4 <main+0x3bc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4698      	mov	r8, r3
 8001898:	4b43      	ldr	r3, [pc, #268]	@ (80019a8 <main+0x3c0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4699      	mov	r9, r3
 800189e:	4b43      	ldr	r3, [pc, #268]	@ (80019ac <main+0x3c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	469a      	mov	sl, r3
 80018a4:	4b42      	ldr	r3, [pc, #264]	@ (80019b0 <main+0x3c8>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b42      	ldr	r3, [pc, #264]	@ (80019b4 <main+0x3cc>)
 80018aa:	6819      	ldr	r1, [r3, #0]
 80018ac:	4b42      	ldr	r3, [pc, #264]	@ (80019b8 <main+0x3d0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	469b      	mov	fp, r3
 80018b2:	4842      	ldr	r0, [pc, #264]	@ (80019bc <main+0x3d4>)
 80018b4:	7800      	ldrb	r0, [r0, #0]
 80018b6:	4c42      	ldr	r4, [pc, #264]	@ (80019c0 <main+0x3d8>)
 80018b8:	7825      	ldrb	r5, [r4, #0]
 80018ba:	4c42      	ldr	r4, [pc, #264]	@ (80019c4 <main+0x3dc>)
 80018bc:	7826      	ldrb	r6, [r4, #0]
 80018be:	2416      	movs	r4, #22
 80018c0:	193c      	adds	r4, r7, r4
 80018c2:	4b41      	ldr	r3, [pc, #260]	@ (80019c8 <main+0x3e0>)
 80018c4:	469c      	mov	ip, r3
 80018c6:	9606      	str	r6, [sp, #24]
 80018c8:	9505      	str	r5, [sp, #20]
 80018ca:	9004      	str	r0, [sp, #16]
 80018cc:	483f      	ldr	r0, [pc, #252]	@ (80019cc <main+0x3e4>)
 80018ce:	9003      	str	r0, [sp, #12]
 80018d0:	465b      	mov	r3, fp
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	9101      	str	r1, [sp, #4]
 80018d6:	9200      	str	r2, [sp, #0]
 80018d8:	4653      	mov	r3, sl
 80018da:	464a      	mov	r2, r9
 80018dc:	4641      	mov	r1, r8
 80018de:	4660      	mov	r0, ip
 80018e0:	f7ff f88c 	bl	80009fc <W25Q_Init>
 80018e4:	0003      	movs	r3, r0
 80018e6:	7023      	strb	r3, [r4, #0]
	    		 nCSPin, nWPPin, nHOLDPin, &hspi2, spiFlash_devID, spiFlash_isQuadChip, spiFlash_driveStrength);

		// Enter error loop if there's an error in initialization
		if( (initRet == 1) || (initRet == 7) ) {
 80018e8:	2216      	movs	r2, #22
 80018ea:	18bb      	adds	r3, r7, r2
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d003      	beq.n	80018fa <main+0x312>
 80018f2:	18bb      	adds	r3, r7, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b07      	cmp	r3, #7
 80018f8:	d102      	bne.n	8001900 <main+0x318>
			/* Critical Errors:
			* 1 = Failure to release chip from power down
			* 7 = Failure to disable write protection
			*/
			dispFailure();
 80018fa:	f001 f875 	bl	80029e8 <dispFailure>
 80018fe:	e016      	b.n	800192e <main+0x346>
		}
		else if ( ((initRet >= 2) && (initRet <= 6)) || (initRet == 8) ) {
 8001900:	2216      	movs	r2, #22
 8001902:	18bb      	adds	r3, r7, r2
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d903      	bls.n	8001912 <main+0x32a>
 800190a:	18bb      	adds	r3, r7, r2
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b06      	cmp	r3, #6
 8001910:	d904      	bls.n	800191c <main+0x334>
 8001912:	2316      	movs	r3, #22
 8001914:	18fb      	adds	r3, r7, r3
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b08      	cmp	r3, #8
 800191a:	d102      	bne.n	8001922 <main+0x33a>
			* 2 = Failure to reset chip
			* 3,6,8 = Failure to read status registers
			* 4 = Failure to set driver strength
			* 5 = Failure to read device ID
			*/
			dispFault();
 800191c:	f001 f854 	bl	80029c8 <dispFault>
 8001920:	e005      	b.n	800192e <main+0x346>
		}
		else if(initRet == 0) {
 8001922:	2316      	movs	r3, #22
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d100      	bne.n	800192e <main+0x346>
			// initRet = 0 = all is well
			__NOP();
 800192c:	46c0      	nop			@ (mov r8, r8)
		}


		// Init i2s amplifier
		NAU8315YG_Init(&i2sAmp, &hi2s1, i2sAmp_enablePort, i2sAmp_enablePin);
 800192e:	4b28      	ldr	r3, [pc, #160]	@ (80019d0 <main+0x3e8>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4b28      	ldr	r3, [pc, #160]	@ (80019d4 <main+0x3ec>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4928      	ldr	r1, [pc, #160]	@ (80019d8 <main+0x3f0>)
 8001938:	4828      	ldr	r0, [pc, #160]	@ (80019dc <main+0x3f4>)
 800193a:	f7ff f81f 	bl	800097c <NAU8315YG_Init>

		startAudioStream();
 800193e:	f001 f8f5 	bl	8002b2c <startAudioStream>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	e7fd      	b.n	8001942 <main+0x35a>
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	20000008 	.word	0x20000008
 800194c:	20000040 	.word	0x20000040
 8001950:	200000ec 	.word	0x200000ec
 8001954:	2000002c 	.word	0x2000002c
 8001958:	200001dc 	.word	0x200001dc
 800195c:	200000d0 	.word	0x200000d0
 8001960:	200000bc 	.word	0x200000bc
 8001964:	2000006c 	.word	0x2000006c
 8001968:	20000068 	.word	0x20000068
 800196c:	20000030 	.word	0x20000030
 8001970:	20000014 	.word	0x20000014
 8001974:	20000010 	.word	0x20000010
 8001978:	2000000c 	.word	0x2000000c
 800197c:	200000f0 	.word	0x200000f0
 8001980:	2000040c 	.word	0x2000040c
 8001984:	20000011 	.word	0x20000011
 8001988:	20000012 	.word	0x20000012
 800198c:	200000b9 	.word	0x200000b9
 8001990:	2000003c 	.word	0x2000003c
 8001994:	200000e8 	.word	0x200000e8
 8001998:	20000034 	.word	0x20000034
 800199c:	20000038 	.word	0x20000038
 80019a0:	200000d4 	.word	0x200000d4
 80019a4:	20000044 	.word	0x20000044
 80019a8:	20000048 	.word	0x20000048
 80019ac:	2000004c 	.word	0x2000004c
 80019b0:	20000050 	.word	0x20000050
 80019b4:	20000054 	.word	0x20000054
 80019b8:	20000058 	.word	0x20000058
 80019bc:	2000005c 	.word	0x2000005c
 80019c0:	2000005d 	.word	0x2000005d
 80019c4:	2000005e 	.word	0x2000005e
 80019c8:	20000420 	.word	0x20000420
 80019cc:	20000208 	.word	0x20000208
 80019d0:	20000060 	.word	0x20000060
 80019d4:	20000064 	.word	0x20000064
 80019d8:	20000144 	.word	0x20000144
 80019dc:	20000448 	.word	0x20000448

080019e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b093      	sub	sp, #76	@ 0x4c
 80019e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e6:	2410      	movs	r4, #16
 80019e8:	193b      	adds	r3, r7, r4
 80019ea:	0018      	movs	r0, r3
 80019ec:	2338      	movs	r3, #56	@ 0x38
 80019ee:	001a      	movs	r2, r3
 80019f0:	2100      	movs	r1, #0
 80019f2:	f007 fdf9 	bl	80095e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f6:	003b      	movs	r3, r7
 80019f8:	0018      	movs	r0, r3
 80019fa:	2310      	movs	r3, #16
 80019fc:	001a      	movs	r2, r3
 80019fe:	2100      	movs	r1, #0
 8001a00:	f007 fdf2 	bl	80095e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a04:	2380      	movs	r3, #128	@ 0x80
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f003 fe21 	bl	8005650 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a0e:	f003 fe01 	bl	8005614 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a12:	4b28      	ldr	r3, [pc, #160]	@ (8001ab4 <SystemClock_Config+0xd4>)
 8001a14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a16:	4b27      	ldr	r3, [pc, #156]	@ (8001ab4 <SystemClock_Config+0xd4>)
 8001a18:	2118      	movs	r1, #24
 8001a1a:	438a      	bics	r2, r1
 8001a1c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8001a1e:	193b      	adds	r3, r7, r4
 8001a20:	220d      	movs	r2, #13
 8001a22:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a24:	193b      	adds	r3, r7, r4
 8001a26:	2280      	movs	r2, #128	@ 0x80
 8001a28:	0252      	lsls	r2, r2, #9
 8001a2a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a2c:	0021      	movs	r1, r4
 8001a2e:	187b      	adds	r3, r7, r1
 8001a30:	2201      	movs	r2, #1
 8001a32:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a34:	187b      	adds	r3, r7, r1
 8001a36:	2201      	movs	r2, #1
 8001a38:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a3a:	187b      	adds	r3, r7, r1
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	2203      	movs	r2, #3
 8001a44:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001a46:	187b      	adds	r3, r7, r1
 8001a48:	2200      	movs	r2, #0
 8001a4a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	2208      	movs	r2, #8
 8001a50:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a52:	187b      	adds	r3, r7, r1
 8001a54:	22c0      	movs	r2, #192	@ 0xc0
 8001a56:	02d2      	lsls	r2, r2, #11
 8001a58:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a5a:	187b      	adds	r3, r7, r1
 8001a5c:	2280      	movs	r2, #128	@ 0x80
 8001a5e:	0492      	lsls	r2, r2, #18
 8001a60:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a62:	187b      	adds	r3, r7, r1
 8001a64:	2280      	movs	r2, #128	@ 0x80
 8001a66:	0592      	lsls	r2, r2, #22
 8001a68:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f003 fe3b 	bl	80056e8 <HAL_RCC_OscConfig>
 8001a72:	1e03      	subs	r3, r0, #0
 8001a74:	d001      	beq.n	8001a7a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a76:	f001 f90e 	bl	8002c96 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7a:	003b      	movs	r3, r7
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a80:	003b      	movs	r3, r7
 8001a82:	2202      	movs	r2, #2
 8001a84:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a86:	003b      	movs	r3, r7
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a8c:	003b      	movs	r3, r7
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a92:	003b      	movs	r3, r7
 8001a94:	2102      	movs	r1, #2
 8001a96:	0018      	movs	r0, r3
 8001a98:	f004 f940 	bl	8005d1c <HAL_RCC_ClockConfig>
 8001a9c:	1e03      	subs	r3, r0, #0
 8001a9e:	d001      	beq.n	8001aa4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001aa0:	f001 f8f9 	bl	8002c96 <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f004 fef3 	bl	8006890 <HAL_RCCEx_EnableLSCO>
}
 8001aaa:	46c0      	nop			@ (mov r8, r8)
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b013      	add	sp, #76	@ 0x4c
 8001ab0:	bd90      	pop	{r4, r7, pc}
 8001ab2:	46c0      	nop			@ (mov r8, r8)
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001abe:	4a1c      	ldr	r2, [pc, #112]	@ (8001b30 <MX_I2C1_Init+0x78>)
 8001ac0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b34 <MX_I2C1_Init+0x7c>)
 8001ac6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ac8:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ace:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad4:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ada:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ae0:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aec:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001af2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001af4:	0018      	movs	r0, r3
 8001af6:	f002 fc15 	bl	8004324 <HAL_I2C_Init>
 8001afa:	1e03      	subs	r3, r0, #0
 8001afc:	d001      	beq.n	8001b02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001afe:	f001 f8ca 	bl	8002c96 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b02:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001b04:	2100      	movs	r1, #0
 8001b06:	0018      	movs	r0, r3
 8001b08:	f003 f9b8 	bl	8004e7c <HAL_I2CEx_ConfigAnalogFilter>
 8001b0c:	1e03      	subs	r3, r0, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b10:	f001 f8c1 	bl	8002c96 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b14:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001b16:	2100      	movs	r1, #0
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f003 f9fb 	bl	8004f14 <HAL_I2CEx_ConfigDigitalFilter>
 8001b1e:	1e03      	subs	r3, r0, #0
 8001b20:	d001      	beq.n	8001b26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b22:	f001 f8b8 	bl	8002c96 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200000f0 	.word	0x200000f0
 8001b30:	40005400 	.word	0x40005400
 8001b34:	00602173 	.word	0x00602173

08001b38 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001b3c:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <MX_I2S1_Init+0x48>)
 8001b3e:	4a11      	ldr	r2, [pc, #68]	@ (8001b84 <MX_I2S1_Init+0x4c>)
 8001b40:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8001b42:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <MX_I2S1_Init+0x48>)
 8001b44:	2280      	movs	r2, #128	@ 0x80
 8001b46:	0092      	lsls	r2, r2, #2
 8001b48:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b80 <MX_I2S1_Init+0x48>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <MX_I2S1_Init+0x48>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001b56:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <MX_I2S1_Init+0x48>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001b5c:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <MX_I2S1_Init+0x48>)
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <MX_I2S1_Init+0x50>)
 8001b60:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8001b62:	4b07      	ldr	r3, [pc, #28]	@ (8001b80 <MX_I2S1_Init+0x48>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <MX_I2S1_Init+0x48>)
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f003 fa1e 	bl	8004fac <HAL_I2S_Init>
 8001b70:	1e03      	subs	r3, r0, #0
 8001b72:	d001      	beq.n	8001b78 <MX_I2S1_Init+0x40>
  {
    Error_Handler();
 8001b74:	f001 f88f 	bl	8002c96 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8001b78:	46c0      	nop			@ (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	46c0      	nop			@ (mov r8, r8)
 8001b80:	20000144 	.word	0x20000144
 8001b84:	40013000 	.word	0x40013000
 8001b88:	0000ac44 	.word	0x0000ac44

08001b8c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08c      	sub	sp, #48	@ 0x30
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_DateTypeDef sDate = {0};
 8001b92:	232c      	movs	r3, #44	@ 0x2c
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	2328      	movs	r3, #40	@ 0x28
 8001ba0:	001a      	movs	r2, r3
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	f007 fd20 	bl	80095e8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca4 <MX_RTC_Init+0x118>)
 8001baa:	4a3f      	ldr	r2, [pc, #252]	@ (8001ca8 <MX_RTC_Init+0x11c>)
 8001bac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001bae:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca4 <MX_RTC_Init+0x118>)
 8001bb0:	2240      	movs	r2, #64	@ 0x40
 8001bb2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8001bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca4 <MX_RTC_Init+0x118>)
 8001bb6:	227f      	movs	r2, #127	@ 0x7f
 8001bb8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8001bba:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca4 <MX_RTC_Init+0x118>)
 8001bbc:	22ff      	movs	r2, #255	@ 0xff
 8001bbe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bc0:	4b38      	ldr	r3, [pc, #224]	@ (8001ca4 <MX_RTC_Init+0x118>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bc6:	4b37      	ldr	r3, [pc, #220]	@ (8001ca4 <MX_RTC_Init+0x118>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bcc:	4b35      	ldr	r3, [pc, #212]	@ (8001ca4 <MX_RTC_Init+0x118>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bd2:	4b34      	ldr	r3, [pc, #208]	@ (8001ca4 <MX_RTC_Init+0x118>)
 8001bd4:	2280      	movs	r2, #128	@ 0x80
 8001bd6:	05d2      	lsls	r2, r2, #23
 8001bd8:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001bda:	4b32      	ldr	r3, [pc, #200]	@ (8001ca4 <MX_RTC_Init+0x118>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001be0:	4b30      	ldr	r3, [pc, #192]	@ (8001ca4 <MX_RTC_Init+0x118>)
 8001be2:	0018      	movs	r0, r3
 8001be4:	f004 fecc 	bl	8006980 <HAL_RTC_Init>
 8001be8:	1e03      	subs	r3, r0, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 8001bec:	f001 f853 	bl	8002c96 <Error_Handler>
//  {
//    Error_Handler();
//  }


  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001bf0:	212c      	movs	r1, #44	@ 0x2c
 8001bf2:	187b      	adds	r3, r7, r1
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001bf8:	187b      	adds	r3, r7, r1
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8001bfe:	187b      	adds	r3, r7, r1
 8001c00:	2201      	movs	r2, #1
 8001c02:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	2200      	movs	r2, #0
 8001c08:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c0a:	1879      	adds	r1, r7, r1
 8001c0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ca4 <MX_RTC_Init+0x118>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	0018      	movs	r0, r3
 8001c12:	f005 f85b 	bl	8006ccc <HAL_RTC_SetDate>
 8001c16:	1e03      	subs	r3, r0, #0
 8001c18:	d001      	beq.n	8001c1e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001c1a:	f001 f83c 	bl	8002c96 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2201      	movs	r2, #1
 8001c28:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	2200      	movs	r2, #0
 8001c34:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	4a18      	ldr	r2, [pc, #96]	@ (8001cac <MX_RTC_Init+0x120>)
 8001c4c:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	2101      	movs	r1, #1
 8001c60:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2280      	movs	r2, #128	@ 0x80
 8001c66:	0052      	lsls	r2, r2, #1
 8001c68:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c6a:	1d39      	adds	r1, r7, #4
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca4 <MX_RTC_Init+0x118>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	0018      	movs	r0, r3
 8001c72:	f005 f90b 	bl	8006e8c <HAL_RTC_SetAlarm_IT>
 8001c76:	1e03      	subs	r3, r0, #0
 8001c78:	d001      	beq.n	8001c7e <MX_RTC_Init+0xf2>
  {
    Error_Handler();
 8001c7a:	f001 f80c 	bl	8002c96 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <MX_RTC_Init+0x118>)
 8001c80:	2100      	movs	r1, #0
 8001c82:	0018      	movs	r0, r3
 8001c84:	f005 fc9a 	bl	80075bc <HAL_RTCEx_SetCalibrationOutPut>
 8001c88:	1e03      	subs	r3, r0, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_RTC_Init+0x104>
  {
    Error_Handler();
 8001c8c:	f001 f803 	bl	8002c96 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8001c90:	4907      	ldr	r1, [pc, #28]	@ (8001cb0 <MX_RTC_Init+0x124>)
 8001c92:	4b04      	ldr	r3, [pc, #16]	@ (8001ca4 <MX_RTC_Init+0x118>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	0018      	movs	r0, r3
 8001c98:	f004 ffbc 	bl	8006c14 <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8001c9c:	46c0      	nop			@ (mov r8, r8)
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b00c      	add	sp, #48	@ 0x30
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200001dc 	.word	0x200001dc
 8001ca8:	40002800 	.word	0x40002800
 8001cac:	80800080 	.word	0x80800080
 8001cb0:	200000bc 	.word	0x200000bc

08001cb4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d28 <MX_SPI2_Init+0x74>)
 8001cba:	4a1c      	ldr	r2, [pc, #112]	@ (8001d2c <MX_SPI2_Init+0x78>)
 8001cbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001d28 <MX_SPI2_Init+0x74>)
 8001cc0:	2282      	movs	r2, #130	@ 0x82
 8001cc2:	0052      	lsls	r2, r2, #1
 8001cc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cc6:	4b18      	ldr	r3, [pc, #96]	@ (8001d28 <MX_SPI2_Init+0x74>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ccc:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <MX_SPI2_Init+0x74>)
 8001cce:	22e0      	movs	r2, #224	@ 0xe0
 8001cd0:	00d2      	lsls	r2, r2, #3
 8001cd2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cd4:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <MX_SPI2_Init+0x74>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cda:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <MX_SPI2_Init+0x74>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <MX_SPI2_Init+0x74>)
 8001ce2:	2280      	movs	r2, #128	@ 0x80
 8001ce4:	0092      	lsls	r2, r2, #2
 8001ce6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <MX_SPI2_Init+0x74>)
 8001cea:	2218      	movs	r2, #24
 8001cec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <MX_SPI2_Init+0x74>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <MX_SPI2_Init+0x74>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <MX_SPI2_Init+0x74>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <MX_SPI2_Init+0x74>)
 8001d02:	2207      	movs	r2, #7
 8001d04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <MX_SPI2_Init+0x74>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <MX_SPI2_Init+0x74>)
 8001d0e:	2208      	movs	r2, #8
 8001d10:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d12:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <MX_SPI2_Init+0x74>)
 8001d14:	0018      	movs	r0, r3
 8001d16:	f005 fcd9 	bl	80076cc <HAL_SPI_Init>
 8001d1a:	1e03      	subs	r3, r0, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001d1e:	f000 ffba 	bl	8002c96 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000208 	.word	0x20000208
 8001d2c:	40003800 	.word	0x40003800

08001d30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	@ 0x28
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d36:	231c      	movs	r3, #28
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	230c      	movs	r3, #12
 8001d3e:	001a      	movs	r2, r3
 8001d40:	2100      	movs	r1, #0
 8001d42:	f007 fc51 	bl	80095e8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d46:	003b      	movs	r3, r7
 8001d48:	0018      	movs	r0, r3
 8001d4a:	231c      	movs	r3, #28
 8001d4c:	001a      	movs	r2, r3
 8001d4e:	2100      	movs	r1, #0
 8001d50:	f007 fc4a 	bl	80095e8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d54:	4b24      	ldr	r3, [pc, #144]	@ (8001de8 <MX_TIM2_Init+0xb8>)
 8001d56:	2280      	movs	r2, #128	@ 0x80
 8001d58:	05d2      	lsls	r2, r2, #23
 8001d5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8001d5c:	4b22      	ldr	r3, [pc, #136]	@ (8001de8 <MX_TIM2_Init+0xb8>)
 8001d5e:	4a23      	ldr	r2, [pc, #140]	@ (8001dec <MX_TIM2_Init+0xbc>)
 8001d60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d62:	4b21      	ldr	r3, [pc, #132]	@ (8001de8 <MX_TIM2_Init+0xb8>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001d68:	4b1f      	ldr	r3, [pc, #124]	@ (8001de8 <MX_TIM2_Init+0xb8>)
 8001d6a:	2263      	movs	r2, #99	@ 0x63
 8001d6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <MX_TIM2_Init+0xb8>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d74:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <MX_TIM2_Init+0xb8>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <MX_TIM2_Init+0xb8>)
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f006 fd11 	bl	80087a4 <HAL_TIM_PWM_Init>
 8001d82:	1e03      	subs	r3, r0, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d86:	f000 ff86 	bl	8002c96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8a:	211c      	movs	r1, #28
 8001d8c:	187b      	adds	r3, r7, r1
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d92:	187b      	adds	r3, r7, r1
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d98:	187a      	adds	r2, r7, r1
 8001d9a:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <MX_TIM2_Init+0xb8>)
 8001d9c:	0011      	movs	r1, r2
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f007 fba2 	bl	80094e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001da4:	1e03      	subs	r3, r0, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001da8:	f000 ff75 	bl	8002c96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dac:	003b      	movs	r3, r7
 8001dae:	2260      	movs	r2, #96	@ 0x60
 8001db0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001db2:	003b      	movs	r3, r7
 8001db4:	2200      	movs	r2, #0
 8001db6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001db8:	003b      	movs	r3, r7
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dbe:	003b      	movs	r3, r7
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dc4:	0039      	movs	r1, r7
 8001dc6:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <MX_TIM2_Init+0xb8>)
 8001dc8:	2208      	movs	r2, #8
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f006 ff28 	bl	8008c20 <HAL_TIM_PWM_ConfigChannel>
 8001dd0:	1e03      	subs	r3, r0, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001dd4:	f000 ff5f 	bl	8002c96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001dd8:	4b03      	ldr	r3, [pc, #12]	@ (8001de8 <MX_TIM2_Init+0xb8>)
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f001 fc24 	bl	8003628 <HAL_TIM_MspPostInit>

}
 8001de0:	46c0      	nop			@ (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b00a      	add	sp, #40	@ 0x28
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000324 	.word	0x20000324
 8001dec:	0000031f 	.word	0x0000031f

08001df0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001df4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <MX_TIM14_Init+0x40>)
 8001df6:	4a0f      	ldr	r2, [pc, #60]	@ (8001e34 <MX_TIM14_Init+0x44>)
 8001df8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001e30 <MX_TIM14_Init+0x40>)
 8001dfc:	22f4      	movs	r2, #244	@ 0xf4
 8001dfe:	0092      	lsls	r2, r2, #2
 8001e00:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	@ (8001e30 <MX_TIM14_Init+0x40>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001e08:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <MX_TIM14_Init+0x40>)
 8001e0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e38 <MX_TIM14_Init+0x48>)
 8001e0c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	@ (8001e30 <MX_TIM14_Init+0x40>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <MX_TIM14_Init+0x40>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e1a:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <MX_TIM14_Init+0x40>)
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f006 fb75 	bl	800850c <HAL_TIM_Base_Init>
 8001e22:	1e03      	subs	r3, r0, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001e26:	f000 ff36 	bl	8002c96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001e2a:	46c0      	nop			@ (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000370 	.word	0x20000370
 8001e34:	40002000 	.word	0x40002000
 8001e38:	0000ffff 	.word	0x0000ffff

08001e3c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	@ (8001e80 <MX_TIM16_Init+0x44>)
 8001e42:	4a10      	ldr	r2, [pc, #64]	@ (8001e84 <MX_TIM16_Init+0x48>)
 8001e44:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 58595;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	@ (8001e80 <MX_TIM16_Init+0x44>)
 8001e48:	4a0f      	ldr	r2, [pc, #60]	@ (8001e88 <MX_TIM16_Init+0x4c>)
 8001e4a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <MX_TIM16_Init+0x44>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <MX_TIM16_Init+0x44>)
 8001e54:	4a0d      	ldr	r2, [pc, #52]	@ (8001e8c <MX_TIM16_Init+0x50>)
 8001e56:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e58:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <MX_TIM16_Init+0x44>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 10;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <MX_TIM16_Init+0x44>)
 8001e60:	220a      	movs	r2, #10
 8001e62:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e64:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <MX_TIM16_Init+0x44>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e6a:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <MX_TIM16_Init+0x44>)
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f006 fb4d 	bl	800850c <HAL_TIM_Base_Init>
 8001e72:	1e03      	subs	r3, r0, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001e76:	f000 ff0e 	bl	8002c96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200003bc 	.word	0x200003bc
 8001e84:	40014400 	.word	0x40014400
 8001e88:	0000e4e3 	.word	0x0000e4e3
 8001e8c:	0000ffff 	.word	0x0000ffff

08001e90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <MX_DMA_Init+0x48>)
 8001e98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <MX_DMA_Init+0x48>)
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed8 <MX_DMA_Init+0x48>)
 8001ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2009      	movs	r0, #9
 8001eb4:	f001 fdce 	bl	8003a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001eb8:	2009      	movs	r0, #9
 8001eba:	f001 fde0 	bl	8003a7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	200a      	movs	r0, #10
 8001ec4:	f001 fdc6 	bl	8003a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001ec8:	200a      	movs	r0, #10
 8001eca:	f001 fdd8 	bl	8003a7e <HAL_NVIC_EnableIRQ>

}
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b002      	add	sp, #8
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	40021000 	.word	0x40021000

08001edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b08b      	sub	sp, #44	@ 0x2c
 8001ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee2:	2414      	movs	r4, #20
 8001ee4:	193b      	adds	r3, r7, r4
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	2314      	movs	r3, #20
 8001eea:	001a      	movs	r2, r3
 8001eec:	2100      	movs	r1, #0
 8001eee:	f007 fb7b 	bl	80095e8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef2:	4b7d      	ldr	r3, [pc, #500]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001ef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ef6:	4b7c      	ldr	r3, [pc, #496]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001ef8:	2104      	movs	r1, #4
 8001efa:	430a      	orrs	r2, r1
 8001efc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001efe:	4b7a      	ldr	r3, [pc, #488]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f02:	2204      	movs	r2, #4
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f0a:	4b77      	ldr	r3, [pc, #476]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f0e:	4b76      	ldr	r3, [pc, #472]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f10:	2120      	movs	r1, #32
 8001f12:	430a      	orrs	r2, r1
 8001f14:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f16:	4b74      	ldr	r3, [pc, #464]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	4b71      	ldr	r3, [pc, #452]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f26:	4b70      	ldr	r3, [pc, #448]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f28:	2101      	movs	r1, #1
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f2e:	4b6e      	ldr	r3, [pc, #440]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f32:	2201      	movs	r2, #1
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3a:	4b6b      	ldr	r3, [pc, #428]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f3e:	4b6a      	ldr	r3, [pc, #424]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f40:	2102      	movs	r1, #2
 8001f42:	430a      	orrs	r2, r1
 8001f44:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f46:	4b68      	ldr	r3, [pc, #416]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f52:	4b65      	ldr	r3, [pc, #404]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f56:	4b64      	ldr	r3, [pc, #400]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f58:	2108      	movs	r1, #8
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f5e:	4b62      	ldr	r3, [pc, #392]	@ (80020e8 <MX_GPIO_Init+0x20c>)
 8001f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f62:	2208      	movs	r2, #8
 8001f64:	4013      	ands	r3, r2
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_MCLR_Pin, GPIO_PIN_SET);
 8001f6a:	238e      	movs	r3, #142	@ 0x8e
 8001f6c:	0119      	lsls	r1, r3, #4
 8001f6e:	23a0      	movs	r3, #160	@ 0xa0
 8001f70:	05db      	lsls	r3, r3, #23
 8001f72:	2201      	movs	r2, #1
 8001f74:	0018      	movs	r0, r3
 8001f76:	f002 f972 	bl	800425e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_ENABLE_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001f7a:	495c      	ldr	r1, [pc, #368]	@ (80020ec <MX_GPIO_Init+0x210>)
 8001f7c:	4b5c      	ldr	r3, [pc, #368]	@ (80020f0 <MX_GPIO_Init+0x214>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	0018      	movs	r0, r3
 8001f82:	f002 f96c 	bl	800425e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin, GPIO_PIN_RESET);
 8001f86:	23c0      	movs	r3, #192	@ 0xc0
 8001f88:	00d9      	lsls	r1, r3, #3
 8001f8a:	23a0      	movs	r3, #160	@ 0xa0
 8001f8c:	05db      	lsls	r3, r3, #23
 8001f8e:	2200      	movs	r2, #0
 8001f90:	0018      	movs	r0, r3
 8001f92:	f002 f964 	bl	800425e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8001f96:	4b57      	ldr	r3, [pc, #348]	@ (80020f4 <MX_GPIO_Init+0x218>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2180      	movs	r1, #128	@ 0x80
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f002 f95e 	bl	800425e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAPTOUCH_RESET_GPIO_Port, CAPTOUCH_RESET_Pin, GPIO_PIN_SET);
 8001fa2:	2380      	movs	r3, #128	@ 0x80
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4852      	ldr	r0, [pc, #328]	@ (80020f0 <MX_GPIO_Init+0x214>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	0019      	movs	r1, r3
 8001fac:	f002 f957 	bl	800425e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fb0:	193b      	adds	r3, r7, r4
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb6:	193b      	adds	r3, r7, r4
 8001fb8:	2203      	movs	r2, #3
 8001fba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	193b      	adds	r3, r7, r4
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc2:	193a      	adds	r2, r7, r4
 8001fc4:	23a0      	movs	r3, #160	@ 0xa0
 8001fc6:	05db      	lsls	r3, r3, #23
 8001fc8:	0011      	movs	r1, r2
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f001 ffc6 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CHIP_SELECT_Pin MEM_nWP_Pin MEM_nHOLD_Pin SHIFT_DATA_IN_Pin
                           SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_DATA_IN_Pin
 8001fd0:	0021      	movs	r1, r4
 8001fd2:	187b      	adds	r3, r7, r1
 8001fd4:	22ee      	movs	r2, #238	@ 0xee
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	601a      	str	r2, [r3, #0]
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fda:	000c      	movs	r4, r1
 8001fdc:	193b      	adds	r3, r7, r4
 8001fde:	2201      	movs	r2, #1
 8001fe0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	193b      	adds	r3, r7, r4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	193b      	adds	r3, r7, r4
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	193a      	adds	r2, r7, r4
 8001ff0:	23a0      	movs	r3, #160	@ 0xa0
 8001ff2:	05db      	lsls	r3, r3, #23
 8001ff4:	0011      	movs	r1, r2
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f001 ffb0 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_ENABLE_Pin DEBUG_LED_Pin CAPTOUCH_RESET_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin;
 8001ffc:	193b      	adds	r3, r7, r4
 8001ffe:	4a3e      	ldr	r2, [pc, #248]	@ (80020f8 <MX_GPIO_Init+0x21c>)
 8002000:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002002:	193b      	adds	r3, r7, r4
 8002004:	2201      	movs	r2, #1
 8002006:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	193b      	adds	r3, r7, r4
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	193b      	adds	r3, r7, r4
 8002010:	2200      	movs	r2, #0
 8002012:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002014:	193b      	adds	r3, r7, r4
 8002016:	4a36      	ldr	r2, [pc, #216]	@ (80020f0 <MX_GPIO_Init+0x214>)
 8002018:	0019      	movs	r1, r3
 800201a:	0010      	movs	r0, r2
 800201c:	f001 ff9e 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8002020:	193b      	adds	r3, r7, r4
 8002022:	2280      	movs	r2, #128	@ 0x80
 8002024:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002026:	193b      	adds	r3, r7, r4
 8002028:	2201      	movs	r2, #1
 800202a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	193b      	adds	r3, r7, r4
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	193b      	adds	r3, r7, r4
 8002034:	2200      	movs	r2, #0
 8002036:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 8002038:	193b      	adds	r3, r7, r4
 800203a:	4a2e      	ldr	r2, [pc, #184]	@ (80020f4 <MX_GPIO_Init+0x218>)
 800203c:	0019      	movs	r1, r3
 800203e:	0010      	movs	r0, r2
 8002040:	f001 ff8c 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_SET_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = ALARM_SET_BUTTON_EXTI_Pin;
 8002044:	193b      	adds	r3, r7, r4
 8002046:	2280      	movs	r2, #128	@ 0x80
 8002048:	0212      	lsls	r2, r2, #8
 800204a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800204c:	193b      	adds	r3, r7, r4
 800204e:	2284      	movs	r2, #132	@ 0x84
 8002050:	0392      	lsls	r2, r2, #14
 8002052:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002054:	193b      	adds	r3, r7, r4
 8002056:	2201      	movs	r2, #1
 8002058:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALARM_SET_BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 800205a:	193a      	adds	r2, r7, r4
 800205c:	23a0      	movs	r3, #160	@ 0xa0
 800205e:	05db      	lsls	r3, r3, #23
 8002060:	0011      	movs	r1, r2
 8002062:	0018      	movs	r0, r3
 8002064:	f001 ff7a 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_EXTI_Pin MINUTE_SET_BUTTON_EXTI_Pin ALARM_EN_BUTTON_EXTI_Pin DISPLAY_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_EXTI_Pin|MINUTE_SET_BUTTON_EXTI_Pin|ALARM_EN_BUTTON_EXTI_Pin|DISPLAY_BUTTON_EXTI_Pin;
 8002068:	0021      	movs	r1, r4
 800206a:	187b      	adds	r3, r7, r1
 800206c:	220f      	movs	r2, #15
 800206e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002070:	187b      	adds	r3, r7, r1
 8002072:	2284      	movs	r2, #132	@ 0x84
 8002074:	0392      	lsls	r2, r2, #14
 8002076:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002078:	187b      	adds	r3, r7, r1
 800207a:	2201      	movs	r2, #1
 800207c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800207e:	000c      	movs	r4, r1
 8002080:	187b      	adds	r3, r7, r1
 8002082:	4a1e      	ldr	r2, [pc, #120]	@ (80020fc <MX_GPIO_Init+0x220>)
 8002084:	0019      	movs	r1, r3
 8002086:	0010      	movs	r0, r2
 8002088:	f001 ff68 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : TIME_SWITCH_EXTI_Pin */
  GPIO_InitStruct.Pin = TIME_SWITCH_EXTI_Pin;
 800208c:	0021      	movs	r1, r4
 800208e:	187b      	adds	r3, r7, r1
 8002090:	2210      	movs	r2, #16
 8002092:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002094:	187b      	adds	r3, r7, r1
 8002096:	22c4      	movs	r2, #196	@ 0xc4
 8002098:	0392      	lsls	r2, r2, #14
 800209a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800209c:	187b      	adds	r3, r7, r1
 800209e:	2201      	movs	r2, #1
 80020a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TIME_SWITCH_EXTI_GPIO_Port, &GPIO_InitStruct);
 80020a2:	187b      	adds	r3, r7, r1
 80020a4:	4a12      	ldr	r2, [pc, #72]	@ (80020f0 <MX_GPIO_Init+0x214>)
 80020a6:	0019      	movs	r1, r3
 80020a8:	0010      	movs	r0, r2
 80020aa:	f001 ff57 	bl	8003f5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	2005      	movs	r0, #5
 80020b4:	f001 fcce 	bl	8003a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80020b8:	2005      	movs	r0, #5
 80020ba:	f001 fce0 	bl	8003a7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2101      	movs	r1, #1
 80020c2:	2006      	movs	r0, #6
 80020c4:	f001 fcc6 	bl	8003a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80020c8:	2006      	movs	r0, #6
 80020ca:	f001 fcd8 	bl	8003a7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2101      	movs	r1, #1
 80020d2:	2007      	movs	r0, #7
 80020d4:	f001 fcbe 	bl	8003a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80020d8:	2007      	movs	r0, #7
 80020da:	f001 fcd0 	bl	8003a7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020de:	46c0      	nop			@ (mov r8, r8)
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b00b      	add	sp, #44	@ 0x2c
 80020e4:	bd90      	pop	{r4, r7, pc}
 80020e6:	46c0      	nop			@ (mov r8, r8)
 80020e8:	40021000 	.word	0x40021000
 80020ec:	00001002 	.word	0x00001002
 80020f0:	50000400 	.word	0x50000400
 80020f4:	50000800 	.word	0x50000800
 80020f8:	00001102 	.word	0x00001102
 80020fc:	50000c00 	.word	0x50000c00

08002100 <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8002106:	2317      	movs	r3, #23
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 800210e:	4a14      	ldr	r2, [pc, #80]	@ (8002160 <updateAndDisplayTime+0x60>)
 8002110:	4914      	ldr	r1, [pc, #80]	@ (8002164 <updateAndDisplayTime+0x64>)
 8002112:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <updateAndDisplayTime+0x68>)
 8002114:	0018      	movs	r0, r3
 8002116:	f7ff fa51 	bl	80015bc <getRTCTime>

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 800211a:	4b14      	ldr	r3, [pc, #80]	@ (800216c <updateAndDisplayTime+0x6c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10e      	bne.n	8002140 <updateAndDisplayTime+0x40>

		RTC_TimeTypeDef currTimeMil = conv2Mil(&currTime);
 8002122:	003b      	movs	r3, r7
 8002124:	4a0f      	ldr	r2, [pc, #60]	@ (8002164 <updateAndDisplayTime+0x64>)
 8002126:	0011      	movs	r1, r2
 8002128:	0018      	movs	r0, r3
 800212a:	f000 fcc9 	bl	8002ac0 <conv2Mil>

		sevSeg_updateDigits(&currTimeMil, userAlarmToggle);
 800212e:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <updateAndDisplayTime+0x70>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	001a      	movs	r2, r3
 8002134:	003b      	movs	r3, r7
 8002136:	0011      	movs	r1, r2
 8002138:	0018      	movs	r0, r3
 800213a:	f000 fed3 	bl	8002ee4 <sevSeg_updateDigits>
 800213e:	e007      	b.n	8002150 <updateAndDisplayTime+0x50>

	}
	else {
		sevSeg_updateDigits(&currTime, userAlarmToggle);
 8002140:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <updateAndDisplayTime+0x70>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	001a      	movs	r2, r3
 8002146:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <updateAndDisplayTime+0x64>)
 8002148:	0011      	movs	r1, r2
 800214a:	0018      	movs	r0, r3
 800214c:	f000 feca 	bl	8002ee4 <sevSeg_updateDigits>
	}

	return halRet;
 8002150:	2317      	movs	r3, #23
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	781b      	ldrb	r3, [r3, #0]

}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b006      	add	sp, #24
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			@ (mov r8, r8)
 8002160:	200000d0 	.word	0x200000d0
 8002164:	200000bc 	.word	0x200000bc
 8002168:	200001dc 	.word	0x200001dc
 800216c:	200000ec 	.word	0x200000ec
 8002170:	200000b9 	.word	0x200000b9

08002174 <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800217a:	2317      	movs	r3, #23
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 8002182:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <updateAndDisplayAlarm+0x54>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10e      	bne.n	80021a8 <updateAndDisplayAlarm+0x34>

		RTC_TimeTypeDef userAlarmTimeMil = conv2Mil(&userAlarmTime);
 800218a:	003b      	movs	r3, r7
 800218c:	4a0f      	ldr	r2, [pc, #60]	@ (80021cc <updateAndDisplayAlarm+0x58>)
 800218e:	0011      	movs	r1, r2
 8002190:	0018      	movs	r0, r3
 8002192:	f000 fc95 	bl	8002ac0 <conv2Mil>

		sevSeg_updateDigits(&userAlarmTimeMil, userAlarmToggle);
 8002196:	4b0e      	ldr	r3, [pc, #56]	@ (80021d0 <updateAndDisplayAlarm+0x5c>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	001a      	movs	r2, r3
 800219c:	003b      	movs	r3, r7
 800219e:	0011      	movs	r1, r2
 80021a0:	0018      	movs	r0, r3
 80021a2:	f000 fe9f 	bl	8002ee4 <sevSeg_updateDigits>
 80021a6:	e007      	b.n	80021b8 <updateAndDisplayAlarm+0x44>

	}
	else {
		sevSeg_updateDigits(&userAlarmTime, userAlarmToggle);
 80021a8:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <updateAndDisplayAlarm+0x5c>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	001a      	movs	r2, r3
 80021ae:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <updateAndDisplayAlarm+0x58>)
 80021b0:	0011      	movs	r1, r2
 80021b2:	0018      	movs	r0, r3
 80021b4:	f000 fe96 	bl	8002ee4 <sevSeg_updateDigits>
	}



	return halRet;
 80021b8:	2317      	movs	r3, #23
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	781b      	ldrb	r3, [r3, #0]

}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b006      	add	sp, #24
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	46c0      	nop			@ (mov r8, r8)
 80021c8:	200000ec 	.word	0x200000ec
 80021cc:	200000d4 	.word	0x200000d4
 80021d0:	200000b9 	.word	0x200000b9

080021d4 <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b08d      	sub	sp, #52	@ 0x34
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 80021dc:	2408      	movs	r4, #8
 80021de:	193b      	adds	r3, r7, r4
 80021e0:	0018      	movs	r0, r3
 80021e2:	2328      	movs	r3, #40	@ 0x28
 80021e4:	001a      	movs	r2, r3
 80021e6:	2100      	movs	r1, #0
 80021e8:	f007 f9fe 	bl	80095e8 <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 80021ec:	2380      	movs	r3, #128	@ 0x80
 80021ee:	005a      	lsls	r2, r3, #1
 80021f0:	1939      	adds	r1, r7, r4
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	2300      	movs	r3, #0
 80021f6:	f004 ff89 	bl	800710c <HAL_RTC_GetAlarm>


	  if(sAlarm.AlarmTime.Minutes>58) {
 80021fa:	193b      	adds	r3, r7, r4
 80021fc:	785b      	ldrb	r3, [r3, #1]
 80021fe:	2b3a      	cmp	r3, #58	@ 0x3a
 8002200:	d903      	bls.n	800220a <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 8002202:	193b      	adds	r3, r7, r4
 8002204:	2200      	movs	r2, #0
 8002206:	705a      	strb	r2, [r3, #1]
 8002208:	e006      	b.n	8002218 <HAL_RTC_AlarmAEventCallback+0x44>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 800220a:	2108      	movs	r1, #8
 800220c:	187b      	adds	r3, r7, r1
 800220e:	785b      	ldrb	r3, [r3, #1]
 8002210:	3301      	adds	r3, #1
 8002212:	b2da      	uxtb	r2, r3
 8002214:	187b      	adds	r3, r7, r1
 8002216:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8002218:	46c0      	nop			@ (mov r8, r8)
 800221a:	2308      	movs	r3, #8
 800221c:	18f9      	adds	r1, r7, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	0018      	movs	r0, r3
 8002224:	f004 fe32 	bl	8006e8c <HAL_RTC_SetAlarm_IT>
 8002228:	1e03      	subs	r3, r0, #0
 800222a:	d1f6      	bne.n	800221a <HAL_RTC_AlarmAEventCallback+0x46>

	  updateAndDisplayTime();
 800222c:	f7ff ff68 	bl	8002100 <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 8002230:	4b0d      	ldr	r3, [pc, #52]	@ (8002268 <HAL_RTC_AlarmAEventCallback+0x94>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <HAL_RTC_AlarmAEventCallback+0x8c>
 8002238:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <HAL_RTC_AlarmAEventCallback+0x98>)
 800223a:	781a      	ldrb	r2, [r3, #0]
 800223c:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <HAL_RTC_AlarmAEventCallback+0x9c>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d10d      	bne.n	8002260 <HAL_RTC_AlarmAEventCallback+0x8c>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 8002244:	4b09      	ldr	r3, [pc, #36]	@ (800226c <HAL_RTC_AlarmAEventCallback+0x98>)
 8002246:	785a      	ldrb	r2, [r3, #1]
 8002248:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <HAL_RTC_AlarmAEventCallback+0x9c>)
 800224a:	785b      	ldrb	r3, [r3, #1]
 800224c:	429a      	cmp	r2, r3
 800224e:	d107      	bne.n	8002260 <HAL_RTC_AlarmAEventCallback+0x8c>
 8002250:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_RTC_AlarmAEventCallback+0x98>)
 8002252:	78da      	ldrb	r2, [r3, #3]
 8002254:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_RTC_AlarmAEventCallback+0x9c>)
 8002256:	78db      	ldrb	r3, [r3, #3]
 8002258:	429a      	cmp	r2, r3
 800225a:	d101      	bne.n	8002260 <HAL_RTC_AlarmAEventCallback+0x8c>
		  userAlarmBeep();
 800225c:	f000 f80a 	bl	8002274 <userAlarmBeep>
	  }


}
 8002260:	46c0      	nop			@ (mov r8, r8)
 8002262:	46bd      	mov	sp, r7
 8002264:	b00d      	add	sp, #52	@ 0x34
 8002266:	bd90      	pop	{r4, r7, pc}
 8002268:	200000b9 	.word	0x200000b9
 800226c:	200000d4 	.word	0x200000d4
 8002270:	200000bc 	.word	0x200000bc

08002274 <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 800227a:	4b52      	ldr	r3, [pc, #328]	@ (80023c4 <userAlarmBeep+0x150>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d02d      	beq.n	80022de <userAlarmBeep+0x6a>

			// Stop the timer and
			HAL_TIM_Base_Stop_IT(timerSnooze);
 8002282:	4b51      	ldr	r3, [pc, #324]	@ (80023c8 <userAlarmBeep+0x154>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	0018      	movs	r0, r3
 8002288:	f006 fa5e 	bl	8008748 <HAL_TIM_Base_Stop_IT>

			// Reset count to 0
			// only bits 0 - 15 should be changed.
			timerSnooze->Instance->CNT &= 0xFFFF0000;
 800228c:	4b4e      	ldr	r3, [pc, #312]	@ (80023c8 <userAlarmBeep+0x154>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002294:	4b4c      	ldr	r3, [pc, #304]	@ (80023c8 <userAlarmBeep+0x154>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	0c12      	lsrs	r2, r2, #16
 800229c:	0412      	lsls	r2, r2, #16
 800229e:	625a      	str	r2, [r3, #36]	@ 0x24

			// Reset interrupt status register
			timerSnooze->Instance->SR &= 0xFFFC;
 80022a0:	4b49      	ldr	r3, [pc, #292]	@ (80023c8 <userAlarmBeep+0x154>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	4b47      	ldr	r3, [pc, #284]	@ (80023c8 <userAlarmBeep+0x154>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4947      	ldr	r1, [pc, #284]	@ (80023cc <userAlarmBeep+0x158>)
 80022b0:	400a      	ands	r2, r1
 80022b2:	611a      	str	r2, [r3, #16]

			// Re-write RCR with 10
			timerSnooze->Instance->RCR &= 0xFF00;
 80022b4:	4b44      	ldr	r3, [pc, #272]	@ (80023c8 <userAlarmBeep+0x154>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022bc:	4b42      	ldr	r3, [pc, #264]	@ (80023c8 <userAlarmBeep+0x154>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	22ff      	movs	r2, #255	@ 0xff
 80022c4:	0212      	lsls	r2, r2, #8
 80022c6:	400a      	ands	r2, r1
 80022c8:	631a      	str	r2, [r3, #48]	@ 0x30
			timerSnooze->Instance->RCR |= timerSnooze_RCR;
 80022ca:	4b3f      	ldr	r3, [pc, #252]	@ (80023c8 <userAlarmBeep+0x154>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022d2:	2164      	movs	r1, #100	@ 0x64
 80022d4:	4b3c      	ldr	r3, [pc, #240]	@ (80023c8 <userAlarmBeep+0x154>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	631a      	str	r2, [r3, #48]	@ 0x30

		}

	HAL_TIM_Base_Stop(timerDelay);
 80022de:	4b3c      	ldr	r3, [pc, #240]	@ (80023d0 <userAlarmBeep+0x15c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	0018      	movs	r0, r3
 80022e4:	f006 f9b6 	bl	8008654 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 80022e8:	4b39      	ldr	r3, [pc, #228]	@ (80023d0 <userAlarmBeep+0x15c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0018      	movs	r0, r3
 80022ee:	f006 f965 	bl	80085bc <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80022f2:	4b37      	ldr	r3, [pc, #220]	@ (80023d0 <userAlarmBeep+0x15c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fa:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80022fc:	1cfb      	adds	r3, r7, #3
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]

	// TODO: Start audio DMA streams
	startAudioStream();
 8002302:	f000 fc13 	bl	8002b2c <startAudioStream>

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 8002306:	f7ff fefb 	bl	8002100 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 800230a:	4b31      	ldr	r3, [pc, #196]	@ (80023d0 <userAlarmBeep+0x15c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	4a2f      	ldr	r2, [pc, #188]	@ (80023d4 <userAlarmBeep+0x160>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d91a      	bls.n	8002352 <userAlarmBeep+0xde>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 800231c:	1cfb      	adds	r3, r7, #3
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4a2d      	ldr	r2, [pc, #180]	@ (80023d8 <userAlarmBeep+0x164>)
 8002322:	5cd3      	ldrb	r3, [r2, r3]
 8002324:	0018      	movs	r0, r3
 8002326:	f000 fe91 	bl	800304c <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 800232a:	4b29      	ldr	r3, [pc, #164]	@ (80023d0 <userAlarmBeep+0x15c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8002334:	1cfb      	adds	r3, r7, #3
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	1e5a      	subs	r2, r3, #1
 800233a:	4193      	sbcs	r3, r2
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2201      	movs	r2, #1
 8002340:	4053      	eors	r3, r2
 8002342:	b2db      	uxtb	r3, r3
 8002344:	001a      	movs	r2, r3
 8002346:	1cfb      	adds	r3, r7, #3
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	781a      	ldrb	r2, [r3, #0]
 800234c:	2101      	movs	r1, #1
 800234e:	400a      	ands	r2, r1
 8002350:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 8002352:	4b22      	ldr	r3, [pc, #136]	@ (80023dc <userAlarmBeep+0x168>)
 8002354:	0018      	movs	r0, r3
 8002356:	f7fe f90d 	bl	8000574 <capTouch_readChannels>

	} while(capTouch.keyStat == 0x00 &&
 800235a:	4b20      	ldr	r3, [pc, #128]	@ (80023dc <userAlarmBeep+0x168>)
 800235c:	7c1b      	ldrb	r3, [r3, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d108      	bne.n	8002374 <userAlarmBeep+0x100>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 8002362:	4b1f      	ldr	r3, [pc, #124]	@ (80023e0 <userAlarmBeep+0x16c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2204      	movs	r2, #4
 8002368:	0011      	movs	r1, r2
 800236a:	0018      	movs	r0, r3
 800236c:	f001 ff5a 	bl	8004224 <HAL_GPIO_ReadPin>
 8002370:	1e03      	subs	r3, r0, #0
	} while(capTouch.keyStat == 0x00 &&
 8002372:	d1c8      	bne.n	8002306 <userAlarmBeep+0x92>

	/*
	 * Stop blinking, turn off buzzer, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 8002374:	4b16      	ldr	r3, [pc, #88]	@ (80023d0 <userAlarmBeep+0x15c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	0018      	movs	r0, r3
 800237a:	f006 f96b 	bl	8008654 <HAL_TIM_Base_Stop>

	// TODO: Stop audio stream
	stopAudioStream();
 800237e:	f000 fc75 	bl	8002c6c <stopAudioStream>

	updateAndDisplayTime();				// Update to current time and display
 8002382:	f7ff febd 	bl	8002100 <updateAndDisplayTime>
	sevSeg_setIntensity(sevSeg_intensityDuty[1]);	// Set to 50% duty cycle
 8002386:	2332      	movs	r3, #50	@ 0x32
 8002388:	0018      	movs	r0, r3
 800238a:	f000 fe5f 	bl	800304c <sevSeg_setIntensity>
	displayToggle = 2;								// Set to 2 for future display button ISRs
 800238e:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <userAlarmBeep+0x170>)
 8002390:	2202      	movs	r2, #2
 8002392:	701a      	strb	r2, [r3, #0]


	// If this is the first snooze,
	if(!secondSnooze) {
 8002394:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <userAlarmBeep+0x150>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2201      	movs	r2, #1
 800239a:	4053      	eors	r3, r2
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d008      	beq.n	80023b4 <userAlarmBeep+0x140>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 80023a2:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <userAlarmBeep+0x154>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	0018      	movs	r0, r3
 80023a8:	f006 f97a 	bl	80086a0 <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 80023ac:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <userAlarmBeep+0x150>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
		 * in the top conditional, the secondSnooze is always true;
		 */
		secondSnooze = false;

	}
}
 80023b2:	e002      	b.n	80023ba <userAlarmBeep+0x146>
		secondSnooze = false;
 80023b4:	4b03      	ldr	r3, [pc, #12]	@ (80023c4 <userAlarmBeep+0x150>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
}
 80023ba:	46c0      	nop			@ (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	b002      	add	sp, #8
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	20000409 	.word	0x20000409
 80023c8:	20000070 	.word	0x20000070
 80023cc:	0000fffc 	.word	0x0000fffc
 80023d0:	2000006c 	.word	0x2000006c
 80023d4:	00007ffe 	.word	0x00007ffe
 80023d8:	0800969c 	.word	0x0800969c
 80023dc:	2000040c 	.word	0x2000040c
 80023e0:	20000000 	.word	0x20000000
 80023e4:	200000b8 	.word	0x200000b8

080023e8 <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80023e8:	b590      	push	{r4, r7, lr}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	0002      	movs	r2, r0
 80023f0:	1dbb      	adds	r3, r7, #6
 80023f2:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 80023f4:	2208      	movs	r2, #8
 80023f6:	1dbb      	adds	r3, r7, #6
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d106      	bne.n	800240c <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 80023fe:	230f      	movs	r3, #15
 8002400:	18fc      	adds	r4, r7, r3
 8002402:	f000 f86f 	bl	80024e4 <displayButtonISR>
 8002406:	0003      	movs	r3, r0
 8002408:	7023      	strb	r3, [r4, #0]

	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 800240a:	e03d      	b.n	8002488 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 800240c:	2204      	movs	r2, #4
 800240e:	1dbb      	adds	r3, r7, #6
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	4293      	cmp	r3, r2
 8002414:	d106      	bne.n	8002424 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 8002416:	230f      	movs	r3, #15
 8002418:	18fc      	adds	r4, r7, r3
 800241a:	f000 f88b 	bl	8002534 <alarmEnableISR>
 800241e:	0003      	movs	r3, r0
 8002420:	7023      	strb	r3, [r4, #0]
}
 8002422:	e031      	b.n	8002488 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8002424:	2380      	movs	r3, #128	@ 0x80
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	1dba      	adds	r2, r7, #6
 800242a:	8812      	ldrh	r2, [r2, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d106      	bne.n	800243e <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 8002430:	230f      	movs	r3, #15
 8002432:	18fc      	adds	r4, r7, r3
 8002434:	f000 f8a8 	bl	8002588 <alarmSetISR>
 8002438:	0003      	movs	r3, r0
 800243a:	7023      	strb	r3, [r4, #0]
}
 800243c:	e024      	b.n	8002488 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == hourSetButtonPin) {
 800243e:	2201      	movs	r2, #1
 8002440:	1dbb      	adds	r3, r7, #6
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	4293      	cmp	r3, r2
 8002446:	d106      	bne.n	8002456 <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 8002448:	230f      	movs	r3, #15
 800244a:	18fc      	adds	r4, r7, r3
 800244c:	f000 f95c 	bl	8002708 <hourSetISR>
 8002450:	0003      	movs	r3, r0
 8002452:	7023      	strb	r3, [r4, #0]
}
 8002454:	e018      	b.n	8002488 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8002456:	2202      	movs	r2, #2
 8002458:	1dbb      	adds	r3, r7, #6
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	4293      	cmp	r3, r2
 800245e:	d106      	bne.n	800246e <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 8002460:	230f      	movs	r3, #15
 8002462:	18fc      	adds	r4, r7, r3
 8002464:	f000 f97c 	bl	8002760 <minuteSetISR>
 8002468:	0003      	movs	r3, r0
 800246a:	7023      	strb	r3, [r4, #0]
}
 800246c:	e00c      	b.n	8002488 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == timeFormatSwitchPin) {
 800246e:	2210      	movs	r2, #16
 8002470:	1dbb      	adds	r3, r7, #6
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	4293      	cmp	r3, r2
 8002476:	d106      	bne.n	8002486 <HAL_GPIO_EXTI_Falling_Callback+0x9e>
		halRet = timeFormatSwitchISR();
 8002478:	230f      	movs	r3, #15
 800247a:	18fc      	adds	r4, r7, r3
 800247c:	f000 f9c2 	bl	8002804 <timeFormatSwitchISR>
 8002480:	0003      	movs	r3, r0
 8002482:	7023      	strb	r3, [r4, #0]
}
 8002484:	e000      	b.n	8002488 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
		__NOP();
 8002486:	46c0      	nop			@ (mov r8, r8)
}
 8002488:	46c0      	nop			@ (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	b005      	add	sp, #20
 800248e:	bd90      	pop	{r4, r7, pc}

08002490 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	0002      	movs	r2, r0
 8002498:	1dbb      	adds	r3, r7, #6
 800249a:	801a      	strh	r2, [r3, #0]

	if(GPIO_Pin == timeFormatSwitchPin) {
 800249c:	2210      	movs	r2, #16
 800249e:	1dbb      	adds	r3, r7, #6
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d101      	bne.n	80024aa <HAL_GPIO_EXTI_Rising_Callback+0x1a>

		timeFormatSwitchISR();
 80024a6:	f000 f9ad 	bl	8002804 <timeFormatSwitchISR>

	}

}
 80024aa:	46c0      	nop			@ (mov r8, r8)
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b002      	add	sp, #8
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

	if((htim == timerSnooze) && (secondSnooze == true)) {
 80024bc:	4b07      	ldr	r3, [pc, #28]	@ (80024dc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d105      	bne.n	80024d2 <HAL_TIM_PeriodElapsedCallback+0x1e>
 80024c6:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_TIM_PeriodElapsedCallback+0x1e>

		userAlarmBeep();
 80024ce:	f7ff fed1 	bl	8002274 <userAlarmBeep>

	}

}
 80024d2:	46c0      	nop			@ (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b002      	add	sp, #8
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			@ (mov r8, r8)
 80024dc:	20000070 	.word	0x20000070
 80024e0:	20000409 	.word	0x20000409

080024e4 <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80024ea:	1dfb      	adds	r3, r7, #7
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 80024f0:	f7ff fe06 	bl	8002100 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 80024f4:	4b0d      	ldr	r3, [pc, #52]	@ (800252c <displayButtonISR+0x48>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	001a      	movs	r2, r3
 80024fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002530 <displayButtonISR+0x4c>)
 80024fc:	5c9b      	ldrb	r3, [r3, r2]
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 fda4 	bl	800304c <sevSeg_setIntensity>

	if(displayToggle >= 1) {			// Increment display toggle or reset back down to 0;
 8002504:	4b09      	ldr	r3, [pc, #36]	@ (800252c <displayButtonISR+0x48>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <displayButtonISR+0x30>
		displayToggle = 0;
 800250c:	4b07      	ldr	r3, [pc, #28]	@ (800252c <displayButtonISR+0x48>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	e005      	b.n	8002520 <displayButtonISR+0x3c>
	} else {
		displayToggle++;
 8002514:	4b05      	ldr	r3, [pc, #20]	@ (800252c <displayButtonISR+0x48>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	3301      	adds	r3, #1
 800251a:	b2da      	uxtb	r2, r3
 800251c:	4b03      	ldr	r3, [pc, #12]	@ (800252c <displayButtonISR+0x48>)
 800251e:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8002520:	1dfb      	adds	r3, r7, #7
 8002522:	781b      	ldrb	r3, [r3, #0]

}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	b002      	add	sp, #8
 800252a:	bd80      	pop	{r7, pc}
 800252c:	200000b8 	.word	0x200000b8
 8002530:	0800969c 	.word	0x0800969c

08002534 <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0



	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 800253a:	1dfb      	adds	r3, r7, #7
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8002540:	4b0f      	ldr	r3, [pc, #60]	@ (8002580 <alarmEnableISR+0x4c>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2201      	movs	r2, #1
 8002546:	4053      	eors	r3, r2
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <alarmEnableISR+0x22>

		userAlarmToggle = true;								// Toggle internal flag to true
 800254e:	4b0c      	ldr	r3, [pc, #48]	@ (8002580 <alarmEnableISR+0x4c>)
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	e008      	b.n	8002568 <alarmEnableISR+0x34>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8002556:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <alarmEnableISR+0x4c>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <alarmEnableISR+0x32>

		userAlarmToggle = false;							// Toggle internal flag to false
 800255e:	4b08      	ldr	r3, [pc, #32]	@ (8002580 <alarmEnableISR+0x4c>)
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
 8002564:	e000      	b.n	8002568 <alarmEnableISR+0x34>
	}
	else {
		__NOP();							//Code should never reach here.
 8002566:	46c0      	nop			@ (mov r8, r8)
	}

	updateAndDisplayTime();				// Update display with correct decimal point
 8002568:	f7ff fdca 	bl	8002100 <updateAndDisplayTime>

	// Reset snooze time
	secondSnooze = false;
 800256c:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <alarmEnableISR+0x50>)
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]

	return halRet;
 8002572:	1dfb      	adds	r3, r7, #7
 8002574:	781b      	ldrb	r3, [r3, #0]

}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b002      	add	sp, #8
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	200000b9 	.word	0x200000b9
 8002584:	20000409 	.word	0x20000409

08002588 <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 800258e:	1c7b      	adds	r3, r7, #1
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 8002594:	1dfb      	adds	r3, r7, #7
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	e01a      	b.n	80025d2 <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 800259c:	4b55      	ldr	r3, [pc, #340]	@ (80026f4 <alarmSetISR+0x16c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f006 f857 	bl	8008654 <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 80025a6:	4b53      	ldr	r3, [pc, #332]	@ (80026f4 <alarmSetISR+0x16c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2200      	movs	r2, #0
 80025ae:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80025b0:	4b50      	ldr	r3, [pc, #320]	@ (80026f4 <alarmSetISR+0x16c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f006 f801 	bl	80085bc <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 80025ba:	4b4e      	ldr	r3, [pc, #312]	@ (80026f4 <alarmSetISR+0x16c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	4a4d      	ldr	r2, [pc, #308]	@ (80026f8 <alarmSetISR+0x170>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d9f8      	bls.n	80025ba <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 80025c8:	1dfb      	adds	r3, r7, #7
 80025ca:	781a      	ldrb	r2, [r3, #0]
 80025cc:	1dfb      	adds	r3, r7, #7
 80025ce:	3201      	adds	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
 80025d2:	1dfb      	adds	r3, r7, #7
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d9e0      	bls.n	800259c <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 80025da:	4b48      	ldr	r3, [pc, #288]	@ (80026fc <alarmSetISR+0x174>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2280      	movs	r2, #128	@ 0x80
 80025e0:	0212      	lsls	r2, r2, #8
 80025e2:	0011      	movs	r1, r2
 80025e4:	0018      	movs	r0, r3
 80025e6:	f001 fe1d 	bl	8004224 <HAL_GPIO_ReadPin>
 80025ea:	1e03      	subs	r3, r0, #0
 80025ec:	d11f      	bne.n	800262e <alarmSetISR+0xa6>
		alarmSetMode = true;
 80025ee:	4b44      	ldr	r3, [pc, #272]	@ (8002700 <alarmSetISR+0x178>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 80025f4:	4b3f      	ldr	r3, [pc, #252]	@ (80026f4 <alarmSetISR+0x16c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f006 f82b 	bl	8008654 <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 80025fe:	4b3d      	ldr	r3, [pc, #244]	@ (80026f4 <alarmSetISR+0x16c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2200      	movs	r2, #0
 8002606:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8002608:	4b3a      	ldr	r3, [pc, #232]	@ (80026f4 <alarmSetISR+0x16c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0018      	movs	r0, r3
 800260e:	f005 ffd5 	bl	80085bc <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8002612:	4b38      	ldr	r3, [pc, #224]	@ (80026f4 <alarmSetISR+0x16c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 800261e:	1cfb      	adds	r3, r7, #3
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 8002624:	4b36      	ldr	r3, [pc, #216]	@ (8002700 <alarmSetISR+0x178>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d059      	beq.n	80026e0 <alarmSetISR+0x158>
 800262c:	e002      	b.n	8002634 <alarmSetISR+0xac>
		return halRet;
 800262e:	1c7b      	adds	r3, r7, #1
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	e05a      	b.n	80026ea <alarmSetISR+0x162>

		bool displayBlink = false;
 8002634:	1cbb      	adds	r3, r7, #2
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 800263a:	4b30      	ldr	r3, [pc, #192]	@ (80026fc <alarmSetISR+0x174>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2280      	movs	r2, #128	@ 0x80
 8002640:	0212      	lsls	r2, r2, #8
 8002642:	0011      	movs	r1, r2
 8002644:	0018      	movs	r0, r3
 8002646:	f001 fded 	bl	8004224 <HAL_GPIO_ReadPin>
 800264a:	0003      	movs	r3, r0
 800264c:	2b01      	cmp	r3, #1
 800264e:	d102      	bne.n	8002656 <alarmSetISR+0xce>
				alarmSetButtonReset = true;
 8002650:	1cfb      	adds	r3, r7, #3
 8002652:	2201      	movs	r2, #1
 8002654:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 8002656:	f7ff fd8d 	bl	8002174 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 800265a:	4b26      	ldr	r3, [pc, #152]	@ (80026f4 <alarmSetISR+0x16c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	1ad2      	subs	r2, r2, r3
 8002668:	2380      	movs	r3, #128	@ 0x80
 800266a:	021b      	lsls	r3, r3, #8
 800266c:	429a      	cmp	r2, r3
 800266e:	d31b      	bcc.n	80026a8 <alarmSetISR+0x120>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8002670:	1cbb      	adds	r3, r7, #2
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4a23      	ldr	r2, [pc, #140]	@ (8002704 <alarmSetISR+0x17c>)
 8002676:	5cd3      	ldrb	r3, [r2, r3]
 8002678:	0018      	movs	r0, r3
 800267a:	f000 fce7 	bl	800304c <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 800267e:	4b1d      	ldr	r3, [pc, #116]	@ (80026f4 <alarmSetISR+0x16c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 800268a:	1cbb      	adds	r3, r7, #2
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	1e5a      	subs	r2, r3, #1
 8002690:	4193      	sbcs	r3, r2
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2201      	movs	r2, #1
 8002696:	4053      	eors	r3, r2
 8002698:	b2db      	uxtb	r3, r3
 800269a:	001a      	movs	r2, r3
 800269c:	1cbb      	adds	r3, r7, #2
 800269e:	701a      	strb	r2, [r3, #0]
 80026a0:	781a      	ldrb	r2, [r3, #0]
 80026a2:	2101      	movs	r1, #1
 80026a4:	400a      	ands	r2, r1
 80026a6:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 80026a8:	4b14      	ldr	r3, [pc, #80]	@ (80026fc <alarmSetISR+0x174>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2280      	movs	r2, #128	@ 0x80
 80026ae:	0212      	lsls	r2, r2, #8
 80026b0:	0011      	movs	r1, r2
 80026b2:	0018      	movs	r0, r3
 80026b4:	f001 fdb6 	bl	8004224 <HAL_GPIO_ReadPin>
 80026b8:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 80026ba:	d1be      	bne.n	800263a <alarmSetISR+0xb2>
 80026bc:	1cfb      	adds	r3, r7, #3
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2201      	movs	r2, #1
 80026c2:	4053      	eors	r3, r2
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1b7      	bne.n	800263a <alarmSetISR+0xb2>

		sevSeg_setIntensity(sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 80026ca:	2332      	movs	r3, #50	@ 0x32
 80026cc:	0018      	movs	r0, r3
 80026ce:	f000 fcbd 	bl	800304c <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 80026d2:	4b08      	ldr	r3, [pc, #32]	@ (80026f4 <alarmSetISR+0x16c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f005 ffbc 	bl	8008654 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 80026dc:	f7ff fd10 	bl	8002100 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 80026e0:	4b07      	ldr	r3, [pc, #28]	@ (8002700 <alarmSetISR+0x178>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 80026e6:	1c7b      	adds	r3, r7, #1
 80026e8:	781b      	ldrb	r3, [r3, #0]

}
 80026ea:	0018      	movs	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b002      	add	sp, #8
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	46c0      	nop			@ (mov r8, r8)
 80026f4:	2000006c 	.word	0x2000006c
 80026f8:	0000fffe 	.word	0x0000fffe
 80026fc:	20000004 	.word	0x20000004
 8002700:	20000408 	.word	0x20000408
 8002704:	0800969c 	.word	0x0800969c

08002708 <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 800270e:	1dfb      	adds	r3, r7, #7
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8002714:	4b0e      	ldr	r3, [pc, #56]	@ (8002750 <hourSetISR+0x48>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <hourSetISR+0x1a>

		alarmHourInc();
 800271c:	f000 f89a 	bl	8002854 <alarmHourInc>
 8002720:	e00f      	b.n	8002742 <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 8002722:	f000 f8c7 	bl	80028b4 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8002726:	490b      	ldr	r1, [pc, #44]	@ (8002754 <hourSetISR+0x4c>)
 8002728:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <hourSetISR+0x50>)
 800272a:	2200      	movs	r2, #0
 800272c:	0018      	movs	r0, r3
 800272e:	f004 f9c9 	bl	8006ac4 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8002732:	f7ff fce5 	bl	8002100 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8002736:	4a09      	ldr	r2, [pc, #36]	@ (800275c <hourSetISR+0x54>)
 8002738:	4906      	ldr	r1, [pc, #24]	@ (8002754 <hourSetISR+0x4c>)
 800273a:	4b07      	ldr	r3, [pc, #28]	@ (8002758 <hourSetISR+0x50>)
 800273c:	0018      	movs	r0, r3
 800273e:	f7fe ff3d 	bl	80015bc <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8002742:	1dfb      	adds	r3, r7, #7
 8002744:	781b      	ldrb	r3, [r3, #0]

}
 8002746:	0018      	movs	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	b002      	add	sp, #8
 800274c:	bd80      	pop	{r7, pc}
 800274e:	46c0      	nop			@ (mov r8, r8)
 8002750:	20000408 	.word	0x20000408
 8002754:	200000bc 	.word	0x200000bc
 8002758:	200001dc 	.word	0x200001dc
 800275c:	200000d0 	.word	0x200000d0

08002760 <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b08c      	sub	sp, #48	@ 0x30
 8002764:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 8002766:	232f      	movs	r3, #47	@ 0x2f
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 800276e:	4b21      	ldr	r3, [pc, #132]	@ (80027f4 <minuteSetISR+0x94>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <minuteSetISR+0x1c>

		alarmMinuteInc();
 8002776:	f000 f8dd 	bl	8002934 <alarmMinuteInc>
 800277a:	e034      	b.n	80027e6 <minuteSetISR+0x86>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 800277c:	f000 f8f8 	bl	8002970 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8002780:	491d      	ldr	r1, [pc, #116]	@ (80027f8 <minuteSetISR+0x98>)
 8002782:	4b1e      	ldr	r3, [pc, #120]	@ (80027fc <minuteSetISR+0x9c>)
 8002784:	2200      	movs	r2, #0
 8002786:	0018      	movs	r0, r3
 8002788:	f004 f99c 	bl	8006ac4 <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	0018      	movs	r0, r3
 8002790:	2328      	movs	r3, #40	@ 0x28
 8002792:	001a      	movs	r2, r3
 8002794:	2100      	movs	r1, #0
 8002796:	f006 ff27 	bl	80095e8 <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 800279a:	2380      	movs	r3, #128	@ 0x80
 800279c:	005a      	lsls	r2, r3, #1
 800279e:	1d39      	adds	r1, r7, #4
 80027a0:	4816      	ldr	r0, [pc, #88]	@ (80027fc <minuteSetISR+0x9c>)
 80027a2:	2300      	movs	r3, #0
 80027a4:	f004 fcb2 	bl	800710c <HAL_RTC_GetAlarm>

		if(sAlarm.AlarmTime.Minutes>58) {
 80027a8:	1d3b      	adds	r3, r7, #4
 80027aa:	785b      	ldrb	r3, [r3, #1]
 80027ac:	2b3a      	cmp	r3, #58	@ 0x3a
 80027ae:	d903      	bls.n	80027b8 <minuteSetISR+0x58>
			sAlarm.AlarmTime.Minutes=0;
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	2200      	movs	r2, #0
 80027b4:	705a      	strb	r2, [r3, #1]
 80027b6:	e005      	b.n	80027c4 <minuteSetISR+0x64>
			//printf("Reset alarm time\n\r");
		} else {
			sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	785b      	ldrb	r3, [r3, #1]
 80027bc:	3301      	adds	r3, #1
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	1d3b      	adds	r3, r7, #4
 80027c2:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 80027c4:	46c0      	nop			@ (mov r8, r8)
 80027c6:	1d39      	adds	r1, r7, #4
 80027c8:	4b0c      	ldr	r3, [pc, #48]	@ (80027fc <minuteSetISR+0x9c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	0018      	movs	r0, r3
 80027ce:	f004 fb5d 	bl	8006e8c <HAL_RTC_SetAlarm_IT>
 80027d2:	1e03      	subs	r3, r0, #0
 80027d4:	d1f7      	bne.n	80027c6 <minuteSetISR+0x66>

		updateAndDisplayTime();
 80027d6:	f7ff fc93 	bl	8002100 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80027da:	4a09      	ldr	r2, [pc, #36]	@ (8002800 <minuteSetISR+0xa0>)
 80027dc:	4906      	ldr	r1, [pc, #24]	@ (80027f8 <minuteSetISR+0x98>)
 80027de:	4b07      	ldr	r3, [pc, #28]	@ (80027fc <minuteSetISR+0x9c>)
 80027e0:	0018      	movs	r0, r3
 80027e2:	f7fe feeb 	bl	80015bc <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 80027e6:	232f      	movs	r3, #47	@ 0x2f
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	781b      	ldrb	r3, [r3, #0]
}
 80027ec:	0018      	movs	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b00c      	add	sp, #48	@ 0x30
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000408 	.word	0x20000408
 80027f8:	200000bc 	.word	0x200000bc
 80027fc:	200001dc 	.word	0x200001dc
 8002800:	200000d0 	.word	0x200000d0

08002804 <timeFormatSwitchISR>:

/*
 * Switch hour format (12 or 24 hr)
 */
HAL_StatusTypeDef timeFormatSwitchISR(void) {
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800280a:	1dfb      	adds	r3, r7, #7
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]

	// Determine which time format we will be using
	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 8002810:	4b0d      	ldr	r3, [pc, #52]	@ (8002848 <timeFormatSwitchISR+0x44>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2210      	movs	r2, #16
 8002816:	0011      	movs	r1, r2
 8002818:	0018      	movs	r0, r3
 800281a:	f001 fd03 	bl	8004224 <HAL_GPIO_ReadPin>
 800281e:	0003      	movs	r3, r0
 8002820:	001a      	movs	r2, r3
 8002822:	4b0a      	ldr	r3, [pc, #40]	@ (800284c <timeFormatSwitchISR+0x48>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d103      	bne.n	8002832 <timeFormatSwitchISR+0x2e>
	  userTimeFormat = RTC_HOURFORMAT_12;
 800282a:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <timeFormatSwitchISR+0x4c>)
 800282c:	2240      	movs	r2, #64	@ 0x40
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e002      	b.n	8002838 <timeFormatSwitchISR+0x34>
	}
	else {
	  userTimeFormat = RTC_HOURFORMAT_24;
 8002832:	4b07      	ldr	r3, [pc, #28]	@ (8002850 <timeFormatSwitchISR+0x4c>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
	}

	updateAndDisplayTime();
 8002838:	f7ff fc62 	bl	8002100 <updateAndDisplayTime>

	return halRet;
 800283c:	1dfb      	adds	r3, r7, #7
 800283e:	781b      	ldrb	r3, [r3, #0]

}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b002      	add	sp, #8
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000008 	.word	0x20000008
 800284c:	20000040 	.word	0x20000040
 8002850:	200000ec 	.word	0x200000ec

08002854 <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8002858:	4b15      	ldr	r3, [pc, #84]	@ (80028b0 <alarmHourInc+0x5c>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b0b      	cmp	r3, #11
 800285e:	d903      	bls.n	8002868 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8002860:	4b13      	ldr	r3, [pc, #76]	@ (80028b0 <alarmHourInc+0x5c>)
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
 8002866:	e01e      	b.n	80028a6 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8002868:	4b11      	ldr	r3, [pc, #68]	@ (80028b0 <alarmHourInc+0x5c>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b0b      	cmp	r3, #11
 800286e:	d10e      	bne.n	800288e <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8002870:	4b0f      	ldr	r3, [pc, #60]	@ (80028b0 <alarmHourInc+0x5c>)
 8002872:	78db      	ldrb	r3, [r3, #3]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d103      	bne.n	8002880 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8002878:	4b0d      	ldr	r3, [pc, #52]	@ (80028b0 <alarmHourInc+0x5c>)
 800287a:	2201      	movs	r2, #1
 800287c:	70da      	strb	r2, [r3, #3]
 800287e:	e002      	b.n	8002886 <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002880:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <alarmHourInc+0x5c>)
 8002882:	2200      	movs	r2, #0
 8002884:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 8002886:	4b0a      	ldr	r3, [pc, #40]	@ (80028b0 <alarmHourInc+0x5c>)
 8002888:	220c      	movs	r2, #12
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	e00b      	b.n	80028a6 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 800288e:	4b08      	ldr	r3, [pc, #32]	@ (80028b0 <alarmHourInc+0x5c>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b0a      	cmp	r3, #10
 8002894:	d806      	bhi.n	80028a4 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8002896:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <alarmHourInc+0x5c>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	3301      	adds	r3, #1
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4b04      	ldr	r3, [pc, #16]	@ (80028b0 <alarmHourInc+0x5c>)
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e000      	b.n	80028a6 <alarmHourInc+0x52>
	}
	else {
		__NOP();
 80028a4:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 80028a6:	f000 f8e1 	bl	8002a6c <updateRTCBackupReg>

}
 80028aa:	46c0      	nop			@ (mov r8, r8)
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	200000d4 	.word	0x200000d4

080028b4 <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 80028b8:	4a1a      	ldr	r2, [pc, #104]	@ (8002924 <currHourInc+0x70>)
 80028ba:	491b      	ldr	r1, [pc, #108]	@ (8002928 <currHourInc+0x74>)
 80028bc:	4b1b      	ldr	r3, [pc, #108]	@ (800292c <currHourInc+0x78>)
 80028be:	0018      	movs	r0, r3
 80028c0:	f7fe fe7c 	bl	80015bc <getRTCTime>

	if(currTime.Hours >= 12) {
 80028c4:	4b18      	ldr	r3, [pc, #96]	@ (8002928 <currHourInc+0x74>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b0b      	cmp	r3, #11
 80028ca:	d903      	bls.n	80028d4 <currHourInc+0x20>
		currTime.Hours = 1;
 80028cc:	4b16      	ldr	r3, [pc, #88]	@ (8002928 <currHourInc+0x74>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	e01e      	b.n	8002912 <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 80028d4:	4b14      	ldr	r3, [pc, #80]	@ (8002928 <currHourInc+0x74>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b0b      	cmp	r3, #11
 80028da:	d10e      	bne.n	80028fa <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 80028dc:	4b12      	ldr	r3, [pc, #72]	@ (8002928 <currHourInc+0x74>)
 80028de:	78db      	ldrb	r3, [r3, #3]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d103      	bne.n	80028ec <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80028e4:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <currHourInc+0x74>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	70da      	strb	r2, [r3, #3]
 80028ea:	e002      	b.n	80028f2 <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80028ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002928 <currHourInc+0x74>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 80028f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002928 <currHourInc+0x74>)
 80028f4:	220c      	movs	r2, #12
 80028f6:	701a      	strb	r2, [r3, #0]
 80028f8:	e00b      	b.n	8002912 <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 80028fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002930 <currHourInc+0x7c>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b0a      	cmp	r3, #10
 8002900:	d806      	bhi.n	8002910 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8002902:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <currHourInc+0x74>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	3301      	adds	r3, #1
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4b07      	ldr	r3, [pc, #28]	@ (8002928 <currHourInc+0x74>)
 800290c:	701a      	strb	r2, [r3, #0]
 800290e:	e000      	b.n	8002912 <currHourInc+0x5e>
	}
	else {
		__NOP();
 8002910:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8002912:	4b05      	ldr	r3, [pc, #20]	@ (8002928 <currHourInc+0x74>)
 8002914:	2200      	movs	r2, #0
 8002916:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8002918:	4b03      	ldr	r3, [pc, #12]	@ (8002928 <currHourInc+0x74>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]

}
 800291e:	46c0      	nop			@ (mov r8, r8)
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200000d0 	.word	0x200000d0
 8002928:	200000bc 	.word	0x200000bc
 800292c:	200001dc 	.word	0x200001dc
 8002930:	200000d4 	.word	0x200000d4

08002934 <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8002938:	4b0c      	ldr	r3, [pc, #48]	@ (800296c <alarmMinuteInc+0x38>)
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	2b3a      	cmp	r3, #58	@ 0x3a
 800293e:	d903      	bls.n	8002948 <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 8002940:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <alarmMinuteInc+0x38>)
 8002942:	2200      	movs	r2, #0
 8002944:	705a      	strb	r2, [r3, #1]
 8002946:	e00b      	b.n	8002960 <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 8002948:	4b08      	ldr	r3, [pc, #32]	@ (800296c <alarmMinuteInc+0x38>)
 800294a:	785b      	ldrb	r3, [r3, #1]
 800294c:	2b3a      	cmp	r3, #58	@ 0x3a
 800294e:	d806      	bhi.n	800295e <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8002950:	4b06      	ldr	r3, [pc, #24]	@ (800296c <alarmMinuteInc+0x38>)
 8002952:	785b      	ldrb	r3, [r3, #1]
 8002954:	3301      	adds	r3, #1
 8002956:	b2da      	uxtb	r2, r3
 8002958:	4b04      	ldr	r3, [pc, #16]	@ (800296c <alarmMinuteInc+0x38>)
 800295a:	705a      	strb	r2, [r3, #1]
 800295c:	e000      	b.n	8002960 <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 800295e:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8002960:	f000 f884 	bl	8002a6c <updateRTCBackupReg>

}
 8002964:	46c0      	nop			@ (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	200000d4 	.word	0x200000d4

08002970 <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8002974:	4a11      	ldr	r2, [pc, #68]	@ (80029bc <currMinuteInc+0x4c>)
 8002976:	4912      	ldr	r1, [pc, #72]	@ (80029c0 <currMinuteInc+0x50>)
 8002978:	4b12      	ldr	r3, [pc, #72]	@ (80029c4 <currMinuteInc+0x54>)
 800297a:	0018      	movs	r0, r3
 800297c:	f7fe fe1e 	bl	80015bc <getRTCTime>

	if(currTime.Minutes >= 59) {
 8002980:	4b0f      	ldr	r3, [pc, #60]	@ (80029c0 <currMinuteInc+0x50>)
 8002982:	785b      	ldrb	r3, [r3, #1]
 8002984:	2b3a      	cmp	r3, #58	@ 0x3a
 8002986:	d903      	bls.n	8002990 <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 8002988:	4b0d      	ldr	r3, [pc, #52]	@ (80029c0 <currMinuteInc+0x50>)
 800298a:	2200      	movs	r2, #0
 800298c:	705a      	strb	r2, [r3, #1]
 800298e:	e00b      	b.n	80029a8 <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 8002990:	4b0b      	ldr	r3, [pc, #44]	@ (80029c0 <currMinuteInc+0x50>)
 8002992:	785b      	ldrb	r3, [r3, #1]
 8002994:	2b3a      	cmp	r3, #58	@ 0x3a
 8002996:	d806      	bhi.n	80029a6 <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 8002998:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <currMinuteInc+0x50>)
 800299a:	785b      	ldrb	r3, [r3, #1]
 800299c:	3301      	adds	r3, #1
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <currMinuteInc+0x50>)
 80029a2:	705a      	strb	r2, [r3, #1]
 80029a4:	e000      	b.n	80029a8 <currMinuteInc+0x38>
	}
	else {
		__NOP();
 80029a6:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <currMinuteInc+0x50>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 80029ae:	4b04      	ldr	r3, [pc, #16]	@ (80029c0 <currMinuteInc+0x50>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]

}
 80029b4:	46c0      	nop			@ (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	200000d0 	.word	0x200000d0
 80029c0:	200000bc 	.word	0x200000bc
 80029c4:	200001dc 	.word	0x200001dc

080029c8 <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 80029cc:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <dispFault+0x1c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2280      	movs	r2, #128	@ 0x80
 80029d2:	0151      	lsls	r1, r2, #5
 80029d4:	2201      	movs	r2, #1
 80029d6:	0018      	movs	r0, r3
 80029d8:	f001 fc41 	bl	800425e <HAL_GPIO_WritePin>
}
 80029dc:	46c0      	nop			@ (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	20000028 	.word	0x20000028

080029e8 <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 80029ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002a60 <dispFailure+0x78>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	0018      	movs	r0, r3
 80029f4:	f005 fe2e 	bl	8008654 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 80029f8:	4b19      	ldr	r3, [pc, #100]	@ (8002a60 <dispFailure+0x78>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	0018      	movs	r0, r3
 80029fe:	f005 fddd 	bl	80085bc <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8002a02:	4b17      	ldr	r3, [pc, #92]	@ (8002a60 <dispFailure+0x78>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8002a0c:	1cfb      	adds	r3, r7, #3
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8002a12:	4b13      	ldr	r3, [pc, #76]	@ (8002a60 <dispFailure+0x78>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	4a11      	ldr	r2, [pc, #68]	@ (8002a64 <dispFailure+0x7c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d9f6      	bls.n	8002a12 <dispFailure+0x2a>

			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8002a24:	4b10      	ldr	r3, [pc, #64]	@ (8002a68 <dispFailure+0x80>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2280      	movs	r2, #128	@ 0x80
 8002a2a:	0152      	lsls	r2, r2, #5
 8002a2c:	0011      	movs	r1, r2
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f001 fc32 	bl	8004298 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8002a34:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <dispFailure+0x78>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8002a3e:	1cfb      	adds	r3, r7, #3
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	1e5a      	subs	r2, r3, #1
 8002a44:	4193      	sbcs	r3, r2
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2201      	movs	r2, #1
 8002a4a:	4053      	eors	r3, r2
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	001a      	movs	r2, r3
 8002a50:	1cfb      	adds	r3, r7, #3
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	2101      	movs	r1, #1
 8002a58:	400a      	ands	r2, r1
 8002a5a:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8002a5c:	e7d9      	b.n	8002a12 <dispFailure+0x2a>
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	2000006c 	.word	0x2000006c
 8002a64:	00003ffe 	.word	0x00003ffe
 8002a68:	20000028 	.word	0x20000028

08002a6c <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8002a70:	4b0e      	ldr	r3, [pc, #56]	@ (8002aac <updateRTCBackupReg+0x40>)
 8002a72:	6819      	ldr	r1, [r3, #0]
 8002a74:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab0 <updateRTCBackupReg+0x44>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	001a      	movs	r2, r3
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <updateRTCBackupReg+0x48>)
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f004 fded 	bl	800765c <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8002a82:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab8 <updateRTCBackupReg+0x4c>)
 8002a84:	6819      	ldr	r1, [r3, #0]
 8002a86:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab0 <updateRTCBackupReg+0x44>)
 8002a88:	785b      	ldrb	r3, [r3, #1]
 8002a8a:	001a      	movs	r2, r3
 8002a8c:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <updateRTCBackupReg+0x48>)
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f004 fde4 	bl	800765c <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8002a94:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <updateRTCBackupReg+0x50>)
 8002a96:	6819      	ldr	r1, [r3, #0]
 8002a98:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <updateRTCBackupReg+0x44>)
 8002a9a:	78db      	ldrb	r3, [r3, #3]
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <updateRTCBackupReg+0x48>)
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f004 fddb 	bl	800765c <HAL_RTCEx_BKUPWrite>

}
 8002aa6:	46c0      	nop			@ (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	200000e8 	.word	0x200000e8
 8002ab0:	200000d4 	.word	0x200000d4
 8002ab4:	200001dc 	.word	0x200001dc
 8002ab8:	20000034 	.word	0x20000034
 8002abc:	20000038 	.word	0x20000038

08002ac0 <conv2Mil>:

/*
 * Converts the time in an AM/PM RTC time to 24-hour time
 * Returns this time in an RTC Time Def object
 */
RTC_TimeTypeDef conv2Mil(RTC_TimeTypeDef *oldTime) {
 8002ac0:	b5b0      	push	{r4, r5, r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]

	RTC_TimeTypeDef convertedTime = *oldTime;
 8002aca:	250c      	movs	r5, #12
 8002acc:	197b      	adds	r3, r7, r5
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ad2:	c313      	stmia	r3!, {r0, r1, r4}
 8002ad4:	ca03      	ldmia	r2!, {r0, r1}
 8002ad6:	c303      	stmia	r3!, {r0, r1}

	// If we are in PM, increment hours by 12 (but not if it is 12 p.m.)
	if(oldTime->TimeFormat == RTC_HOURFORMAT12_PM && oldTime->Hours != 12) {
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	78db      	ldrb	r3, [r3, #3]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d10a      	bne.n	8002af6 <conv2Mil+0x36>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b0c      	cmp	r3, #12
 8002ae6:	d006      	beq.n	8002af6 <conv2Mil+0x36>
		convertedTime.Hours += 12;
 8002ae8:	197b      	adds	r3, r7, r5
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	330c      	adds	r3, #12
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	197b      	adds	r3, r7, r5
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	e00b      	b.n	8002b0e <conv2Mil+0x4e>
	}
	// If we are in AM and the hours are 12, set hours to 0.
	else if(oldTime->TimeFormat == RTC_HOURFORMAT12_AM && oldTime->Hours == 12) {
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	78db      	ldrb	r3, [r3, #3]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d107      	bne.n	8002b0e <conv2Mil+0x4e>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b0c      	cmp	r3, #12
 8002b04:	d103      	bne.n	8002b0e <conv2Mil+0x4e>
		convertedTime.Hours = 0;
 8002b06:	230c      	movs	r3, #12
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
	else { // No change

	}

	// Make the update and display time function think that it is AM always
	convertedTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002b0e:	210c      	movs	r1, #12
 8002b10:	187b      	adds	r3, r7, r1
 8002b12:	2200      	movs	r2, #0
 8002b14:	70da      	strb	r2, [r3, #3]

	return convertedTime;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	187a      	adds	r2, r7, r1
 8002b1a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002b1c:	c313      	stmia	r3!, {r0, r1, r4}
 8002b1e:	ca03      	ldmia	r2!, {r0, r1}
 8002b20:	c303      	stmia	r3!, {r0, r1}

}
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b008      	add	sp, #32
 8002b28:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b2c <startAudioStream>:

/*
 * Begins DMA streams to pull data from memory, process data, and push to i2s amplifier.
 */
void startAudioStream(void) {
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8002b32:	1dfb      	adds	r3, r7, #7
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]

	// Enable Amplifier
	NAU8315YG_AmpEnable(&i2sAmp);
 8002b38:	4b45      	ldr	r3, [pc, #276]	@ (8002c50 <startAudioStream+0x124>)
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f7fd ff36 	bl	80009ac <NAU8315YG_AmpEnable>

	// Start DMA transmission
	halRet = HAL_I2S_Transmit_DMA(&hi2s1, i2sTxBuff, BUFFER_SIZE);
 8002b40:	1dfc      	adds	r4, r7, #7
 8002b42:	2380      	movs	r3, #128	@ 0x80
 8002b44:	005a      	lsls	r2, r3, #1
 8002b46:	4943      	ldr	r1, [pc, #268]	@ (8002c54 <startAudioStream+0x128>)
 8002b48:	4b43      	ldr	r3, [pc, #268]	@ (8002c58 <startAudioStream+0x12c>)
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f002 fc1c 	bl	8005388 <HAL_I2S_Transmit_DMA>
 8002b50:	0003      	movs	r3, r0
 8002b52:	7023      	strb	r3, [r4, #0]

	// Prime RX buffers with data
	halRet = W25Q_readData(&spiFlash, 0x00, BUFFER_SIZE, spiRxPtr);
 8002b54:	4b41      	ldr	r3, [pc, #260]	@ (8002c5c <startAudioStream+0x130>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	1dfc      	adds	r4, r7, #7
 8002b5a:	2280      	movs	r2, #128	@ 0x80
 8002b5c:	0052      	lsls	r2, r2, #1
 8002b5e:	4840      	ldr	r0, [pc, #256]	@ (8002c60 <startAudioStream+0x134>)
 8002b60:	2100      	movs	r1, #0
 8002b62:	f7fe fba1 	bl	80012a8 <W25Q_readData>
 8002b66:	0003      	movs	r3, r0
 8002b68:	7023      	strb	r3, [r4, #0]
	spiRxPtr = &spiRxBuff2[0];
 8002b6a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c5c <startAudioStream+0x130>)
 8002b6c:	4a3d      	ldr	r2, [pc, #244]	@ (8002c64 <startAudioStream+0x138>)
 8002b6e:	601a      	str	r2, [r3, #0]
	halRet = W25Q_readData(&spiFlash, BUFFER_SIZE, BUFFER_SIZE, spiRxPtr);
 8002b70:	4b3a      	ldr	r3, [pc, #232]	@ (8002c5c <startAudioStream+0x130>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	1dfc      	adds	r4, r7, #7
 8002b76:	2280      	movs	r2, #128	@ 0x80
 8002b78:	0052      	lsls	r2, r2, #1
 8002b7a:	2180      	movs	r1, #128	@ 0x80
 8002b7c:	0049      	lsls	r1, r1, #1
 8002b7e:	4838      	ldr	r0, [pc, #224]	@ (8002c60 <startAudioStream+0x134>)
 8002b80:	f7fe fb92 	bl	80012a8 <W25Q_readData>
 8002b84:	0003      	movs	r3, r0
 8002b86:	7023      	strb	r3, [r4, #0]
	spiRxPtr = &spiRxBuff1[0];
 8002b88:	4b34      	ldr	r3, [pc, #208]	@ (8002c5c <startAudioStream+0x130>)
 8002b8a:	4a37      	ldr	r2, [pc, #220]	@ (8002c68 <startAudioStream+0x13c>)
 8002b8c:	601a      	str	r2, [r3, #0]


	__NOP();
 8002b8e:	46c0      	nop			@ (mov r8, r8)
	// Convert 8-bit values to 16-bit values
	uint8_t offset = 44;
 8002b90:	1dbb      	adds	r3, r7, #6
 8002b92:	222c      	movs	r2, #44	@ 0x2c
 8002b94:	701a      	strb	r2, [r3, #0]

	// Prime first half of buffer
	for(int i = offset; i < ((BUFFER_SIZE) + offset); i += 2) {
 8002b96:	1dbb      	adds	r3, r7, #6
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	e01b      	b.n	8002bd6 <startAudioStream+0xaa>

		i2sTxBuff[(i - offset) / 2] = (spiRxBuff1[i + 1] << 8) |  spiRxBuff1[i];
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	4a31      	ldr	r2, [pc, #196]	@ (8002c68 <startAudioStream+0x13c>)
 8002ba4:	5cd3      	ldrb	r3, [r2, r3]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	b21a      	sxth	r2, r3
 8002baa:	492f      	ldr	r1, [pc, #188]	@ (8002c68 <startAudioStream+0x13c>)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	18cb      	adds	r3, r1, r3
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	b21b      	sxth	r3, r3
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	b219      	sxth	r1, r3
 8002bb8:	1dbb      	adds	r3, r7, #6
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	d500      	bpl.n	8002bc4 <startAudioStream+0x98>
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	105b      	asrs	r3, r3, #1
 8002bc6:	001a      	movs	r2, r3
 8002bc8:	b289      	uxth	r1, r1
 8002bca:	4b22      	ldr	r3, [pc, #136]	@ (8002c54 <startAudioStream+0x128>)
 8002bcc:	0052      	lsls	r2, r2, #1
 8002bce:	52d1      	strh	r1, [r2, r3]
	for(int i = offset; i < ((BUFFER_SIZE) + offset); i += 2) {
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	1dbb      	adds	r3, r7, #6
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	33ff      	adds	r3, #255	@ 0xff
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	dddd      	ble.n	8002b9e <startAudioStream+0x72>

	}

	__NOP();
 8002be2:	46c0      	nop			@ (mov r8, r8)

	// Prime second half of buffer
	for(int i = 0; i < BUFFER_SIZE; i += 2) {
 8002be4:	2300      	movs	r3, #0
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	e01a      	b.n	8002c20 <startAudioStream+0xf4>

		i2sTxBuff[(BUFFER_SIZE / 2) + (i/2)] = (spiRxBuff2[i + 1] << 8) |  spiRxBuff2[i];
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	3301      	adds	r3, #1
 8002bee:	4a1d      	ldr	r2, [pc, #116]	@ (8002c64 <startAudioStream+0x138>)
 8002bf0:	5cd3      	ldrb	r3, [r2, r3]
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	b21a      	sxth	r2, r3
 8002bf6:	491b      	ldr	r1, [pc, #108]	@ (8002c64 <startAudioStream+0x138>)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	18cb      	adds	r3, r1, r3
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	b21b      	sxth	r3, r3
 8002c00:	4313      	orrs	r3, r2
 8002c02:	b219      	sxth	r1, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	da00      	bge.n	8002c0c <startAudioStream+0xe0>
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	105b      	asrs	r3, r3, #1
 8002c0e:	3380      	adds	r3, #128	@ 0x80
 8002c10:	001a      	movs	r2, r3
 8002c12:	b289      	uxth	r1, r1
 8002c14:	4b0f      	ldr	r3, [pc, #60]	@ (8002c54 <startAudioStream+0x128>)
 8002c16:	0052      	lsls	r2, r2, #1
 8002c18:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < BUFFER_SIZE; i += 2) {
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2bff      	cmp	r3, #255	@ 0xff
 8002c24:	dde1      	ble.n	8002bea <startAudioStream+0xbe>

	}

	halRet = HAL_I2S_Transmit(&hi2s1, i2sTxBuff, BUFFER_SIZE, HAL_MAX_DELAY);
 8002c26:	1dfc      	adds	r4, r7, #7
 8002c28:	2301      	movs	r3, #1
 8002c2a:	425b      	negs	r3, r3
 8002c2c:	2280      	movs	r2, #128	@ 0x80
 8002c2e:	0052      	lsls	r2, r2, #1
 8002c30:	4908      	ldr	r1, [pc, #32]	@ (8002c54 <startAudioStream+0x128>)
 8002c32:	4809      	ldr	r0, [pc, #36]	@ (8002c58 <startAudioStream+0x12c>)
 8002c34:	f002 fab0 	bl	8005198 <HAL_I2S_Transmit>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	7023      	strb	r3, [r4, #0]

	__NOP();
 8002c3c:	46c0      	nop			@ (mov r8, r8)



	// Disable Amplifier
	NAU8315YG_AmpDisable(&i2sAmp);
 8002c3e:	4b04      	ldr	r3, [pc, #16]	@ (8002c50 <startAudioStream+0x124>)
 8002c40:	0018      	movs	r0, r3
 8002c42:	f7fd fec7 	bl	80009d4 <NAU8315YG_AmpDisable>


}
 8002c46:	46c0      	nop			@ (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b005      	add	sp, #20
 8002c4c:	bd90      	pop	{r4, r7, pc}
 8002c4e:	46c0      	nop			@ (mov r8, r8)
 8002c50:	20000448 	.word	0x20000448
 8002c54:	20000658 	.word	0x20000658
 8002c58:	20000144 	.word	0x20000144
 8002c5c:	20000074 	.word	0x20000074
 8002c60:	20000420 	.word	0x20000420
 8002c64:	20000558 	.word	0x20000558
 8002c68:	20000458 	.word	0x20000458

08002c6c <stopAudioStream>:

/*
 * Halts DMA streams
 */
void stopAudioStream(void) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0

}
 8002c70:	46c0      	nop			@ (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_I2S_TxHalfCpltCallback>:



}

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]



}
 8002c7e:	46c0      	nop			@ (mov r8, r8)
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b002      	add	sp, #8
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]



}
 8002c8e:	46c0      	nop			@ (mov r8, r8)
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b002      	add	sp, #8
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c9a:	b672      	cpsid	i
}
 8002c9c:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	e7fd      	b.n	8002c9e <Error_Handler+0x8>
	...

08002ca4 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8002ca4:	b5b0      	push	{r4, r5, r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	0005      	movs	r5, r0
 8002cac:	000c      	movs	r4, r1
 8002cae:	0010      	movs	r0, r2
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	1dbb      	adds	r3, r7, #6
 8002cb4:	1c2a      	adds	r2, r5, #0
 8002cb6:	801a      	strh	r2, [r3, #0]
 8002cb8:	1d3b      	adds	r3, r7, #4
 8002cba:	1c22      	adds	r2, r4, #0
 8002cbc:	801a      	strh	r2, [r3, #0]
 8002cbe:	1cbb      	adds	r3, r7, #2
 8002cc0:	1c02      	adds	r2, r0, #0
 8002cc2:	801a      	strh	r2, [r3, #0]
 8002cc4:	003b      	movs	r3, r7
 8002cc6:	1c0a      	adds	r2, r1, #0
 8002cc8:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8002cca:	4b7c      	ldr	r3, [pc, #496]	@ (8002ebc <sevSeg_Init+0x218>)
 8002ccc:	1dba      	adds	r2, r7, #6
 8002cce:	8812      	ldrh	r2, [r2, #0]
 8002cd0:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8002cd2:	4b7b      	ldr	r3, [pc, #492]	@ (8002ec0 <sevSeg_Init+0x21c>)
 8002cd4:	1d3a      	adds	r2, r7, #4
 8002cd6:	8812      	ldrh	r2, [r2, #0]
 8002cd8:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8002cda:	4b7a      	ldr	r3, [pc, #488]	@ (8002ec4 <sevSeg_Init+0x220>)
 8002cdc:	1cba      	adds	r2, r7, #2
 8002cde:	8812      	ldrh	r2, [r2, #0]
 8002ce0:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8002ce2:	4b79      	ldr	r3, [pc, #484]	@ (8002ec8 <sevSeg_Init+0x224>)
 8002ce4:	003a      	movs	r2, r7
 8002ce6:	8812      	ldrh	r2, [r2, #0]
 8002ce8:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8002cea:	4a78      	ldr	r2, [pc, #480]	@ (8002ecc <sevSeg_Init+0x228>)
 8002cec:	2330      	movs	r3, #48	@ 0x30
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8002cf4:	4a76      	ldr	r2, [pc, #472]	@ (8002ed0 <sevSeg_Init+0x22c>)
 8002cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cf8:	0010      	movs	r0, r2
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	234c      	movs	r3, #76	@ 0x4c
 8002cfe:	001a      	movs	r2, r3
 8002d00:	f006 fc9e 	bl	8009640 <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8002d04:	4b73      	ldr	r3, [pc, #460]	@ (8002ed4 <sevSeg_Init+0x230>)
 8002d06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d08:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	e00b      	b.n	8002d28 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d16:	18d3      	adds	r3, r2, r3
 8002d18:	6819      	ldr	r1, [r3, #0]
 8002d1a:	4b6f      	ldr	r3, [pc, #444]	@ (8002ed8 <sevSeg_Init+0x234>)
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	0092      	lsls	r2, r2, #2
 8002d20:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3301      	adds	r3, #1
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	ddf0      	ble.n	8002d10 <sevSeg_Init+0x6c>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8002d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed8 <sevSeg_Init+0x234>)
 8002d30:	6918      	ldr	r0, [r3, #16]
 8002d32:	4b66      	ldr	r3, [pc, #408]	@ (8002ecc <sevSeg_Init+0x228>)
 8002d34:	8819      	ldrh	r1, [r3, #0]
 8002d36:	4b69      	ldr	r3, [pc, #420]	@ (8002edc <sevSeg_Init+0x238>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	f001 fa8f 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8002d40:	4b65      	ldr	r3, [pc, #404]	@ (8002ed8 <sevSeg_Init+0x234>)
 8002d42:	6918      	ldr	r0, [r3, #16]
 8002d44:	4b61      	ldr	r3, [pc, #388]	@ (8002ecc <sevSeg_Init+0x228>)
 8002d46:	8819      	ldrh	r1, [r3, #0]
 8002d48:	4b64      	ldr	r3, [pc, #400]	@ (8002edc <sevSeg_Init+0x238>)
 8002d4a:	785b      	ldrb	r3, [r3, #1]
 8002d4c:	001a      	movs	r2, r3
 8002d4e:	f001 fa86 	bl	800425e <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002d52:	4b61      	ldr	r3, [pc, #388]	@ (8002ed8 <sevSeg_Init+0x234>)
 8002d54:	6898      	ldr	r0, [r3, #8]
 8002d56:	4b5b      	ldr	r3, [pc, #364]	@ (8002ec4 <sevSeg_Init+0x220>)
 8002d58:	8819      	ldrh	r1, [r3, #0]
 8002d5a:	4b60      	ldr	r3, [pc, #384]	@ (8002edc <sevSeg_Init+0x238>)
 8002d5c:	785b      	ldrb	r3, [r3, #1]
 8002d5e:	001a      	movs	r2, r3
 8002d60:	f001 fa7d 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002d64:	4b5c      	ldr	r3, [pc, #368]	@ (8002ed8 <sevSeg_Init+0x234>)
 8002d66:	6898      	ldr	r0, [r3, #8]
 8002d68:	4b56      	ldr	r3, [pc, #344]	@ (8002ec4 <sevSeg_Init+0x220>)
 8002d6a:	8819      	ldrh	r1, [r3, #0]
 8002d6c:	4b5b      	ldr	r3, [pc, #364]	@ (8002edc <sevSeg_Init+0x238>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	001a      	movs	r2, r3
 8002d72:	f001 fa74 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8002d76:	4b58      	ldr	r3, [pc, #352]	@ (8002ed8 <sevSeg_Init+0x234>)
 8002d78:	68d8      	ldr	r0, [r3, #12]
 8002d7a:	4b53      	ldr	r3, [pc, #332]	@ (8002ec8 <sevSeg_Init+0x224>)
 8002d7c:	8819      	ldrh	r1, [r3, #0]
 8002d7e:	4b57      	ldr	r3, [pc, #348]	@ (8002edc <sevSeg_Init+0x238>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	001a      	movs	r2, r3
 8002d84:	f001 fa6b 	bl	800425e <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(50);
 8002d88:	2032      	movs	r0, #50	@ 0x32
 8002d8a:	f000 f95f 	bl	800304c <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8002d8e:	2308      	movs	r3, #8
 8002d90:	18fb      	adds	r3, r7, r3
 8002d92:	4a53      	ldr	r2, [pc, #332]	@ (8002ee0 <sevSeg_Init+0x23c>)
 8002d94:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e038      	b.n	8002e0e <sevSeg_Init+0x16a>

		sendByte = hofSymb[i];
 8002d9c:	231b      	movs	r3, #27
 8002d9e:	18fb      	adds	r3, r7, r3
 8002da0:	2208      	movs	r2, #8
 8002da2:	18b9      	adds	r1, r7, r2
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	188a      	adds	r2, r1, r2
 8002da8:	7812      	ldrb	r2, [r2, #0]
 8002daa:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	e027      	b.n	8002e02 <sevSeg_Init+0x15e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8002db2:	4b49      	ldr	r3, [pc, #292]	@ (8002ed8 <sevSeg_Init+0x234>)
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	4b41      	ldr	r3, [pc, #260]	@ (8002ebc <sevSeg_Init+0x218>)
 8002db8:	8819      	ldrh	r1, [r3, #0]
 8002dba:	241b      	movs	r4, #27
 8002dbc:	193b      	adds	r3, r7, r4
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	4a45      	ldr	r2, [pc, #276]	@ (8002edc <sevSeg_Init+0x238>)
 8002dc6:	5cd3      	ldrb	r3, [r2, r3]
 8002dc8:	001a      	movs	r2, r3
 8002dca:	f001 fa48 	bl	800425e <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8002dce:	4b42      	ldr	r3, [pc, #264]	@ (8002ed8 <sevSeg_Init+0x234>)
 8002dd0:	6858      	ldr	r0, [r3, #4]
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec0 <sevSeg_Init+0x21c>)
 8002dd4:	8819      	ldrh	r1, [r3, #0]
 8002dd6:	4b41      	ldr	r3, [pc, #260]	@ (8002edc <sevSeg_Init+0x238>)
 8002dd8:	785b      	ldrb	r3, [r3, #1]
 8002dda:	001a      	movs	r2, r3
 8002ddc:	f001 fa3f 	bl	800425e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8002de0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ed8 <sevSeg_Init+0x234>)
 8002de2:	6858      	ldr	r0, [r3, #4]
 8002de4:	4b36      	ldr	r3, [pc, #216]	@ (8002ec0 <sevSeg_Init+0x21c>)
 8002de6:	8819      	ldrh	r1, [r3, #0]
 8002de8:	4b3c      	ldr	r3, [pc, #240]	@ (8002edc <sevSeg_Init+0x238>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	001a      	movs	r2, r3
 8002dee:	f001 fa36 	bl	800425e <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8002df2:	193b      	adds	r3, r7, r4
 8002df4:	193a      	adds	r2, r7, r4
 8002df6:	7812      	ldrb	r2, [r2, #0]
 8002df8:	0852      	lsrs	r2, r2, #1
 8002dfa:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2b07      	cmp	r3, #7
 8002e06:	ddd4      	ble.n	8002db2 <sevSeg_Init+0x10e>
	for(int i = 0; i <= 3; i++) {
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	ddc3      	ble.n	8002d9c <sevSeg_Init+0xf8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002e14:	4b30      	ldr	r3, [pc, #192]	@ (8002ed8 <sevSeg_Init+0x234>)
 8002e16:	6898      	ldr	r0, [r3, #8]
 8002e18:	4b2a      	ldr	r3, [pc, #168]	@ (8002ec4 <sevSeg_Init+0x220>)
 8002e1a:	8819      	ldrh	r1, [r3, #0]
 8002e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002edc <sevSeg_Init+0x238>)
 8002e1e:	785b      	ldrb	r3, [r3, #1]
 8002e20:	001a      	movs	r2, r3
 8002e22:	f001 fa1c 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002e26:	4b2c      	ldr	r3, [pc, #176]	@ (8002ed8 <sevSeg_Init+0x234>)
 8002e28:	6898      	ldr	r0, [r3, #8]
 8002e2a:	4b26      	ldr	r3, [pc, #152]	@ (8002ec4 <sevSeg_Init+0x220>)
 8002e2c:	8819      	ldrh	r1, [r3, #0]
 8002e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002edc <sevSeg_Init+0x238>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	001a      	movs	r2, r3
 8002e34:	f001 fa13 	bl	800425e <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8002e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f005 fc0a 	bl	8008654 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8002e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e42:	0018      	movs	r0, r3
 8002e44:	f005 fbba 	bl	80085bc <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8002e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4e:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8002e50:	46c0      	nop			@ (mov r8, r8)
 8002e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1ad2      	subs	r2, r2, r3
 8002e5c:	2380      	movs	r3, #128	@ 0x80
 8002e5e:	01db      	lsls	r3, r3, #7
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d3f6      	bcc.n	8002e52 <sevSeg_Init+0x1ae>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8002e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e66:	0018      	movs	r0, r3
 8002e68:	f005 fbf4 	bl	8008654 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8002e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed8 <sevSeg_Init+0x234>)
 8002e6e:	6918      	ldr	r0, [r3, #16]
 8002e70:	4b16      	ldr	r3, [pc, #88]	@ (8002ecc <sevSeg_Init+0x228>)
 8002e72:	8819      	ldrh	r1, [r3, #0]
 8002e74:	4b19      	ldr	r3, [pc, #100]	@ (8002edc <sevSeg_Init+0x238>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	001a      	movs	r2, r3
 8002e7a:	f001 f9f0 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8002e7e:	4b16      	ldr	r3, [pc, #88]	@ (8002ed8 <sevSeg_Init+0x234>)
 8002e80:	6918      	ldr	r0, [r3, #16]
 8002e82:	4b12      	ldr	r3, [pc, #72]	@ (8002ecc <sevSeg_Init+0x228>)
 8002e84:	8819      	ldrh	r1, [r3, #0]
 8002e86:	4b15      	ldr	r3, [pc, #84]	@ (8002edc <sevSeg_Init+0x238>)
 8002e88:	785b      	ldrb	r3, [r3, #1]
 8002e8a:	001a      	movs	r2, r3
 8002e8c:	f001 f9e7 	bl	800425e <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002e90:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <sevSeg_Init+0x234>)
 8002e92:	6898      	ldr	r0, [r3, #8]
 8002e94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <sevSeg_Init+0x220>)
 8002e96:	8819      	ldrh	r1, [r3, #0]
 8002e98:	4b10      	ldr	r3, [pc, #64]	@ (8002edc <sevSeg_Init+0x238>)
 8002e9a:	785b      	ldrb	r3, [r3, #1]
 8002e9c:	001a      	movs	r2, r3
 8002e9e:	f001 f9de 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed8 <sevSeg_Init+0x234>)
 8002ea4:	6898      	ldr	r0, [r3, #8]
 8002ea6:	4b07      	ldr	r3, [pc, #28]	@ (8002ec4 <sevSeg_Init+0x220>)
 8002ea8:	8819      	ldrh	r1, [r3, #0]
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <sevSeg_Init+0x238>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	001a      	movs	r2, r3
 8002eb0:	f001 f9d5 	bl	800425e <HAL_GPIO_WritePin>

}
 8002eb4:	46c0      	nop			@ (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b008      	add	sp, #32
 8002eba:	bdb0      	pop	{r4, r5, r7, pc}
 8002ebc:	20000858 	.word	0x20000858
 8002ec0:	2000085a 	.word	0x2000085a
 8002ec4:	2000085c 	.word	0x2000085c
 8002ec8:	2000085e 	.word	0x2000085e
 8002ecc:	20000860 	.word	0x20000860
 8002ed0:	20000864 	.word	0x20000864
 8002ed4:	200008b0 	.word	0x200008b0
 8002ed8:	20000078 	.word	0x20000078
 8002edc:	2000008c 	.word	0x2000008c
 8002ee0:	471d3700 	.word	0x471d3700

08002ee4 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime, uint8_t userAlarmEnable) {
 8002ee4:	b590      	push	{r4, r7, lr}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	000a      	movs	r2, r1
 8002eee:	1cfb      	adds	r3, r7, #3
 8002ef0:	701a      	strb	r2, [r3, #0]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	210a      	movs	r1, #10
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7fd f903 	bl	8000104 <__udivsi3>
 8002efe:	0003      	movs	r3, r0
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	2408      	movs	r4, #8
 8002f04:	193b      	adds	r3, r7, r4
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	210a      	movs	r1, #10
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f7fd f97e 	bl	8000210 <__aeabi_uidivmod>
 8002f14:	000b      	movs	r3, r1
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	193b      	adds	r3, r7, r4
 8002f1a:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002f20:	210a      	movs	r1, #10
 8002f22:	0018      	movs	r0, r3
 8002f24:	f7fd f8ee 	bl	8000104 <__udivsi3>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	193b      	adds	r3, r7, r4
 8002f2e:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002f34:	210a      	movs	r1, #10
 8002f36:	0018      	movs	r0, r3
 8002f38:	f7fd f96a 	bl	8000210 <__aeabi_uidivmod>
 8002f3c:	000b      	movs	r3, r1
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	193b      	adds	r3, r7, r4
 8002f42:	70da      	strb	r2, [r3, #3]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 3; i >= 0; i--) {
 8002f44:	2303      	movs	r3, #3
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	e05b      	b.n	8003002 <sevSeg_updateDigits+0x11e>

		sendByte = dispDigits[sendTime[i]];
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	18fa      	adds	r2, r7, r3
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	18d3      	adds	r3, r2, r3
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	0019      	movs	r1, r3
 8002f56:	2017      	movs	r0, #23
 8002f58:	183b      	adds	r3, r7, r0
 8002f5a:	4a36      	ldr	r2, [pc, #216]	@ (8003034 <sevSeg_updateDigits+0x150>)
 8002f5c:	5c52      	ldrb	r2, [r2, r1]
 8002f5e:	701a      	strb	r2, [r3, #0]

		// If tenth's place of hour and zero, disable this segment
		if( (i == 0) && (sendByte == dispDigits[0])) {
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d107      	bne.n	8002f76 <sevSeg_updateDigits+0x92>
 8002f66:	2242      	movs	r2, #66	@ 0x42
 8002f68:	183b      	adds	r3, r7, r0
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d102      	bne.n	8002f76 <sevSeg_updateDigits+0x92>
			sendByte = 0xFF;
 8002f70:	183b      	adds	r3, r7, r0
 8002f72:	22ff      	movs	r2, #255	@ 0xff
 8002f74:	701a      	strb	r2, [r3, #0]
		}

		// If one's place of hour, set decimal point based on AM/PM.
		// OR
		// If one's place of minute, set decimal place based on user alarm enabled
		if( ((i == 1) && (updateTime->TimeFormat == RTC_HOURFORMAT12_PM)) ||
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d103      	bne.n	8002f84 <sevSeg_updateDigits+0xa0>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	78db      	ldrb	r3, [r3, #3]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d006      	beq.n	8002f92 <sevSeg_updateDigits+0xae>
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d10a      	bne.n	8002fa0 <sevSeg_updateDigits+0xbc>
			((i == 3) && userAlarmEnable)	) {
 8002f8a:	1cfb      	adds	r3, r7, #3
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d006      	beq.n	8002fa0 <sevSeg_updateDigits+0xbc>
			sendByte = (sendByte & 0b11111101);
 8002f92:	2217      	movs	r2, #23
 8002f94:	18bb      	adds	r3, r7, r2
 8002f96:	18ba      	adds	r2, r7, r2
 8002f98:	7812      	ldrb	r2, [r2, #0]
 8002f9a:	2102      	movs	r1, #2
 8002f9c:	438a      	bics	r2, r1
 8002f9e:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	e027      	b.n	8002ff6 <sevSeg_updateDigits+0x112>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[(sendByte & 1)]);
 8002fa6:	4b24      	ldr	r3, [pc, #144]	@ (8003038 <sevSeg_updateDigits+0x154>)
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	4b24      	ldr	r3, [pc, #144]	@ (800303c <sevSeg_updateDigits+0x158>)
 8002fac:	8819      	ldrh	r1, [r3, #0]
 8002fae:	2417      	movs	r4, #23
 8002fb0:	193b      	adds	r3, r7, r4
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	4a21      	ldr	r2, [pc, #132]	@ (8003040 <sevSeg_updateDigits+0x15c>)
 8002fba:	5cd3      	ldrb	r3, [r2, r3]
 8002fbc:	001a      	movs	r2, r3
 8002fbe:	f001 f94e 	bl	800425e <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <sevSeg_updateDigits+0x154>)
 8002fc4:	6858      	ldr	r0, [r3, #4]
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8003044 <sevSeg_updateDigits+0x160>)
 8002fc8:	8819      	ldrh	r1, [r3, #0]
 8002fca:	4b1d      	ldr	r3, [pc, #116]	@ (8003040 <sevSeg_updateDigits+0x15c>)
 8002fcc:	785b      	ldrb	r3, [r3, #1]
 8002fce:	001a      	movs	r2, r3
 8002fd0:	f001 f945 	bl	800425e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8002fd4:	4b18      	ldr	r3, [pc, #96]	@ (8003038 <sevSeg_updateDigits+0x154>)
 8002fd6:	6858      	ldr	r0, [r3, #4]
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8003044 <sevSeg_updateDigits+0x160>)
 8002fda:	8819      	ldrh	r1, [r3, #0]
 8002fdc:	4b18      	ldr	r3, [pc, #96]	@ (8003040 <sevSeg_updateDigits+0x15c>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	001a      	movs	r2, r3
 8002fe2:	f001 f93c 	bl	800425e <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8002fe6:	193b      	adds	r3, r7, r4
 8002fe8:	193a      	adds	r2, r7, r4
 8002fea:	7812      	ldrb	r2, [r2, #0]
 8002fec:	0852      	lsrs	r2, r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b07      	cmp	r3, #7
 8002ffa:	ddd4      	ble.n	8002fa6 <sevSeg_updateDigits+0xc2>
	for(int i = 3; i >= 0; i--) {
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	daa0      	bge.n	8002f4a <sevSeg_updateDigits+0x66>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8003008:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <sevSeg_updateDigits+0x154>)
 800300a:	6898      	ldr	r0, [r3, #8]
 800300c:	4b0e      	ldr	r3, [pc, #56]	@ (8003048 <sevSeg_updateDigits+0x164>)
 800300e:	8819      	ldrh	r1, [r3, #0]
 8003010:	4b0b      	ldr	r3, [pc, #44]	@ (8003040 <sevSeg_updateDigits+0x15c>)
 8003012:	785b      	ldrb	r3, [r3, #1]
 8003014:	001a      	movs	r2, r3
 8003016:	f001 f922 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800301a:	4b07      	ldr	r3, [pc, #28]	@ (8003038 <sevSeg_updateDigits+0x154>)
 800301c:	6898      	ldr	r0, [r3, #8]
 800301e:	4b0a      	ldr	r3, [pc, #40]	@ (8003048 <sevSeg_updateDigits+0x164>)
 8003020:	8819      	ldrh	r1, [r3, #0]
 8003022:	4b07      	ldr	r3, [pc, #28]	@ (8003040 <sevSeg_updateDigits+0x15c>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	001a      	movs	r2, r3
 8003028:	f001 f919 	bl	800425e <HAL_GPIO_WritePin>

	return;
 800302c:	46c0      	nop			@ (mov r8, r8)

}
 800302e:	46bd      	mov	sp, r7
 8003030:	b007      	add	sp, #28
 8003032:	bd90      	pop	{r4, r7, pc}
 8003034:	080096a0 	.word	0x080096a0
 8003038:	20000078 	.word	0x20000078
 800303c:	20000858 	.word	0x20000858
 8003040:	2000008c 	.word	0x2000008c
 8003044:	2000085a 	.word	0x2000085a
 8003048:	2000085c 	.word	0x2000085c

0800304c <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	0002      	movs	r2, r0
 8003054:	1dbb      	adds	r3, r7, #6
 8003056:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8003058:	4b20      	ldr	r3, [pc, #128]	@ (80030dc <sevSeg_setIntensity+0x90>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d105      	bne.n	800306c <sevSeg_setIntensity+0x20>
 8003060:	4b1f      	ldr	r3, [pc, #124]	@ (80030e0 <sevSeg_setIntensity+0x94>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	1dba      	adds	r2, r7, #6
 8003066:	8812      	ldrh	r2, [r2, #0]
 8003068:	635a      	str	r2, [r3, #52]	@ 0x34
 800306a:	e02c      	b.n	80030c6 <sevSeg_setIntensity+0x7a>
 800306c:	4b1b      	ldr	r3, [pc, #108]	@ (80030dc <sevSeg_setIntensity+0x90>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b04      	cmp	r3, #4
 8003072:	d105      	bne.n	8003080 <sevSeg_setIntensity+0x34>
 8003074:	4b1a      	ldr	r3, [pc, #104]	@ (80030e0 <sevSeg_setIntensity+0x94>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	1dbb      	adds	r3, r7, #6
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	6393      	str	r3, [r2, #56]	@ 0x38
 800307e:	e022      	b.n	80030c6 <sevSeg_setIntensity+0x7a>
 8003080:	4b16      	ldr	r3, [pc, #88]	@ (80030dc <sevSeg_setIntensity+0x90>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b08      	cmp	r3, #8
 8003086:	d105      	bne.n	8003094 <sevSeg_setIntensity+0x48>
 8003088:	4b15      	ldr	r3, [pc, #84]	@ (80030e0 <sevSeg_setIntensity+0x94>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	1dbb      	adds	r3, r7, #6
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003092:	e018      	b.n	80030c6 <sevSeg_setIntensity+0x7a>
 8003094:	4b11      	ldr	r3, [pc, #68]	@ (80030dc <sevSeg_setIntensity+0x90>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b0c      	cmp	r3, #12
 800309a:	d105      	bne.n	80030a8 <sevSeg_setIntensity+0x5c>
 800309c:	4b10      	ldr	r3, [pc, #64]	@ (80030e0 <sevSeg_setIntensity+0x94>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	1dbb      	adds	r3, r7, #6
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030a6:	e00e      	b.n	80030c6 <sevSeg_setIntensity+0x7a>
 80030a8:	4b0c      	ldr	r3, [pc, #48]	@ (80030dc <sevSeg_setIntensity+0x90>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d105      	bne.n	80030bc <sevSeg_setIntensity+0x70>
 80030b0:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <sevSeg_setIntensity+0x94>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	1dbb      	adds	r3, r7, #6
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80030ba:	e004      	b.n	80030c6 <sevSeg_setIntensity+0x7a>
 80030bc:	4b08      	ldr	r3, [pc, #32]	@ (80030e0 <sevSeg_setIntensity+0x94>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	1dbb      	adds	r3, r7, #6
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 80030c6:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <sevSeg_setIntensity+0x90>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4b05      	ldr	r3, [pc, #20]	@ (80030e0 <sevSeg_setIntensity+0x94>)
 80030cc:	0011      	movs	r1, r2
 80030ce:	0018      	movs	r0, r3
 80030d0:	f005 fbc0 	bl	8008854 <HAL_TIM_PWM_Start>

}
 80030d4:	46c0      	nop			@ (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b002      	add	sp, #8
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	200008b0 	.word	0x200008b0
 80030e0:	20000864 	.word	0x20000864

080030e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ea:	4b13      	ldr	r3, [pc, #76]	@ (8003138 <HAL_MspInit+0x54>)
 80030ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030ee:	4b12      	ldr	r3, [pc, #72]	@ (8003138 <HAL_MspInit+0x54>)
 80030f0:	2101      	movs	r1, #1
 80030f2:	430a      	orrs	r2, r1
 80030f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80030f6:	4b10      	ldr	r3, [pc, #64]	@ (8003138 <HAL_MspInit+0x54>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	2201      	movs	r2, #1
 80030fc:	4013      	ands	r3, r2
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003102:	4b0d      	ldr	r3, [pc, #52]	@ (8003138 <HAL_MspInit+0x54>)
 8003104:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003106:	4b0c      	ldr	r3, [pc, #48]	@ (8003138 <HAL_MspInit+0x54>)
 8003108:	2180      	movs	r1, #128	@ 0x80
 800310a:	0549      	lsls	r1, r1, #21
 800310c:	430a      	orrs	r2, r1
 800310e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003110:	4b09      	ldr	r3, [pc, #36]	@ (8003138 <HAL_MspInit+0x54>)
 8003112:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003114:	2380      	movs	r3, #128	@ 0x80
 8003116:	055b      	lsls	r3, r3, #21
 8003118:	4013      	ands	r3, r2
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800311e:	2200      	movs	r2, #0
 8003120:	2100      	movs	r1, #0
 8003122:	2004      	movs	r0, #4
 8003124:	f000 fc96 	bl	8003a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003128:	2004      	movs	r0, #4
 800312a:	f000 fca8 	bl	8003a7e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800312e:	46c0      	nop			@ (mov r8, r8)
 8003130:	46bd      	mov	sp, r7
 8003132:	b002      	add	sp, #8
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			@ (mov r8, r8)
 8003138:	40021000 	.word	0x40021000

0800313c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800313c:	b590      	push	{r4, r7, lr}
 800313e:	b095      	sub	sp, #84	@ 0x54
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003144:	233c      	movs	r3, #60	@ 0x3c
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	0018      	movs	r0, r3
 800314a:	2314      	movs	r3, #20
 800314c:	001a      	movs	r2, r3
 800314e:	2100      	movs	r1, #0
 8003150:	f006 fa4a 	bl	80095e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003154:	2414      	movs	r4, #20
 8003156:	193b      	adds	r3, r7, r4
 8003158:	0018      	movs	r0, r3
 800315a:	2328      	movs	r3, #40	@ 0x28
 800315c:	001a      	movs	r2, r3
 800315e:	2100      	movs	r1, #0
 8003160:	f006 fa42 	bl	80095e8 <memset>
  if(hi2c->Instance==I2C1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a22      	ldr	r2, [pc, #136]	@ (80031f4 <HAL_I2C_MspInit+0xb8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d13d      	bne.n	80031ea <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800316e:	193b      	adds	r3, r7, r4
 8003170:	2220      	movs	r2, #32
 8003172:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003174:	193b      	adds	r3, r7, r4
 8003176:	2200      	movs	r2, #0
 8003178:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800317a:	193b      	adds	r3, r7, r4
 800317c:	0018      	movs	r0, r3
 800317e:	f002 ff75 	bl	800606c <HAL_RCCEx_PeriphCLKConfig>
 8003182:	1e03      	subs	r3, r0, #0
 8003184:	d001      	beq.n	800318a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003186:	f7ff fd86 	bl	8002c96 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318a:	4b1b      	ldr	r3, [pc, #108]	@ (80031f8 <HAL_I2C_MspInit+0xbc>)
 800318c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800318e:	4b1a      	ldr	r3, [pc, #104]	@ (80031f8 <HAL_I2C_MspInit+0xbc>)
 8003190:	2102      	movs	r1, #2
 8003192:	430a      	orrs	r2, r1
 8003194:	635a      	str	r2, [r3, #52]	@ 0x34
 8003196:	4b18      	ldr	r3, [pc, #96]	@ (80031f8 <HAL_I2C_MspInit+0xbc>)
 8003198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800319a:	2202      	movs	r2, #2
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031a2:	213c      	movs	r1, #60	@ 0x3c
 80031a4:	187b      	adds	r3, r7, r1
 80031a6:	22c0      	movs	r2, #192	@ 0xc0
 80031a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031aa:	187b      	adds	r3, r7, r1
 80031ac:	2212      	movs	r2, #18
 80031ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	187b      	adds	r3, r7, r1
 80031b2:	2200      	movs	r2, #0
 80031b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b6:	187b      	adds	r3, r7, r1
 80031b8:	2200      	movs	r2, #0
 80031ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80031bc:	187b      	adds	r3, r7, r1
 80031be:	2206      	movs	r2, #6
 80031c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c2:	187b      	adds	r3, r7, r1
 80031c4:	4a0d      	ldr	r2, [pc, #52]	@ (80031fc <HAL_I2C_MspInit+0xc0>)
 80031c6:	0019      	movs	r1, r3
 80031c8:	0010      	movs	r0, r2
 80031ca:	f000 fec7 	bl	8003f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031ce:	4b0a      	ldr	r3, [pc, #40]	@ (80031f8 <HAL_I2C_MspInit+0xbc>)
 80031d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031d2:	4b09      	ldr	r3, [pc, #36]	@ (80031f8 <HAL_I2C_MspInit+0xbc>)
 80031d4:	2180      	movs	r1, #128	@ 0x80
 80031d6:	0389      	lsls	r1, r1, #14
 80031d8:	430a      	orrs	r2, r1
 80031da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80031dc:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <HAL_I2C_MspInit+0xbc>)
 80031de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031e0:	2380      	movs	r3, #128	@ 0x80
 80031e2:	039b      	lsls	r3, r3, #14
 80031e4:	4013      	ands	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80031ea:	46c0      	nop			@ (mov r8, r8)
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b015      	add	sp, #84	@ 0x54
 80031f0:	bd90      	pop	{r4, r7, pc}
 80031f2:	46c0      	nop			@ (mov r8, r8)
 80031f4:	40005400 	.word	0x40005400
 80031f8:	40021000 	.word	0x40021000
 80031fc:	50000400 	.word	0x50000400

08003200 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003200:	b590      	push	{r4, r7, lr}
 8003202:	b095      	sub	sp, #84	@ 0x54
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003208:	233c      	movs	r3, #60	@ 0x3c
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	0018      	movs	r0, r3
 800320e:	2314      	movs	r3, #20
 8003210:	001a      	movs	r2, r3
 8003212:	2100      	movs	r1, #0
 8003214:	f006 f9e8 	bl	80095e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003218:	2414      	movs	r4, #20
 800321a:	193b      	adds	r3, r7, r4
 800321c:	0018      	movs	r0, r3
 800321e:	2328      	movs	r3, #40	@ 0x28
 8003220:	001a      	movs	r2, r3
 8003222:	2100      	movs	r1, #0
 8003224:	f006 f9e0 	bl	80095e8 <memset>
  if(hi2s->Instance==SPI1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a4a      	ldr	r2, [pc, #296]	@ (8003358 <HAL_I2S_MspInit+0x158>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d000      	beq.n	8003234 <HAL_I2S_MspInit+0x34>
 8003232:	e08d      	b.n	8003350 <HAL_I2S_MspInit+0x150>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8003234:	193b      	adds	r3, r7, r4
 8003236:	2280      	movs	r2, #128	@ 0x80
 8003238:	0112      	lsls	r2, r2, #4
 800323a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 800323c:	193b      	adds	r3, r7, r4
 800323e:	2200      	movs	r2, #0
 8003240:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003242:	193b      	adds	r3, r7, r4
 8003244:	0018      	movs	r0, r3
 8003246:	f002 ff11 	bl	800606c <HAL_RCCEx_PeriphCLKConfig>
 800324a:	1e03      	subs	r3, r0, #0
 800324c:	d001      	beq.n	8003252 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800324e:	f7ff fd22 	bl	8002c96 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003252:	4b42      	ldr	r3, [pc, #264]	@ (800335c <HAL_I2S_MspInit+0x15c>)
 8003254:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003256:	4b41      	ldr	r3, [pc, #260]	@ (800335c <HAL_I2S_MspInit+0x15c>)
 8003258:	2180      	movs	r1, #128	@ 0x80
 800325a:	0149      	lsls	r1, r1, #5
 800325c:	430a      	orrs	r2, r1
 800325e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003260:	4b3e      	ldr	r3, [pc, #248]	@ (800335c <HAL_I2S_MspInit+0x15c>)
 8003262:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003264:	2380      	movs	r3, #128	@ 0x80
 8003266:	015b      	lsls	r3, r3, #5
 8003268:	4013      	ands	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326e:	4b3b      	ldr	r3, [pc, #236]	@ (800335c <HAL_I2S_MspInit+0x15c>)
 8003270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003272:	4b3a      	ldr	r3, [pc, #232]	@ (800335c <HAL_I2S_MspInit+0x15c>)
 8003274:	2101      	movs	r1, #1
 8003276:	430a      	orrs	r2, r1
 8003278:	635a      	str	r2, [r3, #52]	@ 0x34
 800327a:	4b38      	ldr	r3, [pc, #224]	@ (800335c <HAL_I2S_MspInit+0x15c>)
 800327c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800327e:	2201      	movs	r2, #1
 8003280:	4013      	ands	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003286:	4b35      	ldr	r3, [pc, #212]	@ (800335c <HAL_I2S_MspInit+0x15c>)
 8003288:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800328a:	4b34      	ldr	r3, [pc, #208]	@ (800335c <HAL_I2S_MspInit+0x15c>)
 800328c:	2102      	movs	r1, #2
 800328e:	430a      	orrs	r2, r1
 8003290:	635a      	str	r2, [r3, #52]	@ 0x34
 8003292:	4b32      	ldr	r3, [pc, #200]	@ (800335c <HAL_I2S_MspInit+0x15c>)
 8003294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003296:	2202      	movs	r2, #2
 8003298:	4013      	ands	r3, r2
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA1     ------> I2S1_CK
    PA2     ------> I2S1_SD
    PB0     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800329e:	243c      	movs	r4, #60	@ 0x3c
 80032a0:	193b      	adds	r3, r7, r4
 80032a2:	2206      	movs	r2, #6
 80032a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a6:	193b      	adds	r3, r7, r4
 80032a8:	2202      	movs	r2, #2
 80032aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ac:	193b      	adds	r3, r7, r4
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b2:	193b      	adds	r3, r7, r4
 80032b4:	2200      	movs	r2, #0
 80032b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80032b8:	193b      	adds	r3, r7, r4
 80032ba:	2200      	movs	r2, #0
 80032bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032be:	193a      	adds	r2, r7, r4
 80032c0:	23a0      	movs	r3, #160	@ 0xa0
 80032c2:	05db      	lsls	r3, r3, #23
 80032c4:	0011      	movs	r1, r2
 80032c6:	0018      	movs	r0, r3
 80032c8:	f000 fe48 	bl	8003f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80032cc:	0021      	movs	r1, r4
 80032ce:	187b      	adds	r3, r7, r1
 80032d0:	2201      	movs	r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d4:	187b      	adds	r3, r7, r1
 80032d6:	2202      	movs	r2, #2
 80032d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032da:	187b      	adds	r3, r7, r1
 80032dc:	2200      	movs	r2, #0
 80032de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e0:	187b      	adds	r3, r7, r1
 80032e2:	2200      	movs	r2, #0
 80032e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80032e6:	187b      	adds	r3, r7, r1
 80032e8:	2200      	movs	r2, #0
 80032ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ec:	187b      	adds	r3, r7, r1
 80032ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003360 <HAL_I2S_MspInit+0x160>)
 80032f0:	0019      	movs	r1, r3
 80032f2:	0010      	movs	r0, r2
 80032f4:	f000 fe32 	bl	8003f5c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 80032f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003364 <HAL_I2S_MspInit+0x164>)
 80032fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003368 <HAL_I2S_MspInit+0x168>)
 80032fc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80032fe:	4b19      	ldr	r3, [pc, #100]	@ (8003364 <HAL_I2S_MspInit+0x164>)
 8003300:	2211      	movs	r2, #17
 8003302:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003304:	4b17      	ldr	r3, [pc, #92]	@ (8003364 <HAL_I2S_MspInit+0x164>)
 8003306:	2210      	movs	r2, #16
 8003308:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800330a:	4b16      	ldr	r3, [pc, #88]	@ (8003364 <HAL_I2S_MspInit+0x164>)
 800330c:	2200      	movs	r2, #0
 800330e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003310:	4b14      	ldr	r3, [pc, #80]	@ (8003364 <HAL_I2S_MspInit+0x164>)
 8003312:	2280      	movs	r2, #128	@ 0x80
 8003314:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003316:	4b13      	ldr	r3, [pc, #76]	@ (8003364 <HAL_I2S_MspInit+0x164>)
 8003318:	2280      	movs	r2, #128	@ 0x80
 800331a:	0052      	lsls	r2, r2, #1
 800331c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800331e:	4b11      	ldr	r3, [pc, #68]	@ (8003364 <HAL_I2S_MspInit+0x164>)
 8003320:	2280      	movs	r2, #128	@ 0x80
 8003322:	00d2      	lsls	r2, r2, #3
 8003324:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8003326:	4b0f      	ldr	r3, [pc, #60]	@ (8003364 <HAL_I2S_MspInit+0x164>)
 8003328:	2220      	movs	r2, #32
 800332a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800332c:	4b0d      	ldr	r3, [pc, #52]	@ (8003364 <HAL_I2S_MspInit+0x164>)
 800332e:	22c0      	movs	r2, #192	@ 0xc0
 8003330:	0192      	lsls	r2, r2, #6
 8003332:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003334:	4b0b      	ldr	r3, [pc, #44]	@ (8003364 <HAL_I2S_MspInit+0x164>)
 8003336:	0018      	movs	r0, r3
 8003338:	f000 fbbe 	bl	8003ab8 <HAL_DMA_Init>
 800333c:	1e03      	subs	r3, r0, #0
 800333e:	d001      	beq.n	8003344 <HAL_I2S_MspInit+0x144>
    {
      Error_Handler();
 8003340:	f7ff fca9 	bl	8002c96 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a07      	ldr	r2, [pc, #28]	@ (8003364 <HAL_I2S_MspInit+0x164>)
 8003348:	62da      	str	r2, [r3, #44]	@ 0x2c
 800334a:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <HAL_I2S_MspInit+0x164>)
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003350:	46c0      	nop			@ (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	b015      	add	sp, #84	@ 0x54
 8003356:	bd90      	pop	{r4, r7, pc}
 8003358:	40013000 	.word	0x40013000
 800335c:	40021000 	.word	0x40021000
 8003360:	50000400 	.word	0x50000400
 8003364:	20000180 	.word	0x20000180
 8003368:	40020008 	.word	0x40020008

0800336c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	b08f      	sub	sp, #60	@ 0x3c
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003374:	2410      	movs	r4, #16
 8003376:	193b      	adds	r3, r7, r4
 8003378:	0018      	movs	r0, r3
 800337a:	2328      	movs	r3, #40	@ 0x28
 800337c:	001a      	movs	r2, r3
 800337e:	2100      	movs	r1, #0
 8003380:	f006 f932 	bl	80095e8 <memset>
  if(hrtc->Instance==RTC)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a19      	ldr	r2, [pc, #100]	@ (80033f0 <HAL_RTC_MspInit+0x84>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d12c      	bne.n	80033e8 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800338e:	193b      	adds	r3, r7, r4
 8003390:	2280      	movs	r2, #128	@ 0x80
 8003392:	0292      	lsls	r2, r2, #10
 8003394:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003396:	193b      	adds	r3, r7, r4
 8003398:	2280      	movs	r2, #128	@ 0x80
 800339a:	0052      	lsls	r2, r2, #1
 800339c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800339e:	193b      	adds	r3, r7, r4
 80033a0:	0018      	movs	r0, r3
 80033a2:	f002 fe63 	bl	800606c <HAL_RCCEx_PeriphCLKConfig>
 80033a6:	1e03      	subs	r3, r0, #0
 80033a8:	d001      	beq.n	80033ae <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80033aa:	f7ff fc74 	bl	8002c96 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033ae:	4b11      	ldr	r3, [pc, #68]	@ (80033f4 <HAL_RTC_MspInit+0x88>)
 80033b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80033b2:	4b10      	ldr	r3, [pc, #64]	@ (80033f4 <HAL_RTC_MspInit+0x88>)
 80033b4:	2180      	movs	r1, #128	@ 0x80
 80033b6:	0209      	lsls	r1, r1, #8
 80033b8:	430a      	orrs	r2, r1
 80033ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80033bc:	4b0d      	ldr	r3, [pc, #52]	@ (80033f4 <HAL_RTC_MspInit+0x88>)
 80033be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033c0:	4b0c      	ldr	r3, [pc, #48]	@ (80033f4 <HAL_RTC_MspInit+0x88>)
 80033c2:	2180      	movs	r1, #128	@ 0x80
 80033c4:	00c9      	lsls	r1, r1, #3
 80033c6:	430a      	orrs	r2, r1
 80033c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033ca:	4b0a      	ldr	r3, [pc, #40]	@ (80033f4 <HAL_RTC_MspInit+0x88>)
 80033cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033ce:	2380      	movs	r3, #128	@ 0x80
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4013      	ands	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80033d8:	2200      	movs	r2, #0
 80033da:	2100      	movs	r1, #0
 80033dc:	2002      	movs	r0, #2
 80033de:	f000 fb39 	bl	8003a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80033e2:	2002      	movs	r0, #2
 80033e4:	f000 fb4b 	bl	8003a7e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80033e8:	46c0      	nop			@ (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b00f      	add	sp, #60	@ 0x3c
 80033ee:	bd90      	pop	{r4, r7, pc}
 80033f0:	40002800 	.word	0x40002800
 80033f4:	40021000 	.word	0x40021000

080033f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033f8:	b590      	push	{r4, r7, lr}
 80033fa:	b08b      	sub	sp, #44	@ 0x2c
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003400:	2414      	movs	r4, #20
 8003402:	193b      	adds	r3, r7, r4
 8003404:	0018      	movs	r0, r3
 8003406:	2314      	movs	r3, #20
 8003408:	001a      	movs	r2, r3
 800340a:	2100      	movs	r1, #0
 800340c:	f006 f8ec 	bl	80095e8 <memset>
  if(hspi->Instance==SPI2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a51      	ldr	r2, [pc, #324]	@ (800355c <HAL_SPI_MspInit+0x164>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d000      	beq.n	800341c <HAL_SPI_MspInit+0x24>
 800341a:	e09a      	b.n	8003552 <HAL_SPI_MspInit+0x15a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800341c:	4b50      	ldr	r3, [pc, #320]	@ (8003560 <HAL_SPI_MspInit+0x168>)
 800341e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003420:	4b4f      	ldr	r3, [pc, #316]	@ (8003560 <HAL_SPI_MspInit+0x168>)
 8003422:	2180      	movs	r1, #128	@ 0x80
 8003424:	01c9      	lsls	r1, r1, #7
 8003426:	430a      	orrs	r2, r1
 8003428:	63da      	str	r2, [r3, #60]	@ 0x3c
 800342a:	4b4d      	ldr	r3, [pc, #308]	@ (8003560 <HAL_SPI_MspInit+0x168>)
 800342c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800342e:	2380      	movs	r3, #128	@ 0x80
 8003430:	01db      	lsls	r3, r3, #7
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003438:	4b49      	ldr	r3, [pc, #292]	@ (8003560 <HAL_SPI_MspInit+0x168>)
 800343a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800343c:	4b48      	ldr	r3, [pc, #288]	@ (8003560 <HAL_SPI_MspInit+0x168>)
 800343e:	2101      	movs	r1, #1
 8003440:	430a      	orrs	r2, r1
 8003442:	635a      	str	r2, [r3, #52]	@ 0x34
 8003444:	4b46      	ldr	r3, [pc, #280]	@ (8003560 <HAL_SPI_MspInit+0x168>)
 8003446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003448:	2201      	movs	r2, #1
 800344a:	4013      	ands	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003450:	193b      	adds	r3, r7, r4
 8003452:	2209      	movs	r2, #9
 8003454:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003456:	193b      	adds	r3, r7, r4
 8003458:	2202      	movs	r2, #2
 800345a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	193b      	adds	r3, r7, r4
 800345e:	2200      	movs	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003462:	193b      	adds	r3, r7, r4
 8003464:	2200      	movs	r2, #0
 8003466:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003468:	193b      	adds	r3, r7, r4
 800346a:	2200      	movs	r2, #0
 800346c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346e:	193a      	adds	r2, r7, r4
 8003470:	23a0      	movs	r3, #160	@ 0xa0
 8003472:	05db      	lsls	r3, r3, #23
 8003474:	0011      	movs	r1, r2
 8003476:	0018      	movs	r0, r3
 8003478:	f000 fd70 	bl	8003f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800347c:	0021      	movs	r1, r4
 800347e:	187b      	adds	r3, r7, r1
 8003480:	2210      	movs	r2, #16
 8003482:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	187b      	adds	r3, r7, r1
 8003486:	2202      	movs	r2, #2
 8003488:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	187b      	adds	r3, r7, r1
 800348c:	2200      	movs	r2, #0
 800348e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003490:	187b      	adds	r3, r7, r1
 8003492:	2200      	movs	r2, #0
 8003494:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8003496:	187b      	adds	r3, r7, r1
 8003498:	2201      	movs	r2, #1
 800349a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349c:	187a      	adds	r2, r7, r1
 800349e:	23a0      	movs	r3, #160	@ 0xa0
 80034a0:	05db      	lsls	r3, r3, #23
 80034a2:	0011      	movs	r1, r2
 80034a4:	0018      	movs	r0, r3
 80034a6:	f000 fd59 	bl	8003f5c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel3;
 80034aa:	4b2e      	ldr	r3, [pc, #184]	@ (8003564 <HAL_SPI_MspInit+0x16c>)
 80034ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003568 <HAL_SPI_MspInit+0x170>)
 80034ae:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80034b0:	4b2c      	ldr	r3, [pc, #176]	@ (8003564 <HAL_SPI_MspInit+0x16c>)
 80034b2:	2212      	movs	r2, #18
 80034b4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003564 <HAL_SPI_MspInit+0x16c>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034bc:	4b29      	ldr	r3, [pc, #164]	@ (8003564 <HAL_SPI_MspInit+0x16c>)
 80034be:	2200      	movs	r2, #0
 80034c0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034c2:	4b28      	ldr	r3, [pc, #160]	@ (8003564 <HAL_SPI_MspInit+0x16c>)
 80034c4:	2280      	movs	r2, #128	@ 0x80
 80034c6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034c8:	4b26      	ldr	r3, [pc, #152]	@ (8003564 <HAL_SPI_MspInit+0x16c>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034ce:	4b25      	ldr	r3, [pc, #148]	@ (8003564 <HAL_SPI_MspInit+0x16c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80034d4:	4b23      	ldr	r3, [pc, #140]	@ (8003564 <HAL_SPI_MspInit+0x16c>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80034da:	4b22      	ldr	r3, [pc, #136]	@ (8003564 <HAL_SPI_MspInit+0x16c>)
 80034dc:	2280      	movs	r2, #128	@ 0x80
 80034de:	0192      	lsls	r2, r2, #6
 80034e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80034e2:	4b20      	ldr	r3, [pc, #128]	@ (8003564 <HAL_SPI_MspInit+0x16c>)
 80034e4:	0018      	movs	r0, r3
 80034e6:	f000 fae7 	bl	8003ab8 <HAL_DMA_Init>
 80034ea:	1e03      	subs	r3, r0, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 80034ee:	f7ff fbd2 	bl	8002c96 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003564 <HAL_SPI_MspInit+0x16c>)
 80034f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80034f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003564 <HAL_SPI_MspInit+0x16c>)
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel2;
 80034fe:	4b1b      	ldr	r3, [pc, #108]	@ (800356c <HAL_SPI_MspInit+0x174>)
 8003500:	4a1b      	ldr	r2, [pc, #108]	@ (8003570 <HAL_SPI_MspInit+0x178>)
 8003502:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8003504:	4b19      	ldr	r3, [pc, #100]	@ (800356c <HAL_SPI_MspInit+0x174>)
 8003506:	2213      	movs	r2, #19
 8003508:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800350a:	4b18      	ldr	r3, [pc, #96]	@ (800356c <HAL_SPI_MspInit+0x174>)
 800350c:	2210      	movs	r2, #16
 800350e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003510:	4b16      	ldr	r3, [pc, #88]	@ (800356c <HAL_SPI_MspInit+0x174>)
 8003512:	2200      	movs	r2, #0
 8003514:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003516:	4b15      	ldr	r3, [pc, #84]	@ (800356c <HAL_SPI_MspInit+0x174>)
 8003518:	2280      	movs	r2, #128	@ 0x80
 800351a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800351c:	4b13      	ldr	r3, [pc, #76]	@ (800356c <HAL_SPI_MspInit+0x174>)
 800351e:	2200      	movs	r2, #0
 8003520:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003522:	4b12      	ldr	r3, [pc, #72]	@ (800356c <HAL_SPI_MspInit+0x174>)
 8003524:	2200      	movs	r2, #0
 8003526:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003528:	4b10      	ldr	r3, [pc, #64]	@ (800356c <HAL_SPI_MspInit+0x174>)
 800352a:	2200      	movs	r2, #0
 800352c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800352e:	4b0f      	ldr	r3, [pc, #60]	@ (800356c <HAL_SPI_MspInit+0x174>)
 8003530:	2280      	movs	r2, #128	@ 0x80
 8003532:	0192      	lsls	r2, r2, #6
 8003534:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003536:	4b0d      	ldr	r3, [pc, #52]	@ (800356c <HAL_SPI_MspInit+0x174>)
 8003538:	0018      	movs	r0, r3
 800353a:	f000 fabd 	bl	8003ab8 <HAL_DMA_Init>
 800353e:	1e03      	subs	r3, r0, #0
 8003540:	d001      	beq.n	8003546 <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 8003542:	f7ff fba8 	bl	8002c96 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a08      	ldr	r2, [pc, #32]	@ (800356c <HAL_SPI_MspInit+0x174>)
 800354a:	655a      	str	r2, [r3, #84]	@ 0x54
 800354c:	4b07      	ldr	r3, [pc, #28]	@ (800356c <HAL_SPI_MspInit+0x174>)
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	b00b      	add	sp, #44	@ 0x2c
 8003558:	bd90      	pop	{r4, r7, pc}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	40003800 	.word	0x40003800
 8003560:	40021000 	.word	0x40021000
 8003564:	2000026c 	.word	0x2000026c
 8003568:	40020030 	.word	0x40020030
 800356c:	200002c8 	.word	0x200002c8
 8003570:	4002001c 	.word	0x4002001c

08003574 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	2380      	movs	r3, #128	@ 0x80
 8003582:	05db      	lsls	r3, r3, #23
 8003584:	429a      	cmp	r2, r3
 8003586:	d10b      	bne.n	80035a0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003588:	4b07      	ldr	r3, [pc, #28]	@ (80035a8 <HAL_TIM_PWM_MspInit+0x34>)
 800358a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800358c:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <HAL_TIM_PWM_MspInit+0x34>)
 800358e:	2101      	movs	r1, #1
 8003590:	430a      	orrs	r2, r1
 8003592:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003594:	4b04      	ldr	r3, [pc, #16]	@ (80035a8 <HAL_TIM_PWM_MspInit+0x34>)
 8003596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003598:	2201      	movs	r2, #1
 800359a:	4013      	ands	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80035a0:	46c0      	nop			@ (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b004      	add	sp, #16
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000

080035ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a18      	ldr	r2, [pc, #96]	@ (800361c <HAL_TIM_Base_MspInit+0x70>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d10e      	bne.n	80035dc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80035be:	4b18      	ldr	r3, [pc, #96]	@ (8003620 <HAL_TIM_Base_MspInit+0x74>)
 80035c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035c2:	4b17      	ldr	r3, [pc, #92]	@ (8003620 <HAL_TIM_Base_MspInit+0x74>)
 80035c4:	2180      	movs	r1, #128	@ 0x80
 80035c6:	0209      	lsls	r1, r1, #8
 80035c8:	430a      	orrs	r2, r1
 80035ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80035cc:	4b14      	ldr	r3, [pc, #80]	@ (8003620 <HAL_TIM_Base_MspInit+0x74>)
 80035ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035d0:	2380      	movs	r3, #128	@ 0x80
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	4013      	ands	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80035da:	e01a      	b.n	8003612 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a10      	ldr	r2, [pc, #64]	@ (8003624 <HAL_TIM_Base_MspInit+0x78>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d115      	bne.n	8003612 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80035e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003620 <HAL_TIM_Base_MspInit+0x74>)
 80035e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003620 <HAL_TIM_Base_MspInit+0x74>)
 80035ec:	2180      	movs	r1, #128	@ 0x80
 80035ee:	0289      	lsls	r1, r1, #10
 80035f0:	430a      	orrs	r2, r1
 80035f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80035f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003620 <HAL_TIM_Base_MspInit+0x74>)
 80035f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035f8:	2380      	movs	r3, #128	@ 0x80
 80035fa:	029b      	lsls	r3, r3, #10
 80035fc:	4013      	ands	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003602:	2200      	movs	r2, #0
 8003604:	2100      	movs	r1, #0
 8003606:	2015      	movs	r0, #21
 8003608:	f000 fa24 	bl	8003a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800360c:	2015      	movs	r0, #21
 800360e:	f000 fa36 	bl	8003a7e <HAL_NVIC_EnableIRQ>
}
 8003612:	46c0      	nop			@ (mov r8, r8)
 8003614:	46bd      	mov	sp, r7
 8003616:	b004      	add	sp, #16
 8003618:	bd80      	pop	{r7, pc}
 800361a:	46c0      	nop			@ (mov r8, r8)
 800361c:	40002000 	.word	0x40002000
 8003620:	40021000 	.word	0x40021000
 8003624:	40014400 	.word	0x40014400

08003628 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003628:	b590      	push	{r4, r7, lr}
 800362a:	b089      	sub	sp, #36	@ 0x24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003630:	240c      	movs	r4, #12
 8003632:	193b      	adds	r3, r7, r4
 8003634:	0018      	movs	r0, r3
 8003636:	2314      	movs	r3, #20
 8003638:	001a      	movs	r2, r3
 800363a:	2100      	movs	r1, #0
 800363c:	f005 ffd4 	bl	80095e8 <memset>
  if(htim->Instance==TIM2)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	2380      	movs	r3, #128	@ 0x80
 8003646:	05db      	lsls	r3, r3, #23
 8003648:	429a      	cmp	r2, r3
 800364a:	d121      	bne.n	8003690 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800364c:	4b12      	ldr	r3, [pc, #72]	@ (8003698 <HAL_TIM_MspPostInit+0x70>)
 800364e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003650:	4b11      	ldr	r3, [pc, #68]	@ (8003698 <HAL_TIM_MspPostInit+0x70>)
 8003652:	2104      	movs	r1, #4
 8003654:	430a      	orrs	r2, r1
 8003656:	635a      	str	r2, [r3, #52]	@ 0x34
 8003658:	4b0f      	ldr	r3, [pc, #60]	@ (8003698 <HAL_TIM_MspPostInit+0x70>)
 800365a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800365c:	2204      	movs	r2, #4
 800365e:	4013      	ands	r3, r2
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_SHIFT_nOE_Pin;
 8003664:	0021      	movs	r1, r4
 8003666:	187b      	adds	r3, r7, r1
 8003668:	2240      	movs	r2, #64	@ 0x40
 800366a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366c:	187b      	adds	r3, r7, r1
 800366e:	2202      	movs	r2, #2
 8003670:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	187b      	adds	r3, r7, r1
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003678:	187b      	adds	r3, r7, r1
 800367a:	2200      	movs	r2, #0
 800367c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800367e:	187b      	adds	r3, r7, r1
 8003680:	2202      	movs	r2, #2
 8003682:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_SHIFT_nOE_GPIO_Port, &GPIO_InitStruct);
 8003684:	187b      	adds	r3, r7, r1
 8003686:	4a05      	ldr	r2, [pc, #20]	@ (800369c <HAL_TIM_MspPostInit+0x74>)
 8003688:	0019      	movs	r1, r3
 800368a:	0010      	movs	r0, r2
 800368c:	f000 fc66 	bl	8003f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003690:	46c0      	nop			@ (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b009      	add	sp, #36	@ 0x24
 8003696:	bd90      	pop	{r4, r7, pc}
 8003698:	40021000 	.word	0x40021000
 800369c:	50000800 	.word	0x50000800

080036a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036a4:	46c0      	nop			@ (mov r8, r8)
 80036a6:	e7fd      	b.n	80036a4 <NMI_Handler+0x4>

080036a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036ac:	46c0      	nop			@ (mov r8, r8)
 80036ae:	e7fd      	b.n	80036ac <HardFault_Handler+0x4>

080036b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80036b4:	46c0      	nop			@ (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036be:	46c0      	nop			@ (mov r8, r8)
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036c8:	f000 f8fc 	bl	80038c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036cc:	46c0      	nop			@ (mov r8, r8)
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80036d8:	4b03      	ldr	r3, [pc, #12]	@ (80036e8 <RTC_TAMP_IRQHandler+0x14>)
 80036da:	0018      	movs	r0, r3
 80036dc:	f003 fddc 	bl	8007298 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80036e0:	46c0      	nop			@ (mov r8, r8)
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			@ (mov r8, r8)
 80036e8:	200001dc 	.word	0x200001dc

080036ec <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_EXTI_Pin);
 80036fa:	2001      	movs	r0, #1
 80036fc:	f000 fde8 	bl	80042d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_EXTI_Pin);
 8003700:	2002      	movs	r0, #2
 8003702:	f000 fde5 	bl	80042d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_EXTI_Pin);
 8003710:	2004      	movs	r0, #4
 8003712:	f000 fddd 	bl	80042d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_EXTI_Pin);
 8003716:	2008      	movs	r0, #8
 8003718:	f000 fdda 	bl	80042d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800371c:	46c0      	nop			@ (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_SWITCH_EXTI_Pin);
 8003726:	2010      	movs	r0, #16
 8003728:	f000 fdd2 	bl	80042d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_EXTI_Pin);
 800372c:	2380      	movs	r3, #128	@ 0x80
 800372e:	021b      	lsls	r3, r3, #8
 8003730:	0018      	movs	r0, r3
 8003732:	f000 fdcd 	bl	80042d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003740:	4b03      	ldr	r3, [pc, #12]	@ (8003750 <DMA1_Channel1_IRQHandler+0x14>)
 8003742:	0018      	movs	r0, r3
 8003744:	f000 fac8 	bl	8003cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003748:	46c0      	nop			@ (mov r8, r8)
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	46c0      	nop			@ (mov r8, r8)
 8003750:	20000180 	.word	0x20000180

08003754 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003758:	4b05      	ldr	r3, [pc, #20]	@ (8003770 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800375a:	0018      	movs	r0, r3
 800375c:	f000 fabc 	bl	8003cd8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003760:	4b04      	ldr	r3, [pc, #16]	@ (8003774 <DMA1_Channel2_3_IRQHandler+0x20>)
 8003762:	0018      	movs	r0, r3
 8003764:	f000 fab8 	bl	8003cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003768:	46c0      	nop			@ (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	200002c8 	.word	0x200002c8
 8003774:	2000026c 	.word	0x2000026c

08003778 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800377c:	4b03      	ldr	r3, [pc, #12]	@ (800378c <TIM16_IRQHandler+0x14>)
 800377e:	0018      	movs	r0, r3
 8003780:	f005 f946 	bl	8008a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003784:	46c0      	nop			@ (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			@ (mov r8, r8)
 800378c:	200003bc 	.word	0x200003bc

08003790 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003794:	46c0      	nop			@ (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800379c:	480d      	ldr	r0, [pc, #52]	@ (80037d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800379e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80037a0:	f7ff fff6 	bl	8003790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037a4:	480c      	ldr	r0, [pc, #48]	@ (80037d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80037a6:	490d      	ldr	r1, [pc, #52]	@ (80037dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80037a8:	4a0d      	ldr	r2, [pc, #52]	@ (80037e0 <LoopForever+0xe>)
  movs r3, #0
 80037aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037ac:	e002      	b.n	80037b4 <LoopCopyDataInit>

080037ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037b2:	3304      	adds	r3, #4

080037b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037b8:	d3f9      	bcc.n	80037ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037ba:	4a0a      	ldr	r2, [pc, #40]	@ (80037e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037bc:	4c0a      	ldr	r4, [pc, #40]	@ (80037e8 <LoopForever+0x16>)
  movs r3, #0
 80037be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037c0:	e001      	b.n	80037c6 <LoopFillZerobss>

080037c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037c4:	3204      	adds	r2, #4

080037c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037c8:	d3fb      	bcc.n	80037c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80037ca:	f005 ff15 	bl	80095f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80037ce:	f7fd ff0b 	bl	80015e8 <main>

080037d2 <LoopForever>:

LoopForever:
  b LoopForever
 80037d2:	e7fe      	b.n	80037d2 <LoopForever>
  ldr   r0, =_estack
 80037d4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80037d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037dc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80037e0:	08009768 	.word	0x08009768
  ldr r2, =_sbss
 80037e4:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80037e8:	200008b8 	.word	0x200008b8

080037ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037ec:	e7fe      	b.n	80037ec <ADC1_IRQHandler>
	...

080037f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037f6:	1dfb      	adds	r3, r7, #7
 80037f8:	2200      	movs	r2, #0
 80037fa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037fc:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <HAL_Init+0x3c>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	4b0a      	ldr	r3, [pc, #40]	@ (800382c <HAL_Init+0x3c>)
 8003802:	2180      	movs	r1, #128	@ 0x80
 8003804:	0049      	lsls	r1, r1, #1
 8003806:	430a      	orrs	r2, r1
 8003808:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800380a:	2003      	movs	r0, #3
 800380c:	f000 f810 	bl	8003830 <HAL_InitTick>
 8003810:	1e03      	subs	r3, r0, #0
 8003812:	d003      	beq.n	800381c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003814:	1dfb      	adds	r3, r7, #7
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	e001      	b.n	8003820 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800381c:	f7ff fc62 	bl	80030e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003820:	1dfb      	adds	r3, r7, #7
 8003822:	781b      	ldrb	r3, [r3, #0]
}
 8003824:	0018      	movs	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	b002      	add	sp, #8
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40022000 	.word	0x40022000

08003830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003830:	b590      	push	{r4, r7, lr}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003838:	230f      	movs	r3, #15
 800383a:	18fb      	adds	r3, r7, r3
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003840:	4b1d      	ldr	r3, [pc, #116]	@ (80038b8 <HAL_InitTick+0x88>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d02b      	beq.n	80038a0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003848:	4b1c      	ldr	r3, [pc, #112]	@ (80038bc <HAL_InitTick+0x8c>)
 800384a:	681c      	ldr	r4, [r3, #0]
 800384c:	4b1a      	ldr	r3, [pc, #104]	@ (80038b8 <HAL_InitTick+0x88>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	0019      	movs	r1, r3
 8003852:	23fa      	movs	r3, #250	@ 0xfa
 8003854:	0098      	lsls	r0, r3, #2
 8003856:	f7fc fc55 	bl	8000104 <__udivsi3>
 800385a:	0003      	movs	r3, r0
 800385c:	0019      	movs	r1, r3
 800385e:	0020      	movs	r0, r4
 8003860:	f7fc fc50 	bl	8000104 <__udivsi3>
 8003864:	0003      	movs	r3, r0
 8003866:	0018      	movs	r0, r3
 8003868:	f000 f919 	bl	8003a9e <HAL_SYSTICK_Config>
 800386c:	1e03      	subs	r3, r0, #0
 800386e:	d112      	bne.n	8003896 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b03      	cmp	r3, #3
 8003874:	d80a      	bhi.n	800388c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	2301      	movs	r3, #1
 800387a:	425b      	negs	r3, r3
 800387c:	2200      	movs	r2, #0
 800387e:	0018      	movs	r0, r3
 8003880:	f000 f8e8 	bl	8003a54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003884:	4b0e      	ldr	r3, [pc, #56]	@ (80038c0 <HAL_InitTick+0x90>)
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	e00d      	b.n	80038a8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800388c:	230f      	movs	r3, #15
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
 8003894:	e008      	b.n	80038a8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003896:	230f      	movs	r3, #15
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	2201      	movs	r2, #1
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	e003      	b.n	80038a8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038a0:	230f      	movs	r3, #15
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	2201      	movs	r2, #1
 80038a6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80038a8:	230f      	movs	r3, #15
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	781b      	ldrb	r3, [r3, #0]
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b005      	add	sp, #20
 80038b4:	bd90      	pop	{r4, r7, pc}
 80038b6:	46c0      	nop			@ (mov r8, r8)
 80038b8:	20000098 	.word	0x20000098
 80038bc:	20000090 	.word	0x20000090
 80038c0:	20000094 	.word	0x20000094

080038c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038c8:	4b05      	ldr	r3, [pc, #20]	@ (80038e0 <HAL_IncTick+0x1c>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	001a      	movs	r2, r3
 80038ce:	4b05      	ldr	r3, [pc, #20]	@ (80038e4 <HAL_IncTick+0x20>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	18d2      	adds	r2, r2, r3
 80038d4:	4b03      	ldr	r3, [pc, #12]	@ (80038e4 <HAL_IncTick+0x20>)
 80038d6:	601a      	str	r2, [r3, #0]
}
 80038d8:	46c0      	nop			@ (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	46c0      	nop			@ (mov r8, r8)
 80038e0:	20000098 	.word	0x20000098
 80038e4:	200008b4 	.word	0x200008b4

080038e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  return uwTick;
 80038ec:	4b02      	ldr	r3, [pc, #8]	@ (80038f8 <HAL_GetTick+0x10>)
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	0018      	movs	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	46c0      	nop			@ (mov r8, r8)
 80038f8:	200008b4 	.word	0x200008b4

080038fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	0002      	movs	r2, r0
 8003904:	1dfb      	adds	r3, r7, #7
 8003906:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003908:	1dfb      	adds	r3, r7, #7
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b7f      	cmp	r3, #127	@ 0x7f
 800390e:	d809      	bhi.n	8003924 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003910:	1dfb      	adds	r3, r7, #7
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	001a      	movs	r2, r3
 8003916:	231f      	movs	r3, #31
 8003918:	401a      	ands	r2, r3
 800391a:	4b04      	ldr	r3, [pc, #16]	@ (800392c <__NVIC_EnableIRQ+0x30>)
 800391c:	2101      	movs	r1, #1
 800391e:	4091      	lsls	r1, r2
 8003920:	000a      	movs	r2, r1
 8003922:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003924:	46c0      	nop			@ (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	b002      	add	sp, #8
 800392a:	bd80      	pop	{r7, pc}
 800392c:	e000e100 	.word	0xe000e100

08003930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	0002      	movs	r2, r0
 8003938:	6039      	str	r1, [r7, #0]
 800393a:	1dfb      	adds	r3, r7, #7
 800393c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800393e:	1dfb      	adds	r3, r7, #7
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b7f      	cmp	r3, #127	@ 0x7f
 8003944:	d828      	bhi.n	8003998 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003946:	4a2f      	ldr	r2, [pc, #188]	@ (8003a04 <__NVIC_SetPriority+0xd4>)
 8003948:	1dfb      	adds	r3, r7, #7
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	b25b      	sxtb	r3, r3
 800394e:	089b      	lsrs	r3, r3, #2
 8003950:	33c0      	adds	r3, #192	@ 0xc0
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	589b      	ldr	r3, [r3, r2]
 8003956:	1dfa      	adds	r2, r7, #7
 8003958:	7812      	ldrb	r2, [r2, #0]
 800395a:	0011      	movs	r1, r2
 800395c:	2203      	movs	r2, #3
 800395e:	400a      	ands	r2, r1
 8003960:	00d2      	lsls	r2, r2, #3
 8003962:	21ff      	movs	r1, #255	@ 0xff
 8003964:	4091      	lsls	r1, r2
 8003966:	000a      	movs	r2, r1
 8003968:	43d2      	mvns	r2, r2
 800396a:	401a      	ands	r2, r3
 800396c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	019b      	lsls	r3, r3, #6
 8003972:	22ff      	movs	r2, #255	@ 0xff
 8003974:	401a      	ands	r2, r3
 8003976:	1dfb      	adds	r3, r7, #7
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	0018      	movs	r0, r3
 800397c:	2303      	movs	r3, #3
 800397e:	4003      	ands	r3, r0
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003984:	481f      	ldr	r0, [pc, #124]	@ (8003a04 <__NVIC_SetPriority+0xd4>)
 8003986:	1dfb      	adds	r3, r7, #7
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	b25b      	sxtb	r3, r3
 800398c:	089b      	lsrs	r3, r3, #2
 800398e:	430a      	orrs	r2, r1
 8003990:	33c0      	adds	r3, #192	@ 0xc0
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003996:	e031      	b.n	80039fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003998:	4a1b      	ldr	r2, [pc, #108]	@ (8003a08 <__NVIC_SetPriority+0xd8>)
 800399a:	1dfb      	adds	r3, r7, #7
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	0019      	movs	r1, r3
 80039a0:	230f      	movs	r3, #15
 80039a2:	400b      	ands	r3, r1
 80039a4:	3b08      	subs	r3, #8
 80039a6:	089b      	lsrs	r3, r3, #2
 80039a8:	3306      	adds	r3, #6
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	18d3      	adds	r3, r2, r3
 80039ae:	3304      	adds	r3, #4
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	1dfa      	adds	r2, r7, #7
 80039b4:	7812      	ldrb	r2, [r2, #0]
 80039b6:	0011      	movs	r1, r2
 80039b8:	2203      	movs	r2, #3
 80039ba:	400a      	ands	r2, r1
 80039bc:	00d2      	lsls	r2, r2, #3
 80039be:	21ff      	movs	r1, #255	@ 0xff
 80039c0:	4091      	lsls	r1, r2
 80039c2:	000a      	movs	r2, r1
 80039c4:	43d2      	mvns	r2, r2
 80039c6:	401a      	ands	r2, r3
 80039c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	019b      	lsls	r3, r3, #6
 80039ce:	22ff      	movs	r2, #255	@ 0xff
 80039d0:	401a      	ands	r2, r3
 80039d2:	1dfb      	adds	r3, r7, #7
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	0018      	movs	r0, r3
 80039d8:	2303      	movs	r3, #3
 80039da:	4003      	ands	r3, r0
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039e0:	4809      	ldr	r0, [pc, #36]	@ (8003a08 <__NVIC_SetPriority+0xd8>)
 80039e2:	1dfb      	adds	r3, r7, #7
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	001c      	movs	r4, r3
 80039e8:	230f      	movs	r3, #15
 80039ea:	4023      	ands	r3, r4
 80039ec:	3b08      	subs	r3, #8
 80039ee:	089b      	lsrs	r3, r3, #2
 80039f0:	430a      	orrs	r2, r1
 80039f2:	3306      	adds	r3, #6
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	18c3      	adds	r3, r0, r3
 80039f8:	3304      	adds	r3, #4
 80039fa:	601a      	str	r2, [r3, #0]
}
 80039fc:	46c0      	nop			@ (mov r8, r8)
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b003      	add	sp, #12
 8003a02:	bd90      	pop	{r4, r7, pc}
 8003a04:	e000e100 	.word	0xe000e100
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	1e5a      	subs	r2, r3, #1
 8003a18:	2380      	movs	r3, #128	@ 0x80
 8003a1a:	045b      	lsls	r3, r3, #17
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d301      	bcc.n	8003a24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a20:	2301      	movs	r3, #1
 8003a22:	e010      	b.n	8003a46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a24:	4b0a      	ldr	r3, [pc, #40]	@ (8003a50 <SysTick_Config+0x44>)
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	3a01      	subs	r2, #1
 8003a2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	425b      	negs	r3, r3
 8003a30:	2103      	movs	r1, #3
 8003a32:	0018      	movs	r0, r3
 8003a34:	f7ff ff7c 	bl	8003930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a38:	4b05      	ldr	r3, [pc, #20]	@ (8003a50 <SysTick_Config+0x44>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a3e:	4b04      	ldr	r3, [pc, #16]	@ (8003a50 <SysTick_Config+0x44>)
 8003a40:	2207      	movs	r2, #7
 8003a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b002      	add	sp, #8
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	e000e010 	.word	0xe000e010

08003a54 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
 8003a5e:	210f      	movs	r1, #15
 8003a60:	187b      	adds	r3, r7, r1
 8003a62:	1c02      	adds	r2, r0, #0
 8003a64:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	187b      	adds	r3, r7, r1
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	b25b      	sxtb	r3, r3
 8003a6e:	0011      	movs	r1, r2
 8003a70:	0018      	movs	r0, r3
 8003a72:	f7ff ff5d 	bl	8003930 <__NVIC_SetPriority>
}
 8003a76:	46c0      	nop			@ (mov r8, r8)
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b004      	add	sp, #16
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	0002      	movs	r2, r0
 8003a86:	1dfb      	adds	r3, r7, #7
 8003a88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a8a:	1dfb      	adds	r3, r7, #7
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	b25b      	sxtb	r3, r3
 8003a90:	0018      	movs	r0, r3
 8003a92:	f7ff ff33 	bl	80038fc <__NVIC_EnableIRQ>
}
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b002      	add	sp, #8
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f7ff ffaf 	bl	8003a0c <SysTick_Config>
 8003aae:	0003      	movs	r3, r0
}
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b002      	add	sp, #8
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e077      	b.n	8003bba <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a3d      	ldr	r2, [pc, #244]	@ (8003bc4 <HAL_DMA_Init+0x10c>)
 8003ad0:	4694      	mov	ip, r2
 8003ad2:	4463      	add	r3, ip
 8003ad4:	2114      	movs	r1, #20
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f7fc fb14 	bl	8000104 <__udivsi3>
 8003adc:	0003      	movs	r3, r0
 8003ade:	009a      	lsls	r2, r3, #2
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2225      	movs	r2, #37	@ 0x25
 8003ae8:	2102      	movs	r1, #2
 8003aea:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4934      	ldr	r1, [pc, #208]	@ (8003bc8 <HAL_DMA_Init+0x110>)
 8003af8:	400a      	ands	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6819      	ldr	r1, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	0018      	movs	r0, r3
 8003b36:	f000 f9c1 	bl	8003ebc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	2380      	movs	r3, #128	@ 0x80
 8003b40:	01db      	lsls	r3, r3, #7
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d102      	bne.n	8003b4c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b54:	213f      	movs	r1, #63	@ 0x3f
 8003b56:	400a      	ands	r2, r1
 8003b58:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003b62:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d011      	beq.n	8003b90 <HAL_DMA_Init+0xd8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d80d      	bhi.n	8003b90 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f000 f9cc 	bl	8003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	e008      	b.n	8003ba2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2225      	movs	r2, #37	@ 0x25
 8003bac:	2101      	movs	r1, #1
 8003bae:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2224      	movs	r2, #36	@ 0x24
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b002      	add	sp, #8
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			@ (mov r8, r8)
 8003bc4:	bffdfff8 	.word	0xbffdfff8
 8003bc8:	ffff800f 	.word	0xffff800f

08003bcc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bda:	2317      	movs	r3, #23
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	2200      	movs	r2, #0
 8003be0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2224      	movs	r2, #36	@ 0x24
 8003be6:	5c9b      	ldrb	r3, [r3, r2]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_DMA_Start_IT+0x24>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e06f      	b.n	8003cd0 <HAL_DMA_Start_IT+0x104>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2224      	movs	r2, #36	@ 0x24
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2225      	movs	r2, #37	@ 0x25
 8003bfc:	5c9b      	ldrb	r3, [r3, r2]
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d157      	bne.n	8003cb4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2225      	movs	r2, #37	@ 0x25
 8003c08:	2102      	movs	r1, #2
 8003c0a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	438a      	bics	r2, r1
 8003c20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	68b9      	ldr	r1, [r7, #8]
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f907 	bl	8003e3c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	210e      	movs	r1, #14
 8003c42:	430a      	orrs	r2, r1
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	e00f      	b.n	8003c68 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2104      	movs	r1, #4
 8003c54:	438a      	bics	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	210a      	movs	r1, #10
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	2380      	movs	r3, #128	@ 0x80
 8003c70:	025b      	lsls	r3, r3, #9
 8003c72:	4013      	ands	r3, r2
 8003c74:	d008      	beq.n	8003c88 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c80:	2180      	movs	r1, #128	@ 0x80
 8003c82:	0049      	lsls	r1, r1, #1
 8003c84:	430a      	orrs	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c9a:	2180      	movs	r1, #128	@ 0x80
 8003c9c:	0049      	lsls	r1, r1, #1
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2101      	movs	r1, #1
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e00a      	b.n	8003cca <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2280      	movs	r2, #128	@ 0x80
 8003cb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2224      	movs	r2, #36	@ 0x24
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003cc2:	2317      	movs	r3, #23
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003cca:	2317      	movs	r3, #23
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	781b      	ldrb	r3, [r3, #0]
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b006      	add	sp, #24
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003ce0:	4b55      	ldr	r3, [pc, #340]	@ (8003e38 <HAL_DMA_IRQHandler+0x160>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	221c      	movs	r2, #28
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	0013      	movs	r3, r2
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d027      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x7a>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2204      	movs	r2, #4
 8003d06:	4013      	ands	r3, r2
 8003d08:	d023      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2220      	movs	r2, #32
 8003d12:	4013      	ands	r3, r2
 8003d14:	d107      	bne.n	8003d26 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2104      	movs	r1, #4
 8003d22:	438a      	bics	r2, r1
 8003d24:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003d26:	4b44      	ldr	r3, [pc, #272]	@ (8003e38 <HAL_DMA_IRQHandler+0x160>)
 8003d28:	6859      	ldr	r1, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	221c      	movs	r2, #28
 8003d30:	4013      	ands	r3, r2
 8003d32:	2204      	movs	r2, #4
 8003d34:	409a      	lsls	r2, r3
 8003d36:	4b40      	ldr	r3, [pc, #256]	@ (8003e38 <HAL_DMA_IRQHandler+0x160>)
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d100      	bne.n	8003d46 <HAL_DMA_IRQHandler+0x6e>
 8003d44:	e073      	b.n	8003e2e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	0010      	movs	r0, r2
 8003d4e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003d50:	e06d      	b.n	8003e2e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	221c      	movs	r2, #28
 8003d58:	4013      	ands	r3, r2
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	409a      	lsls	r2, r3
 8003d5e:	0013      	movs	r3, r2
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4013      	ands	r3, r2
 8003d64:	d02e      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xec>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d02a      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2220      	movs	r2, #32
 8003d76:	4013      	ands	r3, r2
 8003d78:	d10b      	bne.n	8003d92 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	210a      	movs	r1, #10
 8003d86:	438a      	bics	r2, r1
 8003d88:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2225      	movs	r2, #37	@ 0x25
 8003d8e:	2101      	movs	r1, #1
 8003d90:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003d92:	4b29      	ldr	r3, [pc, #164]	@ (8003e38 <HAL_DMA_IRQHandler+0x160>)
 8003d94:	6859      	ldr	r1, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	221c      	movs	r2, #28
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2202      	movs	r2, #2
 8003da0:	409a      	lsls	r2, r3
 8003da2:	4b25      	ldr	r3, [pc, #148]	@ (8003e38 <HAL_DMA_IRQHandler+0x160>)
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2224      	movs	r2, #36	@ 0x24
 8003dac:	2100      	movs	r1, #0
 8003dae:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d03a      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	0010      	movs	r0, r2
 8003dc0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003dc2:	e034      	b.n	8003e2e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	221c      	movs	r2, #28
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2208      	movs	r2, #8
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	0013      	movs	r3, r2
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d02b      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x158>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2208      	movs	r2, #8
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d027      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	210e      	movs	r1, #14
 8003dec:	438a      	bics	r2, r1
 8003dee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003df0:	4b11      	ldr	r3, [pc, #68]	@ (8003e38 <HAL_DMA_IRQHandler+0x160>)
 8003df2:	6859      	ldr	r1, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df8:	221c      	movs	r2, #28
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	4b0d      	ldr	r3, [pc, #52]	@ (8003e38 <HAL_DMA_IRQHandler+0x160>)
 8003e02:	430a      	orrs	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2225      	movs	r2, #37	@ 0x25
 8003e10:	2101      	movs	r1, #1
 8003e12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2224      	movs	r2, #36	@ 0x24
 8003e18:	2100      	movs	r1, #0
 8003e1a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	0010      	movs	r0, r2
 8003e2c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e2e:	46c0      	nop			@ (mov r8, r8)
 8003e30:	46c0      	nop			@ (mov r8, r8)
}
 8003e32:	46bd      	mov	sp, r7
 8003e34:	b004      	add	sp, #16
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40020000 	.word	0x40020000

08003e3c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003e52:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003e64:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003e66:	4b14      	ldr	r3, [pc, #80]	@ (8003eb8 <DMA_SetConfig+0x7c>)
 8003e68:	6859      	ldr	r1, [r3, #4]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	221c      	movs	r2, #28
 8003e70:	4013      	ands	r3, r2
 8003e72:	2201      	movs	r2, #1
 8003e74:	409a      	lsls	r2, r3
 8003e76:	4b10      	ldr	r3, [pc, #64]	@ (8003eb8 <DMA_SetConfig+0x7c>)
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d108      	bne.n	8003e9e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e9c:	e007      	b.n	8003eae <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	60da      	str	r2, [r3, #12]
}
 8003eae:	46c0      	nop			@ (mov r8, r8)
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b004      	add	sp, #16
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	46c0      	nop			@ (mov r8, r8)
 8003eb8:	40020000 	.word	0x40020000

08003ebc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec8:	089b      	lsrs	r3, r3, #2
 8003eca:	4a10      	ldr	r2, [pc, #64]	@ (8003f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003ecc:	4694      	mov	ip, r2
 8003ece:	4463      	add	r3, ip
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	001a      	movs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	001a      	movs	r2, r3
 8003ede:	23ff      	movs	r3, #255	@ 0xff
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	3b08      	subs	r3, #8
 8003ee4:	2114      	movs	r1, #20
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7fc f90c 	bl	8000104 <__udivsi3>
 8003eec:	0003      	movs	r3, r0
 8003eee:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a07      	ldr	r2, [pc, #28]	@ (8003f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003ef4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	221f      	movs	r2, #31
 8003efa:	4013      	ands	r3, r2
 8003efc:	2201      	movs	r2, #1
 8003efe:	409a      	lsls	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003f04:	46c0      	nop			@ (mov r8, r8)
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b004      	add	sp, #16
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	10008200 	.word	0x10008200
 8003f10:	40020880 	.word	0x40020880

08003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	223f      	movs	r2, #63	@ 0x3f
 8003f22:	4013      	ands	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4a0a      	ldr	r2, [pc, #40]	@ (8003f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f2a:	4694      	mov	ip, r2
 8003f2c:	4463      	add	r3, ip
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	001a      	movs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a07      	ldr	r2, [pc, #28]	@ (8003f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	2203      	movs	r2, #3
 8003f42:	4013      	ands	r3, r2
 8003f44:	2201      	movs	r2, #1
 8003f46:	409a      	lsls	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003f4c:	46c0      	nop			@ (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b004      	add	sp, #16
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	1000823f 	.word	0x1000823f
 8003f58:	40020940 	.word	0x40020940

08003f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f6a:	e147      	b.n	80041fc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2101      	movs	r1, #1
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4091      	lsls	r1, r2
 8003f76:	000a      	movs	r2, r1
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d100      	bne.n	8003f84 <HAL_GPIO_Init+0x28>
 8003f82:	e138      	b.n	80041f6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2203      	movs	r2, #3
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d005      	beq.n	8003f9c <HAL_GPIO_Init+0x40>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2203      	movs	r2, #3
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d130      	bne.n	8003ffe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	0013      	movs	r3, r2
 8003fac:	43da      	mvns	r2, r3
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	409a      	lsls	r2, r3
 8003fbe:	0013      	movs	r3, r2
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	409a      	lsls	r2, r3
 8003fd8:	0013      	movs	r3, r2
 8003fda:	43da      	mvns	r2, r3
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	091b      	lsrs	r3, r3, #4
 8003fe8:	2201      	movs	r2, #1
 8003fea:	401a      	ands	r2, r3
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	0013      	movs	r3, r2
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2203      	movs	r2, #3
 8004004:	4013      	ands	r3, r2
 8004006:	2b03      	cmp	r3, #3
 8004008:	d017      	beq.n	800403a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	2203      	movs	r2, #3
 8004016:	409a      	lsls	r2, r3
 8004018:	0013      	movs	r3, r2
 800401a:	43da      	mvns	r2, r3
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4013      	ands	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	409a      	lsls	r2, r3
 800402c:	0013      	movs	r3, r2
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2203      	movs	r2, #3
 8004040:	4013      	ands	r3, r2
 8004042:	2b02      	cmp	r3, #2
 8004044:	d123      	bne.n	800408e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	08da      	lsrs	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3208      	adds	r2, #8
 800404e:	0092      	lsls	r2, r2, #2
 8004050:	58d3      	ldr	r3, [r2, r3]
 8004052:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2207      	movs	r2, #7
 8004058:	4013      	ands	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	220f      	movs	r2, #15
 800405e:	409a      	lsls	r2, r3
 8004060:	0013      	movs	r3, r2
 8004062:	43da      	mvns	r2, r3
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4013      	ands	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2107      	movs	r1, #7
 8004072:	400b      	ands	r3, r1
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	409a      	lsls	r2, r3
 8004078:	0013      	movs	r3, r2
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	08da      	lsrs	r2, r3, #3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3208      	adds	r2, #8
 8004088:	0092      	lsls	r2, r2, #2
 800408a:	6939      	ldr	r1, [r7, #16]
 800408c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	2203      	movs	r2, #3
 800409a:	409a      	lsls	r2, r3
 800409c:	0013      	movs	r3, r2
 800409e:	43da      	mvns	r2, r3
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	4013      	ands	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2203      	movs	r2, #3
 80040ac:	401a      	ands	r2, r3
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	409a      	lsls	r2, r3
 80040b4:	0013      	movs	r3, r2
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	23c0      	movs	r3, #192	@ 0xc0
 80040c8:	029b      	lsls	r3, r3, #10
 80040ca:	4013      	ands	r3, r2
 80040cc:	d100      	bne.n	80040d0 <HAL_GPIO_Init+0x174>
 80040ce:	e092      	b.n	80041f6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80040d0:	4a50      	ldr	r2, [pc, #320]	@ (8004214 <HAL_GPIO_Init+0x2b8>)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	089b      	lsrs	r3, r3, #2
 80040d6:	3318      	adds	r3, #24
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	589b      	ldr	r3, [r3, r2]
 80040dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2203      	movs	r2, #3
 80040e2:	4013      	ands	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	220f      	movs	r2, #15
 80040e8:	409a      	lsls	r2, r3
 80040ea:	0013      	movs	r3, r2
 80040ec:	43da      	mvns	r2, r3
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4013      	ands	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	23a0      	movs	r3, #160	@ 0xa0
 80040f8:	05db      	lsls	r3, r3, #23
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d013      	beq.n	8004126 <HAL_GPIO_Init+0x1ca>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a45      	ldr	r2, [pc, #276]	@ (8004218 <HAL_GPIO_Init+0x2bc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00d      	beq.n	8004122 <HAL_GPIO_Init+0x1c6>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a44      	ldr	r2, [pc, #272]	@ (800421c <HAL_GPIO_Init+0x2c0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d007      	beq.n	800411e <HAL_GPIO_Init+0x1c2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a43      	ldr	r2, [pc, #268]	@ (8004220 <HAL_GPIO_Init+0x2c4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d101      	bne.n	800411a <HAL_GPIO_Init+0x1be>
 8004116:	2303      	movs	r3, #3
 8004118:	e006      	b.n	8004128 <HAL_GPIO_Init+0x1cc>
 800411a:	2305      	movs	r3, #5
 800411c:	e004      	b.n	8004128 <HAL_GPIO_Init+0x1cc>
 800411e:	2302      	movs	r3, #2
 8004120:	e002      	b.n	8004128 <HAL_GPIO_Init+0x1cc>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <HAL_GPIO_Init+0x1cc>
 8004126:	2300      	movs	r3, #0
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	2103      	movs	r1, #3
 800412c:	400a      	ands	r2, r1
 800412e:	00d2      	lsls	r2, r2, #3
 8004130:	4093      	lsls	r3, r2
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004138:	4936      	ldr	r1, [pc, #216]	@ (8004214 <HAL_GPIO_Init+0x2b8>)
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	089b      	lsrs	r3, r3, #2
 800413e:	3318      	adds	r3, #24
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004146:	4b33      	ldr	r3, [pc, #204]	@ (8004214 <HAL_GPIO_Init+0x2b8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	43da      	mvns	r2, r3
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	4013      	ands	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	2380      	movs	r3, #128	@ 0x80
 800415c:	035b      	lsls	r3, r3, #13
 800415e:	4013      	ands	r3, r2
 8004160:	d003      	beq.n	800416a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800416a:	4b2a      	ldr	r3, [pc, #168]	@ (8004214 <HAL_GPIO_Init+0x2b8>)
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004170:	4b28      	ldr	r3, [pc, #160]	@ (8004214 <HAL_GPIO_Init+0x2b8>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	43da      	mvns	r2, r3
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4013      	ands	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	2380      	movs	r3, #128	@ 0x80
 8004186:	039b      	lsls	r3, r3, #14
 8004188:	4013      	ands	r3, r2
 800418a:	d003      	beq.n	8004194 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004194:	4b1f      	ldr	r3, [pc, #124]	@ (8004214 <HAL_GPIO_Init+0x2b8>)
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800419a:	4a1e      	ldr	r2, [pc, #120]	@ (8004214 <HAL_GPIO_Init+0x2b8>)
 800419c:	2384      	movs	r3, #132	@ 0x84
 800419e:	58d3      	ldr	r3, [r2, r3]
 80041a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	43da      	mvns	r2, r3
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	2380      	movs	r3, #128	@ 0x80
 80041b2:	029b      	lsls	r3, r3, #10
 80041b4:	4013      	ands	r3, r2
 80041b6:	d003      	beq.n	80041c0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041c0:	4914      	ldr	r1, [pc, #80]	@ (8004214 <HAL_GPIO_Init+0x2b8>)
 80041c2:	2284      	movs	r2, #132	@ 0x84
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80041c8:	4a12      	ldr	r2, [pc, #72]	@ (8004214 <HAL_GPIO_Init+0x2b8>)
 80041ca:	2380      	movs	r3, #128	@ 0x80
 80041cc:	58d3      	ldr	r3, [r2, r3]
 80041ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	43da      	mvns	r2, r3
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4013      	ands	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	2380      	movs	r3, #128	@ 0x80
 80041e0:	025b      	lsls	r3, r3, #9
 80041e2:	4013      	ands	r3, r2
 80041e4:	d003      	beq.n	80041ee <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041ee:	4909      	ldr	r1, [pc, #36]	@ (8004214 <HAL_GPIO_Init+0x2b8>)
 80041f0:	2280      	movs	r2, #128	@ 0x80
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	3301      	adds	r3, #1
 80041fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	40da      	lsrs	r2, r3
 8004204:	1e13      	subs	r3, r2, #0
 8004206:	d000      	beq.n	800420a <HAL_GPIO_Init+0x2ae>
 8004208:	e6b0      	b.n	8003f6c <HAL_GPIO_Init+0x10>
  }
}
 800420a:	46c0      	nop			@ (mov r8, r8)
 800420c:	46c0      	nop			@ (mov r8, r8)
 800420e:	46bd      	mov	sp, r7
 8004210:	b006      	add	sp, #24
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40021800 	.word	0x40021800
 8004218:	50000400 	.word	0x50000400
 800421c:	50000800 	.word	0x50000800
 8004220:	50000c00 	.word	0x50000c00

08004224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	000a      	movs	r2, r1
 800422e:	1cbb      	adds	r3, r7, #2
 8004230:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	1cba      	adds	r2, r7, #2
 8004238:	8812      	ldrh	r2, [r2, #0]
 800423a:	4013      	ands	r3, r2
 800423c:	d004      	beq.n	8004248 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800423e:	230f      	movs	r3, #15
 8004240:	18fb      	adds	r3, r7, r3
 8004242:	2201      	movs	r2, #1
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	e003      	b.n	8004250 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004248:	230f      	movs	r3, #15
 800424a:	18fb      	adds	r3, r7, r3
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004250:	230f      	movs	r3, #15
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	781b      	ldrb	r3, [r3, #0]
}
 8004256:	0018      	movs	r0, r3
 8004258:	46bd      	mov	sp, r7
 800425a:	b004      	add	sp, #16
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b082      	sub	sp, #8
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	0008      	movs	r0, r1
 8004268:	0011      	movs	r1, r2
 800426a:	1cbb      	adds	r3, r7, #2
 800426c:	1c02      	adds	r2, r0, #0
 800426e:	801a      	strh	r2, [r3, #0]
 8004270:	1c7b      	adds	r3, r7, #1
 8004272:	1c0a      	adds	r2, r1, #0
 8004274:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004276:	1c7b      	adds	r3, r7, #1
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d004      	beq.n	8004288 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800427e:	1cbb      	adds	r3, r7, #2
 8004280:	881a      	ldrh	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004286:	e003      	b.n	8004290 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004288:	1cbb      	adds	r3, r7, #2
 800428a:	881a      	ldrh	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004290:	46c0      	nop			@ (mov r8, r8)
 8004292:	46bd      	mov	sp, r7
 8004294:	b002      	add	sp, #8
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	000a      	movs	r2, r1
 80042a2:	1cbb      	adds	r3, r7, #2
 80042a4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042ac:	1cbb      	adds	r3, r7, #2
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4013      	ands	r3, r2
 80042b4:	041a      	lsls	r2, r3, #16
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	1cb9      	adds	r1, r7, #2
 80042bc:	8809      	ldrh	r1, [r1, #0]
 80042be:	400b      	ands	r3, r1
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	619a      	str	r2, [r3, #24]
}
 80042c6:	46c0      	nop			@ (mov r8, r8)
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b004      	add	sp, #16
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	0002      	movs	r2, r0
 80042d8:	1dbb      	adds	r3, r7, #6
 80042da:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80042dc:	4b10      	ldr	r3, [pc, #64]	@ (8004320 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	1dba      	adds	r2, r7, #6
 80042e2:	8812      	ldrh	r2, [r2, #0]
 80042e4:	4013      	ands	r3, r2
 80042e6:	d008      	beq.n	80042fa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80042e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004320 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80042ea:	1dba      	adds	r2, r7, #6
 80042ec:	8812      	ldrh	r2, [r2, #0]
 80042ee:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80042f0:	1dbb      	adds	r3, r7, #6
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	0018      	movs	r0, r3
 80042f6:	f7fe f8cb 	bl	8002490 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80042fa:	4b09      	ldr	r3, [pc, #36]	@ (8004320 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	1dba      	adds	r2, r7, #6
 8004300:	8812      	ldrh	r2, [r2, #0]
 8004302:	4013      	ands	r3, r2
 8004304:	d008      	beq.n	8004318 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004306:	4b06      	ldr	r3, [pc, #24]	@ (8004320 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004308:	1dba      	adds	r2, r7, #6
 800430a:	8812      	ldrh	r2, [r2, #0]
 800430c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800430e:	1dbb      	adds	r3, r7, #6
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	0018      	movs	r0, r3
 8004314:	f7fe f868 	bl	80023e8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004318:	46c0      	nop			@ (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	b002      	add	sp, #8
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40021800 	.word	0x40021800

08004324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e08f      	b.n	8004456 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2241      	movs	r2, #65	@ 0x41
 800433a:	5c9b      	ldrb	r3, [r3, r2]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d107      	bne.n	8004352 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2240      	movs	r2, #64	@ 0x40
 8004346:	2100      	movs	r1, #0
 8004348:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	0018      	movs	r0, r3
 800434e:	f7fe fef5 	bl	800313c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2241      	movs	r2, #65	@ 0x41
 8004356:	2124      	movs	r1, #36	@ 0x24
 8004358:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2101      	movs	r1, #1
 8004366:	438a      	bics	r2, r1
 8004368:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	493b      	ldr	r1, [pc, #236]	@ (8004460 <HAL_I2C_Init+0x13c>)
 8004374:	400a      	ands	r2, r1
 8004376:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4938      	ldr	r1, [pc, #224]	@ (8004464 <HAL_I2C_Init+0x140>)
 8004384:	400a      	ands	r2, r1
 8004386:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d108      	bne.n	80043a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2180      	movs	r1, #128	@ 0x80
 800439a:	0209      	lsls	r1, r1, #8
 800439c:	430a      	orrs	r2, r1
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	e007      	b.n	80043b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2184      	movs	r1, #132	@ 0x84
 80043ac:	0209      	lsls	r1, r1, #8
 80043ae:	430a      	orrs	r2, r1
 80043b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d109      	bne.n	80043ce <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2180      	movs	r1, #128	@ 0x80
 80043c6:	0109      	lsls	r1, r1, #4
 80043c8:	430a      	orrs	r2, r1
 80043ca:	605a      	str	r2, [r3, #4]
 80043cc:	e007      	b.n	80043de <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4923      	ldr	r1, [pc, #140]	@ (8004468 <HAL_I2C_Init+0x144>)
 80043da:	400a      	ands	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4920      	ldr	r1, [pc, #128]	@ (800446c <HAL_I2C_Init+0x148>)
 80043ea:	430a      	orrs	r2, r1
 80043ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	491a      	ldr	r1, [pc, #104]	@ (8004464 <HAL_I2C_Init+0x140>)
 80043fa:	400a      	ands	r2, r1
 80043fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	431a      	orrs	r2, r3
 8004408:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69d9      	ldr	r1, [r3, #28]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1a      	ldr	r2, [r3, #32]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2101      	movs	r1, #1
 8004434:	430a      	orrs	r2, r1
 8004436:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2241      	movs	r2, #65	@ 0x41
 8004442:	2120      	movs	r1, #32
 8004444:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2242      	movs	r2, #66	@ 0x42
 8004450:	2100      	movs	r1, #0
 8004452:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	0018      	movs	r0, r3
 8004458:	46bd      	mov	sp, r7
 800445a:	b002      	add	sp, #8
 800445c:	bd80      	pop	{r7, pc}
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	f0ffffff 	.word	0xf0ffffff
 8004464:	ffff7fff 	.word	0xffff7fff
 8004468:	fffff7ff 	.word	0xfffff7ff
 800446c:	02008000 	.word	0x02008000

08004470 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004470:	b590      	push	{r4, r7, lr}
 8004472:	b089      	sub	sp, #36	@ 0x24
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	0008      	movs	r0, r1
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	0019      	movs	r1, r3
 800447e:	230a      	movs	r3, #10
 8004480:	18fb      	adds	r3, r7, r3
 8004482:	1c02      	adds	r2, r0, #0
 8004484:	801a      	strh	r2, [r3, #0]
 8004486:	2308      	movs	r3, #8
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	1c0a      	adds	r2, r1, #0
 800448c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2241      	movs	r2, #65	@ 0x41
 8004492:	5c9b      	ldrb	r3, [r3, r2]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b20      	cmp	r3, #32
 8004498:	d000      	beq.n	800449c <HAL_I2C_Master_Transmit+0x2c>
 800449a:	e10a      	b.n	80046b2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2240      	movs	r2, #64	@ 0x40
 80044a0:	5c9b      	ldrb	r3, [r3, r2]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_I2C_Master_Transmit+0x3a>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e104      	b.n	80046b4 <HAL_I2C_Master_Transmit+0x244>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2240      	movs	r2, #64	@ 0x40
 80044ae:	2101      	movs	r1, #1
 80044b0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044b2:	f7ff fa19 	bl	80038e8 <HAL_GetTick>
 80044b6:	0003      	movs	r3, r0
 80044b8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044ba:	2380      	movs	r3, #128	@ 0x80
 80044bc:	0219      	lsls	r1, r3, #8
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	2319      	movs	r3, #25
 80044c6:	2201      	movs	r2, #1
 80044c8:	f000 fa26 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 80044cc:	1e03      	subs	r3, r0, #0
 80044ce:	d001      	beq.n	80044d4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0ef      	b.n	80046b4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2241      	movs	r2, #65	@ 0x41
 80044d8:	2121      	movs	r1, #33	@ 0x21
 80044da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2242      	movs	r2, #66	@ 0x42
 80044e0:	2110      	movs	r1, #16
 80044e2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2208      	movs	r2, #8
 80044f4:	18ba      	adds	r2, r7, r2
 80044f6:	8812      	ldrh	r2, [r2, #0]
 80044f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	2bff      	cmp	r3, #255	@ 0xff
 8004508:	d906      	bls.n	8004518 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	22ff      	movs	r2, #255	@ 0xff
 800450e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004510:	2380      	movs	r3, #128	@ 0x80
 8004512:	045b      	lsls	r3, r3, #17
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	e007      	b.n	8004528 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004522:	2380      	movs	r3, #128	@ 0x80
 8004524:	049b      	lsls	r3, r3, #18
 8004526:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800452c:	2b00      	cmp	r3, #0
 800452e:	d027      	beq.n	8004580 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004534:	781a      	ldrb	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004564:	b2db      	uxtb	r3, r3
 8004566:	3301      	adds	r3, #1
 8004568:	b2da      	uxtb	r2, r3
 800456a:	697c      	ldr	r4, [r7, #20]
 800456c:	230a      	movs	r3, #10
 800456e:	18fb      	adds	r3, r7, r3
 8004570:	8819      	ldrh	r1, [r3, #0]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	4b51      	ldr	r3, [pc, #324]	@ (80046bc <HAL_I2C_Master_Transmit+0x24c>)
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	0023      	movs	r3, r4
 800457a:	f000 fc45 	bl	8004e08 <I2C_TransferConfig>
 800457e:	e06f      	b.n	8004660 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004584:	b2da      	uxtb	r2, r3
 8004586:	697c      	ldr	r4, [r7, #20]
 8004588:	230a      	movs	r3, #10
 800458a:	18fb      	adds	r3, r7, r3
 800458c:	8819      	ldrh	r1, [r3, #0]
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	4b4a      	ldr	r3, [pc, #296]	@ (80046bc <HAL_I2C_Master_Transmit+0x24c>)
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	0023      	movs	r3, r4
 8004596:	f000 fc37 	bl	8004e08 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800459a:	e061      	b.n	8004660 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	0018      	movs	r0, r3
 80045a4:	f000 fa10 	bl	80049c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80045a8:	1e03      	subs	r3, r0, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e081      	b.n	80046b4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b4:	781a      	ldrb	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d03a      	beq.n	8004660 <HAL_I2C_Master_Transmit+0x1f0>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d136      	bne.n	8004660 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	0013      	movs	r3, r2
 80045fc:	2200      	movs	r2, #0
 80045fe:	2180      	movs	r1, #128	@ 0x80
 8004600:	f000 f98a 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8004604:	1e03      	subs	r3, r0, #0
 8004606:	d001      	beq.n	800460c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e053      	b.n	80046b4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004610:	b29b      	uxth	r3, r3
 8004612:	2bff      	cmp	r3, #255	@ 0xff
 8004614:	d911      	bls.n	800463a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	22ff      	movs	r2, #255	@ 0xff
 800461a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004620:	b2da      	uxtb	r2, r3
 8004622:	2380      	movs	r3, #128	@ 0x80
 8004624:	045c      	lsls	r4, r3, #17
 8004626:	230a      	movs	r3, #10
 8004628:	18fb      	adds	r3, r7, r3
 800462a:	8819      	ldrh	r1, [r3, #0]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	2300      	movs	r3, #0
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	0023      	movs	r3, r4
 8004634:	f000 fbe8 	bl	8004e08 <I2C_TransferConfig>
 8004638:	e012      	b.n	8004660 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004648:	b2da      	uxtb	r2, r3
 800464a:	2380      	movs	r3, #128	@ 0x80
 800464c:	049c      	lsls	r4, r3, #18
 800464e:	230a      	movs	r3, #10
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	8819      	ldrh	r1, [r3, #0]
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	2300      	movs	r3, #0
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	0023      	movs	r3, r4
 800465c:	f000 fbd4 	bl	8004e08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d198      	bne.n	800459c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	0018      	movs	r0, r3
 8004672:	f000 f9ef 	bl	8004a54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004676:	1e03      	subs	r3, r0, #0
 8004678:	d001      	beq.n	800467e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e01a      	b.n	80046b4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2220      	movs	r2, #32
 8004684:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	490b      	ldr	r1, [pc, #44]	@ (80046c0 <HAL_I2C_Master_Transmit+0x250>)
 8004692:	400a      	ands	r2, r1
 8004694:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2241      	movs	r2, #65	@ 0x41
 800469a:	2120      	movs	r1, #32
 800469c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2242      	movs	r2, #66	@ 0x42
 80046a2:	2100      	movs	r1, #0
 80046a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2240      	movs	r2, #64	@ 0x40
 80046aa:	2100      	movs	r1, #0
 80046ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	e000      	b.n	80046b4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80046b2:	2302      	movs	r3, #2
  }
}
 80046b4:	0018      	movs	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	b007      	add	sp, #28
 80046ba:	bd90      	pop	{r4, r7, pc}
 80046bc:	80002000 	.word	0x80002000
 80046c0:	fe00e800 	.word	0xfe00e800

080046c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80046c4:	b590      	push	{r4, r7, lr}
 80046c6:	b089      	sub	sp, #36	@ 0x24
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	0008      	movs	r0, r1
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	0019      	movs	r1, r3
 80046d2:	230a      	movs	r3, #10
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	1c02      	adds	r2, r0, #0
 80046d8:	801a      	strh	r2, [r3, #0]
 80046da:	2308      	movs	r3, #8
 80046dc:	18fb      	adds	r3, r7, r3
 80046de:	1c0a      	adds	r2, r1, #0
 80046e0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2241      	movs	r2, #65	@ 0x41
 80046e6:	5c9b      	ldrb	r3, [r3, r2]
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	d000      	beq.n	80046f0 <HAL_I2C_Master_Receive+0x2c>
 80046ee:	e0e8      	b.n	80048c2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2240      	movs	r2, #64	@ 0x40
 80046f4:	5c9b      	ldrb	r3, [r3, r2]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_I2C_Master_Receive+0x3a>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e0e2      	b.n	80048c4 <HAL_I2C_Master_Receive+0x200>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2240      	movs	r2, #64	@ 0x40
 8004702:	2101      	movs	r1, #1
 8004704:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004706:	f7ff f8ef 	bl	80038e8 <HAL_GetTick>
 800470a:	0003      	movs	r3, r0
 800470c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800470e:	2380      	movs	r3, #128	@ 0x80
 8004710:	0219      	lsls	r1, r3, #8
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	2319      	movs	r3, #25
 800471a:	2201      	movs	r2, #1
 800471c:	f000 f8fc 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8004720:	1e03      	subs	r3, r0, #0
 8004722:	d001      	beq.n	8004728 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0cd      	b.n	80048c4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2241      	movs	r2, #65	@ 0x41
 800472c:	2122      	movs	r1, #34	@ 0x22
 800472e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2242      	movs	r2, #66	@ 0x42
 8004734:	2110      	movs	r1, #16
 8004736:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2208      	movs	r2, #8
 8004748:	18ba      	adds	r2, r7, r2
 800474a:	8812      	ldrh	r2, [r2, #0]
 800474c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	2bff      	cmp	r3, #255	@ 0xff
 800475c:	d911      	bls.n	8004782 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	22ff      	movs	r2, #255	@ 0xff
 8004762:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004768:	b2da      	uxtb	r2, r3
 800476a:	2380      	movs	r3, #128	@ 0x80
 800476c:	045c      	lsls	r4, r3, #17
 800476e:	230a      	movs	r3, #10
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	8819      	ldrh	r1, [r3, #0]
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	4b55      	ldr	r3, [pc, #340]	@ (80048cc <HAL_I2C_Master_Receive+0x208>)
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	0023      	movs	r3, r4
 800477c:	f000 fb44 	bl	8004e08 <I2C_TransferConfig>
 8004780:	e076      	b.n	8004870 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004790:	b2da      	uxtb	r2, r3
 8004792:	2380      	movs	r3, #128	@ 0x80
 8004794:	049c      	lsls	r4, r3, #18
 8004796:	230a      	movs	r3, #10
 8004798:	18fb      	adds	r3, r7, r3
 800479a:	8819      	ldrh	r1, [r3, #0]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	4b4b      	ldr	r3, [pc, #300]	@ (80048cc <HAL_I2C_Master_Receive+0x208>)
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	0023      	movs	r3, r4
 80047a4:	f000 fb30 	bl	8004e08 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80047a8:	e062      	b.n	8004870 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f000 f993 	bl	8004adc <I2C_WaitOnRXNEFlagUntilTimeout>
 80047b6:	1e03      	subs	r3, r0, #0
 80047b8:	d001      	beq.n	80047be <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e082      	b.n	80048c4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d03a      	beq.n	8004870 <HAL_I2C_Master_Receive+0x1ac>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d136      	bne.n	8004870 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	0013      	movs	r3, r2
 800480c:	2200      	movs	r2, #0
 800480e:	2180      	movs	r1, #128	@ 0x80
 8004810:	f000 f882 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8004814:	1e03      	subs	r3, r0, #0
 8004816:	d001      	beq.n	800481c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e053      	b.n	80048c4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004820:	b29b      	uxth	r3, r3
 8004822:	2bff      	cmp	r3, #255	@ 0xff
 8004824:	d911      	bls.n	800484a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	22ff      	movs	r2, #255	@ 0xff
 800482a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004830:	b2da      	uxtb	r2, r3
 8004832:	2380      	movs	r3, #128	@ 0x80
 8004834:	045c      	lsls	r4, r3, #17
 8004836:	230a      	movs	r3, #10
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	8819      	ldrh	r1, [r3, #0]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	2300      	movs	r3, #0
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	0023      	movs	r3, r4
 8004844:	f000 fae0 	bl	8004e08 <I2C_TransferConfig>
 8004848:	e012      	b.n	8004870 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004858:	b2da      	uxtb	r2, r3
 800485a:	2380      	movs	r3, #128	@ 0x80
 800485c:	049c      	lsls	r4, r3, #18
 800485e:	230a      	movs	r3, #10
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	8819      	ldrh	r1, [r3, #0]
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	2300      	movs	r3, #0
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	0023      	movs	r3, r4
 800486c:	f000 facc 	bl	8004e08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d197      	bne.n	80047aa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	0018      	movs	r0, r3
 8004882:	f000 f8e7 	bl	8004a54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004886:	1e03      	subs	r3, r0, #0
 8004888:	d001      	beq.n	800488e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e01a      	b.n	80048c4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2220      	movs	r2, #32
 8004894:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	490b      	ldr	r1, [pc, #44]	@ (80048d0 <HAL_I2C_Master_Receive+0x20c>)
 80048a2:	400a      	ands	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2241      	movs	r2, #65	@ 0x41
 80048aa:	2120      	movs	r1, #32
 80048ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2242      	movs	r2, #66	@ 0x42
 80048b2:	2100      	movs	r1, #0
 80048b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2240      	movs	r2, #64	@ 0x40
 80048ba:	2100      	movs	r1, #0
 80048bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	e000      	b.n	80048c4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80048c2:	2302      	movs	r3, #2
  }
}
 80048c4:	0018      	movs	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b007      	add	sp, #28
 80048ca:	bd90      	pop	{r4, r7, pc}
 80048cc:	80002400 	.word	0x80002400
 80048d0:	fe00e800 	.word	0xfe00e800

080048d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2202      	movs	r2, #2
 80048e4:	4013      	ands	r3, r2
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d103      	bne.n	80048f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2200      	movs	r2, #0
 80048f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	2201      	movs	r2, #1
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d007      	beq.n	8004910 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699a      	ldr	r2, [r3, #24]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2101      	movs	r1, #1
 800490c:	430a      	orrs	r2, r1
 800490e:	619a      	str	r2, [r3, #24]
  }
}
 8004910:	46c0      	nop			@ (mov r8, r8)
 8004912:	46bd      	mov	sp, r7
 8004914:	b002      	add	sp, #8
 8004916:	bd80      	pop	{r7, pc}

08004918 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	1dfb      	adds	r3, r7, #7
 8004926:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004928:	e03a      	b.n	80049a0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	6839      	ldr	r1, [r7, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	0018      	movs	r0, r3
 8004932:	f000 f971 	bl	8004c18 <I2C_IsErrorOccurred>
 8004936:	1e03      	subs	r3, r0, #0
 8004938:	d001      	beq.n	800493e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e040      	b.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	3301      	adds	r3, #1
 8004942:	d02d      	beq.n	80049a0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004944:	f7fe ffd0 	bl	80038e8 <HAL_GetTick>
 8004948:	0002      	movs	r2, r0
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d302      	bcc.n	800495a <I2C_WaitOnFlagUntilTimeout+0x42>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d122      	bne.n	80049a0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	4013      	ands	r3, r2
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	425a      	negs	r2, r3
 800496a:	4153      	adcs	r3, r2
 800496c:	b2db      	uxtb	r3, r3
 800496e:	001a      	movs	r2, r3
 8004970:	1dfb      	adds	r3, r7, #7
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d113      	bne.n	80049a0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497c:	2220      	movs	r2, #32
 800497e:	431a      	orrs	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2241      	movs	r2, #65	@ 0x41
 8004988:	2120      	movs	r1, #32
 800498a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2242      	movs	r2, #66	@ 0x42
 8004990:	2100      	movs	r1, #0
 8004992:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2240      	movs	r2, #64	@ 0x40
 8004998:	2100      	movs	r1, #0
 800499a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e00f      	b.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	4013      	ands	r3, r2
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	425a      	negs	r2, r3
 80049b0:	4153      	adcs	r3, r2
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	001a      	movs	r2, r3
 80049b6:	1dfb      	adds	r3, r7, #7
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d0b5      	beq.n	800492a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	0018      	movs	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b004      	add	sp, #16
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049d4:	e032      	b.n	8004a3c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	0018      	movs	r0, r3
 80049de:	f000 f91b 	bl	8004c18 <I2C_IsErrorOccurred>
 80049e2:	1e03      	subs	r3, r0, #0
 80049e4:	d001      	beq.n	80049ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e030      	b.n	8004a4c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	3301      	adds	r3, #1
 80049ee:	d025      	beq.n	8004a3c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f0:	f7fe ff7a 	bl	80038e8 <HAL_GetTick>
 80049f4:	0002      	movs	r2, r0
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d302      	bcc.n	8004a06 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d11a      	bne.n	8004a3c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d013      	beq.n	8004a3c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a18:	2220      	movs	r2, #32
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2241      	movs	r2, #65	@ 0x41
 8004a24:	2120      	movs	r1, #32
 8004a26:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2242      	movs	r2, #66	@ 0x42
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2240      	movs	r2, #64	@ 0x40
 8004a34:	2100      	movs	r1, #0
 8004a36:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e007      	b.n	8004a4c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	2202      	movs	r2, #2
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d1c5      	bne.n	80049d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	b004      	add	sp, #16
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a60:	e02f      	b.n	8004ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	68b9      	ldr	r1, [r7, #8]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f000 f8d5 	bl	8004c18 <I2C_IsErrorOccurred>
 8004a6e:	1e03      	subs	r3, r0, #0
 8004a70:	d001      	beq.n	8004a76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e02d      	b.n	8004ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a76:	f7fe ff37 	bl	80038e8 <HAL_GetTick>
 8004a7a:	0002      	movs	r2, r0
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d302      	bcc.n	8004a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d11a      	bne.n	8004ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	2220      	movs	r2, #32
 8004a94:	4013      	ands	r3, r2
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d013      	beq.n	8004ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2241      	movs	r2, #65	@ 0x41
 8004aaa:	2120      	movs	r1, #32
 8004aac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2242      	movs	r2, #66	@ 0x42
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2240      	movs	r2, #64	@ 0x40
 8004aba:	2100      	movs	r1, #0
 8004abc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e007      	b.n	8004ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d1c8      	bne.n	8004a62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b004      	add	sp, #16
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae8:	2317      	movs	r3, #23
 8004aea:	18fb      	adds	r3, r7, r3
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004af0:	e07b      	b.n	8004bea <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	0018      	movs	r0, r3
 8004afa:	f000 f88d 	bl	8004c18 <I2C_IsErrorOccurred>
 8004afe:	1e03      	subs	r3, r0, #0
 8004b00:	d003      	beq.n	8004b0a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004b02:	2317      	movs	r3, #23
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	2201      	movs	r2, #1
 8004b08:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	2220      	movs	r2, #32
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d140      	bne.n	8004b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004b18:	2117      	movs	r1, #23
 8004b1a:	187b      	adds	r3, r7, r1
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d13b      	bne.n	8004b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2204      	movs	r2, #4
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d106      	bne.n	8004b3e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004b38:	187b      	adds	r3, r7, r1
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	2210      	movs	r2, #16
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	d123      	bne.n	8004b94 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2210      	movs	r2, #16
 8004b52:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2204      	movs	r2, #4
 8004b58:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4929      	ldr	r1, [pc, #164]	@ (8004c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004b6e:	400a      	ands	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2241      	movs	r2, #65	@ 0x41
 8004b76:	2120      	movs	r1, #32
 8004b78:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2242      	movs	r2, #66	@ 0x42
 8004b7e:	2100      	movs	r1, #0
 8004b80:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2240      	movs	r2, #64	@ 0x40
 8004b86:	2100      	movs	r1, #0
 8004b88:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004b8a:	2317      	movs	r3, #23
 8004b8c:	18fb      	adds	r3, r7, r3
 8004b8e:	2201      	movs	r2, #1
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	e002      	b.n	8004b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004b9a:	f7fe fea5 	bl	80038e8 <HAL_GetTick>
 8004b9e:	0002      	movs	r2, r0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d302      	bcc.n	8004bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d11c      	bne.n	8004bea <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004bb0:	2017      	movs	r0, #23
 8004bb2:	183b      	adds	r3, r7, r0
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d117      	bne.n	8004bea <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	2204      	movs	r2, #4
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d010      	beq.n	8004bea <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bcc:	2220      	movs	r2, #32
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2241      	movs	r2, #65	@ 0x41
 8004bd8:	2120      	movs	r1, #32
 8004bda:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2240      	movs	r2, #64	@ 0x40
 8004be0:	2100      	movs	r1, #0
 8004be2:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004be4:	183b      	adds	r3, r7, r0
 8004be6:	2201      	movs	r2, #1
 8004be8:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	2204      	movs	r2, #4
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d005      	beq.n	8004c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004bf8:	2317      	movs	r3, #23
 8004bfa:	18fb      	adds	r3, r7, r3
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d100      	bne.n	8004c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004c02:	e776      	b.n	8004af2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004c04:	2317      	movs	r3, #23
 8004c06:	18fb      	adds	r3, r7, r3
 8004c08:	781b      	ldrb	r3, [r3, #0]
}
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b006      	add	sp, #24
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	46c0      	nop			@ (mov r8, r8)
 8004c14:	fe00e800 	.word	0xfe00e800

08004c18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08a      	sub	sp, #40	@ 0x28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c24:	2327      	movs	r3, #39	@ 0x27
 8004c26:	18fb      	adds	r3, r7, r3
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	2210      	movs	r2, #16
 8004c40:	4013      	ands	r3, r2
 8004c42:	d100      	bne.n	8004c46 <I2C_IsErrorOccurred+0x2e>
 8004c44:	e079      	b.n	8004d3a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2210      	movs	r2, #16
 8004c4c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c4e:	e057      	b.n	8004d00 <I2C_IsErrorOccurred+0xe8>
 8004c50:	2227      	movs	r2, #39	@ 0x27
 8004c52:	18bb      	adds	r3, r7, r2
 8004c54:	18ba      	adds	r2, r7, r2
 8004c56:	7812      	ldrb	r2, [r2, #0]
 8004c58:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	d04f      	beq.n	8004d00 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c60:	f7fe fe42 	bl	80038e8 <HAL_GetTick>
 8004c64:	0002      	movs	r2, r0
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d302      	bcc.n	8004c76 <I2C_IsErrorOccurred+0x5e>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d144      	bne.n	8004d00 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	2380      	movs	r3, #128	@ 0x80
 8004c7e:	01db      	lsls	r3, r3, #7
 8004c80:	4013      	ands	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004c84:	2013      	movs	r0, #19
 8004c86:	183b      	adds	r3, r7, r0
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	2142      	movs	r1, #66	@ 0x42
 8004c8c:	5c52      	ldrb	r2, [r2, r1]
 8004c8e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	2380      	movs	r3, #128	@ 0x80
 8004c98:	021b      	lsls	r3, r3, #8
 8004c9a:	401a      	ands	r2, r3
 8004c9c:	2380      	movs	r3, #128	@ 0x80
 8004c9e:	021b      	lsls	r3, r3, #8
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d126      	bne.n	8004cf2 <I2C_IsErrorOccurred+0xda>
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	2380      	movs	r3, #128	@ 0x80
 8004ca8:	01db      	lsls	r3, r3, #7
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d021      	beq.n	8004cf2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004cae:	183b      	adds	r3, r7, r0
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d01d      	beq.n	8004cf2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2180      	movs	r1, #128	@ 0x80
 8004cc2:	01c9      	lsls	r1, r1, #7
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004cc8:	f7fe fe0e 	bl	80038e8 <HAL_GetTick>
 8004ccc:	0003      	movs	r3, r0
 8004cce:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cd0:	e00f      	b.n	8004cf2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004cd2:	f7fe fe09 	bl	80038e8 <HAL_GetTick>
 8004cd6:	0002      	movs	r2, r0
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b19      	cmp	r3, #25
 8004cde:	d908      	bls.n	8004cf2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004ce8:	2327      	movs	r3, #39	@ 0x27
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	2201      	movs	r2, #1
 8004cee:	701a      	strb	r2, [r3, #0]

              break;
 8004cf0:	e006      	b.n	8004d00 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d1e8      	bne.n	8004cd2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2220      	movs	r2, #32
 8004d08:	4013      	ands	r3, r2
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d004      	beq.n	8004d18 <I2C_IsErrorOccurred+0x100>
 8004d0e:	2327      	movs	r3, #39	@ 0x27
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d09b      	beq.n	8004c50 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d18:	2327      	movs	r3, #39	@ 0x27
 8004d1a:	18fb      	adds	r3, r7, r3
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d103      	bne.n	8004d2a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2220      	movs	r2, #32
 8004d28:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	2204      	movs	r2, #4
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d32:	2327      	movs	r3, #39	@ 0x27
 8004d34:	18fb      	adds	r3, r7, r3
 8004d36:	2201      	movs	r2, #1
 8004d38:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	2380      	movs	r3, #128	@ 0x80
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d00c      	beq.n	8004d66 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	4313      	orrs	r3, r2
 8004d52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2280      	movs	r2, #128	@ 0x80
 8004d5a:	0052      	lsls	r2, r2, #1
 8004d5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d5e:	2327      	movs	r3, #39	@ 0x27
 8004d60:	18fb      	adds	r3, r7, r3
 8004d62:	2201      	movs	r2, #1
 8004d64:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	2380      	movs	r3, #128	@ 0x80
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	d00c      	beq.n	8004d8a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	2208      	movs	r2, #8
 8004d74:	4313      	orrs	r3, r2
 8004d76:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2280      	movs	r2, #128	@ 0x80
 8004d7e:	00d2      	lsls	r2, r2, #3
 8004d80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d82:	2327      	movs	r3, #39	@ 0x27
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	2201      	movs	r2, #1
 8004d88:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	2380      	movs	r3, #128	@ 0x80
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4013      	ands	r3, r2
 8004d92:	d00c      	beq.n	8004dae <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	2202      	movs	r2, #2
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2280      	movs	r2, #128	@ 0x80
 8004da2:	0092      	lsls	r2, r2, #2
 8004da4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004da6:	2327      	movs	r3, #39	@ 0x27
 8004da8:	18fb      	adds	r3, r7, r3
 8004daa:	2201      	movs	r2, #1
 8004dac:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004dae:	2327      	movs	r3, #39	@ 0x27
 8004db0:	18fb      	adds	r3, r7, r3
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01d      	beq.n	8004df4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f7ff fd8a 	bl	80048d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	490e      	ldr	r1, [pc, #56]	@ (8004e04 <I2C_IsErrorOccurred+0x1ec>)
 8004dcc:	400a      	ands	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2241      	movs	r2, #65	@ 0x41
 8004de0:	2120      	movs	r1, #32
 8004de2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2242      	movs	r2, #66	@ 0x42
 8004de8:	2100      	movs	r1, #0
 8004dea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2240      	movs	r2, #64	@ 0x40
 8004df0:	2100      	movs	r1, #0
 8004df2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004df4:	2327      	movs	r3, #39	@ 0x27
 8004df6:	18fb      	adds	r3, r7, r3
 8004df8:	781b      	ldrb	r3, [r3, #0]
}
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	b00a      	add	sp, #40	@ 0x28
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	fe00e800 	.word	0xfe00e800

08004e08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e08:	b590      	push	{r4, r7, lr}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	0008      	movs	r0, r1
 8004e12:	0011      	movs	r1, r2
 8004e14:	607b      	str	r3, [r7, #4]
 8004e16:	240a      	movs	r4, #10
 8004e18:	193b      	adds	r3, r7, r4
 8004e1a:	1c02      	adds	r2, r0, #0
 8004e1c:	801a      	strh	r2, [r3, #0]
 8004e1e:	2009      	movs	r0, #9
 8004e20:	183b      	adds	r3, r7, r0
 8004e22:	1c0a      	adds	r2, r1, #0
 8004e24:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e26:	193b      	adds	r3, r7, r4
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	059b      	lsls	r3, r3, #22
 8004e2c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e2e:	183b      	adds	r3, r7, r0
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	0419      	lsls	r1, r3, #16
 8004e34:	23ff      	movs	r3, #255	@ 0xff
 8004e36:	041b      	lsls	r3, r3, #16
 8004e38:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e3a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e42:	4313      	orrs	r3, r2
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	085b      	lsrs	r3, r3, #1
 8004e48:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e52:	0d51      	lsrs	r1, r2, #21
 8004e54:	2280      	movs	r2, #128	@ 0x80
 8004e56:	00d2      	lsls	r2, r2, #3
 8004e58:	400a      	ands	r2, r1
 8004e5a:	4907      	ldr	r1, [pc, #28]	@ (8004e78 <I2C_TransferConfig+0x70>)
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	43d2      	mvns	r2, r2
 8004e60:	401a      	ands	r2, r3
 8004e62:	0011      	movs	r1, r2
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e6e:	46c0      	nop			@ (mov r8, r8)
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b007      	add	sp, #28
 8004e74:	bd90      	pop	{r4, r7, pc}
 8004e76:	46c0      	nop			@ (mov r8, r8)
 8004e78:	03ff63ff 	.word	0x03ff63ff

08004e7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2241      	movs	r2, #65	@ 0x41
 8004e8a:	5c9b      	ldrb	r3, [r3, r2]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d138      	bne.n	8004f04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2240      	movs	r2, #64	@ 0x40
 8004e96:	5c9b      	ldrb	r3, [r3, r2]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e032      	b.n	8004f06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2240      	movs	r2, #64	@ 0x40
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2241      	movs	r2, #65	@ 0x41
 8004eac:	2124      	movs	r1, #36	@ 0x24
 8004eae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2101      	movs	r1, #1
 8004ebc:	438a      	bics	r2, r1
 8004ebe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4911      	ldr	r1, [pc, #68]	@ (8004f10 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004ecc:	400a      	ands	r2, r1
 8004ece:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6819      	ldr	r1, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2101      	movs	r1, #1
 8004eec:	430a      	orrs	r2, r1
 8004eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2241      	movs	r2, #65	@ 0x41
 8004ef4:	2120      	movs	r1, #32
 8004ef6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2240      	movs	r2, #64	@ 0x40
 8004efc:	2100      	movs	r1, #0
 8004efe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	e000      	b.n	8004f06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f04:	2302      	movs	r3, #2
  }
}
 8004f06:	0018      	movs	r0, r3
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b002      	add	sp, #8
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	46c0      	nop			@ (mov r8, r8)
 8004f10:	ffffefff 	.word	0xffffefff

08004f14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2241      	movs	r2, #65	@ 0x41
 8004f22:	5c9b      	ldrb	r3, [r3, r2]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b20      	cmp	r3, #32
 8004f28:	d139      	bne.n	8004f9e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2240      	movs	r2, #64	@ 0x40
 8004f2e:	5c9b      	ldrb	r3, [r3, r2]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e033      	b.n	8004fa0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2240      	movs	r2, #64	@ 0x40
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2241      	movs	r2, #65	@ 0x41
 8004f44:	2124      	movs	r1, #36	@ 0x24
 8004f46:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2101      	movs	r1, #1
 8004f54:	438a      	bics	r2, r1
 8004f56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a11      	ldr	r2, [pc, #68]	@ (8004fa8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2101      	movs	r1, #1
 8004f86:	430a      	orrs	r2, r1
 8004f88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2241      	movs	r2, #65	@ 0x41
 8004f8e:	2120      	movs	r1, #32
 8004f90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2240      	movs	r2, #64	@ 0x40
 8004f96:	2100      	movs	r1, #0
 8004f98:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	e000      	b.n	8004fa0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f9e:	2302      	movs	r3, #2
  }
}
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	b004      	add	sp, #16
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	fffff0ff 	.word	0xfffff0ff

08004fac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e0e5      	b.n	800518a <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2235      	movs	r2, #53	@ 0x35
 8004fc2:	5c9b      	ldrb	r3, [r3, r2]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d107      	bne.n	8004fda <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2234      	movs	r2, #52	@ 0x34
 8004fce:	2100      	movs	r1, #0
 8004fd0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f7fe f913 	bl	8003200 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2235      	movs	r2, #53	@ 0x35
 8004fde:	2102      	movs	r1, #2
 8004fe0:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69da      	ldr	r2, [r3, #28]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4969      	ldr	r1, [pc, #420]	@ (8005194 <HAL_I2S_Init+0x1e8>)
 8004fee:	400a      	ands	r2, r1
 8004ff0:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d100      	bne.n	8005004 <HAL_I2S_Init+0x58>
 8005002:	e076      	b.n	80050f2 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d102      	bne.n	8005012 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800500c:	2310      	movs	r3, #16
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	e001      	b.n	8005016 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005012:	2320      	movs	r3, #32
 8005014:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2b20      	cmp	r3, #32
 800501c:	d802      	bhi.n	8005024 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8005024:	2380      	movs	r3, #128	@ 0x80
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	0018      	movs	r0, r3
 800502a:	f001 f999 	bl	8006360 <HAL_RCCEx_GetPeriphCLKFreq>
 800502e:	0003      	movs	r3, r0
 8005030:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	2380      	movs	r3, #128	@ 0x80
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	429a      	cmp	r2, r3
 800503c:	d131      	bne.n	80050a2 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d016      	beq.n	8005074 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	0019      	movs	r1, r3
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f7fb f859 	bl	8000104 <__udivsi3>
 8005052:	0003      	movs	r3, r0
 8005054:	001a      	movs	r2, r3
 8005056:	0013      	movs	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	189b      	adds	r3, r3, r2
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	001a      	movs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	0019      	movs	r1, r3
 8005066:	0010      	movs	r0, r2
 8005068:	f7fb f84c 	bl	8000104 <__udivsi3>
 800506c:	0003      	movs	r3, r0
 800506e:	3305      	adds	r3, #5
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	e02a      	b.n	80050ca <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	0019      	movs	r1, r3
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f7fb f842 	bl	8000104 <__udivsi3>
 8005080:	0003      	movs	r3, r0
 8005082:	001a      	movs	r2, r3
 8005084:	0013      	movs	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	189b      	adds	r3, r3, r2
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	001a      	movs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	0019      	movs	r1, r3
 8005094:	0010      	movs	r0, r2
 8005096:	f7fb f835 	bl	8000104 <__udivsi3>
 800509a:	0003      	movs	r3, r0
 800509c:	3305      	adds	r3, #5
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	e013      	b.n	80050ca <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050a2:	6979      	ldr	r1, [r7, #20]
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f7fb f82d 	bl	8000104 <__udivsi3>
 80050aa:	0003      	movs	r3, r0
 80050ac:	001a      	movs	r2, r3
 80050ae:	0013      	movs	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	189b      	adds	r3, r3, r2
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	001a      	movs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	0019      	movs	r1, r3
 80050be:	0010      	movs	r0, r2
 80050c0:	f7fb f820 	bl	8000104 <__udivsi3>
 80050c4:	0003      	movs	r3, r0
 80050c6:	3305      	adds	r3, #5
 80050c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	210a      	movs	r1, #10
 80050ce:	0018      	movs	r0, r3
 80050d0:	f7fb f818 	bl	8000104 <__udivsi3>
 80050d4:	0003      	movs	r3, r0
 80050d6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2201      	movs	r2, #1
 80050dc:	4013      	ands	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	085b      	lsrs	r3, r3, #1
 80050e8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	e003      	b.n	80050fa <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80050f2:	2302      	movs	r3, #2
 80050f4:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d902      	bls.n	8005106 <HAL_I2S_Init+0x15a>
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	2bff      	cmp	r3, #255	@ 0xff
 8005104:	d907      	bls.n	8005116 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800510a:	2210      	movs	r2, #16
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e039      	b.n	800518a <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	431a      	orrs	r2, r3
 800511e:	0011      	movs	r1, r2
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	430a      	orrs	r2, r1
 8005128:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	4a18      	ldr	r2, [pc, #96]	@ (8005194 <HAL_I2S_Init+0x1e8>)
 8005132:	401a      	ands	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6859      	ldr	r1, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	4319      	orrs	r1, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	4319      	orrs	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	430b      	orrs	r3, r1
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2180      	movs	r1, #128	@ 0x80
 8005152:	0109      	lsls	r1, r1, #4
 8005154:	430a      	orrs	r2, r1
 8005156:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b30      	cmp	r3, #48	@ 0x30
 800515e:	d003      	beq.n	8005168 <HAL_I2S_Init+0x1bc>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	2bb0      	cmp	r3, #176	@ 0xb0
 8005166:	d108      	bne.n	800517a <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69da      	ldr	r2, [r3, #28]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2180      	movs	r1, #128	@ 0x80
 8005174:	0149      	lsls	r1, r1, #5
 8005176:	430a      	orrs	r2, r1
 8005178:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2235      	movs	r2, #53	@ 0x35
 8005184:	2101      	movs	r1, #1
 8005186:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	0018      	movs	r0, r3
 800518c:	46bd      	mov	sp, r7
 800518e:	b008      	add	sp, #32
 8005190:	bd80      	pop	{r7, pc}
 8005192:	46c0      	nop			@ (mov r8, r8)
 8005194:	fffff040 	.word	0xfffff040

08005198 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	1dbb      	adds	r3, r7, #6
 80051a6:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_I2S_Transmit+0x1e>
 80051ae:	1dbb      	adds	r3, r7, #6
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_I2S_Transmit+0x22>
  {
    return  HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e0e2      	b.n	8005380 <HAL_I2S_Transmit+0x1e8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2234      	movs	r2, #52	@ 0x34
 80051be:	5c9b      	ldrb	r3, [r3, r2]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_I2S_Transmit+0x32>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e0da      	b.n	8005380 <HAL_I2S_Transmit+0x1e8>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2234      	movs	r2, #52	@ 0x34
 80051ce:	2101      	movs	r1, #1
 80051d0:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2235      	movs	r2, #53	@ 0x35
 80051d6:	5c9b      	ldrb	r3, [r3, r2]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d005      	beq.n	80051ea <HAL_I2S_Transmit+0x52>
  {
    __HAL_UNLOCK(hi2s);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2234      	movs	r2, #52	@ 0x34
 80051e2:	2100      	movs	r1, #0
 80051e4:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80051e6:	2302      	movs	r3, #2
 80051e8:	e0ca      	b.n	8005380 <HAL_I2S_Transmit+0x1e8>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2235      	movs	r2, #53	@ 0x35
 80051ee:	2103      	movs	r1, #3
 80051f0:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	2207      	movs	r2, #7
 8005206:	4013      	ands	r3, r2
 8005208:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b03      	cmp	r3, #3
 800520e:	d002      	beq.n	8005216 <HAL_I2S_Transmit+0x7e>
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2b05      	cmp	r3, #5
 8005214:	d10c      	bne.n	8005230 <HAL_I2S_Transmit+0x98>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005216:	1dbb      	adds	r3, r7, #6
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	18db      	adds	r3, r3, r3
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8005222:	1dbb      	adds	r3, r7, #6
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	18db      	adds	r3, r3, r3
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	845a      	strh	r2, [r3, #34]	@ 0x22
 800522e:	e007      	b.n	8005240 <HAL_I2S_Transmit+0xa8>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	1dba      	adds	r2, r7, #6
 8005234:	8812      	ldrh	r2, [r2, #0]
 8005236:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	1dba      	adds	r2, r7, #6
 800523c:	8812      	ldrh	r2, [r2, #0]
 800523e:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	69da      	ldr	r2, [r3, #28]
 800524e:	2380      	movs	r3, #128	@ 0x80
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	401a      	ands	r2, r3
 8005254:	2380      	movs	r3, #128	@ 0x80
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	429a      	cmp	r2, r3
 800525a:	d008      	beq.n	800526e <HAL_I2S_Transmit+0xd6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	69da      	ldr	r2, [r3, #28]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2180      	movs	r1, #128	@ 0x80
 8005268:	00c9      	lsls	r1, r1, #3
 800526a:	430a      	orrs	r2, r1
 800526c:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	2201      	movs	r2, #1
 8005274:	2102      	movs	r1, #2
 8005276:	f000 f993 	bl	80055a0 <I2S_WaitFlagStateUntilTimeout>
 800527a:	1e03      	subs	r3, r0, #0
 800527c:	d04d      	beq.n	800531a <HAL_I2S_Transmit+0x182>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005282:	2201      	movs	r2, #1
 8005284:	431a      	orrs	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2235      	movs	r2, #53	@ 0x35
 800528e:	2101      	movs	r1, #1
 8005290:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2s);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2234      	movs	r2, #52	@ 0x34
 8005296:	2100      	movs	r1, #0
 8005298:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e070      	b.n	8005380 <HAL_I2S_Transmit+0x1e8>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	881a      	ldrh	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	1c9a      	adds	r2, r3, #2
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	845a      	strh	r2, [r3, #34]	@ 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	2201      	movs	r2, #1
 80052c8:	2102      	movs	r1, #2
 80052ca:	f000 f969 	bl	80055a0 <I2S_WaitFlagStateUntilTimeout>
 80052ce:	1e03      	subs	r3, r0, #0
 80052d0:	d00f      	beq.n	80052f2 <HAL_I2S_Transmit+0x15a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d6:	2201      	movs	r2, #1
 80052d8:	431a      	orrs	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2235      	movs	r2, #53	@ 0x35
 80052e2:	2101      	movs	r1, #1
 80052e4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2s);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2234      	movs	r2, #52	@ 0x34
 80052ea:	2100      	movs	r1, #0
 80052ec:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e046      	b.n	8005380 <HAL_I2S_Transmit+0x1e8>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2208      	movs	r2, #8
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d10c      	bne.n	800531a <HAL_I2S_Transmit+0x182>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005300:	2300      	movs	r3, #0
 8005302:	613b      	str	r3, [r7, #16]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005312:	2204      	movs	r2, #4
 8005314:	431a      	orrs	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	639a      	str	r2, [r3, #56]	@ 0x38
  while (hi2s->TxXferCount > 0U)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1bc      	bne.n	800529e <HAL_I2S_Transmit+0x106>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	23c0      	movs	r3, #192	@ 0xc0
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4013      	ands	r3, r2
 800532c:	d007      	beq.n	800533e <HAL_I2S_Transmit+0x1a6>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	23c0      	movs	r3, #192	@ 0xc0
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	401a      	ands	r2, r3
 8005336:	2380      	movs	r3, #128	@ 0x80
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	429a      	cmp	r2, r3
 800533c:	d117      	bne.n	800536e <HAL_I2S_Transmit+0x1d6>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	2180      	movs	r1, #128	@ 0x80
 8005346:	f000 f92b 	bl	80055a0 <I2S_WaitFlagStateUntilTimeout>
 800534a:	1e03      	subs	r3, r0, #0
 800534c:	d00f      	beq.n	800536e <HAL_I2S_Transmit+0x1d6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005352:	2201      	movs	r2, #1
 8005354:	431a      	orrs	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2235      	movs	r2, #53	@ 0x35
 800535e:	2101      	movs	r1, #1
 8005360:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2s);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2234      	movs	r2, #52	@ 0x34
 8005366:	2100      	movs	r1, #0
 8005368:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e008      	b.n	8005380 <HAL_I2S_Transmit+0x1e8>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2235      	movs	r2, #53	@ 0x35
 8005372:	2101      	movs	r1, #1
 8005374:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hi2s);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2234      	movs	r2, #52	@ 0x34
 800537a:	2100      	movs	r1, #0
 800537c:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	0018      	movs	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	b006      	add	sp, #24
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	1dbb      	adds	r3, r7, #6
 8005394:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_I2S_Transmit_DMA+0x1c>
 800539c:	1dbb      	adds	r3, r7, #6
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e091      	b.n	80054cc <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2234      	movs	r2, #52	@ 0x34
 80053ac:	5c9b      	ldrb	r3, [r3, r2]
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_I2S_Transmit_DMA+0x30>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e089      	b.n	80054cc <HAL_I2S_Transmit_DMA+0x144>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2234      	movs	r2, #52	@ 0x34
 80053bc:	2101      	movs	r1, #1
 80053be:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2235      	movs	r2, #53	@ 0x35
 80053c4:	5c9b      	ldrb	r3, [r3, r2]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d005      	beq.n	80053d8 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2234      	movs	r2, #52	@ 0x34
 80053d0:	2100      	movs	r1, #0
 80053d2:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80053d4:	2302      	movs	r3, #2
 80053d6:	e079      	b.n	80054cc <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2235      	movs	r2, #53	@ 0x35
 80053dc:	2103      	movs	r1, #3
 80053de:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	2207      	movs	r2, #7
 80053f4:	4013      	ands	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d002      	beq.n	8005404 <HAL_I2S_Transmit_DMA+0x7c>
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b05      	cmp	r3, #5
 8005402:	d10c      	bne.n	800541e <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005404:	1dbb      	adds	r3, r7, #6
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	18db      	adds	r3, r3, r3
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8005410:	1dbb      	adds	r3, r7, #6
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	18db      	adds	r3, r3, r3
 8005416:	b29a      	uxth	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	845a      	strh	r2, [r3, #34]	@ 0x22
 800541c:	e007      	b.n	800542e <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1dba      	adds	r2, r7, #6
 8005422:	8812      	ldrh	r2, [r2, #0]
 8005424:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1dba      	adds	r2, r7, #6
 800542a:	8812      	ldrh	r2, [r2, #0]
 800542c:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005432:	4a28      	ldr	r2, [pc, #160]	@ (80054d4 <HAL_I2S_Transmit_DMA+0x14c>)
 8005434:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543a:	4a27      	ldr	r2, [pc, #156]	@ (80054d8 <HAL_I2S_Transmit_DMA+0x150>)
 800543c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005442:	4a26      	ldr	r2, [pc, #152]	@ (80054dc <HAL_I2S_Transmit_DMA+0x154>)
 8005444:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800544e:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005456:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8c1b      	ldrh	r3, [r3, #32]
 800545c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800545e:	f7fe fbb5 	bl	8003bcc <HAL_DMA_Start_IT>
 8005462:	1e03      	subs	r3, r0, #0
 8005464:	d00f      	beq.n	8005486 <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546a:	2208      	movs	r2, #8
 800546c:	431a      	orrs	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2235      	movs	r2, #53	@ 0x35
 8005476:	2101      	movs	r1, #1
 8005478:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2234      	movs	r2, #52	@ 0x34
 800547e:	2100      	movs	r1, #0
 8005480:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e022      	b.n	80054cc <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69da      	ldr	r2, [r3, #28]
 800548c:	2380      	movs	r3, #128	@ 0x80
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	4013      	ands	r3, r2
 8005492:	d108      	bne.n	80054a6 <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69da      	ldr	r2, [r3, #28]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2180      	movs	r1, #128	@ 0x80
 80054a0:	00c9      	lsls	r1, r1, #3
 80054a2:	430a      	orrs	r2, r1
 80054a4:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2202      	movs	r2, #2
 80054ae:	4013      	ands	r3, r2
 80054b0:	d107      	bne.n	80054c2 <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2102      	movs	r1, #2
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2234      	movs	r2, #52	@ 0x34
 80054c6:	2100      	movs	r1, #0
 80054c8:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	0018      	movs	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	b006      	add	sp, #24
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	08005535 	.word	0x08005535
 80054d8:	080054f1 	.word	0x080054f1
 80054dc:	08005553 	.word	0x08005553

080054e0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80054e8:	46c0      	nop			@ (mov r8, r8)
 80054ea:	46bd      	mov	sp, r7
 80054ec:	b002      	add	sp, #8
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10e      	bne.n	8005524 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2102      	movs	r1, #2
 8005512:	438a      	bics	r2, r1
 8005514:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	845a      	strh	r2, [r3, #34]	@ 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2235      	movs	r2, #53	@ 0x35
 8005520:	2101      	movs	r1, #1
 8005522:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	0018      	movs	r0, r3
 8005528:	f7fd fbad 	bl	8002c86 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800552c:	46c0      	nop			@ (mov r8, r8)
 800552e:	46bd      	mov	sp, r7
 8005530:	b004      	add	sp, #16
 8005532:	bd80      	pop	{r7, pc}

08005534 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005540:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	0018      	movs	r0, r3
 8005546:	f7fd fb96 	bl	8002c76 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800554a:	46c0      	nop			@ (mov r8, r8)
 800554c:	46bd      	mov	sp, r7
 800554e:	b004      	add	sp, #16
 8005550:	bd80      	pop	{r7, pc}

08005552 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2103      	movs	r1, #3
 800556c:	438a      	bics	r2, r1
 800556e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2235      	movs	r2, #53	@ 0x35
 8005580:	2101      	movs	r1, #1
 8005582:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005588:	2208      	movs	r2, #8
 800558a:	431a      	orrs	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	0018      	movs	r0, r3
 8005594:	f7ff ffa4 	bl	80054e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005598:	46c0      	nop			@ (mov r8, r8)
 800559a:	46bd      	mov	sp, r7
 800559c:	b004      	add	sp, #16
 800559e:	bd80      	pop	{r7, pc}

080055a0 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	1dfb      	adds	r3, r7, #7
 80055ae:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80055b0:	f7fe f99a 	bl	80038e8 <HAL_GetTick>
 80055b4:	0003      	movs	r3, r0
 80055b6:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80055b8:	e017      	b.n	80055ea <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	3301      	adds	r3, #1
 80055be:	d014      	beq.n	80055ea <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80055c0:	f7fe f992 	bl	80038e8 <HAL_GetTick>
 80055c4:	0002      	movs	r2, r0
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d902      	bls.n	80055d6 <I2S_WaitFlagStateUntilTimeout+0x36>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d109      	bne.n	80055ea <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2235      	movs	r2, #53	@ 0x35
 80055da:	2101      	movs	r1, #1
 80055dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2234      	movs	r2, #52	@ 0x34
 80055e2:	2100      	movs	r1, #0
 80055e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e00f      	b.n	800560a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	4013      	ands	r3, r2
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	425a      	negs	r2, r3
 80055fa:	4153      	adcs	r3, r2
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	001a      	movs	r2, r3
 8005600:	1dfb      	adds	r3, r7, #7
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d1d8      	bne.n	80055ba <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	0018      	movs	r0, r3
 800560c:	46bd      	mov	sp, r7
 800560e:	b006      	add	sp, #24
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005618:	4b04      	ldr	r3, [pc, #16]	@ (800562c <HAL_PWR_EnableBkUpAccess+0x18>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	4b03      	ldr	r3, [pc, #12]	@ (800562c <HAL_PWR_EnableBkUpAccess+0x18>)
 800561e:	2180      	movs	r1, #128	@ 0x80
 8005620:	0049      	lsls	r1, r1, #1
 8005622:	430a      	orrs	r2, r1
 8005624:	601a      	str	r2, [r3, #0]
}
 8005626:	46c0      	nop			@ (mov r8, r8)
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40007000 	.word	0x40007000

08005630 <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8005634:	4b04      	ldr	r3, [pc, #16]	@ (8005648 <HAL_PWR_DisableBkUpAccess+0x18>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	4b03      	ldr	r3, [pc, #12]	@ (8005648 <HAL_PWR_DisableBkUpAccess+0x18>)
 800563a:	4904      	ldr	r1, [pc, #16]	@ (800564c <HAL_PWR_DisableBkUpAccess+0x1c>)
 800563c:	400a      	ands	r2, r1
 800563e:	601a      	str	r2, [r3, #0]
}
 8005640:	46c0      	nop			@ (mov r8, r8)
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	46c0      	nop			@ (mov r8, r8)
 8005648:	40007000 	.word	0x40007000
 800564c:	fffffeff 	.word	0xfffffeff

08005650 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005658:	4b19      	ldr	r3, [pc, #100]	@ (80056c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a19      	ldr	r2, [pc, #100]	@ (80056c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800565e:	4013      	ands	r3, r2
 8005660:	0019      	movs	r1, r3
 8005662:	4b17      	ldr	r3, [pc, #92]	@ (80056c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	430a      	orrs	r2, r1
 8005668:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	2380      	movs	r3, #128	@ 0x80
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	429a      	cmp	r2, r3
 8005672:	d11f      	bne.n	80056b4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005674:	4b14      	ldr	r3, [pc, #80]	@ (80056c8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	0013      	movs	r3, r2
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	189b      	adds	r3, r3, r2
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	4912      	ldr	r1, [pc, #72]	@ (80056cc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005682:	0018      	movs	r0, r3
 8005684:	f7fa fd3e 	bl	8000104 <__udivsi3>
 8005688:	0003      	movs	r3, r0
 800568a:	3301      	adds	r3, #1
 800568c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800568e:	e008      	b.n	80056a2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3b01      	subs	r3, #1
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	e001      	b.n	80056a2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e009      	b.n	80056b6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056a2:	4b07      	ldr	r3, [pc, #28]	@ (80056c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80056a4:	695a      	ldr	r2, [r3, #20]
 80056a6:	2380      	movs	r3, #128	@ 0x80
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	401a      	ands	r2, r3
 80056ac:	2380      	movs	r3, #128	@ 0x80
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d0ed      	beq.n	8005690 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	0018      	movs	r0, r3
 80056b8:	46bd      	mov	sp, r7
 80056ba:	b004      	add	sp, #16
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	46c0      	nop			@ (mov r8, r8)
 80056c0:	40007000 	.word	0x40007000
 80056c4:	fffff9ff 	.word	0xfffff9ff
 80056c8:	20000090 	.word	0x20000090
 80056cc:	000f4240 	.word	0x000f4240

080056d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80056d4:	4b03      	ldr	r3, [pc, #12]	@ (80056e4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	23e0      	movs	r3, #224	@ 0xe0
 80056da:	01db      	lsls	r3, r3, #7
 80056dc:	4013      	ands	r3, r2
}
 80056de:	0018      	movs	r0, r3
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40021000 	.word	0x40021000

080056e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e2fe      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2201      	movs	r2, #1
 8005700:	4013      	ands	r3, r2
 8005702:	d100      	bne.n	8005706 <HAL_RCC_OscConfig+0x1e>
 8005704:	e07c      	b.n	8005800 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005706:	4bc3      	ldr	r3, [pc, #780]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	2238      	movs	r2, #56	@ 0x38
 800570c:	4013      	ands	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005710:	4bc0      	ldr	r3, [pc, #768]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	2203      	movs	r2, #3
 8005716:	4013      	ands	r3, r2
 8005718:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b10      	cmp	r3, #16
 800571e:	d102      	bne.n	8005726 <HAL_RCC_OscConfig+0x3e>
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b03      	cmp	r3, #3
 8005724:	d002      	beq.n	800572c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2b08      	cmp	r3, #8
 800572a:	d10b      	bne.n	8005744 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800572c:	4bb9      	ldr	r3, [pc, #740]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	2380      	movs	r3, #128	@ 0x80
 8005732:	029b      	lsls	r3, r3, #10
 8005734:	4013      	ands	r3, r2
 8005736:	d062      	beq.n	80057fe <HAL_RCC_OscConfig+0x116>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d15e      	bne.n	80057fe <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e2d9      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	2380      	movs	r3, #128	@ 0x80
 800574a:	025b      	lsls	r3, r3, #9
 800574c:	429a      	cmp	r2, r3
 800574e:	d107      	bne.n	8005760 <HAL_RCC_OscConfig+0x78>
 8005750:	4bb0      	ldr	r3, [pc, #704]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	4baf      	ldr	r3, [pc, #700]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 8005756:	2180      	movs	r1, #128	@ 0x80
 8005758:	0249      	lsls	r1, r1, #9
 800575a:	430a      	orrs	r2, r1
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	e020      	b.n	80057a2 <HAL_RCC_OscConfig+0xba>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	23a0      	movs	r3, #160	@ 0xa0
 8005766:	02db      	lsls	r3, r3, #11
 8005768:	429a      	cmp	r2, r3
 800576a:	d10e      	bne.n	800578a <HAL_RCC_OscConfig+0xa2>
 800576c:	4ba9      	ldr	r3, [pc, #676]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	4ba8      	ldr	r3, [pc, #672]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 8005772:	2180      	movs	r1, #128	@ 0x80
 8005774:	02c9      	lsls	r1, r1, #11
 8005776:	430a      	orrs	r2, r1
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	4ba6      	ldr	r3, [pc, #664]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	4ba5      	ldr	r3, [pc, #660]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 8005780:	2180      	movs	r1, #128	@ 0x80
 8005782:	0249      	lsls	r1, r1, #9
 8005784:	430a      	orrs	r2, r1
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	e00b      	b.n	80057a2 <HAL_RCC_OscConfig+0xba>
 800578a:	4ba2      	ldr	r3, [pc, #648]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	4ba1      	ldr	r3, [pc, #644]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 8005790:	49a1      	ldr	r1, [pc, #644]	@ (8005a18 <HAL_RCC_OscConfig+0x330>)
 8005792:	400a      	ands	r2, r1
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	4b9f      	ldr	r3, [pc, #636]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4b9e      	ldr	r3, [pc, #632]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 800579c:	499f      	ldr	r1, [pc, #636]	@ (8005a1c <HAL_RCC_OscConfig+0x334>)
 800579e:	400a      	ands	r2, r1
 80057a0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d014      	beq.n	80057d4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057aa:	f7fe f89d 	bl	80038e8 <HAL_GetTick>
 80057ae:	0003      	movs	r3, r0
 80057b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057b4:	f7fe f898 	bl	80038e8 <HAL_GetTick>
 80057b8:	0002      	movs	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b64      	cmp	r3, #100	@ 0x64
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e298      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057c6:	4b93      	ldr	r3, [pc, #588]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	2380      	movs	r3, #128	@ 0x80
 80057cc:	029b      	lsls	r3, r3, #10
 80057ce:	4013      	ands	r3, r2
 80057d0:	d0f0      	beq.n	80057b4 <HAL_RCC_OscConfig+0xcc>
 80057d2:	e015      	b.n	8005800 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d4:	f7fe f888 	bl	80038e8 <HAL_GetTick>
 80057d8:	0003      	movs	r3, r0
 80057da:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057de:	f7fe f883 	bl	80038e8 <HAL_GetTick>
 80057e2:	0002      	movs	r2, r0
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b64      	cmp	r3, #100	@ 0x64
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e283      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057f0:	4b88      	ldr	r3, [pc, #544]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	2380      	movs	r3, #128	@ 0x80
 80057f6:	029b      	lsls	r3, r3, #10
 80057f8:	4013      	ands	r3, r2
 80057fa:	d1f0      	bne.n	80057de <HAL_RCC_OscConfig+0xf6>
 80057fc:	e000      	b.n	8005800 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057fe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2202      	movs	r2, #2
 8005806:	4013      	ands	r3, r2
 8005808:	d100      	bne.n	800580c <HAL_RCC_OscConfig+0x124>
 800580a:	e099      	b.n	8005940 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800580c:	4b81      	ldr	r3, [pc, #516]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	2238      	movs	r2, #56	@ 0x38
 8005812:	4013      	ands	r3, r2
 8005814:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005816:	4b7f      	ldr	r3, [pc, #508]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	2203      	movs	r2, #3
 800581c:	4013      	ands	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	2b10      	cmp	r3, #16
 8005824:	d102      	bne.n	800582c <HAL_RCC_OscConfig+0x144>
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b02      	cmp	r3, #2
 800582a:	d002      	beq.n	8005832 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d135      	bne.n	800589e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005832:	4b78      	ldr	r3, [pc, #480]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	2380      	movs	r3, #128	@ 0x80
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	4013      	ands	r3, r2
 800583c:	d005      	beq.n	800584a <HAL_RCC_OscConfig+0x162>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e256      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800584a:	4b72      	ldr	r3, [pc, #456]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	4a74      	ldr	r2, [pc, #464]	@ (8005a20 <HAL_RCC_OscConfig+0x338>)
 8005850:	4013      	ands	r3, r2
 8005852:	0019      	movs	r1, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	021a      	lsls	r2, r3, #8
 800585a:	4b6e      	ldr	r3, [pc, #440]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 800585c:	430a      	orrs	r2, r1
 800585e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d112      	bne.n	800588c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005866:	4b6b      	ldr	r3, [pc, #428]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a6e      	ldr	r2, [pc, #440]	@ (8005a24 <HAL_RCC_OscConfig+0x33c>)
 800586c:	4013      	ands	r3, r2
 800586e:	0019      	movs	r1, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691a      	ldr	r2, [r3, #16]
 8005874:	4b67      	ldr	r3, [pc, #412]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 8005876:	430a      	orrs	r2, r1
 8005878:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800587a:	4b66      	ldr	r3, [pc, #408]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	0adb      	lsrs	r3, r3, #11
 8005880:	2207      	movs	r2, #7
 8005882:	4013      	ands	r3, r2
 8005884:	4a68      	ldr	r2, [pc, #416]	@ (8005a28 <HAL_RCC_OscConfig+0x340>)
 8005886:	40da      	lsrs	r2, r3
 8005888:	4b68      	ldr	r3, [pc, #416]	@ (8005a2c <HAL_RCC_OscConfig+0x344>)
 800588a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800588c:	4b68      	ldr	r3, [pc, #416]	@ (8005a30 <HAL_RCC_OscConfig+0x348>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	0018      	movs	r0, r3
 8005892:	f7fd ffcd 	bl	8003830 <HAL_InitTick>
 8005896:	1e03      	subs	r3, r0, #0
 8005898:	d051      	beq.n	800593e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e22c      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d030      	beq.n	8005908 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80058a6:	4b5b      	ldr	r3, [pc, #364]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a5e      	ldr	r2, [pc, #376]	@ (8005a24 <HAL_RCC_OscConfig+0x33c>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	0019      	movs	r1, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	4b57      	ldr	r3, [pc, #348]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 80058b6:	430a      	orrs	r2, r1
 80058b8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80058ba:	4b56      	ldr	r3, [pc, #344]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4b55      	ldr	r3, [pc, #340]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 80058c0:	2180      	movs	r1, #128	@ 0x80
 80058c2:	0049      	lsls	r1, r1, #1
 80058c4:	430a      	orrs	r2, r1
 80058c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fe f80e 	bl	80038e8 <HAL_GetTick>
 80058cc:	0003      	movs	r3, r0
 80058ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058d0:	e008      	b.n	80058e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058d2:	f7fe f809 	bl	80038e8 <HAL_GetTick>
 80058d6:	0002      	movs	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e209      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058e4:	4b4b      	ldr	r3, [pc, #300]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	2380      	movs	r3, #128	@ 0x80
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	4013      	ands	r3, r2
 80058ee:	d0f0      	beq.n	80058d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f0:	4b48      	ldr	r3, [pc, #288]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	4a4a      	ldr	r2, [pc, #296]	@ (8005a20 <HAL_RCC_OscConfig+0x338>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	0019      	movs	r1, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	021a      	lsls	r2, r3, #8
 8005900:	4b44      	ldr	r3, [pc, #272]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 8005902:	430a      	orrs	r2, r1
 8005904:	605a      	str	r2, [r3, #4]
 8005906:	e01b      	b.n	8005940 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005908:	4b42      	ldr	r3, [pc, #264]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	4b41      	ldr	r3, [pc, #260]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 800590e:	4949      	ldr	r1, [pc, #292]	@ (8005a34 <HAL_RCC_OscConfig+0x34c>)
 8005910:	400a      	ands	r2, r1
 8005912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005914:	f7fd ffe8 	bl	80038e8 <HAL_GetTick>
 8005918:	0003      	movs	r3, r0
 800591a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800591e:	f7fd ffe3 	bl	80038e8 <HAL_GetTick>
 8005922:	0002      	movs	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e1e3      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005930:	4b38      	ldr	r3, [pc, #224]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	2380      	movs	r3, #128	@ 0x80
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	4013      	ands	r3, r2
 800593a:	d1f0      	bne.n	800591e <HAL_RCC_OscConfig+0x236>
 800593c:	e000      	b.n	8005940 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800593e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2208      	movs	r2, #8
 8005946:	4013      	ands	r3, r2
 8005948:	d047      	beq.n	80059da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800594a:	4b32      	ldr	r3, [pc, #200]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	2238      	movs	r2, #56	@ 0x38
 8005950:	4013      	ands	r3, r2
 8005952:	2b18      	cmp	r3, #24
 8005954:	d10a      	bne.n	800596c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005956:	4b2f      	ldr	r3, [pc, #188]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 8005958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800595a:	2202      	movs	r2, #2
 800595c:	4013      	ands	r3, r2
 800595e:	d03c      	beq.n	80059da <HAL_RCC_OscConfig+0x2f2>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d138      	bne.n	80059da <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e1c5      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d019      	beq.n	80059a8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005974:	4b27      	ldr	r3, [pc, #156]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 8005976:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005978:	4b26      	ldr	r3, [pc, #152]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 800597a:	2101      	movs	r1, #1
 800597c:	430a      	orrs	r2, r1
 800597e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005980:	f7fd ffb2 	bl	80038e8 <HAL_GetTick>
 8005984:	0003      	movs	r3, r0
 8005986:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005988:	e008      	b.n	800599c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800598a:	f7fd ffad 	bl	80038e8 <HAL_GetTick>
 800598e:	0002      	movs	r2, r0
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e1ad      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800599c:	4b1d      	ldr	r3, [pc, #116]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 800599e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059a0:	2202      	movs	r2, #2
 80059a2:	4013      	ands	r3, r2
 80059a4:	d0f1      	beq.n	800598a <HAL_RCC_OscConfig+0x2a2>
 80059a6:	e018      	b.n	80059da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80059a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 80059aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80059ac:	4b19      	ldr	r3, [pc, #100]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 80059ae:	2101      	movs	r1, #1
 80059b0:	438a      	bics	r2, r1
 80059b2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b4:	f7fd ff98 	bl	80038e8 <HAL_GetTick>
 80059b8:	0003      	movs	r3, r0
 80059ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059bc:	e008      	b.n	80059d0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059be:	f7fd ff93 	bl	80038e8 <HAL_GetTick>
 80059c2:	0002      	movs	r2, r0
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e193      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059d0:	4b10      	ldr	r3, [pc, #64]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 80059d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059d4:	2202      	movs	r2, #2
 80059d6:	4013      	ands	r3, r2
 80059d8:	d1f1      	bne.n	80059be <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2204      	movs	r2, #4
 80059e0:	4013      	ands	r3, r2
 80059e2:	d100      	bne.n	80059e6 <HAL_RCC_OscConfig+0x2fe>
 80059e4:	e0c6      	b.n	8005b74 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059e6:	231f      	movs	r3, #31
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	2200      	movs	r2, #0
 80059ec:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80059ee:	4b09      	ldr	r3, [pc, #36]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	2238      	movs	r2, #56	@ 0x38
 80059f4:	4013      	ands	r3, r2
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d11e      	bne.n	8005a38 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80059fa:	4b06      	ldr	r3, [pc, #24]	@ (8005a14 <HAL_RCC_OscConfig+0x32c>)
 80059fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059fe:	2202      	movs	r2, #2
 8005a00:	4013      	ands	r3, r2
 8005a02:	d100      	bne.n	8005a06 <HAL_RCC_OscConfig+0x31e>
 8005a04:	e0b6      	b.n	8005b74 <HAL_RCC_OscConfig+0x48c>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d000      	beq.n	8005a10 <HAL_RCC_OscConfig+0x328>
 8005a0e:	e0b1      	b.n	8005b74 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e171      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
 8005a14:	40021000 	.word	0x40021000
 8005a18:	fffeffff 	.word	0xfffeffff
 8005a1c:	fffbffff 	.word	0xfffbffff
 8005a20:	ffff80ff 	.word	0xffff80ff
 8005a24:	ffffc7ff 	.word	0xffffc7ff
 8005a28:	00f42400 	.word	0x00f42400
 8005a2c:	20000090 	.word	0x20000090
 8005a30:	20000094 	.word	0x20000094
 8005a34:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a38:	4bb1      	ldr	r3, [pc, #708]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005a3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a3c:	2380      	movs	r3, #128	@ 0x80
 8005a3e:	055b      	lsls	r3, r3, #21
 8005a40:	4013      	ands	r3, r2
 8005a42:	d101      	bne.n	8005a48 <HAL_RCC_OscConfig+0x360>
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <HAL_RCC_OscConfig+0x362>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d011      	beq.n	8005a72 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005a4e:	4bac      	ldr	r3, [pc, #688]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005a50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a52:	4bab      	ldr	r3, [pc, #684]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005a54:	2180      	movs	r1, #128	@ 0x80
 8005a56:	0549      	lsls	r1, r1, #21
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a5c:	4ba8      	ldr	r3, [pc, #672]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005a5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a60:	2380      	movs	r3, #128	@ 0x80
 8005a62:	055b      	lsls	r3, r3, #21
 8005a64:	4013      	ands	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005a6a:	231f      	movs	r3, #31
 8005a6c:	18fb      	adds	r3, r7, r3
 8005a6e:	2201      	movs	r2, #1
 8005a70:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a72:	4ba4      	ldr	r3, [pc, #656]	@ (8005d04 <HAL_RCC_OscConfig+0x61c>)
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	2380      	movs	r3, #128	@ 0x80
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d11a      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a7e:	4ba1      	ldr	r3, [pc, #644]	@ (8005d04 <HAL_RCC_OscConfig+0x61c>)
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	4ba0      	ldr	r3, [pc, #640]	@ (8005d04 <HAL_RCC_OscConfig+0x61c>)
 8005a84:	2180      	movs	r1, #128	@ 0x80
 8005a86:	0049      	lsls	r1, r1, #1
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005a8c:	f7fd ff2c 	bl	80038e8 <HAL_GetTick>
 8005a90:	0003      	movs	r3, r0
 8005a92:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a94:	e008      	b.n	8005aa8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a96:	f7fd ff27 	bl	80038e8 <HAL_GetTick>
 8005a9a:	0002      	movs	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e127      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aa8:	4b96      	ldr	r3, [pc, #600]	@ (8005d04 <HAL_RCC_OscConfig+0x61c>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	2380      	movs	r3, #128	@ 0x80
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	d0f0      	beq.n	8005a96 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d106      	bne.n	8005aca <HAL_RCC_OscConfig+0x3e2>
 8005abc:	4b90      	ldr	r3, [pc, #576]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005abe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ac0:	4b8f      	ldr	r3, [pc, #572]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ac8:	e01c      	b.n	8005b04 <HAL_RCC_OscConfig+0x41c>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	2b05      	cmp	r3, #5
 8005ad0:	d10c      	bne.n	8005aec <HAL_RCC_OscConfig+0x404>
 8005ad2:	4b8b      	ldr	r3, [pc, #556]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005ad4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ad6:	4b8a      	ldr	r3, [pc, #552]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005ad8:	2104      	movs	r1, #4
 8005ada:	430a      	orrs	r2, r1
 8005adc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ade:	4b88      	ldr	r3, [pc, #544]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005ae0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ae2:	4b87      	ldr	r3, [pc, #540]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005aea:	e00b      	b.n	8005b04 <HAL_RCC_OscConfig+0x41c>
 8005aec:	4b84      	ldr	r3, [pc, #528]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005aee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005af0:	4b83      	ldr	r3, [pc, #524]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005af2:	2101      	movs	r1, #1
 8005af4:	438a      	bics	r2, r1
 8005af6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005af8:	4b81      	ldr	r3, [pc, #516]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005afa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005afc:	4b80      	ldr	r3, [pc, #512]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005afe:	2104      	movs	r1, #4
 8005b00:	438a      	bics	r2, r1
 8005b02:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d014      	beq.n	8005b36 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0c:	f7fd feec 	bl	80038e8 <HAL_GetTick>
 8005b10:	0003      	movs	r3, r0
 8005b12:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b14:	e009      	b.n	8005b2a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b16:	f7fd fee7 	bl	80038e8 <HAL_GetTick>
 8005b1a:	0002      	movs	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	4a79      	ldr	r2, [pc, #484]	@ (8005d08 <HAL_RCC_OscConfig+0x620>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e0e6      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b2a:	4b75      	ldr	r3, [pc, #468]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b2e:	2202      	movs	r2, #2
 8005b30:	4013      	ands	r3, r2
 8005b32:	d0f0      	beq.n	8005b16 <HAL_RCC_OscConfig+0x42e>
 8005b34:	e013      	b.n	8005b5e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b36:	f7fd fed7 	bl	80038e8 <HAL_GetTick>
 8005b3a:	0003      	movs	r3, r0
 8005b3c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b3e:	e009      	b.n	8005b54 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b40:	f7fd fed2 	bl	80038e8 <HAL_GetTick>
 8005b44:	0002      	movs	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	4a6f      	ldr	r2, [pc, #444]	@ (8005d08 <HAL_RCC_OscConfig+0x620>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e0d1      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b54:	4b6a      	ldr	r3, [pc, #424]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b58:	2202      	movs	r2, #2
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d1f0      	bne.n	8005b40 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005b5e:	231f      	movs	r3, #31
 8005b60:	18fb      	adds	r3, r7, r3
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d105      	bne.n	8005b74 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005b68:	4b65      	ldr	r3, [pc, #404]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005b6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b6c:	4b64      	ldr	r3, [pc, #400]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005b6e:	4967      	ldr	r1, [pc, #412]	@ (8005d0c <HAL_RCC_OscConfig+0x624>)
 8005b70:	400a      	ands	r2, r1
 8005b72:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d100      	bne.n	8005b7e <HAL_RCC_OscConfig+0x496>
 8005b7c:	e0bb      	b.n	8005cf6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b7e:	4b60      	ldr	r3, [pc, #384]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	2238      	movs	r2, #56	@ 0x38
 8005b84:	4013      	ands	r3, r2
 8005b86:	2b10      	cmp	r3, #16
 8005b88:	d100      	bne.n	8005b8c <HAL_RCC_OscConfig+0x4a4>
 8005b8a:	e07b      	b.n	8005c84 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d156      	bne.n	8005c42 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b94:	4b5a      	ldr	r3, [pc, #360]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	4b59      	ldr	r3, [pc, #356]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005b9a:	495d      	ldr	r1, [pc, #372]	@ (8005d10 <HAL_RCC_OscConfig+0x628>)
 8005b9c:	400a      	ands	r2, r1
 8005b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba0:	f7fd fea2 	bl	80038e8 <HAL_GetTick>
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005baa:	f7fd fe9d 	bl	80038e8 <HAL_GetTick>
 8005bae:	0002      	movs	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e09d      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bbc:	4b50      	ldr	r3, [pc, #320]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	2380      	movs	r3, #128	@ 0x80
 8005bc2:	049b      	lsls	r3, r3, #18
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	d1f0      	bne.n	8005baa <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bc8:	4b4d      	ldr	r3, [pc, #308]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	4a51      	ldr	r2, [pc, #324]	@ (8005d14 <HAL_RCC_OscConfig+0x62c>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	0019      	movs	r1, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1a      	ldr	r2, [r3, #32]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be0:	021b      	lsls	r3, r3, #8
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	4b42      	ldr	r3, [pc, #264]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bfc:	4b40      	ldr	r3, [pc, #256]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	4b3f      	ldr	r3, [pc, #252]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c02:	2180      	movs	r1, #128	@ 0x80
 8005c04:	0449      	lsls	r1, r1, #17
 8005c06:	430a      	orrs	r2, r1
 8005c08:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	4b3c      	ldr	r3, [pc, #240]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c10:	2180      	movs	r1, #128	@ 0x80
 8005c12:	0549      	lsls	r1, r1, #21
 8005c14:	430a      	orrs	r2, r1
 8005c16:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c18:	f7fd fe66 	bl	80038e8 <HAL_GetTick>
 8005c1c:	0003      	movs	r3, r0
 8005c1e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c20:	e008      	b.n	8005c34 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c22:	f7fd fe61 	bl	80038e8 <HAL_GetTick>
 8005c26:	0002      	movs	r2, r0
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e061      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c34:	4b32      	ldr	r3, [pc, #200]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	2380      	movs	r3, #128	@ 0x80
 8005c3a:	049b      	lsls	r3, r3, #18
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	d0f0      	beq.n	8005c22 <HAL_RCC_OscConfig+0x53a>
 8005c40:	e059      	b.n	8005cf6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c42:	4b2f      	ldr	r3, [pc, #188]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	4b2e      	ldr	r3, [pc, #184]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c48:	4931      	ldr	r1, [pc, #196]	@ (8005d10 <HAL_RCC_OscConfig+0x628>)
 8005c4a:	400a      	ands	r2, r1
 8005c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c4e:	f7fd fe4b 	bl	80038e8 <HAL_GetTick>
 8005c52:	0003      	movs	r3, r0
 8005c54:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c58:	f7fd fe46 	bl	80038e8 <HAL_GetTick>
 8005c5c:	0002      	movs	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e046      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c6a:	4b25      	ldr	r3, [pc, #148]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	2380      	movs	r3, #128	@ 0x80
 8005c70:	049b      	lsls	r3, r3, #18
 8005c72:	4013      	ands	r3, r2
 8005c74:	d1f0      	bne.n	8005c58 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005c76:	4b22      	ldr	r3, [pc, #136]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	4b21      	ldr	r3, [pc, #132]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c7c:	4926      	ldr	r1, [pc, #152]	@ (8005d18 <HAL_RCC_OscConfig+0x630>)
 8005c7e:	400a      	ands	r2, r1
 8005c80:	60da      	str	r2, [r3, #12]
 8005c82:	e038      	b.n	8005cf6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e033      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005c90:	4b1b      	ldr	r3, [pc, #108]	@ (8005d00 <HAL_RCC_OscConfig+0x618>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2203      	movs	r2, #3
 8005c9a:	401a      	ands	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d126      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2270      	movs	r2, #112	@ 0x70
 8005ca8:	401a      	ands	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d11f      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	23fe      	movs	r3, #254	@ 0xfe
 8005cb6:	01db      	lsls	r3, r3, #7
 8005cb8:	401a      	ands	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d116      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	23f8      	movs	r3, #248	@ 0xf8
 8005cc8:	039b      	lsls	r3, r3, #14
 8005cca:	401a      	ands	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d10e      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	23e0      	movs	r3, #224	@ 0xe0
 8005cd8:	051b      	lsls	r3, r3, #20
 8005cda:	401a      	ands	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d106      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	0f5b      	lsrs	r3, r3, #29
 8005ce8:	075a      	lsls	r2, r3, #29
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d001      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e000      	b.n	8005cf8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	b008      	add	sp, #32
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	40021000 	.word	0x40021000
 8005d04:	40007000 	.word	0x40007000
 8005d08:	00001388 	.word	0x00001388
 8005d0c:	efffffff 	.word	0xefffffff
 8005d10:	feffffff 	.word	0xfeffffff
 8005d14:	11c1808c 	.word	0x11c1808c
 8005d18:	eefefffc 	.word	0xeefefffc

08005d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e0e9      	b.n	8005f04 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d30:	4b76      	ldr	r3, [pc, #472]	@ (8005f0c <HAL_RCC_ClockConfig+0x1f0>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2207      	movs	r2, #7
 8005d36:	4013      	ands	r3, r2
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d91e      	bls.n	8005d7c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d3e:	4b73      	ldr	r3, [pc, #460]	@ (8005f0c <HAL_RCC_ClockConfig+0x1f0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2207      	movs	r2, #7
 8005d44:	4393      	bics	r3, r2
 8005d46:	0019      	movs	r1, r3
 8005d48:	4b70      	ldr	r3, [pc, #448]	@ (8005f0c <HAL_RCC_ClockConfig+0x1f0>)
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d50:	f7fd fdca 	bl	80038e8 <HAL_GetTick>
 8005d54:	0003      	movs	r3, r0
 8005d56:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d58:	e009      	b.n	8005d6e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d5a:	f7fd fdc5 	bl	80038e8 <HAL_GetTick>
 8005d5e:	0002      	movs	r2, r0
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	4a6a      	ldr	r2, [pc, #424]	@ (8005f10 <HAL_RCC_ClockConfig+0x1f4>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e0ca      	b.n	8005f04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d6e:	4b67      	ldr	r3, [pc, #412]	@ (8005f0c <HAL_RCC_ClockConfig+0x1f0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2207      	movs	r2, #7
 8005d74:	4013      	ands	r3, r2
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d1ee      	bne.n	8005d5a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2202      	movs	r2, #2
 8005d82:	4013      	ands	r3, r2
 8005d84:	d015      	beq.n	8005db2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	d006      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005d90:	4b60      	ldr	r3, [pc, #384]	@ (8005f14 <HAL_RCC_ClockConfig+0x1f8>)
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	4b5f      	ldr	r3, [pc, #380]	@ (8005f14 <HAL_RCC_ClockConfig+0x1f8>)
 8005d96:	21e0      	movs	r1, #224	@ 0xe0
 8005d98:	01c9      	lsls	r1, r1, #7
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8005f14 <HAL_RCC_ClockConfig+0x1f8>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	4a5d      	ldr	r2, [pc, #372]	@ (8005f18 <HAL_RCC_ClockConfig+0x1fc>)
 8005da4:	4013      	ands	r3, r2
 8005da6:	0019      	movs	r1, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	4b59      	ldr	r3, [pc, #356]	@ (8005f14 <HAL_RCC_ClockConfig+0x1f8>)
 8005dae:	430a      	orrs	r2, r1
 8005db0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2201      	movs	r2, #1
 8005db8:	4013      	ands	r3, r2
 8005dba:	d057      	beq.n	8005e6c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d107      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dc4:	4b53      	ldr	r3, [pc, #332]	@ (8005f14 <HAL_RCC_ClockConfig+0x1f8>)
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	2380      	movs	r3, #128	@ 0x80
 8005dca:	029b      	lsls	r3, r3, #10
 8005dcc:	4013      	ands	r3, r2
 8005dce:	d12b      	bne.n	8005e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e097      	b.n	8005f04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d107      	bne.n	8005dec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ddc:	4b4d      	ldr	r3, [pc, #308]	@ (8005f14 <HAL_RCC_ClockConfig+0x1f8>)
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	2380      	movs	r3, #128	@ 0x80
 8005de2:	049b      	lsls	r3, r3, #18
 8005de4:	4013      	ands	r3, r2
 8005de6:	d11f      	bne.n	8005e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e08b      	b.n	8005f04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d107      	bne.n	8005e04 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005df4:	4b47      	ldr	r3, [pc, #284]	@ (8005f14 <HAL_RCC_ClockConfig+0x1f8>)
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	2380      	movs	r3, #128	@ 0x80
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	d113      	bne.n	8005e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e07f      	b.n	8005f04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d106      	bne.n	8005e1a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e0c:	4b41      	ldr	r3, [pc, #260]	@ (8005f14 <HAL_RCC_ClockConfig+0x1f8>)
 8005e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e10:	2202      	movs	r2, #2
 8005e12:	4013      	ands	r3, r2
 8005e14:	d108      	bne.n	8005e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e074      	b.n	8005f04 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8005f14 <HAL_RCC_ClockConfig+0x1f8>)
 8005e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e1e:	2202      	movs	r2, #2
 8005e20:	4013      	ands	r3, r2
 8005e22:	d101      	bne.n	8005e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e06d      	b.n	8005f04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e28:	4b3a      	ldr	r3, [pc, #232]	@ (8005f14 <HAL_RCC_ClockConfig+0x1f8>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	2207      	movs	r2, #7
 8005e2e:	4393      	bics	r3, r2
 8005e30:	0019      	movs	r1, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	4b37      	ldr	r3, [pc, #220]	@ (8005f14 <HAL_RCC_ClockConfig+0x1f8>)
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e3c:	f7fd fd54 	bl	80038e8 <HAL_GetTick>
 8005e40:	0003      	movs	r3, r0
 8005e42:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e44:	e009      	b.n	8005e5a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e46:	f7fd fd4f 	bl	80038e8 <HAL_GetTick>
 8005e4a:	0002      	movs	r2, r0
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	4a2f      	ldr	r2, [pc, #188]	@ (8005f10 <HAL_RCC_ClockConfig+0x1f4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e054      	b.n	8005f04 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8005f14 <HAL_RCC_ClockConfig+0x1f8>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	2238      	movs	r2, #56	@ 0x38
 8005e60:	401a      	ands	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d1ec      	bne.n	8005e46 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e6c:	4b27      	ldr	r3, [pc, #156]	@ (8005f0c <HAL_RCC_ClockConfig+0x1f0>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2207      	movs	r2, #7
 8005e72:	4013      	ands	r3, r2
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d21e      	bcs.n	8005eb8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7a:	4b24      	ldr	r3, [pc, #144]	@ (8005f0c <HAL_RCC_ClockConfig+0x1f0>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2207      	movs	r2, #7
 8005e80:	4393      	bics	r3, r2
 8005e82:	0019      	movs	r1, r3
 8005e84:	4b21      	ldr	r3, [pc, #132]	@ (8005f0c <HAL_RCC_ClockConfig+0x1f0>)
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e8c:	f7fd fd2c 	bl	80038e8 <HAL_GetTick>
 8005e90:	0003      	movs	r3, r0
 8005e92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005e94:	e009      	b.n	8005eaa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e96:	f7fd fd27 	bl	80038e8 <HAL_GetTick>
 8005e9a:	0002      	movs	r2, r0
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f10 <HAL_RCC_ClockConfig+0x1f4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e02c      	b.n	8005f04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005eaa:	4b18      	ldr	r3, [pc, #96]	@ (8005f0c <HAL_RCC_ClockConfig+0x1f0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2207      	movs	r2, #7
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d1ee      	bne.n	8005e96 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d009      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005ec2:	4b14      	ldr	r3, [pc, #80]	@ (8005f14 <HAL_RCC_ClockConfig+0x1f8>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	4a15      	ldr	r2, [pc, #84]	@ (8005f1c <HAL_RCC_ClockConfig+0x200>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	0019      	movs	r1, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	4b10      	ldr	r3, [pc, #64]	@ (8005f14 <HAL_RCC_ClockConfig+0x1f8>)
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005ed6:	f000 f829 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8005eda:	0001      	movs	r1, r0
 8005edc:	4b0d      	ldr	r3, [pc, #52]	@ (8005f14 <HAL_RCC_ClockConfig+0x1f8>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	0a1b      	lsrs	r3, r3, #8
 8005ee2:	220f      	movs	r2, #15
 8005ee4:	401a      	ands	r2, r3
 8005ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8005f20 <HAL_RCC_ClockConfig+0x204>)
 8005ee8:	0092      	lsls	r2, r2, #2
 8005eea:	58d3      	ldr	r3, [r2, r3]
 8005eec:	221f      	movs	r2, #31
 8005eee:	4013      	ands	r3, r2
 8005ef0:	000a      	movs	r2, r1
 8005ef2:	40da      	lsrs	r2, r3
 8005ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f24 <HAL_RCC_ClockConfig+0x208>)
 8005ef6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8005f28 <HAL_RCC_ClockConfig+0x20c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	0018      	movs	r0, r3
 8005efe:	f7fd fc97 	bl	8003830 <HAL_InitTick>
 8005f02:	0003      	movs	r3, r0
}
 8005f04:	0018      	movs	r0, r3
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b004      	add	sp, #16
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	40022000 	.word	0x40022000
 8005f10:	00001388 	.word	0x00001388
 8005f14:	40021000 	.word	0x40021000
 8005f18:	fffff0ff 	.word	0xfffff0ff
 8005f1c:	ffff8fff 	.word	0xffff8fff
 8005f20:	080096ac 	.word	0x080096ac
 8005f24:	20000090 	.word	0x20000090
 8005f28:	20000094 	.word	0x20000094

08005f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f32:	4b3c      	ldr	r3, [pc, #240]	@ (8006024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	2238      	movs	r2, #56	@ 0x38
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d10f      	bne.n	8005f5c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005f3c:	4b39      	ldr	r3, [pc, #228]	@ (8006024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	0adb      	lsrs	r3, r3, #11
 8005f42:	2207      	movs	r2, #7
 8005f44:	4013      	ands	r3, r2
 8005f46:	2201      	movs	r2, #1
 8005f48:	409a      	lsls	r2, r3
 8005f4a:	0013      	movs	r3, r2
 8005f4c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005f4e:	6839      	ldr	r1, [r7, #0]
 8005f50:	4835      	ldr	r0, [pc, #212]	@ (8006028 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f52:	f7fa f8d7 	bl	8000104 <__udivsi3>
 8005f56:	0003      	movs	r3, r0
 8005f58:	613b      	str	r3, [r7, #16]
 8005f5a:	e05d      	b.n	8006018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f5c:	4b31      	ldr	r3, [pc, #196]	@ (8006024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2238      	movs	r2, #56	@ 0x38
 8005f62:	4013      	ands	r3, r2
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d102      	bne.n	8005f6e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f68:	4b2f      	ldr	r3, [pc, #188]	@ (8006028 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f6a:	613b      	str	r3, [r7, #16]
 8005f6c:	e054      	b.n	8006018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8006024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	2238      	movs	r2, #56	@ 0x38
 8005f74:	4013      	ands	r3, r2
 8005f76:	2b10      	cmp	r3, #16
 8005f78:	d138      	bne.n	8005fec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8006024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	2203      	movs	r2, #3
 8005f80:	4013      	ands	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f84:	4b27      	ldr	r3, [pc, #156]	@ (8006024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	091b      	lsrs	r3, r3, #4
 8005f8a:	2207      	movs	r2, #7
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	3301      	adds	r3, #1
 8005f90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d10d      	bne.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f98:	68b9      	ldr	r1, [r7, #8]
 8005f9a:	4823      	ldr	r0, [pc, #140]	@ (8006028 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f9c:	f7fa f8b2 	bl	8000104 <__udivsi3>
 8005fa0:	0003      	movs	r3, r0
 8005fa2:	0019      	movs	r1, r3
 8005fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8006024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	0a1b      	lsrs	r3, r3, #8
 8005faa:	227f      	movs	r2, #127	@ 0x7f
 8005fac:	4013      	ands	r3, r2
 8005fae:	434b      	muls	r3, r1
 8005fb0:	617b      	str	r3, [r7, #20]
        break;
 8005fb2:	e00d      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	481c      	ldr	r0, [pc, #112]	@ (8006028 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005fb8:	f7fa f8a4 	bl	8000104 <__udivsi3>
 8005fbc:	0003      	movs	r3, r0
 8005fbe:	0019      	movs	r1, r3
 8005fc0:	4b18      	ldr	r3, [pc, #96]	@ (8006024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	0a1b      	lsrs	r3, r3, #8
 8005fc6:	227f      	movs	r2, #127	@ 0x7f
 8005fc8:	4013      	ands	r3, r2
 8005fca:	434b      	muls	r3, r1
 8005fcc:	617b      	str	r3, [r7, #20]
        break;
 8005fce:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005fd0:	4b14      	ldr	r3, [pc, #80]	@ (8006024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	0f5b      	lsrs	r3, r3, #29
 8005fd6:	2207      	movs	r2, #7
 8005fd8:	4013      	ands	r3, r2
 8005fda:	3301      	adds	r3, #1
 8005fdc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	6978      	ldr	r0, [r7, #20]
 8005fe2:	f7fa f88f 	bl	8000104 <__udivsi3>
 8005fe6:	0003      	movs	r3, r0
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	e015      	b.n	8006018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005fec:	4b0d      	ldr	r3, [pc, #52]	@ (8006024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	2238      	movs	r2, #56	@ 0x38
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	d103      	bne.n	8006000 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005ff8:	2380      	movs	r3, #128	@ 0x80
 8005ffa:	021b      	lsls	r3, r3, #8
 8005ffc:	613b      	str	r3, [r7, #16]
 8005ffe:	e00b      	b.n	8006018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006000:	4b08      	ldr	r3, [pc, #32]	@ (8006024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	2238      	movs	r2, #56	@ 0x38
 8006006:	4013      	ands	r3, r2
 8006008:	2b18      	cmp	r3, #24
 800600a:	d103      	bne.n	8006014 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800600c:	23fa      	movs	r3, #250	@ 0xfa
 800600e:	01db      	lsls	r3, r3, #7
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	e001      	b.n	8006018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006018:	693b      	ldr	r3, [r7, #16]
}
 800601a:	0018      	movs	r0, r3
 800601c:	46bd      	mov	sp, r7
 800601e:	b006      	add	sp, #24
 8006020:	bd80      	pop	{r7, pc}
 8006022:	46c0      	nop			@ (mov r8, r8)
 8006024:	40021000 	.word	0x40021000
 8006028:	00f42400 	.word	0x00f42400

0800602c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006030:	4b02      	ldr	r3, [pc, #8]	@ (800603c <HAL_RCC_GetHCLKFreq+0x10>)
 8006032:	681b      	ldr	r3, [r3, #0]
}
 8006034:	0018      	movs	r0, r3
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	46c0      	nop			@ (mov r8, r8)
 800603c:	20000090 	.word	0x20000090

08006040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006040:	b5b0      	push	{r4, r5, r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006044:	f7ff fff2 	bl	800602c <HAL_RCC_GetHCLKFreq>
 8006048:	0004      	movs	r4, r0
 800604a:	f7ff fb41 	bl	80056d0 <LL_RCC_GetAPB1Prescaler>
 800604e:	0003      	movs	r3, r0
 8006050:	0b1a      	lsrs	r2, r3, #12
 8006052:	4b05      	ldr	r3, [pc, #20]	@ (8006068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006054:	0092      	lsls	r2, r2, #2
 8006056:	58d3      	ldr	r3, [r2, r3]
 8006058:	221f      	movs	r2, #31
 800605a:	4013      	ands	r3, r2
 800605c:	40dc      	lsrs	r4, r3
 800605e:	0023      	movs	r3, r4
}
 8006060:	0018      	movs	r0, r3
 8006062:	46bd      	mov	sp, r7
 8006064:	bdb0      	pop	{r4, r5, r7, pc}
 8006066:	46c0      	nop			@ (mov r8, r8)
 8006068:	080096ec 	.word	0x080096ec

0800606c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006074:	2313      	movs	r3, #19
 8006076:	18fb      	adds	r3, r7, r3
 8006078:	2200      	movs	r2, #0
 800607a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800607c:	2312      	movs	r3, #18
 800607e:	18fb      	adds	r3, r7, r3
 8006080:	2200      	movs	r2, #0
 8006082:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	2380      	movs	r3, #128	@ 0x80
 800608a:	029b      	lsls	r3, r3, #10
 800608c:	4013      	ands	r3, r2
 800608e:	d100      	bne.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006090:	e0a3      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006092:	2011      	movs	r0, #17
 8006094:	183b      	adds	r3, r7, r0
 8006096:	2200      	movs	r2, #0
 8006098:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800609a:	4ba5      	ldr	r3, [pc, #660]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800609c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800609e:	2380      	movs	r3, #128	@ 0x80
 80060a0:	055b      	lsls	r3, r3, #21
 80060a2:	4013      	ands	r3, r2
 80060a4:	d110      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060a6:	4ba2      	ldr	r3, [pc, #648]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060aa:	4ba1      	ldr	r3, [pc, #644]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060ac:	2180      	movs	r1, #128	@ 0x80
 80060ae:	0549      	lsls	r1, r1, #21
 80060b0:	430a      	orrs	r2, r1
 80060b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80060b4:	4b9e      	ldr	r3, [pc, #632]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060b8:	2380      	movs	r3, #128	@ 0x80
 80060ba:	055b      	lsls	r3, r3, #21
 80060bc:	4013      	ands	r3, r2
 80060be:	60bb      	str	r3, [r7, #8]
 80060c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060c2:	183b      	adds	r3, r7, r0
 80060c4:	2201      	movs	r2, #1
 80060c6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060c8:	4b9a      	ldr	r3, [pc, #616]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	4b99      	ldr	r3, [pc, #612]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80060ce:	2180      	movs	r1, #128	@ 0x80
 80060d0:	0049      	lsls	r1, r1, #1
 80060d2:	430a      	orrs	r2, r1
 80060d4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060d6:	f7fd fc07 	bl	80038e8 <HAL_GetTick>
 80060da:	0003      	movs	r3, r0
 80060dc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060de:	e00b      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060e0:	f7fd fc02 	bl	80038e8 <HAL_GetTick>
 80060e4:	0002      	movs	r2, r0
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d904      	bls.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80060ee:	2313      	movs	r3, #19
 80060f0:	18fb      	adds	r3, r7, r3
 80060f2:	2203      	movs	r2, #3
 80060f4:	701a      	strb	r2, [r3, #0]
        break;
 80060f6:	e005      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060f8:	4b8e      	ldr	r3, [pc, #568]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	2380      	movs	r3, #128	@ 0x80
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	4013      	ands	r3, r2
 8006102:	d0ed      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006104:	2313      	movs	r3, #19
 8006106:	18fb      	adds	r3, r7, r3
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d154      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800610e:	4b88      	ldr	r3, [pc, #544]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006110:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006112:	23c0      	movs	r3, #192	@ 0xc0
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4013      	ands	r3, r2
 8006118:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d019      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	429a      	cmp	r2, r3
 8006128:	d014      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800612a:	4b81      	ldr	r3, [pc, #516]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800612c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800612e:	4a82      	ldr	r2, [pc, #520]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006130:	4013      	ands	r3, r2
 8006132:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006134:	4b7e      	ldr	r3, [pc, #504]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006136:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006138:	4b7d      	ldr	r3, [pc, #500]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800613a:	2180      	movs	r1, #128	@ 0x80
 800613c:	0249      	lsls	r1, r1, #9
 800613e:	430a      	orrs	r2, r1
 8006140:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006142:	4b7b      	ldr	r3, [pc, #492]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006144:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006146:	4b7a      	ldr	r3, [pc, #488]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006148:	497c      	ldr	r1, [pc, #496]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800614a:	400a      	ands	r2, r1
 800614c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800614e:	4b78      	ldr	r3, [pc, #480]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2201      	movs	r2, #1
 8006158:	4013      	ands	r3, r2
 800615a:	d016      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615c:	f7fd fbc4 	bl	80038e8 <HAL_GetTick>
 8006160:	0003      	movs	r3, r0
 8006162:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006164:	e00c      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006166:	f7fd fbbf 	bl	80038e8 <HAL_GetTick>
 800616a:	0002      	movs	r2, r0
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	4a73      	ldr	r2, [pc, #460]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d904      	bls.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006176:	2313      	movs	r3, #19
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	2203      	movs	r2, #3
 800617c:	701a      	strb	r2, [r3, #0]
            break;
 800617e:	e004      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006180:	4b6b      	ldr	r3, [pc, #428]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006184:	2202      	movs	r2, #2
 8006186:	4013      	ands	r3, r2
 8006188:	d0ed      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800618a:	2313      	movs	r3, #19
 800618c:	18fb      	adds	r3, r7, r3
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10a      	bne.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006194:	4b66      	ldr	r3, [pc, #408]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006198:	4a67      	ldr	r2, [pc, #412]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800619a:	4013      	ands	r3, r2
 800619c:	0019      	movs	r1, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061a2:	4b63      	ldr	r3, [pc, #396]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061a4:	430a      	orrs	r2, r1
 80061a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80061a8:	e00c      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061aa:	2312      	movs	r3, #18
 80061ac:	18fb      	adds	r3, r7, r3
 80061ae:	2213      	movs	r2, #19
 80061b0:	18ba      	adds	r2, r7, r2
 80061b2:	7812      	ldrb	r2, [r2, #0]
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	e005      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b8:	2312      	movs	r3, #18
 80061ba:	18fb      	adds	r3, r7, r3
 80061bc:	2213      	movs	r2, #19
 80061be:	18ba      	adds	r2, r7, r2
 80061c0:	7812      	ldrb	r2, [r2, #0]
 80061c2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061c4:	2311      	movs	r3, #17
 80061c6:	18fb      	adds	r3, r7, r3
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d105      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ce:	4b58      	ldr	r3, [pc, #352]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061d2:	4b57      	ldr	r3, [pc, #348]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061d4:	495b      	ldr	r1, [pc, #364]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80061d6:	400a      	ands	r2, r1
 80061d8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2201      	movs	r2, #1
 80061e0:	4013      	ands	r3, r2
 80061e2:	d009      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061e4:	4b52      	ldr	r3, [pc, #328]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e8:	2203      	movs	r2, #3
 80061ea:	4393      	bics	r3, r2
 80061ec:	0019      	movs	r1, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	4b4f      	ldr	r3, [pc, #316]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061f4:	430a      	orrs	r2, r1
 80061f6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2210      	movs	r2, #16
 80061fe:	4013      	ands	r3, r2
 8006200:	d009      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006202:	4b4b      	ldr	r3, [pc, #300]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006206:	4a50      	ldr	r2, [pc, #320]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006208:	4013      	ands	r3, r2
 800620a:	0019      	movs	r1, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	4b47      	ldr	r3, [pc, #284]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006212:	430a      	orrs	r2, r1
 8006214:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	2380      	movs	r3, #128	@ 0x80
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4013      	ands	r3, r2
 8006220:	d009      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006222:	4b43      	ldr	r3, [pc, #268]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006226:	4a49      	ldr	r2, [pc, #292]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006228:	4013      	ands	r3, r2
 800622a:	0019      	movs	r1, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	695a      	ldr	r2, [r3, #20]
 8006230:	4b3f      	ldr	r3, [pc, #252]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006232:	430a      	orrs	r2, r1
 8006234:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	2380      	movs	r3, #128	@ 0x80
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	4013      	ands	r3, r2
 8006240:	d009      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006242:	4b3b      	ldr	r3, [pc, #236]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006246:	4a42      	ldr	r2, [pc, #264]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006248:	4013      	ands	r3, r2
 800624a:	0019      	movs	r1, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699a      	ldr	r2, [r3, #24]
 8006250:	4b37      	ldr	r3, [pc, #220]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006252:	430a      	orrs	r2, r1
 8006254:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2220      	movs	r2, #32
 800625c:	4013      	ands	r3, r2
 800625e:	d009      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006260:	4b33      	ldr	r3, [pc, #204]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006264:	4a3b      	ldr	r2, [pc, #236]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006266:	4013      	ands	r3, r2
 8006268:	0019      	movs	r1, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	4b30      	ldr	r3, [pc, #192]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006270:	430a      	orrs	r2, r1
 8006272:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	2380      	movs	r3, #128	@ 0x80
 800627a:	01db      	lsls	r3, r3, #7
 800627c:	4013      	ands	r3, r2
 800627e:	d015      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006280:	4b2b      	ldr	r3, [pc, #172]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	0899      	lsrs	r1, r3, #2
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	69da      	ldr	r2, [r3, #28]
 800628c:	4b28      	ldr	r3, [pc, #160]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800628e:	430a      	orrs	r2, r1
 8006290:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69da      	ldr	r2, [r3, #28]
 8006296:	2380      	movs	r3, #128	@ 0x80
 8006298:	05db      	lsls	r3, r3, #23
 800629a:	429a      	cmp	r2, r3
 800629c:	d106      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800629e:	4b24      	ldr	r3, [pc, #144]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	4b23      	ldr	r3, [pc, #140]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062a4:	2180      	movs	r1, #128	@ 0x80
 80062a6:	0249      	lsls	r1, r1, #9
 80062a8:	430a      	orrs	r2, r1
 80062aa:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	2380      	movs	r3, #128	@ 0x80
 80062b2:	039b      	lsls	r3, r3, #14
 80062b4:	4013      	ands	r3, r2
 80062b6:	d016      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80062b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062bc:	4a26      	ldr	r2, [pc, #152]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80062be:	4013      	ands	r3, r2
 80062c0:	0019      	movs	r1, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1a      	ldr	r2, [r3, #32]
 80062c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062c8:	430a      	orrs	r2, r1
 80062ca:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a1a      	ldr	r2, [r3, #32]
 80062d0:	2380      	movs	r3, #128	@ 0x80
 80062d2:	03db      	lsls	r3, r3, #15
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d106      	bne.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80062d8:	4b15      	ldr	r3, [pc, #84]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	4b14      	ldr	r3, [pc, #80]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062de:	2180      	movs	r1, #128	@ 0x80
 80062e0:	0449      	lsls	r1, r1, #17
 80062e2:	430a      	orrs	r2, r1
 80062e4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	2380      	movs	r3, #128	@ 0x80
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	4013      	ands	r3, r2
 80062f0:	d016      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80062f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f6:	4a19      	ldr	r2, [pc, #100]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	0019      	movs	r1, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	4b0b      	ldr	r3, [pc, #44]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006302:	430a      	orrs	r2, r1
 8006304:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691a      	ldr	r2, [r3, #16]
 800630a:	2380      	movs	r3, #128	@ 0x80
 800630c:	01db      	lsls	r3, r3, #7
 800630e:	429a      	cmp	r2, r3
 8006310:	d106      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006312:	4b07      	ldr	r3, [pc, #28]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	4b06      	ldr	r3, [pc, #24]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006318:	2180      	movs	r1, #128	@ 0x80
 800631a:	0249      	lsls	r1, r1, #9
 800631c:	430a      	orrs	r2, r1
 800631e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006320:	2312      	movs	r3, #18
 8006322:	18fb      	adds	r3, r7, r3
 8006324:	781b      	ldrb	r3, [r3, #0]
}
 8006326:	0018      	movs	r0, r3
 8006328:	46bd      	mov	sp, r7
 800632a:	b006      	add	sp, #24
 800632c:	bd80      	pop	{r7, pc}
 800632e:	46c0      	nop			@ (mov r8, r8)
 8006330:	40021000 	.word	0x40021000
 8006334:	40007000 	.word	0x40007000
 8006338:	fffffcff 	.word	0xfffffcff
 800633c:	fffeffff 	.word	0xfffeffff
 8006340:	00001388 	.word	0x00001388
 8006344:	efffffff 	.word	0xefffffff
 8006348:	fffff3ff 	.word	0xfffff3ff
 800634c:	fff3ffff 	.word	0xfff3ffff
 8006350:	ffcfffff 	.word	0xffcfffff
 8006354:	ffffcfff 	.word	0xffffcfff
 8006358:	ffbfffff 	.word	0xffbfffff
 800635c:	ffff3fff 	.word	0xffff3fff

08006360 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	2380      	movs	r3, #128	@ 0x80
 8006370:	029b      	lsls	r3, r3, #10
 8006372:	429a      	cmp	r2, r3
 8006374:	d136      	bne.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006376:	4bcd      	ldr	r3, [pc, #820]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006378:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800637a:	23c0      	movs	r3, #192	@ 0xc0
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4013      	ands	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006382:	4bca      	ldr	r3, [pc, #808]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006386:	2202      	movs	r2, #2
 8006388:	4013      	ands	r3, r2
 800638a:	2b02      	cmp	r3, #2
 800638c:	d108      	bne.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	2380      	movs	r3, #128	@ 0x80
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	429a      	cmp	r2, r3
 8006396:	d103      	bne.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8006398:	2380      	movs	r3, #128	@ 0x80
 800639a:	021b      	lsls	r3, r3, #8
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	e26b      	b.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80063a0:	4bc2      	ldr	r3, [pc, #776]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80063a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063a4:	2202      	movs	r2, #2
 80063a6:	4013      	ands	r3, r2
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d108      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	2380      	movs	r3, #128	@ 0x80
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d103      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 80063b6:	23fa      	movs	r3, #250	@ 0xfa
 80063b8:	01db      	lsls	r3, r3, #7
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	e25c      	b.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80063be:	4bbb      	ldr	r3, [pc, #748]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	2380      	movs	r3, #128	@ 0x80
 80063c4:	029b      	lsls	r3, r3, #10
 80063c6:	401a      	ands	r2, r3
 80063c8:	2380      	movs	r3, #128	@ 0x80
 80063ca:	029b      	lsls	r3, r3, #10
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d000      	beq.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80063d0:	e252      	b.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	23c0      	movs	r3, #192	@ 0xc0
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	429a      	cmp	r2, r3
 80063da:	d000      	beq.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 80063dc:	e24c      	b.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    {
      frequency = HSE_VALUE / 32U;
 80063de:	4bb4      	ldr	r3, [pc, #720]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	e249      	b.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 80063e4:	4bb1      	ldr	r3, [pc, #708]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	2203      	movs	r2, #3
 80063ea:	4013      	ands	r3, r2
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d102      	bne.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 80063f0:	4bb0      	ldr	r3, [pc, #704]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80063f2:	613b      	str	r3, [r7, #16]
 80063f4:	e00a      	b.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 80063f6:	4bad      	ldr	r3, [pc, #692]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	2203      	movs	r2, #3
 80063fc:	4013      	ands	r3, r2
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d102      	bne.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8006402:	4bac      	ldr	r3, [pc, #688]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006404:	613b      	str	r3, [r7, #16]
 8006406:	e001      	b.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800640c:	4ba7      	ldr	r3, [pc, #668]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	091b      	lsrs	r3, r3, #4
 8006412:	2207      	movs	r2, #7
 8006414:	4013      	ands	r3, r2
 8006416:	3301      	adds	r3, #1
 8006418:	0019      	movs	r1, r3
 800641a:	6938      	ldr	r0, [r7, #16]
 800641c:	f7f9 fe72 	bl	8000104 <__udivsi3>
 8006420:	0003      	movs	r3, r0
 8006422:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	2380      	movs	r3, #128	@ 0x80
 8006428:	039b      	lsls	r3, r3, #14
 800642a:	429a      	cmp	r2, r3
 800642c:	d100      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 800642e:	e1e3      	b.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	2380      	movs	r3, #128	@ 0x80
 8006434:	039b      	lsls	r3, r3, #14
 8006436:	429a      	cmp	r2, r3
 8006438:	d900      	bls.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800643a:	e20c      	b.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	2380      	movs	r3, #128	@ 0x80
 8006440:	01db      	lsls	r3, r3, #7
 8006442:	429a      	cmp	r2, r3
 8006444:	d100      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8006446:	e0a5      	b.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	2380      	movs	r3, #128	@ 0x80
 800644c:	01db      	lsls	r3, r3, #7
 800644e:	429a      	cmp	r2, r3
 8006450:	d900      	bls.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006452:	e200      	b.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	2380      	movs	r3, #128	@ 0x80
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	429a      	cmp	r2, r3
 800645c:	d100      	bne.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800645e:	e0fc      	b.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	2380      	movs	r3, #128	@ 0x80
 8006464:	011b      	lsls	r3, r3, #4
 8006466:	429a      	cmp	r2, r3
 8006468:	d900      	bls.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800646a:	e1f4      	b.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	2380      	movs	r3, #128	@ 0x80
 8006470:	00db      	lsls	r3, r3, #3
 8006472:	429a      	cmp	r2, r3
 8006474:	d100      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8006476:	e181      	b.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	2380      	movs	r3, #128	@ 0x80
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	429a      	cmp	r2, r3
 8006480:	d900      	bls.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006482:	e1e8      	b.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	2380      	movs	r3, #128	@ 0x80
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	429a      	cmp	r2, r3
 800648c:	d100      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800648e:	e135      	b.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	2380      	movs	r3, #128	@ 0x80
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	429a      	cmp	r2, r3
 8006498:	d900      	bls.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800649a:	e1dc      	b.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b20      	cmp	r3, #32
 80064a0:	d100      	bne.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80064a2:	e0af      	b.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b20      	cmp	r3, #32
 80064a8:	d900      	bls.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80064aa:	e1d4      	b.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d003      	beq.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	d033      	beq.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 80064b8:	e1cd      	b.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80064ba:	4b7c      	ldr	r3, [pc, #496]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80064bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064be:	2203      	movs	r2, #3
 80064c0:	4013      	ands	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d104      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
          frequency = HAL_RCC_GetPCLK1Freq();
 80064ca:	f7ff fdb9 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 80064ce:	0003      	movs	r3, r0
 80064d0:	617b      	str	r3, [r7, #20]
        break;
 80064d2:	e1c2      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d104      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          frequency = HAL_RCC_GetSysClockFreq();
 80064da:	f7ff fd27 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 80064de:	0003      	movs	r3, r0
 80064e0:	617b      	str	r3, [r7, #20]
        break;
 80064e2:	e1ba      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80064e4:	4b71      	ldr	r3, [pc, #452]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	2380      	movs	r3, #128	@ 0x80
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	401a      	ands	r2, r3
 80064ee:	2380      	movs	r3, #128	@ 0x80
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d105      	bne.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d102      	bne.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = HSI_VALUE;
 80064fc:	4b6d      	ldr	r3, [pc, #436]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80064fe:	617b      	str	r3, [r7, #20]
        break;
 8006500:	e1ab      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006502:	4b6a      	ldr	r3, [pc, #424]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006506:	2202      	movs	r2, #2
 8006508:	4013      	ands	r3, r2
 800650a:	2b02      	cmp	r3, #2
 800650c:	d000      	beq.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 800650e:	e1a4      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b03      	cmp	r3, #3
 8006514:	d000      	beq.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8006516:	e1a0      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          frequency = LSE_VALUE;
 8006518:	2380      	movs	r3, #128	@ 0x80
 800651a:	021b      	lsls	r3, r3, #8
 800651c:	617b      	str	r3, [r7, #20]
        break;
 800651e:	e19c      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006520:	4b62      	ldr	r3, [pc, #392]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006522:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006524:	23c0      	movs	r3, #192	@ 0xc0
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	4013      	ands	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d104      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006532:	f7ff fd85 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8006536:	0003      	movs	r3, r0
 8006538:	617b      	str	r3, [r7, #20]
        break;
 800653a:	e190      	b.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	2380      	movs	r3, #128	@ 0x80
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	429a      	cmp	r2, r3
 8006544:	d104      	bne.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006546:	f7ff fcf1 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 800654a:	0003      	movs	r3, r0
 800654c:	617b      	str	r3, [r7, #20]
        break;
 800654e:	e186      	b.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006550:	4b56      	ldr	r3, [pc, #344]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	2380      	movs	r3, #128	@ 0x80
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	401a      	ands	r2, r3
 800655a:	2380      	movs	r3, #128	@ 0x80
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	429a      	cmp	r2, r3
 8006560:	d107      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	2380      	movs	r3, #128	@ 0x80
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	429a      	cmp	r2, r3
 800656a:	d102      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = HSI_VALUE;
 800656c:	4b51      	ldr	r3, [pc, #324]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800656e:	617b      	str	r3, [r7, #20]
        break;
 8006570:	e175      	b.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006572:	4b4e      	ldr	r3, [pc, #312]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006576:	2202      	movs	r2, #2
 8006578:	4013      	ands	r3, r2
 800657a:	2b02      	cmp	r3, #2
 800657c:	d000      	beq.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800657e:	e16e      	b.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	23c0      	movs	r3, #192	@ 0xc0
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	429a      	cmp	r2, r3
 8006588:	d000      	beq.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800658a:	e168      	b.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          frequency = LSE_VALUE;
 800658c:	2380      	movs	r3, #128	@ 0x80
 800658e:	021b      	lsls	r3, r3, #8
 8006590:	617b      	str	r3, [r7, #20]
        break;
 8006592:	e164      	b.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006594:	4b45      	ldr	r3, [pc, #276]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006598:	0f9b      	lsrs	r3, r3, #30
 800659a:	079b      	lsls	r3, r3, #30
 800659c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d104      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          frequency = HAL_RCC_GetSysClockFreq();
 80065a4:	f7ff fcc2 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 80065a8:	0003      	movs	r3, r0
 80065aa:	617b      	str	r3, [r7, #20]
        break;
 80065ac:	e159      	b.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	2380      	movs	r3, #128	@ 0x80
 80065b2:	061b      	lsls	r3, r3, #24
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d102      	bne.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          frequency = HSI_VALUE;
 80065b8:	4b3e      	ldr	r3, [pc, #248]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80065ba:	617b      	str	r3, [r7, #20]
        break;
 80065bc:	e151      	b.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	2380      	movs	r3, #128	@ 0x80
 80065c2:	05db      	lsls	r3, r3, #23
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d000      	beq.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80065c8:	e14b      	b.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80065ca:	4b38      	ldr	r3, [pc, #224]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	2380      	movs	r3, #128	@ 0x80
 80065d0:	025b      	lsls	r3, r3, #9
 80065d2:	4013      	ands	r3, r2
 80065d4:	d100      	bne.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 80065d6:	e144      	b.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80065d8:	4b34      	ldr	r3, [pc, #208]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	0a1b      	lsrs	r3, r3, #8
 80065de:	227f      	movs	r2, #127	@ 0x7f
 80065e0:	4013      	ands	r3, r2
 80065e2:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	435a      	muls	r2, r3
 80065ea:	4b30      	ldr	r3, [pc, #192]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	0c5b      	lsrs	r3, r3, #17
 80065f0:	211f      	movs	r1, #31
 80065f2:	400b      	ands	r3, r1
 80065f4:	3301      	adds	r3, #1
 80065f6:	0019      	movs	r1, r3
 80065f8:	0010      	movs	r0, r2
 80065fa:	f7f9 fd83 	bl	8000104 <__udivsi3>
 80065fe:	0003      	movs	r3, r0
 8006600:	617b      	str	r3, [r7, #20]
        break;
 8006602:	e12e      	b.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006604:	4b29      	ldr	r3, [pc, #164]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006606:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006608:	23c0      	movs	r3, #192	@ 0xc0
 800660a:	019b      	lsls	r3, r3, #6
 800660c:	4013      	ands	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d104      	bne.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006616:	f7ff fd13 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 800661a:	0003      	movs	r3, r0
 800661c:	617b      	str	r3, [r7, #20]
        break;
 800661e:	e122      	b.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	2380      	movs	r3, #128	@ 0x80
 8006624:	015b      	lsls	r3, r3, #5
 8006626:	429a      	cmp	r2, r3
 8006628:	d104      	bne.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
          frequency = HAL_RCC_GetSysClockFreq();
 800662a:	f7ff fc7f 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 800662e:	0003      	movs	r3, r0
 8006630:	617b      	str	r3, [r7, #20]
        break;
 8006632:	e118      	b.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006634:	4b1d      	ldr	r3, [pc, #116]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	2380      	movs	r3, #128	@ 0x80
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	401a      	ands	r2, r3
 800663e:	2380      	movs	r3, #128	@ 0x80
 8006640:	00db      	lsls	r3, r3, #3
 8006642:	429a      	cmp	r2, r3
 8006644:	d000      	beq.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006646:	e10e      	b.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	2380      	movs	r3, #128	@ 0x80
 800664c:	019b      	lsls	r3, r3, #6
 800664e:	429a      	cmp	r2, r3
 8006650:	d000      	beq.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8006652:	e108      	b.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          frequency = HSI_VALUE;
 8006654:	4b17      	ldr	r3, [pc, #92]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006656:	617b      	str	r3, [r7, #20]
        break;
 8006658:	e105      	b.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 800665a:	4b14      	ldr	r3, [pc, #80]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800665c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800665e:	23c0      	movs	r3, #192	@ 0xc0
 8006660:	021b      	lsls	r3, r3, #8
 8006662:	4013      	ands	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	2380      	movs	r3, #128	@ 0x80
 800666a:	01db      	lsls	r3, r3, #7
 800666c:	429a      	cmp	r2, r3
 800666e:	d123      	bne.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8006670:	4b0e      	ldr	r3, [pc, #56]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006672:	68da      	ldr	r2, [r3, #12]
 8006674:	2380      	movs	r3, #128	@ 0x80
 8006676:	025b      	lsls	r3, r3, #9
 8006678:	4013      	ands	r3, r2
 800667a:	d100      	bne.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800667c:	e0f5      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800667e:	4b0b      	ldr	r3, [pc, #44]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	0a1b      	lsrs	r3, r3, #8
 8006684:	227f      	movs	r2, #127	@ 0x7f
 8006686:	4013      	ands	r3, r2
 8006688:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	435a      	muls	r2, r3
 8006690:	4b06      	ldr	r3, [pc, #24]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	0c5b      	lsrs	r3, r3, #17
 8006696:	211f      	movs	r1, #31
 8006698:	400b      	ands	r3, r1
 800669a:	3301      	adds	r3, #1
 800669c:	0019      	movs	r1, r3
 800669e:	0010      	movs	r0, r2
 80066a0:	f7f9 fd30 	bl	8000104 <__udivsi3>
 80066a4:	0003      	movs	r3, r0
 80066a6:	617b      	str	r3, [r7, #20]
        break;
 80066a8:	e0df      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80066aa:	46c0      	nop			@ (mov r8, r8)
 80066ac:	40021000 	.word	0x40021000
 80066b0:	0007a120 	.word	0x0007a120
 80066b4:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d104      	bne.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          frequency = HAL_RCC_GetSysClockFreq();
 80066be:	f7ff fc35 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 80066c2:	0003      	movs	r3, r0
 80066c4:	617b      	str	r3, [r7, #20]
        break;
 80066c6:	e0d0      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 80066c8:	4b6e      	ldr	r3, [pc, #440]	@ (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	2380      	movs	r3, #128	@ 0x80
 80066ce:	00db      	lsls	r3, r3, #3
 80066d0:	401a      	ands	r2, r3
 80066d2:	2380      	movs	r3, #128	@ 0x80
 80066d4:	00db      	lsls	r3, r3, #3
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d107      	bne.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	2380      	movs	r3, #128	@ 0x80
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d102      	bne.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
          frequency = HSI_VALUE;
 80066e4:	4b68      	ldr	r3, [pc, #416]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80066e6:	617b      	str	r3, [r7, #20]
        break;
 80066e8:	e0bf      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	23c0      	movs	r3, #192	@ 0xc0
 80066ee:	021b      	lsls	r3, r3, #8
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d000      	beq.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80066f4:	e0b9      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 80066f6:	4b65      	ldr	r3, [pc, #404]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80066f8:	617b      	str	r3, [r7, #20]
        break;
 80066fa:	e0b6      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80066fc:	4b61      	ldr	r3, [pc, #388]	@ (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006700:	23c0      	movs	r3, #192	@ 0xc0
 8006702:	031b      	lsls	r3, r3, #12
 8006704:	4013      	ands	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d104      	bne.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800670e:	f7ff fc97 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8006712:	0003      	movs	r3, r0
 8006714:	617b      	str	r3, [r7, #20]
        break;
 8006716:	e0aa      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006718:	4b5a      	ldr	r3, [pc, #360]	@ (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800671a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800671c:	2202      	movs	r2, #2
 800671e:	4013      	ands	r3, r2
 8006720:	2b02      	cmp	r3, #2
 8006722:	d108      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	2380      	movs	r3, #128	@ 0x80
 8006728:	02db      	lsls	r3, r3, #11
 800672a:	429a      	cmp	r2, r3
 800672c:	d103      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = LSI_VALUE;
 800672e:	23fa      	movs	r3, #250	@ 0xfa
 8006730:	01db      	lsls	r3, r3, #7
 8006732:	617b      	str	r3, [r7, #20]
 8006734:	e021      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006736:	4b53      	ldr	r3, [pc, #332]	@ (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	2380      	movs	r3, #128	@ 0x80
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	401a      	ands	r2, r3
 8006740:	2380      	movs	r3, #128	@ 0x80
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	429a      	cmp	r2, r3
 8006746:	d107      	bne.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	2380      	movs	r3, #128	@ 0x80
 800674c:	031b      	lsls	r3, r3, #12
 800674e:	429a      	cmp	r2, r3
 8006750:	d102      	bne.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          frequency = HSI_VALUE;
 8006752:	4b4d      	ldr	r3, [pc, #308]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	e010      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006758:	4b4a      	ldr	r3, [pc, #296]	@ (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800675a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800675c:	2202      	movs	r2, #2
 800675e:	4013      	ands	r3, r2
 8006760:	2b02      	cmp	r3, #2
 8006762:	d000      	beq.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 8006764:	e083      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	23c0      	movs	r3, #192	@ 0xc0
 800676a:	031b      	lsls	r3, r3, #12
 800676c:	429a      	cmp	r2, r3
 800676e:	d000      	beq.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8006770:	e07d      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
          frequency = LSE_VALUE;
 8006772:	2380      	movs	r3, #128	@ 0x80
 8006774:	021b      	lsls	r3, r3, #8
 8006776:	617b      	str	r3, [r7, #20]
        break;
 8006778:	e079      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800677a:	e078      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800677c:	4b41      	ldr	r3, [pc, #260]	@ (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800677e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006780:	23c0      	movs	r3, #192	@ 0xc0
 8006782:	039b      	lsls	r3, r3, #14
 8006784:	4013      	ands	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d104      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          frequency = HAL_RCC_GetPCLK1Freq();
 800678e:	f7ff fc57 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8006792:	0003      	movs	r3, r0
 8006794:	617b      	str	r3, [r7, #20]
        break;
 8006796:	e06c      	b.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006798:	4b3a      	ldr	r3, [pc, #232]	@ (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800679a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800679c:	2202      	movs	r2, #2
 800679e:	4013      	ands	r3, r2
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d108      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	2380      	movs	r3, #128	@ 0x80
 80067a8:	035b      	lsls	r3, r3, #13
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d103      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          frequency = LSI_VALUE;
 80067ae:	23fa      	movs	r3, #250	@ 0xfa
 80067b0:	01db      	lsls	r3, r3, #7
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	e01f      	b.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80067b6:	4b33      	ldr	r3, [pc, #204]	@ (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	2380      	movs	r3, #128	@ 0x80
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	401a      	ands	r2, r3
 80067c0:	2380      	movs	r3, #128	@ 0x80
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d107      	bne.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	2380      	movs	r3, #128	@ 0x80
 80067cc:	039b      	lsls	r3, r3, #14
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d102      	bne.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HSI_VALUE;
 80067d2:	4b2d      	ldr	r3, [pc, #180]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	e00e      	b.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80067d8:	4b2a      	ldr	r3, [pc, #168]	@ (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067dc:	2202      	movs	r2, #2
 80067de:	4013      	ands	r3, r2
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d146      	bne.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	23c0      	movs	r3, #192	@ 0xc0
 80067e8:	039b      	lsls	r3, r3, #14
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d141      	bne.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          frequency = LSE_VALUE;
 80067ee:	2380      	movs	r3, #128	@ 0x80
 80067f0:	021b      	lsls	r3, r3, #8
 80067f2:	617b      	str	r3, [r7, #20]
        break;
 80067f4:	e03d      	b.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 80067f6:	e03c      	b.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 80067f8:	4b22      	ldr	r3, [pc, #136]	@ (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067fc:	2380      	movs	r3, #128	@ 0x80
 80067fe:	03db      	lsls	r3, r3, #15
 8006800:	4013      	ands	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	2380      	movs	r3, #128	@ 0x80
 8006808:	03db      	lsls	r3, r3, #15
 800680a:	429a      	cmp	r2, r3
 800680c:	d11b      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800680e:	4b1d      	ldr	r3, [pc, #116]	@ (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	2380      	movs	r3, #128	@ 0x80
 8006814:	045b      	lsls	r3, r3, #17
 8006816:	4013      	ands	r3, r2
 8006818:	d02d      	beq.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800681a:	4b1a      	ldr	r3, [pc, #104]	@ (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	0a1b      	lsrs	r3, r3, #8
 8006820:	227f      	movs	r2, #127	@ 0x7f
 8006822:	4013      	ands	r3, r2
 8006824:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	435a      	muls	r2, r3
 800682c:	4b15      	ldr	r3, [pc, #84]	@ (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	0e5b      	lsrs	r3, r3, #25
 8006832:	2107      	movs	r1, #7
 8006834:	400b      	ands	r3, r1
 8006836:	3301      	adds	r3, #1
 8006838:	0019      	movs	r1, r3
 800683a:	0010      	movs	r0, r2
 800683c:	f7f9 fc62 	bl	8000104 <__udivsi3>
 8006840:	0003      	movs	r3, r0
 8006842:	617b      	str	r3, [r7, #20]
        break;
 8006844:	e017      	b.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d114      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          frequency = HAL_RCC_GetPCLK1Freq();
 800684c:	f7ff fbf8 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8006850:	0003      	movs	r3, r0
 8006852:	617b      	str	r3, [r7, #20]
        break;
 8006854:	e00f      	b.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        break;
 8006856:	46c0      	nop			@ (mov r8, r8)
 8006858:	e00e      	b.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800685a:	46c0      	nop			@ (mov r8, r8)
 800685c:	e00c      	b.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800685e:	46c0      	nop			@ (mov r8, r8)
 8006860:	e00a      	b.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006862:	46c0      	nop			@ (mov r8, r8)
 8006864:	e008      	b.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006866:	46c0      	nop			@ (mov r8, r8)
 8006868:	e006      	b.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800686a:	46c0      	nop			@ (mov r8, r8)
 800686c:	e004      	b.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800686e:	46c0      	nop			@ (mov r8, r8)
 8006870:	e002      	b.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006872:	46c0      	nop			@ (mov r8, r8)
 8006874:	e000      	b.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006876:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return (frequency);
 8006878:	697b      	ldr	r3, [r7, #20]
}
 800687a:	0018      	movs	r0, r3
 800687c:	46bd      	mov	sp, r7
 800687e:	b006      	add	sp, #24
 8006880:	bd80      	pop	{r7, pc}
 8006882:	46c0      	nop			@ (mov r8, r8)
 8006884:	40021000 	.word	0x40021000
 8006888:	00f42400 	.word	0x00f42400
 800688c:	00bb8000 	.word	0x00bb8000

08006890 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8006890:	b590      	push	{r4, r7, lr}
 8006892:	b08b      	sub	sp, #44	@ 0x2c
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8006898:	2427      	movs	r4, #39	@ 0x27
 800689a:	193b      	adds	r3, r7, r4
 800689c:	2200      	movs	r2, #0
 800689e:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 80068a0:	2326      	movs	r3, #38	@ 0x26
 80068a2:	18fb      	adds	r3, r7, r3
 80068a4:	2200      	movs	r2, #0
 80068a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 80068a8:	4b31      	ldr	r3, [pc, #196]	@ (8006970 <HAL_RCCEx_EnableLSCO+0xe0>)
 80068aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068ac:	4b30      	ldr	r3, [pc, #192]	@ (8006970 <HAL_RCCEx_EnableLSCO+0xe0>)
 80068ae:	2101      	movs	r1, #1
 80068b0:	430a      	orrs	r2, r1
 80068b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80068b4:	4b2e      	ldr	r3, [pc, #184]	@ (8006970 <HAL_RCCEx_EnableLSCO+0xe0>)
 80068b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068b8:	2201      	movs	r2, #1
 80068ba:	4013      	ands	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 80068c0:	2110      	movs	r1, #16
 80068c2:	187b      	adds	r3, r7, r1
 80068c4:	2204      	movs	r2, #4
 80068c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068c8:	187b      	adds	r3, r7, r1
 80068ca:	2203      	movs	r2, #3
 80068cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068ce:	187b      	adds	r3, r7, r1
 80068d0:	2203      	movs	r2, #3
 80068d2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d4:	187b      	adds	r3, r7, r1
 80068d6:	2200      	movs	r2, #0
 80068d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 80068da:	187a      	adds	r2, r7, r1
 80068dc:	23a0      	movs	r3, #160	@ 0xa0
 80068de:	05db      	lsls	r3, r3, #23
 80068e0:	0011      	movs	r1, r2
 80068e2:	0018      	movs	r0, r3
 80068e4:	f7fd fb3a 	bl	8003f5c <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068e8:	4b21      	ldr	r3, [pc, #132]	@ (8006970 <HAL_RCCEx_EnableLSCO+0xe0>)
 80068ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068ec:	2380      	movs	r3, #128	@ 0x80
 80068ee:	055b      	lsls	r3, r3, #21
 80068f0:	4013      	ands	r3, r2
 80068f2:	d110      	bne.n	8006916 <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80068f4:	4b1e      	ldr	r3, [pc, #120]	@ (8006970 <HAL_RCCEx_EnableLSCO+0xe0>)
 80068f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006970 <HAL_RCCEx_EnableLSCO+0xe0>)
 80068fa:	2180      	movs	r1, #128	@ 0x80
 80068fc:	0549      	lsls	r1, r1, #21
 80068fe:	430a      	orrs	r2, r1
 8006900:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006902:	4b1b      	ldr	r3, [pc, #108]	@ (8006970 <HAL_RCCEx_EnableLSCO+0xe0>)
 8006904:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006906:	2380      	movs	r3, #128	@ 0x80
 8006908:	055b      	lsls	r3, r3, #21
 800690a:	4013      	ands	r3, r2
 800690c:	60bb      	str	r3, [r7, #8]
 800690e:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8006910:	193b      	adds	r3, r7, r4
 8006912:	2201      	movs	r2, #1
 8006914:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006916:	4b17      	ldr	r3, [pc, #92]	@ (8006974 <HAL_RCCEx_EnableLSCO+0xe4>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	2380      	movs	r3, #128	@ 0x80
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	4013      	ands	r3, r2
 8006920:	d105      	bne.n	800692e <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 8006922:	f7fe fe77 	bl	8005614 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 8006926:	2326      	movs	r3, #38	@ 0x26
 8006928:	18fb      	adds	r3, r7, r3
 800692a:	2201      	movs	r2, #1
 800692c:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 800692e:	4b10      	ldr	r3, [pc, #64]	@ (8006970 <HAL_RCCEx_EnableLSCO+0xe0>)
 8006930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006932:	4a11      	ldr	r2, [pc, #68]	@ (8006978 <HAL_RCCEx_EnableLSCO+0xe8>)
 8006934:	401a      	ands	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	431a      	orrs	r2, r3
 800693a:	4b0d      	ldr	r3, [pc, #52]	@ (8006970 <HAL_RCCEx_EnableLSCO+0xe0>)
 800693c:	2180      	movs	r1, #128	@ 0x80
 800693e:	0449      	lsls	r1, r1, #17
 8006940:	430a      	orrs	r2, r1
 8006942:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 8006944:	2326      	movs	r3, #38	@ 0x26
 8006946:	18fb      	adds	r3, r7, r3
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d101      	bne.n	8006952 <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 800694e:	f7fe fe6f 	bl	8005630 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 8006952:	2327      	movs	r3, #39	@ 0x27
 8006954:	18fb      	adds	r3, r7, r3
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d105      	bne.n	8006968 <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 800695c:	4b04      	ldr	r3, [pc, #16]	@ (8006970 <HAL_RCCEx_EnableLSCO+0xe0>)
 800695e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006960:	4b03      	ldr	r3, [pc, #12]	@ (8006970 <HAL_RCCEx_EnableLSCO+0xe0>)
 8006962:	4906      	ldr	r1, [pc, #24]	@ (800697c <HAL_RCCEx_EnableLSCO+0xec>)
 8006964:	400a      	ands	r2, r1
 8006966:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8006968:	46c0      	nop			@ (mov r8, r8)
 800696a:	46bd      	mov	sp, r7
 800696c:	b00b      	add	sp, #44	@ 0x2c
 800696e:	bd90      	pop	{r4, r7, pc}
 8006970:	40021000 	.word	0x40021000
 8006974:	40007000 	.word	0x40007000
 8006978:	fcffffff 	.word	0xfcffffff
 800697c:	efffffff 	.word	0xefffffff

08006980 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006980:	b5b0      	push	{r4, r5, r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006988:	230f      	movs	r3, #15
 800698a:	18fb      	adds	r3, r7, r3
 800698c:	2201      	movs	r2, #1
 800698e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d100      	bne.n	8006998 <HAL_RTC_Init+0x18>
 8006996:	e08c      	b.n	8006ab2 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2229      	movs	r2, #41	@ 0x29
 800699c:	5c9b      	ldrb	r3, [r3, r2]
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10b      	bne.n	80069bc <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2228      	movs	r2, #40	@ 0x28
 80069a8:	2100      	movs	r1, #0
 80069aa:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2288      	movs	r2, #136	@ 0x88
 80069b0:	0212      	lsls	r2, r2, #8
 80069b2:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	0018      	movs	r0, r3
 80069b8:	f7fc fcd8 	bl	800336c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2229      	movs	r2, #41	@ 0x29
 80069c0:	2102      	movs	r1, #2
 80069c2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	2210      	movs	r2, #16
 80069cc:	4013      	ands	r3, r2
 80069ce:	2b10      	cmp	r3, #16
 80069d0:	d062      	beq.n	8006a98 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	22ca      	movs	r2, #202	@ 0xca
 80069d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2253      	movs	r2, #83	@ 0x53
 80069e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80069e2:	250f      	movs	r5, #15
 80069e4:	197c      	adds	r4, r7, r5
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	0018      	movs	r0, r3
 80069ea:	f000 fcb9 	bl	8007360 <RTC_EnterInitMode>
 80069ee:	0003      	movs	r3, r0
 80069f0:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80069f2:	0028      	movs	r0, r5
 80069f4:	183b      	adds	r3, r7, r0
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d12c      	bne.n	8006a56 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699a      	ldr	r2, [r3, #24]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	492e      	ldr	r1, [pc, #184]	@ (8006ac0 <HAL_RTC_Init+0x140>)
 8006a08:	400a      	ands	r2, r1
 8006a0a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6999      	ldr	r1, [r3, #24]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689a      	ldr	r2, [r3, #8]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	431a      	orrs	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	6912      	ldr	r2, [r2, #16]
 8006a32:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6919      	ldr	r1, [r3, #16]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	041a      	lsls	r2, r3, #16
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006a48:	183c      	adds	r4, r7, r0
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	f000 fcc9 	bl	80073e4 <RTC_ExitInitMode>
 8006a52:	0003      	movs	r3, r0
 8006a54:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8006a56:	230f      	movs	r3, #15
 8006a58:	18fb      	adds	r3, r7, r3
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d116      	bne.n	8006a8e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	00d2      	lsls	r2, r2, #3
 8006a6c:	08d2      	lsrs	r2, r2, #3
 8006a6e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6999      	ldr	r1, [r3, #24]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	431a      	orrs	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	22ff      	movs	r2, #255	@ 0xff
 8006a94:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a96:	e003      	b.n	8006aa0 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006a98:	230f      	movs	r3, #15
 8006a9a:	18fb      	adds	r3, r7, r3
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8006aa0:	230f      	movs	r3, #15
 8006aa2:	18fb      	adds	r3, r7, r3
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d103      	bne.n	8006ab2 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2229      	movs	r2, #41	@ 0x29
 8006aae:	2101      	movs	r1, #1
 8006ab0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8006ab2:	230f      	movs	r3, #15
 8006ab4:	18fb      	adds	r3, r7, r3
 8006ab6:	781b      	ldrb	r3, [r3, #0]
}
 8006ab8:	0018      	movs	r0, r3
 8006aba:	46bd      	mov	sp, r7
 8006abc:	b004      	add	sp, #16
 8006abe:	bdb0      	pop	{r4, r5, r7, pc}
 8006ac0:	fb8fffbf 	.word	0xfb8fffbf

08006ac4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ac4:	b5b0      	push	{r4, r5, r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2228      	movs	r2, #40	@ 0x28
 8006ad4:	5c9b      	ldrb	r3, [r3, r2]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d101      	bne.n	8006ade <HAL_RTC_SetTime+0x1a>
 8006ada:	2302      	movs	r3, #2
 8006adc:	e092      	b.n	8006c04 <HAL_RTC_SetTime+0x140>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2228      	movs	r2, #40	@ 0x28
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2229      	movs	r2, #41	@ 0x29
 8006aea:	2102      	movs	r1, #2
 8006aec:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	22ca      	movs	r2, #202	@ 0xca
 8006af4:	625a      	str	r2, [r3, #36]	@ 0x24
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2253      	movs	r2, #83	@ 0x53
 8006afc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006afe:	2513      	movs	r5, #19
 8006b00:	197c      	adds	r4, r7, r5
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	0018      	movs	r0, r3
 8006b06:	f000 fc2b 	bl	8007360 <RTC_EnterInitMode>
 8006b0a:	0003      	movs	r3, r0
 8006b0c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8006b0e:	197b      	adds	r3, r7, r5
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d162      	bne.n	8006bdc <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d125      	bne.n	8006b68 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	2240      	movs	r2, #64	@ 0x40
 8006b24:	4013      	ands	r3, r2
 8006b26:	d102      	bne.n	8006b2e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	0018      	movs	r0, r3
 8006b34:	f000 fc9a 	bl	800746c <RTC_ByteToBcd2>
 8006b38:	0003      	movs	r3, r0
 8006b3a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	785b      	ldrb	r3, [r3, #1]
 8006b40:	0018      	movs	r0, r3
 8006b42:	f000 fc93 	bl	800746c <RTC_ByteToBcd2>
 8006b46:	0003      	movs	r3, r0
 8006b48:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b4a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	789b      	ldrb	r3, [r3, #2]
 8006b50:	0018      	movs	r0, r3
 8006b52:	f000 fc8b 	bl	800746c <RTC_ByteToBcd2>
 8006b56:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b58:	0022      	movs	r2, r4
 8006b5a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	78db      	ldrb	r3, [r3, #3]
 8006b60:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b62:	4313      	orrs	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	e017      	b.n	8006b98 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	2240      	movs	r2, #64	@ 0x40
 8006b70:	4013      	ands	r3, r2
 8006b72:	d102      	bne.n	8006b7a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2200      	movs	r2, #0
 8006b78:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	785b      	ldrb	r3, [r3, #1]
 8006b84:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b86:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b8c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	78db      	ldrb	r3, [r3, #3]
 8006b92:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	491b      	ldr	r1, [pc, #108]	@ (8006c0c <HAL_RTC_SetTime+0x148>)
 8006ba0:	400a      	ands	r2, r1
 8006ba2:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	699a      	ldr	r2, [r3, #24]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4918      	ldr	r1, [pc, #96]	@ (8006c10 <HAL_RTC_SetTime+0x14c>)
 8006bb0:	400a      	ands	r2, r1
 8006bb2:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6999      	ldr	r1, [r3, #24]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006bcc:	2313      	movs	r3, #19
 8006bce:	18fc      	adds	r4, r7, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	f000 fc06 	bl	80073e4 <RTC_ExitInitMode>
 8006bd8:	0003      	movs	r3, r0
 8006bda:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	22ff      	movs	r2, #255	@ 0xff
 8006be2:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8006be4:	2313      	movs	r3, #19
 8006be6:	18fb      	adds	r3, r7, r3
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d103      	bne.n	8006bf6 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2229      	movs	r2, #41	@ 0x29
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2228      	movs	r2, #40	@ 0x28
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	5499      	strb	r1, [r3, r2]

  return status;
 8006bfe:	2313      	movs	r3, #19
 8006c00:	18fb      	adds	r3, r7, r3
 8006c02:	781b      	ldrb	r3, [r3, #0]
}
 8006c04:	0018      	movs	r0, r3
 8006c06:	46bd      	mov	sp, r7
 8006c08:	b006      	add	sp, #24
 8006c0a:	bdb0      	pop	{r4, r5, r7, pc}
 8006c0c:	007f7f7f 	.word	0x007f7f7f
 8006c10:	fffbffff 	.word	0xfffbffff

08006c14 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689a      	ldr	r2, [r3, #8]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	045b      	lsls	r3, r3, #17
 8006c32:	0c5a      	lsrs	r2, r3, #17
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a22      	ldr	r2, [pc, #136]	@ (8006cc8 <HAL_RTC_GetTime+0xb4>)
 8006c40:	4013      	ands	r3, r2
 8006c42:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	0c1b      	lsrs	r3, r3, #16
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	223f      	movs	r2, #63	@ 0x3f
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	0a1b      	lsrs	r3, r3, #8
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	227f      	movs	r2, #127	@ 0x7f
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	227f      	movs	r2, #127	@ 0x7f
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	0d9b      	lsrs	r3, r3, #22
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2201      	movs	r2, #1
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d11a      	bne.n	8006cbe <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	f000 fc15 	bl	80074bc <RTC_Bcd2ToByte>
 8006c92:	0003      	movs	r3, r0
 8006c94:	001a      	movs	r2, r3
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	785b      	ldrb	r3, [r3, #1]
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	f000 fc0c 	bl	80074bc <RTC_Bcd2ToByte>
 8006ca4:	0003      	movs	r3, r0
 8006ca6:	001a      	movs	r2, r3
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	789b      	ldrb	r3, [r3, #2]
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f000 fc03 	bl	80074bc <RTC_Bcd2ToByte>
 8006cb6:	0003      	movs	r3, r0
 8006cb8:	001a      	movs	r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	b006      	add	sp, #24
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	007f7f7f 	.word	0x007f7f7f

08006ccc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006ccc:	b5b0      	push	{r4, r5, r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2228      	movs	r2, #40	@ 0x28
 8006cdc:	5c9b      	ldrb	r3, [r3, r2]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_RTC_SetDate+0x1a>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e07e      	b.n	8006de4 <HAL_RTC_SetDate+0x118>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2228      	movs	r2, #40	@ 0x28
 8006cea:	2101      	movs	r1, #1
 8006cec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2229      	movs	r2, #41	@ 0x29
 8006cf2:	2102      	movs	r1, #2
 8006cf4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10e      	bne.n	8006d1a <HAL_RTC_SetDate+0x4e>
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	785b      	ldrb	r3, [r3, #1]
 8006d00:	001a      	movs	r2, r3
 8006d02:	2310      	movs	r3, #16
 8006d04:	4013      	ands	r3, r2
 8006d06:	d008      	beq.n	8006d1a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	785b      	ldrb	r3, [r3, #1]
 8006d0c:	2210      	movs	r2, #16
 8006d0e:	4393      	bics	r3, r2
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	330a      	adds	r3, #10
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d11c      	bne.n	8006d5a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	78db      	ldrb	r3, [r3, #3]
 8006d24:	0018      	movs	r0, r3
 8006d26:	f000 fba1 	bl	800746c <RTC_ByteToBcd2>
 8006d2a:	0003      	movs	r3, r0
 8006d2c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	785b      	ldrb	r3, [r3, #1]
 8006d32:	0018      	movs	r0, r3
 8006d34:	f000 fb9a 	bl	800746c <RTC_ByteToBcd2>
 8006d38:	0003      	movs	r3, r0
 8006d3a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d3c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	789b      	ldrb	r3, [r3, #2]
 8006d42:	0018      	movs	r0, r3
 8006d44:	f000 fb92 	bl	800746c <RTC_ByteToBcd2>
 8006d48:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006d4a:	0022      	movs	r2, r4
 8006d4c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	e00e      	b.n	8006d78 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	78db      	ldrb	r3, [r3, #3]
 8006d5e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	785b      	ldrb	r3, [r3, #1]
 8006d64:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006d66:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006d6c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006d74:	4313      	orrs	r3, r2
 8006d76:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	22ca      	movs	r2, #202	@ 0xca
 8006d7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2253      	movs	r2, #83	@ 0x53
 8006d86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006d88:	2513      	movs	r5, #19
 8006d8a:	197c      	adds	r4, r7, r5
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	0018      	movs	r0, r3
 8006d90:	f000 fae6 	bl	8007360 <RTC_EnterInitMode>
 8006d94:	0003      	movs	r3, r0
 8006d96:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8006d98:	0028      	movs	r0, r5
 8006d9a:	183b      	adds	r3, r7, r0
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10c      	bne.n	8006dbc <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	4910      	ldr	r1, [pc, #64]	@ (8006dec <HAL_RTC_SetDate+0x120>)
 8006daa:	400a      	ands	r2, r1
 8006dac:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006dae:	183c      	adds	r4, r7, r0
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	0018      	movs	r0, r3
 8006db4:	f000 fb16 	bl	80073e4 <RTC_ExitInitMode>
 8006db8:	0003      	movs	r3, r0
 8006dba:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	22ff      	movs	r2, #255	@ 0xff
 8006dc2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8006dc4:	2313      	movs	r3, #19
 8006dc6:	18fb      	adds	r3, r7, r3
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d103      	bne.n	8006dd6 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2229      	movs	r2, #41	@ 0x29
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2228      	movs	r2, #40	@ 0x28
 8006dda:	2100      	movs	r1, #0
 8006ddc:	5499      	strb	r1, [r3, r2]

  return status;
 8006dde:	2313      	movs	r3, #19
 8006de0:	18fb      	adds	r3, r7, r3
 8006de2:	781b      	ldrb	r3, [r3, #0]
}
 8006de4:	0018      	movs	r0, r3
 8006de6:	46bd      	mov	sp, r7
 8006de8:	b006      	add	sp, #24
 8006dea:	bdb0      	pop	{r4, r5, r7, pc}
 8006dec:	00ffff3f 	.word	0x00ffff3f

08006df0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	4a21      	ldr	r2, [pc, #132]	@ (8006e88 <HAL_RTC_GetDate+0x98>)
 8006e04:	4013      	ands	r3, r2
 8006e06:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	0c1b      	lsrs	r3, r3, #16
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	0a1b      	lsrs	r3, r3, #8
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	221f      	movs	r2, #31
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	223f      	movs	r2, #63	@ 0x3f
 8006e28:	4013      	ands	r3, r2
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	0b5b      	lsrs	r3, r3, #13
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2207      	movs	r2, #7
 8006e38:	4013      	ands	r3, r2
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d11a      	bne.n	8006e7c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	78db      	ldrb	r3, [r3, #3]
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	f000 fb36 	bl	80074bc <RTC_Bcd2ToByte>
 8006e50:	0003      	movs	r3, r0
 8006e52:	001a      	movs	r2, r3
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	785b      	ldrb	r3, [r3, #1]
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f000 fb2d 	bl	80074bc <RTC_Bcd2ToByte>
 8006e62:	0003      	movs	r3, r0
 8006e64:	001a      	movs	r2, r3
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	789b      	ldrb	r3, [r3, #2]
 8006e6e:	0018      	movs	r0, r3
 8006e70:	f000 fb24 	bl	80074bc <RTC_Bcd2ToByte>
 8006e74:	0003      	movs	r3, r0
 8006e76:	001a      	movs	r2, r3
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	0018      	movs	r0, r3
 8006e80:	46bd      	mov	sp, r7
 8006e82:	b006      	add	sp, #24
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	46c0      	nop			@ (mov r8, r8)
 8006e88:	00ffff3f 	.word	0x00ffff3f

08006e8c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006e8c:	b590      	push	{r4, r7, lr}
 8006e8e:	b089      	sub	sp, #36	@ 0x24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2228      	movs	r2, #40	@ 0x28
 8006e9c:	5c9b      	ldrb	r3, [r3, r2]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d101      	bne.n	8006ea6 <HAL_RTC_SetAlarm_IT+0x1a>
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	e127      	b.n	80070f6 <HAL_RTC_SetAlarm_IT+0x26a>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2228      	movs	r2, #40	@ 0x28
 8006eaa:	2101      	movs	r1, #1
 8006eac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2229      	movs	r2, #41	@ 0x29
 8006eb2:	2102      	movs	r1, #2
 8006eb4:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d136      	bne.n	8006f2a <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	2240      	movs	r2, #64	@ 0x40
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	d102      	bne.n	8006ece <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	0018      	movs	r0, r3
 8006ed4:	f000 faca 	bl	800746c <RTC_ByteToBcd2>
 8006ed8:	0003      	movs	r3, r0
 8006eda:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	785b      	ldrb	r3, [r3, #1]
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	f000 fac3 	bl	800746c <RTC_ByteToBcd2>
 8006ee6:	0003      	movs	r3, r0
 8006ee8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006eea:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	789b      	ldrb	r3, [r3, #2]
 8006ef0:	0018      	movs	r0, r3
 8006ef2:	f000 fabb 	bl	800746c <RTC_ByteToBcd2>
 8006ef6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006ef8:	0022      	movs	r2, r4
 8006efa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	78db      	ldrb	r3, [r3, #3]
 8006f00:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f02:	431a      	orrs	r2, r3
 8006f04:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	5c9b      	ldrb	r3, [r3, r2]
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	f000 faad 	bl	800746c <RTC_ByteToBcd2>
 8006f12:	0003      	movs	r3, r0
 8006f14:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f16:	0022      	movs	r2, r4
 8006f18:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f1e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f24:	4313      	orrs	r3, r2
 8006f26:	61fb      	str	r3, [r7, #28]
 8006f28:	e022      	b.n	8006f70 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	2240      	movs	r2, #64	@ 0x40
 8006f32:	4013      	ands	r3, r2
 8006f34:	d102      	bne.n	8006f3c <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	785b      	ldrb	r3, [r3, #1]
 8006f46:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f48:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f4e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	78db      	ldrb	r3, [r3, #3]
 8006f54:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f56:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2120      	movs	r1, #32
 8006f5c:	5c5b      	ldrb	r3, [r3, r1]
 8006f5e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f60:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f66:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	22ca      	movs	r2, #202	@ 0xca
 8006f82:	625a      	str	r2, [r3, #36]	@ 0x24
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2253      	movs	r2, #83	@ 0x53
 8006f8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f90:	2380      	movs	r3, #128	@ 0x80
 8006f92:	005b      	lsls	r3, r3, #1
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d14c      	bne.n	8007032 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699a      	ldr	r2, [r3, #24]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4957      	ldr	r1, [pc, #348]	@ (8007100 <HAL_RTC_SetAlarm_IT+0x274>)
 8006fa4:	400a      	ands	r2, r1
 8006fa6:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8006fb8:	f7fc fc96 	bl	80038e8 <HAL_GetTick>
 8006fbc:	0003      	movs	r3, r0
 8006fbe:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006fc0:	e016      	b.n	8006ff0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006fc2:	f7fc fc91 	bl	80038e8 <HAL_GetTick>
 8006fc6:	0002      	movs	r2, r0
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	1ad2      	subs	r2, r2, r3
 8006fcc:	23fa      	movs	r3, #250	@ 0xfa
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d90d      	bls.n	8006ff0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	22ff      	movs	r2, #255	@ 0xff
 8006fda:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2229      	movs	r2, #41	@ 0x29
 8006fe0:	2103      	movs	r1, #3
 8006fe2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2228      	movs	r2, #40	@ 0x28
 8006fe8:	2100      	movs	r1, #0
 8006fea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e082      	b.n	80070f6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	d0e2      	beq.n	8006fc2 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	69fa      	ldr	r2, [r7, #28]
 8007002:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699a      	ldr	r2, [r3, #24]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2180      	movs	r1, #128	@ 0x80
 8007018:	0049      	lsls	r1, r1, #1
 800701a:	430a      	orrs	r2, r1
 800701c:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	699a      	ldr	r2, [r3, #24]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2180      	movs	r1, #128	@ 0x80
 800702a:	0149      	lsls	r1, r1, #5
 800702c:	430a      	orrs	r2, r1
 800702e:	619a      	str	r2, [r3, #24]
 8007030:	e04b      	b.n	80070ca <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	699a      	ldr	r2, [r3, #24]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4931      	ldr	r1, [pc, #196]	@ (8007104 <HAL_RTC_SetAlarm_IT+0x278>)
 800703e:	400a      	ands	r2, r1
 8007040:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2102      	movs	r1, #2
 800704e:	430a      	orrs	r2, r1
 8007050:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8007052:	f7fc fc49 	bl	80038e8 <HAL_GetTick>
 8007056:	0003      	movs	r3, r0
 8007058:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800705a:	e016      	b.n	800708a <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800705c:	f7fc fc44 	bl	80038e8 <HAL_GetTick>
 8007060:	0002      	movs	r2, r0
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	1ad2      	subs	r2, r2, r3
 8007066:	23fa      	movs	r3, #250	@ 0xfa
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	429a      	cmp	r2, r3
 800706c:	d90d      	bls.n	800708a <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	22ff      	movs	r2, #255	@ 0xff
 8007074:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2229      	movs	r2, #41	@ 0x29
 800707a:	2103      	movs	r1, #3
 800707c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2228      	movs	r2, #40	@ 0x28
 8007082:	2100      	movs	r1, #0
 8007084:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e035      	b.n	80070f6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	2202      	movs	r2, #2
 8007092:	4013      	ands	r3, r2
 8007094:	d0e2      	beq.n	800705c <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69fa      	ldr	r2, [r7, #28]
 800709c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	699a      	ldr	r2, [r3, #24]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2180      	movs	r1, #128	@ 0x80
 80070b2:	0089      	lsls	r1, r1, #2
 80070b4:	430a      	orrs	r2, r1
 80070b6:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	699a      	ldr	r2, [r3, #24]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2180      	movs	r1, #128	@ 0x80
 80070c4:	0189      	lsls	r1, r1, #6
 80070c6:	430a      	orrs	r2, r1
 80070c8:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80070ca:	4a0f      	ldr	r2, [pc, #60]	@ (8007108 <HAL_RTC_SetAlarm_IT+0x27c>)
 80070cc:	2380      	movs	r3, #128	@ 0x80
 80070ce:	58d3      	ldr	r3, [r2, r3]
 80070d0:	490d      	ldr	r1, [pc, #52]	@ (8007108 <HAL_RTC_SetAlarm_IT+0x27c>)
 80070d2:	2280      	movs	r2, #128	@ 0x80
 80070d4:	0312      	lsls	r2, r2, #12
 80070d6:	4313      	orrs	r3, r2
 80070d8:	2280      	movs	r2, #128	@ 0x80
 80070da:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	22ff      	movs	r2, #255	@ 0xff
 80070e2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2229      	movs	r2, #41	@ 0x29
 80070e8:	2101      	movs	r1, #1
 80070ea:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2228      	movs	r2, #40	@ 0x28
 80070f0:	2100      	movs	r1, #0
 80070f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	0018      	movs	r0, r3
 80070f8:	46bd      	mov	sp, r7
 80070fa:	b009      	add	sp, #36	@ 0x24
 80070fc:	bd90      	pop	{r4, r7, pc}
 80070fe:	46c0      	nop			@ (mov r8, r8)
 8007100:	fffffeff 	.word	0xfffffeff
 8007104:	fffffdff 	.word	0xfffffdff
 8007108:	40021800 	.word	0x40021800

0800710c <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
 8007118:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	2380      	movs	r3, #128	@ 0x80
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	429a      	cmp	r2, r3
 8007122:	d144      	bne.n	80071ae <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2280      	movs	r2, #128	@ 0x80
 8007128:	0052      	lsls	r2, r2, #1
 800712a:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007132:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800713a:	045b      	lsls	r3, r3, #17
 800713c:	0c5b      	lsrs	r3, r3, #17
 800713e:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	0c1b      	lsrs	r3, r3, #16
 8007144:	b2db      	uxtb	r3, r3
 8007146:	223f      	movs	r2, #63	@ 0x3f
 8007148:	4013      	ands	r3, r2
 800714a:	b2da      	uxtb	r2, r3
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	0a1b      	lsrs	r3, r3, #8
 8007154:	b2db      	uxtb	r3, r3
 8007156:	227f      	movs	r2, #127	@ 0x7f
 8007158:	4013      	ands	r3, r2
 800715a:	b2da      	uxtb	r2, r3
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	227f      	movs	r2, #127	@ 0x7f
 8007166:	4013      	ands	r3, r2
 8007168:	b2da      	uxtb	r2, r3
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	0d9b      	lsrs	r3, r3, #22
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2201      	movs	r2, #1
 8007176:	4013      	ands	r3, r2
 8007178:	b2da      	uxtb	r2, r3
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	0e1b      	lsrs	r3, r3, #24
 8007188:	b2db      	uxtb	r3, r3
 800718a:	223f      	movs	r2, #63	@ 0x3f
 800718c:	4013      	ands	r3, r2
 800718e:	b2d9      	uxtb	r1, r3
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2220      	movs	r2, #32
 8007194:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	2380      	movs	r3, #128	@ 0x80
 800719a:	05db      	lsls	r3, r3, #23
 800719c:	401a      	ands	r2, r3
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	4a3b      	ldr	r2, [pc, #236]	@ (8007294 <HAL_RTC_GetAlarm+0x188>)
 80071a6:	401a      	ands	r2, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	615a      	str	r2, [r3, #20]
 80071ac:	e043      	b.n	8007236 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2280      	movs	r2, #128	@ 0x80
 80071b2:	0092      	lsls	r2, r2, #2
 80071b4:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071bc:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071c4:	045b      	lsls	r3, r3, #17
 80071c6:	0c5b      	lsrs	r3, r3, #17
 80071c8:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	0c1b      	lsrs	r3, r3, #16
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	223f      	movs	r2, #63	@ 0x3f
 80071d2:	4013      	ands	r3, r2
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	0a1b      	lsrs	r3, r3, #8
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	227f      	movs	r2, #127	@ 0x7f
 80071e2:	4013      	ands	r3, r2
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	227f      	movs	r2, #127	@ 0x7f
 80071f0:	4013      	ands	r3, r2
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	0d9b      	lsrs	r3, r3, #22
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2201      	movs	r2, #1
 8007200:	4013      	ands	r3, r2
 8007202:	b2da      	uxtb	r2, r3
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	0e1b      	lsrs	r3, r3, #24
 8007212:	b2db      	uxtb	r3, r3
 8007214:	223f      	movs	r2, #63	@ 0x3f
 8007216:	4013      	ands	r3, r2
 8007218:	b2d9      	uxtb	r1, r3
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2220      	movs	r2, #32
 800721e:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	2380      	movs	r3, #128	@ 0x80
 8007224:	05db      	lsls	r3, r3, #23
 8007226:	401a      	ands	r2, r3
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	4a19      	ldr	r2, [pc, #100]	@ (8007294 <HAL_RTC_GetAlarm+0x188>)
 8007230:	401a      	ands	r2, r3
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d125      	bne.n	8007288 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	0018      	movs	r0, r3
 8007242:	f000 f93b 	bl	80074bc <RTC_Bcd2ToByte>
 8007246:	0003      	movs	r3, r0
 8007248:	001a      	movs	r2, r3
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	785b      	ldrb	r3, [r3, #1]
 8007252:	0018      	movs	r0, r3
 8007254:	f000 f932 	bl	80074bc <RTC_Bcd2ToByte>
 8007258:	0003      	movs	r3, r0
 800725a:	001a      	movs	r2, r3
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	789b      	ldrb	r3, [r3, #2]
 8007264:	0018      	movs	r0, r3
 8007266:	f000 f929 	bl	80074bc <RTC_Bcd2ToByte>
 800726a:	0003      	movs	r3, r0
 800726c:	001a      	movs	r2, r3
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2220      	movs	r2, #32
 8007276:	5c9b      	ldrb	r3, [r3, r2]
 8007278:	0018      	movs	r0, r3
 800727a:	f000 f91f 	bl	80074bc <RTC_Bcd2ToByte>
 800727e:	0003      	movs	r3, r0
 8007280:	0019      	movs	r1, r3
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2220      	movs	r2, #32
 8007286:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	0018      	movs	r0, r3
 800728c:	46bd      	mov	sp, r7
 800728e:	b006      	add	sp, #24
 8007290:	bd80      	pop	{r7, pc}
 8007292:	46c0      	nop			@ (mov r8, r8)
 8007294:	80808080 	.word	0x80808080

08007298 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699a      	ldr	r2, [r3, #24]
 80072a6:	2380      	movs	r3, #128	@ 0x80
 80072a8:	015b      	lsls	r3, r3, #5
 80072aa:	4013      	ands	r3, r2
 80072ac:	d011      	beq.n	80072d2 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b4:	2201      	movs	r2, #1
 80072b6:	4013      	ands	r3, r2
 80072b8:	d00b      	beq.n	80072d2 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2101      	movs	r1, #1
 80072c6:	430a      	orrs	r2, r1
 80072c8:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	0018      	movs	r0, r3
 80072ce:	f7fa ff81 	bl	80021d4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	699a      	ldr	r2, [r3, #24]
 80072d8:	2380      	movs	r3, #128	@ 0x80
 80072da:	019b      	lsls	r3, r3, #6
 80072dc:	4013      	ands	r3, r2
 80072de:	d011      	beq.n	8007304 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e6:	2202      	movs	r2, #2
 80072e8:	4013      	ands	r3, r2
 80072ea:	d00b      	beq.n	8007304 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2102      	movs	r1, #2
 80072f8:	430a      	orrs	r2, r1
 80072fa:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	0018      	movs	r0, r3
 8007300:	f000 f9a4 	bl	800764c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2229      	movs	r2, #41	@ 0x29
 8007308:	2101      	movs	r1, #1
 800730a:	5499      	strb	r1, [r3, r2]
}
 800730c:	46c0      	nop			@ (mov r8, r8)
 800730e:	46bd      	mov	sp, r7
 8007310:	b002      	add	sp, #8
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a0e      	ldr	r2, [pc, #56]	@ (800735c <HAL_RTC_WaitForSynchro+0x48>)
 8007322:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007324:	f7fc fae0 	bl	80038e8 <HAL_GetTick>
 8007328:	0003      	movs	r3, r0
 800732a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800732c:	e00a      	b.n	8007344 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800732e:	f7fc fadb 	bl	80038e8 <HAL_GetTick>
 8007332:	0002      	movs	r2, r0
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	1ad2      	subs	r2, r2, r3
 8007338:	23fa      	movs	r3, #250	@ 0xfa
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	429a      	cmp	r2, r3
 800733e:	d901      	bls.n	8007344 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e006      	b.n	8007352 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	2220      	movs	r2, #32
 800734c:	4013      	ands	r3, r2
 800734e:	d0ee      	beq.n	800732e <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	0018      	movs	r0, r3
 8007354:	46bd      	mov	sp, r7
 8007356:	b004      	add	sp, #16
 8007358:	bd80      	pop	{r7, pc}
 800735a:	46c0      	nop			@ (mov r8, r8)
 800735c:	0001005f 	.word	0x0001005f

08007360 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8007368:	230f      	movs	r3, #15
 800736a:	18fb      	adds	r3, r7, r3
 800736c:	2200      	movs	r2, #0
 800736e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	2240      	movs	r2, #64	@ 0x40
 8007378:	4013      	ands	r3, r2
 800737a:	d12c      	bne.n	80073d6 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2180      	movs	r1, #128	@ 0x80
 8007388:	430a      	orrs	r2, r1
 800738a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800738c:	f7fc faac 	bl	80038e8 <HAL_GetTick>
 8007390:	0003      	movs	r3, r0
 8007392:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007394:	e014      	b.n	80073c0 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007396:	f7fc faa7 	bl	80038e8 <HAL_GetTick>
 800739a:	0002      	movs	r2, r0
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	1ad2      	subs	r2, r2, r3
 80073a0:	200f      	movs	r0, #15
 80073a2:	183b      	adds	r3, r7, r0
 80073a4:	1839      	adds	r1, r7, r0
 80073a6:	7809      	ldrb	r1, [r1, #0]
 80073a8:	7019      	strb	r1, [r3, #0]
 80073aa:	23fa      	movs	r3, #250	@ 0xfa
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d906      	bls.n	80073c0 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80073b2:	183b      	adds	r3, r7, r0
 80073b4:	2203      	movs	r2, #3
 80073b6:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2229      	movs	r2, #41	@ 0x29
 80073bc:	2103      	movs	r1, #3
 80073be:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	2240      	movs	r2, #64	@ 0x40
 80073c8:	4013      	ands	r3, r2
 80073ca:	d104      	bne.n	80073d6 <RTC_EnterInitMode+0x76>
 80073cc:	230f      	movs	r3, #15
 80073ce:	18fb      	adds	r3, r7, r3
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d1df      	bne.n	8007396 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80073d6:	230f      	movs	r3, #15
 80073d8:	18fb      	adds	r3, r7, r3
 80073da:	781b      	ldrb	r3, [r3, #0]
}
 80073dc:	0018      	movs	r0, r3
 80073de:	46bd      	mov	sp, r7
 80073e0:	b004      	add	sp, #16
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80073e4:	b590      	push	{r4, r7, lr}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073ec:	240f      	movs	r4, #15
 80073ee:	193b      	adds	r3, r7, r4
 80073f0:	2200      	movs	r2, #0
 80073f2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80073f4:	4b1c      	ldr	r3, [pc, #112]	@ (8007468 <RTC_ExitInitMode+0x84>)
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007468 <RTC_ExitInitMode+0x84>)
 80073fa:	2180      	movs	r1, #128	@ 0x80
 80073fc:	438a      	bics	r2, r1
 80073fe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007400:	4b19      	ldr	r3, [pc, #100]	@ (8007468 <RTC_ExitInitMode+0x84>)
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	2220      	movs	r2, #32
 8007406:	4013      	ands	r3, r2
 8007408:	d10d      	bne.n	8007426 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	0018      	movs	r0, r3
 800740e:	f7ff ff81 	bl	8007314 <HAL_RTC_WaitForSynchro>
 8007412:	1e03      	subs	r3, r0, #0
 8007414:	d021      	beq.n	800745a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2229      	movs	r2, #41	@ 0x29
 800741a:	2103      	movs	r1, #3
 800741c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800741e:	193b      	adds	r3, r7, r4
 8007420:	2203      	movs	r2, #3
 8007422:	701a      	strb	r2, [r3, #0]
 8007424:	e019      	b.n	800745a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007426:	4b10      	ldr	r3, [pc, #64]	@ (8007468 <RTC_ExitInitMode+0x84>)
 8007428:	699a      	ldr	r2, [r3, #24]
 800742a:	4b0f      	ldr	r3, [pc, #60]	@ (8007468 <RTC_ExitInitMode+0x84>)
 800742c:	2120      	movs	r1, #32
 800742e:	438a      	bics	r2, r1
 8007430:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	0018      	movs	r0, r3
 8007436:	f7ff ff6d 	bl	8007314 <HAL_RTC_WaitForSynchro>
 800743a:	1e03      	subs	r3, r0, #0
 800743c:	d007      	beq.n	800744e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2229      	movs	r2, #41	@ 0x29
 8007442:	2103      	movs	r1, #3
 8007444:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8007446:	230f      	movs	r3, #15
 8007448:	18fb      	adds	r3, r7, r3
 800744a:	2203      	movs	r2, #3
 800744c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800744e:	4b06      	ldr	r3, [pc, #24]	@ (8007468 <RTC_ExitInitMode+0x84>)
 8007450:	699a      	ldr	r2, [r3, #24]
 8007452:	4b05      	ldr	r3, [pc, #20]	@ (8007468 <RTC_ExitInitMode+0x84>)
 8007454:	2120      	movs	r1, #32
 8007456:	430a      	orrs	r2, r1
 8007458:	619a      	str	r2, [r3, #24]
  }

  return status;
 800745a:	230f      	movs	r3, #15
 800745c:	18fb      	adds	r3, r7, r3
 800745e:	781b      	ldrb	r3, [r3, #0]
}
 8007460:	0018      	movs	r0, r3
 8007462:	46bd      	mov	sp, r7
 8007464:	b005      	add	sp, #20
 8007466:	bd90      	pop	{r4, r7, pc}
 8007468:	40002800 	.word	0x40002800

0800746c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	0002      	movs	r2, r0
 8007474:	1dfb      	adds	r3, r7, #7
 8007476:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800747c:	230b      	movs	r3, #11
 800747e:	18fb      	adds	r3, r7, r3
 8007480:	1dfa      	adds	r2, r7, #7
 8007482:	7812      	ldrb	r2, [r2, #0]
 8007484:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8007486:	e008      	b.n	800749a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	3301      	adds	r3, #1
 800748c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800748e:	220b      	movs	r2, #11
 8007490:	18bb      	adds	r3, r7, r2
 8007492:	18ba      	adds	r2, r7, r2
 8007494:	7812      	ldrb	r2, [r2, #0]
 8007496:	3a0a      	subs	r2, #10
 8007498:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800749a:	210b      	movs	r1, #11
 800749c:	187b      	adds	r3, r7, r1
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	2b09      	cmp	r3, #9
 80074a2:	d8f1      	bhi.n	8007488 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	011b      	lsls	r3, r3, #4
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	187b      	adds	r3, r7, r1
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	b2db      	uxtb	r3, r3
}
 80074b4:	0018      	movs	r0, r3
 80074b6:	46bd      	mov	sp, r7
 80074b8:	b004      	add	sp, #16
 80074ba:	bd80      	pop	{r7, pc}

080074bc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	0002      	movs	r2, r0
 80074c4:	1dfb      	adds	r3, r7, #7
 80074c6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80074c8:	1dfb      	adds	r3, r7, #7
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	091b      	lsrs	r3, r3, #4
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	001a      	movs	r2, r3
 80074d2:	0013      	movs	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	189b      	adds	r3, r3, r2
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	1dfb      	adds	r3, r7, #7
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	210f      	movs	r1, #15
 80074e6:	400b      	ands	r3, r1
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	18d3      	adds	r3, r2, r3
 80074ec:	b2db      	uxtb	r3, r3
}
 80074ee:	0018      	movs	r0, r3
 80074f0:	46bd      	mov	sp, r7
 80074f2:	b004      	add	sp, #16
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b086      	sub	sp, #24
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	60f8      	str	r0, [r7, #12]
 80074fe:	60b9      	str	r1, [r7, #8]
 8007500:	607a      	str	r2, [r7, #4]
 8007502:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2228      	movs	r2, #40	@ 0x28
 8007508:	5c9b      	ldrb	r3, [r3, r2]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d101      	bne.n	8007512 <HAL_RTCEx_SetSmoothCalib+0x1c>
 800750e:	2302      	movs	r3, #2
 8007510:	e04f      	b.n	80075b2 <HAL_RTCEx_SetSmoothCalib+0xbc>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2228      	movs	r2, #40	@ 0x28
 8007516:	2101      	movs	r1, #1
 8007518:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2229      	movs	r2, #41	@ 0x29
 800751e:	2102      	movs	r1, #2
 8007520:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	22ca      	movs	r2, #202	@ 0xca
 8007528:	625a      	str	r2, [r3, #36]	@ 0x24
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2253      	movs	r2, #83	@ 0x53
 8007530:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68da      	ldr	r2, [r3, #12]
 8007538:	2380      	movs	r3, #128	@ 0x80
 800753a:	025b      	lsls	r3, r3, #9
 800753c:	4013      	ands	r3, r2
 800753e:	d022      	beq.n	8007586 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8007540:	f7fc f9d2 	bl	80038e8 <HAL_GetTick>
 8007544:	0003      	movs	r3, r0
 8007546:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8007548:	e016      	b.n	8007578 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800754a:	f7fc f9cd 	bl	80038e8 <HAL_GetTick>
 800754e:	0002      	movs	r2, r0
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	1ad2      	subs	r2, r2, r3
 8007554:	23fa      	movs	r3, #250	@ 0xfa
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	429a      	cmp	r2, r3
 800755a:	d90d      	bls.n	8007578 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	22ff      	movs	r2, #255	@ 0xff
 8007562:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2229      	movs	r2, #41	@ 0x29
 8007568:	2103      	movs	r1, #3
 800756a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2228      	movs	r2, #40	@ 0x28
 8007570:	2100      	movs	r1, #0
 8007572:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e01c      	b.n	80075b2 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	2380      	movs	r3, #128	@ 0x80
 8007580:	025b      	lsls	r3, r3, #9
 8007582:	4013      	ands	r3, r2
 8007584:	d1e1      	bne.n	800754a <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	431a      	orrs	r2, r3
 800758c:	0011      	movs	r1, r2
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	22ff      	movs	r2, #255	@ 0xff
 800759e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2229      	movs	r2, #41	@ 0x29
 80075a4:	2101      	movs	r1, #1
 80075a6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2228      	movs	r2, #40	@ 0x28
 80075ac:	2100      	movs	r1, #0
 80075ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	0018      	movs	r0, r3
 80075b4:	46bd      	mov	sp, r7
 80075b6:	b006      	add	sp, #24
 80075b8:	bd80      	pop	{r7, pc}
	...

080075bc <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2228      	movs	r2, #40	@ 0x28
 80075ca:	5c9b      	ldrb	r3, [r3, r2]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d101      	bne.n	80075d4 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80075d0:	2302      	movs	r3, #2
 80075d2:	e035      	b.n	8007640 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2228      	movs	r2, #40	@ 0x28
 80075d8:	2101      	movs	r1, #1
 80075da:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2229      	movs	r2, #41	@ 0x29
 80075e0:	2102      	movs	r1, #2
 80075e2:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	22ca      	movs	r2, #202	@ 0xca
 80075ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2253      	movs	r2, #83	@ 0x53
 80075f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699a      	ldr	r2, [r3, #24]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4912      	ldr	r1, [pc, #72]	@ (8007648 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8007600:	400a      	ands	r2, r1
 8007602:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6999      	ldr	r1, [r3, #24]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	699a      	ldr	r2, [r3, #24]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2180      	movs	r1, #128	@ 0x80
 8007620:	0409      	lsls	r1, r1, #16
 8007622:	430a      	orrs	r2, r1
 8007624:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	22ff      	movs	r2, #255	@ 0xff
 800762c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2229      	movs	r2, #41	@ 0x29
 8007632:	2101      	movs	r1, #1
 8007634:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2228      	movs	r2, #40	@ 0x28
 800763a:	2100      	movs	r1, #0
 800763c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	0018      	movs	r0, r3
 8007642:	46bd      	mov	sp, r7
 8007644:	b002      	add	sp, #8
 8007646:	bd80      	pop	{r7, pc}
 8007648:	fff7ffff 	.word	0xfff7ffff

0800764c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007654:	46c0      	nop			@ (mov r8, r8)
 8007656:	46bd      	mov	sp, r7
 8007658:	b002      	add	sp, #8
 800765a:	bd80      	pop	{r7, pc}

0800765c <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	001a      	movs	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	18d3      	adds	r3, r2, r3
 8007674:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	3301      	adds	r3, #1
 800767a:	33ff      	adds	r3, #255	@ 0xff
 800767c:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	18d3      	adds	r3, r2, r3
 8007686:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	601a      	str	r2, [r3, #0]
}
 800768e:	46c0      	nop			@ (mov r8, r8)
 8007690:	46bd      	mov	sp, r7
 8007692:	b006      	add	sp, #24
 8007694:	bd80      	pop	{r7, pc}

08007696 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	001a      	movs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	18d3      	adds	r3, r2, r3
 80076ac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3301      	adds	r3, #1
 80076b2:	33ff      	adds	r3, #255	@ 0xff
 80076b4:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	18d3      	adds	r3, r2, r3
 80076be:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	681b      	ldr	r3, [r3, #0]
}
 80076c4:	0018      	movs	r0, r3
 80076c6:	46bd      	mov	sp, r7
 80076c8:	b004      	add	sp, #16
 80076ca:	bd80      	pop	{r7, pc}

080076cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e0a8      	b.n	8007830 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d109      	bne.n	80076fa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	2382      	movs	r3, #130	@ 0x82
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d009      	beq.n	8007706 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	61da      	str	r2, [r3, #28]
 80076f8:	e005      	b.n	8007706 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	225d      	movs	r2, #93	@ 0x5d
 8007710:	5c9b      	ldrb	r3, [r3, r2]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d107      	bne.n	8007728 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	225c      	movs	r2, #92	@ 0x5c
 800771c:	2100      	movs	r1, #0
 800771e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	0018      	movs	r0, r3
 8007724:	f7fb fe68 	bl	80033f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	225d      	movs	r2, #93	@ 0x5d
 800772c:	2102      	movs	r1, #2
 800772e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2140      	movs	r1, #64	@ 0x40
 800773c:	438a      	bics	r2, r1
 800773e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	23e0      	movs	r3, #224	@ 0xe0
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	429a      	cmp	r2, r3
 800774a:	d902      	bls.n	8007752 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800774c:	2300      	movs	r3, #0
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	e002      	b.n	8007758 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007752:	2380      	movs	r3, #128	@ 0x80
 8007754:	015b      	lsls	r3, r3, #5
 8007756:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	23f0      	movs	r3, #240	@ 0xf0
 800775e:	011b      	lsls	r3, r3, #4
 8007760:	429a      	cmp	r2, r3
 8007762:	d008      	beq.n	8007776 <HAL_SPI_Init+0xaa>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	23e0      	movs	r3, #224	@ 0xe0
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	429a      	cmp	r2, r3
 800776e:	d002      	beq.n	8007776 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	2382      	movs	r3, #130	@ 0x82
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	401a      	ands	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6899      	ldr	r1, [r3, #8]
 8007784:	2384      	movs	r3, #132	@ 0x84
 8007786:	021b      	lsls	r3, r3, #8
 8007788:	400b      	ands	r3, r1
 800778a:	431a      	orrs	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2102      	movs	r1, #2
 8007792:	400b      	ands	r3, r1
 8007794:	431a      	orrs	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	2101      	movs	r1, #1
 800779c:	400b      	ands	r3, r1
 800779e:	431a      	orrs	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6999      	ldr	r1, [r3, #24]
 80077a4:	2380      	movs	r3, #128	@ 0x80
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	400b      	ands	r3, r1
 80077aa:	431a      	orrs	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	2138      	movs	r1, #56	@ 0x38
 80077b2:	400b      	ands	r3, r1
 80077b4:	431a      	orrs	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	2180      	movs	r1, #128	@ 0x80
 80077bc:	400b      	ands	r3, r1
 80077be:	431a      	orrs	r2, r3
 80077c0:	0011      	movs	r1, r2
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077c6:	2380      	movs	r3, #128	@ 0x80
 80077c8:	019b      	lsls	r3, r3, #6
 80077ca:	401a      	ands	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	430a      	orrs	r2, r1
 80077d2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	0c1b      	lsrs	r3, r3, #16
 80077da:	2204      	movs	r2, #4
 80077dc:	401a      	ands	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e2:	2110      	movs	r1, #16
 80077e4:	400b      	ands	r3, r1
 80077e6:	431a      	orrs	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ec:	2108      	movs	r1, #8
 80077ee:	400b      	ands	r3, r1
 80077f0:	431a      	orrs	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68d9      	ldr	r1, [r3, #12]
 80077f6:	23f0      	movs	r3, #240	@ 0xf0
 80077f8:	011b      	lsls	r3, r3, #4
 80077fa:	400b      	ands	r3, r1
 80077fc:	431a      	orrs	r2, r3
 80077fe:	0011      	movs	r1, r2
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	2380      	movs	r3, #128	@ 0x80
 8007804:	015b      	lsls	r3, r3, #5
 8007806:	401a      	ands	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	69da      	ldr	r2, [r3, #28]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4907      	ldr	r1, [pc, #28]	@ (8007838 <HAL_SPI_Init+0x16c>)
 800781c:	400a      	ands	r2, r1
 800781e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	225d      	movs	r2, #93	@ 0x5d
 800782a:	2101      	movs	r1, #1
 800782c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	0018      	movs	r0, r3
 8007832:	46bd      	mov	sp, r7
 8007834:	b004      	add	sp, #16
 8007836:	bd80      	pop	{r7, pc}
 8007838:	fffff7ff 	.word	0xfffff7ff

0800783c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b088      	sub	sp, #32
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	603b      	str	r3, [r7, #0]
 8007848:	1dbb      	adds	r3, r7, #6
 800784a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800784c:	231f      	movs	r3, #31
 800784e:	18fb      	adds	r3, r7, r3
 8007850:	2200      	movs	r2, #0
 8007852:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	225c      	movs	r2, #92	@ 0x5c
 8007858:	5c9b      	ldrb	r3, [r3, r2]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d101      	bne.n	8007862 <HAL_SPI_Transmit+0x26>
 800785e:	2302      	movs	r3, #2
 8007860:	e147      	b.n	8007af2 <HAL_SPI_Transmit+0x2b6>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	225c      	movs	r2, #92	@ 0x5c
 8007866:	2101      	movs	r1, #1
 8007868:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800786a:	f7fc f83d 	bl	80038e8 <HAL_GetTick>
 800786e:	0003      	movs	r3, r0
 8007870:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007872:	2316      	movs	r3, #22
 8007874:	18fb      	adds	r3, r7, r3
 8007876:	1dba      	adds	r2, r7, #6
 8007878:	8812      	ldrh	r2, [r2, #0]
 800787a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	225d      	movs	r2, #93	@ 0x5d
 8007880:	5c9b      	ldrb	r3, [r3, r2]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b01      	cmp	r3, #1
 8007886:	d004      	beq.n	8007892 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007888:	231f      	movs	r3, #31
 800788a:	18fb      	adds	r3, r7, r3
 800788c:	2202      	movs	r2, #2
 800788e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007890:	e128      	b.n	8007ae4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <HAL_SPI_Transmit+0x64>
 8007898:	1dbb      	adds	r3, r7, #6
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d104      	bne.n	80078aa <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80078a0:	231f      	movs	r3, #31
 80078a2:	18fb      	adds	r3, r7, r3
 80078a4:	2201      	movs	r2, #1
 80078a6:	701a      	strb	r2, [r3, #0]
    goto error;
 80078a8:	e11c      	b.n	8007ae4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	225d      	movs	r2, #93	@ 0x5d
 80078ae:	2103      	movs	r1, #3
 80078b0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	1dba      	adds	r2, r7, #6
 80078c2:	8812      	ldrh	r2, [r2, #0]
 80078c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	1dba      	adds	r2, r7, #6
 80078ca:	8812      	ldrh	r2, [r2, #0]
 80078cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2244      	movs	r2, #68	@ 0x44
 80078d8:	2100      	movs	r1, #0
 80078da:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2246      	movs	r2, #70	@ 0x46
 80078e0:	2100      	movs	r1, #0
 80078e2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	689a      	ldr	r2, [r3, #8]
 80078f4:	2380      	movs	r3, #128	@ 0x80
 80078f6:	021b      	lsls	r3, r3, #8
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d110      	bne.n	800791e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2140      	movs	r1, #64	@ 0x40
 8007908:	438a      	bics	r2, r1
 800790a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2180      	movs	r1, #128	@ 0x80
 8007918:	01c9      	lsls	r1, r1, #7
 800791a:	430a      	orrs	r2, r1
 800791c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2240      	movs	r2, #64	@ 0x40
 8007926:	4013      	ands	r3, r2
 8007928:	2b40      	cmp	r3, #64	@ 0x40
 800792a:	d007      	beq.n	800793c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2140      	movs	r1, #64	@ 0x40
 8007938:	430a      	orrs	r2, r1
 800793a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	68da      	ldr	r2, [r3, #12]
 8007940:	23e0      	movs	r3, #224	@ 0xe0
 8007942:	00db      	lsls	r3, r3, #3
 8007944:	429a      	cmp	r2, r3
 8007946:	d952      	bls.n	80079ee <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d004      	beq.n	800795a <HAL_SPI_Transmit+0x11e>
 8007950:	2316      	movs	r3, #22
 8007952:	18fb      	adds	r3, r7, r3
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d143      	bne.n	80079e2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800795e:	881a      	ldrh	r2, [r3, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800796a:	1c9a      	adds	r2, r3, #2
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007974:	b29b      	uxth	r3, r3
 8007976:	3b01      	subs	r3, #1
 8007978:	b29a      	uxth	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800797e:	e030      	b.n	80079e2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	2202      	movs	r2, #2
 8007988:	4013      	ands	r3, r2
 800798a:	2b02      	cmp	r3, #2
 800798c:	d112      	bne.n	80079b4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007992:	881a      	ldrh	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799e:	1c9a      	adds	r2, r3, #2
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80079b2:	e016      	b.n	80079e2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079b4:	f7fb ff98 	bl	80038e8 <HAL_GetTick>
 80079b8:	0002      	movs	r2, r0
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d802      	bhi.n	80079ca <HAL_SPI_Transmit+0x18e>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	3301      	adds	r3, #1
 80079c8:	d102      	bne.n	80079d0 <HAL_SPI_Transmit+0x194>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d108      	bne.n	80079e2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80079d0:	231f      	movs	r3, #31
 80079d2:	18fb      	adds	r3, r7, r3
 80079d4:	2203      	movs	r2, #3
 80079d6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	225d      	movs	r2, #93	@ 0x5d
 80079dc:	2101      	movs	r1, #1
 80079de:	5499      	strb	r1, [r3, r2]
          goto error;
 80079e0:	e080      	b.n	8007ae4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1c9      	bne.n	8007980 <HAL_SPI_Transmit+0x144>
 80079ec:	e053      	b.n	8007a96 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d004      	beq.n	8007a00 <HAL_SPI_Transmit+0x1c4>
 80079f6:	2316      	movs	r3, #22
 80079f8:	18fb      	adds	r3, r7, r3
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d145      	bne.n	8007a8c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	330c      	adds	r3, #12
 8007a0a:	7812      	ldrb	r2, [r2, #0]
 8007a0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007a26:	e031      	b.n	8007a8c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	4013      	ands	r3, r2
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d113      	bne.n	8007a5e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	330c      	adds	r3, #12
 8007a40:	7812      	ldrb	r2, [r2, #0]
 8007a42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a48:	1c5a      	adds	r2, r3, #1
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a5c:	e016      	b.n	8007a8c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a5e:	f7fb ff43 	bl	80038e8 <HAL_GetTick>
 8007a62:	0002      	movs	r2, r0
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d802      	bhi.n	8007a74 <HAL_SPI_Transmit+0x238>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	3301      	adds	r3, #1
 8007a72:	d102      	bne.n	8007a7a <HAL_SPI_Transmit+0x23e>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d108      	bne.n	8007a8c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8007a7a:	231f      	movs	r3, #31
 8007a7c:	18fb      	adds	r3, r7, r3
 8007a7e:	2203      	movs	r2, #3
 8007a80:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	225d      	movs	r2, #93	@ 0x5d
 8007a86:	2101      	movs	r1, #1
 8007a88:	5499      	strb	r1, [r3, r2]
          goto error;
 8007a8a:	e02b      	b.n	8007ae4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1c8      	bne.n	8007a28 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	f000 fcef 	bl	8008480 <SPI_EndRxTxTransaction>
 8007aa2:	1e03      	subs	r3, r0, #0
 8007aa4:	d002      	beq.n	8007aac <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10a      	bne.n	8007aca <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	613b      	str	r3, [r7, #16]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	613b      	str	r3, [r7, #16]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	613b      	str	r3, [r7, #16]
 8007ac8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d004      	beq.n	8007adc <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8007ad2:	231f      	movs	r3, #31
 8007ad4:	18fb      	adds	r3, r7, r3
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	e003      	b.n	8007ae4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	225d      	movs	r2, #93	@ 0x5d
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	225c      	movs	r2, #92	@ 0x5c
 8007ae8:	2100      	movs	r1, #0
 8007aea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007aec:	231f      	movs	r3, #31
 8007aee:	18fb      	adds	r3, r7, r3
 8007af0:	781b      	ldrb	r3, [r3, #0]
}
 8007af2:	0018      	movs	r0, r3
 8007af4:	46bd      	mov	sp, r7
 8007af6:	b008      	add	sp, #32
 8007af8:	bd80      	pop	{r7, pc}
	...

08007afc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007afc:	b590      	push	{r4, r7, lr}
 8007afe:	b089      	sub	sp, #36	@ 0x24
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	603b      	str	r3, [r7, #0]
 8007b08:	1dbb      	adds	r3, r7, #6
 8007b0a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b0c:	2117      	movs	r1, #23
 8007b0e:	187b      	adds	r3, r7, r1
 8007b10:	2200      	movs	r2, #0
 8007b12:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	225d      	movs	r2, #93	@ 0x5d
 8007b18:	5c9b      	ldrb	r3, [r3, r2]
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d003      	beq.n	8007b28 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8007b20:	187b      	adds	r3, r7, r1
 8007b22:	2202      	movs	r2, #2
 8007b24:	701a      	strb	r2, [r3, #0]
    goto error;
 8007b26:	e12b      	b.n	8007d80 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	2382      	movs	r3, #130	@ 0x82
 8007b2e:	005b      	lsls	r3, r3, #1
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d113      	bne.n	8007b5c <HAL_SPI_Receive+0x60>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10f      	bne.n	8007b5c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	225d      	movs	r2, #93	@ 0x5d
 8007b40:	2104      	movs	r1, #4
 8007b42:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b44:	1dbb      	adds	r3, r7, #6
 8007b46:	881c      	ldrh	r4, [r3, #0]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	68b9      	ldr	r1, [r7, #8]
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	0023      	movs	r3, r4
 8007b54:	f000 f924 	bl	8007da0 <HAL_SPI_TransmitReceive>
 8007b58:	0003      	movs	r3, r0
 8007b5a:	e118      	b.n	8007d8e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	225c      	movs	r2, #92	@ 0x5c
 8007b60:	5c9b      	ldrb	r3, [r3, r2]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d101      	bne.n	8007b6a <HAL_SPI_Receive+0x6e>
 8007b66:	2302      	movs	r3, #2
 8007b68:	e111      	b.n	8007d8e <HAL_SPI_Receive+0x292>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	225c      	movs	r2, #92	@ 0x5c
 8007b6e:	2101      	movs	r1, #1
 8007b70:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b72:	f7fb feb9 	bl	80038e8 <HAL_GetTick>
 8007b76:	0003      	movs	r3, r0
 8007b78:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d003      	beq.n	8007b88 <HAL_SPI_Receive+0x8c>
 8007b80:	1dbb      	adds	r3, r7, #6
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d104      	bne.n	8007b92 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8007b88:	2317      	movs	r3, #23
 8007b8a:	18fb      	adds	r3, r7, r3
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007b90:	e0f6      	b.n	8007d80 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	225d      	movs	r2, #93	@ 0x5d
 8007b96:	2104      	movs	r1, #4
 8007b98:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	1dba      	adds	r2, r7, #6
 8007baa:	2144      	movs	r1, #68	@ 0x44
 8007bac:	8812      	ldrh	r2, [r2, #0]
 8007bae:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	1dba      	adds	r2, r7, #6
 8007bb4:	2146      	movs	r1, #70	@ 0x46
 8007bb6:	8812      	ldrh	r2, [r2, #0]
 8007bb8:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	68da      	ldr	r2, [r3, #12]
 8007bdc:	23e0      	movs	r3, #224	@ 0xe0
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d908      	bls.n	8007bf6 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	496a      	ldr	r1, [pc, #424]	@ (8007d98 <HAL_SPI_Receive+0x29c>)
 8007bf0:	400a      	ands	r2, r1
 8007bf2:	605a      	str	r2, [r3, #4]
 8007bf4:	e008      	b.n	8007c08 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2180      	movs	r1, #128	@ 0x80
 8007c02:	0149      	lsls	r1, r1, #5
 8007c04:	430a      	orrs	r2, r1
 8007c06:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	689a      	ldr	r2, [r3, #8]
 8007c0c:	2380      	movs	r3, #128	@ 0x80
 8007c0e:	021b      	lsls	r3, r3, #8
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d10f      	bne.n	8007c34 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2140      	movs	r1, #64	@ 0x40
 8007c20:	438a      	bics	r2, r1
 8007c22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	495b      	ldr	r1, [pc, #364]	@ (8007d9c <HAL_SPI_Receive+0x2a0>)
 8007c30:	400a      	ands	r2, r1
 8007c32:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2240      	movs	r2, #64	@ 0x40
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	2b40      	cmp	r3, #64	@ 0x40
 8007c40:	d007      	beq.n	8007c52 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2140      	movs	r1, #64	@ 0x40
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	23e0      	movs	r3, #224	@ 0xe0
 8007c58:	00db      	lsls	r3, r3, #3
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d900      	bls.n	8007c60 <HAL_SPI_Receive+0x164>
 8007c5e:	e071      	b.n	8007d44 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007c60:	e035      	b.n	8007cce <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d117      	bne.n	8007ca0 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	330c      	adds	r3, #12
 8007c76:	001a      	movs	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c7c:	7812      	ldrb	r2, [r2, #0]
 8007c7e:	b2d2      	uxtb	r2, r2
 8007c80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c86:	1c5a      	adds	r2, r3, #1
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2246      	movs	r2, #70	@ 0x46
 8007c90:	5a9b      	ldrh	r3, [r3, r2]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	3b01      	subs	r3, #1
 8007c96:	b299      	uxth	r1, r3
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2246      	movs	r2, #70	@ 0x46
 8007c9c:	5299      	strh	r1, [r3, r2]
 8007c9e:	e016      	b.n	8007cce <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ca0:	f7fb fe22 	bl	80038e8 <HAL_GetTick>
 8007ca4:	0002      	movs	r2, r0
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d802      	bhi.n	8007cb6 <HAL_SPI_Receive+0x1ba>
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	d102      	bne.n	8007cbc <HAL_SPI_Receive+0x1c0>
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d108      	bne.n	8007cce <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8007cbc:	2317      	movs	r3, #23
 8007cbe:	18fb      	adds	r3, r7, r3
 8007cc0:	2203      	movs	r2, #3
 8007cc2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	225d      	movs	r2, #93	@ 0x5d
 8007cc8:	2101      	movs	r1, #1
 8007cca:	5499      	strb	r1, [r3, r2]
          goto error;
 8007ccc:	e058      	b.n	8007d80 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2246      	movs	r2, #70	@ 0x46
 8007cd2:	5a9b      	ldrh	r3, [r3, r2]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1c3      	bne.n	8007c62 <HAL_SPI_Receive+0x166>
 8007cda:	e039      	b.n	8007d50 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d115      	bne.n	8007d16 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf4:	b292      	uxth	r2, r2
 8007cf6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfc:	1c9a      	adds	r2, r3, #2
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2246      	movs	r2, #70	@ 0x46
 8007d06:	5a9b      	ldrh	r3, [r3, r2]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	b299      	uxth	r1, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2246      	movs	r2, #70	@ 0x46
 8007d12:	5299      	strh	r1, [r3, r2]
 8007d14:	e016      	b.n	8007d44 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d16:	f7fb fde7 	bl	80038e8 <HAL_GetTick>
 8007d1a:	0002      	movs	r2, r0
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	683a      	ldr	r2, [r7, #0]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d802      	bhi.n	8007d2c <HAL_SPI_Receive+0x230>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	d102      	bne.n	8007d32 <HAL_SPI_Receive+0x236>
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d108      	bne.n	8007d44 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8007d32:	2317      	movs	r3, #23
 8007d34:	18fb      	adds	r3, r7, r3
 8007d36:	2203      	movs	r2, #3
 8007d38:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	225d      	movs	r2, #93	@ 0x5d
 8007d3e:	2101      	movs	r1, #1
 8007d40:	5499      	strb	r1, [r3, r2]
          goto error;
 8007d42:	e01d      	b.n	8007d80 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2246      	movs	r2, #70	@ 0x46
 8007d48:	5a9b      	ldrh	r3, [r3, r2]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1c5      	bne.n	8007cdc <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	0018      	movs	r0, r3
 8007d58:	f000 fb34 	bl	80083c4 <SPI_EndRxTransaction>
 8007d5c:	1e03      	subs	r3, r0, #0
 8007d5e:	d002      	beq.n	8007d66 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2220      	movs	r2, #32
 8007d64:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d004      	beq.n	8007d78 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8007d6e:	2317      	movs	r3, #23
 8007d70:	18fb      	adds	r3, r7, r3
 8007d72:	2201      	movs	r2, #1
 8007d74:	701a      	strb	r2, [r3, #0]
 8007d76:	e003      	b.n	8007d80 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	225d      	movs	r2, #93	@ 0x5d
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	225c      	movs	r2, #92	@ 0x5c
 8007d84:	2100      	movs	r1, #0
 8007d86:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007d88:	2317      	movs	r3, #23
 8007d8a:	18fb      	adds	r3, r7, r3
 8007d8c:	781b      	ldrb	r3, [r3, #0]
}
 8007d8e:	0018      	movs	r0, r3
 8007d90:	46bd      	mov	sp, r7
 8007d92:	b007      	add	sp, #28
 8007d94:	bd90      	pop	{r4, r7, pc}
 8007d96:	46c0      	nop			@ (mov r8, r8)
 8007d98:	ffffefff 	.word	0xffffefff
 8007d9c:	ffffbfff 	.word	0xffffbfff

08007da0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b08a      	sub	sp, #40	@ 0x28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
 8007dac:	001a      	movs	r2, r3
 8007dae:	1cbb      	adds	r3, r7, #2
 8007db0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007db2:	2301      	movs	r3, #1
 8007db4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007db6:	2323      	movs	r3, #35	@ 0x23
 8007db8:	18fb      	adds	r3, r7, r3
 8007dba:	2200      	movs	r2, #0
 8007dbc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	225c      	movs	r2, #92	@ 0x5c
 8007dc2:	5c9b      	ldrb	r3, [r3, r2]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d101      	bne.n	8007dcc <HAL_SPI_TransmitReceive+0x2c>
 8007dc8:	2302      	movs	r3, #2
 8007dca:	e1c4      	b.n	8008156 <HAL_SPI_TransmitReceive+0x3b6>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	225c      	movs	r2, #92	@ 0x5c
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007dd4:	f7fb fd88 	bl	80038e8 <HAL_GetTick>
 8007dd8:	0003      	movs	r3, r0
 8007dda:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ddc:	201b      	movs	r0, #27
 8007dde:	183b      	adds	r3, r7, r0
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	215d      	movs	r1, #93	@ 0x5d
 8007de4:	5c52      	ldrb	r2, [r2, r1]
 8007de6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007dee:	2312      	movs	r3, #18
 8007df0:	18fb      	adds	r3, r7, r3
 8007df2:	1cba      	adds	r2, r7, #2
 8007df4:	8812      	ldrh	r2, [r2, #0]
 8007df6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007df8:	183b      	adds	r3, r7, r0
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d011      	beq.n	8007e24 <HAL_SPI_TransmitReceive+0x84>
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	2382      	movs	r3, #130	@ 0x82
 8007e04:	005b      	lsls	r3, r3, #1
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d107      	bne.n	8007e1a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d103      	bne.n	8007e1a <HAL_SPI_TransmitReceive+0x7a>
 8007e12:	183b      	adds	r3, r7, r0
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	2b04      	cmp	r3, #4
 8007e18:	d004      	beq.n	8007e24 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8007e1a:	2323      	movs	r3, #35	@ 0x23
 8007e1c:	18fb      	adds	r3, r7, r3
 8007e1e:	2202      	movs	r2, #2
 8007e20:	701a      	strb	r2, [r3, #0]
    goto error;
 8007e22:	e191      	b.n	8008148 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d006      	beq.n	8007e38 <HAL_SPI_TransmitReceive+0x98>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d003      	beq.n	8007e38 <HAL_SPI_TransmitReceive+0x98>
 8007e30:	1cbb      	adds	r3, r7, #2
 8007e32:	881b      	ldrh	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d104      	bne.n	8007e42 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007e38:	2323      	movs	r3, #35	@ 0x23
 8007e3a:	18fb      	adds	r3, r7, r3
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007e40:	e182      	b.n	8008148 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	225d      	movs	r2, #93	@ 0x5d
 8007e46:	5c9b      	ldrb	r3, [r3, r2]
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b04      	cmp	r3, #4
 8007e4c:	d003      	beq.n	8007e56 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	225d      	movs	r2, #93	@ 0x5d
 8007e52:	2105      	movs	r1, #5
 8007e54:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	1cba      	adds	r2, r7, #2
 8007e66:	2146      	movs	r1, #70	@ 0x46
 8007e68:	8812      	ldrh	r2, [r2, #0]
 8007e6a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	1cba      	adds	r2, r7, #2
 8007e70:	2144      	movs	r1, #68	@ 0x44
 8007e72:	8812      	ldrh	r2, [r2, #0]
 8007e74:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	1cba      	adds	r2, r7, #2
 8007e80:	8812      	ldrh	r2, [r2, #0]
 8007e82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	1cba      	adds	r2, r7, #2
 8007e88:	8812      	ldrh	r2, [r2, #0]
 8007e8a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	68da      	ldr	r2, [r3, #12]
 8007e9c:	23e0      	movs	r3, #224	@ 0xe0
 8007e9e:	00db      	lsls	r3, r3, #3
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d908      	bls.n	8007eb6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	49ac      	ldr	r1, [pc, #688]	@ (8008160 <HAL_SPI_TransmitReceive+0x3c0>)
 8007eb0:	400a      	ands	r2, r1
 8007eb2:	605a      	str	r2, [r3, #4]
 8007eb4:	e008      	b.n	8007ec8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2180      	movs	r1, #128	@ 0x80
 8007ec2:	0149      	lsls	r1, r1, #5
 8007ec4:	430a      	orrs	r2, r1
 8007ec6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2240      	movs	r2, #64	@ 0x40
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	2b40      	cmp	r3, #64	@ 0x40
 8007ed4:	d007      	beq.n	8007ee6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2140      	movs	r1, #64	@ 0x40
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	23e0      	movs	r3, #224	@ 0xe0
 8007eec:	00db      	lsls	r3, r3, #3
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d800      	bhi.n	8007ef4 <HAL_SPI_TransmitReceive+0x154>
 8007ef2:	e083      	b.n	8007ffc <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d005      	beq.n	8007f08 <HAL_SPI_TransmitReceive+0x168>
 8007efc:	2312      	movs	r3, #18
 8007efe:	18fb      	adds	r3, r7, r3
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d000      	beq.n	8007f08 <HAL_SPI_TransmitReceive+0x168>
 8007f06:	e06d      	b.n	8007fe4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f0c:	881a      	ldrh	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f18:	1c9a      	adds	r2, r3, #2
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	3b01      	subs	r3, #1
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f2c:	e05a      	b.n	8007fe4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	2202      	movs	r2, #2
 8007f36:	4013      	ands	r3, r2
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d11b      	bne.n	8007f74 <HAL_SPI_TransmitReceive+0x1d4>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d016      	beq.n	8007f74 <HAL_SPI_TransmitReceive+0x1d4>
 8007f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d113      	bne.n	8007f74 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f50:	881a      	ldrh	r2, [r3, #0]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f5c:	1c9a      	adds	r2, r3, #2
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d11c      	bne.n	8007fbc <HAL_SPI_TransmitReceive+0x21c>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2246      	movs	r2, #70	@ 0x46
 8007f86:	5a9b      	ldrh	r3, [r3, r2]
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d016      	beq.n	8007fbc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f98:	b292      	uxth	r2, r2
 8007f9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa0:	1c9a      	adds	r2, r3, #2
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2246      	movs	r2, #70	@ 0x46
 8007faa:	5a9b      	ldrh	r3, [r3, r2]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	b299      	uxth	r1, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2246      	movs	r2, #70	@ 0x46
 8007fb6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007fbc:	f7fb fc94 	bl	80038e8 <HAL_GetTick>
 8007fc0:	0002      	movs	r2, r0
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d80b      	bhi.n	8007fe4 <HAL_SPI_TransmitReceive+0x244>
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fce:	3301      	adds	r3, #1
 8007fd0:	d008      	beq.n	8007fe4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8007fd2:	2323      	movs	r3, #35	@ 0x23
 8007fd4:	18fb      	adds	r3, r7, r3
 8007fd6:	2203      	movs	r2, #3
 8007fd8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	225d      	movs	r2, #93	@ 0x5d
 8007fde:	2101      	movs	r1, #1
 8007fe0:	5499      	strb	r1, [r3, r2]
        goto error;
 8007fe2:	e0b1      	b.n	8008148 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d19f      	bne.n	8007f2e <HAL_SPI_TransmitReceive+0x18e>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2246      	movs	r2, #70	@ 0x46
 8007ff2:	5a9b      	ldrh	r3, [r3, r2]
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d199      	bne.n	8007f2e <HAL_SPI_TransmitReceive+0x18e>
 8007ffa:	e089      	b.n	8008110 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d005      	beq.n	8008010 <HAL_SPI_TransmitReceive+0x270>
 8008004:	2312      	movs	r3, #18
 8008006:	18fb      	adds	r3, r7, r3
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d000      	beq.n	8008010 <HAL_SPI_TransmitReceive+0x270>
 800800e:	e074      	b.n	80080fa <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	330c      	adds	r3, #12
 800801a:	7812      	ldrb	r2, [r2, #0]
 800801c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800802c:	b29b      	uxth	r3, r3
 800802e:	3b01      	subs	r3, #1
 8008030:	b29a      	uxth	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008036:	e060      	b.n	80080fa <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	2202      	movs	r2, #2
 8008040:	4013      	ands	r3, r2
 8008042:	2b02      	cmp	r3, #2
 8008044:	d11c      	bne.n	8008080 <HAL_SPI_TransmitReceive+0x2e0>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800804a:	b29b      	uxth	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	d017      	beq.n	8008080 <HAL_SPI_TransmitReceive+0x2e0>
 8008050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008052:	2b01      	cmp	r3, #1
 8008054:	d114      	bne.n	8008080 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	330c      	adds	r3, #12
 8008060:	7812      	ldrb	r2, [r2, #0]
 8008062:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008072:	b29b      	uxth	r3, r3
 8008074:	3b01      	subs	r3, #1
 8008076:	b29a      	uxth	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	2201      	movs	r2, #1
 8008088:	4013      	ands	r3, r2
 800808a:	2b01      	cmp	r3, #1
 800808c:	d11e      	bne.n	80080cc <HAL_SPI_TransmitReceive+0x32c>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2246      	movs	r2, #70	@ 0x46
 8008092:	5a9b      	ldrh	r3, [r3, r2]
 8008094:	b29b      	uxth	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d018      	beq.n	80080cc <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	330c      	adds	r3, #12
 80080a0:	001a      	movs	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a6:	7812      	ldrb	r2, [r2, #0]
 80080a8:	b2d2      	uxtb	r2, r2
 80080aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080b0:	1c5a      	adds	r2, r3, #1
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2246      	movs	r2, #70	@ 0x46
 80080ba:	5a9b      	ldrh	r3, [r3, r2]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	3b01      	subs	r3, #1
 80080c0:	b299      	uxth	r1, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2246      	movs	r2, #70	@ 0x46
 80080c6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80080c8:	2301      	movs	r3, #1
 80080ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80080cc:	f7fb fc0c 	bl	80038e8 <HAL_GetTick>
 80080d0:	0002      	movs	r2, r0
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080d8:	429a      	cmp	r2, r3
 80080da:	d802      	bhi.n	80080e2 <HAL_SPI_TransmitReceive+0x342>
 80080dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080de:	3301      	adds	r3, #1
 80080e0:	d102      	bne.n	80080e8 <HAL_SPI_TransmitReceive+0x348>
 80080e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d108      	bne.n	80080fa <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80080e8:	2323      	movs	r3, #35	@ 0x23
 80080ea:	18fb      	adds	r3, r7, r3
 80080ec:	2203      	movs	r2, #3
 80080ee:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	225d      	movs	r2, #93	@ 0x5d
 80080f4:	2101      	movs	r1, #1
 80080f6:	5499      	strb	r1, [r3, r2]
        goto error;
 80080f8:	e026      	b.n	8008148 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080fe:	b29b      	uxth	r3, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	d199      	bne.n	8008038 <HAL_SPI_TransmitReceive+0x298>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2246      	movs	r2, #70	@ 0x46
 8008108:	5a9b      	ldrh	r3, [r3, r2]
 800810a:	b29b      	uxth	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	d193      	bne.n	8008038 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008110:	69fa      	ldr	r2, [r7, #28]
 8008112:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	0018      	movs	r0, r3
 8008118:	f000 f9b2 	bl	8008480 <SPI_EndRxTxTransaction>
 800811c:	1e03      	subs	r3, r0, #0
 800811e:	d006      	beq.n	800812e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8008120:	2323      	movs	r3, #35	@ 0x23
 8008122:	18fb      	adds	r3, r7, r3
 8008124:	2201      	movs	r2, #1
 8008126:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2220      	movs	r2, #32
 800812c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008132:	2b00      	cmp	r3, #0
 8008134:	d004      	beq.n	8008140 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8008136:	2323      	movs	r3, #35	@ 0x23
 8008138:	18fb      	adds	r3, r7, r3
 800813a:	2201      	movs	r2, #1
 800813c:	701a      	strb	r2, [r3, #0]
 800813e:	e003      	b.n	8008148 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	225d      	movs	r2, #93	@ 0x5d
 8008144:	2101      	movs	r1, #1
 8008146:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	225c      	movs	r2, #92	@ 0x5c
 800814c:	2100      	movs	r1, #0
 800814e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008150:	2323      	movs	r3, #35	@ 0x23
 8008152:	18fb      	adds	r3, r7, r3
 8008154:	781b      	ldrb	r3, [r3, #0]
}
 8008156:	0018      	movs	r0, r3
 8008158:	46bd      	mov	sp, r7
 800815a:	b00a      	add	sp, #40	@ 0x28
 800815c:	bd80      	pop	{r7, pc}
 800815e:	46c0      	nop			@ (mov r8, r8)
 8008160:	ffffefff 	.word	0xffffefff

08008164 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b088      	sub	sp, #32
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	603b      	str	r3, [r7, #0]
 8008170:	1dfb      	adds	r3, r7, #7
 8008172:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008174:	f7fb fbb8 	bl	80038e8 <HAL_GetTick>
 8008178:	0002      	movs	r2, r0
 800817a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817c:	1a9b      	subs	r3, r3, r2
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	18d3      	adds	r3, r2, r3
 8008182:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008184:	f7fb fbb0 	bl	80038e8 <HAL_GetTick>
 8008188:	0003      	movs	r3, r0
 800818a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800818c:	4b3a      	ldr	r3, [pc, #232]	@ (8008278 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	015b      	lsls	r3, r3, #5
 8008192:	0d1b      	lsrs	r3, r3, #20
 8008194:	69fa      	ldr	r2, [r7, #28]
 8008196:	4353      	muls	r3, r2
 8008198:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800819a:	e058      	b.n	800824e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	3301      	adds	r3, #1
 80081a0:	d055      	beq.n	800824e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80081a2:	f7fb fba1 	bl	80038e8 <HAL_GetTick>
 80081a6:	0002      	movs	r2, r0
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	69fa      	ldr	r2, [r7, #28]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d902      	bls.n	80081b8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d142      	bne.n	800823e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	21e0      	movs	r1, #224	@ 0xe0
 80081c4:	438a      	bics	r2, r1
 80081c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	2382      	movs	r3, #130	@ 0x82
 80081ce:	005b      	lsls	r3, r3, #1
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d113      	bne.n	80081fc <SPI_WaitFlagStateUntilTimeout+0x98>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	689a      	ldr	r2, [r3, #8]
 80081d8:	2380      	movs	r3, #128	@ 0x80
 80081da:	021b      	lsls	r3, r3, #8
 80081dc:	429a      	cmp	r2, r3
 80081de:	d005      	beq.n	80081ec <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	689a      	ldr	r2, [r3, #8]
 80081e4:	2380      	movs	r3, #128	@ 0x80
 80081e6:	00db      	lsls	r3, r3, #3
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d107      	bne.n	80081fc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2140      	movs	r1, #64	@ 0x40
 80081f8:	438a      	bics	r2, r1
 80081fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008200:	2380      	movs	r3, #128	@ 0x80
 8008202:	019b      	lsls	r3, r3, #6
 8008204:	429a      	cmp	r2, r3
 8008206:	d110      	bne.n	800822a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	491a      	ldr	r1, [pc, #104]	@ (800827c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008214:	400a      	ands	r2, r1
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2180      	movs	r1, #128	@ 0x80
 8008224:	0189      	lsls	r1, r1, #6
 8008226:	430a      	orrs	r2, r1
 8008228:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	225d      	movs	r2, #93	@ 0x5d
 800822e:	2101      	movs	r1, #1
 8008230:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	225c      	movs	r2, #92	@ 0x5c
 8008236:	2100      	movs	r1, #0
 8008238:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e017      	b.n	800826e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008244:	2300      	movs	r3, #0
 8008246:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	3b01      	subs	r3, #1
 800824c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	4013      	ands	r3, r2
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	425a      	negs	r2, r3
 800825e:	4153      	adcs	r3, r2
 8008260:	b2db      	uxtb	r3, r3
 8008262:	001a      	movs	r2, r3
 8008264:	1dfb      	adds	r3, r7, #7
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	429a      	cmp	r2, r3
 800826a:	d197      	bne.n	800819c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	0018      	movs	r0, r3
 8008270:	46bd      	mov	sp, r7
 8008272:	b008      	add	sp, #32
 8008274:	bd80      	pop	{r7, pc}
 8008276:	46c0      	nop			@ (mov r8, r8)
 8008278:	20000090 	.word	0x20000090
 800827c:	ffffdfff 	.word	0xffffdfff

08008280 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b08a      	sub	sp, #40	@ 0x28
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800828e:	2317      	movs	r3, #23
 8008290:	18fb      	adds	r3, r7, r3
 8008292:	2200      	movs	r2, #0
 8008294:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008296:	f7fb fb27 	bl	80038e8 <HAL_GetTick>
 800829a:	0002      	movs	r2, r0
 800829c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829e:	1a9b      	subs	r3, r3, r2
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	18d3      	adds	r3, r2, r3
 80082a4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80082a6:	f7fb fb1f 	bl	80038e8 <HAL_GetTick>
 80082aa:	0003      	movs	r3, r0
 80082ac:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	330c      	adds	r3, #12
 80082b4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80082b6:	4b41      	ldr	r3, [pc, #260]	@ (80083bc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	0013      	movs	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	189b      	adds	r3, r3, r2
 80082c0:	00da      	lsls	r2, r3, #3
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	0d1b      	lsrs	r3, r3, #20
 80082c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082c8:	4353      	muls	r3, r2
 80082ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80082cc:	e068      	b.n	80083a0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	23c0      	movs	r3, #192	@ 0xc0
 80082d2:	00db      	lsls	r3, r3, #3
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d10a      	bne.n	80082ee <SPI_WaitFifoStateUntilTimeout+0x6e>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d107      	bne.n	80082ee <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	2117      	movs	r1, #23
 80082e6:	187b      	adds	r3, r7, r1
 80082e8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80082ea:	187b      	adds	r3, r7, r1
 80082ec:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	3301      	adds	r3, #1
 80082f2:	d055      	beq.n	80083a0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082f4:	f7fb faf8 	bl	80038e8 <HAL_GetTick>
 80082f8:	0002      	movs	r2, r0
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008300:	429a      	cmp	r2, r3
 8008302:	d902      	bls.n	800830a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008306:	2b00      	cmp	r3, #0
 8008308:	d142      	bne.n	8008390 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	685a      	ldr	r2, [r3, #4]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	21e0      	movs	r1, #224	@ 0xe0
 8008316:	438a      	bics	r2, r1
 8008318:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	2382      	movs	r3, #130	@ 0x82
 8008320:	005b      	lsls	r3, r3, #1
 8008322:	429a      	cmp	r2, r3
 8008324:	d113      	bne.n	800834e <SPI_WaitFifoStateUntilTimeout+0xce>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	689a      	ldr	r2, [r3, #8]
 800832a:	2380      	movs	r3, #128	@ 0x80
 800832c:	021b      	lsls	r3, r3, #8
 800832e:	429a      	cmp	r2, r3
 8008330:	d005      	beq.n	800833e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	689a      	ldr	r2, [r3, #8]
 8008336:	2380      	movs	r3, #128	@ 0x80
 8008338:	00db      	lsls	r3, r3, #3
 800833a:	429a      	cmp	r2, r3
 800833c:	d107      	bne.n	800834e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2140      	movs	r1, #64	@ 0x40
 800834a:	438a      	bics	r2, r1
 800834c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008352:	2380      	movs	r3, #128	@ 0x80
 8008354:	019b      	lsls	r3, r3, #6
 8008356:	429a      	cmp	r2, r3
 8008358:	d110      	bne.n	800837c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4916      	ldr	r1, [pc, #88]	@ (80083c0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8008366:	400a      	ands	r2, r1
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2180      	movs	r1, #128	@ 0x80
 8008376:	0189      	lsls	r1, r1, #6
 8008378:	430a      	orrs	r2, r1
 800837a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	225d      	movs	r2, #93	@ 0x5d
 8008380:	2101      	movs	r1, #1
 8008382:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	225c      	movs	r2, #92	@ 0x5c
 8008388:	2100      	movs	r1, #0
 800838a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e010      	b.n	80083b2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d101      	bne.n	800839a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	3b01      	subs	r3, #1
 800839e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	4013      	ands	r3, r2
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d18e      	bne.n	80082ce <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	0018      	movs	r0, r3
 80083b4:	46bd      	mov	sp, r7
 80083b6:	b00a      	add	sp, #40	@ 0x28
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	46c0      	nop			@ (mov r8, r8)
 80083bc:	20000090 	.word	0x20000090
 80083c0:	ffffdfff 	.word	0xffffdfff

080083c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af02      	add	r7, sp, #8
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	2382      	movs	r3, #130	@ 0x82
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	429a      	cmp	r2, r3
 80083da:	d113      	bne.n	8008404 <SPI_EndRxTransaction+0x40>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	2380      	movs	r3, #128	@ 0x80
 80083e2:	021b      	lsls	r3, r3, #8
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d005      	beq.n	80083f4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	2380      	movs	r3, #128	@ 0x80
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d107      	bne.n	8008404 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2140      	movs	r1, #64	@ 0x40
 8008400:	438a      	bics	r2, r1
 8008402:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	0013      	movs	r3, r2
 800840e:	2200      	movs	r2, #0
 8008410:	2180      	movs	r1, #128	@ 0x80
 8008412:	f7ff fea7 	bl	8008164 <SPI_WaitFlagStateUntilTimeout>
 8008416:	1e03      	subs	r3, r0, #0
 8008418:	d007      	beq.n	800842a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800841e:	2220      	movs	r2, #32
 8008420:	431a      	orrs	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	e026      	b.n	8008478 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	685a      	ldr	r2, [r3, #4]
 800842e:	2382      	movs	r3, #130	@ 0x82
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	429a      	cmp	r2, r3
 8008434:	d11f      	bne.n	8008476 <SPI_EndRxTransaction+0xb2>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	689a      	ldr	r2, [r3, #8]
 800843a:	2380      	movs	r3, #128	@ 0x80
 800843c:	021b      	lsls	r3, r3, #8
 800843e:	429a      	cmp	r2, r3
 8008440:	d005      	beq.n	800844e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	2380      	movs	r3, #128	@ 0x80
 8008448:	00db      	lsls	r3, r3, #3
 800844a:	429a      	cmp	r2, r3
 800844c:	d113      	bne.n	8008476 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	23c0      	movs	r3, #192	@ 0xc0
 8008452:	00d9      	lsls	r1, r3, #3
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	0013      	movs	r3, r2
 800845c:	2200      	movs	r2, #0
 800845e:	f7ff ff0f 	bl	8008280 <SPI_WaitFifoStateUntilTimeout>
 8008462:	1e03      	subs	r3, r0, #0
 8008464:	d007      	beq.n	8008476 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800846a:	2220      	movs	r2, #32
 800846c:	431a      	orrs	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e000      	b.n	8008478 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	0018      	movs	r0, r3
 800847a:	46bd      	mov	sp, r7
 800847c:	b004      	add	sp, #16
 800847e:	bd80      	pop	{r7, pc}

08008480 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af02      	add	r7, sp, #8
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	23c0      	movs	r3, #192	@ 0xc0
 8008490:	0159      	lsls	r1, r3, #5
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	0013      	movs	r3, r2
 800849a:	2200      	movs	r2, #0
 800849c:	f7ff fef0 	bl	8008280 <SPI_WaitFifoStateUntilTimeout>
 80084a0:	1e03      	subs	r3, r0, #0
 80084a2:	d007      	beq.n	80084b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084a8:	2220      	movs	r2, #32
 80084aa:	431a      	orrs	r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e027      	b.n	8008504 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	0013      	movs	r3, r2
 80084be:	2200      	movs	r2, #0
 80084c0:	2180      	movs	r1, #128	@ 0x80
 80084c2:	f7ff fe4f 	bl	8008164 <SPI_WaitFlagStateUntilTimeout>
 80084c6:	1e03      	subs	r3, r0, #0
 80084c8:	d007      	beq.n	80084da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084ce:	2220      	movs	r2, #32
 80084d0:	431a      	orrs	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e014      	b.n	8008504 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	23c0      	movs	r3, #192	@ 0xc0
 80084de:	00d9      	lsls	r1, r3, #3
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	0013      	movs	r3, r2
 80084e8:	2200      	movs	r2, #0
 80084ea:	f7ff fec9 	bl	8008280 <SPI_WaitFifoStateUntilTimeout>
 80084ee:	1e03      	subs	r3, r0, #0
 80084f0:	d007      	beq.n	8008502 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084f6:	2220      	movs	r2, #32
 80084f8:	431a      	orrs	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e000      	b.n	8008504 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	0018      	movs	r0, r3
 8008506:	46bd      	mov	sp, r7
 8008508:	b004      	add	sp, #16
 800850a:	bd80      	pop	{r7, pc}

0800850c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e04a      	b.n	80085b4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	223d      	movs	r2, #61	@ 0x3d
 8008522:	5c9b      	ldrb	r3, [r3, r2]
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d107      	bne.n	800853a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	223c      	movs	r2, #60	@ 0x3c
 800852e:	2100      	movs	r1, #0
 8008530:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	0018      	movs	r0, r3
 8008536:	f7fb f839 	bl	80035ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	223d      	movs	r2, #61	@ 0x3d
 800853e:	2102      	movs	r1, #2
 8008540:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	3304      	adds	r3, #4
 800854a:	0019      	movs	r1, r3
 800854c:	0010      	movs	r0, r2
 800854e:	f000 fc87 	bl	8008e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2248      	movs	r2, #72	@ 0x48
 8008556:	2101      	movs	r1, #1
 8008558:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	223e      	movs	r2, #62	@ 0x3e
 800855e:	2101      	movs	r1, #1
 8008560:	5499      	strb	r1, [r3, r2]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	223f      	movs	r2, #63	@ 0x3f
 8008566:	2101      	movs	r1, #1
 8008568:	5499      	strb	r1, [r3, r2]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2240      	movs	r2, #64	@ 0x40
 800856e:	2101      	movs	r1, #1
 8008570:	5499      	strb	r1, [r3, r2]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2241      	movs	r2, #65	@ 0x41
 8008576:	2101      	movs	r1, #1
 8008578:	5499      	strb	r1, [r3, r2]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2242      	movs	r2, #66	@ 0x42
 800857e:	2101      	movs	r1, #1
 8008580:	5499      	strb	r1, [r3, r2]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2243      	movs	r2, #67	@ 0x43
 8008586:	2101      	movs	r1, #1
 8008588:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2244      	movs	r2, #68	@ 0x44
 800858e:	2101      	movs	r1, #1
 8008590:	5499      	strb	r1, [r3, r2]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2245      	movs	r2, #69	@ 0x45
 8008596:	2101      	movs	r1, #1
 8008598:	5499      	strb	r1, [r3, r2]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2246      	movs	r2, #70	@ 0x46
 800859e:	2101      	movs	r1, #1
 80085a0:	5499      	strb	r1, [r3, r2]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2247      	movs	r2, #71	@ 0x47
 80085a6:	2101      	movs	r1, #1
 80085a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	223d      	movs	r2, #61	@ 0x3d
 80085ae:	2101      	movs	r1, #1
 80085b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	0018      	movs	r0, r3
 80085b6:	46bd      	mov	sp, r7
 80085b8:	b002      	add	sp, #8
 80085ba:	bd80      	pop	{r7, pc}

080085bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	223d      	movs	r2, #61	@ 0x3d
 80085c8:	5c9b      	ldrb	r3, [r3, r2]
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d001      	beq.n	80085d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e035      	b.n	8008640 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	223d      	movs	r2, #61	@ 0x3d
 80085d8:	2102      	movs	r1, #2
 80085da:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a19      	ldr	r2, [pc, #100]	@ (8008648 <HAL_TIM_Base_Start+0x8c>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d00a      	beq.n	80085fc <HAL_TIM_Base_Start+0x40>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	2380      	movs	r3, #128	@ 0x80
 80085ec:	05db      	lsls	r3, r3, #23
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d004      	beq.n	80085fc <HAL_TIM_Base_Start+0x40>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a15      	ldr	r2, [pc, #84]	@ (800864c <HAL_TIM_Base_Start+0x90>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d116      	bne.n	800862a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	4a13      	ldr	r2, [pc, #76]	@ (8008650 <HAL_TIM_Base_Start+0x94>)
 8008604:	4013      	ands	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2b06      	cmp	r3, #6
 800860c:	d016      	beq.n	800863c <HAL_TIM_Base_Start+0x80>
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	2380      	movs	r3, #128	@ 0x80
 8008612:	025b      	lsls	r3, r3, #9
 8008614:	429a      	cmp	r2, r3
 8008616:	d011      	beq.n	800863c <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2101      	movs	r1, #1
 8008624:	430a      	orrs	r2, r1
 8008626:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008628:	e008      	b.n	800863c <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2101      	movs	r1, #1
 8008636:	430a      	orrs	r2, r1
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	e000      	b.n	800863e <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800863c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	0018      	movs	r0, r3
 8008642:	46bd      	mov	sp, r7
 8008644:	b004      	add	sp, #16
 8008646:	bd80      	pop	{r7, pc}
 8008648:	40012c00 	.word	0x40012c00
 800864c:	40000400 	.word	0x40000400
 8008650:	00010007 	.word	0x00010007

08008654 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	4a0d      	ldr	r2, [pc, #52]	@ (8008698 <HAL_TIM_Base_Stop+0x44>)
 8008664:	4013      	ands	r3, r2
 8008666:	d10d      	bne.n	8008684 <HAL_TIM_Base_Stop+0x30>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	4a0b      	ldr	r2, [pc, #44]	@ (800869c <HAL_TIM_Base_Stop+0x48>)
 8008670:	4013      	ands	r3, r2
 8008672:	d107      	bne.n	8008684 <HAL_TIM_Base_Stop+0x30>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2101      	movs	r1, #1
 8008680:	438a      	bics	r2, r1
 8008682:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	223d      	movs	r2, #61	@ 0x3d
 8008688:	2101      	movs	r1, #1
 800868a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	0018      	movs	r0, r3
 8008690:	46bd      	mov	sp, r7
 8008692:	b002      	add	sp, #8
 8008694:	bd80      	pop	{r7, pc}
 8008696:	46c0      	nop			@ (mov r8, r8)
 8008698:	00001111 	.word	0x00001111
 800869c:	00000444 	.word	0x00000444

080086a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	223d      	movs	r2, #61	@ 0x3d
 80086ac:	5c9b      	ldrb	r3, [r3, r2]
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d001      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e03d      	b.n	8008734 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	223d      	movs	r2, #61	@ 0x3d
 80086bc:	2102      	movs	r1, #2
 80086be:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68da      	ldr	r2, [r3, #12]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2101      	movs	r1, #1
 80086cc:	430a      	orrs	r2, r1
 80086ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a19      	ldr	r2, [pc, #100]	@ (800873c <HAL_TIM_Base_Start_IT+0x9c>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d00a      	beq.n	80086f0 <HAL_TIM_Base_Start_IT+0x50>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	2380      	movs	r3, #128	@ 0x80
 80086e0:	05db      	lsls	r3, r3, #23
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d004      	beq.n	80086f0 <HAL_TIM_Base_Start_IT+0x50>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a15      	ldr	r2, [pc, #84]	@ (8008740 <HAL_TIM_Base_Start_IT+0xa0>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d116      	bne.n	800871e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	4a13      	ldr	r2, [pc, #76]	@ (8008744 <HAL_TIM_Base_Start_IT+0xa4>)
 80086f8:	4013      	ands	r3, r2
 80086fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2b06      	cmp	r3, #6
 8008700:	d016      	beq.n	8008730 <HAL_TIM_Base_Start_IT+0x90>
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	2380      	movs	r3, #128	@ 0x80
 8008706:	025b      	lsls	r3, r3, #9
 8008708:	429a      	cmp	r2, r3
 800870a:	d011      	beq.n	8008730 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2101      	movs	r1, #1
 8008718:	430a      	orrs	r2, r1
 800871a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800871c:	e008      	b.n	8008730 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2101      	movs	r1, #1
 800872a:	430a      	orrs	r2, r1
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	e000      	b.n	8008732 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008730:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	0018      	movs	r0, r3
 8008736:	46bd      	mov	sp, r7
 8008738:	b004      	add	sp, #16
 800873a:	bd80      	pop	{r7, pc}
 800873c:	40012c00 	.word	0x40012c00
 8008740:	40000400 	.word	0x40000400
 8008744:	00010007 	.word	0x00010007

08008748 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68da      	ldr	r2, [r3, #12]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2101      	movs	r1, #1
 800875c:	438a      	bics	r2, r1
 800875e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	4a0d      	ldr	r2, [pc, #52]	@ (800879c <HAL_TIM_Base_Stop_IT+0x54>)
 8008768:	4013      	ands	r3, r2
 800876a:	d10d      	bne.n	8008788 <HAL_TIM_Base_Stop_IT+0x40>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	4a0b      	ldr	r2, [pc, #44]	@ (80087a0 <HAL_TIM_Base_Stop_IT+0x58>)
 8008774:	4013      	ands	r3, r2
 8008776:	d107      	bne.n	8008788 <HAL_TIM_Base_Stop_IT+0x40>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2101      	movs	r1, #1
 8008784:	438a      	bics	r2, r1
 8008786:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	223d      	movs	r2, #61	@ 0x3d
 800878c:	2101      	movs	r1, #1
 800878e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	0018      	movs	r0, r3
 8008794:	46bd      	mov	sp, r7
 8008796:	b002      	add	sp, #8
 8008798:	bd80      	pop	{r7, pc}
 800879a:	46c0      	nop			@ (mov r8, r8)
 800879c:	00001111 	.word	0x00001111
 80087a0:	00000444 	.word	0x00000444

080087a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e04a      	b.n	800884c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	223d      	movs	r2, #61	@ 0x3d
 80087ba:	5c9b      	ldrb	r3, [r3, r2]
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d107      	bne.n	80087d2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	223c      	movs	r2, #60	@ 0x3c
 80087c6:	2100      	movs	r1, #0
 80087c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	0018      	movs	r0, r3
 80087ce:	f7fa fed1 	bl	8003574 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	223d      	movs	r2, #61	@ 0x3d
 80087d6:	2102      	movs	r1, #2
 80087d8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	3304      	adds	r3, #4
 80087e2:	0019      	movs	r1, r3
 80087e4:	0010      	movs	r0, r2
 80087e6:	f000 fb3b 	bl	8008e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2248      	movs	r2, #72	@ 0x48
 80087ee:	2101      	movs	r1, #1
 80087f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	223e      	movs	r2, #62	@ 0x3e
 80087f6:	2101      	movs	r1, #1
 80087f8:	5499      	strb	r1, [r3, r2]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	223f      	movs	r2, #63	@ 0x3f
 80087fe:	2101      	movs	r1, #1
 8008800:	5499      	strb	r1, [r3, r2]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2240      	movs	r2, #64	@ 0x40
 8008806:	2101      	movs	r1, #1
 8008808:	5499      	strb	r1, [r3, r2]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2241      	movs	r2, #65	@ 0x41
 800880e:	2101      	movs	r1, #1
 8008810:	5499      	strb	r1, [r3, r2]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2242      	movs	r2, #66	@ 0x42
 8008816:	2101      	movs	r1, #1
 8008818:	5499      	strb	r1, [r3, r2]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2243      	movs	r2, #67	@ 0x43
 800881e:	2101      	movs	r1, #1
 8008820:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2244      	movs	r2, #68	@ 0x44
 8008826:	2101      	movs	r1, #1
 8008828:	5499      	strb	r1, [r3, r2]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2245      	movs	r2, #69	@ 0x45
 800882e:	2101      	movs	r1, #1
 8008830:	5499      	strb	r1, [r3, r2]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2246      	movs	r2, #70	@ 0x46
 8008836:	2101      	movs	r1, #1
 8008838:	5499      	strb	r1, [r3, r2]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2247      	movs	r2, #71	@ 0x47
 800883e:	2101      	movs	r1, #1
 8008840:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	223d      	movs	r2, #61	@ 0x3d
 8008846:	2101      	movs	r1, #1
 8008848:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	0018      	movs	r0, r3
 800884e:	46bd      	mov	sp, r7
 8008850:	b002      	add	sp, #8
 8008852:	bd80      	pop	{r7, pc}

08008854 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d108      	bne.n	8008876 <HAL_TIM_PWM_Start+0x22>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	223e      	movs	r2, #62	@ 0x3e
 8008868:	5c9b      	ldrb	r3, [r3, r2]
 800886a:	b2db      	uxtb	r3, r3
 800886c:	3b01      	subs	r3, #1
 800886e:	1e5a      	subs	r2, r3, #1
 8008870:	4193      	sbcs	r3, r2
 8008872:	b2db      	uxtb	r3, r3
 8008874:	e037      	b.n	80088e6 <HAL_TIM_PWM_Start+0x92>
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	2b04      	cmp	r3, #4
 800887a:	d108      	bne.n	800888e <HAL_TIM_PWM_Start+0x3a>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	223f      	movs	r2, #63	@ 0x3f
 8008880:	5c9b      	ldrb	r3, [r3, r2]
 8008882:	b2db      	uxtb	r3, r3
 8008884:	3b01      	subs	r3, #1
 8008886:	1e5a      	subs	r2, r3, #1
 8008888:	4193      	sbcs	r3, r2
 800888a:	b2db      	uxtb	r3, r3
 800888c:	e02b      	b.n	80088e6 <HAL_TIM_PWM_Start+0x92>
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	2b08      	cmp	r3, #8
 8008892:	d108      	bne.n	80088a6 <HAL_TIM_PWM_Start+0x52>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2240      	movs	r2, #64	@ 0x40
 8008898:	5c9b      	ldrb	r3, [r3, r2]
 800889a:	b2db      	uxtb	r3, r3
 800889c:	3b01      	subs	r3, #1
 800889e:	1e5a      	subs	r2, r3, #1
 80088a0:	4193      	sbcs	r3, r2
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	e01f      	b.n	80088e6 <HAL_TIM_PWM_Start+0x92>
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	2b0c      	cmp	r3, #12
 80088aa:	d108      	bne.n	80088be <HAL_TIM_PWM_Start+0x6a>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2241      	movs	r2, #65	@ 0x41
 80088b0:	5c9b      	ldrb	r3, [r3, r2]
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	3b01      	subs	r3, #1
 80088b6:	1e5a      	subs	r2, r3, #1
 80088b8:	4193      	sbcs	r3, r2
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	e013      	b.n	80088e6 <HAL_TIM_PWM_Start+0x92>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	2b10      	cmp	r3, #16
 80088c2:	d108      	bne.n	80088d6 <HAL_TIM_PWM_Start+0x82>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2242      	movs	r2, #66	@ 0x42
 80088c8:	5c9b      	ldrb	r3, [r3, r2]
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	3b01      	subs	r3, #1
 80088ce:	1e5a      	subs	r2, r3, #1
 80088d0:	4193      	sbcs	r3, r2
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	e007      	b.n	80088e6 <HAL_TIM_PWM_Start+0x92>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2243      	movs	r2, #67	@ 0x43
 80088da:	5c9b      	ldrb	r3, [r3, r2]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	3b01      	subs	r3, #1
 80088e0:	1e5a      	subs	r2, r3, #1
 80088e2:	4193      	sbcs	r3, r2
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d001      	beq.n	80088ee <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e081      	b.n	80089f2 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d104      	bne.n	80088fe <HAL_TIM_PWM_Start+0xaa>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	223e      	movs	r2, #62	@ 0x3e
 80088f8:	2102      	movs	r1, #2
 80088fa:	5499      	strb	r1, [r3, r2]
 80088fc:	e023      	b.n	8008946 <HAL_TIM_PWM_Start+0xf2>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2b04      	cmp	r3, #4
 8008902:	d104      	bne.n	800890e <HAL_TIM_PWM_Start+0xba>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	223f      	movs	r2, #63	@ 0x3f
 8008908:	2102      	movs	r1, #2
 800890a:	5499      	strb	r1, [r3, r2]
 800890c:	e01b      	b.n	8008946 <HAL_TIM_PWM_Start+0xf2>
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2b08      	cmp	r3, #8
 8008912:	d104      	bne.n	800891e <HAL_TIM_PWM_Start+0xca>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2240      	movs	r2, #64	@ 0x40
 8008918:	2102      	movs	r1, #2
 800891a:	5499      	strb	r1, [r3, r2]
 800891c:	e013      	b.n	8008946 <HAL_TIM_PWM_Start+0xf2>
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2b0c      	cmp	r3, #12
 8008922:	d104      	bne.n	800892e <HAL_TIM_PWM_Start+0xda>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2241      	movs	r2, #65	@ 0x41
 8008928:	2102      	movs	r1, #2
 800892a:	5499      	strb	r1, [r3, r2]
 800892c:	e00b      	b.n	8008946 <HAL_TIM_PWM_Start+0xf2>
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2b10      	cmp	r3, #16
 8008932:	d104      	bne.n	800893e <HAL_TIM_PWM_Start+0xea>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2242      	movs	r2, #66	@ 0x42
 8008938:	2102      	movs	r1, #2
 800893a:	5499      	strb	r1, [r3, r2]
 800893c:	e003      	b.n	8008946 <HAL_TIM_PWM_Start+0xf2>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2243      	movs	r2, #67	@ 0x43
 8008942:	2102      	movs	r1, #2
 8008944:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	2201      	movs	r2, #1
 800894e:	0018      	movs	r0, r3
 8008950:	f000 fda6 	bl	80094a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a28      	ldr	r2, [pc, #160]	@ (80089fc <HAL_TIM_PWM_Start+0x1a8>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d009      	beq.n	8008972 <HAL_TIM_PWM_Start+0x11e>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a27      	ldr	r2, [pc, #156]	@ (8008a00 <HAL_TIM_PWM_Start+0x1ac>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d004      	beq.n	8008972 <HAL_TIM_PWM_Start+0x11e>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a25      	ldr	r2, [pc, #148]	@ (8008a04 <HAL_TIM_PWM_Start+0x1b0>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d101      	bne.n	8008976 <HAL_TIM_PWM_Start+0x122>
 8008972:	2301      	movs	r3, #1
 8008974:	e000      	b.n	8008978 <HAL_TIM_PWM_Start+0x124>
 8008976:	2300      	movs	r3, #0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d008      	beq.n	800898e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2180      	movs	r1, #128	@ 0x80
 8008988:	0209      	lsls	r1, r1, #8
 800898a:	430a      	orrs	r2, r1
 800898c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a1a      	ldr	r2, [pc, #104]	@ (80089fc <HAL_TIM_PWM_Start+0x1a8>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d00a      	beq.n	80089ae <HAL_TIM_PWM_Start+0x15a>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	2380      	movs	r3, #128	@ 0x80
 800899e:	05db      	lsls	r3, r3, #23
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d004      	beq.n	80089ae <HAL_TIM_PWM_Start+0x15a>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a17      	ldr	r2, [pc, #92]	@ (8008a08 <HAL_TIM_PWM_Start+0x1b4>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d116      	bne.n	80089dc <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	4a15      	ldr	r2, [pc, #84]	@ (8008a0c <HAL_TIM_PWM_Start+0x1b8>)
 80089b6:	4013      	ands	r3, r2
 80089b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2b06      	cmp	r3, #6
 80089be:	d016      	beq.n	80089ee <HAL_TIM_PWM_Start+0x19a>
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	2380      	movs	r3, #128	@ 0x80
 80089c4:	025b      	lsls	r3, r3, #9
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d011      	beq.n	80089ee <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2101      	movs	r1, #1
 80089d6:	430a      	orrs	r2, r1
 80089d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089da:	e008      	b.n	80089ee <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2101      	movs	r1, #1
 80089e8:	430a      	orrs	r2, r1
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	e000      	b.n	80089f0 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ee:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	0018      	movs	r0, r3
 80089f4:	46bd      	mov	sp, r7
 80089f6:	b004      	add	sp, #16
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	46c0      	nop			@ (mov r8, r8)
 80089fc:	40012c00 	.word	0x40012c00
 8008a00:	40014400 	.word	0x40014400
 8008a04:	40014800 	.word	0x40014800
 8008a08:	40000400 	.word	0x40000400
 8008a0c:	00010007 	.word	0x00010007

08008a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	d021      	beq.n	8008a74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2202      	movs	r2, #2
 8008a34:	4013      	ands	r3, r2
 8008a36:	d01d      	beq.n	8008a74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2203      	movs	r2, #3
 8008a3e:	4252      	negs	r2, r2
 8008a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	2203      	movs	r2, #3
 8008a50:	4013      	ands	r3, r2
 8008a52:	d004      	beq.n	8008a5e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	0018      	movs	r0, r3
 8008a58:	f000 f9ea 	bl	8008e30 <HAL_TIM_IC_CaptureCallback>
 8008a5c:	e007      	b.n	8008a6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	0018      	movs	r0, r3
 8008a62:	f000 f9dd 	bl	8008e20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	0018      	movs	r0, r3
 8008a6a:	f000 f9e9 	bl	8008e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	2204      	movs	r2, #4
 8008a78:	4013      	ands	r3, r2
 8008a7a:	d022      	beq.n	8008ac2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2204      	movs	r2, #4
 8008a80:	4013      	ands	r3, r2
 8008a82:	d01e      	beq.n	8008ac2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2205      	movs	r2, #5
 8008a8a:	4252      	negs	r2, r2
 8008a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2202      	movs	r2, #2
 8008a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	699a      	ldr	r2, [r3, #24]
 8008a9a:	23c0      	movs	r3, #192	@ 0xc0
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	d004      	beq.n	8008aac <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	f000 f9c3 	bl	8008e30 <HAL_TIM_IC_CaptureCallback>
 8008aaa:	e007      	b.n	8008abc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	0018      	movs	r0, r3
 8008ab0:	f000 f9b6 	bl	8008e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	0018      	movs	r0, r3
 8008ab8:	f000 f9c2 	bl	8008e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	2208      	movs	r2, #8
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	d021      	beq.n	8008b0e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2208      	movs	r2, #8
 8008ace:	4013      	ands	r3, r2
 8008ad0:	d01d      	beq.n	8008b0e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2209      	movs	r2, #9
 8008ad8:	4252      	negs	r2, r2
 8008ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2204      	movs	r2, #4
 8008ae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	2203      	movs	r2, #3
 8008aea:	4013      	ands	r3, r2
 8008aec:	d004      	beq.n	8008af8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	0018      	movs	r0, r3
 8008af2:	f000 f99d 	bl	8008e30 <HAL_TIM_IC_CaptureCallback>
 8008af6:	e007      	b.n	8008b08 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	0018      	movs	r0, r3
 8008afc:	f000 f990 	bl	8008e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	0018      	movs	r0, r3
 8008b04:	f000 f99c 	bl	8008e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	2210      	movs	r2, #16
 8008b12:	4013      	ands	r3, r2
 8008b14:	d022      	beq.n	8008b5c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2210      	movs	r2, #16
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	d01e      	beq.n	8008b5c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2211      	movs	r2, #17
 8008b24:	4252      	negs	r2, r2
 8008b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2208      	movs	r2, #8
 8008b2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	69da      	ldr	r2, [r3, #28]
 8008b34:	23c0      	movs	r3, #192	@ 0xc0
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4013      	ands	r3, r2
 8008b3a:	d004      	beq.n	8008b46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	0018      	movs	r0, r3
 8008b40:	f000 f976 	bl	8008e30 <HAL_TIM_IC_CaptureCallback>
 8008b44:	e007      	b.n	8008b56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	0018      	movs	r0, r3
 8008b4a:	f000 f969 	bl	8008e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	0018      	movs	r0, r3
 8008b52:	f000 f975 	bl	8008e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	4013      	ands	r3, r2
 8008b62:	d00c      	beq.n	8008b7e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2201      	movs	r2, #1
 8008b68:	4013      	ands	r3, r2
 8008b6a:	d008      	beq.n	8008b7e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2202      	movs	r2, #2
 8008b72:	4252      	negs	r2, r2
 8008b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	0018      	movs	r0, r3
 8008b7a:	f7f9 fc9b 	bl	80024b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2280      	movs	r2, #128	@ 0x80
 8008b82:	4013      	ands	r3, r2
 8008b84:	d104      	bne.n	8008b90 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	2380      	movs	r3, #128	@ 0x80
 8008b8a:	019b      	lsls	r3, r3, #6
 8008b8c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008b8e:	d00b      	beq.n	8008ba8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2280      	movs	r2, #128	@ 0x80
 8008b94:	4013      	ands	r3, r2
 8008b96:	d007      	beq.n	8008ba8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a1e      	ldr	r2, [pc, #120]	@ (8008c18 <HAL_TIM_IRQHandler+0x208>)
 8008b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	0018      	movs	r0, r3
 8008ba4:	f000 fd10 	bl	80095c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	2380      	movs	r3, #128	@ 0x80
 8008bac:	005b      	lsls	r3, r3, #1
 8008bae:	4013      	ands	r3, r2
 8008bb0:	d00b      	beq.n	8008bca <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2280      	movs	r2, #128	@ 0x80
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	d007      	beq.n	8008bca <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a17      	ldr	r2, [pc, #92]	@ (8008c1c <HAL_TIM_IRQHandler+0x20c>)
 8008bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	0018      	movs	r0, r3
 8008bc6:	f000 fd07 	bl	80095d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	2240      	movs	r2, #64	@ 0x40
 8008bce:	4013      	ands	r3, r2
 8008bd0:	d00c      	beq.n	8008bec <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2240      	movs	r2, #64	@ 0x40
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	d008      	beq.n	8008bec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2241      	movs	r2, #65	@ 0x41
 8008be0:	4252      	negs	r2, r2
 8008be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	0018      	movs	r0, r3
 8008be8:	f000 f932 	bl	8008e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	2220      	movs	r2, #32
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	d00c      	beq.n	8008c0e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	d008      	beq.n	8008c0e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2221      	movs	r2, #33	@ 0x21
 8008c02:	4252      	negs	r2, r2
 8008c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	0018      	movs	r0, r3
 8008c0a:	f000 fcd5 	bl	80095b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c0e:	46c0      	nop			@ (mov r8, r8)
 8008c10:	46bd      	mov	sp, r7
 8008c12:	b004      	add	sp, #16
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	46c0      	nop			@ (mov r8, r8)
 8008c18:	ffffdf7f 	.word	0xffffdf7f
 8008c1c:	fffffeff 	.word	0xfffffeff

08008c20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c2c:	2317      	movs	r3, #23
 8008c2e:	18fb      	adds	r3, r7, r3
 8008c30:	2200      	movs	r2, #0
 8008c32:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	223c      	movs	r2, #60	@ 0x3c
 8008c38:	5c9b      	ldrb	r3, [r3, r2]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d101      	bne.n	8008c42 <HAL_TIM_PWM_ConfigChannel+0x22>
 8008c3e:	2302      	movs	r3, #2
 8008c40:	e0e5      	b.n	8008e0e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	223c      	movs	r2, #60	@ 0x3c
 8008c46:	2101      	movs	r1, #1
 8008c48:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b14      	cmp	r3, #20
 8008c4e:	d900      	bls.n	8008c52 <HAL_TIM_PWM_ConfigChannel+0x32>
 8008c50:	e0d1      	b.n	8008df6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	009a      	lsls	r2, r3, #2
 8008c56:	4b70      	ldr	r3, [pc, #448]	@ (8008e18 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8008c58:	18d3      	adds	r3, r2, r3
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	0011      	movs	r1, r2
 8008c66:	0018      	movs	r0, r3
 8008c68:	f000 f97e 	bl	8008f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	699a      	ldr	r2, [r3, #24]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2108      	movs	r1, #8
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	699a      	ldr	r2, [r3, #24]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2104      	movs	r1, #4
 8008c88:	438a      	bics	r2, r1
 8008c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6999      	ldr	r1, [r3, #24]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	691a      	ldr	r2, [r3, #16]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	430a      	orrs	r2, r1
 8008c9c:	619a      	str	r2, [r3, #24]
      break;
 8008c9e:	e0af      	b.n	8008e00 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	0011      	movs	r1, r2
 8008ca8:	0018      	movs	r0, r3
 8008caa:	f000 f9dd 	bl	8009068 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	699a      	ldr	r2, [r3, #24]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2180      	movs	r1, #128	@ 0x80
 8008cba:	0109      	lsls	r1, r1, #4
 8008cbc:	430a      	orrs	r2, r1
 8008cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	699a      	ldr	r2, [r3, #24]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4954      	ldr	r1, [pc, #336]	@ (8008e1c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008ccc:	400a      	ands	r2, r1
 8008cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6999      	ldr	r1, [r3, #24]
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	021a      	lsls	r2, r3, #8
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	619a      	str	r2, [r3, #24]
      break;
 8008ce4:	e08c      	b.n	8008e00 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	0011      	movs	r1, r2
 8008cee:	0018      	movs	r0, r3
 8008cf0:	f000 fa38 	bl	8009164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	69da      	ldr	r2, [r3, #28]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2108      	movs	r1, #8
 8008d00:	430a      	orrs	r2, r1
 8008d02:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	69da      	ldr	r2, [r3, #28]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2104      	movs	r1, #4
 8008d10:	438a      	bics	r2, r1
 8008d12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	69d9      	ldr	r1, [r3, #28]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	691a      	ldr	r2, [r3, #16]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	430a      	orrs	r2, r1
 8008d24:	61da      	str	r2, [r3, #28]
      break;
 8008d26:	e06b      	b.n	8008e00 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	0011      	movs	r1, r2
 8008d30:	0018      	movs	r0, r3
 8008d32:	f000 fa99 	bl	8009268 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	69da      	ldr	r2, [r3, #28]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2180      	movs	r1, #128	@ 0x80
 8008d42:	0109      	lsls	r1, r1, #4
 8008d44:	430a      	orrs	r2, r1
 8008d46:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	69da      	ldr	r2, [r3, #28]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4932      	ldr	r1, [pc, #200]	@ (8008e1c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008d54:	400a      	ands	r2, r1
 8008d56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	69d9      	ldr	r1, [r3, #28]
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	021a      	lsls	r2, r3, #8
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	430a      	orrs	r2, r1
 8008d6a:	61da      	str	r2, [r3, #28]
      break;
 8008d6c:	e048      	b.n	8008e00 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	0011      	movs	r1, r2
 8008d76:	0018      	movs	r0, r3
 8008d78:	f000 fada 	bl	8009330 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2108      	movs	r1, #8
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2104      	movs	r1, #4
 8008d98:	438a      	bics	r2, r1
 8008d9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	691a      	ldr	r2, [r3, #16]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	430a      	orrs	r2, r1
 8008dac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008dae:	e027      	b.n	8008e00 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	0011      	movs	r1, r2
 8008db8:	0018      	movs	r0, r3
 8008dba:	f000 fb13 	bl	80093e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2180      	movs	r1, #128	@ 0x80
 8008dca:	0109      	lsls	r1, r1, #4
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4910      	ldr	r1, [pc, #64]	@ (8008e1c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008ddc:	400a      	ands	r2, r1
 8008dde:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	021a      	lsls	r2, r3, #8
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	430a      	orrs	r2, r1
 8008df2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008df4:	e004      	b.n	8008e00 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8008df6:	2317      	movs	r3, #23
 8008df8:	18fb      	adds	r3, r7, r3
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	701a      	strb	r2, [r3, #0]
      break;
 8008dfe:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	223c      	movs	r2, #60	@ 0x3c
 8008e04:	2100      	movs	r1, #0
 8008e06:	5499      	strb	r1, [r3, r2]

  return status;
 8008e08:	2317      	movs	r3, #23
 8008e0a:	18fb      	adds	r3, r7, r3
 8008e0c:	781b      	ldrb	r3, [r3, #0]
}
 8008e0e:	0018      	movs	r0, r3
 8008e10:	46bd      	mov	sp, r7
 8008e12:	b006      	add	sp, #24
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	46c0      	nop			@ (mov r8, r8)
 8008e18:	0800970c 	.word	0x0800970c
 8008e1c:	fffffbff 	.word	0xfffffbff

08008e20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e28:	46c0      	nop			@ (mov r8, r8)
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	b002      	add	sp, #8
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e38:	46c0      	nop			@ (mov r8, r8)
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	b002      	add	sp, #8
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e48:	46c0      	nop			@ (mov r8, r8)
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	b002      	add	sp, #8
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e58:	46c0      	nop			@ (mov r8, r8)
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	b002      	add	sp, #8
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a37      	ldr	r2, [pc, #220]	@ (8008f50 <TIM_Base_SetConfig+0xf0>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d008      	beq.n	8008e8a <TIM_Base_SetConfig+0x2a>
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	2380      	movs	r3, #128	@ 0x80
 8008e7c:	05db      	lsls	r3, r3, #23
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d003      	beq.n	8008e8a <TIM_Base_SetConfig+0x2a>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a33      	ldr	r2, [pc, #204]	@ (8008f54 <TIM_Base_SetConfig+0xf4>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d108      	bne.n	8008e9c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2270      	movs	r2, #112	@ 0x70
 8008e8e:	4393      	bics	r3, r2
 8008e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a2c      	ldr	r2, [pc, #176]	@ (8008f50 <TIM_Base_SetConfig+0xf0>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d014      	beq.n	8008ece <TIM_Base_SetConfig+0x6e>
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	2380      	movs	r3, #128	@ 0x80
 8008ea8:	05db      	lsls	r3, r3, #23
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d00f      	beq.n	8008ece <TIM_Base_SetConfig+0x6e>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a28      	ldr	r2, [pc, #160]	@ (8008f54 <TIM_Base_SetConfig+0xf4>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d00b      	beq.n	8008ece <TIM_Base_SetConfig+0x6e>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a27      	ldr	r2, [pc, #156]	@ (8008f58 <TIM_Base_SetConfig+0xf8>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d007      	beq.n	8008ece <TIM_Base_SetConfig+0x6e>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a26      	ldr	r2, [pc, #152]	@ (8008f5c <TIM_Base_SetConfig+0xfc>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d003      	beq.n	8008ece <TIM_Base_SetConfig+0x6e>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a25      	ldr	r2, [pc, #148]	@ (8008f60 <TIM_Base_SetConfig+0x100>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d108      	bne.n	8008ee0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	4a24      	ldr	r2, [pc, #144]	@ (8008f64 <TIM_Base_SetConfig+0x104>)
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2280      	movs	r2, #128	@ 0x80
 8008ee4:	4393      	bics	r3, r2
 8008ee6:	001a      	movs	r2, r3
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	695b      	ldr	r3, [r3, #20]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	689a      	ldr	r2, [r3, #8]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a11      	ldr	r2, [pc, #68]	@ (8008f50 <TIM_Base_SetConfig+0xf0>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d007      	beq.n	8008f1e <TIM_Base_SetConfig+0xbe>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a12      	ldr	r2, [pc, #72]	@ (8008f5c <TIM_Base_SetConfig+0xfc>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d003      	beq.n	8008f1e <TIM_Base_SetConfig+0xbe>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a11      	ldr	r2, [pc, #68]	@ (8008f60 <TIM_Base_SetConfig+0x100>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d103      	bne.n	8008f26 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	691a      	ldr	r2, [r3, #16]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	2201      	movs	r2, #1
 8008f32:	4013      	ands	r3, r2
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d106      	bne.n	8008f46 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	4393      	bics	r3, r2
 8008f40:	001a      	movs	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	611a      	str	r2, [r3, #16]
  }
}
 8008f46:	46c0      	nop			@ (mov r8, r8)
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	b004      	add	sp, #16
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	46c0      	nop			@ (mov r8, r8)
 8008f50:	40012c00 	.word	0x40012c00
 8008f54:	40000400 	.word	0x40000400
 8008f58:	40002000 	.word	0x40002000
 8008f5c:	40014400 	.word	0x40014400
 8008f60:	40014800 	.word	0x40014800
 8008f64:	fffffcff 	.word	0xfffffcff

08008f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a1b      	ldr	r3, [r3, #32]
 8008f76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a1b      	ldr	r3, [r3, #32]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	4393      	bics	r3, r2
 8008f80:	001a      	movs	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	4a2e      	ldr	r2, [pc, #184]	@ (8009050 <TIM_OC1_SetConfig+0xe8>)
 8008f96:	4013      	ands	r3, r2
 8008f98:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2203      	movs	r2, #3
 8008f9e:	4393      	bics	r3, r2
 8008fa0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	4393      	bics	r3, r2
 8008fb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a24      	ldr	r2, [pc, #144]	@ (8009054 <TIM_OC1_SetConfig+0xec>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d007      	beq.n	8008fd6 <TIM_OC1_SetConfig+0x6e>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a23      	ldr	r2, [pc, #140]	@ (8009058 <TIM_OC1_SetConfig+0xf0>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d003      	beq.n	8008fd6 <TIM_OC1_SetConfig+0x6e>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a22      	ldr	r2, [pc, #136]	@ (800905c <TIM_OC1_SetConfig+0xf4>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d10c      	bne.n	8008ff0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	2208      	movs	r2, #8
 8008fda:	4393      	bics	r3, r2
 8008fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	2204      	movs	r2, #4
 8008fec:	4393      	bics	r3, r2
 8008fee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a18      	ldr	r2, [pc, #96]	@ (8009054 <TIM_OC1_SetConfig+0xec>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d007      	beq.n	8009008 <TIM_OC1_SetConfig+0xa0>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a17      	ldr	r2, [pc, #92]	@ (8009058 <TIM_OC1_SetConfig+0xf0>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d003      	beq.n	8009008 <TIM_OC1_SetConfig+0xa0>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a16      	ldr	r2, [pc, #88]	@ (800905c <TIM_OC1_SetConfig+0xf4>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d111      	bne.n	800902c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	4a15      	ldr	r2, [pc, #84]	@ (8009060 <TIM_OC1_SetConfig+0xf8>)
 800900c:	4013      	ands	r3, r2
 800900e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	4a14      	ldr	r2, [pc, #80]	@ (8009064 <TIM_OC1_SetConfig+0xfc>)
 8009014:	4013      	ands	r3, r2
 8009016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	695b      	ldr	r3, [r3, #20]
 800901c:	693a      	ldr	r2, [r7, #16]
 800901e:	4313      	orrs	r3, r2
 8009020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	693a      	ldr	r2, [r7, #16]
 8009028:	4313      	orrs	r3, r2
 800902a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	621a      	str	r2, [r3, #32]
}
 8009046:	46c0      	nop			@ (mov r8, r8)
 8009048:	46bd      	mov	sp, r7
 800904a:	b006      	add	sp, #24
 800904c:	bd80      	pop	{r7, pc}
 800904e:	46c0      	nop			@ (mov r8, r8)
 8009050:	fffeff8f 	.word	0xfffeff8f
 8009054:	40012c00 	.word	0x40012c00
 8009058:	40014400 	.word	0x40014400
 800905c:	40014800 	.word	0x40014800
 8009060:	fffffeff 	.word	0xfffffeff
 8009064:	fffffdff 	.word	0xfffffdff

08009068 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a1b      	ldr	r3, [r3, #32]
 800907c:	2210      	movs	r2, #16
 800907e:	4393      	bics	r3, r2
 8009080:	001a      	movs	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	4a2c      	ldr	r2, [pc, #176]	@ (8009148 <TIM_OC2_SetConfig+0xe0>)
 8009096:	4013      	ands	r3, r2
 8009098:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	4a2b      	ldr	r2, [pc, #172]	@ (800914c <TIM_OC2_SetConfig+0xe4>)
 800909e:	4013      	ands	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	021b      	lsls	r3, r3, #8
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2220      	movs	r2, #32
 80090b2:	4393      	bics	r3, r2
 80090b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	011b      	lsls	r3, r3, #4
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	4313      	orrs	r3, r2
 80090c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a22      	ldr	r2, [pc, #136]	@ (8009150 <TIM_OC2_SetConfig+0xe8>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d10d      	bne.n	80090e6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2280      	movs	r2, #128	@ 0x80
 80090ce:	4393      	bics	r3, r2
 80090d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	011b      	lsls	r3, r3, #4
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	4313      	orrs	r3, r2
 80090dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2240      	movs	r2, #64	@ 0x40
 80090e2:	4393      	bics	r3, r2
 80090e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a19      	ldr	r2, [pc, #100]	@ (8009150 <TIM_OC2_SetConfig+0xe8>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d007      	beq.n	80090fe <TIM_OC2_SetConfig+0x96>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a18      	ldr	r2, [pc, #96]	@ (8009154 <TIM_OC2_SetConfig+0xec>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d003      	beq.n	80090fe <TIM_OC2_SetConfig+0x96>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a17      	ldr	r2, [pc, #92]	@ (8009158 <TIM_OC2_SetConfig+0xf0>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d113      	bne.n	8009126 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	4a16      	ldr	r2, [pc, #88]	@ (800915c <TIM_OC2_SetConfig+0xf4>)
 8009102:	4013      	ands	r3, r2
 8009104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	4a15      	ldr	r2, [pc, #84]	@ (8009160 <TIM_OC2_SetConfig+0xf8>)
 800910a:	4013      	ands	r3, r2
 800910c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	4313      	orrs	r3, r2
 8009118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	4313      	orrs	r3, r2
 8009124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	621a      	str	r2, [r3, #32]
}
 8009140:	46c0      	nop			@ (mov r8, r8)
 8009142:	46bd      	mov	sp, r7
 8009144:	b006      	add	sp, #24
 8009146:	bd80      	pop	{r7, pc}
 8009148:	feff8fff 	.word	0xfeff8fff
 800914c:	fffffcff 	.word	0xfffffcff
 8009150:	40012c00 	.word	0x40012c00
 8009154:	40014400 	.word	0x40014400
 8009158:	40014800 	.word	0x40014800
 800915c:	fffffbff 	.word	0xfffffbff
 8009160:	fffff7ff 	.word	0xfffff7ff

08009164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	4a31      	ldr	r2, [pc, #196]	@ (8009240 <TIM_OC3_SetConfig+0xdc>)
 800917a:	401a      	ands	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4a2d      	ldr	r2, [pc, #180]	@ (8009244 <TIM_OC3_SetConfig+0xe0>)
 8009190:	4013      	ands	r3, r2
 8009192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2203      	movs	r2, #3
 8009198:	4393      	bics	r3, r2
 800919a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	4a27      	ldr	r2, [pc, #156]	@ (8009248 <TIM_OC3_SetConfig+0xe4>)
 80091aa:	4013      	ands	r3, r2
 80091ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	021b      	lsls	r3, r3, #8
 80091b4:	697a      	ldr	r2, [r7, #20]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a23      	ldr	r2, [pc, #140]	@ (800924c <TIM_OC3_SetConfig+0xe8>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d10d      	bne.n	80091de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	4a22      	ldr	r2, [pc, #136]	@ (8009250 <TIM_OC3_SetConfig+0xec>)
 80091c6:	4013      	ands	r3, r2
 80091c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	021b      	lsls	r3, r3, #8
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	4a1e      	ldr	r2, [pc, #120]	@ (8009254 <TIM_OC3_SetConfig+0xf0>)
 80091da:	4013      	ands	r3, r2
 80091dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a1a      	ldr	r2, [pc, #104]	@ (800924c <TIM_OC3_SetConfig+0xe8>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d007      	beq.n	80091f6 <TIM_OC3_SetConfig+0x92>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a1b      	ldr	r2, [pc, #108]	@ (8009258 <TIM_OC3_SetConfig+0xf4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d003      	beq.n	80091f6 <TIM_OC3_SetConfig+0x92>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a1a      	ldr	r2, [pc, #104]	@ (800925c <TIM_OC3_SetConfig+0xf8>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d113      	bne.n	800921e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	4a19      	ldr	r2, [pc, #100]	@ (8009260 <TIM_OC3_SetConfig+0xfc>)
 80091fa:	4013      	ands	r3, r2
 80091fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	4a18      	ldr	r2, [pc, #96]	@ (8009264 <TIM_OC3_SetConfig+0x100>)
 8009202:	4013      	ands	r3, r2
 8009204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	695b      	ldr	r3, [r3, #20]
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	4313      	orrs	r3, r2
 8009210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	011b      	lsls	r3, r3, #4
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	4313      	orrs	r3, r2
 800921c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	621a      	str	r2, [r3, #32]
}
 8009238:	46c0      	nop			@ (mov r8, r8)
 800923a:	46bd      	mov	sp, r7
 800923c:	b006      	add	sp, #24
 800923e:	bd80      	pop	{r7, pc}
 8009240:	fffffeff 	.word	0xfffffeff
 8009244:	fffeff8f 	.word	0xfffeff8f
 8009248:	fffffdff 	.word	0xfffffdff
 800924c:	40012c00 	.word	0x40012c00
 8009250:	fffff7ff 	.word	0xfffff7ff
 8009254:	fffffbff 	.word	0xfffffbff
 8009258:	40014400 	.word	0x40014400
 800925c:	40014800 	.word	0x40014800
 8009260:	ffffefff 	.word	0xffffefff
 8009264:	ffffdfff 	.word	0xffffdfff

08009268 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a1b      	ldr	r3, [r3, #32]
 800927c:	4a24      	ldr	r2, [pc, #144]	@ (8009310 <TIM_OC4_SetConfig+0xa8>)
 800927e:	401a      	ands	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	69db      	ldr	r3, [r3, #28]
 800928e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	4a20      	ldr	r2, [pc, #128]	@ (8009314 <TIM_OC4_SetConfig+0xac>)
 8009294:	4013      	ands	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	4a1f      	ldr	r2, [pc, #124]	@ (8009318 <TIM_OC4_SetConfig+0xb0>)
 800929c:	4013      	ands	r3, r2
 800929e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	021b      	lsls	r3, r3, #8
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	4a1b      	ldr	r2, [pc, #108]	@ (800931c <TIM_OC4_SetConfig+0xb4>)
 80092b0:	4013      	ands	r3, r2
 80092b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	031b      	lsls	r3, r3, #12
 80092ba:	693a      	ldr	r2, [r7, #16]
 80092bc:	4313      	orrs	r3, r2
 80092be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a17      	ldr	r2, [pc, #92]	@ (8009320 <TIM_OC4_SetConfig+0xb8>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d007      	beq.n	80092d8 <TIM_OC4_SetConfig+0x70>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a16      	ldr	r2, [pc, #88]	@ (8009324 <TIM_OC4_SetConfig+0xbc>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d003      	beq.n	80092d8 <TIM_OC4_SetConfig+0x70>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a15      	ldr	r2, [pc, #84]	@ (8009328 <TIM_OC4_SetConfig+0xc0>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d109      	bne.n	80092ec <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	4a14      	ldr	r2, [pc, #80]	@ (800932c <TIM_OC4_SetConfig+0xc4>)
 80092dc:	4013      	ands	r3, r2
 80092de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	695b      	ldr	r3, [r3, #20]
 80092e4:	019b      	lsls	r3, r3, #6
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	621a      	str	r2, [r3, #32]
}
 8009306:	46c0      	nop			@ (mov r8, r8)
 8009308:	46bd      	mov	sp, r7
 800930a:	b006      	add	sp, #24
 800930c:	bd80      	pop	{r7, pc}
 800930e:	46c0      	nop			@ (mov r8, r8)
 8009310:	ffffefff 	.word	0xffffefff
 8009314:	feff8fff 	.word	0xfeff8fff
 8009318:	fffffcff 	.word	0xfffffcff
 800931c:	ffffdfff 	.word	0xffffdfff
 8009320:	40012c00 	.word	0x40012c00
 8009324:	40014400 	.word	0x40014400
 8009328:	40014800 	.word	0x40014800
 800932c:	ffffbfff 	.word	0xffffbfff

08009330 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a1b      	ldr	r3, [r3, #32]
 8009344:	4a21      	ldr	r2, [pc, #132]	@ (80093cc <TIM_OC5_SetConfig+0x9c>)
 8009346:	401a      	ands	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4a1d      	ldr	r2, [pc, #116]	@ (80093d0 <TIM_OC5_SetConfig+0xa0>)
 800935c:	4013      	ands	r3, r2
 800935e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	4313      	orrs	r3, r2
 8009368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	4a19      	ldr	r2, [pc, #100]	@ (80093d4 <TIM_OC5_SetConfig+0xa4>)
 800936e:	4013      	ands	r3, r2
 8009370:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	041b      	lsls	r3, r3, #16
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	4313      	orrs	r3, r2
 800937c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a15      	ldr	r2, [pc, #84]	@ (80093d8 <TIM_OC5_SetConfig+0xa8>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d007      	beq.n	8009396 <TIM_OC5_SetConfig+0x66>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a14      	ldr	r2, [pc, #80]	@ (80093dc <TIM_OC5_SetConfig+0xac>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d003      	beq.n	8009396 <TIM_OC5_SetConfig+0x66>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a13      	ldr	r2, [pc, #76]	@ (80093e0 <TIM_OC5_SetConfig+0xb0>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d109      	bne.n	80093aa <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	4a0c      	ldr	r2, [pc, #48]	@ (80093cc <TIM_OC5_SetConfig+0x9c>)
 800939a:	4013      	ands	r3, r2
 800939c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	021b      	lsls	r3, r3, #8
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	685a      	ldr	r2, [r3, #4]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	693a      	ldr	r2, [r7, #16]
 80093c2:	621a      	str	r2, [r3, #32]
}
 80093c4:	46c0      	nop			@ (mov r8, r8)
 80093c6:	46bd      	mov	sp, r7
 80093c8:	b006      	add	sp, #24
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	fffeffff 	.word	0xfffeffff
 80093d0:	fffeff8f 	.word	0xfffeff8f
 80093d4:	fffdffff 	.word	0xfffdffff
 80093d8:	40012c00 	.word	0x40012c00
 80093dc:	40014400 	.word	0x40014400
 80093e0:	40014800 	.word	0x40014800

080093e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a1b      	ldr	r3, [r3, #32]
 80093f8:	4a22      	ldr	r2, [pc, #136]	@ (8009484 <TIM_OC6_SetConfig+0xa0>)
 80093fa:	401a      	ands	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800940a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4a1e      	ldr	r2, [pc, #120]	@ (8009488 <TIM_OC6_SetConfig+0xa4>)
 8009410:	4013      	ands	r3, r2
 8009412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	021b      	lsls	r3, r3, #8
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	4313      	orrs	r3, r2
 800941e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	4a1a      	ldr	r2, [pc, #104]	@ (800948c <TIM_OC6_SetConfig+0xa8>)
 8009424:	4013      	ands	r3, r2
 8009426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	051b      	lsls	r3, r3, #20
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	4313      	orrs	r3, r2
 8009432:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a16      	ldr	r2, [pc, #88]	@ (8009490 <TIM_OC6_SetConfig+0xac>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d007      	beq.n	800944c <TIM_OC6_SetConfig+0x68>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a15      	ldr	r2, [pc, #84]	@ (8009494 <TIM_OC6_SetConfig+0xb0>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d003      	beq.n	800944c <TIM_OC6_SetConfig+0x68>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a14      	ldr	r2, [pc, #80]	@ (8009498 <TIM_OC6_SetConfig+0xb4>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d109      	bne.n	8009460 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	4a13      	ldr	r2, [pc, #76]	@ (800949c <TIM_OC6_SetConfig+0xb8>)
 8009450:	4013      	ands	r3, r2
 8009452:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	695b      	ldr	r3, [r3, #20]
 8009458:	029b      	lsls	r3, r3, #10
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	4313      	orrs	r3, r2
 800945e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	697a      	ldr	r2, [r7, #20]
 8009464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	693a      	ldr	r2, [r7, #16]
 8009478:	621a      	str	r2, [r3, #32]
}
 800947a:	46c0      	nop			@ (mov r8, r8)
 800947c:	46bd      	mov	sp, r7
 800947e:	b006      	add	sp, #24
 8009480:	bd80      	pop	{r7, pc}
 8009482:	46c0      	nop			@ (mov r8, r8)
 8009484:	ffefffff 	.word	0xffefffff
 8009488:	feff8fff 	.word	0xfeff8fff
 800948c:	ffdfffff 	.word	0xffdfffff
 8009490:	40012c00 	.word	0x40012c00
 8009494:	40014400 	.word	0x40014400
 8009498:	40014800 	.word	0x40014800
 800949c:	fffbffff 	.word	0xfffbffff

080094a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	221f      	movs	r2, #31
 80094b0:	4013      	ands	r3, r2
 80094b2:	2201      	movs	r2, #1
 80094b4:	409a      	lsls	r2, r3
 80094b6:	0013      	movs	r3, r2
 80094b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6a1b      	ldr	r3, [r3, #32]
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	43d2      	mvns	r2, r2
 80094c2:	401a      	ands	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6a1a      	ldr	r2, [r3, #32]
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	211f      	movs	r1, #31
 80094d0:	400b      	ands	r3, r1
 80094d2:	6879      	ldr	r1, [r7, #4]
 80094d4:	4099      	lsls	r1, r3
 80094d6:	000b      	movs	r3, r1
 80094d8:	431a      	orrs	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	621a      	str	r2, [r3, #32]
}
 80094de:	46c0      	nop			@ (mov r8, r8)
 80094e0:	46bd      	mov	sp, r7
 80094e2:	b006      	add	sp, #24
 80094e4:	bd80      	pop	{r7, pc}
	...

080094e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	223c      	movs	r2, #60	@ 0x3c
 80094f6:	5c9b      	ldrb	r3, [r3, r2]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d101      	bne.n	8009500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094fc:	2302      	movs	r3, #2
 80094fe:	e050      	b.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	223c      	movs	r2, #60	@ 0x3c
 8009504:	2101      	movs	r1, #1
 8009506:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	223d      	movs	r2, #61	@ 0x3d
 800950c:	2102      	movs	r1, #2
 800950e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a21      	ldr	r2, [pc, #132]	@ (80095ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d108      	bne.n	800953c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	4a20      	ldr	r2, [pc, #128]	@ (80095b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800952e:	4013      	ands	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	4313      	orrs	r3, r2
 800953a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2270      	movs	r2, #112	@ 0x70
 8009540:	4393      	bics	r3, r2
 8009542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	4313      	orrs	r3, r2
 800954c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a14      	ldr	r2, [pc, #80]	@ (80095ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d00a      	beq.n	8009576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	2380      	movs	r3, #128	@ 0x80
 8009566:	05db      	lsls	r3, r3, #23
 8009568:	429a      	cmp	r2, r3
 800956a:	d004      	beq.n	8009576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a10      	ldr	r2, [pc, #64]	@ (80095b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d10c      	bne.n	8009590 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	2280      	movs	r2, #128	@ 0x80
 800957a:	4393      	bics	r3, r2
 800957c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	4313      	orrs	r3, r2
 8009586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	223d      	movs	r2, #61	@ 0x3d
 8009594:	2101      	movs	r1, #1
 8009596:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	223c      	movs	r2, #60	@ 0x3c
 800959c:	2100      	movs	r1, #0
 800959e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	0018      	movs	r0, r3
 80095a4:	46bd      	mov	sp, r7
 80095a6:	b004      	add	sp, #16
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	46c0      	nop			@ (mov r8, r8)
 80095ac:	40012c00 	.word	0x40012c00
 80095b0:	ff0fffff 	.word	0xff0fffff
 80095b4:	40000400 	.word	0x40000400

080095b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095c0:	46c0      	nop			@ (mov r8, r8)
 80095c2:	46bd      	mov	sp, r7
 80095c4:	b002      	add	sp, #8
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095d0:	46c0      	nop			@ (mov r8, r8)
 80095d2:	46bd      	mov	sp, r7
 80095d4:	b002      	add	sp, #8
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80095e0:	46c0      	nop			@ (mov r8, r8)
 80095e2:	46bd      	mov	sp, r7
 80095e4:	b002      	add	sp, #8
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <memset>:
 80095e8:	0003      	movs	r3, r0
 80095ea:	1882      	adds	r2, r0, r2
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d100      	bne.n	80095f2 <memset+0xa>
 80095f0:	4770      	bx	lr
 80095f2:	7019      	strb	r1, [r3, #0]
 80095f4:	3301      	adds	r3, #1
 80095f6:	e7f9      	b.n	80095ec <memset+0x4>

080095f8 <__libc_init_array>:
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	2600      	movs	r6, #0
 80095fc:	4c0c      	ldr	r4, [pc, #48]	@ (8009630 <__libc_init_array+0x38>)
 80095fe:	4d0d      	ldr	r5, [pc, #52]	@ (8009634 <__libc_init_array+0x3c>)
 8009600:	1b64      	subs	r4, r4, r5
 8009602:	10a4      	asrs	r4, r4, #2
 8009604:	42a6      	cmp	r6, r4
 8009606:	d109      	bne.n	800961c <__libc_init_array+0x24>
 8009608:	2600      	movs	r6, #0
 800960a:	f000 f823 	bl	8009654 <_init>
 800960e:	4c0a      	ldr	r4, [pc, #40]	@ (8009638 <__libc_init_array+0x40>)
 8009610:	4d0a      	ldr	r5, [pc, #40]	@ (800963c <__libc_init_array+0x44>)
 8009612:	1b64      	subs	r4, r4, r5
 8009614:	10a4      	asrs	r4, r4, #2
 8009616:	42a6      	cmp	r6, r4
 8009618:	d105      	bne.n	8009626 <__libc_init_array+0x2e>
 800961a:	bd70      	pop	{r4, r5, r6, pc}
 800961c:	00b3      	lsls	r3, r6, #2
 800961e:	58eb      	ldr	r3, [r5, r3]
 8009620:	4798      	blx	r3
 8009622:	3601      	adds	r6, #1
 8009624:	e7ee      	b.n	8009604 <__libc_init_array+0xc>
 8009626:	00b3      	lsls	r3, r6, #2
 8009628:	58eb      	ldr	r3, [r5, r3]
 800962a:	4798      	blx	r3
 800962c:	3601      	adds	r6, #1
 800962e:	e7f2      	b.n	8009616 <__libc_init_array+0x1e>
 8009630:	08009760 	.word	0x08009760
 8009634:	08009760 	.word	0x08009760
 8009638:	08009764 	.word	0x08009764
 800963c:	08009760 	.word	0x08009760

08009640 <memcpy>:
 8009640:	2300      	movs	r3, #0
 8009642:	b510      	push	{r4, lr}
 8009644:	429a      	cmp	r2, r3
 8009646:	d100      	bne.n	800964a <memcpy+0xa>
 8009648:	bd10      	pop	{r4, pc}
 800964a:	5ccc      	ldrb	r4, [r1, r3]
 800964c:	54c4      	strb	r4, [r0, r3]
 800964e:	3301      	adds	r3, #1
 8009650:	e7f8      	b.n	8009644 <memcpy+0x4>
	...

08009654 <_init>:
 8009654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009656:	46c0      	nop			@ (mov r8, r8)
 8009658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800965a:	bc08      	pop	{r3}
 800965c:	469e      	mov	lr, r3
 800965e:	4770      	bx	lr

08009660 <_fini>:
 8009660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009662:	46c0      	nop			@ (mov r8, r8)
 8009664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009666:	bc08      	pop	{r3}
 8009668:	469e      	mov	lr, r3
 800966a:	4770      	bx	lr
