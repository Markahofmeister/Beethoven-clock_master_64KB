
Beethoven-clock_master_64KB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092a4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08009360  08009360  0000a360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009454  08009454  0000b098  2**0
                  CONTENTS
  4 .ARM          00000000  08009454  08009454  0000b098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009454  08009454  0000b098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009454  08009454  0000a454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009458  08009458  0000a458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800945c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  20000098  080094f4  0000b098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  080094f4  0000b5f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fd7  00000000  00000000  0000b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a7  00000000  00000000  00023097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00026740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e2  00000000  00000000  00027e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194f5  00000000  00000000  00029012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c625  00000000  00000000  00042507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c63d  00000000  00000000  0005eb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb169  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000536c  00000000  00000000  000fb1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00100518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000098 	.word	0x20000098
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009348 	.word	0x08009348

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000009c 	.word	0x2000009c
 8000100:	08009348 	.word	0x08009348

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-low hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2200      	movs	r2, #0
 800025a:	0019      	movs	r1, r3
 800025c:	f004 f80f 	bl	800427e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2201      	movs	r2, #1
 800026c:	0019      	movs	r1, r3
 800026e:	f004 f806 	bl	800427e <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f008 f866 	bl	8008348 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f008 f815 	bl	80082b0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f004 f819 	bl	8004490 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f004 f92d 	bl	80046e4 <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	08009360 	.word	0x08009360

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f003 ffdb 	bl	8004490 <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f003 ffb5 	bl	8004490 <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f004 f8c9 	bl	80046e4 <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	08009364 	.word	0x08009364

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f003 ff71 	bl	8004490 <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f004 f885 	bl	80046e4 <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	08009368 	.word	0x08009368

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f003 ff21 	bl	8004490 <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f004 f835 	bl	80046e4 <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	0800936c 	.word	0x0800936c
 8000700:	08009374 	.word	0x08009374

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f003 fe9f 	bl	8004490 <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f003 ffb3 	bl	80046e4 <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f003 fe40 	bl	8004490 <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f003 fe1f 	bl	8004490 <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f003 ff33 	bl	80046e4 <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	0800936c 	.word	0x0800936c
 8000894:	08009374 	.word	0x08009374

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f003 fdc5 	bl	8004490 <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f003 fda3 	bl	8004490 <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f003 fec0 	bl	80046e4 <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	0800937c 	.word	0x0800937c
 8000978:	0800936c 	.word	0x0800936c

0800097c <NAU8315YG_Init>:

#ifndef NAU8315YG_H_
#include "../Inc/NAU8315YG.h"
#endif

void NAU8315YG_Init(NAU8315YG *nau, I2S_HandleTypeDef *hi2s, GPIO_TypeDef *enablePort, uint32_t enablePin) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	603b      	str	r3, [r7, #0]

	nau->hi2s = hi2s;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	601a      	str	r2, [r3, #0]

	nau->enablePort = enablePort;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	605a      	str	r2, [r3, #4]
	nau->enablePin = enablePin;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	609a      	str	r2, [r3, #8]

	NAU8315YG_AmpDisable(nau);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f804 	bl	80009ac <NAU8315YG_AmpDisable>

}
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b004      	add	sp, #16
 80009aa:	bd80      	pop	{r7, pc}

080009ac <NAU8315YG_AmpDisable>:
	nau->ampEnableFlag = 1;

}


void NAU8315YG_AmpDisable(NAU8315YG *nau) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

	// Set enable pin high
	HAL_GPIO_WritePin(nau->enablePort, nau->enablePin, GPIO_PIN_RESET);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6858      	ldr	r0, [r3, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	2200      	movs	r2, #0
 80009c0:	0019      	movs	r1, r3
 80009c2:	f003 fc5c 	bl	800427e <HAL_GPIO_WritePin>

	nau->ampEnableFlag = 0;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2200      	movs	r2, #0
 80009ca:	731a      	strb	r2, [r3, #12]

}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <W25Q_Init>:
#endif


uint8_t W25Q_Init(W25Q *wq, GPIO_TypeDef *nCSPort, GPIO_TypeDef *nWPPort, GPIO_TypeDef *nHOLDPort,
					uint32_t nCSPin, uint32_t nWPPin, uint32_t nHOLDPin, SPI_HandleTypeDef *hspi,
					uint8_t devID, uint8_t isQuadChip, uint8_t driveStrength) {
 80009d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d6:	b087      	sub	sp, #28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
 80009e0:	603b      	str	r3, [r7, #0]

	// Map struct GPIO Ports & Pins to passed parameters
	wq->nCSPort = nCSPort;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	68ba      	ldr	r2, [r7, #8]
 80009e6:	601a      	str	r2, [r3, #0]
	wq->nWPPort = nWPPort;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	605a      	str	r2, [r3, #4]
	wq->nHOLDPort = nHOLDPort;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	609a      	str	r2, [r3, #8]

	wq->nCSPin = nCSPin;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80009f8:	60da      	str	r2, [r3, #12]
	wq->nWPPin = nWPPin;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80009fe:	611a      	str	r2, [r3, #16]
	wq->nHOLDPin = nHOLDPin;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a04:	615a      	str	r2, [r3, #20]

	wq->hspi = hspi;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a0a:	619a      	str	r2, [r3, #24]

	wq->quadEnable = isQuadChip;		// Default state depends on PN of chip.
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	223c      	movs	r2, #60	@ 0x3c
 8000a10:	2108      	movs	r1, #8
 8000a12:	1852      	adds	r2, r2, r1
 8000a14:	19d2      	adds	r2, r2, r7
 8000a16:	2125      	movs	r1, #37	@ 0x25
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	545a      	strb	r2, [r3, r1]
	wq->writeEnable = 0;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2223      	movs	r2, #35	@ 0x23
 8000a20:	2100      	movs	r1, #0
 8000a22:	5499      	strb	r1, [r3, r2]

	// Set CS pin high
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	6818      	ldr	r0, [r3, #0]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	2201      	movs	r2, #1
 8000a30:	0019      	movs	r1, r3
 8000a32:	f003 fc24 	bl	800427e <HAL_GPIO_WritePin>

	// Set hold pin high (Disable)
	HAL_GPIO_WritePin(wq->nHOLDPort, wq->nHOLDPin, GPIO_PIN_SET);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	6898      	ldr	r0, [r3, #8]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	2201      	movs	r2, #1
 8000a42:	0019      	movs	r1, r3
 8000a44:	f003 fc1b 	bl	800427e <HAL_GPIO_WritePin>

	// Set WP pin high (disable)
	HAL_GPIO_WritePin(wq->nWPPort, wq->nWPPin, GPIO_PIN_SET);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	6858      	ldr	r0, [r3, #4]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	691b      	ldr	r3, [r3, #16]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	2201      	movs	r2, #1
 8000a54:	0019      	movs	r1, r3
 8000a56:	f003 fc12 	bl	800427e <HAL_GPIO_WritePin>

	// HAL status handle used to indicate error messages
	HAL_StatusTypeDef halRet = HAL_OK;
 8000a5a:	2116      	movs	r1, #22
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2200      	movs	r2, #0
 8000a60:	701a      	strb	r2, [r3, #0]

	uint8_t returnInc = 1;			// Integer error code return, incremented after successful things.
 8000a62:	2617      	movs	r6, #23
 8000a64:	19bb      	adds	r3, r7, r6
 8000a66:	2201      	movs	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]

	uint8_t errorsEnabled = 1;		// Use for debugging
 8000a6a:	2315      	movs	r3, #21
 8000a6c:	18fb      	adds	r3, r7, r3
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]

	// Release from power down mode
	halRet = W25Q_ReleasePowerDown(wq);
 8000a72:	000d      	movs	r5, r1
 8000a74:	187c      	adds	r4, r7, r1
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 f8ea 	bl	8000c52 <W25Q_ReleasePowerDown>
 8000a7e:	0003      	movs	r3, r0
 8000a80:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000a82:	197b      	adds	r3, r7, r5
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d007      	beq.n	8000a9a <W25Q_Init+0xc6>
 8000a8a:	2315      	movs	r3, #21
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <W25Q_Init+0xc6>
		return returnInc;
 8000a94:	19bb      	adds	r3, r7, r6
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	e0d7      	b.n	8000c4a <W25Q_Init+0x276>
	else
		returnInc++;
 8000a9a:	2517      	movs	r5, #23
 8000a9c:	197b      	adds	r3, r7, r5
 8000a9e:	781a      	ldrb	r2, [r3, #0]
 8000aa0:	197b      	adds	r3, r7, r5
 8000aa2:	3201      	adds	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]

	// Reset Device
	halRet = W25Q_ChipReset(wq);
 8000aa6:	2616      	movs	r6, #22
 8000aa8:	19bc      	adds	r4, r7, r6
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	0018      	movs	r0, r3
 8000aae:	f000 fc45 	bl	800133c <W25Q_ChipReset>
 8000ab2:	0003      	movs	r3, r0
 8000ab4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000ab6:	19bb      	adds	r3, r7, r6
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d007      	beq.n	8000ace <W25Q_Init+0xfa>
 8000abe:	2315      	movs	r3, #21
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d002      	beq.n	8000ace <W25Q_Init+0xfa>
		return returnInc;
 8000ac8:	197b      	adds	r3, r7, r5
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	e0bd      	b.n	8000c4a <W25Q_Init+0x276>
	else
		returnInc++;
 8000ace:	2517      	movs	r5, #23
 8000ad0:	197b      	adds	r3, r7, r5
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	197b      	adds	r3, r7, r5
 8000ad6:	3201      	adds	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]

	// Read initial Status Registers
	halRet = W25Q_ReadStatusRegs(wq);
 8000ada:	2616      	movs	r6, #22
 8000adc:	19bc      	adds	r4, r7, r6
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 faef 	bl	80010c4 <W25Q_ReadStatusRegs>
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000aea:	19bb      	adds	r3, r7, r6
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d007      	beq.n	8000b02 <W25Q_Init+0x12e>
 8000af2:	2315      	movs	r3, #21
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d002      	beq.n	8000b02 <W25Q_Init+0x12e>
		return returnInc;
 8000afc:	197b      	adds	r3, r7, r5
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	e0a3      	b.n	8000c4a <W25Q_Init+0x276>
	else
		returnInc++;
 8000b02:	2517      	movs	r5, #23
 8000b04:	197b      	adds	r3, r7, r5
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	197b      	adds	r3, r7, r5
 8000b0a:	3201      	adds	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]

	// Increase driver strength?
	halRet = W25Q_SetDriverStrength(wq, driveStrength);
 8000b0e:	2616      	movs	r6, #22
 8000b10:	19bc      	adds	r4, r7, r6
 8000b12:	2340      	movs	r3, #64	@ 0x40
 8000b14:	2208      	movs	r2, #8
 8000b16:	189b      	adds	r3, r3, r2
 8000b18:	19db      	adds	r3, r3, r7
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	0011      	movs	r1, r2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f000 fc75 	bl	8001410 <W25Q_SetDriverStrength>
 8000b26:	0003      	movs	r3, r0
 8000b28:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b2a:	19bb      	adds	r3, r7, r6
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d007      	beq.n	8000b42 <W25Q_Init+0x16e>
 8000b32:	2315      	movs	r3, #21
 8000b34:	18fb      	adds	r3, r7, r3
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <W25Q_Init+0x16e>
		return returnInc;
 8000b3c:	197b      	adds	r3, r7, r5
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	e083      	b.n	8000c4a <W25Q_Init+0x276>
	else
		returnInc++;
 8000b42:	2517      	movs	r5, #23
 8000b44:	197b      	adds	r3, r7, r5
 8000b46:	781a      	ldrb	r2, [r3, #0]
 8000b48:	197b      	adds	r3, r7, r5
 8000b4a:	3201      	adds	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
//			returnInc++;
//	}


	// Get + Store IDs
	halRet = W25Q_GetIDs(wq, devID);
 8000b4e:	2616      	movs	r6, #22
 8000b50:	19bc      	adds	r4, r7, r6
 8000b52:	2338      	movs	r3, #56	@ 0x38
 8000b54:	2208      	movs	r2, #8
 8000b56:	189b      	adds	r3, r3, r2
 8000b58:	19db      	adds	r3, r3, r7
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 f8bb 	bl	8000cdc <W25Q_GetIDs>
 8000b66:	0003      	movs	r3, r0
 8000b68:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b6a:	19bb      	adds	r3, r7, r6
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d007      	beq.n	8000b82 <W25Q_Init+0x1ae>
 8000b72:	2315      	movs	r3, #21
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <W25Q_Init+0x1ae>
		return returnInc;
 8000b7c:	197b      	adds	r3, r7, r5
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	e063      	b.n	8000c4a <W25Q_Init+0x276>
	else
		returnInc++;
 8000b82:	2517      	movs	r5, #23
 8000b84:	197b      	adds	r3, r7, r5
 8000b86:	781a      	ldrb	r2, [r3, #0]
 8000b88:	197b      	adds	r3, r7, r5
 8000b8a:	3201      	adds	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]

	// Get + Store Status Register Contents
	halRet = W25Q_ReadStatusRegs(wq);
 8000b8e:	2616      	movs	r6, #22
 8000b90:	19bc      	adds	r4, r7, r6
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	0018      	movs	r0, r3
 8000b96:	f000 fa95 	bl	80010c4 <W25Q_ReadStatusRegs>
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b9e:	19bb      	adds	r3, r7, r6
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d007      	beq.n	8000bb6 <W25Q_Init+0x1e2>
 8000ba6:	2315      	movs	r3, #21
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d002      	beq.n	8000bb6 <W25Q_Init+0x1e2>
		return returnInc;
 8000bb0:	197b      	adds	r3, r7, r5
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	e049      	b.n	8000c4a <W25Q_Init+0x276>
	else
		returnInc++;
 8000bb6:	2517      	movs	r5, #23
 8000bb8:	197b      	adds	r3, r7, r5
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	197b      	adds	r3, r7, r5
 8000bbe:	3201      	adds	r2, #1
 8000bc0:	701a      	strb	r2, [r3, #0]

	// Disable Write Access to Memory
	if(wq->writeEnable != 0) {
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2223      	movs	r2, #35	@ 0x23
 8000bc6:	5c9b      	ldrb	r3, [r3, r2]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d019      	beq.n	8000c00 <W25Q_Init+0x22c>
		halRet = W25Q_DisableWrite(wq);
 8000bcc:	2616      	movs	r6, #22
 8000bce:	19bc      	adds	r4, r7, r6
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 f985 	bl	8000ee2 <W25Q_DisableWrite>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK && errorsEnabled)
 8000bdc:	19bb      	adds	r3, r7, r6
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d007      	beq.n	8000bf4 <W25Q_Init+0x220>
 8000be4:	2315      	movs	r3, #21
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <W25Q_Init+0x220>
			return returnInc;
 8000bee:	197b      	adds	r3, r7, r5
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	e02a      	b.n	8000c4a <W25Q_Init+0x276>
		else
			returnInc++;
 8000bf4:	2117      	movs	r1, #23
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	3201      	adds	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
	}

	// Get + Store Status Register Contents
	halRet = W25Q_ReadStatusRegs(wq);
 8000c00:	2516      	movs	r5, #22
 8000c02:	197c      	adds	r4, r7, r5
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 fa5c 	bl	80010c4 <W25Q_ReadStatusRegs>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000c10:	197b      	adds	r3, r7, r5
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d008      	beq.n	8000c2a <W25Q_Init+0x256>
 8000c18:	2315      	movs	r3, #21
 8000c1a:	18fb      	adds	r3, r7, r3
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d003      	beq.n	8000c2a <W25Q_Init+0x256>
		return returnInc;
 8000c22:	2317      	movs	r3, #23
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	e00f      	b.n	8000c4a <W25Q_Init+0x276>
	else
		returnInc++;
 8000c2a:	2117      	movs	r1, #23
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	3201      	adds	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]

	// Set WP pin low (Enable)
	HAL_GPIO_WritePin(wq->nWPPort, wq->nWPPin, GPIO_PIN_RESET);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	6858      	ldr	r0, [r3, #4]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	2200      	movs	r2, #0
 8000c42:	0019      	movs	r1, r3
 8000c44:	f003 fb1b 	bl	800427e <HAL_GPIO_WritePin>

	return 0;
 8000c48:	2300      	movs	r3, #0

}
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b007      	add	sp, #28
 8000c50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c52 <W25Q_ReleasePowerDown>:

HAL_StatusTypeDef W25Q_ReleasePowerDown(W25Q *wq) {
 8000c52:	b590      	push	{r4, r7, lr}
 8000c54:	b085      	sub	sp, #20
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000c5a:	240e      	movs	r4, #14
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]

	// TX release power-down instruction
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6818      	ldr	r0, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	0019      	movs	r1, r3
 8000c70:	f003 fb05 	bl	800427e <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_READ_RELEASE_ID}, 1, HAL_MAX_DELAY);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6998      	ldr	r0, [r3, #24]
 8000c78:	210c      	movs	r1, #12
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	22ab      	movs	r2, #171	@ 0xab
 8000c7e:	701a      	strb	r2, [r3, #0]
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	2301      	movs	r3, #1
 8000c84:	425b      	negs	r3, r3
 8000c86:	1879      	adds	r1, r7, r1
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f006 fc51 	bl	8007530 <HAL_SPI_Transmit>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6818      	ldr	r0, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	f003 faed 	bl	800427e <HAL_GPIO_WritePin>

	// Delay for at least 3 us
	for(uint8_t i = 0; i < 15; i++) {
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
 8000cac:	e006      	b.n	8000cbc <W25Q_ReleasePowerDown+0x6a>
		__NOP();
 8000cae:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < 15; i++) {
 8000cb0:	210f      	movs	r1, #15
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	781a      	ldrb	r2, [r3, #0]
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	3201      	adds	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b0e      	cmp	r3, #14
 8000cc4:	d9f3      	bls.n	8000cae <W25Q_ReleasePowerDown+0x5c>
	}

	wq->powerUp = 1; 		// We have now successfully exited power-down state
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2224      	movs	r2, #36	@ 0x24
 8000cca:	2101      	movs	r1, #1
 8000ccc:	5499      	strb	r1, [r3, r2]

	return halRet;
 8000cce:	230e      	movs	r3, #14
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	781b      	ldrb	r3, [r3, #0]

}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b005      	add	sp, #20
 8000cda:	bd90      	pop	{r4, r7, pc}

08000cdc <W25Q_GetIDs>:

HAL_StatusTypeDef W25Q_GetIDs(W25Q *wq, uint8_t devID_passed) {
 8000cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cde:	b089      	sub	sp, #36	@ 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	000a      	movs	r2, r1
 8000ce6:	1cfb      	adds	r3, r7, #3
 8000ce8:	701a      	strb	r2, [r3, #0]


	HAL_StatusTypeDef halRet = HAL_OK;
 8000cea:	241f      	movs	r4, #31
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]

	/*
	 * Release power down + read device ID
	 */
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6818      	ldr	r0, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	0019      	movs	r1, r3
 8000d00:	f003 fabd 	bl	800427e <HAL_GPIO_WritePin>
		// TX return device ID instruction
		halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[4]){CMD_READ_RELEASE_ID, 0x00, 0x00, 0x00}, 4, HAL_MAX_DELAY);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6998      	ldr	r0, [r3, #24]
 8000d08:	2118      	movs	r1, #24
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	22ab      	movs	r2, #171	@ 0xab
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2200      	movs	r2, #0
 8000d14:	705a      	strb	r2, [r3, #1]
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2200      	movs	r2, #0
 8000d1a:	709a      	strb	r2, [r3, #2]
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	2200      	movs	r2, #0
 8000d20:	70da      	strb	r2, [r3, #3]
 8000d22:	0025      	movs	r5, r4
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	2301      	movs	r3, #1
 8000d28:	425b      	negs	r3, r3
 8000d2a:	1879      	adds	r1, r7, r1
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	f006 fbff 	bl	8007530 <HAL_SPI_Transmit>
 8000d32:	0003      	movs	r3, r0
 8000d34:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 8000d36:	197b      	adds	r3, r7, r5
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d00b      	beq.n	8000d56 <W25Q_GetIDs+0x7a>
			HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	2201      	movs	r2, #1
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	f003 fa97 	bl	800427e <HAL_GPIO_WritePin>
			return halRet;
 8000d50:	197b      	adds	r3, r7, r5
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	e07c      	b.n	8000e50 <W25Q_GetIDs+0x174>
		}

		// RX device ID into struct variable
		uint8_t devIDRet[1] = {0x00};
 8000d56:	2514      	movs	r5, #20
 8000d58:	197b      	adds	r3, r7, r5
 8000d5a:	4a3f      	ldr	r2, [pc, #252]	@ (8000e58 <W25Q_GetIDs+0x17c>)
 8000d5c:	7812      	ldrb	r2, [r2, #0]
 8000d5e:	701a      	strb	r2, [r3, #0]
		halRet = HAL_SPI_Receive(wq->hspi, devIDRet, 1, HAL_MAX_DELAY);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6998      	ldr	r0, [r3, #24]
 8000d64:	261f      	movs	r6, #31
 8000d66:	19bc      	adds	r4, r7, r6
 8000d68:	2301      	movs	r3, #1
 8000d6a:	425b      	negs	r3, r3
 8000d6c:	1979      	adds	r1, r7, r5
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f006 fd3e 	bl	80077f0 <HAL_SPI_Receive>
 8000d74:	0003      	movs	r3, r0
 8000d76:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	2201      	movs	r2, #1
 8000d84:	0019      	movs	r1, r3
 8000d86:	f003 fa7a 	bl	800427e <HAL_GPIO_WritePin>
		wq->devID = devIDRet[0];
 8000d8a:	197b      	adds	r3, r7, r5
 8000d8c:	781a      	ldrb	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	775a      	strb	r2, [r3, #29]


		 // Check to ensure that received device ID is equal to that passed by the user in the init function
		if((halRet != HAL_OK) || (wq->devID != devID_passed))
 8000d92:	19bb      	adds	r3, r7, r6
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d105      	bne.n	8000da6 <W25Q_GetIDs+0xca>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7f5b      	ldrb	r3, [r3, #29]
 8000d9e:	1cfa      	adds	r2, r7, #3
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d001      	beq.n	8000daa <W25Q_GetIDs+0xce>
			return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e052      	b.n	8000e50 <W25Q_GetIDs+0x174>

	/*
	 * Read and check MFR ID
	 */
		// TX read mfr + device ID command
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	2200      	movs	r2, #0
 8000db6:	0019      	movs	r1, r3
 8000db8:	f003 fa61 	bl	800427e <HAL_GPIO_WritePin>
		halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[4]){CMD_READ_MFR_ID, 0x00, 0x00, 0x00}, 4, HAL_MAX_DELAY);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6998      	ldr	r0, [r3, #24]
 8000dc0:	2110      	movs	r1, #16
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2290      	movs	r2, #144	@ 0x90
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2200      	movs	r2, #0
 8000dcc:	705a      	strb	r2, [r3, #1]
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	709a      	strb	r2, [r3, #2]
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	70da      	strb	r2, [r3, #3]
 8000dda:	251f      	movs	r5, #31
 8000ddc:	197c      	adds	r4, r7, r5
 8000dde:	2301      	movs	r3, #1
 8000de0:	425b      	negs	r3, r3
 8000de2:	1879      	adds	r1, r7, r1
 8000de4:	2204      	movs	r2, #4
 8000de6:	f006 fba3 	bl	8007530 <HAL_SPI_Transmit>
 8000dea:	0003      	movs	r3, r0
 8000dec:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000dee:	197b      	adds	r3, r7, r5
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <W25Q_GetIDs+0x120>
			return halRet;
 8000df6:	197b      	adds	r3, r7, r5
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	e029      	b.n	8000e50 <W25Q_GetIDs+0x174>
		}



		// RX device and mfr ID, store in struct variable
		uint8_t retIDs[2] = {0x00, 0x00};
 8000dfc:	250c      	movs	r5, #12
 8000dfe:	197b      	adds	r3, r7, r5
 8000e00:	2200      	movs	r2, #0
 8000e02:	801a      	strh	r2, [r3, #0]
		halRet = HAL_SPI_Receive(wq->hspi, retIDs, 2, HAL_MAX_DELAY);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6998      	ldr	r0, [r3, #24]
 8000e08:	261f      	movs	r6, #31
 8000e0a:	19bc      	adds	r4, r7, r6
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	425b      	negs	r3, r3
 8000e10:	1979      	adds	r1, r7, r5
 8000e12:	2202      	movs	r2, #2
 8000e14:	f006 fcec 	bl	80077f0 <HAL_SPI_Receive>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	2201      	movs	r2, #1
 8000e28:	0019      	movs	r1, r3
 8000e2a:	f003 fa28 	bl	800427e <HAL_GPIO_WritePin>
		wq->mfrID = retIDs[0];
 8000e2e:	197b      	adds	r3, r7, r5
 8000e30:	781a      	ldrb	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	771a      	strb	r2, [r3, #28]


		// Check to ensure that received mfr ID is correct.
		if((halRet != HAL_OK) || (wq->mfrID != 0xEF))
 8000e36:	19bb      	adds	r3, r7, r6
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d103      	bne.n	8000e46 <W25Q_GetIDs+0x16a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7f1b      	ldrb	r3, [r3, #28]
 8000e42:	2bef      	cmp	r3, #239	@ 0xef
 8000e44:	d001      	beq.n	8000e4a <W25Q_GetIDs+0x16e>
			return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e002      	b.n	8000e50 <W25Q_GetIDs+0x174>

	/*
	 * Leaving out for now: Read JEDEC ID
	 */

		return halRet;
 8000e4a:	231f      	movs	r3, #31
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	781b      	ldrb	r3, [r3, #0]
}
 8000e50:	0018      	movs	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b009      	add	sp, #36	@ 0x24
 8000e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e58:	08009384 	.word	0x08009384

08000e5c <W25Q_EnableWrite>:

HAL_StatusTypeDef W25Q_EnableWrite(W25Q *wq) {
 8000e5c:	b5b0      	push	{r4, r5, r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000e64:	250f      	movs	r5, #15
 8000e66:	197b      	adds	r3, r7, r5
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]

	// TX write enable command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6818      	ldr	r0, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	2200      	movs	r2, #0
 8000e78:	0019      	movs	r1, r3
 8000e7a:	f003 fa00 	bl	800427e <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_WRITE_ENABLE}, 1, HAL_MAX_DELAY);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6998      	ldr	r0, [r3, #24]
 8000e82:	210c      	movs	r1, #12
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2206      	movs	r2, #6
 8000e88:	701a      	strb	r2, [r3, #0]
 8000e8a:	197c      	adds	r4, r7, r5
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	425b      	negs	r3, r3
 8000e90:	1879      	adds	r1, r7, r1
 8000e92:	2201      	movs	r2, #1
 8000e94:	f006 fb4c 	bl	8007530 <HAL_SPI_Transmit>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	f003 f9e8 	bl	800427e <HAL_GPIO_WritePin>

	if(halRet != HAL_OK)
 8000eae:	197b      	adds	r3, r7, r5
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <W25Q_EnableWrite+0x60>
		return halRet;
 8000eb6:	197b      	adds	r3, r7, r5
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	e00e      	b.n	8000eda <W25Q_EnableWrite+0x7e>

	// Read back written value and confirm
	W25Q_ReadStatusReg(wq, 1);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f000 f851 	bl	8000f68 <W25Q_ReadStatusReg>

	// Bit 1 of status register 1 should now be 1
	if(wq->writeEnable != 1)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2223      	movs	r2, #35	@ 0x23
 8000eca:	5c9b      	ldrb	r3, [r3, r2]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d001      	beq.n	8000ed4 <W25Q_EnableWrite+0x78>
		return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e002      	b.n	8000eda <W25Q_EnableWrite+0x7e>

	return halRet;
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	781b      	ldrb	r3, [r3, #0]

}
 8000eda:	0018      	movs	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b004      	add	sp, #16
 8000ee0:	bdb0      	pop	{r4, r5, r7, pc}

08000ee2 <W25Q_DisableWrite>:

HAL_StatusTypeDef W25Q_DisableWrite(W25Q *wq) {
 8000ee2:	b5b0      	push	{r4, r5, r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000eea:	250f      	movs	r5, #15
 8000eec:	197b      	adds	r3, r7, r5
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]

	// TX write disable command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6818      	ldr	r0, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	2200      	movs	r2, #0
 8000efe:	0019      	movs	r1, r3
 8000f00:	f003 f9bd 	bl	800427e <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_WRITE_DISABLE}, 1, HAL_MAX_DELAY);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6998      	ldr	r0, [r3, #24]
 8000f08:	210c      	movs	r1, #12
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	701a      	strb	r2, [r3, #0]
 8000f10:	197c      	adds	r4, r7, r5
 8000f12:	2301      	movs	r3, #1
 8000f14:	425b      	negs	r3, r3
 8000f16:	1879      	adds	r1, r7, r1
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f006 fb09 	bl	8007530 <HAL_SPI_Transmit>
 8000f1e:	0003      	movs	r3, r0
 8000f20:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	0019      	movs	r1, r3
 8000f30:	f003 f9a5 	bl	800427e <HAL_GPIO_WritePin>

	if(halRet != HAL_OK)
 8000f34:	197b      	adds	r3, r7, r5
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <W25Q_DisableWrite+0x60>
		return halRet;
 8000f3c:	197b      	adds	r3, r7, r5
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	e00e      	b.n	8000f60 <W25Q_DisableWrite+0x7e>

	// Read back written value and confirm
	W25Q_ReadStatusReg(wq, 1);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2101      	movs	r1, #1
 8000f46:	0018      	movs	r0, r3
 8000f48:	f000 f80e 	bl	8000f68 <W25Q_ReadStatusReg>

	// Bit 1 of status register 1 should still be 0
	if(wq->writeEnable != 0)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2223      	movs	r2, #35	@ 0x23
 8000f50:	5c9b      	ldrb	r3, [r3, r2]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <W25Q_DisableWrite+0x78>
		return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e002      	b.n	8000f60 <W25Q_DisableWrite+0x7e>

	return halRet;
 8000f5a:	230f      	movs	r3, #15
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	781b      	ldrb	r3, [r3, #0]

}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b004      	add	sp, #16
 8000f66:	bdb0      	pop	{r4, r5, r7, pc}

08000f68 <W25Q_ReadStatusReg>:

HAL_StatusTypeDef W25Q_ReadStatusReg(W25Q *wq, uint8_t regNum) {
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	000a      	movs	r2, r1
 8000f72:	1cfb      	adds	r3, r7, #3
 8000f74:	701a      	strb	r2, [r3, #0]

	// Check register number is valid
	if(regNum < 1 || regNum > 3) {
 8000f76:	1cfb      	adds	r3, r7, #3
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <W25Q_ReadStatusReg+0x1e>
 8000f7e:	1cfb      	adds	r3, r7, #3
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d901      	bls.n	8000f8a <W25Q_ReadStatusReg+0x22>
		return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e094      	b.n	80010b4 <W25Q_ReadStatusReg+0x14c>
	}

	HAL_StatusTypeDef halRet = HAL_OK;
 8000f8a:	2417      	movs	r4, #23
 8000f8c:	193b      	adds	r3, r7, r4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]

	// Array of commands for status registers 1-3
	uint8_t statRegCMDs[3] = {CMD_READ_STAT_1, CMD_READ_STAT_2, CMD_READ_STAT_3};
 8000f92:	2514      	movs	r5, #20
 8000f94:	197b      	adds	r3, r7, r5
 8000f96:	4a49      	ldr	r2, [pc, #292]	@ (80010bc <W25Q_ReadStatusReg+0x154>)
 8000f98:	8811      	ldrh	r1, [r2, #0]
 8000f9a:	8019      	strh	r1, [r3, #0]
 8000f9c:	7892      	ldrb	r2, [r2, #2]
 8000f9e:	709a      	strb	r2, [r3, #2]

	// TX read status register command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6818      	ldr	r0, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	2200      	movs	r2, #0
 8000fac:	0019      	movs	r1, r3
 8000fae:	f003 f966 	bl	800427e <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){statRegCMDs[regNum - 1]}, 1, HAL_MAX_DELAY);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6998      	ldr	r0, [r3, #24]
 8000fb6:	1cfb      	adds	r3, r7, #3
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	197a      	adds	r2, r7, r5
 8000fbe:	5cd2      	ldrb	r2, [r2, r3]
 8000fc0:	2110      	movs	r1, #16
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	0025      	movs	r5, r4
 8000fc8:	193c      	adds	r4, r7, r4
 8000fca:	2301      	movs	r3, #1
 8000fcc:	425b      	negs	r3, r3
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f006 faad 	bl	8007530 <HAL_SPI_Transmit>
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000fda:	197b      	adds	r3, r7, r5
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00b      	beq.n	8000ffa <W25Q_ReadStatusReg+0x92>
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	2201      	movs	r2, #1
 8000fee:	0019      	movs	r1, r3
 8000ff0:	f003 f945 	bl	800427e <HAL_GPIO_WritePin>
		return halRet;
 8000ff4:	197b      	adds	r3, r7, r5
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	e05c      	b.n	80010b4 <W25Q_ReadStatusReg+0x14c>
	}

	// RX status register
	uint8_t statRegRet[1] = {0x00};
 8000ffa:	210c      	movs	r1, #12
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	4a30      	ldr	r2, [pc, #192]	@ (80010c0 <W25Q_ReadStatusReg+0x158>)
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	701a      	strb	r2, [r3, #0]
	halRet = HAL_SPI_Receive(wq->hspi, statRegRet, 1, HAL_MAX_DELAY);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6998      	ldr	r0, [r3, #24]
 8001008:	2317      	movs	r3, #23
 800100a:	18fc      	adds	r4, r7, r3
 800100c:	2301      	movs	r3, #1
 800100e:	425b      	negs	r3, r3
 8001010:	1879      	adds	r1, r7, r1
 8001012:	2201      	movs	r2, #1
 8001014:	f006 fbec 	bl	80077f0 <HAL_SPI_Receive>
 8001018:	0003      	movs	r3, r0
 800101a:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	b29b      	uxth	r3, r3
 8001026:	2201      	movs	r2, #1
 8001028:	0019      	movs	r1, r3
 800102a:	f003 f928 	bl	800427e <HAL_GPIO_WritePin>

	switch(regNum) {
 800102e:	1cfb      	adds	r3, r7, #3
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b03      	cmp	r3, #3
 8001034:	d029      	beq.n	800108a <W25Q_ReadStatusReg+0x122>
 8001036:	dc3a      	bgt.n	80010ae <W25Q_ReadStatusReg+0x146>
 8001038:	2b01      	cmp	r3, #1
 800103a:	d002      	beq.n	8001042 <W25Q_ReadStatusReg+0xda>
 800103c:	2b02      	cmp	r3, #2
 800103e:	d012      	beq.n	8001066 <W25Q_ReadStatusReg+0xfe>
 8001040:	e035      	b.n	80010ae <W25Q_ReadStatusReg+0x146>
	case 1:
		wq->statReg1 = statRegRet[0];
 8001042:	230c      	movs	r3, #12
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	7819      	ldrb	r1, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2220      	movs	r2, #32
 800104c:	5499      	strb	r1, [r3, r2]
		wq->writeEnable = (wq->statReg1 & 0b00000010) >> 1;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2220      	movs	r2, #32
 8001052:	5c9b      	ldrb	r3, [r3, r2]
 8001054:	105b      	asrs	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2201      	movs	r2, #1
 800105a:	4013      	ands	r3, r2
 800105c:	b2d9      	uxtb	r1, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2223      	movs	r2, #35	@ 0x23
 8001062:	5499      	strb	r1, [r3, r2]
		break;
 8001064:	e023      	b.n	80010ae <W25Q_ReadStatusReg+0x146>
	case 2:
		wq->statReg2 = statRegRet[0];
 8001066:	230c      	movs	r3, #12
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	7819      	ldrb	r1, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2221      	movs	r2, #33	@ 0x21
 8001070:	5499      	strb	r1, [r3, r2]
		wq->quadEnable = (wq->statReg2 & 0b00000010) >> 1;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2221      	movs	r2, #33	@ 0x21
 8001076:	5c9b      	ldrb	r3, [r3, r2]
 8001078:	105b      	asrs	r3, r3, #1
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2201      	movs	r2, #1
 800107e:	4013      	ands	r3, r2
 8001080:	b2d9      	uxtb	r1, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2225      	movs	r2, #37	@ 0x25
 8001086:	5499      	strb	r1, [r3, r2]
		break;
 8001088:	e011      	b.n	80010ae <W25Q_ReadStatusReg+0x146>
	case 3:
		wq->statReg3 = statRegRet[0];
 800108a:	230c      	movs	r3, #12
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	7819      	ldrb	r1, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2222      	movs	r2, #34	@ 0x22
 8001094:	5499      	strb	r1, [r3, r2]
		wq->driverStrength = (wq->statReg3 & 0b01100000) >> 5;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2222      	movs	r2, #34	@ 0x22
 800109a:	5c9b      	ldrb	r3, [r3, r2]
 800109c:	115b      	asrs	r3, r3, #5
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2203      	movs	r2, #3
 80010a2:	4013      	ands	r3, r2
 80010a4:	b2d9      	uxtb	r1, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2226      	movs	r2, #38	@ 0x26
 80010aa:	5499      	strb	r1, [r3, r2]
		break;
 80010ac:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 80010ae:	2317      	movs	r3, #23
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	781b      	ldrb	r3, [r3, #0]

}
 80010b4:	0018      	movs	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b006      	add	sp, #24
 80010ba:	bdb0      	pop	{r4, r5, r7, pc}
 80010bc:	08009388 	.word	0x08009388
 80010c0:	08009384 	.word	0x08009384

080010c4 <W25Q_ReadStatusRegs>:

HAL_StatusTypeDef W25Q_ReadStatusRegs(W25Q *wq) {
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80010cc:	230e      	movs	r3, #14
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 1; i <=3; i++) {
 80010d4:	230f      	movs	r3, #15
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e00d      	b.n	80010fa <W25Q_ReadStatusRegs+0x36>

		W25Q_ReadStatusReg(wq, i);
 80010de:	240f      	movs	r4, #15
 80010e0:	193b      	adds	r3, r7, r4
 80010e2:	781a      	ldrb	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	0011      	movs	r1, r2
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff ff3d 	bl	8000f68 <W25Q_ReadStatusReg>
	for(uint8_t i = 1; i <=3; i++) {
 80010ee:	0021      	movs	r1, r4
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	781a      	ldrb	r2, [r3, #0]
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	3201      	adds	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	230f      	movs	r3, #15
 80010fc:	18fb      	adds	r3, r7, r3
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b03      	cmp	r3, #3
 8001102:	d9ec      	bls.n	80010de <W25Q_ReadStatusRegs+0x1a>

	}

	return halRet;
 8001104:	230e      	movs	r3, #14
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	781b      	ldrb	r3, [r3, #0]

}
 800110a:	0018      	movs	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	b005      	add	sp, #20
 8001110:	bd90      	pop	{r4, r7, pc}
	...

08001114 <W25Q_WriteStatusReg>:

HAL_StatusTypeDef W25Q_WriteStatusReg(W25Q *wq, uint8_t regNum, uint8_t regVal) {
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	0008      	movs	r0, r1
 800111e:	0011      	movs	r1, r2
 8001120:	1cfb      	adds	r3, r7, #3
 8001122:	1c02      	adds	r2, r0, #0
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	1cbb      	adds	r3, r7, #2
 8001128:	1c0a      	adds	r2, r1, #0
 800112a:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800112c:	2513      	movs	r5, #19
 800112e:	197b      	adds	r3, r7, r5
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]

	// Enable Write Access to Memory
	// Write access will disable after status register write
	if(wq->writeEnable != 1) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2223      	movs	r2, #35	@ 0x23
 8001138:	5c9b      	ldrb	r3, [r3, r2]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d00c      	beq.n	8001158 <W25Q_WriteStatusReg+0x44>
		halRet = W25Q_EnableWrite(wq);
 800113e:	197c      	adds	r4, r7, r5
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	0018      	movs	r0, r3
 8001144:	f7ff fe8a 	bl	8000e5c <W25Q_EnableWrite>
 8001148:	0003      	movs	r3, r0
 800114a:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK)
 800114c:	197b      	adds	r3, r7, r5
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <W25Q_WriteStatusReg+0x44>
			return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e08a      	b.n	800126e <W25Q_WriteStatusReg+0x15a>
	}

	// Array of commands for status registers 1-3
	uint8_t statRegCMDs[3] = {CMD_WRITE_STAT_1, CMD_WRITE_STAT_2, CMD_WRITE_STAT_3};
 8001158:	2410      	movs	r4, #16
 800115a:	193b      	adds	r3, r7, r4
 800115c:	4a46      	ldr	r2, [pc, #280]	@ (8001278 <W25Q_WriteStatusReg+0x164>)
 800115e:	8811      	ldrh	r1, [r2, #0]
 8001160:	8019      	strh	r1, [r3, #0]
 8001162:	7892      	ldrb	r2, [r2, #2]
 8001164:	709a      	strb	r2, [r3, #2]

	// TX write status reg with value
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	b29b      	uxth	r3, r3
 8001170:	2200      	movs	r2, #0
 8001172:	0019      	movs	r1, r3
 8001174:	f003 f883 	bl	800427e <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[2]){statRegCMDs[regNum - 1], regVal}, 2, HAL_MAX_DELAY);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6998      	ldr	r0, [r3, #24]
 800117c:	1cfb      	adds	r3, r7, #3
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	3b01      	subs	r3, #1
 8001182:	193a      	adds	r2, r7, r4
 8001184:	5cd2      	ldrb	r2, [r2, r3]
 8001186:	210c      	movs	r1, #12
 8001188:	187b      	adds	r3, r7, r1
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	187b      	adds	r3, r7, r1
 800118e:	1cba      	adds	r2, r7, #2
 8001190:	7812      	ldrb	r2, [r2, #0]
 8001192:	705a      	strb	r2, [r3, #1]
 8001194:	2513      	movs	r5, #19
 8001196:	197c      	adds	r4, r7, r5
 8001198:	2301      	movs	r3, #1
 800119a:	425b      	negs	r3, r3
 800119c:	1879      	adds	r1, r7, r1
 800119e:	2202      	movs	r2, #2
 80011a0:	f006 f9c6 	bl	8007530 <HAL_SPI_Transmit>
 80011a4:	0003      	movs	r3, r0
 80011a6:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	2201      	movs	r2, #1
 80011b4:	0019      	movs	r1, r3
 80011b6:	f003 f862 	bl	800427e <HAL_GPIO_WritePin>

	// WEL bit will now be set back to 0
	halRet = W25Q_ReadStatusReg(wq, 1);
 80011ba:	197c      	adds	r4, r7, r5
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2101      	movs	r1, #1
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff fed1 	bl	8000f68 <W25Q_ReadStatusReg>
 80011c6:	0003      	movs	r3, r0
 80011c8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80011ca:	197b      	adds	r3, r7, r5
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <W25Q_WriteStatusReg+0xc4>
		return halRet;
 80011d2:	197b      	adds	r3, r7, r5
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	e04a      	b.n	800126e <W25Q_WriteStatusReg+0x15a>

	// Delay maximum status register write time (15ms), as given by chip datasheet.
	// ~235ns per i
	for(uint32_t i = 0; i < 70000; i++) {
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	e003      	b.n	80011e6 <W25Q_WriteStatusReg+0xd2>
		__NOP();
 80011de:	46c0      	nop			@ (mov r8, r8)
	for(uint32_t i = 0; i < 70000; i++) {
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3301      	adds	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	4a24      	ldr	r2, [pc, #144]	@ (800127c <W25Q_WriteStatusReg+0x168>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d9f7      	bls.n	80011de <W25Q_WriteStatusReg+0xca>
	}

	if(halRet != HAL_OK)
 80011ee:	2213      	movs	r2, #19
 80011f0:	18bb      	adds	r3, r7, r2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <W25Q_WriteStatusReg+0xea>
		return halRet;
 80011f8:	18bb      	adds	r3, r7, r2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	e037      	b.n	800126e <W25Q_WriteStatusReg+0x15a>

	// Read back written value and confirm
	halRet = W25Q_ReadStatusReg(wq, regNum);
 80011fe:	2313      	movs	r3, #19
 8001200:	18fc      	adds	r4, r7, r3
 8001202:	1cfb      	adds	r3, r7, #3
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	0011      	movs	r1, r2
 800120a:	0018      	movs	r0, r3
 800120c:	f7ff feac 	bl	8000f68 <W25Q_ReadStatusReg>
 8001210:	0003      	movs	r3, r0
 8001212:	7023      	strb	r3, [r4, #0]
	switch(regNum) {
 8001214:	1cfb      	adds	r3, r7, #3
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b03      	cmp	r3, #3
 800121a:	d017      	beq.n	800124c <W25Q_WriteStatusReg+0x138>
 800121c:	dc24      	bgt.n	8001268 <W25Q_WriteStatusReg+0x154>
 800121e:	2b01      	cmp	r3, #1
 8001220:	d002      	beq.n	8001228 <W25Q_WriteStatusReg+0x114>
 8001222:	2b02      	cmp	r3, #2
 8001224:	d009      	beq.n	800123a <W25Q_WriteStatusReg+0x126>
 8001226:	e01f      	b.n	8001268 <W25Q_WriteStatusReg+0x154>
		case 1:
			if(wq->statReg1 != regVal)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2220      	movs	r2, #32
 800122c:	5c9b      	ldrb	r3, [r3, r2]
 800122e:	1cba      	adds	r2, r7, #2
 8001230:	7812      	ldrb	r2, [r2, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d013      	beq.n	800125e <W25Q_WriteStatusReg+0x14a>
				return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e019      	b.n	800126e <W25Q_WriteStatusReg+0x15a>
			break;
		case 2:
			if(wq->statReg2 != regVal)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2221      	movs	r2, #33	@ 0x21
 800123e:	5c9b      	ldrb	r3, [r3, r2]
 8001240:	1cba      	adds	r2, r7, #2
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d00c      	beq.n	8001262 <W25Q_WriteStatusReg+0x14e>
				return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e010      	b.n	800126e <W25Q_WriteStatusReg+0x15a>
			break;
		case 3:
			if(wq->statReg3 != regVal)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2222      	movs	r2, #34	@ 0x22
 8001250:	5c9b      	ldrb	r3, [r3, r2]
 8001252:	1cba      	adds	r2, r7, #2
 8001254:	7812      	ldrb	r2, [r2, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d005      	beq.n	8001266 <W25Q_WriteStatusReg+0x152>
				return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e007      	b.n	800126e <W25Q_WriteStatusReg+0x15a>
			break;
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	e002      	b.n	8001268 <W25Q_WriteStatusReg+0x154>
			break;
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	e000      	b.n	8001268 <W25Q_WriteStatusReg+0x154>
			break;
 8001266:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 8001268:	2313      	movs	r3, #19
 800126a:	18fb      	adds	r3, r7, r3
 800126c:	781b      	ldrb	r3, [r3, #0]


}
 800126e:	0018      	movs	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	b006      	add	sp, #24
 8001274:	bdb0      	pop	{r4, r5, r7, pc}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	0800938c 	.word	0x0800938c
 800127c:	0001116f 	.word	0x0001116f

08001280 <W25Q_readData>:

HAL_StatusTypeDef W25Q_readData(W25Q *wq, uint32_t startAddress, uint32_t dataSize, uint8_t *dataLocation) {
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800128e:	2417      	movs	r4, #23
 8001290:	193b      	adds	r3, r7, r4
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]

	// Create read data array with start address
	uint8_t readDataArr[4] = {CMD_READ_DATA, ((startAddress >> 16) & 0xFF), ((startAddress >> 8) & 0xFF), ((startAddress) & 0xFF)};
 8001296:	2510      	movs	r5, #16
 8001298:	197b      	adds	r3, r7, r5
 800129a:	2203      	movs	r2, #3
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	0c1b      	lsrs	r3, r3, #16
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	197b      	adds	r3, r7, r5
 80012a6:	705a      	strb	r2, [r3, #1]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	0a1b      	lsrs	r3, r3, #8
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	197b      	adds	r3, r7, r5
 80012b0:	709a      	strb	r2, [r3, #2]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	197b      	adds	r3, r7, r5
 80012b8:	70da      	strb	r2, [r3, #3]

	// TX read data in single-SPI mode command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	2200      	movs	r2, #0
 80012c6:	0019      	movs	r1, r3
 80012c8:	f002 ffd9 	bl	800427e <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, readDataArr, 4, HAL_MAX_DELAY);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6998      	ldr	r0, [r3, #24]
 80012d0:	0026      	movs	r6, r4
 80012d2:	193c      	adds	r4, r7, r4
 80012d4:	2301      	movs	r3, #1
 80012d6:	425b      	negs	r3, r3
 80012d8:	1979      	adds	r1, r7, r5
 80012da:	2204      	movs	r2, #4
 80012dc:	f006 f928 	bl	8007530 <HAL_SPI_Transmit>
 80012e0:	0003      	movs	r3, r0
 80012e2:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80012e4:	19bb      	adds	r3, r7, r6
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00b      	beq.n	8001304 <W25Q_readData+0x84>
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6818      	ldr	r0, [r3, #0]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	2201      	movs	r2, #1
 80012f8:	0019      	movs	r1, r3
 80012fa:	f002 ffc0 	bl	800427e <HAL_GPIO_WritePin>
		return halRet;
 80012fe:	19bb      	adds	r3, r7, r6
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	e017      	b.n	8001334 <W25Q_readData+0xb4>
	}

	// RX data
	halRet = HAL_SPI_Receive(wq->hspi, dataLocation, dataSize, HAL_MAX_DELAY);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6998      	ldr	r0, [r3, #24]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	b29a      	uxth	r2, r3
 800130c:	2517      	movs	r5, #23
 800130e:	197c      	adds	r4, r7, r5
 8001310:	2301      	movs	r3, #1
 8001312:	425b      	negs	r3, r3
 8001314:	6839      	ldr	r1, [r7, #0]
 8001316:	f006 fa6b 	bl	80077f0 <HAL_SPI_Receive>
 800131a:	0003      	movs	r3, r0
 800131c:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	b29b      	uxth	r3, r3
 8001328:	2201      	movs	r2, #1
 800132a:	0019      	movs	r1, r3
 800132c:	f002 ffa7 	bl	800427e <HAL_GPIO_WritePin>


	return halRet;
 8001330:	197b      	adds	r3, r7, r5
 8001332:	781b      	ldrb	r3, [r3, #0]

}
 8001334:	0018      	movs	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	b007      	add	sp, #28
 800133a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800133c <W25Q_ChipReset>:
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);

	return halRet;
}

HAL_StatusTypeDef W25Q_ChipReset(W25Q *wq) {
 800133c:	b5b0      	push	{r4, r5, r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8001344:	250e      	movs	r5, #14
 8001346:	197b      	adds	r3, r7, r5
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]

	/*
	 * Send both enable reset an reset device commands
	 */
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	b29b      	uxth	r3, r3
 8001356:	2200      	movs	r2, #0
 8001358:	0019      	movs	r1, r3
 800135a:	f002 ff90 	bl	800427e <HAL_GPIO_WritePin>
	// TX enable reset instruction
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_RESET_ENABLE}, 1, HAL_MAX_DELAY);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6998      	ldr	r0, [r3, #24]
 8001362:	210c      	movs	r1, #12
 8001364:	187b      	adds	r3, r7, r1
 8001366:	2266      	movs	r2, #102	@ 0x66
 8001368:	701a      	strb	r2, [r3, #0]
 800136a:	197c      	adds	r4, r7, r5
 800136c:	2301      	movs	r3, #1
 800136e:	425b      	negs	r3, r3
 8001370:	1879      	adds	r1, r7, r1
 8001372:	2201      	movs	r2, #1
 8001374:	f006 f8dc 	bl	8007530 <HAL_SPI_Transmit>
 8001378:	0003      	movs	r3, r0
 800137a:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	b29b      	uxth	r3, r3
 8001386:	2201      	movs	r2, #1
 8001388:	0019      	movs	r1, r3
 800138a:	f002 ff78 	bl	800427e <HAL_GPIO_WritePin>
	if(halRet != HAL_OK)
 800138e:	197b      	adds	r3, r7, r5
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <W25Q_ChipReset+0x60>
		return halRet;
 8001396:	197b      	adds	r3, r7, r5
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	e035      	b.n	8001408 <W25Q_ChipReset+0xcc>

	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6818      	ldr	r0, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	2200      	movs	r2, #0
 80013a8:	0019      	movs	r1, r3
 80013aa:	f002 ff68 	bl	800427e <HAL_GPIO_WritePin>
	// TX reset device instruction
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_RESET_DEVICE}, 1, HAL_MAX_DELAY);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6998      	ldr	r0, [r3, #24]
 80013b2:	2108      	movs	r1, #8
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	2299      	movs	r2, #153	@ 0x99
 80013b8:	701a      	strb	r2, [r3, #0]
 80013ba:	230e      	movs	r3, #14
 80013bc:	18fc      	adds	r4, r7, r3
 80013be:	2301      	movs	r3, #1
 80013c0:	425b      	negs	r3, r3
 80013c2:	1879      	adds	r1, r7, r1
 80013c4:	2201      	movs	r2, #1
 80013c6:	f006 f8b3 	bl	8007530 <HAL_SPI_Transmit>
 80013ca:	0003      	movs	r3, r0
 80013cc:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	2201      	movs	r2, #1
 80013da:	0019      	movs	r1, r3
 80013dc:	f002 ff4f 	bl	800427e <HAL_GPIO_WritePin>

	// Delay at least 30 us
	for(uint8_t i = 0; i < 180; i++) {
 80013e0:	230f      	movs	r3, #15
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	e006      	b.n	80013f8 <W25Q_ChipReset+0xbc>
		__NOP();
 80013ea:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < 180; i++) {
 80013ec:	210f      	movs	r1, #15
 80013ee:	187b      	adds	r3, r7, r1
 80013f0:	781a      	ldrb	r2, [r3, #0]
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	3201      	adds	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
 80013f8:	230f      	movs	r3, #15
 80013fa:	18fb      	adds	r3, r7, r3
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2bb3      	cmp	r3, #179	@ 0xb3
 8001400:	d9f3      	bls.n	80013ea <W25Q_ChipReset+0xae>
	}


	return halRet;
 8001402:	230e      	movs	r3, #14
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	781b      	ldrb	r3, [r3, #0]

}
 8001408:	0018      	movs	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	b004      	add	sp, #16
 800140e:	bdb0      	pop	{r4, r5, r7, pc}

08001410 <W25Q_SetDriverStrength>:

	return halRet;

}

HAL_StatusTypeDef W25Q_SetDriverStrength(W25Q *wq, uint8_t driverStrength) {
 8001410:	b5b0      	push	{r4, r5, r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	000a      	movs	r2, r1
 800141a:	1cfb      	adds	r3, r7, #3
 800141c:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800141e:	230f      	movs	r3, #15
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]

	// Check to ensure passed driver strength value lies in range
	if(driverStrength < 0 || driverStrength > 3)
 8001426:	1cfb      	adds	r3, r7, #3
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b03      	cmp	r3, #3
 800142c:	d901      	bls.n	8001432 <W25Q_SetDriverStrength+0x22>
		return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e041      	b.n	80014b6 <W25Q_SetDriverStrength+0xa6>

	// Read current value in status register 3
	halRet = W25Q_ReadStatusReg(wq, 3);
 8001432:	250f      	movs	r5, #15
 8001434:	197c      	adds	r4, r7, r5
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2103      	movs	r1, #3
 800143a:	0018      	movs	r0, r3
 800143c:	f7ff fd94 	bl	8000f68 <W25Q_ReadStatusReg>
 8001440:	0003      	movs	r3, r0
 8001442:	7023      	strb	r3, [r4, #0]

	// Isolate bits 5-6 and change value to reflect new driver strength
	uint8_t newRegVal = (wq->statReg3) & (0b10011111);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2222      	movs	r2, #34	@ 0x22
 8001448:	5c9a      	ldrb	r2, [r3, r2]
 800144a:	200e      	movs	r0, #14
 800144c:	183b      	adds	r3, r7, r0
 800144e:	2160      	movs	r1, #96	@ 0x60
 8001450:	438a      	bics	r2, r1
 8001452:	701a      	strb	r2, [r3, #0]
	newRegVal = (newRegVal) | (driverStrength << 5);
 8001454:	1cfb      	adds	r3, r7, #3
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	015b      	lsls	r3, r3, #5
 800145a:	b25a      	sxtb	r2, r3
 800145c:	183b      	adds	r3, r7, r0
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	b25b      	sxtb	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b25a      	sxtb	r2, r3
 8001466:	183b      	adds	r3, r7, r0
 8001468:	701a      	strb	r2, [r3, #0]

	// Write status register 3 with new value
	halRet = W25Q_WriteStatusReg(wq, 3, newRegVal);
 800146a:	197c      	adds	r4, r7, r5
 800146c:	183b      	adds	r3, r7, r0
 800146e:	781a      	ldrb	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2103      	movs	r1, #3
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff fe4d 	bl	8001114 <W25Q_WriteStatusReg>
 800147a:	0003      	movs	r3, r0
 800147c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800147e:	197b      	adds	r3, r7, r5
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <W25Q_SetDriverStrength+0x7c>
		return halRet;
 8001486:	197b      	adds	r3, r7, r5
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	e014      	b.n	80014b6 <W25Q_SetDriverStrength+0xa6>

	// Read back status register 3 and confirm successful write
	halRet = W25Q_ReadStatusReg(wq, 3);
 800148c:	230f      	movs	r3, #15
 800148e:	18fc      	adds	r4, r7, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2103      	movs	r1, #3
 8001494:	0018      	movs	r0, r3
 8001496:	f7ff fd67 	bl	8000f68 <W25Q_ReadStatusReg>
 800149a:	0003      	movs	r3, r0
 800149c:	7023      	strb	r3, [r4, #0]
	if(wq->driverStrength != driverStrength)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2226      	movs	r2, #38	@ 0x26
 80014a2:	5c9b      	ldrb	r3, [r3, r2]
 80014a4:	1cfa      	adds	r2, r7, #3
 80014a6:	7812      	ldrb	r2, [r2, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d001      	beq.n	80014b0 <W25Q_SetDriverStrength+0xa0>
		return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e002      	b.n	80014b6 <W25Q_SetDriverStrength+0xa6>

	return halRet;
 80014b0:	230f      	movs	r3, #15
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	781b      	ldrb	r3, [r3, #0]

}
 80014b6:	0018      	movs	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b004      	add	sp, #16
 80014bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080014c0 <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80014c0:	b5b0      	push	{r4, r5, r7, lr}
 80014c2:	b09a      	sub	sp, #104	@ 0x68
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80014cc:	2567      	movs	r5, #103	@ 0x67
 80014ce:	197b      	adds	r3, r7, r5
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 80014d4:	243c      	movs	r4, #60	@ 0x3c
 80014d6:	193b      	adds	r3, r7, r4
 80014d8:	0018      	movs	r0, r3
 80014da:	2328      	movs	r3, #40	@ 0x28
 80014dc:	001a      	movs	r2, r3
 80014de:	2100      	movs	r1, #0
 80014e0:	f007 fefc 	bl	80092dc <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	0021      	movs	r1, r4
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	785b      	ldrb	r3, [r3, #1]
 80014f2:	3301      	adds	r3, #1
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	187b      	adds	r3, r7, r1
 80014f8:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	789a      	ldrb	r2, [r3, #2]
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	187b      	adds	r3, r7, r1
 8001508:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	78da      	ldrb	r2, [r3, #3]
 800150e:	187b      	adds	r3, r7, r1
 8001510:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	78da      	ldrb	r2, [r3, #3]
 8001516:	187b      	adds	r3, r7, r1
 8001518:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800151a:	0008      	movs	r0, r1
 800151c:	183b      	adds	r3, r7, r0
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001522:	183b      	adds	r3, r7, r0
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8001528:	183b      	adds	r3, r7, r0
 800152a:	4a19      	ldr	r2, [pc, #100]	@ (8001590 <initRTCInternalAlarm+0xd0>)
 800152c:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800152e:	183b      	adds	r3, r7, r0
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001534:	183b      	adds	r3, r7, r0
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 800153a:	183b      	adds	r3, r7, r0
 800153c:	2220      	movs	r2, #32
 800153e:	2101      	movs	r1, #1
 8001540:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 8001542:	0001      	movs	r1, r0
 8001544:	187b      	adds	r3, r7, r1
 8001546:	2280      	movs	r2, #128	@ 0x80
 8001548:	0052      	lsls	r2, r2, #1
 800154a:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 800154c:	197c      	adds	r4, r7, r5
 800154e:	1879      	adds	r1, r7, r1
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	0018      	movs	r0, r3
 8001556:	f005 fb5b 	bl	8006c10 <HAL_RTC_SetAlarm_IT>
 800155a:	0003      	movs	r3, r0
 800155c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800155e:	197b      	adds	r3, r7, r5
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <initRTCInternalAlarm+0xac>
		return halRet;
 8001566:	197b      	adds	r3, r7, r5
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	e00d      	b.n	8001588 <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 800156c:	2567      	movs	r5, #103	@ 0x67
 800156e:	197c      	adds	r4, r7, r5
 8001570:	2380      	movs	r3, #128	@ 0x80
 8001572:	005a      	lsls	r2, r3, #1
 8001574:	2314      	movs	r3, #20
 8001576:	18f9      	adds	r1, r7, r3
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	2300      	movs	r3, #0
 800157c:	f005 fc88 	bl	8006e90 <HAL_RTC_GetAlarm>
 8001580:	0003      	movs	r3, r0
 8001582:	7023      	strb	r3, [r4, #0]
	return halRet;
 8001584:	197b      	adds	r3, r7, r5
 8001586:	781b      	ldrb	r3, [r3, #0]

}
 8001588:	0018      	movs	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	b01a      	add	sp, #104	@ 0x68
 800158e:	bdb0      	pop	{r4, r5, r7, pc}
 8001590:	80800080 	.word	0x80800080

08001594 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	0018      	movs	r0, r3
 80015a8:	f005 fa88 	bl	8006abc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	0018      	movs	r0, r3
 80015b4:	f005 fade 	bl	8006b74 <HAL_RTC_GetDate>

}
 80015b8:	46c0      	nop			@ (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b004      	add	sp, #16
 80015be:	bd80      	pop	{r7, pc}

080015c0 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	46de      	mov	lr, fp
 80015c4:	4657      	mov	r7, sl
 80015c6:	464e      	mov	r6, r9
 80015c8:	4645      	mov	r5, r8
 80015ca:	b5e0      	push	{r5, r6, r7, lr}
 80015cc:	b08f      	sub	sp, #60	@ 0x3c
 80015ce:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015d0:	f002 f8bc 	bl	800374c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d4:	f000 f9fe 	bl	80019d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d8:	f000 fc50 	bl	8001e7c <MX_GPIO_Init>
  MX_DMA_Init();
 80015dc:	f000 fc28 	bl	8001e30 <MX_DMA_Init>
  MX_RTC_Init();
 80015e0:	f000 fac8 	bl	8001b74 <MX_RTC_Init>
  MX_I2C1_Init();
 80015e4:	f000 fa5c 	bl	8001aa0 <MX_I2C1_Init>
  MX_I2S1_Init();
 80015e8:	f000 fa9a 	bl	8001b20 <MX_I2S1_Init>
  MX_SPI2_Init();
 80015ec:	f000 fb32 	bl	8001c54 <MX_SPI2_Init>
  MX_TIM2_Init();
 80015f0:	f000 fb6e 	bl	8001cd0 <MX_TIM2_Init>
  MX_TIM14_Init();
 80015f4:	f000 fbcc 	bl	8001d90 <MX_TIM14_Init>
  MX_TIM16_Init();
 80015f8:	f000 fbf0 	bl	8001ddc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	  // HAL Status handle for error-checking
	  HAL_StatusTypeDef halRet = HAL_OK;
 80015fc:	2317      	movs	r3, #23
 80015fe:	18fb      	adds	r3, r7, r3
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]

	  // Determine which time format we will be using
	  	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 8001604:	4bcc      	ldr	r3, [pc, #816]	@ (8001938 <main+0x378>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2210      	movs	r2, #16
 800160a:	0011      	movs	r1, r2
 800160c:	0018      	movs	r0, r3
 800160e:	f002 fe19 	bl	8004244 <HAL_GPIO_ReadPin>
 8001612:	0003      	movs	r3, r0
 8001614:	001a      	movs	r2, r3
 8001616:	4bc9      	ldr	r3, [pc, #804]	@ (800193c <main+0x37c>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d103      	bne.n	8001626 <main+0x66>
	  	  userTimeFormat = RTC_HOURFORMAT_12;
 800161e:	4bc8      	ldr	r3, [pc, #800]	@ (8001940 <main+0x380>)
 8001620:	2240      	movs	r2, #64	@ 0x40
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	e002      	b.n	800162c <main+0x6c>
	  	}
	  	else {
	  	  userTimeFormat = RTC_HOURFORMAT_24;
 8001626:	4bc6      	ldr	r3, [pc, #792]	@ (8001940 <main+0x380>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
	  	}

  	  // Set Smooth Calibration Value
	  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 800162c:	4bc5      	ldr	r3, [pc, #788]	@ (8001944 <main+0x384>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2517      	movs	r5, #23
 8001632:	197c      	adds	r4, r7, r5
 8001634:	2280      	movs	r2, #128	@ 0x80
 8001636:	01d1      	lsls	r1, r2, #7
 8001638:	48c3      	ldr	r0, [pc, #780]	@ (8001948 <main+0x388>)
 800163a:	2200      	movs	r2, #0
 800163c:	f005 fe1d 	bl	800727a <HAL_RTCEx_SetSmoothCalib>
 8001640:	0003      	movs	r3, r0
 8001642:	7023      	strb	r3, [r4, #0]
									RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
	  if(halRet != HAL_OK) {
 8001644:	197b      	adds	r3, r7, r5
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <main+0x90>
		  // Failure to talk to RTC is a hard failure
		  dispFailure();
 800164c:	f001 f996 	bl	800297c <dispFailure>
	  }

	  // Init the internal RTC alarm time to track the current time
	  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 8001650:	2517      	movs	r5, #23
 8001652:	197c      	adds	r4, r7, r5
 8001654:	4abd      	ldr	r2, [pc, #756]	@ (800194c <main+0x38c>)
 8001656:	49be      	ldr	r1, [pc, #760]	@ (8001950 <main+0x390>)
 8001658:	4bbb      	ldr	r3, [pc, #748]	@ (8001948 <main+0x388>)
 800165a:	0018      	movs	r0, r3
 800165c:	f7ff ff30 	bl	80014c0 <initRTCInternalAlarm>
 8001660:	0003      	movs	r3, r0
 8001662:	7023      	strb	r3, [r4, #0]
	  if(halRet != HAL_OK) {
 8001664:	197b      	adds	r3, r7, r5
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <main+0xb0>
		  // Failure to initialize RTC alarm is a hard failure
		  dispFailure();
 800166c:	f001 f986 	bl	800297c <dispFailure>
		}

	  // Initialize all GPIOs to be used with 7 segment display
		sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8001670:	2380      	movs	r3, #128	@ 0x80
 8001672:	009c      	lsls	r4, r3, #2
 8001674:	2380      	movs	r3, #128	@ 0x80
 8001676:	00dd      	lsls	r5, r3, #3
 8001678:	2680      	movs	r6, #128	@ 0x80
 800167a:	2340      	movs	r3, #64	@ 0x40
 800167c:	469c      	mov	ip, r3
 800167e:	2380      	movs	r3, #128	@ 0x80
 8001680:	011a      	lsls	r2, r3, #4
 8001682:	4bb4      	ldr	r3, [pc, #720]	@ (8001954 <main+0x394>)
 8001684:	6819      	ldr	r1, [r3, #0]
 8001686:	4bb4      	ldr	r3, [pc, #720]	@ (8001958 <main+0x398>)
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	4bb4      	ldr	r3, [pc, #720]	@ (800195c <main+0x39c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	9304      	str	r3, [sp, #16]
 8001690:	9003      	str	r0, [sp, #12]
 8001692:	9102      	str	r1, [sp, #8]
 8001694:	4bb2      	ldr	r3, [pc, #712]	@ (8001960 <main+0x3a0>)
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	9200      	str	r2, [sp, #0]
 800169a:	4663      	mov	r3, ip
 800169c:	0032      	movs	r2, r6
 800169e:	0029      	movs	r1, r5
 80016a0:	0020      	movs	r0, r4
 80016a2:	f001 faad 	bl	8002c00 <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


		halRet = updateAndDisplayTime();
 80016a6:	2517      	movs	r5, #23
 80016a8:	197c      	adds	r4, r7, r5
 80016aa:	f000 fceb 	bl	8002084 <updateAndDisplayTime>
 80016ae:	0003      	movs	r3, r0
 80016b0:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 80016b2:	197b      	adds	r3, r7, r5
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <main+0xfe>
		  // Failure to display current time is a hard failure
		  dispFailure();
 80016ba:	f001 f95f 	bl	800297c <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

		// Used to separate return initializations into critical and non-critical errors.
		uint8_t initRet = 0;
 80016be:	2116      	movs	r1, #22
 80016c0:	187b      	adds	r3, r7, r1
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]

		initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 80016c6:	4ba3      	ldr	r3, [pc, #652]	@ (8001954 <main+0x394>)
 80016c8:	681d      	ldr	r5, [r3, #0]
 80016ca:	2380      	movs	r3, #128	@ 0x80
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4aa5      	ldr	r2, [pc, #660]	@ (8001964 <main+0x3a4>)
 80016d0:	7812      	ldrb	r2, [r2, #0]
 80016d2:	187c      	adds	r4, r7, r1
 80016d4:	4ea4      	ldr	r6, [pc, #656]	@ (8001968 <main+0x3a8>)
 80016d6:	49a5      	ldr	r1, [pc, #660]	@ (800196c <main+0x3ac>)
 80016d8:	48a5      	ldr	r0, [pc, #660]	@ (8001970 <main+0x3b0>)
 80016da:	9201      	str	r2, [sp, #4]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	0033      	movs	r3, r6
 80016e0:	002a      	movs	r2, r5
 80016e2:	f7fe fd9b 	bl	800021c <capTouch_Init>
 80016e6:	0003      	movs	r3, r0
 80016e8:	7023      	strb	r3, [r4, #0]
								&capTouchResetPort, capTouchResetPin, capTouchChannels);
		if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 80016ea:	2116      	movs	r1, #22
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d007      	beq.n	8001704 <main+0x144>
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d003      	beq.n	8001704 <main+0x144>
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b04      	cmp	r3, #4
 8001702:	d102      	bne.n	800170a <main+0x14a>
			/* Critical Errors:
			 * 1 = Failure to read correct device ID
			 * 2 = Failure to read Keys
			 * 3 = Failure to enable keys
			 */
			dispFailure();
 8001704:	f001 f93a 	bl	800297c <dispFailure>
 8001708:	e00d      	b.n	8001726 <main+0x166>
		}
		else if (initRet == 2) {
 800170a:	2316      	movs	r3, #22
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d102      	bne.n	800171a <main+0x15a>
			/*
			 * Non-critical Errors:
			 * 2 = Failure to Recalibrate
			 */
			dispFault();
 8001714:	f001 f922 	bl	800295c <dispFault>
 8001718:	e005      	b.n	8001726 <main+0x166>
		}
		else if(initRet == 0) {
 800171a:	2316      	movs	r3, #22
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d100      	bne.n	8001726 <main+0x166>
			// initRet = 0 = all is well
			__NOP();
 8001724:	46c0      	nop			@ (mov r8, r8)
		}

		// Set averaging factor
		uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8001726:	4b93      	ldr	r3, [pc, #588]	@ (8001974 <main+0x3b4>)
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	210c      	movs	r1, #12
 800172c:	187b      	adds	r3, r7, r1
 800172e:	701a      	strb	r2, [r3, #0]
 8001730:	4b90      	ldr	r3, [pc, #576]	@ (8001974 <main+0x3b4>)
 8001732:	781a      	ldrb	r2, [r3, #0]
 8001734:	187b      	adds	r3, r7, r1
 8001736:	705a      	strb	r2, [r3, #1]
 8001738:	4b8e      	ldr	r3, [pc, #568]	@ (8001974 <main+0x3b4>)
 800173a:	781a      	ldrb	r2, [r3, #0]
 800173c:	187b      	adds	r3, r7, r1
 800173e:	709a      	strb	r2, [r3, #2]
 8001740:	4b8c      	ldr	r3, [pc, #560]	@ (8001974 <main+0x3b4>)
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	187b      	adds	r3, r7, r1
 8001746:	70da      	strb	r2, [r3, #3]
 8001748:	187b      	adds	r3, r7, r1
 800174a:	2200      	movs	r2, #0
 800174c:	711a      	strb	r2, [r3, #4]
 800174e:	187b      	adds	r3, r7, r1
 8001750:	2200      	movs	r2, #0
 8001752:	715a      	strb	r2, [r3, #5]
 8001754:	187b      	adds	r3, r7, r1
 8001756:	2200      	movs	r2, #0
 8001758:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 800175a:	2517      	movs	r5, #23
 800175c:	197c      	adds	r4, r7, r5
 800175e:	187a      	adds	r2, r7, r1
 8001760:	4b83      	ldr	r3, [pc, #524]	@ (8001970 <main+0x3b0>)
 8001762:	0011      	movs	r1, r2
 8001764:	0018      	movs	r0, r3
 8001766:	f7fe ffcd 	bl	8000704 <capTouch_SetAveragingFactor>
 800176a:	0003      	movs	r3, r0
 800176c:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 800176e:	197b      	adds	r3, r7, r5
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <main+0x1ba>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 8001776:	f001 f8f1 	bl	800295c <dispFault>
		}

		// Set detection integration factors
		uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 800177a:	4b7f      	ldr	r3, [pc, #508]	@ (8001978 <main+0x3b8>)
 800177c:	781a      	ldrb	r2, [r3, #0]
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	4b7d      	ldr	r3, [pc, #500]	@ (8001978 <main+0x3b8>)
 8001784:	781a      	ldrb	r2, [r3, #0]
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	705a      	strb	r2, [r3, #1]
 800178a:	4b7b      	ldr	r3, [pc, #492]	@ (8001978 <main+0x3b8>)
 800178c:	781a      	ldrb	r2, [r3, #0]
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	709a      	strb	r2, [r3, #2]
 8001792:	4b79      	ldr	r3, [pc, #484]	@ (8001978 <main+0x3b8>)
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	70da      	strb	r2, [r3, #3]
 800179a:	4b77      	ldr	r3, [pc, #476]	@ (8001978 <main+0x3b8>)
 800179c:	781a      	ldrb	r2, [r3, #0]
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	711a      	strb	r2, [r3, #4]
 80017a2:	4b75      	ldr	r3, [pc, #468]	@ (8001978 <main+0x3b8>)
 80017a4:	781a      	ldrb	r2, [r3, #0]
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	715a      	strb	r2, [r3, #5]
 80017aa:	4b73      	ldr	r3, [pc, #460]	@ (8001978 <main+0x3b8>)
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 80017b2:	2517      	movs	r5, #23
 80017b4:	197c      	adds	r4, r7, r5
 80017b6:	1d3a      	adds	r2, r7, #4
 80017b8:	4b6d      	ldr	r3, [pc, #436]	@ (8001970 <main+0x3b0>)
 80017ba:	0011      	movs	r1, r2
 80017bc:	0018      	movs	r0, r3
 80017be:	f7ff f86b 	bl	8000898 <capTouch_SetDetectionIntegrator>
 80017c2:	0003      	movs	r3, r0
 80017c4:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 80017c6:	197b      	adds	r3, r7, r5
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <main+0x212>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 80017ce:	f001 f8c5 	bl	800295c <dispFault>
		}

		userAlarmToggle = false;			//Default to off
 80017d2:	4b6a      	ldr	r3, [pc, #424]	@ (800197c <main+0x3bc>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

		if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 80017d8:	4b69      	ldr	r3, [pc, #420]	@ (8001980 <main+0x3c0>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b5a      	ldr	r3, [pc, #360]	@ (8001948 <main+0x388>)
 80017de:	0011      	movs	r1, r2
 80017e0:	0018      	movs	r0, r3
 80017e2:	f005 fdd1 	bl	8007388 <HAL_RTCEx_BKUPRead>
 80017e6:	0003      	movs	r3, r0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d11c      	bne.n	8001828 <main+0x268>

			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 80017ee:	4b65      	ldr	r3, [pc, #404]	@ (8001984 <main+0x3c4>)
 80017f0:	6819      	ldr	r1, [r3, #0]
 80017f2:	4b55      	ldr	r3, [pc, #340]	@ (8001948 <main+0x388>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	0018      	movs	r0, r3
 80017f8:	f005 fda9 	bl	800734e <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 80017fc:	4b62      	ldr	r3, [pc, #392]	@ (8001988 <main+0x3c8>)
 80017fe:	6819      	ldr	r1, [r3, #0]
 8001800:	4b51      	ldr	r3, [pc, #324]	@ (8001948 <main+0x388>)
 8001802:	2200      	movs	r2, #0
 8001804:	0018      	movs	r0, r3
 8001806:	f005 fda2 	bl	800734e <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 800180a:	4b60      	ldr	r3, [pc, #384]	@ (800198c <main+0x3cc>)
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	4b4e      	ldr	r3, [pc, #312]	@ (8001948 <main+0x388>)
 8001810:	2200      	movs	r2, #0
 8001812:	0018      	movs	r0, r3
 8001814:	f005 fd9b 	bl	800734e <HAL_RTCEx_BKUPWrite>

			// Write backup register with a non-zero value to signify that it has been initialized before
			HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8001818:	4b59      	ldr	r3, [pc, #356]	@ (8001980 <main+0x3c0>)
 800181a:	6819      	ldr	r1, [r3, #0]
 800181c:	2301      	movs	r3, #1
 800181e:	425a      	negs	r2, r3
 8001820:	4b49      	ldr	r3, [pc, #292]	@ (8001948 <main+0x388>)
 8001822:	0018      	movs	r0, r3
 8001824:	f005 fd93 	bl	800734e <HAL_RTCEx_BKUPWrite>

		}

		userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8001828:	4b56      	ldr	r3, [pc, #344]	@ (8001984 <main+0x3c4>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b46      	ldr	r3, [pc, #280]	@ (8001948 <main+0x388>)
 800182e:	0011      	movs	r1, r2
 8001830:	0018      	movs	r0, r3
 8001832:	f005 fda9 	bl	8007388 <HAL_RTCEx_BKUPRead>
 8001836:	0003      	movs	r3, r0
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4b55      	ldr	r3, [pc, #340]	@ (8001990 <main+0x3d0>)
 800183c:	701a      	strb	r2, [r3, #0]
		userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 800183e:	4b52      	ldr	r3, [pc, #328]	@ (8001988 <main+0x3c8>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b41      	ldr	r3, [pc, #260]	@ (8001948 <main+0x388>)
 8001844:	0011      	movs	r1, r2
 8001846:	0018      	movs	r0, r3
 8001848:	f005 fd9e 	bl	8007388 <HAL_RTCEx_BKUPRead>
 800184c:	0003      	movs	r3, r0
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b4f      	ldr	r3, [pc, #316]	@ (8001990 <main+0x3d0>)
 8001852:	705a      	strb	r2, [r3, #1]
		userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 8001854:	4b4d      	ldr	r3, [pc, #308]	@ (800198c <main+0x3cc>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b3b      	ldr	r3, [pc, #236]	@ (8001948 <main+0x388>)
 800185a:	0011      	movs	r1, r2
 800185c:	0018      	movs	r0, r3
 800185e:	f005 fd93 	bl	8007388 <HAL_RTCEx_BKUPRead>
 8001862:	0003      	movs	r3, r0
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b4a      	ldr	r3, [pc, #296]	@ (8001990 <main+0x3d0>)
 8001868:	70da      	strb	r2, [r3, #3]


		// Init Memory Chip
		initRet = W25Q_Init(&spiFlash, nCSPort, nWPPort, nHOLDPort,
 800186a:	4b4a      	ldr	r3, [pc, #296]	@ (8001994 <main+0x3d4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4698      	mov	r8, r3
 8001870:	4b49      	ldr	r3, [pc, #292]	@ (8001998 <main+0x3d8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4699      	mov	r9, r3
 8001876:	4b49      	ldr	r3, [pc, #292]	@ (800199c <main+0x3dc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	469a      	mov	sl, r3
 800187c:	4b48      	ldr	r3, [pc, #288]	@ (80019a0 <main+0x3e0>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b48      	ldr	r3, [pc, #288]	@ (80019a4 <main+0x3e4>)
 8001882:	6819      	ldr	r1, [r3, #0]
 8001884:	4b48      	ldr	r3, [pc, #288]	@ (80019a8 <main+0x3e8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	469b      	mov	fp, r3
 800188a:	4848      	ldr	r0, [pc, #288]	@ (80019ac <main+0x3ec>)
 800188c:	7800      	ldrb	r0, [r0, #0]
 800188e:	4c48      	ldr	r4, [pc, #288]	@ (80019b0 <main+0x3f0>)
 8001890:	7825      	ldrb	r5, [r4, #0]
 8001892:	4c48      	ldr	r4, [pc, #288]	@ (80019b4 <main+0x3f4>)
 8001894:	7826      	ldrb	r6, [r4, #0]
 8001896:	2416      	movs	r4, #22
 8001898:	193c      	adds	r4, r7, r4
 800189a:	4b47      	ldr	r3, [pc, #284]	@ (80019b8 <main+0x3f8>)
 800189c:	469c      	mov	ip, r3
 800189e:	9606      	str	r6, [sp, #24]
 80018a0:	9505      	str	r5, [sp, #20]
 80018a2:	9004      	str	r0, [sp, #16]
 80018a4:	4845      	ldr	r0, [pc, #276]	@ (80019bc <main+0x3fc>)
 80018a6:	9003      	str	r0, [sp, #12]
 80018a8:	465b      	mov	r3, fp
 80018aa:	9302      	str	r3, [sp, #8]
 80018ac:	9101      	str	r1, [sp, #4]
 80018ae:	9200      	str	r2, [sp, #0]
 80018b0:	4653      	mov	r3, sl
 80018b2:	464a      	mov	r2, r9
 80018b4:	4641      	mov	r1, r8
 80018b6:	4660      	mov	r0, ip
 80018b8:	f7ff f88c 	bl	80009d4 <W25Q_Init>
 80018bc:	0003      	movs	r3, r0
 80018be:	7023      	strb	r3, [r4, #0]
	    		 nCSPin, nWPPin, nHOLDPin, &hspi2, spiFlash_devID, spiFlash_isQuadChip, spiFlash_driveStrength);

		// Enter error loop if there's an error in initialization
		if( (initRet == 1) || (initRet == 7) ) {
 80018c0:	2216      	movs	r2, #22
 80018c2:	18bb      	adds	r3, r7, r2
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d003      	beq.n	80018d2 <main+0x312>
 80018ca:	18bb      	adds	r3, r7, r2
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b07      	cmp	r3, #7
 80018d0:	d102      	bne.n	80018d8 <main+0x318>
			/* Critical Errors:
			* 1 = Failure to release chip from power down
			* 7 = Failure to disable write protection
			*/
			dispFailure();
 80018d2:	f001 f853 	bl	800297c <dispFailure>
 80018d6:	e016      	b.n	8001906 <main+0x346>
		}
		else if ( ((initRet >= 2) && (initRet <= 6)) || (initRet == 8) ) {
 80018d8:	2216      	movs	r2, #22
 80018da:	18bb      	adds	r3, r7, r2
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d903      	bls.n	80018ea <main+0x32a>
 80018e2:	18bb      	adds	r3, r7, r2
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d904      	bls.n	80018f4 <main+0x334>
 80018ea:	2316      	movs	r3, #22
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d102      	bne.n	80018fa <main+0x33a>
			* 2 = Failure to reset chip
			* 3,6,8 = Failure to read status registers
			* 4 = Failure to set driver strength
			* 5 = Failure to read device ID
			*/
			dispFault();
 80018f4:	f001 f832 	bl	800295c <dispFault>
 80018f8:	e005      	b.n	8001906 <main+0x346>
		}
		else if(initRet == 0) {
 80018fa:	2316      	movs	r3, #22
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d100      	bne.n	8001906 <main+0x346>
			// initRet = 0 = all is well
			__NOP();
 8001904:	46c0      	nop			@ (mov r8, r8)
		}


		// Init i2s amplifier
		NAU8315YG_Init(&i2sAmp, &hi2s1, i2sAmp_enablePort, i2sAmp_enablePin);
 8001906:	4b2e      	ldr	r3, [pc, #184]	@ (80019c0 <main+0x400>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4b2e      	ldr	r3, [pc, #184]	@ (80019c4 <main+0x404>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	492e      	ldr	r1, [pc, #184]	@ (80019c8 <main+0x408>)
 8001910:	482e      	ldr	r0, [pc, #184]	@ (80019cc <main+0x40c>)
 8001912:	f7ff f833 	bl	800097c <NAU8315YG_Init>

		// Increase SPI clk speed
		GPIOA->OSPEEDR |= 0b10;
 8001916:	23a0      	movs	r3, #160	@ 0xa0
 8001918:	05db      	lsls	r3, r3, #23
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	23a0      	movs	r3, #160	@ 0xa0
 800191e:	05db      	lsls	r3, r3, #23
 8001920:	2102      	movs	r1, #2
 8001922:	430a      	orrs	r2, r1
 8001924:	609a      	str	r2, [r3, #8]

		startAudioStream();
 8001926:	f001 f8cb 	bl	8002ac0 <startAudioStream>


  while (1)
  {
    /* USER CODE END WHILE */
	  if(beepMode) {
 800192a:	4b29      	ldr	r3, [pc, #164]	@ (80019d0 <main+0x410>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0fb      	beq.n	800192a <main+0x36a>
		  userAlarmBeep();
 8001932:	f000 fc65 	bl	8002200 <userAlarmBeep>
	  if(beepMode) {
 8001936:	e7f8      	b.n	800192a <main+0x36a>
 8001938:	20000008 	.word	0x20000008
 800193c:	20000040 	.word	0x20000040
 8001940:	200000e8 	.word	0x200000e8
 8001944:	2000002c 	.word	0x2000002c
 8001948:	200001d8 	.word	0x200001d8
 800194c:	200000cc 	.word	0x200000cc
 8001950:	200000b8 	.word	0x200000b8
 8001954:	2000006c 	.word	0x2000006c
 8001958:	20000068 	.word	0x20000068
 800195c:	20000030 	.word	0x20000030
 8001960:	20000014 	.word	0x20000014
 8001964:	20000010 	.word	0x20000010
 8001968:	2000000c 	.word	0x2000000c
 800196c:	200000ec 	.word	0x200000ec
 8001970:	20000408 	.word	0x20000408
 8001974:	20000011 	.word	0x20000011
 8001978:	20000012 	.word	0x20000012
 800197c:	200000b5 	.word	0x200000b5
 8001980:	2000003c 	.word	0x2000003c
 8001984:	200000e4 	.word	0x200000e4
 8001988:	20000034 	.word	0x20000034
 800198c:	20000038 	.word	0x20000038
 8001990:	200000d0 	.word	0x200000d0
 8001994:	20000044 	.word	0x20000044
 8001998:	20000048 	.word	0x20000048
 800199c:	2000004c 	.word	0x2000004c
 80019a0:	20000050 	.word	0x20000050
 80019a4:	20000054 	.word	0x20000054
 80019a8:	20000058 	.word	0x20000058
 80019ac:	2000005c 	.word	0x2000005c
 80019b0:	2000005d 	.word	0x2000005d
 80019b4:	2000005e 	.word	0x2000005e
 80019b8:	2000041c 	.word	0x2000041c
 80019bc:	20000204 	.word	0x20000204
 80019c0:	20000060 	.word	0x20000060
 80019c4:	20000064 	.word	0x20000064
 80019c8:	20000140 	.word	0x20000140
 80019cc:	20000444 	.word	0x20000444
 80019d0:	20000406 	.word	0x20000406

080019d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b093      	sub	sp, #76	@ 0x4c
 80019d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019da:	2410      	movs	r4, #16
 80019dc:	193b      	adds	r3, r7, r4
 80019de:	0018      	movs	r0, r3
 80019e0:	2338      	movs	r3, #56	@ 0x38
 80019e2:	001a      	movs	r2, r3
 80019e4:	2100      	movs	r1, #0
 80019e6:	f007 fc79 	bl	80092dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ea:	003b      	movs	r3, r7
 80019ec:	0018      	movs	r0, r3
 80019ee:	2310      	movs	r3, #16
 80019f0:	001a      	movs	r2, r3
 80019f2:	2100      	movs	r1, #0
 80019f4:	f007 fc72 	bl	80092dc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019f8:	2380      	movs	r3, #128	@ 0x80
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	0018      	movs	r0, r3
 80019fe:	f003 fdf3 	bl	80055e8 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a02:	f003 fde3 	bl	80055cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a06:	4b25      	ldr	r3, [pc, #148]	@ (8001a9c <SystemClock_Config+0xc8>)
 8001a08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a0a:	4b24      	ldr	r3, [pc, #144]	@ (8001a9c <SystemClock_Config+0xc8>)
 8001a0c:	2118      	movs	r1, #24
 8001a0e:	438a      	bics	r2, r1
 8001a10:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001a12:	193b      	adds	r3, r7, r4
 8001a14:	2205      	movs	r2, #5
 8001a16:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a18:	193b      	adds	r3, r7, r4
 8001a1a:	2280      	movs	r2, #128	@ 0x80
 8001a1c:	0252      	lsls	r2, r2, #9
 8001a1e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a20:	0021      	movs	r1, r4
 8001a22:	187b      	adds	r3, r7, r1
 8001a24:	2201      	movs	r2, #1
 8001a26:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a2e:	187b      	adds	r3, r7, r1
 8001a30:	2203      	movs	r2, #3
 8001a32:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001a34:	187b      	adds	r3, r7, r1
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001a3a:	187b      	adds	r3, r7, r1
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	22c0      	movs	r2, #192	@ 0xc0
 8001a44:	02d2      	lsls	r2, r2, #11
 8001a46:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a48:	187b      	adds	r3, r7, r1
 8001a4a:	2280      	movs	r2, #128	@ 0x80
 8001a4c:	0492      	lsls	r2, r2, #18
 8001a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	2280      	movs	r2, #128	@ 0x80
 8001a54:	0592      	lsls	r2, r2, #22
 8001a56:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f003 fe10 	bl	8005680 <HAL_RCC_OscConfig>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d001      	beq.n	8001a68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a64:	f001 f8c5 	bl	8002bf2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a68:	003b      	movs	r3, r7
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a6e:	003b      	movs	r3, r7
 8001a70:	2202      	movs	r2, #2
 8001a72:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a74:	003b      	movs	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a7a:	003b      	movs	r3, r7
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a80:	003b      	movs	r3, r7
 8001a82:	2102      	movs	r1, #2
 8001a84:	0018      	movs	r0, r3
 8001a86:	f004 f915 	bl	8005cb4 <HAL_RCC_ClockConfig>
 8001a8a:	1e03      	subs	r3, r0, #0
 8001a8c:	d001      	beq.n	8001a92 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001a8e:	f001 f8b0 	bl	8002bf2 <Error_Handler>
  }
}
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b013      	add	sp, #76	@ 0x4c
 8001a98:	bd90      	pop	{r4, r7, pc}
 8001a9a:	46c0      	nop			@ (mov r8, r8)
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b14 <MX_I2C1_Init+0x74>)
 8001aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b18 <MX_I2C1_Init+0x78>)
 8001aa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12166;
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b14 <MX_I2C1_Init+0x74>)
 8001aac:	4a1b      	ldr	r2, [pc, #108]	@ (8001b1c <MX_I2C1_Init+0x7c>)
 8001aae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ab0:	4b18      	ldr	r3, [pc, #96]	@ (8001b14 <MX_I2C1_Init+0x74>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab6:	4b17      	ldr	r3, [pc, #92]	@ (8001b14 <MX_I2C1_Init+0x74>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001abc:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <MX_I2C1_Init+0x74>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ac2:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <MX_I2C1_Init+0x74>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <MX_I2C1_Init+0x74>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ace:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <MX_I2C1_Init+0x74>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <MX_I2C1_Init+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <MX_I2C1_Init+0x74>)
 8001adc:	0018      	movs	r0, r3
 8001ade:	f002 fc31 	bl	8004344 <HAL_I2C_Init>
 8001ae2:	1e03      	subs	r3, r0, #0
 8001ae4:	d001      	beq.n	8001aea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ae6:	f001 f884 	bl	8002bf2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aea:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <MX_I2C1_Init+0x74>)
 8001aec:	2100      	movs	r1, #0
 8001aee:	0018      	movs	r0, r3
 8001af0:	f003 f9d4 	bl	8004e9c <HAL_I2CEx_ConfigAnalogFilter>
 8001af4:	1e03      	subs	r3, r0, #0
 8001af6:	d001      	beq.n	8001afc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001af8:	f001 f87b 	bl	8002bf2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <MX_I2C1_Init+0x74>)
 8001afe:	2100      	movs	r1, #0
 8001b00:	0018      	movs	r0, r3
 8001b02:	f003 fa17 	bl	8004f34 <HAL_I2CEx_ConfigDigitalFilter>
 8001b06:	1e03      	subs	r3, r0, #0
 8001b08:	d001      	beq.n	8001b0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b0a:	f001 f872 	bl	8002bf2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b0e:	46c0      	nop			@ (mov r8, r8)
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200000ec 	.word	0x200000ec
 8001b18:	40005400 	.word	0x40005400
 8001b1c:	00c12166 	.word	0x00c12166

08001b20 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001b24:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <MX_I2S1_Init+0x48>)
 8001b26:	4a11      	ldr	r2, [pc, #68]	@ (8001b6c <MX_I2S1_Init+0x4c>)
 8001b28:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b68 <MX_I2S1_Init+0x48>)
 8001b2c:	2280      	movs	r2, #128	@ 0x80
 8001b2e:	0092      	lsls	r2, r2, #2
 8001b30:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001b32:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <MX_I2S1_Init+0x48>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001b38:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <MX_I2S1_Init+0x48>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <MX_I2S1_Init+0x48>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001b44:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <MX_I2S1_Init+0x48>)
 8001b46:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <MX_I2S1_Init+0x50>)
 8001b48:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <MX_I2S1_Init+0x48>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001b50:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <MX_I2S1_Init+0x48>)
 8001b52:	0018      	movs	r0, r3
 8001b54:	f003 fa3a 	bl	8004fcc <HAL_I2S_Init>
 8001b58:	1e03      	subs	r3, r0, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_I2S1_Init+0x40>
  {
    Error_Handler();
 8001b5c:	f001 f849 	bl	8002bf2 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8001b60:	46c0      	nop			@ (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			@ (mov r8, r8)
 8001b68:	20000140 	.word	0x20000140
 8001b6c:	40013000 	.word	0x40013000
 8001b70:	0000ac44 	.word	0x0000ac44

08001b74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	@ 0x28
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 0 */

//  RTC_TimeTypeDef sTime = {0};
//  RTC_DateTypeDef sDate = {0};
  RTC_AlarmTypeDef sAlarm = {0};
 8001b7a:	003b      	movs	r3, r7
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	2328      	movs	r3, #40	@ 0x28
 8001b80:	001a      	movs	r2, r3
 8001b82:	2100      	movs	r1, #0
 8001b84:	f007 fbaa 	bl	80092dc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b88:	4b2e      	ldr	r3, [pc, #184]	@ (8001c44 <MX_RTC_Init+0xd0>)
 8001b8a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c48 <MX_RTC_Init+0xd4>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c44 <MX_RTC_Init+0xd0>)
 8001b90:	2240      	movs	r2, #64	@ 0x40
 8001b92:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8001b94:	4b2b      	ldr	r3, [pc, #172]	@ (8001c44 <MX_RTC_Init+0xd0>)
 8001b96:	227f      	movs	r2, #127	@ 0x7f
 8001b98:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c44 <MX_RTC_Init+0xd0>)
 8001b9c:	22ff      	movs	r2, #255	@ 0xff
 8001b9e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ba0:	4b28      	ldr	r3, [pc, #160]	@ (8001c44 <MX_RTC_Init+0xd0>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ba6:	4b27      	ldr	r3, [pc, #156]	@ (8001c44 <MX_RTC_Init+0xd0>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bac:	4b25      	ldr	r3, [pc, #148]	@ (8001c44 <MX_RTC_Init+0xd0>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bb2:	4b24      	ldr	r3, [pc, #144]	@ (8001c44 <MX_RTC_Init+0xd0>)
 8001bb4:	2280      	movs	r2, #128	@ 0x80
 8001bb6:	05d2      	lsls	r2, r2, #23
 8001bb8:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001bba:	4b22      	ldr	r3, [pc, #136]	@ (8001c44 <MX_RTC_Init+0xd0>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bc0:	4b20      	ldr	r3, [pc, #128]	@ (8001c44 <MX_RTC_Init+0xd0>)
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f004 fe30 	bl	8006828 <HAL_RTC_Init>
 8001bc8:	1e03      	subs	r3, r0, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001bcc:	f001 f811 	bl	8002bf2 <Error_Handler>
//    Error_Handler();
//  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8001bd0:	003b      	movs	r3, r7
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001bd6:	003b      	movs	r3, r7
 8001bd8:	2201      	movs	r2, #1
 8001bda:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001bdc:	003b      	movs	r3, r7
 8001bde:	2200      	movs	r2, #0
 8001be0:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001be2:	003b      	movs	r3, r7
 8001be4:	2200      	movs	r2, #0
 8001be6:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001be8:	003b      	movs	r3, r7
 8001bea:	2200      	movs	r2, #0
 8001bec:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bee:	003b      	movs	r3, r7
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bf4:	003b      	movs	r3, r7
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8001bfa:	003b      	movs	r3, r7
 8001bfc:	4a13      	ldr	r2, [pc, #76]	@ (8001c4c <MX_RTC_Init+0xd8>)
 8001bfe:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c00:	003b      	movs	r3, r7
 8001c02:	2200      	movs	r2, #0
 8001c04:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c06:	003b      	movs	r3, r7
 8001c08:	2200      	movs	r2, #0
 8001c0a:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001c0c:	003b      	movs	r3, r7
 8001c0e:	2220      	movs	r2, #32
 8001c10:	2101      	movs	r1, #1
 8001c12:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c14:	003b      	movs	r3, r7
 8001c16:	2280      	movs	r2, #128	@ 0x80
 8001c18:	0052      	lsls	r2, r2, #1
 8001c1a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c1c:	0039      	movs	r1, r7
 8001c1e:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <MX_RTC_Init+0xd0>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	0018      	movs	r0, r3
 8001c24:	f004 fff4 	bl	8006c10 <HAL_RTC_SetAlarm_IT>
 8001c28:	1e03      	subs	r3, r0, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8001c2c:	f000 ffe1 	bl	8002bf2 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8001c30:	4907      	ldr	r1, [pc, #28]	@ (8001c50 <MX_RTC_Init+0xdc>)
 8001c32:	4b04      	ldr	r3, [pc, #16]	@ (8001c44 <MX_RTC_Init+0xd0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	0018      	movs	r0, r3
 8001c38:	f004 ff40 	bl	8006abc <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8001c3c:	46c0      	nop			@ (mov r8, r8)
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b00a      	add	sp, #40	@ 0x28
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200001d8 	.word	0x200001d8
 8001c48:	40002800 	.word	0x40002800
 8001c4c:	80800080 	.word	0x80800080
 8001c50:	200000b8 	.word	0x200000b8

08001c54 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001ccc <MX_SPI2_Init+0x78>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c60:	2282      	movs	r2, #130	@ 0x82
 8001c62:	0052      	lsls	r2, r2, #1
 8001c64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c66:	4b18      	ldr	r3, [pc, #96]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c6c:	4b16      	ldr	r3, [pc, #88]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c6e:	22e0      	movs	r2, #224	@ 0xe0
 8001c70:	00d2      	lsls	r2, r2, #3
 8001c72:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c74:	4b14      	ldr	r3, [pc, #80]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c7a:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c80:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c82:	2280      	movs	r2, #128	@ 0x80
 8001c84:	0092      	lsls	r2, r2, #2
 8001c86:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c88:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001ca2:	2207      	movs	r2, #7
 8001ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ca6:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cb2:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f005 fb83 	bl	80073c0 <HAL_SPI_Init>
 8001cba:	1e03      	subs	r3, r0, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001cbe:	f000 ff98 	bl	8002bf2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cc2:	46c0      	nop			@ (mov r8, r8)
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000204 	.word	0x20000204
 8001ccc:	40003800 	.word	0x40003800

08001cd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	@ 0x28
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd6:	231c      	movs	r3, #28
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	0018      	movs	r0, r3
 8001cdc:	230c      	movs	r3, #12
 8001cde:	001a      	movs	r2, r3
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	f007 fafb 	bl	80092dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce6:	003b      	movs	r3, r7
 8001ce8:	0018      	movs	r0, r3
 8001cea:	231c      	movs	r3, #28
 8001cec:	001a      	movs	r2, r3
 8001cee:	2100      	movs	r1, #0
 8001cf0:	f007 faf4 	bl	80092dc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cf4:	4b24      	ldr	r3, [pc, #144]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001cf6:	2280      	movs	r2, #128	@ 0x80
 8001cf8:	05d2      	lsls	r2, r2, #23
 8001cfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8001cfc:	4b22      	ldr	r3, [pc, #136]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001cfe:	4a23      	ldr	r2, [pc, #140]	@ (8001d8c <MX_TIM2_Init+0xbc>)
 8001d00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d02:	4b21      	ldr	r3, [pc, #132]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001d08:	4b1f      	ldr	r3, [pc, #124]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001d0a:	2263      	movs	r2, #99	@ 0x63
 8001d0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d14:	4b1c      	ldr	r3, [pc, #112]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f006 fbbb 	bl	8008498 <HAL_TIM_PWM_Init>
 8001d22:	1e03      	subs	r3, r0, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d26:	f000 ff64 	bl	8002bf2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2a:	211c      	movs	r1, #28
 8001d2c:	187b      	adds	r3, r7, r1
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d32:	187b      	adds	r3, r7, r1
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d38:	187a      	adds	r2, r7, r1
 8001d3a:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001d3c:	0011      	movs	r1, r2
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f007 fa4c 	bl	80091dc <HAL_TIMEx_MasterConfigSynchronization>
 8001d44:	1e03      	subs	r3, r0, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001d48:	f000 ff53 	bl	8002bf2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d4c:	003b      	movs	r3, r7
 8001d4e:	2260      	movs	r2, #96	@ 0x60
 8001d50:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001d52:	003b      	movs	r3, r7
 8001d54:	2200      	movs	r2, #0
 8001d56:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d58:	003b      	movs	r3, r7
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d5e:	003b      	movs	r3, r7
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d64:	0039      	movs	r1, r7
 8001d66:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001d68:	2208      	movs	r2, #8
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f006 fdd2 	bl	8008914 <HAL_TIM_PWM_ConfigChannel>
 8001d70:	1e03      	subs	r3, r0, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001d74:	f000 ff3d 	bl	8002bf2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f001 fc02 	bl	8003584 <HAL_TIM_MspPostInit>

}
 8001d80:	46c0      	nop			@ (mov r8, r8)
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b00a      	add	sp, #40	@ 0x28
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000320 	.word	0x20000320
 8001d8c:	0000031f 	.word	0x0000031f

08001d90 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001d94:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <MX_TIM14_Init+0x40>)
 8001d96:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd4 <MX_TIM14_Init+0x44>)
 8001d98:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <MX_TIM14_Init+0x40>)
 8001d9c:	22f4      	movs	r2, #244	@ 0xf4
 8001d9e:	0092      	lsls	r2, r2, #2
 8001da0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <MX_TIM14_Init+0x40>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001da8:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <MX_TIM14_Init+0x40>)
 8001daa:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd8 <MX_TIM14_Init+0x48>)
 8001dac:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dae:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <MX_TIM14_Init+0x40>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <MX_TIM14_Init+0x40>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001dba:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <MX_TIM14_Init+0x40>)
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f006 fa1f 	bl	8008200 <HAL_TIM_Base_Init>
 8001dc2:	1e03      	subs	r3, r0, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001dc6:	f000 ff14 	bl	8002bf2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001dca:	46c0      	nop			@ (mov r8, r8)
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	2000036c 	.word	0x2000036c
 8001dd4:	40002000 	.word	0x40002000
 8001dd8:	0000ffff 	.word	0x0000ffff

08001ddc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001de0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <MX_TIM16_Init+0x44>)
 8001de2:	4a10      	ldr	r2, [pc, #64]	@ (8001e24 <MX_TIM16_Init+0x48>)
 8001de4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 58595;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e20 <MX_TIM16_Init+0x44>)
 8001de8:	4a0f      	ldr	r2, [pc, #60]	@ (8001e28 <MX_TIM16_Init+0x4c>)
 8001dea:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <MX_TIM16_Init+0x44>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001df2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <MX_TIM16_Init+0x44>)
 8001df4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <MX_TIM16_Init+0x50>)
 8001df6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df8:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <MX_TIM16_Init+0x44>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 10;
 8001dfe:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <MX_TIM16_Init+0x44>)
 8001e00:	220a      	movs	r2, #10
 8001e02:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <MX_TIM16_Init+0x44>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e0a:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <MX_TIM16_Init+0x44>)
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f006 f9f7 	bl	8008200 <HAL_TIM_Base_Init>
 8001e12:	1e03      	subs	r3, r0, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001e16:	f000 feec 	bl	8002bf2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001e1a:	46c0      	nop			@ (mov r8, r8)
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	200003b8 	.word	0x200003b8
 8001e24:	40014400 	.word	0x40014400
 8001e28:	0000e4e3 	.word	0x0000e4e3
 8001e2c:	0000ffff 	.word	0x0000ffff

08001e30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e36:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <MX_DMA_Init+0x48>)
 8001e38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <MX_DMA_Init+0x48>)
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e42:	4b0d      	ldr	r3, [pc, #52]	@ (8001e78 <MX_DMA_Init+0x48>)
 8001e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e46:	2201      	movs	r2, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2009      	movs	r0, #9
 8001e54:	f001 fdac 	bl	80039b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e58:	2009      	movs	r0, #9
 8001e5a:	f001 fdbe 	bl	80039da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	200a      	movs	r0, #10
 8001e64:	f001 fda4 	bl	80039b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001e68:	200a      	movs	r0, #10
 8001e6a:	f001 fdb6 	bl	80039da <HAL_NVIC_EnableIRQ>

}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b002      	add	sp, #8
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	40021000 	.word	0x40021000

08001e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b08b      	sub	sp, #44	@ 0x2c
 8001e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	2414      	movs	r4, #20
 8001e84:	193b      	adds	r3, r7, r4
 8001e86:	0018      	movs	r0, r3
 8001e88:	2314      	movs	r3, #20
 8001e8a:	001a      	movs	r2, r3
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	f007 fa25 	bl	80092dc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e92:	4b76      	ldr	r3, [pc, #472]	@ (800206c <MX_GPIO_Init+0x1f0>)
 8001e94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e96:	4b75      	ldr	r3, [pc, #468]	@ (800206c <MX_GPIO_Init+0x1f0>)
 8001e98:	2104      	movs	r1, #4
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e9e:	4b73      	ldr	r3, [pc, #460]	@ (800206c <MX_GPIO_Init+0x1f0>)
 8001ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eaa:	4b70      	ldr	r3, [pc, #448]	@ (800206c <MX_GPIO_Init+0x1f0>)
 8001eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eae:	4b6f      	ldr	r3, [pc, #444]	@ (800206c <MX_GPIO_Init+0x1f0>)
 8001eb0:	2120      	movs	r1, #32
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800206c <MX_GPIO_Init+0x1f0>)
 8001eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eba:	2220      	movs	r2, #32
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	4b6a      	ldr	r3, [pc, #424]	@ (800206c <MX_GPIO_Init+0x1f0>)
 8001ec4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ec6:	4b69      	ldr	r3, [pc, #420]	@ (800206c <MX_GPIO_Init+0x1f0>)
 8001ec8:	2101      	movs	r1, #1
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ece:	4b67      	ldr	r3, [pc, #412]	@ (800206c <MX_GPIO_Init+0x1f0>)
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eda:	4b64      	ldr	r3, [pc, #400]	@ (800206c <MX_GPIO_Init+0x1f0>)
 8001edc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ede:	4b63      	ldr	r3, [pc, #396]	@ (800206c <MX_GPIO_Init+0x1f0>)
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ee6:	4b61      	ldr	r3, [pc, #388]	@ (800206c <MX_GPIO_Init+0x1f0>)
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eea:	2202      	movs	r2, #2
 8001eec:	4013      	ands	r3, r2
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef2:	4b5e      	ldr	r3, [pc, #376]	@ (800206c <MX_GPIO_Init+0x1f0>)
 8001ef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ef6:	4b5d      	ldr	r3, [pc, #372]	@ (800206c <MX_GPIO_Init+0x1f0>)
 8001ef8:	2108      	movs	r1, #8
 8001efa:	430a      	orrs	r2, r1
 8001efc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001efe:	4b5b      	ldr	r3, [pc, #364]	@ (800206c <MX_GPIO_Init+0x1f0>)
 8001f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f02:	2208      	movs	r2, #8
 8001f04:	4013      	ands	r3, r2
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8001f0a:	2382      	movs	r3, #130	@ 0x82
 8001f0c:	019b      	lsls	r3, r3, #6
 8001f0e:	4858      	ldr	r0, [pc, #352]	@ (8002070 <MX_GPIO_Init+0x1f4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	0019      	movs	r1, r3
 8001f14:	f002 f9b3 	bl	800427e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_MCLR_Pin, GPIO_PIN_SET);
 8001f18:	238e      	movs	r3, #142	@ 0x8e
 8001f1a:	0119      	lsls	r1, r3, #4
 8001f1c:	23a0      	movs	r3, #160	@ 0xa0
 8001f1e:	05db      	lsls	r3, r3, #23
 8001f20:	2201      	movs	r2, #1
 8001f22:	0018      	movs	r0, r3
 8001f24:	f002 f9ab 	bl	800427e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_ENABLE_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001f28:	4952      	ldr	r1, [pc, #328]	@ (8002074 <MX_GPIO_Init+0x1f8>)
 8001f2a:	4b53      	ldr	r3, [pc, #332]	@ (8002078 <MX_GPIO_Init+0x1fc>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f002 f9a5 	bl	800427e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin, GPIO_PIN_RESET);
 8001f34:	23c0      	movs	r3, #192	@ 0xc0
 8001f36:	00d9      	lsls	r1, r3, #3
 8001f38:	23a0      	movs	r3, #160	@ 0xa0
 8001f3a:	05db      	lsls	r3, r3, #23
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f002 f99d 	bl	800427e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAPTOUCH_RESET_GPIO_Port, CAPTOUCH_RESET_Pin, GPIO_PIN_SET);
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	484b      	ldr	r0, [pc, #300]	@ (8002078 <MX_GPIO_Init+0x1fc>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	0019      	movs	r1, r3
 8001f4e:	f002 f996 	bl	800427e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|SHIFT_STORE_CLK_Pin;
 8001f52:	193b      	adds	r3, r7, r4
 8001f54:	2282      	movs	r2, #130	@ 0x82
 8001f56:	0192      	lsls	r2, r2, #6
 8001f58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5a:	193b      	adds	r3, r7, r4
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	193b      	adds	r3, r7, r4
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f66:	193b      	adds	r3, r7, r4
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6c:	193b      	adds	r3, r7, r4
 8001f6e:	4a40      	ldr	r2, [pc, #256]	@ (8002070 <MX_GPIO_Init+0x1f4>)
 8001f70:	0019      	movs	r1, r3
 8001f72:	0010      	movs	r0, r2
 8001f74:	f002 f802 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CHIP_SELECT_Pin MEM_nWP_Pin MEM_nHOLD_Pin SHIFT_DATA_IN_Pin
                           SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_DATA_IN_Pin
 8001f78:	0021      	movs	r1, r4
 8001f7a:	187b      	adds	r3, r7, r1
 8001f7c:	22ee      	movs	r2, #238	@ 0xee
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	601a      	str	r2, [r3, #0]
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f82:	000c      	movs	r4, r1
 8001f84:	193b      	adds	r3, r7, r4
 8001f86:	2201      	movs	r2, #1
 8001f88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	193b      	adds	r3, r7, r4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	193b      	adds	r3, r7, r4
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f96:	193a      	adds	r2, r7, r4
 8001f98:	23a0      	movs	r3, #160	@ 0xa0
 8001f9a:	05db      	lsls	r3, r3, #23
 8001f9c:	0011      	movs	r1, r2
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f001 ffec 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_ENABLE_Pin DEBUG_LED_Pin CAPTOUCH_RESET_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin;
 8001fa4:	193b      	adds	r3, r7, r4
 8001fa6:	4a35      	ldr	r2, [pc, #212]	@ (800207c <MX_GPIO_Init+0x200>)
 8001fa8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001faa:	193b      	adds	r3, r7, r4
 8001fac:	2201      	movs	r2, #1
 8001fae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	193b      	adds	r3, r7, r4
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb6:	193b      	adds	r3, r7, r4
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	193b      	adds	r3, r7, r4
 8001fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8002078 <MX_GPIO_Init+0x1fc>)
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	0010      	movs	r0, r2
 8001fc4:	f001 ffda 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_SET_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = ALARM_SET_BUTTON_EXTI_Pin;
 8001fc8:	193b      	adds	r3, r7, r4
 8001fca:	2280      	movs	r2, #128	@ 0x80
 8001fcc:	0212      	lsls	r2, r2, #8
 8001fce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fd0:	193b      	adds	r3, r7, r4
 8001fd2:	2284      	movs	r2, #132	@ 0x84
 8001fd4:	0392      	lsls	r2, r2, #14
 8001fd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fd8:	193b      	adds	r3, r7, r4
 8001fda:	2201      	movs	r2, #1
 8001fdc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALARM_SET_BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 8001fde:	193a      	adds	r2, r7, r4
 8001fe0:	23a0      	movs	r3, #160	@ 0xa0
 8001fe2:	05db      	lsls	r3, r3, #23
 8001fe4:	0011      	movs	r1, r2
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f001 ffc8 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_EXTI_Pin MINUTE_SET_BUTTON_EXTI_Pin ALARM_EN_BUTTON_EXTI_Pin DISPLAY_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_EXTI_Pin|MINUTE_SET_BUTTON_EXTI_Pin|ALARM_EN_BUTTON_EXTI_Pin|DISPLAY_BUTTON_EXTI_Pin;
 8001fec:	0021      	movs	r1, r4
 8001fee:	187b      	adds	r3, r7, r1
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ff4:	187b      	adds	r3, r7, r1
 8001ff6:	2284      	movs	r2, #132	@ 0x84
 8001ff8:	0392      	lsls	r2, r2, #14
 8001ffa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ffc:	187b      	adds	r3, r7, r1
 8001ffe:	2201      	movs	r2, #1
 8002000:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002002:	000c      	movs	r4, r1
 8002004:	187b      	adds	r3, r7, r1
 8002006:	4a1e      	ldr	r2, [pc, #120]	@ (8002080 <MX_GPIO_Init+0x204>)
 8002008:	0019      	movs	r1, r3
 800200a:	0010      	movs	r0, r2
 800200c:	f001 ffb6 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TIME_SWITCH_EXTI_Pin */
  GPIO_InitStruct.Pin = TIME_SWITCH_EXTI_Pin;
 8002010:	0021      	movs	r1, r4
 8002012:	187b      	adds	r3, r7, r1
 8002014:	2210      	movs	r2, #16
 8002016:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002018:	187b      	adds	r3, r7, r1
 800201a:	22c4      	movs	r2, #196	@ 0xc4
 800201c:	0392      	lsls	r2, r2, #14
 800201e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002020:	187b      	adds	r3, r7, r1
 8002022:	2201      	movs	r2, #1
 8002024:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TIME_SWITCH_EXTI_GPIO_Port, &GPIO_InitStruct);
 8002026:	187b      	adds	r3, r7, r1
 8002028:	4a13      	ldr	r2, [pc, #76]	@ (8002078 <MX_GPIO_Init+0x1fc>)
 800202a:	0019      	movs	r1, r3
 800202c:	0010      	movs	r0, r2
 800202e:	f001 ffa5 	bl	8003f7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2101      	movs	r1, #1
 8002036:	2005      	movs	r0, #5
 8002038:	f001 fcba 	bl	80039b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800203c:	2005      	movs	r0, #5
 800203e:	f001 fccc 	bl	80039da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	2102      	movs	r1, #2
 8002046:	2006      	movs	r0, #6
 8002048:	f001 fcb2 	bl	80039b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800204c:	2006      	movs	r0, #6
 800204e:	f001 fcc4 	bl	80039da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2102      	movs	r1, #2
 8002056:	2007      	movs	r0, #7
 8002058:	f001 fcaa 	bl	80039b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800205c:	2007      	movs	r0, #7
 800205e:	f001 fcbc 	bl	80039da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002062:	46c0      	nop			@ (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b00b      	add	sp, #44	@ 0x2c
 8002068:	bd90      	pop	{r4, r7, pc}
 800206a:	46c0      	nop			@ (mov r8, r8)
 800206c:	40021000 	.word	0x40021000
 8002070:	50000800 	.word	0x50000800
 8002074:	00001002 	.word	0x00001002
 8002078:	50000400 	.word	0x50000400
 800207c:	00001102 	.word	0x00001102
 8002080:	50000c00 	.word	0x50000c00

08002084 <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800208a:	2317      	movs	r3, #23
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8002092:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <updateAndDisplayTime+0x60>)
 8002094:	4914      	ldr	r1, [pc, #80]	@ (80020e8 <updateAndDisplayTime+0x64>)
 8002096:	4b15      	ldr	r3, [pc, #84]	@ (80020ec <updateAndDisplayTime+0x68>)
 8002098:	0018      	movs	r0, r3
 800209a:	f7ff fa7b 	bl	8001594 <getRTCTime>

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 800209e:	4b14      	ldr	r3, [pc, #80]	@ (80020f0 <updateAndDisplayTime+0x6c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10e      	bne.n	80020c4 <updateAndDisplayTime+0x40>

		RTC_TimeTypeDef currTimeMil = conv2Mil(&currTime);
 80020a6:	003b      	movs	r3, r7
 80020a8:	4a0f      	ldr	r2, [pc, #60]	@ (80020e8 <updateAndDisplayTime+0x64>)
 80020aa:	0011      	movs	r1, r2
 80020ac:	0018      	movs	r0, r3
 80020ae:	f000 fcd1 	bl	8002a54 <conv2Mil>

		sevSeg_updateDigits(&currTimeMil, userAlarmToggle);
 80020b2:	4b10      	ldr	r3, [pc, #64]	@ (80020f4 <updateAndDisplayTime+0x70>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	001a      	movs	r2, r3
 80020b8:	003b      	movs	r3, r7
 80020ba:	0011      	movs	r1, r2
 80020bc:	0018      	movs	r0, r3
 80020be:	f000 febf 	bl	8002e40 <sevSeg_updateDigits>
 80020c2:	e007      	b.n	80020d4 <updateAndDisplayTime+0x50>

	}
	else {
		sevSeg_updateDigits(&currTime, userAlarmToggle);
 80020c4:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <updateAndDisplayTime+0x70>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	001a      	movs	r2, r3
 80020ca:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <updateAndDisplayTime+0x64>)
 80020cc:	0011      	movs	r1, r2
 80020ce:	0018      	movs	r0, r3
 80020d0:	f000 feb6 	bl	8002e40 <sevSeg_updateDigits>
	}

	return halRet;
 80020d4:	2317      	movs	r3, #23
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	781b      	ldrb	r3, [r3, #0]

}
 80020da:	0018      	movs	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	b006      	add	sp, #24
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			@ (mov r8, r8)
 80020e4:	200000cc 	.word	0x200000cc
 80020e8:	200000b8 	.word	0x200000b8
 80020ec:	200001d8 	.word	0x200001d8
 80020f0:	200000e8 	.word	0x200000e8
 80020f4:	200000b5 	.word	0x200000b5

080020f8 <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80020fe:	2317      	movs	r3, #23
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 8002106:	4b11      	ldr	r3, [pc, #68]	@ (800214c <updateAndDisplayAlarm+0x54>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10e      	bne.n	800212c <updateAndDisplayAlarm+0x34>

		RTC_TimeTypeDef userAlarmTimeMil = conv2Mil(&userAlarmTime);
 800210e:	003b      	movs	r3, r7
 8002110:	4a0f      	ldr	r2, [pc, #60]	@ (8002150 <updateAndDisplayAlarm+0x58>)
 8002112:	0011      	movs	r1, r2
 8002114:	0018      	movs	r0, r3
 8002116:	f000 fc9d 	bl	8002a54 <conv2Mil>

		sevSeg_updateDigits(&userAlarmTimeMil, userAlarmToggle);
 800211a:	4b0e      	ldr	r3, [pc, #56]	@ (8002154 <updateAndDisplayAlarm+0x5c>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	001a      	movs	r2, r3
 8002120:	003b      	movs	r3, r7
 8002122:	0011      	movs	r1, r2
 8002124:	0018      	movs	r0, r3
 8002126:	f000 fe8b 	bl	8002e40 <sevSeg_updateDigits>
 800212a:	e007      	b.n	800213c <updateAndDisplayAlarm+0x44>

	}
	else {
		sevSeg_updateDigits(&userAlarmTime, userAlarmToggle);
 800212c:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <updateAndDisplayAlarm+0x5c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	001a      	movs	r2, r3
 8002132:	4b07      	ldr	r3, [pc, #28]	@ (8002150 <updateAndDisplayAlarm+0x58>)
 8002134:	0011      	movs	r1, r2
 8002136:	0018      	movs	r0, r3
 8002138:	f000 fe82 	bl	8002e40 <sevSeg_updateDigits>
	}



	return halRet;
 800213c:	2317      	movs	r3, #23
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	781b      	ldrb	r3, [r3, #0]

}
 8002142:	0018      	movs	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	b006      	add	sp, #24
 8002148:	bd80      	pop	{r7, pc}
 800214a:	46c0      	nop			@ (mov r8, r8)
 800214c:	200000e8 	.word	0x200000e8
 8002150:	200000d0 	.word	0x200000d0
 8002154:	200000b5 	.word	0x200000b5

08002158 <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b08d      	sub	sp, #52	@ 0x34
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 8002160:	2408      	movs	r4, #8
 8002162:	193b      	adds	r3, r7, r4
 8002164:	0018      	movs	r0, r3
 8002166:	2328      	movs	r3, #40	@ 0x28
 8002168:	001a      	movs	r2, r3
 800216a:	2100      	movs	r1, #0
 800216c:	f007 f8b6 	bl	80092dc <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8002170:	2380      	movs	r3, #128	@ 0x80
 8002172:	005a      	lsls	r2, r3, #1
 8002174:	1939      	adds	r1, r7, r4
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	2300      	movs	r3, #0
 800217a:	f004 fe89 	bl	8006e90 <HAL_RTC_GetAlarm>


	  if(sAlarm.AlarmTime.Minutes>58) {
 800217e:	193b      	adds	r3, r7, r4
 8002180:	785b      	ldrb	r3, [r3, #1]
 8002182:	2b3a      	cmp	r3, #58	@ 0x3a
 8002184:	d903      	bls.n	800218e <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 8002186:	193b      	adds	r3, r7, r4
 8002188:	2200      	movs	r2, #0
 800218a:	705a      	strb	r2, [r3, #1]
 800218c:	e006      	b.n	800219c <HAL_RTC_AlarmAEventCallback+0x44>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 800218e:	2108      	movs	r1, #8
 8002190:	187b      	adds	r3, r7, r1
 8002192:	785b      	ldrb	r3, [r3, #1]
 8002194:	3301      	adds	r3, #1
 8002196:	b2da      	uxtb	r2, r3
 8002198:	187b      	adds	r3, r7, r1
 800219a:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 800219c:	46c0      	nop			@ (mov r8, r8)
 800219e:	2308      	movs	r3, #8
 80021a0:	18f9      	adds	r1, r7, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	0018      	movs	r0, r3
 80021a8:	f004 fd32 	bl	8006c10 <HAL_RTC_SetAlarm_IT>
 80021ac:	1e03      	subs	r3, r0, #0
 80021ae:	d1f6      	bne.n	800219e <HAL_RTC_AlarmAEventCallback+0x46>

	  updateAndDisplayTime();
 80021b0:	f7ff ff68 	bl	8002084 <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 80021b4:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <HAL_RTC_AlarmAEventCallback+0x98>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d014      	beq.n	80021e6 <HAL_RTC_AlarmAEventCallback+0x8e>
 80021bc:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80021be:	781a      	ldrb	r2, [r3, #0]
 80021c0:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <HAL_RTC_AlarmAEventCallback+0xa0>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d10e      	bne.n	80021e6 <HAL_RTC_AlarmAEventCallback+0x8e>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 80021c8:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80021ca:	785a      	ldrb	r2, [r3, #1]
 80021cc:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <HAL_RTC_AlarmAEventCallback+0xa0>)
 80021ce:	785b      	ldrb	r3, [r3, #1]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d108      	bne.n	80021e6 <HAL_RTC_AlarmAEventCallback+0x8e>
 80021d4:	4b07      	ldr	r3, [pc, #28]	@ (80021f4 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80021d6:	78da      	ldrb	r2, [r3, #3]
 80021d8:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <HAL_RTC_AlarmAEventCallback+0xa0>)
 80021da:	78db      	ldrb	r3, [r3, #3]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d102      	bne.n	80021e6 <HAL_RTC_AlarmAEventCallback+0x8e>
		  beepMode = true;
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <HAL_RTC_AlarmAEventCallback+0xa4>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	701a      	strb	r2, [r3, #0]
	  }


}
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b00d      	add	sp, #52	@ 0x34
 80021ec:	bd90      	pop	{r4, r7, pc}
 80021ee:	46c0      	nop			@ (mov r8, r8)
 80021f0:	200000b5 	.word	0x200000b5
 80021f4:	200000d0 	.word	0x200000d0
 80021f8:	200000b8 	.word	0x200000b8
 80021fc:	20000406 	.word	0x20000406

08002200 <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 8002206:	4b53      	ldr	r3, [pc, #332]	@ (8002354 <userAlarmBeep+0x154>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d02d      	beq.n	800226a <userAlarmBeep+0x6a>

		// Stop the timer and
		HAL_TIM_Base_Stop_IT(timerSnooze);
 800220e:	4b52      	ldr	r3, [pc, #328]	@ (8002358 <userAlarmBeep+0x158>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	0018      	movs	r0, r3
 8002214:	f006 f912 	bl	800843c <HAL_TIM_Base_Stop_IT>

		// Reset count to 0
		// only bits 0 - 15 should be changed.
		timerSnooze->Instance->CNT &= 0xFFFF0000;
 8002218:	4b4f      	ldr	r3, [pc, #316]	@ (8002358 <userAlarmBeep+0x158>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002220:	4b4d      	ldr	r3, [pc, #308]	@ (8002358 <userAlarmBeep+0x158>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	0c12      	lsrs	r2, r2, #16
 8002228:	0412      	lsls	r2, r2, #16
 800222a:	625a      	str	r2, [r3, #36]	@ 0x24

		// Reset interrupt status register
		timerSnooze->Instance->SR &= 0xFFFC;
 800222c:	4b4a      	ldr	r3, [pc, #296]	@ (8002358 <userAlarmBeep+0x158>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	4b48      	ldr	r3, [pc, #288]	@ (8002358 <userAlarmBeep+0x158>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4948      	ldr	r1, [pc, #288]	@ (800235c <userAlarmBeep+0x15c>)
 800223c:	400a      	ands	r2, r1
 800223e:	611a      	str	r2, [r3, #16]

		// Re-write RCR with 10
		timerSnooze->Instance->RCR &= 0xFF00;
 8002240:	4b45      	ldr	r3, [pc, #276]	@ (8002358 <userAlarmBeep+0x158>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002248:	4b43      	ldr	r3, [pc, #268]	@ (8002358 <userAlarmBeep+0x158>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	22ff      	movs	r2, #255	@ 0xff
 8002250:	0212      	lsls	r2, r2, #8
 8002252:	400a      	ands	r2, r1
 8002254:	631a      	str	r2, [r3, #48]	@ 0x30
		timerSnooze->Instance->RCR |= timerSnooze_RCR;
 8002256:	4b40      	ldr	r3, [pc, #256]	@ (8002358 <userAlarmBeep+0x158>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800225e:	2164      	movs	r1, #100	@ 0x64
 8002260:	4b3d      	ldr	r3, [pc, #244]	@ (8002358 <userAlarmBeep+0x158>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	631a      	str	r2, [r3, #48]	@ 0x30

	}

	HAL_TIM_Base_Stop(timerDelay);
 800226a:	4b3d      	ldr	r3, [pc, #244]	@ (8002360 <userAlarmBeep+0x160>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	0018      	movs	r0, r3
 8002270:	f006 f86a 	bl	8008348 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8002274:	4b3a      	ldr	r3, [pc, #232]	@ (8002360 <userAlarmBeep+0x160>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0018      	movs	r0, r3
 800227a:	f006 f819 	bl	80082b0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 800227e:	4b38      	ldr	r3, [pc, #224]	@ (8002360 <userAlarmBeep+0x160>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002286:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8002288:	1cfb      	adds	r3, r7, #3
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]

	// Start audio DMA streams
	startAudioStream();
 800228e:	f000 fc17 	bl	8002ac0 <startAudioStream>

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 8002292:	f7ff fef7 	bl	8002084 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 8002296:	4b32      	ldr	r3, [pc, #200]	@ (8002360 <userAlarmBeep+0x160>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	4a30      	ldr	r2, [pc, #192]	@ (8002364 <userAlarmBeep+0x164>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d91a      	bls.n	80022de <userAlarmBeep+0xde>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 80022a8:	1cfb      	adds	r3, r7, #3
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002368 <userAlarmBeep+0x168>)
 80022ae:	5cd3      	ldrb	r3, [r2, r3]
 80022b0:	0018      	movs	r0, r3
 80022b2:	f000 fe79 	bl	8002fa8 <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80022b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002360 <userAlarmBeep+0x160>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80022c0:	1cfb      	adds	r3, r7, #3
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	4193      	sbcs	r3, r2
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2201      	movs	r2, #1
 80022cc:	4053      	eors	r3, r2
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	001a      	movs	r2, r3
 80022d2:	1cfb      	adds	r3, r7, #3
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	781a      	ldrb	r2, [r3, #0]
 80022d8:	2101      	movs	r1, #1
 80022da:	400a      	ands	r2, r1
 80022dc:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 80022de:	4b23      	ldr	r3, [pc, #140]	@ (800236c <userAlarmBeep+0x16c>)
 80022e0:	0018      	movs	r0, r3
 80022e2:	f7fe f947 	bl	8000574 <capTouch_readChannels>

	} while(capTouch.keyStat == 0x00 &&
 80022e6:	4b21      	ldr	r3, [pc, #132]	@ (800236c <userAlarmBeep+0x16c>)
 80022e8:	7c1b      	ldrb	r3, [r3, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d108      	bne.n	8002300 <userAlarmBeep+0x100>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 80022ee:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <userAlarmBeep+0x170>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2204      	movs	r2, #4
 80022f4:	0011      	movs	r1, r2
 80022f6:	0018      	movs	r0, r3
 80022f8:	f001 ffa4 	bl	8004244 <HAL_GPIO_ReadPin>
 80022fc:	1e03      	subs	r3, r0, #0
	} while(capTouch.keyStat == 0x00 &&
 80022fe:	d1c8      	bne.n	8002292 <userAlarmBeep+0x92>

	/*
	 * Stop blinking, turn off audio, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 8002300:	4b17      	ldr	r3, [pc, #92]	@ (8002360 <userAlarmBeep+0x160>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	0018      	movs	r0, r3
 8002306:	f006 f81f 	bl	8008348 <HAL_TIM_Base_Stop>

	// Stop audio stream
	stopAudioStream();
 800230a:	f000 fbef 	bl	8002aec <stopAudioStream>

	updateAndDisplayTime();				// Update to current time and display
 800230e:	f7ff feb9 	bl	8002084 <updateAndDisplayTime>
	sevSeg_setIntensity(sevSeg_intensityDuty[1]);	// Set to 50% duty cycle
 8002312:	2332      	movs	r3, #50	@ 0x32
 8002314:	0018      	movs	r0, r3
 8002316:	f000 fe47 	bl	8002fa8 <sevSeg_setIntensity>
	displayToggle = 2;								// Set to 2 for future display button ISRs
 800231a:	4b16      	ldr	r3, [pc, #88]	@ (8002374 <userAlarmBeep+0x174>)
 800231c:	2202      	movs	r2, #2
 800231e:	701a      	strb	r2, [r3, #0]


	// If this is the first snooze,
	if(!secondSnooze) {
 8002320:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <userAlarmBeep+0x154>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2201      	movs	r2, #1
 8002326:	4053      	eors	r3, r2
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <userAlarmBeep+0x140>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 800232e:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <userAlarmBeep+0x158>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	0018      	movs	r0, r3
 8002334:	f006 f82e 	bl	8008394 <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 8002338:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <userAlarmBeep+0x154>)
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e002      	b.n	8002346 <userAlarmBeep+0x146>
		// Reset flag
		/*
		 * This must be done here because if it's done
		 * in the top conditional, the secondSnooze is always true;
		 */
		secondSnooze = false;
 8002340:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <userAlarmBeep+0x154>)
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]

	}

	// Reset beepMode bool
	beepMode = false;
 8002346:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <userAlarmBeep+0x178>)
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]

}
 800234c:	46c0      	nop			@ (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b002      	add	sp, #8
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000405 	.word	0x20000405
 8002358:	20000070 	.word	0x20000070
 800235c:	0000fffc 	.word	0x0000fffc
 8002360:	2000006c 	.word	0x2000006c
 8002364:	00007ffe 	.word	0x00007ffe
 8002368:	08009390 	.word	0x08009390
 800236c:	20000408 	.word	0x20000408
 8002370:	20000000 	.word	0x20000000
 8002374:	200000b4 	.word	0x200000b4
 8002378:	20000406 	.word	0x20000406

0800237c <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	0002      	movs	r2, r0
 8002384:	1dbb      	adds	r3, r7, #6
 8002386:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8002388:	2208      	movs	r2, #8
 800238a:	1dbb      	adds	r3, r7, #6
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	4293      	cmp	r3, r2
 8002390:	d106      	bne.n	80023a0 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 8002392:	230f      	movs	r3, #15
 8002394:	18fc      	adds	r4, r7, r3
 8002396:	f000 f86f 	bl	8002478 <displayButtonISR>
 800239a:	0003      	movs	r3, r0
 800239c:	7023      	strb	r3, [r4, #0]

	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 800239e:	e03d      	b.n	800241c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 80023a0:	2204      	movs	r2, #4
 80023a2:	1dbb      	adds	r3, r7, #6
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d106      	bne.n	80023b8 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 80023aa:	230f      	movs	r3, #15
 80023ac:	18fc      	adds	r4, r7, r3
 80023ae:	f000 f88b 	bl	80024c8 <alarmEnableISR>
 80023b2:	0003      	movs	r3, r0
 80023b4:	7023      	strb	r3, [r4, #0]
}
 80023b6:	e031      	b.n	800241c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmSetButtonPin) {
 80023b8:	2380      	movs	r3, #128	@ 0x80
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	1dba      	adds	r2, r7, #6
 80023be:	8812      	ldrh	r2, [r2, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d106      	bne.n	80023d2 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 80023c4:	230f      	movs	r3, #15
 80023c6:	18fc      	adds	r4, r7, r3
 80023c8:	f000 f8a8 	bl	800251c <alarmSetISR>
 80023cc:	0003      	movs	r3, r0
 80023ce:	7023      	strb	r3, [r4, #0]
}
 80023d0:	e024      	b.n	800241c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == hourSetButtonPin) {
 80023d2:	2201      	movs	r2, #1
 80023d4:	1dbb      	adds	r3, r7, #6
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	4293      	cmp	r3, r2
 80023da:	d106      	bne.n	80023ea <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 80023dc:	230f      	movs	r3, #15
 80023de:	18fc      	adds	r4, r7, r3
 80023e0:	f000 f95c 	bl	800269c <hourSetISR>
 80023e4:	0003      	movs	r3, r0
 80023e6:	7023      	strb	r3, [r4, #0]
}
 80023e8:	e018      	b.n	800241c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == minuteSetButtonPin) {
 80023ea:	2202      	movs	r2, #2
 80023ec:	1dbb      	adds	r3, r7, #6
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d106      	bne.n	8002402 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 80023f4:	230f      	movs	r3, #15
 80023f6:	18fc      	adds	r4, r7, r3
 80023f8:	f000 f97c 	bl	80026f4 <minuteSetISR>
 80023fc:	0003      	movs	r3, r0
 80023fe:	7023      	strb	r3, [r4, #0]
}
 8002400:	e00c      	b.n	800241c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == timeFormatSwitchPin) {
 8002402:	2210      	movs	r2, #16
 8002404:	1dbb      	adds	r3, r7, #6
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	4293      	cmp	r3, r2
 800240a:	d106      	bne.n	800241a <HAL_GPIO_EXTI_Falling_Callback+0x9e>
		halRet = timeFormatSwitchISR();
 800240c:	230f      	movs	r3, #15
 800240e:	18fc      	adds	r4, r7, r3
 8002410:	f000 f9c2 	bl	8002798 <timeFormatSwitchISR>
 8002414:	0003      	movs	r3, r0
 8002416:	7023      	strb	r3, [r4, #0]
}
 8002418:	e000      	b.n	800241c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
		__NOP();
 800241a:	46c0      	nop			@ (mov r8, r8)
}
 800241c:	46c0      	nop			@ (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b005      	add	sp, #20
 8002422:	bd90      	pop	{r4, r7, pc}

08002424 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	0002      	movs	r2, r0
 800242c:	1dbb      	adds	r3, r7, #6
 800242e:	801a      	strh	r2, [r3, #0]

	if(GPIO_Pin == timeFormatSwitchPin) {
 8002430:	2210      	movs	r2, #16
 8002432:	1dbb      	adds	r3, r7, #6
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	4293      	cmp	r3, r2
 8002438:	d101      	bne.n	800243e <HAL_GPIO_EXTI_Rising_Callback+0x1a>

		timeFormatSwitchISR();
 800243a:	f000 f9ad 	bl	8002798 <timeFormatSwitchISR>

	}

}
 800243e:	46c0      	nop			@ (mov r8, r8)
 8002440:	46bd      	mov	sp, r7
 8002442:	b002      	add	sp, #8
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

	if((htim == timerSnooze) && (secondSnooze == true)) {
 8002450:	4b07      	ldr	r3, [pc, #28]	@ (8002470 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	429a      	cmp	r2, r3
 8002458:	d105      	bne.n	8002466 <HAL_TIM_PeriodElapsedCallback+0x1e>
 800245a:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_TIM_PeriodElapsedCallback+0x1e>

		userAlarmBeep();
 8002462:	f7ff fecd 	bl	8002200 <userAlarmBeep>

	}

}
 8002466:	46c0      	nop			@ (mov r8, r8)
 8002468:	46bd      	mov	sp, r7
 800246a:	b002      	add	sp, #8
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	20000070 	.word	0x20000070
 8002474:	20000405 	.word	0x20000405

08002478 <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 8002484:	f7ff fdfe 	bl	8002084 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8002488:	4b0d      	ldr	r3, [pc, #52]	@ (80024c0 <displayButtonISR+0x48>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	001a      	movs	r2, r3
 800248e:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <displayButtonISR+0x4c>)
 8002490:	5c9b      	ldrb	r3, [r3, r2]
 8002492:	0018      	movs	r0, r3
 8002494:	f000 fd88 	bl	8002fa8 <sevSeg_setIntensity>

	if(displayToggle >= 1) {			// Increment display toggle or reset back down to 0;
 8002498:	4b09      	ldr	r3, [pc, #36]	@ (80024c0 <displayButtonISR+0x48>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <displayButtonISR+0x30>
		displayToggle = 0;
 80024a0:	4b07      	ldr	r3, [pc, #28]	@ (80024c0 <displayButtonISR+0x48>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
 80024a6:	e005      	b.n	80024b4 <displayButtonISR+0x3c>
	} else {
		displayToggle++;
 80024a8:	4b05      	ldr	r3, [pc, #20]	@ (80024c0 <displayButtonISR+0x48>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	3301      	adds	r3, #1
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	4b03      	ldr	r3, [pc, #12]	@ (80024c0 <displayButtonISR+0x48>)
 80024b2:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 80024b4:	1dfb      	adds	r3, r7, #7
 80024b6:	781b      	ldrb	r3, [r3, #0]

}
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b002      	add	sp, #8
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	200000b4 	.word	0x200000b4
 80024c4:	08009390 	.word	0x08009390

080024c8 <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0



	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80024ce:	1dfb      	adds	r3, r7, #7
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 80024d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002514 <alarmEnableISR+0x4c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2201      	movs	r2, #1
 80024da:	4053      	eors	r3, r2
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <alarmEnableISR+0x22>

		userAlarmToggle = true;								// Toggle internal flag to true
 80024e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <alarmEnableISR+0x4c>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	e008      	b.n	80024fc <alarmEnableISR+0x34>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 80024ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <alarmEnableISR+0x4c>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <alarmEnableISR+0x32>

		userAlarmToggle = false;							// Toggle internal flag to false
 80024f2:	4b08      	ldr	r3, [pc, #32]	@ (8002514 <alarmEnableISR+0x4c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	e000      	b.n	80024fc <alarmEnableISR+0x34>
	}
	else {
		__NOP();							//Code should never reach here.
 80024fa:	46c0      	nop			@ (mov r8, r8)
	}

	updateAndDisplayTime();				// Update display with correct decimal point
 80024fc:	f7ff fdc2 	bl	8002084 <updateAndDisplayTime>

	// Reset snooze time
	secondSnooze = false;
 8002500:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <alarmEnableISR+0x50>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]

	return halRet;
 8002506:	1dfb      	adds	r3, r7, #7
 8002508:	781b      	ldrb	r3, [r3, #0]

}
 800250a:	0018      	movs	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	b002      	add	sp, #8
 8002510:	bd80      	pop	{r7, pc}
 8002512:	46c0      	nop			@ (mov r8, r8)
 8002514:	200000b5 	.word	0x200000b5
 8002518:	20000405 	.word	0x20000405

0800251c <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 8002522:	1c7b      	adds	r3, r7, #1
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 8002528:	1dfb      	adds	r3, r7, #7
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e01a      	b.n	8002566 <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 8002530:	4b55      	ldr	r3, [pc, #340]	@ (8002688 <alarmSetISR+0x16c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0018      	movs	r0, r3
 8002536:	f005 ff07 	bl	8008348 <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 800253a:	4b53      	ldr	r3, [pc, #332]	@ (8002688 <alarmSetISR+0x16c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2200      	movs	r2, #0
 8002542:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8002544:	4b50      	ldr	r3, [pc, #320]	@ (8002688 <alarmSetISR+0x16c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0018      	movs	r0, r3
 800254a:	f005 feb1 	bl	80082b0 <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 800254e:	4b4e      	ldr	r3, [pc, #312]	@ (8002688 <alarmSetISR+0x16c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	4a4d      	ldr	r2, [pc, #308]	@ (800268c <alarmSetISR+0x170>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d9f8      	bls.n	800254e <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 800255c:	1dfb      	adds	r3, r7, #7
 800255e:	781a      	ldrb	r2, [r3, #0]
 8002560:	1dfb      	adds	r3, r7, #7
 8002562:	3201      	adds	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
 8002566:	1dfb      	adds	r3, r7, #7
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d9e0      	bls.n	8002530 <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 800256e:	4b48      	ldr	r3, [pc, #288]	@ (8002690 <alarmSetISR+0x174>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2280      	movs	r2, #128	@ 0x80
 8002574:	0212      	lsls	r2, r2, #8
 8002576:	0011      	movs	r1, r2
 8002578:	0018      	movs	r0, r3
 800257a:	f001 fe63 	bl	8004244 <HAL_GPIO_ReadPin>
 800257e:	1e03      	subs	r3, r0, #0
 8002580:	d11f      	bne.n	80025c2 <alarmSetISR+0xa6>
		alarmSetMode = true;
 8002582:	4b44      	ldr	r3, [pc, #272]	@ (8002694 <alarmSetISR+0x178>)
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 8002588:	4b3f      	ldr	r3, [pc, #252]	@ (8002688 <alarmSetISR+0x16c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0018      	movs	r0, r3
 800258e:	f005 fedb 	bl	8008348 <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 8002592:	4b3d      	ldr	r3, [pc, #244]	@ (8002688 <alarmSetISR+0x16c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2200      	movs	r2, #0
 800259a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 800259c:	4b3a      	ldr	r3, [pc, #232]	@ (8002688 <alarmSetISR+0x16c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f005 fe85 	bl	80082b0 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80025a6:	4b38      	ldr	r3, [pc, #224]	@ (8002688 <alarmSetISR+0x16c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 80025b2:	1cfb      	adds	r3, r7, #3
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 80025b8:	4b36      	ldr	r3, [pc, #216]	@ (8002694 <alarmSetISR+0x178>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d059      	beq.n	8002674 <alarmSetISR+0x158>
 80025c0:	e002      	b.n	80025c8 <alarmSetISR+0xac>
		return halRet;
 80025c2:	1c7b      	adds	r3, r7, #1
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	e05a      	b.n	800267e <alarmSetISR+0x162>

		bool displayBlink = false;
 80025c8:	1cbb      	adds	r3, r7, #2
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 80025ce:	4b30      	ldr	r3, [pc, #192]	@ (8002690 <alarmSetISR+0x174>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2280      	movs	r2, #128	@ 0x80
 80025d4:	0212      	lsls	r2, r2, #8
 80025d6:	0011      	movs	r1, r2
 80025d8:	0018      	movs	r0, r3
 80025da:	f001 fe33 	bl	8004244 <HAL_GPIO_ReadPin>
 80025de:	0003      	movs	r3, r0
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d102      	bne.n	80025ea <alarmSetISR+0xce>
				alarmSetButtonReset = true;
 80025e4:	1cfb      	adds	r3, r7, #3
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 80025ea:	f7ff fd85 	bl	80020f8 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 80025ee:	4b26      	ldr	r3, [pc, #152]	@ (8002688 <alarmSetISR+0x16c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	1ad2      	subs	r2, r2, r3
 80025fc:	2380      	movs	r3, #128	@ 0x80
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	429a      	cmp	r2, r3
 8002602:	d31b      	bcc.n	800263c <alarmSetISR+0x120>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8002604:	1cbb      	adds	r3, r7, #2
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	4a23      	ldr	r2, [pc, #140]	@ (8002698 <alarmSetISR+0x17c>)
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	0018      	movs	r0, r3
 800260e:	f000 fccb 	bl	8002fa8 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 8002612:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <alarmSetISR+0x16c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 800261e:	1cbb      	adds	r3, r7, #2
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	1e5a      	subs	r2, r3, #1
 8002624:	4193      	sbcs	r3, r2
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2201      	movs	r2, #1
 800262a:	4053      	eors	r3, r2
 800262c:	b2db      	uxtb	r3, r3
 800262e:	001a      	movs	r2, r3
 8002630:	1cbb      	adds	r3, r7, #2
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	2101      	movs	r1, #1
 8002638:	400a      	ands	r2, r1
 800263a:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 800263c:	4b14      	ldr	r3, [pc, #80]	@ (8002690 <alarmSetISR+0x174>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2280      	movs	r2, #128	@ 0x80
 8002642:	0212      	lsls	r2, r2, #8
 8002644:	0011      	movs	r1, r2
 8002646:	0018      	movs	r0, r3
 8002648:	f001 fdfc 	bl	8004244 <HAL_GPIO_ReadPin>
 800264c:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 800264e:	d1be      	bne.n	80025ce <alarmSetISR+0xb2>
 8002650:	1cfb      	adds	r3, r7, #3
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2201      	movs	r2, #1
 8002656:	4053      	eors	r3, r2
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1b7      	bne.n	80025ce <alarmSetISR+0xb2>

		sevSeg_setIntensity(sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 800265e:	2332      	movs	r3, #50	@ 0x32
 8002660:	0018      	movs	r0, r3
 8002662:	f000 fca1 	bl	8002fa8 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 8002666:	4b08      	ldr	r3, [pc, #32]	@ (8002688 <alarmSetISR+0x16c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	0018      	movs	r0, r3
 800266c:	f005 fe6c 	bl	8008348 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8002670:	f7ff fd08 	bl	8002084 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8002674:	4b07      	ldr	r3, [pc, #28]	@ (8002694 <alarmSetISR+0x178>)
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 800267a:	1c7b      	adds	r3, r7, #1
 800267c:	781b      	ldrb	r3, [r3, #0]

}
 800267e:	0018      	movs	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	b002      	add	sp, #8
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			@ (mov r8, r8)
 8002688:	2000006c 	.word	0x2000006c
 800268c:	0000fffe 	.word	0x0000fffe
 8002690:	20000004 	.word	0x20000004
 8002694:	20000404 	.word	0x20000404
 8002698:	08009390 	.word	0x08009390

0800269c <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 80026a2:	1dfb      	adds	r3, r7, #7
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80026a8:	4b0e      	ldr	r3, [pc, #56]	@ (80026e4 <hourSetISR+0x48>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <hourSetISR+0x1a>

		alarmHourInc();
 80026b0:	f000 f89a 	bl	80027e8 <alarmHourInc>
 80026b4:	e00f      	b.n	80026d6 <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 80026b6:	f000 f8c7 	bl	8002848 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80026ba:	490b      	ldr	r1, [pc, #44]	@ (80026e8 <hourSetISR+0x4c>)
 80026bc:	4b0b      	ldr	r3, [pc, #44]	@ (80026ec <hourSetISR+0x50>)
 80026be:	2200      	movs	r2, #0
 80026c0:	0018      	movs	r0, r3
 80026c2:	f004 f953 	bl	800696c <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80026c6:	f7ff fcdd 	bl	8002084 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80026ca:	4a09      	ldr	r2, [pc, #36]	@ (80026f0 <hourSetISR+0x54>)
 80026cc:	4906      	ldr	r1, [pc, #24]	@ (80026e8 <hourSetISR+0x4c>)
 80026ce:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <hourSetISR+0x50>)
 80026d0:	0018      	movs	r0, r3
 80026d2:	f7fe ff5f 	bl	8001594 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 80026d6:	1dfb      	adds	r3, r7, #7
 80026d8:	781b      	ldrb	r3, [r3, #0]

}
 80026da:	0018      	movs	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	b002      	add	sp, #8
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	46c0      	nop			@ (mov r8, r8)
 80026e4:	20000404 	.word	0x20000404
 80026e8:	200000b8 	.word	0x200000b8
 80026ec:	200001d8 	.word	0x200001d8
 80026f0:	200000cc 	.word	0x200000cc

080026f4 <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08c      	sub	sp, #48	@ 0x30
 80026f8:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 80026fa:	232f      	movs	r3, #47	@ 0x2f
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8002702:	4b21      	ldr	r3, [pc, #132]	@ (8002788 <minuteSetISR+0x94>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <minuteSetISR+0x1c>

		alarmMinuteInc();
 800270a:	f000 f8dd 	bl	80028c8 <alarmMinuteInc>
 800270e:	e034      	b.n	800277a <minuteSetISR+0x86>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8002710:	f000 f8f8 	bl	8002904 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8002714:	491d      	ldr	r1, [pc, #116]	@ (800278c <minuteSetISR+0x98>)
 8002716:	4b1e      	ldr	r3, [pc, #120]	@ (8002790 <minuteSetISR+0x9c>)
 8002718:	2200      	movs	r2, #0
 800271a:	0018      	movs	r0, r3
 800271c:	f004 f926 	bl	800696c <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	0018      	movs	r0, r3
 8002724:	2328      	movs	r3, #40	@ 0x28
 8002726:	001a      	movs	r2, r3
 8002728:	2100      	movs	r1, #0
 800272a:	f006 fdd7 	bl	80092dc <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 800272e:	2380      	movs	r3, #128	@ 0x80
 8002730:	005a      	lsls	r2, r3, #1
 8002732:	1d39      	adds	r1, r7, #4
 8002734:	4816      	ldr	r0, [pc, #88]	@ (8002790 <minuteSetISR+0x9c>)
 8002736:	2300      	movs	r3, #0
 8002738:	f004 fbaa 	bl	8006e90 <HAL_RTC_GetAlarm>

		if(sAlarm.AlarmTime.Minutes>58) {
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	785b      	ldrb	r3, [r3, #1]
 8002740:	2b3a      	cmp	r3, #58	@ 0x3a
 8002742:	d903      	bls.n	800274c <minuteSetISR+0x58>
			sAlarm.AlarmTime.Minutes=0;
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	2200      	movs	r2, #0
 8002748:	705a      	strb	r2, [r3, #1]
 800274a:	e005      	b.n	8002758 <minuteSetISR+0x64>
			//printf("Reset alarm time\n\r");
		} else {
			sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	785b      	ldrb	r3, [r3, #1]
 8002750:	3301      	adds	r3, #1
 8002752:	b2da      	uxtb	r2, r3
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8002758:	46c0      	nop			@ (mov r8, r8)
 800275a:	1d39      	adds	r1, r7, #4
 800275c:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <minuteSetISR+0x9c>)
 800275e:	2200      	movs	r2, #0
 8002760:	0018      	movs	r0, r3
 8002762:	f004 fa55 	bl	8006c10 <HAL_RTC_SetAlarm_IT>
 8002766:	1e03      	subs	r3, r0, #0
 8002768:	d1f7      	bne.n	800275a <minuteSetISR+0x66>

		updateAndDisplayTime();
 800276a:	f7ff fc8b 	bl	8002084 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 800276e:	4a09      	ldr	r2, [pc, #36]	@ (8002794 <minuteSetISR+0xa0>)
 8002770:	4906      	ldr	r1, [pc, #24]	@ (800278c <minuteSetISR+0x98>)
 8002772:	4b07      	ldr	r3, [pc, #28]	@ (8002790 <minuteSetISR+0x9c>)
 8002774:	0018      	movs	r0, r3
 8002776:	f7fe ff0d 	bl	8001594 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 800277a:	232f      	movs	r3, #47	@ 0x2f
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	781b      	ldrb	r3, [r3, #0]
}
 8002780:	0018      	movs	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	b00c      	add	sp, #48	@ 0x30
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000404 	.word	0x20000404
 800278c:	200000b8 	.word	0x200000b8
 8002790:	200001d8 	.word	0x200001d8
 8002794:	200000cc 	.word	0x200000cc

08002798 <timeFormatSwitchISR>:

/*
 * Switch hour format (12 or 24 hr)
 */
HAL_StatusTypeDef timeFormatSwitchISR(void) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800279e:	1dfb      	adds	r3, r7, #7
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]

	// Determine which time format we will be using
	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 80027a4:	4b0d      	ldr	r3, [pc, #52]	@ (80027dc <timeFormatSwitchISR+0x44>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2210      	movs	r2, #16
 80027aa:	0011      	movs	r1, r2
 80027ac:	0018      	movs	r0, r3
 80027ae:	f001 fd49 	bl	8004244 <HAL_GPIO_ReadPin>
 80027b2:	0003      	movs	r3, r0
 80027b4:	001a      	movs	r2, r3
 80027b6:	4b0a      	ldr	r3, [pc, #40]	@ (80027e0 <timeFormatSwitchISR+0x48>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d103      	bne.n	80027c6 <timeFormatSwitchISR+0x2e>
	  userTimeFormat = RTC_HOURFORMAT_12;
 80027be:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <timeFormatSwitchISR+0x4c>)
 80027c0:	2240      	movs	r2, #64	@ 0x40
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	e002      	b.n	80027cc <timeFormatSwitchISR+0x34>
	}
	else {
	  userTimeFormat = RTC_HOURFORMAT_24;
 80027c6:	4b07      	ldr	r3, [pc, #28]	@ (80027e4 <timeFormatSwitchISR+0x4c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
	}

	updateAndDisplayTime();
 80027cc:	f7ff fc5a 	bl	8002084 <updateAndDisplayTime>

	return halRet;
 80027d0:	1dfb      	adds	r3, r7, #7
 80027d2:	781b      	ldrb	r3, [r3, #0]

}
 80027d4:	0018      	movs	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b002      	add	sp, #8
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000008 	.word	0x20000008
 80027e0:	20000040 	.word	0x20000040
 80027e4:	200000e8 	.word	0x200000e8

080027e8 <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 80027ec:	4b15      	ldr	r3, [pc, #84]	@ (8002844 <alarmHourInc+0x5c>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b0b      	cmp	r3, #11
 80027f2:	d903      	bls.n	80027fc <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 80027f4:	4b13      	ldr	r3, [pc, #76]	@ (8002844 <alarmHourInc+0x5c>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	e01e      	b.n	800283a <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 80027fc:	4b11      	ldr	r3, [pc, #68]	@ (8002844 <alarmHourInc+0x5c>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b0b      	cmp	r3, #11
 8002802:	d10e      	bne.n	8002822 <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8002804:	4b0f      	ldr	r3, [pc, #60]	@ (8002844 <alarmHourInc+0x5c>)
 8002806:	78db      	ldrb	r3, [r3, #3]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d103      	bne.n	8002814 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800280c:	4b0d      	ldr	r3, [pc, #52]	@ (8002844 <alarmHourInc+0x5c>)
 800280e:	2201      	movs	r2, #1
 8002810:	70da      	strb	r2, [r3, #3]
 8002812:	e002      	b.n	800281a <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002814:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <alarmHourInc+0x5c>)
 8002816:	2200      	movs	r2, #0
 8002818:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 800281a:	4b0a      	ldr	r3, [pc, #40]	@ (8002844 <alarmHourInc+0x5c>)
 800281c:	220c      	movs	r2, #12
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e00b      	b.n	800283a <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 8002822:	4b08      	ldr	r3, [pc, #32]	@ (8002844 <alarmHourInc+0x5c>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b0a      	cmp	r3, #10
 8002828:	d806      	bhi.n	8002838 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 800282a:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <alarmHourInc+0x5c>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	3301      	adds	r3, #1
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4b04      	ldr	r3, [pc, #16]	@ (8002844 <alarmHourInc+0x5c>)
 8002834:	701a      	strb	r2, [r3, #0]
 8002836:	e000      	b.n	800283a <alarmHourInc+0x52>
	}
	else {
		__NOP();
 8002838:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 800283a:	f000 f8e1 	bl	8002a00 <updateRTCBackupReg>

}
 800283e:	46c0      	nop			@ (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	200000d0 	.word	0x200000d0

08002848 <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 800284c:	4a1a      	ldr	r2, [pc, #104]	@ (80028b8 <currHourInc+0x70>)
 800284e:	491b      	ldr	r1, [pc, #108]	@ (80028bc <currHourInc+0x74>)
 8002850:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <currHourInc+0x78>)
 8002852:	0018      	movs	r0, r3
 8002854:	f7fe fe9e 	bl	8001594 <getRTCTime>

	if(currTime.Hours >= 12) {
 8002858:	4b18      	ldr	r3, [pc, #96]	@ (80028bc <currHourInc+0x74>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b0b      	cmp	r3, #11
 800285e:	d903      	bls.n	8002868 <currHourInc+0x20>
		currTime.Hours = 1;
 8002860:	4b16      	ldr	r3, [pc, #88]	@ (80028bc <currHourInc+0x74>)
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
 8002866:	e01e      	b.n	80028a6 <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 8002868:	4b14      	ldr	r3, [pc, #80]	@ (80028bc <currHourInc+0x74>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b0b      	cmp	r3, #11
 800286e:	d10e      	bne.n	800288e <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8002870:	4b12      	ldr	r3, [pc, #72]	@ (80028bc <currHourInc+0x74>)
 8002872:	78db      	ldrb	r3, [r3, #3]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d103      	bne.n	8002880 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8002878:	4b10      	ldr	r3, [pc, #64]	@ (80028bc <currHourInc+0x74>)
 800287a:	2201      	movs	r2, #1
 800287c:	70da      	strb	r2, [r3, #3]
 800287e:	e002      	b.n	8002886 <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002880:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <currHourInc+0x74>)
 8002882:	2200      	movs	r2, #0
 8002884:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 8002886:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <currHourInc+0x74>)
 8002888:	220c      	movs	r2, #12
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	e00b      	b.n	80028a6 <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 800288e:	4b0d      	ldr	r3, [pc, #52]	@ (80028c4 <currHourInc+0x7c>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b0a      	cmp	r3, #10
 8002894:	d806      	bhi.n	80028a4 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8002896:	4b09      	ldr	r3, [pc, #36]	@ (80028bc <currHourInc+0x74>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	3301      	adds	r3, #1
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4b07      	ldr	r3, [pc, #28]	@ (80028bc <currHourInc+0x74>)
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e000      	b.n	80028a6 <currHourInc+0x5e>
	}
	else {
		__NOP();
 80028a4:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 80028a6:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <currHourInc+0x74>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 80028ac:	4b03      	ldr	r3, [pc, #12]	@ (80028bc <currHourInc+0x74>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]

}
 80028b2:	46c0      	nop			@ (mov r8, r8)
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	200000cc 	.word	0x200000cc
 80028bc:	200000b8 	.word	0x200000b8
 80028c0:	200001d8 	.word	0x200001d8
 80028c4:	200000d0 	.word	0x200000d0

080028c8 <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 80028cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002900 <alarmMinuteInc+0x38>)
 80028ce:	785b      	ldrb	r3, [r3, #1]
 80028d0:	2b3a      	cmp	r3, #58	@ 0x3a
 80028d2:	d903      	bls.n	80028dc <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 80028d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002900 <alarmMinuteInc+0x38>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	705a      	strb	r2, [r3, #1]
 80028da:	e00b      	b.n	80028f4 <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 80028dc:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <alarmMinuteInc+0x38>)
 80028de:	785b      	ldrb	r3, [r3, #1]
 80028e0:	2b3a      	cmp	r3, #58	@ 0x3a
 80028e2:	d806      	bhi.n	80028f2 <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 80028e4:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <alarmMinuteInc+0x38>)
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	3301      	adds	r3, #1
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <alarmMinuteInc+0x38>)
 80028ee:	705a      	strb	r2, [r3, #1]
 80028f0:	e000      	b.n	80028f4 <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 80028f2:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 80028f4:	f000 f884 	bl	8002a00 <updateRTCBackupReg>

}
 80028f8:	46c0      	nop			@ (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			@ (mov r8, r8)
 8002900:	200000d0 	.word	0x200000d0

08002904 <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8002908:	4a11      	ldr	r2, [pc, #68]	@ (8002950 <currMinuteInc+0x4c>)
 800290a:	4912      	ldr	r1, [pc, #72]	@ (8002954 <currMinuteInc+0x50>)
 800290c:	4b12      	ldr	r3, [pc, #72]	@ (8002958 <currMinuteInc+0x54>)
 800290e:	0018      	movs	r0, r3
 8002910:	f7fe fe40 	bl	8001594 <getRTCTime>

	if(currTime.Minutes >= 59) {
 8002914:	4b0f      	ldr	r3, [pc, #60]	@ (8002954 <currMinuteInc+0x50>)
 8002916:	785b      	ldrb	r3, [r3, #1]
 8002918:	2b3a      	cmp	r3, #58	@ 0x3a
 800291a:	d903      	bls.n	8002924 <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 800291c:	4b0d      	ldr	r3, [pc, #52]	@ (8002954 <currMinuteInc+0x50>)
 800291e:	2200      	movs	r2, #0
 8002920:	705a      	strb	r2, [r3, #1]
 8002922:	e00b      	b.n	800293c <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 8002924:	4b0b      	ldr	r3, [pc, #44]	@ (8002954 <currMinuteInc+0x50>)
 8002926:	785b      	ldrb	r3, [r3, #1]
 8002928:	2b3a      	cmp	r3, #58	@ 0x3a
 800292a:	d806      	bhi.n	800293a <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 800292c:	4b09      	ldr	r3, [pc, #36]	@ (8002954 <currMinuteInc+0x50>)
 800292e:	785b      	ldrb	r3, [r3, #1]
 8002930:	3301      	adds	r3, #1
 8002932:	b2da      	uxtb	r2, r3
 8002934:	4b07      	ldr	r3, [pc, #28]	@ (8002954 <currMinuteInc+0x50>)
 8002936:	705a      	strb	r2, [r3, #1]
 8002938:	e000      	b.n	800293c <currMinuteInc+0x38>
	}
	else {
		__NOP();
 800293a:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 800293c:	4b05      	ldr	r3, [pc, #20]	@ (8002954 <currMinuteInc+0x50>)
 800293e:	2200      	movs	r2, #0
 8002940:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8002942:	4b04      	ldr	r3, [pc, #16]	@ (8002954 <currMinuteInc+0x50>)
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]

}
 8002948:	46c0      	nop			@ (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	200000cc 	.word	0x200000cc
 8002954:	200000b8 	.word	0x200000b8
 8002958:	200001d8 	.word	0x200001d8

0800295c <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 8002960:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <dispFault+0x1c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2280      	movs	r2, #128	@ 0x80
 8002966:	0151      	lsls	r1, r2, #5
 8002968:	2201      	movs	r2, #1
 800296a:	0018      	movs	r0, r3
 800296c:	f001 fc87 	bl	800427e <HAL_GPIO_WritePin>
}
 8002970:	46c0      	nop			@ (mov r8, r8)
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	46c0      	nop			@ (mov r8, r8)
 8002978:	20000028 	.word	0x20000028

0800297c <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8002982:	4b1c      	ldr	r3, [pc, #112]	@ (80029f4 <dispFailure+0x78>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0018      	movs	r0, r3
 8002988:	f005 fcde 	bl	8008348 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 800298c:	4b19      	ldr	r3, [pc, #100]	@ (80029f4 <dispFailure+0x78>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0018      	movs	r0, r3
 8002992:	f005 fc8d 	bl	80082b0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8002996:	4b17      	ldr	r3, [pc, #92]	@ (80029f4 <dispFailure+0x78>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299e:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80029a0:	1cfb      	adds	r3, r7, #3
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 80029a6:	4b13      	ldr	r3, [pc, #76]	@ (80029f4 <dispFailure+0x78>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	4a11      	ldr	r2, [pc, #68]	@ (80029f8 <dispFailure+0x7c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d9f6      	bls.n	80029a6 <dispFailure+0x2a>

			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 80029b8:	4b10      	ldr	r3, [pc, #64]	@ (80029fc <dispFailure+0x80>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2280      	movs	r2, #128	@ 0x80
 80029be:	0152      	lsls	r2, r2, #5
 80029c0:	0011      	movs	r1, r2
 80029c2:	0018      	movs	r0, r3
 80029c4:	f001 fc78 	bl	80042b8 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80029c8:	4b0a      	ldr	r3, [pc, #40]	@ (80029f4 <dispFailure+0x78>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80029d2:	1cfb      	adds	r3, r7, #3
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	1e5a      	subs	r2, r3, #1
 80029d8:	4193      	sbcs	r3, r2
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2201      	movs	r2, #1
 80029de:	4053      	eors	r3, r2
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	001a      	movs	r2, r3
 80029e4:	1cfb      	adds	r3, r7, #3
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	2101      	movs	r1, #1
 80029ec:	400a      	ands	r2, r1
 80029ee:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 80029f0:	e7d9      	b.n	80029a6 <dispFailure+0x2a>
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	2000006c 	.word	0x2000006c
 80029f8:	00003ffe 	.word	0x00003ffe
 80029fc:	20000028 	.word	0x20000028

08002a00 <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8002a04:	4b0e      	ldr	r3, [pc, #56]	@ (8002a40 <updateRTCBackupReg+0x40>)
 8002a06:	6819      	ldr	r1, [r3, #0]
 8002a08:	4b0e      	ldr	r3, [pc, #56]	@ (8002a44 <updateRTCBackupReg+0x44>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	001a      	movs	r2, r3
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a48 <updateRTCBackupReg+0x48>)
 8002a10:	0018      	movs	r0, r3
 8002a12:	f004 fc9c 	bl	800734e <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8002a16:	4b0d      	ldr	r3, [pc, #52]	@ (8002a4c <updateRTCBackupReg+0x4c>)
 8002a18:	6819      	ldr	r1, [r3, #0]
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <updateRTCBackupReg+0x44>)
 8002a1c:	785b      	ldrb	r3, [r3, #1]
 8002a1e:	001a      	movs	r2, r3
 8002a20:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <updateRTCBackupReg+0x48>)
 8002a22:	0018      	movs	r0, r3
 8002a24:	f004 fc93 	bl	800734e <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8002a28:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <updateRTCBackupReg+0x50>)
 8002a2a:	6819      	ldr	r1, [r3, #0]
 8002a2c:	4b05      	ldr	r3, [pc, #20]	@ (8002a44 <updateRTCBackupReg+0x44>)
 8002a2e:	78db      	ldrb	r3, [r3, #3]
 8002a30:	001a      	movs	r2, r3
 8002a32:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <updateRTCBackupReg+0x48>)
 8002a34:	0018      	movs	r0, r3
 8002a36:	f004 fc8a 	bl	800734e <HAL_RTCEx_BKUPWrite>

}
 8002a3a:	46c0      	nop			@ (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	200000e4 	.word	0x200000e4
 8002a44:	200000d0 	.word	0x200000d0
 8002a48:	200001d8 	.word	0x200001d8
 8002a4c:	20000034 	.word	0x20000034
 8002a50:	20000038 	.word	0x20000038

08002a54 <conv2Mil>:

/*
 * Converts the time in an AM/PM RTC time to 24-hour time
 * Returns this time in an RTC Time Def object
 */
RTC_TimeTypeDef conv2Mil(RTC_TimeTypeDef *oldTime) {
 8002a54:	b5b0      	push	{r4, r5, r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]

	RTC_TimeTypeDef convertedTime = *oldTime;
 8002a5e:	250c      	movs	r5, #12
 8002a60:	197b      	adds	r3, r7, r5
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a66:	c313      	stmia	r3!, {r0, r1, r4}
 8002a68:	ca03      	ldmia	r2!, {r0, r1}
 8002a6a:	c303      	stmia	r3!, {r0, r1}

	// If we are in PM, increment hours by 12 (but not if it is 12 p.m.)
	if(oldTime->TimeFormat == RTC_HOURFORMAT12_PM && oldTime->Hours != 12) {
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	78db      	ldrb	r3, [r3, #3]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d10a      	bne.n	8002a8a <conv2Mil+0x36>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b0c      	cmp	r3, #12
 8002a7a:	d006      	beq.n	8002a8a <conv2Mil+0x36>
		convertedTime.Hours += 12;
 8002a7c:	197b      	adds	r3, r7, r5
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	330c      	adds	r3, #12
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	197b      	adds	r3, r7, r5
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	e00b      	b.n	8002aa2 <conv2Mil+0x4e>
	}
	// If we are in AM and the hours are 12, set hours to 0.
	else if(oldTime->TimeFormat == RTC_HOURFORMAT12_AM && oldTime->Hours == 12) {
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	78db      	ldrb	r3, [r3, #3]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d107      	bne.n	8002aa2 <conv2Mil+0x4e>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b0c      	cmp	r3, #12
 8002a98:	d103      	bne.n	8002aa2 <conv2Mil+0x4e>
		convertedTime.Hours = 0;
 8002a9a:	230c      	movs	r3, #12
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
	else { // No change

	}

	// Make the update and display time function think that it is AM always
	convertedTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002aa2:	210c      	movs	r1, #12
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	70da      	strb	r2, [r3, #3]

	return convertedTime;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	187a      	adds	r2, r7, r1
 8002aae:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ab0:	c313      	stmia	r3!, {r0, r1, r4}
 8002ab2:	ca03      	ldmia	r2!, {r0, r1}
 8002ab4:	c303      	stmia	r3!, {r0, r1}

}
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b008      	add	sp, #32
 8002abc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002ac0 <startAudioStream>:

/*
 * Begins DMA streams to pull data from memory, process data, and push to i2s amplifier.
 */
void startAudioStream(void) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0

	// Pre-fill TX buffer
	fillTxBuffer(0);
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f000 f839 	bl	8002b3c <fillTxBuffer>
	fillTxBuffer(BUFFER_SIZE);
 8002aca:	2040      	movs	r0, #64	@ 0x40
 8002acc:	f000 f836 	bl	8002b3c <fillTxBuffer>

	// Start TX DMA stream
	HAL_I2S_Transmit_DMA(&hi2s1, i2sTxBuff, BUFFER_SIZE * 2);
 8002ad0:	4904      	ldr	r1, [pc, #16]	@ (8002ae4 <startAudioStream+0x24>)
 8002ad2:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <startAudioStream+0x28>)
 8002ad4:	2280      	movs	r2, #128	@ 0x80
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f002 fb6e 	bl	80051b8 <HAL_I2S_Transmit_DMA>
	// Enable Amplifier
//	NAU8315YG_AmpEnable(&i2sAmp);

	// Interrupts will take care of the rest.

}
 8002adc:	46c0      	nop			@ (mov r8, r8)
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	20000494 	.word	0x20000494
 8002ae8:	20000140 	.word	0x20000140

08002aec <stopAudioStream>:

/*
 * Halts DMA streams
 */
void stopAudioStream(void) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0

	// Disable Amplifier
	NAU8315YG_AmpDisable(&i2sAmp);
 8002af0:	4b05      	ldr	r3, [pc, #20]	@ (8002b08 <stopAudioStream+0x1c>)
 8002af2:	0018      	movs	r0, r3
 8002af4:	f7fd ff5a 	bl	80009ac <NAU8315YG_AmpDisable>

	// Stop DMA Stream
	HAL_I2S_DMAStop(&hi2s1);
 8002af8:	4b04      	ldr	r3, [pc, #16]	@ (8002b0c <stopAudioStream+0x20>)
 8002afa:	0018      	movs	r0, r3
 8002afc:	f002 fc08 	bl	8005310 <HAL_I2S_DMAStop>

}
 8002b00:	46c0      	nop			@ (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			@ (mov r8, r8)
 8002b08:	20000444 	.word	0x20000444
 8002b0c:	20000140 	.word	0x20000140

08002b10 <HAL_I2S_TxHalfCpltCallback>:

/*
 * DMA completion callbacks
 */

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

	// Fill first half of i2s TX buffer
	fillTxBuffer(0);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f000 f80f 	bl	8002b3c <fillTxBuffer>


}
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b002      	add	sp, #8
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]

	// Fill second half of i2s transmit buffer
	fillTxBuffer(BUFFER_SIZE);
 8002b2e:	2040      	movs	r0, #64	@ 0x40
 8002b30:	f000 f804 	bl	8002b3c <fillTxBuffer>


}
 8002b34:	46c0      	nop			@ (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b002      	add	sp, #8
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <fillTxBuffer>:

void fillTxBuffer(uint16_t offset) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	0002      	movs	r2, r0
 8002b44:	1dbb      	adds	r3, r7, #6
 8002b46:	801a      	strh	r2, [r3, #0]

	// Read next chunk of audio data, increment flash read address
	W25Q_readData(&spiFlash, flashReadAddr, BUFFER_SIZE, spiRxBuff);
 8002b48:	4b20      	ldr	r3, [pc, #128]	@ (8002bcc <fillTxBuffer+0x90>)
 8002b4a:	6819      	ldr	r1, [r3, #0]
 8002b4c:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <fillTxBuffer+0x94>)
 8002b4e:	4821      	ldr	r0, [pc, #132]	@ (8002bd4 <fillTxBuffer+0x98>)
 8002b50:	2240      	movs	r2, #64	@ 0x40
 8002b52:	f7fe fb95 	bl	8001280 <W25Q_readData>
	flashReadAddr += BUFFER_SIZE;
 8002b56:	4b1d      	ldr	r3, [pc, #116]	@ (8002bcc <fillTxBuffer+0x90>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3340      	adds	r3, #64	@ 0x40
 8002b5c:	001a      	movs	r2, r3
 8002b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bcc <fillTxBuffer+0x90>)
 8002b60:	601a      	str	r2, [r3, #0]

	// Playing all of a mono file canS-mono-reduced
	 for(uint16_t i = 0; i < BUFFER_SIZE; i += 2) {
 8002b62:	230e      	movs	r3, #14
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	2200      	movs	r2, #0
 8002b68:	801a      	strh	r2, [r3, #0]
 8002b6a:	e01d      	b.n	8002ba8 <fillTxBuffer+0x6c>

		 i2sTxBuff[offset + (i) + 1] = (spiRxBuff[i + 1] << 8) | spiRxBuff[i];
 8002b6c:	200e      	movs	r0, #14
 8002b6e:	183b      	adds	r3, r7, r0
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	3301      	adds	r3, #1
 8002b74:	4a16      	ldr	r2, [pc, #88]	@ (8002bd0 <fillTxBuffer+0x94>)
 8002b76:	5cd3      	ldrb	r3, [r2, r3]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	b21a      	sxth	r2, r3
 8002b7c:	183b      	adds	r3, r7, r0
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	4913      	ldr	r1, [pc, #76]	@ (8002bd0 <fillTxBuffer+0x94>)
 8002b82:	5ccb      	ldrb	r3, [r1, r3]
 8002b84:	b21b      	sxth	r3, r3
 8002b86:	4313      	orrs	r3, r2
 8002b88:	b219      	sxth	r1, r3
 8002b8a:	1dbb      	adds	r3, r7, #6
 8002b8c:	881a      	ldrh	r2, [r3, #0]
 8002b8e:	183b      	adds	r3, r7, r0
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	18d3      	adds	r3, r2, r3
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	b289      	uxth	r1, r1
 8002b98:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd8 <fillTxBuffer+0x9c>)
 8002b9a:	0052      	lsls	r2, r2, #1
 8002b9c:	52d1      	strh	r1, [r2, r3]
	 for(uint16_t i = 0; i < BUFFER_SIZE; i += 2) {
 8002b9e:	183b      	adds	r3, r7, r0
 8002ba0:	183a      	adds	r2, r7, r0
 8002ba2:	8812      	ldrh	r2, [r2, #0]
 8002ba4:	3202      	adds	r2, #2
 8002ba6:	801a      	strh	r2, [r3, #0]
 8002ba8:	230e      	movs	r3, #14
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bb0:	d9dc      	bls.n	8002b6c <fillTxBuffer+0x30>

	 }


	// If we have reached the end of the audio clip, reset flash read address
	if(flashReadAddr > audioAddr_END) {
 8002bb2:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <fillTxBuffer+0x90>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a09      	ldr	r2, [pc, #36]	@ (8002bdc <fillTxBuffer+0xa0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d902      	bls.n	8002bc2 <fillTxBuffer+0x86>
		flashReadAddr = initialMemoryOffset;
 8002bbc:	4b03      	ldr	r3, [pc, #12]	@ (8002bcc <fillTxBuffer+0x90>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
	}


}
 8002bc2:	46c0      	nop			@ (mov r8, r8)
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	b004      	add	sp, #16
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	46c0      	nop			@ (mov r8, r8)
 8002bcc:	20000594 	.word	0x20000594
 8002bd0:	20000454 	.word	0x20000454
 8002bd4:	2000041c 	.word	0x2000041c
 8002bd8:	20000494 	.word	0x20000494
 8002bdc:	00890e0e 	.word	0x00890e0e

08002be0 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]

	//TEST?
	__NOP();
 8002be8:	46c0      	nop			@ (mov r8, r8)


}
 8002bea:	46c0      	nop			@ (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b002      	add	sp, #8
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bf6:	b672      	cpsid	i
}
 8002bf8:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bfa:	46c0      	nop			@ (mov r8, r8)
 8002bfc:	e7fd      	b.n	8002bfa <Error_Handler+0x8>
	...

08002c00 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8002c00:	b5b0      	push	{r4, r5, r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	0005      	movs	r5, r0
 8002c08:	000c      	movs	r4, r1
 8002c0a:	0010      	movs	r0, r2
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	1dbb      	adds	r3, r7, #6
 8002c10:	1c2a      	adds	r2, r5, #0
 8002c12:	801a      	strh	r2, [r3, #0]
 8002c14:	1d3b      	adds	r3, r7, #4
 8002c16:	1c22      	adds	r2, r4, #0
 8002c18:	801a      	strh	r2, [r3, #0]
 8002c1a:	1cbb      	adds	r3, r7, #2
 8002c1c:	1c02      	adds	r2, r0, #0
 8002c1e:	801a      	strh	r2, [r3, #0]
 8002c20:	003b      	movs	r3, r7
 8002c22:	1c0a      	adds	r2, r1, #0
 8002c24:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8002c26:	4b7c      	ldr	r3, [pc, #496]	@ (8002e18 <sevSeg_Init+0x218>)
 8002c28:	1dba      	adds	r2, r7, #6
 8002c2a:	8812      	ldrh	r2, [r2, #0]
 8002c2c:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8002c2e:	4b7b      	ldr	r3, [pc, #492]	@ (8002e1c <sevSeg_Init+0x21c>)
 8002c30:	1d3a      	adds	r2, r7, #4
 8002c32:	8812      	ldrh	r2, [r2, #0]
 8002c34:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8002c36:	4b7a      	ldr	r3, [pc, #488]	@ (8002e20 <sevSeg_Init+0x220>)
 8002c38:	1cba      	adds	r2, r7, #2
 8002c3a:	8812      	ldrh	r2, [r2, #0]
 8002c3c:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8002c3e:	4b79      	ldr	r3, [pc, #484]	@ (8002e24 <sevSeg_Init+0x224>)
 8002c40:	003a      	movs	r2, r7
 8002c42:	8812      	ldrh	r2, [r2, #0]
 8002c44:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8002c46:	4a78      	ldr	r2, [pc, #480]	@ (8002e28 <sevSeg_Init+0x228>)
 8002c48:	2330      	movs	r3, #48	@ 0x30
 8002c4a:	18fb      	adds	r3, r7, r3
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8002c50:	4a76      	ldr	r2, [pc, #472]	@ (8002e2c <sevSeg_Init+0x22c>)
 8002c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c54:	0010      	movs	r0, r2
 8002c56:	0019      	movs	r1, r3
 8002c58:	234c      	movs	r3, #76	@ 0x4c
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	f006 fb6a 	bl	8009334 <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8002c60:	4b73      	ldr	r3, [pc, #460]	@ (8002e30 <sevSeg_Init+0x230>)
 8002c62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c64:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	e00b      	b.n	8002c84 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c72:	18d3      	adds	r3, r2, r3
 8002c74:	6819      	ldr	r1, [r3, #0]
 8002c76:	4b6f      	ldr	r3, [pc, #444]	@ (8002e34 <sevSeg_Init+0x234>)
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3301      	adds	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	ddf0      	ble.n	8002c6c <sevSeg_Init+0x6c>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8002c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e34 <sevSeg_Init+0x234>)
 8002c8c:	6918      	ldr	r0, [r3, #16]
 8002c8e:	4b66      	ldr	r3, [pc, #408]	@ (8002e28 <sevSeg_Init+0x228>)
 8002c90:	8819      	ldrh	r1, [r3, #0]
 8002c92:	4b69      	ldr	r3, [pc, #420]	@ (8002e38 <sevSeg_Init+0x238>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	001a      	movs	r2, r3
 8002c98:	f001 faf1 	bl	800427e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8002c9c:	4b65      	ldr	r3, [pc, #404]	@ (8002e34 <sevSeg_Init+0x234>)
 8002c9e:	6918      	ldr	r0, [r3, #16]
 8002ca0:	4b61      	ldr	r3, [pc, #388]	@ (8002e28 <sevSeg_Init+0x228>)
 8002ca2:	8819      	ldrh	r1, [r3, #0]
 8002ca4:	4b64      	ldr	r3, [pc, #400]	@ (8002e38 <sevSeg_Init+0x238>)
 8002ca6:	785b      	ldrb	r3, [r3, #1]
 8002ca8:	001a      	movs	r2, r3
 8002caa:	f001 fae8 	bl	800427e <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002cae:	4b61      	ldr	r3, [pc, #388]	@ (8002e34 <sevSeg_Init+0x234>)
 8002cb0:	6898      	ldr	r0, [r3, #8]
 8002cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e20 <sevSeg_Init+0x220>)
 8002cb4:	8819      	ldrh	r1, [r3, #0]
 8002cb6:	4b60      	ldr	r3, [pc, #384]	@ (8002e38 <sevSeg_Init+0x238>)
 8002cb8:	785b      	ldrb	r3, [r3, #1]
 8002cba:	001a      	movs	r2, r3
 8002cbc:	f001 fadf 	bl	800427e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002cc0:	4b5c      	ldr	r3, [pc, #368]	@ (8002e34 <sevSeg_Init+0x234>)
 8002cc2:	6898      	ldr	r0, [r3, #8]
 8002cc4:	4b56      	ldr	r3, [pc, #344]	@ (8002e20 <sevSeg_Init+0x220>)
 8002cc6:	8819      	ldrh	r1, [r3, #0]
 8002cc8:	4b5b      	ldr	r3, [pc, #364]	@ (8002e38 <sevSeg_Init+0x238>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	001a      	movs	r2, r3
 8002cce:	f001 fad6 	bl	800427e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8002cd2:	4b58      	ldr	r3, [pc, #352]	@ (8002e34 <sevSeg_Init+0x234>)
 8002cd4:	68d8      	ldr	r0, [r3, #12]
 8002cd6:	4b53      	ldr	r3, [pc, #332]	@ (8002e24 <sevSeg_Init+0x224>)
 8002cd8:	8819      	ldrh	r1, [r3, #0]
 8002cda:	4b57      	ldr	r3, [pc, #348]	@ (8002e38 <sevSeg_Init+0x238>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	001a      	movs	r2, r3
 8002ce0:	f001 facd 	bl	800427e <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(50);
 8002ce4:	2032      	movs	r0, #50	@ 0x32
 8002ce6:	f000 f95f 	bl	8002fa8 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8002cea:	2308      	movs	r3, #8
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	4a53      	ldr	r2, [pc, #332]	@ (8002e3c <sevSeg_Init+0x23c>)
 8002cf0:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	e038      	b.n	8002d6a <sevSeg_Init+0x16a>

		sendByte = hofSymb[i];
 8002cf8:	231b      	movs	r3, #27
 8002cfa:	18fb      	adds	r3, r7, r3
 8002cfc:	2208      	movs	r2, #8
 8002cfe:	18b9      	adds	r1, r7, r2
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	188a      	adds	r2, r1, r2
 8002d04:	7812      	ldrb	r2, [r2, #0]
 8002d06:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	e027      	b.n	8002d5e <sevSeg_Init+0x15e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8002d0e:	4b49      	ldr	r3, [pc, #292]	@ (8002e34 <sevSeg_Init+0x234>)
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	4b41      	ldr	r3, [pc, #260]	@ (8002e18 <sevSeg_Init+0x218>)
 8002d14:	8819      	ldrh	r1, [r3, #0]
 8002d16:	241b      	movs	r4, #27
 8002d18:	193b      	adds	r3, r7, r4
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	4013      	ands	r3, r2
 8002d20:	4a45      	ldr	r2, [pc, #276]	@ (8002e38 <sevSeg_Init+0x238>)
 8002d22:	5cd3      	ldrb	r3, [r2, r3]
 8002d24:	001a      	movs	r2, r3
 8002d26:	f001 faaa 	bl	800427e <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8002d2a:	4b42      	ldr	r3, [pc, #264]	@ (8002e34 <sevSeg_Init+0x234>)
 8002d2c:	6858      	ldr	r0, [r3, #4]
 8002d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e1c <sevSeg_Init+0x21c>)
 8002d30:	8819      	ldrh	r1, [r3, #0]
 8002d32:	4b41      	ldr	r3, [pc, #260]	@ (8002e38 <sevSeg_Init+0x238>)
 8002d34:	785b      	ldrb	r3, [r3, #1]
 8002d36:	001a      	movs	r2, r3
 8002d38:	f001 faa1 	bl	800427e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8002d3c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e34 <sevSeg_Init+0x234>)
 8002d3e:	6858      	ldr	r0, [r3, #4]
 8002d40:	4b36      	ldr	r3, [pc, #216]	@ (8002e1c <sevSeg_Init+0x21c>)
 8002d42:	8819      	ldrh	r1, [r3, #0]
 8002d44:	4b3c      	ldr	r3, [pc, #240]	@ (8002e38 <sevSeg_Init+0x238>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	001a      	movs	r2, r3
 8002d4a:	f001 fa98 	bl	800427e <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8002d4e:	193b      	adds	r3, r7, r4
 8002d50:	193a      	adds	r2, r7, r4
 8002d52:	7812      	ldrb	r2, [r2, #0]
 8002d54:	0852      	lsrs	r2, r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b07      	cmp	r3, #7
 8002d62:	ddd4      	ble.n	8002d0e <sevSeg_Init+0x10e>
	for(int i = 0; i <= 3; i++) {
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	3301      	adds	r3, #1
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	ddc3      	ble.n	8002cf8 <sevSeg_Init+0xf8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002d70:	4b30      	ldr	r3, [pc, #192]	@ (8002e34 <sevSeg_Init+0x234>)
 8002d72:	6898      	ldr	r0, [r3, #8]
 8002d74:	4b2a      	ldr	r3, [pc, #168]	@ (8002e20 <sevSeg_Init+0x220>)
 8002d76:	8819      	ldrh	r1, [r3, #0]
 8002d78:	4b2f      	ldr	r3, [pc, #188]	@ (8002e38 <sevSeg_Init+0x238>)
 8002d7a:	785b      	ldrb	r3, [r3, #1]
 8002d7c:	001a      	movs	r2, r3
 8002d7e:	f001 fa7e 	bl	800427e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002d82:	4b2c      	ldr	r3, [pc, #176]	@ (8002e34 <sevSeg_Init+0x234>)
 8002d84:	6898      	ldr	r0, [r3, #8]
 8002d86:	4b26      	ldr	r3, [pc, #152]	@ (8002e20 <sevSeg_Init+0x220>)
 8002d88:	8819      	ldrh	r1, [r3, #0]
 8002d8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002e38 <sevSeg_Init+0x238>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	001a      	movs	r2, r3
 8002d90:	f001 fa75 	bl	800427e <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8002d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d96:	0018      	movs	r0, r3
 8002d98:	f005 fad6 	bl	8008348 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f005 fa86 	bl	80082b0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8002da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8002dac:	46c0      	nop			@ (mov r8, r8)
 8002dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1ad2      	subs	r2, r2, r3
 8002db8:	2380      	movs	r3, #128	@ 0x80
 8002dba:	01db      	lsls	r3, r3, #7
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d3f6      	bcc.n	8002dae <sevSeg_Init+0x1ae>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f005 fac0 	bl	8008348 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8002dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e34 <sevSeg_Init+0x234>)
 8002dca:	6918      	ldr	r0, [r3, #16]
 8002dcc:	4b16      	ldr	r3, [pc, #88]	@ (8002e28 <sevSeg_Init+0x228>)
 8002dce:	8819      	ldrh	r1, [r3, #0]
 8002dd0:	4b19      	ldr	r3, [pc, #100]	@ (8002e38 <sevSeg_Init+0x238>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	001a      	movs	r2, r3
 8002dd6:	f001 fa52 	bl	800427e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8002dda:	4b16      	ldr	r3, [pc, #88]	@ (8002e34 <sevSeg_Init+0x234>)
 8002ddc:	6918      	ldr	r0, [r3, #16]
 8002dde:	4b12      	ldr	r3, [pc, #72]	@ (8002e28 <sevSeg_Init+0x228>)
 8002de0:	8819      	ldrh	r1, [r3, #0]
 8002de2:	4b15      	ldr	r3, [pc, #84]	@ (8002e38 <sevSeg_Init+0x238>)
 8002de4:	785b      	ldrb	r3, [r3, #1]
 8002de6:	001a      	movs	r2, r3
 8002de8:	f001 fa49 	bl	800427e <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002dec:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <sevSeg_Init+0x234>)
 8002dee:	6898      	ldr	r0, [r3, #8]
 8002df0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <sevSeg_Init+0x220>)
 8002df2:	8819      	ldrh	r1, [r3, #0]
 8002df4:	4b10      	ldr	r3, [pc, #64]	@ (8002e38 <sevSeg_Init+0x238>)
 8002df6:	785b      	ldrb	r3, [r3, #1]
 8002df8:	001a      	movs	r2, r3
 8002dfa:	f001 fa40 	bl	800427e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002e34 <sevSeg_Init+0x234>)
 8002e00:	6898      	ldr	r0, [r3, #8]
 8002e02:	4b07      	ldr	r3, [pc, #28]	@ (8002e20 <sevSeg_Init+0x220>)
 8002e04:	8819      	ldrh	r1, [r3, #0]
 8002e06:	4b0c      	ldr	r3, [pc, #48]	@ (8002e38 <sevSeg_Init+0x238>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	001a      	movs	r2, r3
 8002e0c:	f001 fa37 	bl	800427e <HAL_GPIO_WritePin>

}
 8002e10:	46c0      	nop			@ (mov r8, r8)
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b008      	add	sp, #32
 8002e16:	bdb0      	pop	{r4, r5, r7, pc}
 8002e18:	20000598 	.word	0x20000598
 8002e1c:	2000059a 	.word	0x2000059a
 8002e20:	2000059c 	.word	0x2000059c
 8002e24:	2000059e 	.word	0x2000059e
 8002e28:	200005a0 	.word	0x200005a0
 8002e2c:	200005a4 	.word	0x200005a4
 8002e30:	200005f0 	.word	0x200005f0
 8002e34:	20000074 	.word	0x20000074
 8002e38:	20000088 	.word	0x20000088
 8002e3c:	471d3700 	.word	0x471d3700

08002e40 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime, uint8_t userAlarmEnable) {
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	000a      	movs	r2, r1
 8002e4a:	1cfb      	adds	r3, r7, #3
 8002e4c:	701a      	strb	r2, [r3, #0]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	210a      	movs	r1, #10
 8002e54:	0018      	movs	r0, r3
 8002e56:	f7fd f955 	bl	8000104 <__udivsi3>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	2408      	movs	r4, #8
 8002e60:	193b      	adds	r3, r7, r4
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	210a      	movs	r1, #10
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f7fd f9d0 	bl	8000210 <__aeabi_uidivmod>
 8002e70:	000b      	movs	r3, r1
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	193b      	adds	r3, r7, r4
 8002e76:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002e7c:	210a      	movs	r1, #10
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f7fd f940 	bl	8000104 <__udivsi3>
 8002e84:	0003      	movs	r3, r0
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	193b      	adds	r3, r7, r4
 8002e8a:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002e90:	210a      	movs	r1, #10
 8002e92:	0018      	movs	r0, r3
 8002e94:	f7fd f9bc 	bl	8000210 <__aeabi_uidivmod>
 8002e98:	000b      	movs	r3, r1
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	193b      	adds	r3, r7, r4
 8002e9e:	70da      	strb	r2, [r3, #3]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 3; i >= 0; i--) {
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	e05b      	b.n	8002f5e <sevSeg_updateDigits+0x11e>

		sendByte = dispDigits[sendTime[i]];
 8002ea6:	2308      	movs	r3, #8
 8002ea8:	18fa      	adds	r2, r7, r3
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	18d3      	adds	r3, r2, r3
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	2017      	movs	r0, #23
 8002eb4:	183b      	adds	r3, r7, r0
 8002eb6:	4a36      	ldr	r2, [pc, #216]	@ (8002f90 <sevSeg_updateDigits+0x150>)
 8002eb8:	5c52      	ldrb	r2, [r2, r1]
 8002eba:	701a      	strb	r2, [r3, #0]

		// If tenth's place of hour and zero, disable this segment
		if( (i == 0) && (sendByte == dispDigits[0])) {
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d107      	bne.n	8002ed2 <sevSeg_updateDigits+0x92>
 8002ec2:	2242      	movs	r2, #66	@ 0x42
 8002ec4:	183b      	adds	r3, r7, r0
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d102      	bne.n	8002ed2 <sevSeg_updateDigits+0x92>
			sendByte = 0xFF;
 8002ecc:	183b      	adds	r3, r7, r0
 8002ece:	22ff      	movs	r2, #255	@ 0xff
 8002ed0:	701a      	strb	r2, [r3, #0]
		}

		// If one's place of hour, set decimal point based on AM/PM.
		// OR
		// If one's place of minute, set decimal place based on user alarm enabled
		if( ((i == 1) && (updateTime->TimeFormat == RTC_HOURFORMAT12_PM)) ||
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d103      	bne.n	8002ee0 <sevSeg_updateDigits+0xa0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	78db      	ldrb	r3, [r3, #3]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d006      	beq.n	8002eee <sevSeg_updateDigits+0xae>
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d10a      	bne.n	8002efc <sevSeg_updateDigits+0xbc>
			((i == 3) && userAlarmEnable)	) {
 8002ee6:	1cfb      	adds	r3, r7, #3
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d006      	beq.n	8002efc <sevSeg_updateDigits+0xbc>
			sendByte = (sendByte & 0b11111101);
 8002eee:	2217      	movs	r2, #23
 8002ef0:	18bb      	adds	r3, r7, r2
 8002ef2:	18ba      	adds	r2, r7, r2
 8002ef4:	7812      	ldrb	r2, [r2, #0]
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	438a      	bics	r2, r1
 8002efa:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	e027      	b.n	8002f52 <sevSeg_updateDigits+0x112>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[(sendByte & 1)]);
 8002f02:	4b24      	ldr	r3, [pc, #144]	@ (8002f94 <sevSeg_updateDigits+0x154>)
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	4b24      	ldr	r3, [pc, #144]	@ (8002f98 <sevSeg_updateDigits+0x158>)
 8002f08:	8819      	ldrh	r1, [r3, #0]
 8002f0a:	2417      	movs	r4, #23
 8002f0c:	193b      	adds	r3, r7, r4
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2201      	movs	r2, #1
 8002f12:	4013      	ands	r3, r2
 8002f14:	4a21      	ldr	r2, [pc, #132]	@ (8002f9c <sevSeg_updateDigits+0x15c>)
 8002f16:	5cd3      	ldrb	r3, [r2, r3]
 8002f18:	001a      	movs	r2, r3
 8002f1a:	f001 f9b0 	bl	800427e <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002f94 <sevSeg_updateDigits+0x154>)
 8002f20:	6858      	ldr	r0, [r3, #4]
 8002f22:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa0 <sevSeg_updateDigits+0x160>)
 8002f24:	8819      	ldrh	r1, [r3, #0]
 8002f26:	4b1d      	ldr	r3, [pc, #116]	@ (8002f9c <sevSeg_updateDigits+0x15c>)
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	001a      	movs	r2, r3
 8002f2c:	f001 f9a7 	bl	800427e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8002f30:	4b18      	ldr	r3, [pc, #96]	@ (8002f94 <sevSeg_updateDigits+0x154>)
 8002f32:	6858      	ldr	r0, [r3, #4]
 8002f34:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa0 <sevSeg_updateDigits+0x160>)
 8002f36:	8819      	ldrh	r1, [r3, #0]
 8002f38:	4b18      	ldr	r3, [pc, #96]	@ (8002f9c <sevSeg_updateDigits+0x15c>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	001a      	movs	r2, r3
 8002f3e:	f001 f99e 	bl	800427e <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8002f42:	193b      	adds	r3, r7, r4
 8002f44:	193a      	adds	r2, r7, r4
 8002f46:	7812      	ldrb	r2, [r2, #0]
 8002f48:	0852      	lsrs	r2, r2, #1
 8002f4a:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b07      	cmp	r3, #7
 8002f56:	ddd4      	ble.n	8002f02 <sevSeg_updateDigits+0xc2>
	for(int i = 3; i >= 0; i--) {
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	daa0      	bge.n	8002ea6 <sevSeg_updateDigits+0x66>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002f64:	4b0b      	ldr	r3, [pc, #44]	@ (8002f94 <sevSeg_updateDigits+0x154>)
 8002f66:	6898      	ldr	r0, [r3, #8]
 8002f68:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa4 <sevSeg_updateDigits+0x164>)
 8002f6a:	8819      	ldrh	r1, [r3, #0]
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f9c <sevSeg_updateDigits+0x15c>)
 8002f6e:	785b      	ldrb	r3, [r3, #1]
 8002f70:	001a      	movs	r2, r3
 8002f72:	f001 f984 	bl	800427e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002f76:	4b07      	ldr	r3, [pc, #28]	@ (8002f94 <sevSeg_updateDigits+0x154>)
 8002f78:	6898      	ldr	r0, [r3, #8]
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa4 <sevSeg_updateDigits+0x164>)
 8002f7c:	8819      	ldrh	r1, [r3, #0]
 8002f7e:	4b07      	ldr	r3, [pc, #28]	@ (8002f9c <sevSeg_updateDigits+0x15c>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	001a      	movs	r2, r3
 8002f84:	f001 f97b 	bl	800427e <HAL_GPIO_WritePin>

	return;
 8002f88:	46c0      	nop			@ (mov r8, r8)

}
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b007      	add	sp, #28
 8002f8e:	bd90      	pop	{r4, r7, pc}
 8002f90:	08009394 	.word	0x08009394
 8002f94:	20000074 	.word	0x20000074
 8002f98:	20000598 	.word	0x20000598
 8002f9c:	20000088 	.word	0x20000088
 8002fa0:	2000059a 	.word	0x2000059a
 8002fa4:	2000059c 	.word	0x2000059c

08002fa8 <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	0002      	movs	r2, r0
 8002fb0:	1dbb      	adds	r3, r7, #6
 8002fb2:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8002fb4:	4b20      	ldr	r3, [pc, #128]	@ (8003038 <sevSeg_setIntensity+0x90>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d105      	bne.n	8002fc8 <sevSeg_setIntensity+0x20>
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800303c <sevSeg_setIntensity+0x94>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	1dba      	adds	r2, r7, #6
 8002fc2:	8812      	ldrh	r2, [r2, #0]
 8002fc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fc6:	e02c      	b.n	8003022 <sevSeg_setIntensity+0x7a>
 8002fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003038 <sevSeg_setIntensity+0x90>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d105      	bne.n	8002fdc <sevSeg_setIntensity+0x34>
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800303c <sevSeg_setIntensity+0x94>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	1dbb      	adds	r3, r7, #6
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	6393      	str	r3, [r2, #56]	@ 0x38
 8002fda:	e022      	b.n	8003022 <sevSeg_setIntensity+0x7a>
 8002fdc:	4b16      	ldr	r3, [pc, #88]	@ (8003038 <sevSeg_setIntensity+0x90>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d105      	bne.n	8002ff0 <sevSeg_setIntensity+0x48>
 8002fe4:	4b15      	ldr	r3, [pc, #84]	@ (800303c <sevSeg_setIntensity+0x94>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	1dbb      	adds	r3, r7, #6
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002fee:	e018      	b.n	8003022 <sevSeg_setIntensity+0x7a>
 8002ff0:	4b11      	ldr	r3, [pc, #68]	@ (8003038 <sevSeg_setIntensity+0x90>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b0c      	cmp	r3, #12
 8002ff6:	d105      	bne.n	8003004 <sevSeg_setIntensity+0x5c>
 8002ff8:	4b10      	ldr	r3, [pc, #64]	@ (800303c <sevSeg_setIntensity+0x94>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	1dbb      	adds	r3, r7, #6
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	6413      	str	r3, [r2, #64]	@ 0x40
 8003002:	e00e      	b.n	8003022 <sevSeg_setIntensity+0x7a>
 8003004:	4b0c      	ldr	r3, [pc, #48]	@ (8003038 <sevSeg_setIntensity+0x90>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b10      	cmp	r3, #16
 800300a:	d105      	bne.n	8003018 <sevSeg_setIntensity+0x70>
 800300c:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <sevSeg_setIntensity+0x94>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	1dbb      	adds	r3, r7, #6
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	6593      	str	r3, [r2, #88]	@ 0x58
 8003016:	e004      	b.n	8003022 <sevSeg_setIntensity+0x7a>
 8003018:	4b08      	ldr	r3, [pc, #32]	@ (800303c <sevSeg_setIntensity+0x94>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	1dbb      	adds	r3, r7, #6
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 8003022:	4b05      	ldr	r3, [pc, #20]	@ (8003038 <sevSeg_setIntensity+0x90>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4b05      	ldr	r3, [pc, #20]	@ (800303c <sevSeg_setIntensity+0x94>)
 8003028:	0011      	movs	r1, r2
 800302a:	0018      	movs	r0, r3
 800302c:	f005 fa8c 	bl	8008548 <HAL_TIM_PWM_Start>

}
 8003030:	46c0      	nop			@ (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b002      	add	sp, #8
 8003036:	bd80      	pop	{r7, pc}
 8003038:	200005f0 	.word	0x200005f0
 800303c:	200005a4 	.word	0x200005a4

08003040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003046:	4b13      	ldr	r3, [pc, #76]	@ (8003094 <HAL_MspInit+0x54>)
 8003048:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800304a:	4b12      	ldr	r3, [pc, #72]	@ (8003094 <HAL_MspInit+0x54>)
 800304c:	2101      	movs	r1, #1
 800304e:	430a      	orrs	r2, r1
 8003050:	641a      	str	r2, [r3, #64]	@ 0x40
 8003052:	4b10      	ldr	r3, [pc, #64]	@ (8003094 <HAL_MspInit+0x54>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	2201      	movs	r2, #1
 8003058:	4013      	ands	r3, r2
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800305e:	4b0d      	ldr	r3, [pc, #52]	@ (8003094 <HAL_MspInit+0x54>)
 8003060:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003062:	4b0c      	ldr	r3, [pc, #48]	@ (8003094 <HAL_MspInit+0x54>)
 8003064:	2180      	movs	r1, #128	@ 0x80
 8003066:	0549      	lsls	r1, r1, #21
 8003068:	430a      	orrs	r2, r1
 800306a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800306c:	4b09      	ldr	r3, [pc, #36]	@ (8003094 <HAL_MspInit+0x54>)
 800306e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003070:	2380      	movs	r3, #128	@ 0x80
 8003072:	055b      	lsls	r3, r3, #21
 8003074:	4013      	ands	r3, r2
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800307a:	2200      	movs	r2, #0
 800307c:	2100      	movs	r1, #0
 800307e:	2004      	movs	r0, #4
 8003080:	f000 fc96 	bl	80039b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003084:	2004      	movs	r0, #4
 8003086:	f000 fca8 	bl	80039da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800308a:	46c0      	nop			@ (mov r8, r8)
 800308c:	46bd      	mov	sp, r7
 800308e:	b002      	add	sp, #8
 8003090:	bd80      	pop	{r7, pc}
 8003092:	46c0      	nop			@ (mov r8, r8)
 8003094:	40021000 	.word	0x40021000

08003098 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b095      	sub	sp, #84	@ 0x54
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	233c      	movs	r3, #60	@ 0x3c
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	0018      	movs	r0, r3
 80030a6:	2314      	movs	r3, #20
 80030a8:	001a      	movs	r2, r3
 80030aa:	2100      	movs	r1, #0
 80030ac:	f006 f916 	bl	80092dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030b0:	2414      	movs	r4, #20
 80030b2:	193b      	adds	r3, r7, r4
 80030b4:	0018      	movs	r0, r3
 80030b6:	2328      	movs	r3, #40	@ 0x28
 80030b8:	001a      	movs	r2, r3
 80030ba:	2100      	movs	r1, #0
 80030bc:	f006 f90e 	bl	80092dc <memset>
  if(hi2c->Instance==I2C1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a22      	ldr	r2, [pc, #136]	@ (8003150 <HAL_I2C_MspInit+0xb8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d13d      	bne.n	8003146 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030ca:	193b      	adds	r3, r7, r4
 80030cc:	2220      	movs	r2, #32
 80030ce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80030d0:	193b      	adds	r3, r7, r4
 80030d2:	2200      	movs	r2, #0
 80030d4:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030d6:	193b      	adds	r3, r7, r4
 80030d8:	0018      	movs	r0, r3
 80030da:	f002 ff93 	bl	8006004 <HAL_RCCEx_PeriphCLKConfig>
 80030de:	1e03      	subs	r3, r0, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80030e2:	f7ff fd86 	bl	8002bf2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003154 <HAL_I2C_MspInit+0xbc>)
 80030e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003154 <HAL_I2C_MspInit+0xbc>)
 80030ec:	2102      	movs	r1, #2
 80030ee:	430a      	orrs	r2, r1
 80030f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80030f2:	4b18      	ldr	r3, [pc, #96]	@ (8003154 <HAL_I2C_MspInit+0xbc>)
 80030f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f6:	2202      	movs	r2, #2
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030fe:	213c      	movs	r1, #60	@ 0x3c
 8003100:	187b      	adds	r3, r7, r1
 8003102:	22c0      	movs	r2, #192	@ 0xc0
 8003104:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003106:	187b      	adds	r3, r7, r1
 8003108:	2212      	movs	r2, #18
 800310a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	187b      	adds	r3, r7, r1
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003112:	187b      	adds	r3, r7, r1
 8003114:	2200      	movs	r2, #0
 8003116:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003118:	187b      	adds	r3, r7, r1
 800311a:	2206      	movs	r2, #6
 800311c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800311e:	187b      	adds	r3, r7, r1
 8003120:	4a0d      	ldr	r2, [pc, #52]	@ (8003158 <HAL_I2C_MspInit+0xc0>)
 8003122:	0019      	movs	r1, r3
 8003124:	0010      	movs	r0, r2
 8003126:	f000 ff29 	bl	8003f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800312a:	4b0a      	ldr	r3, [pc, #40]	@ (8003154 <HAL_I2C_MspInit+0xbc>)
 800312c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800312e:	4b09      	ldr	r3, [pc, #36]	@ (8003154 <HAL_I2C_MspInit+0xbc>)
 8003130:	2180      	movs	r1, #128	@ 0x80
 8003132:	0389      	lsls	r1, r1, #14
 8003134:	430a      	orrs	r2, r1
 8003136:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003138:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <HAL_I2C_MspInit+0xbc>)
 800313a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800313c:	2380      	movs	r3, #128	@ 0x80
 800313e:	039b      	lsls	r3, r3, #14
 8003140:	4013      	ands	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003146:	46c0      	nop			@ (mov r8, r8)
 8003148:	46bd      	mov	sp, r7
 800314a:	b015      	add	sp, #84	@ 0x54
 800314c:	bd90      	pop	{r4, r7, pc}
 800314e:	46c0      	nop			@ (mov r8, r8)
 8003150:	40005400 	.word	0x40005400
 8003154:	40021000 	.word	0x40021000
 8003158:	50000400 	.word	0x50000400

0800315c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b095      	sub	sp, #84	@ 0x54
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003164:	233c      	movs	r3, #60	@ 0x3c
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	0018      	movs	r0, r3
 800316a:	2314      	movs	r3, #20
 800316c:	001a      	movs	r2, r3
 800316e:	2100      	movs	r1, #0
 8003170:	f006 f8b4 	bl	80092dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003174:	2414      	movs	r4, #20
 8003176:	193b      	adds	r3, r7, r4
 8003178:	0018      	movs	r0, r3
 800317a:	2328      	movs	r3, #40	@ 0x28
 800317c:	001a      	movs	r2, r3
 800317e:	2100      	movs	r1, #0
 8003180:	f006 f8ac 	bl	80092dc <memset>
  if(hi2s->Instance==SPI1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a4a      	ldr	r2, [pc, #296]	@ (80032b4 <HAL_I2S_MspInit+0x158>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d000      	beq.n	8003190 <HAL_I2S_MspInit+0x34>
 800318e:	e08d      	b.n	80032ac <HAL_I2S_MspInit+0x150>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8003190:	193b      	adds	r3, r7, r4
 8003192:	2280      	movs	r2, #128	@ 0x80
 8003194:	0112      	lsls	r2, r2, #4
 8003196:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8003198:	193b      	adds	r3, r7, r4
 800319a:	2200      	movs	r2, #0
 800319c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800319e:	193b      	adds	r3, r7, r4
 80031a0:	0018      	movs	r0, r3
 80031a2:	f002 ff2f 	bl	8006004 <HAL_RCCEx_PeriphCLKConfig>
 80031a6:	1e03      	subs	r3, r0, #0
 80031a8:	d001      	beq.n	80031ae <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80031aa:	f7ff fd22 	bl	8002bf2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031ae:	4b42      	ldr	r3, [pc, #264]	@ (80032b8 <HAL_I2S_MspInit+0x15c>)
 80031b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031b2:	4b41      	ldr	r3, [pc, #260]	@ (80032b8 <HAL_I2S_MspInit+0x15c>)
 80031b4:	2180      	movs	r1, #128	@ 0x80
 80031b6:	0149      	lsls	r1, r1, #5
 80031b8:	430a      	orrs	r2, r1
 80031ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80031bc:	4b3e      	ldr	r3, [pc, #248]	@ (80032b8 <HAL_I2S_MspInit+0x15c>)
 80031be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031c0:	2380      	movs	r3, #128	@ 0x80
 80031c2:	015b      	lsls	r3, r3, #5
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ca:	4b3b      	ldr	r3, [pc, #236]	@ (80032b8 <HAL_I2S_MspInit+0x15c>)
 80031cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ce:	4b3a      	ldr	r3, [pc, #232]	@ (80032b8 <HAL_I2S_MspInit+0x15c>)
 80031d0:	2101      	movs	r1, #1
 80031d2:	430a      	orrs	r2, r1
 80031d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80031d6:	4b38      	ldr	r3, [pc, #224]	@ (80032b8 <HAL_I2S_MspInit+0x15c>)
 80031d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031da:	2201      	movs	r2, #1
 80031dc:	4013      	ands	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e2:	4b35      	ldr	r3, [pc, #212]	@ (80032b8 <HAL_I2S_MspInit+0x15c>)
 80031e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031e6:	4b34      	ldr	r3, [pc, #208]	@ (80032b8 <HAL_I2S_MspInit+0x15c>)
 80031e8:	2102      	movs	r1, #2
 80031ea:	430a      	orrs	r2, r1
 80031ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80031ee:	4b32      	ldr	r3, [pc, #200]	@ (80032b8 <HAL_I2S_MspInit+0x15c>)
 80031f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f2:	2202      	movs	r2, #2
 80031f4:	4013      	ands	r3, r2
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA1     ------> I2S1_CK
    PA2     ------> I2S1_SD
    PB0     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80031fa:	243c      	movs	r4, #60	@ 0x3c
 80031fc:	193b      	adds	r3, r7, r4
 80031fe:	2206      	movs	r2, #6
 8003200:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003202:	193b      	adds	r3, r7, r4
 8003204:	2202      	movs	r2, #2
 8003206:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003208:	193b      	adds	r3, r7, r4
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320e:	193b      	adds	r3, r7, r4
 8003210:	2200      	movs	r2, #0
 8003212:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003214:	193b      	adds	r3, r7, r4
 8003216:	2200      	movs	r2, #0
 8003218:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321a:	193a      	adds	r2, r7, r4
 800321c:	23a0      	movs	r3, #160	@ 0xa0
 800321e:	05db      	lsls	r3, r3, #23
 8003220:	0011      	movs	r1, r2
 8003222:	0018      	movs	r0, r3
 8003224:	f000 feaa 	bl	8003f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003228:	0021      	movs	r1, r4
 800322a:	187b      	adds	r3, r7, r1
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003230:	187b      	adds	r3, r7, r1
 8003232:	2202      	movs	r2, #2
 8003234:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003236:	187b      	adds	r3, r7, r1
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323c:	187b      	adds	r3, r7, r1
 800323e:	2200      	movs	r2, #0
 8003240:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003242:	187b      	adds	r3, r7, r1
 8003244:	2200      	movs	r2, #0
 8003246:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003248:	187b      	adds	r3, r7, r1
 800324a:	4a1c      	ldr	r2, [pc, #112]	@ (80032bc <HAL_I2S_MspInit+0x160>)
 800324c:	0019      	movs	r1, r3
 800324e:	0010      	movs	r0, r2
 8003250:	f000 fe94 	bl	8003f7c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8003254:	4b1a      	ldr	r3, [pc, #104]	@ (80032c0 <HAL_I2S_MspInit+0x164>)
 8003256:	4a1b      	ldr	r2, [pc, #108]	@ (80032c4 <HAL_I2S_MspInit+0x168>)
 8003258:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800325a:	4b19      	ldr	r3, [pc, #100]	@ (80032c0 <HAL_I2S_MspInit+0x164>)
 800325c:	2211      	movs	r2, #17
 800325e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003260:	4b17      	ldr	r3, [pc, #92]	@ (80032c0 <HAL_I2S_MspInit+0x164>)
 8003262:	2210      	movs	r2, #16
 8003264:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003266:	4b16      	ldr	r3, [pc, #88]	@ (80032c0 <HAL_I2S_MspInit+0x164>)
 8003268:	2200      	movs	r2, #0
 800326a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800326c:	4b14      	ldr	r3, [pc, #80]	@ (80032c0 <HAL_I2S_MspInit+0x164>)
 800326e:	2280      	movs	r2, #128	@ 0x80
 8003270:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003272:	4b13      	ldr	r3, [pc, #76]	@ (80032c0 <HAL_I2S_MspInit+0x164>)
 8003274:	2280      	movs	r2, #128	@ 0x80
 8003276:	0052      	lsls	r2, r2, #1
 8003278:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800327a:	4b11      	ldr	r3, [pc, #68]	@ (80032c0 <HAL_I2S_MspInit+0x164>)
 800327c:	2280      	movs	r2, #128	@ 0x80
 800327e:	00d2      	lsls	r2, r2, #3
 8003280:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8003282:	4b0f      	ldr	r3, [pc, #60]	@ (80032c0 <HAL_I2S_MspInit+0x164>)
 8003284:	2220      	movs	r2, #32
 8003286:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003288:	4b0d      	ldr	r3, [pc, #52]	@ (80032c0 <HAL_I2S_MspInit+0x164>)
 800328a:	22c0      	movs	r2, #192	@ 0xc0
 800328c:	0192      	lsls	r2, r2, #6
 800328e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003290:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <HAL_I2S_MspInit+0x164>)
 8003292:	0018      	movs	r0, r3
 8003294:	f000 fbbe 	bl	8003a14 <HAL_DMA_Init>
 8003298:	1e03      	subs	r3, r0, #0
 800329a:	d001      	beq.n	80032a0 <HAL_I2S_MspInit+0x144>
    {
      Error_Handler();
 800329c:	f7ff fca9 	bl	8002bf2 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a07      	ldr	r2, [pc, #28]	@ (80032c0 <HAL_I2S_MspInit+0x164>)
 80032a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80032a6:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <HAL_I2S_MspInit+0x164>)
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80032ac:	46c0      	nop			@ (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b015      	add	sp, #84	@ 0x54
 80032b2:	bd90      	pop	{r4, r7, pc}
 80032b4:	40013000 	.word	0x40013000
 80032b8:	40021000 	.word	0x40021000
 80032bc:	50000400 	.word	0x50000400
 80032c0:	2000017c 	.word	0x2000017c
 80032c4:	40020008 	.word	0x40020008

080032c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80032c8:	b590      	push	{r4, r7, lr}
 80032ca:	b08f      	sub	sp, #60	@ 0x3c
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032d0:	2410      	movs	r4, #16
 80032d2:	193b      	adds	r3, r7, r4
 80032d4:	0018      	movs	r0, r3
 80032d6:	2328      	movs	r3, #40	@ 0x28
 80032d8:	001a      	movs	r2, r3
 80032da:	2100      	movs	r1, #0
 80032dc:	f005 fffe 	bl	80092dc <memset>
  if(hrtc->Instance==RTC)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a19      	ldr	r2, [pc, #100]	@ (800334c <HAL_RTC_MspInit+0x84>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d12c      	bne.n	8003344 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80032ea:	193b      	adds	r3, r7, r4
 80032ec:	2280      	movs	r2, #128	@ 0x80
 80032ee:	0292      	lsls	r2, r2, #10
 80032f0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80032f2:	193b      	adds	r3, r7, r4
 80032f4:	2280      	movs	r2, #128	@ 0x80
 80032f6:	0052      	lsls	r2, r2, #1
 80032f8:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032fa:	193b      	adds	r3, r7, r4
 80032fc:	0018      	movs	r0, r3
 80032fe:	f002 fe81 	bl	8006004 <HAL_RCCEx_PeriphCLKConfig>
 8003302:	1e03      	subs	r3, r0, #0
 8003304:	d001      	beq.n	800330a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003306:	f7ff fc74 	bl	8002bf2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800330a:	4b11      	ldr	r3, [pc, #68]	@ (8003350 <HAL_RTC_MspInit+0x88>)
 800330c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800330e:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <HAL_RTC_MspInit+0x88>)
 8003310:	2180      	movs	r1, #128	@ 0x80
 8003312:	0209      	lsls	r1, r1, #8
 8003314:	430a      	orrs	r2, r1
 8003316:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003318:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <HAL_RTC_MspInit+0x88>)
 800331a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800331c:	4b0c      	ldr	r3, [pc, #48]	@ (8003350 <HAL_RTC_MspInit+0x88>)
 800331e:	2180      	movs	r1, #128	@ 0x80
 8003320:	00c9      	lsls	r1, r1, #3
 8003322:	430a      	orrs	r2, r1
 8003324:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003326:	4b0a      	ldr	r3, [pc, #40]	@ (8003350 <HAL_RTC_MspInit+0x88>)
 8003328:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800332a:	2380      	movs	r3, #128	@ 0x80
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4013      	ands	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8003334:	2200      	movs	r2, #0
 8003336:	2100      	movs	r1, #0
 8003338:	2002      	movs	r0, #2
 800333a:	f000 fb39 	bl	80039b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800333e:	2002      	movs	r0, #2
 8003340:	f000 fb4b 	bl	80039da <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8003344:	46c0      	nop			@ (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b00f      	add	sp, #60	@ 0x3c
 800334a:	bd90      	pop	{r4, r7, pc}
 800334c:	40002800 	.word	0x40002800
 8003350:	40021000 	.word	0x40021000

08003354 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b08b      	sub	sp, #44	@ 0x2c
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800335c:	2414      	movs	r4, #20
 800335e:	193b      	adds	r3, r7, r4
 8003360:	0018      	movs	r0, r3
 8003362:	2314      	movs	r3, #20
 8003364:	001a      	movs	r2, r3
 8003366:	2100      	movs	r1, #0
 8003368:	f005 ffb8 	bl	80092dc <memset>
  if(hspi->Instance==SPI2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a51      	ldr	r2, [pc, #324]	@ (80034b8 <HAL_SPI_MspInit+0x164>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d000      	beq.n	8003378 <HAL_SPI_MspInit+0x24>
 8003376:	e09a      	b.n	80034ae <HAL_SPI_MspInit+0x15a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003378:	4b50      	ldr	r3, [pc, #320]	@ (80034bc <HAL_SPI_MspInit+0x168>)
 800337a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800337c:	4b4f      	ldr	r3, [pc, #316]	@ (80034bc <HAL_SPI_MspInit+0x168>)
 800337e:	2180      	movs	r1, #128	@ 0x80
 8003380:	01c9      	lsls	r1, r1, #7
 8003382:	430a      	orrs	r2, r1
 8003384:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003386:	4b4d      	ldr	r3, [pc, #308]	@ (80034bc <HAL_SPI_MspInit+0x168>)
 8003388:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800338a:	2380      	movs	r3, #128	@ 0x80
 800338c:	01db      	lsls	r3, r3, #7
 800338e:	4013      	ands	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003394:	4b49      	ldr	r3, [pc, #292]	@ (80034bc <HAL_SPI_MspInit+0x168>)
 8003396:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003398:	4b48      	ldr	r3, [pc, #288]	@ (80034bc <HAL_SPI_MspInit+0x168>)
 800339a:	2101      	movs	r1, #1
 800339c:	430a      	orrs	r2, r1
 800339e:	635a      	str	r2, [r3, #52]	@ 0x34
 80033a0:	4b46      	ldr	r3, [pc, #280]	@ (80034bc <HAL_SPI_MspInit+0x168>)
 80033a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a4:	2201      	movs	r2, #1
 80033a6:	4013      	ands	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80033ac:	193b      	adds	r3, r7, r4
 80033ae:	2209      	movs	r2, #9
 80033b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b2:	193b      	adds	r3, r7, r4
 80033b4:	2202      	movs	r2, #2
 80033b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	193b      	adds	r3, r7, r4
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033be:	193b      	adds	r3, r7, r4
 80033c0:	2200      	movs	r2, #0
 80033c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80033c4:	193b      	adds	r3, r7, r4
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ca:	193a      	adds	r2, r7, r4
 80033cc:	23a0      	movs	r3, #160	@ 0xa0
 80033ce:	05db      	lsls	r3, r3, #23
 80033d0:	0011      	movs	r1, r2
 80033d2:	0018      	movs	r0, r3
 80033d4:	f000 fdd2 	bl	8003f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033d8:	0021      	movs	r1, r4
 80033da:	187b      	adds	r3, r7, r1
 80033dc:	2210      	movs	r2, #16
 80033de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e0:	187b      	adds	r3, r7, r1
 80033e2:	2202      	movs	r2, #2
 80033e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e6:	187b      	adds	r3, r7, r1
 80033e8:	2200      	movs	r2, #0
 80033ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ec:	187b      	adds	r3, r7, r1
 80033ee:	2200      	movs	r2, #0
 80033f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80033f2:	187b      	adds	r3, r7, r1
 80033f4:	2201      	movs	r2, #1
 80033f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f8:	187a      	adds	r2, r7, r1
 80033fa:	23a0      	movs	r3, #160	@ 0xa0
 80033fc:	05db      	lsls	r3, r3, #23
 80033fe:	0011      	movs	r1, r2
 8003400:	0018      	movs	r0, r3
 8003402:	f000 fdbb 	bl	8003f7c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel3;
 8003406:	4b2e      	ldr	r3, [pc, #184]	@ (80034c0 <HAL_SPI_MspInit+0x16c>)
 8003408:	4a2e      	ldr	r2, [pc, #184]	@ (80034c4 <HAL_SPI_MspInit+0x170>)
 800340a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800340c:	4b2c      	ldr	r3, [pc, #176]	@ (80034c0 <HAL_SPI_MspInit+0x16c>)
 800340e:	2212      	movs	r2, #18
 8003410:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003412:	4b2b      	ldr	r3, [pc, #172]	@ (80034c0 <HAL_SPI_MspInit+0x16c>)
 8003414:	2200      	movs	r2, #0
 8003416:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003418:	4b29      	ldr	r3, [pc, #164]	@ (80034c0 <HAL_SPI_MspInit+0x16c>)
 800341a:	2200      	movs	r2, #0
 800341c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800341e:	4b28      	ldr	r3, [pc, #160]	@ (80034c0 <HAL_SPI_MspInit+0x16c>)
 8003420:	2280      	movs	r2, #128	@ 0x80
 8003422:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003424:	4b26      	ldr	r3, [pc, #152]	@ (80034c0 <HAL_SPI_MspInit+0x16c>)
 8003426:	2200      	movs	r2, #0
 8003428:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800342a:	4b25      	ldr	r3, [pc, #148]	@ (80034c0 <HAL_SPI_MspInit+0x16c>)
 800342c:	2200      	movs	r2, #0
 800342e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003430:	4b23      	ldr	r3, [pc, #140]	@ (80034c0 <HAL_SPI_MspInit+0x16c>)
 8003432:	2200      	movs	r2, #0
 8003434:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003436:	4b22      	ldr	r3, [pc, #136]	@ (80034c0 <HAL_SPI_MspInit+0x16c>)
 8003438:	2280      	movs	r2, #128	@ 0x80
 800343a:	0192      	lsls	r2, r2, #6
 800343c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800343e:	4b20      	ldr	r3, [pc, #128]	@ (80034c0 <HAL_SPI_MspInit+0x16c>)
 8003440:	0018      	movs	r0, r3
 8003442:	f000 fae7 	bl	8003a14 <HAL_DMA_Init>
 8003446:	1e03      	subs	r3, r0, #0
 8003448:	d001      	beq.n	800344e <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 800344a:	f7ff fbd2 	bl	8002bf2 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a1b      	ldr	r2, [pc, #108]	@ (80034c0 <HAL_SPI_MspInit+0x16c>)
 8003452:	659a      	str	r2, [r3, #88]	@ 0x58
 8003454:	4b1a      	ldr	r3, [pc, #104]	@ (80034c0 <HAL_SPI_MspInit+0x16c>)
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel2;
 800345a:	4b1b      	ldr	r3, [pc, #108]	@ (80034c8 <HAL_SPI_MspInit+0x174>)
 800345c:	4a1b      	ldr	r2, [pc, #108]	@ (80034cc <HAL_SPI_MspInit+0x178>)
 800345e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8003460:	4b19      	ldr	r3, [pc, #100]	@ (80034c8 <HAL_SPI_MspInit+0x174>)
 8003462:	2213      	movs	r2, #19
 8003464:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003466:	4b18      	ldr	r3, [pc, #96]	@ (80034c8 <HAL_SPI_MspInit+0x174>)
 8003468:	2210      	movs	r2, #16
 800346a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800346c:	4b16      	ldr	r3, [pc, #88]	@ (80034c8 <HAL_SPI_MspInit+0x174>)
 800346e:	2200      	movs	r2, #0
 8003470:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003472:	4b15      	ldr	r3, [pc, #84]	@ (80034c8 <HAL_SPI_MspInit+0x174>)
 8003474:	2280      	movs	r2, #128	@ 0x80
 8003476:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003478:	4b13      	ldr	r3, [pc, #76]	@ (80034c8 <HAL_SPI_MspInit+0x174>)
 800347a:	2200      	movs	r2, #0
 800347c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800347e:	4b12      	ldr	r3, [pc, #72]	@ (80034c8 <HAL_SPI_MspInit+0x174>)
 8003480:	2200      	movs	r2, #0
 8003482:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003484:	4b10      	ldr	r3, [pc, #64]	@ (80034c8 <HAL_SPI_MspInit+0x174>)
 8003486:	2200      	movs	r2, #0
 8003488:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800348a:	4b0f      	ldr	r3, [pc, #60]	@ (80034c8 <HAL_SPI_MspInit+0x174>)
 800348c:	2280      	movs	r2, #128	@ 0x80
 800348e:	0192      	lsls	r2, r2, #6
 8003490:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003492:	4b0d      	ldr	r3, [pc, #52]	@ (80034c8 <HAL_SPI_MspInit+0x174>)
 8003494:	0018      	movs	r0, r3
 8003496:	f000 fabd 	bl	8003a14 <HAL_DMA_Init>
 800349a:	1e03      	subs	r3, r0, #0
 800349c:	d001      	beq.n	80034a2 <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 800349e:	f7ff fba8 	bl	8002bf2 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a08      	ldr	r2, [pc, #32]	@ (80034c8 <HAL_SPI_MspInit+0x174>)
 80034a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80034a8:	4b07      	ldr	r3, [pc, #28]	@ (80034c8 <HAL_SPI_MspInit+0x174>)
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80034ae:	46c0      	nop			@ (mov r8, r8)
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b00b      	add	sp, #44	@ 0x2c
 80034b4:	bd90      	pop	{r4, r7, pc}
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	40003800 	.word	0x40003800
 80034bc:	40021000 	.word	0x40021000
 80034c0:	20000268 	.word	0x20000268
 80034c4:	40020030 	.word	0x40020030
 80034c8:	200002c4 	.word	0x200002c4
 80034cc:	4002001c 	.word	0x4002001c

080034d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	2380      	movs	r3, #128	@ 0x80
 80034de:	05db      	lsls	r3, r3, #23
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d10b      	bne.n	80034fc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034e4:	4b07      	ldr	r3, [pc, #28]	@ (8003504 <HAL_TIM_PWM_MspInit+0x34>)
 80034e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034e8:	4b06      	ldr	r3, [pc, #24]	@ (8003504 <HAL_TIM_PWM_MspInit+0x34>)
 80034ea:	2101      	movs	r1, #1
 80034ec:	430a      	orrs	r2, r1
 80034ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80034f0:	4b04      	ldr	r3, [pc, #16]	@ (8003504 <HAL_TIM_PWM_MspInit+0x34>)
 80034f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f4:	2201      	movs	r2, #1
 80034f6:	4013      	ands	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80034fc:	46c0      	nop			@ (mov r8, r8)
 80034fe:	46bd      	mov	sp, r7
 8003500:	b004      	add	sp, #16
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40021000 	.word	0x40021000

08003508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a18      	ldr	r2, [pc, #96]	@ (8003578 <HAL_TIM_Base_MspInit+0x70>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d10e      	bne.n	8003538 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800351a:	4b18      	ldr	r3, [pc, #96]	@ (800357c <HAL_TIM_Base_MspInit+0x74>)
 800351c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800351e:	4b17      	ldr	r3, [pc, #92]	@ (800357c <HAL_TIM_Base_MspInit+0x74>)
 8003520:	2180      	movs	r1, #128	@ 0x80
 8003522:	0209      	lsls	r1, r1, #8
 8003524:	430a      	orrs	r2, r1
 8003526:	641a      	str	r2, [r3, #64]	@ 0x40
 8003528:	4b14      	ldr	r3, [pc, #80]	@ (800357c <HAL_TIM_Base_MspInit+0x74>)
 800352a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800352c:	2380      	movs	r3, #128	@ 0x80
 800352e:	021b      	lsls	r3, r3, #8
 8003530:	4013      	ands	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003536:	e01a      	b.n	800356e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a10      	ldr	r2, [pc, #64]	@ (8003580 <HAL_TIM_Base_MspInit+0x78>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d115      	bne.n	800356e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003542:	4b0e      	ldr	r3, [pc, #56]	@ (800357c <HAL_TIM_Base_MspInit+0x74>)
 8003544:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003546:	4b0d      	ldr	r3, [pc, #52]	@ (800357c <HAL_TIM_Base_MspInit+0x74>)
 8003548:	2180      	movs	r1, #128	@ 0x80
 800354a:	0289      	lsls	r1, r1, #10
 800354c:	430a      	orrs	r2, r1
 800354e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003550:	4b0a      	ldr	r3, [pc, #40]	@ (800357c <HAL_TIM_Base_MspInit+0x74>)
 8003552:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003554:	2380      	movs	r3, #128	@ 0x80
 8003556:	029b      	lsls	r3, r3, #10
 8003558:	4013      	ands	r3, r2
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 800355e:	2200      	movs	r2, #0
 8003560:	2101      	movs	r1, #1
 8003562:	2015      	movs	r0, #21
 8003564:	f000 fa24 	bl	80039b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003568:	2015      	movs	r0, #21
 800356a:	f000 fa36 	bl	80039da <HAL_NVIC_EnableIRQ>
}
 800356e:	46c0      	nop			@ (mov r8, r8)
 8003570:	46bd      	mov	sp, r7
 8003572:	b004      	add	sp, #16
 8003574:	bd80      	pop	{r7, pc}
 8003576:	46c0      	nop			@ (mov r8, r8)
 8003578:	40002000 	.word	0x40002000
 800357c:	40021000 	.word	0x40021000
 8003580:	40014400 	.word	0x40014400

08003584 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003584:	b590      	push	{r4, r7, lr}
 8003586:	b089      	sub	sp, #36	@ 0x24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800358c:	240c      	movs	r4, #12
 800358e:	193b      	adds	r3, r7, r4
 8003590:	0018      	movs	r0, r3
 8003592:	2314      	movs	r3, #20
 8003594:	001a      	movs	r2, r3
 8003596:	2100      	movs	r1, #0
 8003598:	f005 fea0 	bl	80092dc <memset>
  if(htim->Instance==TIM2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	2380      	movs	r3, #128	@ 0x80
 80035a2:	05db      	lsls	r3, r3, #23
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d121      	bne.n	80035ec <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a8:	4b12      	ldr	r3, [pc, #72]	@ (80035f4 <HAL_TIM_MspPostInit+0x70>)
 80035aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035ac:	4b11      	ldr	r3, [pc, #68]	@ (80035f4 <HAL_TIM_MspPostInit+0x70>)
 80035ae:	2104      	movs	r1, #4
 80035b0:	430a      	orrs	r2, r1
 80035b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80035b4:	4b0f      	ldr	r3, [pc, #60]	@ (80035f4 <HAL_TIM_MspPostInit+0x70>)
 80035b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b8:	2204      	movs	r2, #4
 80035ba:	4013      	ands	r3, r2
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_SHIFT_nOE_Pin;
 80035c0:	0021      	movs	r1, r4
 80035c2:	187b      	adds	r3, r7, r1
 80035c4:	2240      	movs	r2, #64	@ 0x40
 80035c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c8:	187b      	adds	r3, r7, r1
 80035ca:	2202      	movs	r2, #2
 80035cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	187b      	adds	r3, r7, r1
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d4:	187b      	adds	r3, r7, r1
 80035d6:	2200      	movs	r2, #0
 80035d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80035da:	187b      	adds	r3, r7, r1
 80035dc:	2202      	movs	r2, #2
 80035de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_SHIFT_nOE_GPIO_Port, &GPIO_InitStruct);
 80035e0:	187b      	adds	r3, r7, r1
 80035e2:	4a05      	ldr	r2, [pc, #20]	@ (80035f8 <HAL_TIM_MspPostInit+0x74>)
 80035e4:	0019      	movs	r1, r3
 80035e6:	0010      	movs	r0, r2
 80035e8:	f000 fcc8 	bl	8003f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80035ec:	46c0      	nop			@ (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b009      	add	sp, #36	@ 0x24
 80035f2:	bd90      	pop	{r4, r7, pc}
 80035f4:	40021000 	.word	0x40021000
 80035f8:	50000800 	.word	0x50000800

080035fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003600:	46c0      	nop			@ (mov r8, r8)
 8003602:	e7fd      	b.n	8003600 <NMI_Handler+0x4>

08003604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003608:	46c0      	nop			@ (mov r8, r8)
 800360a:	e7fd      	b.n	8003608 <HardFault_Handler+0x4>

0800360c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003610:	46c0      	nop			@ (mov r8, r8)
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800361a:	46c0      	nop			@ (mov r8, r8)
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003624:	f000 f8fc 	bl	8003820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003628:	46c0      	nop			@ (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003634:	4b03      	ldr	r3, [pc, #12]	@ (8003644 <RTC_TAMP_IRQHandler+0x14>)
 8003636:	0018      	movs	r0, r3
 8003638:	f003 fcf0 	bl	800701c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800363c:	46c0      	nop			@ (mov r8, r8)
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	46c0      	nop			@ (mov r8, r8)
 8003644:	200001d8 	.word	0x200001d8

08003648 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800364c:	46c0      	nop			@ (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_EXTI_Pin);
 8003656:	2001      	movs	r0, #1
 8003658:	f000 fe4a 	bl	80042f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_EXTI_Pin);
 800365c:	2002      	movs	r0, #2
 800365e:	f000 fe47 	bl	80042f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003662:	46c0      	nop			@ (mov r8, r8)
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_EXTI_Pin);
 800366c:	2004      	movs	r0, #4
 800366e:	f000 fe3f 	bl	80042f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_EXTI_Pin);
 8003672:	2008      	movs	r0, #8
 8003674:	f000 fe3c 	bl	80042f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003678:	46c0      	nop			@ (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_SWITCH_EXTI_Pin);
 8003682:	2010      	movs	r0, #16
 8003684:	f000 fe34 	bl	80042f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_EXTI_Pin);
 8003688:	2380      	movs	r3, #128	@ 0x80
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	0018      	movs	r0, r3
 800368e:	f000 fe2f 	bl	80042f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003692:	46c0      	nop			@ (mov r8, r8)
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800369c:	4b03      	ldr	r3, [pc, #12]	@ (80036ac <DMA1_Channel1_IRQHandler+0x14>)
 800369e:	0018      	movs	r0, r3
 80036a0:	f000 fb2a 	bl	8003cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80036a4:	46c0      	nop			@ (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			@ (mov r8, r8)
 80036ac:	2000017c 	.word	0x2000017c

080036b0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80036b4:	4b05      	ldr	r3, [pc, #20]	@ (80036cc <DMA1_Channel2_3_IRQHandler+0x1c>)
 80036b6:	0018      	movs	r0, r3
 80036b8:	f000 fb1e 	bl	8003cf8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80036bc:	4b04      	ldr	r3, [pc, #16]	@ (80036d0 <DMA1_Channel2_3_IRQHandler+0x20>)
 80036be:	0018      	movs	r0, r3
 80036c0:	f000 fb1a 	bl	8003cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80036c4:	46c0      	nop			@ (mov r8, r8)
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			@ (mov r8, r8)
 80036cc:	200002c4 	.word	0x200002c4
 80036d0:	20000268 	.word	0x20000268

080036d4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80036d8:	4b03      	ldr	r3, [pc, #12]	@ (80036e8 <TIM16_IRQHandler+0x14>)
 80036da:	0018      	movs	r0, r3
 80036dc:	f005 f812 	bl	8008704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80036e0:	46c0      	nop			@ (mov r8, r8)
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			@ (mov r8, r8)
 80036e8:	200003b8 	.word	0x200003b8

080036ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036f8:	480d      	ldr	r0, [pc, #52]	@ (8003730 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80036fc:	f7ff fff6 	bl	80036ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003700:	480c      	ldr	r0, [pc, #48]	@ (8003734 <LoopForever+0x6>)
  ldr r1, =_edata
 8003702:	490d      	ldr	r1, [pc, #52]	@ (8003738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003704:	4a0d      	ldr	r2, [pc, #52]	@ (800373c <LoopForever+0xe>)
  movs r3, #0
 8003706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003708:	e002      	b.n	8003710 <LoopCopyDataInit>

0800370a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800370a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800370c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800370e:	3304      	adds	r3, #4

08003710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003714:	d3f9      	bcc.n	800370a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003716:	4a0a      	ldr	r2, [pc, #40]	@ (8003740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003718:	4c0a      	ldr	r4, [pc, #40]	@ (8003744 <LoopForever+0x16>)
  movs r3, #0
 800371a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800371c:	e001      	b.n	8003722 <LoopFillZerobss>

0800371e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800371e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003720:	3204      	adds	r2, #4

08003722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003724:	d3fb      	bcc.n	800371e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003726:	f005 fde1 	bl	80092ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800372a:	f7fd ff49 	bl	80015c0 <main>

0800372e <LoopForever>:

LoopForever:
  b LoopForever
 800372e:	e7fe      	b.n	800372e <LoopForever>
  ldr   r0, =_estack
 8003730:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003738:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800373c:	0800945c 	.word	0x0800945c
  ldr r2, =_sbss
 8003740:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8003744:	200005f8 	.word	0x200005f8

08003748 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003748:	e7fe      	b.n	8003748 <ADC1_IRQHandler>
	...

0800374c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003752:	1dfb      	adds	r3, r7, #7
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003758:	4b0b      	ldr	r3, [pc, #44]	@ (8003788 <HAL_Init+0x3c>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4b0a      	ldr	r3, [pc, #40]	@ (8003788 <HAL_Init+0x3c>)
 800375e:	2180      	movs	r1, #128	@ 0x80
 8003760:	0049      	lsls	r1, r1, #1
 8003762:	430a      	orrs	r2, r1
 8003764:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003766:	2003      	movs	r0, #3
 8003768:	f000 f810 	bl	800378c <HAL_InitTick>
 800376c:	1e03      	subs	r3, r0, #0
 800376e:	d003      	beq.n	8003778 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003770:	1dfb      	adds	r3, r7, #7
 8003772:	2201      	movs	r2, #1
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	e001      	b.n	800377c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003778:	f7ff fc62 	bl	8003040 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800377c:	1dfb      	adds	r3, r7, #7
 800377e:	781b      	ldrb	r3, [r3, #0]
}
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40022000 	.word	0x40022000

0800378c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003794:	230f      	movs	r3, #15
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	2200      	movs	r2, #0
 800379a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800379c:	4b1d      	ldr	r3, [pc, #116]	@ (8003814 <HAL_InitTick+0x88>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d02b      	beq.n	80037fc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80037a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003818 <HAL_InitTick+0x8c>)
 80037a6:	681c      	ldr	r4, [r3, #0]
 80037a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003814 <HAL_InitTick+0x88>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	0019      	movs	r1, r3
 80037ae:	23fa      	movs	r3, #250	@ 0xfa
 80037b0:	0098      	lsls	r0, r3, #2
 80037b2:	f7fc fca7 	bl	8000104 <__udivsi3>
 80037b6:	0003      	movs	r3, r0
 80037b8:	0019      	movs	r1, r3
 80037ba:	0020      	movs	r0, r4
 80037bc:	f7fc fca2 	bl	8000104 <__udivsi3>
 80037c0:	0003      	movs	r3, r0
 80037c2:	0018      	movs	r0, r3
 80037c4:	f000 f919 	bl	80039fa <HAL_SYSTICK_Config>
 80037c8:	1e03      	subs	r3, r0, #0
 80037ca:	d112      	bne.n	80037f2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d80a      	bhi.n	80037e8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	2301      	movs	r3, #1
 80037d6:	425b      	negs	r3, r3
 80037d8:	2200      	movs	r2, #0
 80037da:	0018      	movs	r0, r3
 80037dc:	f000 f8e8 	bl	80039b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037e0:	4b0e      	ldr	r3, [pc, #56]	@ (800381c <HAL_InitTick+0x90>)
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e00d      	b.n	8003804 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80037e8:	230f      	movs	r3, #15
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e008      	b.n	8003804 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037f2:	230f      	movs	r3, #15
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	2201      	movs	r2, #1
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	e003      	b.n	8003804 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037fc:	230f      	movs	r3, #15
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	2201      	movs	r2, #1
 8003802:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003804:	230f      	movs	r3, #15
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	781b      	ldrb	r3, [r3, #0]
}
 800380a:	0018      	movs	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	b005      	add	sp, #20
 8003810:	bd90      	pop	{r4, r7, pc}
 8003812:	46c0      	nop			@ (mov r8, r8)
 8003814:	20000094 	.word	0x20000094
 8003818:	2000008c 	.word	0x2000008c
 800381c:	20000090 	.word	0x20000090

08003820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003824:	4b05      	ldr	r3, [pc, #20]	@ (800383c <HAL_IncTick+0x1c>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	001a      	movs	r2, r3
 800382a:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <HAL_IncTick+0x20>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	18d2      	adds	r2, r2, r3
 8003830:	4b03      	ldr	r3, [pc, #12]	@ (8003840 <HAL_IncTick+0x20>)
 8003832:	601a      	str	r2, [r3, #0]
}
 8003834:	46c0      	nop			@ (mov r8, r8)
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	46c0      	nop			@ (mov r8, r8)
 800383c:	20000094 	.word	0x20000094
 8003840:	200005f4 	.word	0x200005f4

08003844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  return uwTick;
 8003848:	4b02      	ldr	r3, [pc, #8]	@ (8003854 <HAL_GetTick+0x10>)
 800384a:	681b      	ldr	r3, [r3, #0]
}
 800384c:	0018      	movs	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	46c0      	nop			@ (mov r8, r8)
 8003854:	200005f4 	.word	0x200005f4

08003858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	0002      	movs	r2, r0
 8003860:	1dfb      	adds	r3, r7, #7
 8003862:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003864:	1dfb      	adds	r3, r7, #7
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b7f      	cmp	r3, #127	@ 0x7f
 800386a:	d809      	bhi.n	8003880 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800386c:	1dfb      	adds	r3, r7, #7
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	001a      	movs	r2, r3
 8003872:	231f      	movs	r3, #31
 8003874:	401a      	ands	r2, r3
 8003876:	4b04      	ldr	r3, [pc, #16]	@ (8003888 <__NVIC_EnableIRQ+0x30>)
 8003878:	2101      	movs	r1, #1
 800387a:	4091      	lsls	r1, r2
 800387c:	000a      	movs	r2, r1
 800387e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003880:	46c0      	nop			@ (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	b002      	add	sp, #8
 8003886:	bd80      	pop	{r7, pc}
 8003888:	e000e100 	.word	0xe000e100

0800388c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	0002      	movs	r2, r0
 8003894:	6039      	str	r1, [r7, #0]
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b7f      	cmp	r3, #127	@ 0x7f
 80038a0:	d828      	bhi.n	80038f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003960 <__NVIC_SetPriority+0xd4>)
 80038a4:	1dfb      	adds	r3, r7, #7
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	b25b      	sxtb	r3, r3
 80038aa:	089b      	lsrs	r3, r3, #2
 80038ac:	33c0      	adds	r3, #192	@ 0xc0
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	589b      	ldr	r3, [r3, r2]
 80038b2:	1dfa      	adds	r2, r7, #7
 80038b4:	7812      	ldrb	r2, [r2, #0]
 80038b6:	0011      	movs	r1, r2
 80038b8:	2203      	movs	r2, #3
 80038ba:	400a      	ands	r2, r1
 80038bc:	00d2      	lsls	r2, r2, #3
 80038be:	21ff      	movs	r1, #255	@ 0xff
 80038c0:	4091      	lsls	r1, r2
 80038c2:	000a      	movs	r2, r1
 80038c4:	43d2      	mvns	r2, r2
 80038c6:	401a      	ands	r2, r3
 80038c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	019b      	lsls	r3, r3, #6
 80038ce:	22ff      	movs	r2, #255	@ 0xff
 80038d0:	401a      	ands	r2, r3
 80038d2:	1dfb      	adds	r3, r7, #7
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	0018      	movs	r0, r3
 80038d8:	2303      	movs	r3, #3
 80038da:	4003      	ands	r3, r0
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038e0:	481f      	ldr	r0, [pc, #124]	@ (8003960 <__NVIC_SetPriority+0xd4>)
 80038e2:	1dfb      	adds	r3, r7, #7
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	b25b      	sxtb	r3, r3
 80038e8:	089b      	lsrs	r3, r3, #2
 80038ea:	430a      	orrs	r2, r1
 80038ec:	33c0      	adds	r3, #192	@ 0xc0
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80038f2:	e031      	b.n	8003958 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003964 <__NVIC_SetPriority+0xd8>)
 80038f6:	1dfb      	adds	r3, r7, #7
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	0019      	movs	r1, r3
 80038fc:	230f      	movs	r3, #15
 80038fe:	400b      	ands	r3, r1
 8003900:	3b08      	subs	r3, #8
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	3306      	adds	r3, #6
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	18d3      	adds	r3, r2, r3
 800390a:	3304      	adds	r3, #4
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	1dfa      	adds	r2, r7, #7
 8003910:	7812      	ldrb	r2, [r2, #0]
 8003912:	0011      	movs	r1, r2
 8003914:	2203      	movs	r2, #3
 8003916:	400a      	ands	r2, r1
 8003918:	00d2      	lsls	r2, r2, #3
 800391a:	21ff      	movs	r1, #255	@ 0xff
 800391c:	4091      	lsls	r1, r2
 800391e:	000a      	movs	r2, r1
 8003920:	43d2      	mvns	r2, r2
 8003922:	401a      	ands	r2, r3
 8003924:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	019b      	lsls	r3, r3, #6
 800392a:	22ff      	movs	r2, #255	@ 0xff
 800392c:	401a      	ands	r2, r3
 800392e:	1dfb      	adds	r3, r7, #7
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	0018      	movs	r0, r3
 8003934:	2303      	movs	r3, #3
 8003936:	4003      	ands	r3, r0
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800393c:	4809      	ldr	r0, [pc, #36]	@ (8003964 <__NVIC_SetPriority+0xd8>)
 800393e:	1dfb      	adds	r3, r7, #7
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	001c      	movs	r4, r3
 8003944:	230f      	movs	r3, #15
 8003946:	4023      	ands	r3, r4
 8003948:	3b08      	subs	r3, #8
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	430a      	orrs	r2, r1
 800394e:	3306      	adds	r3, #6
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	18c3      	adds	r3, r0, r3
 8003954:	3304      	adds	r3, #4
 8003956:	601a      	str	r2, [r3, #0]
}
 8003958:	46c0      	nop			@ (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b003      	add	sp, #12
 800395e:	bd90      	pop	{r4, r7, pc}
 8003960:	e000e100 	.word	0xe000e100
 8003964:	e000ed00 	.word	0xe000ed00

08003968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	1e5a      	subs	r2, r3, #1
 8003974:	2380      	movs	r3, #128	@ 0x80
 8003976:	045b      	lsls	r3, r3, #17
 8003978:	429a      	cmp	r2, r3
 800397a:	d301      	bcc.n	8003980 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800397c:	2301      	movs	r3, #1
 800397e:	e010      	b.n	80039a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003980:	4b0a      	ldr	r3, [pc, #40]	@ (80039ac <SysTick_Config+0x44>)
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	3a01      	subs	r2, #1
 8003986:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003988:	2301      	movs	r3, #1
 800398a:	425b      	negs	r3, r3
 800398c:	2103      	movs	r1, #3
 800398e:	0018      	movs	r0, r3
 8003990:	f7ff ff7c 	bl	800388c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003994:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <SysTick_Config+0x44>)
 8003996:	2200      	movs	r2, #0
 8003998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800399a:	4b04      	ldr	r3, [pc, #16]	@ (80039ac <SysTick_Config+0x44>)
 800399c:	2207      	movs	r2, #7
 800399e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	0018      	movs	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b002      	add	sp, #8
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	e000e010 	.word	0xe000e010

080039b0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	607a      	str	r2, [r7, #4]
 80039ba:	210f      	movs	r1, #15
 80039bc:	187b      	adds	r3, r7, r1
 80039be:	1c02      	adds	r2, r0, #0
 80039c0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	187b      	adds	r3, r7, r1
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	b25b      	sxtb	r3, r3
 80039ca:	0011      	movs	r1, r2
 80039cc:	0018      	movs	r0, r3
 80039ce:	f7ff ff5d 	bl	800388c <__NVIC_SetPriority>
}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b004      	add	sp, #16
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	0002      	movs	r2, r0
 80039e2:	1dfb      	adds	r3, r7, #7
 80039e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039e6:	1dfb      	adds	r3, r7, #7
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	b25b      	sxtb	r3, r3
 80039ec:	0018      	movs	r0, r3
 80039ee:	f7ff ff33 	bl	8003858 <__NVIC_EnableIRQ>
}
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b002      	add	sp, #8
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7ff ffaf 	bl	8003968 <SysTick_Config>
 8003a0a:	0003      	movs	r3, r0
}
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b002      	add	sp, #8
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e077      	b.n	8003b16 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a3d      	ldr	r2, [pc, #244]	@ (8003b20 <HAL_DMA_Init+0x10c>)
 8003a2c:	4694      	mov	ip, r2
 8003a2e:	4463      	add	r3, ip
 8003a30:	2114      	movs	r1, #20
 8003a32:	0018      	movs	r0, r3
 8003a34:	f7fc fb66 	bl	8000104 <__udivsi3>
 8003a38:	0003      	movs	r3, r0
 8003a3a:	009a      	lsls	r2, r3, #2
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2225      	movs	r2, #37	@ 0x25
 8003a44:	2102      	movs	r1, #2
 8003a46:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4934      	ldr	r1, [pc, #208]	@ (8003b24 <HAL_DMA_Init+0x110>)
 8003a54:	400a      	ands	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	0018      	movs	r0, r3
 8003a92:	f000 fa23 	bl	8003edc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	2380      	movs	r3, #128	@ 0x80
 8003a9c:	01db      	lsls	r3, r3, #7
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d102      	bne.n	8003aa8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab0:	213f      	movs	r1, #63	@ 0x3f
 8003ab2:	400a      	ands	r2, r1
 8003ab4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003abe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d011      	beq.n	8003aec <HAL_DMA_Init+0xd8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d80d      	bhi.n	8003aec <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f000 fa2e 	bl	8003f34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003ae8:	605a      	str	r2, [r3, #4]
 8003aea:	e008      	b.n	8003afe <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2225      	movs	r2, #37	@ 0x25
 8003b08:	2101      	movs	r1, #1
 8003b0a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2224      	movs	r2, #36	@ 0x24
 8003b10:	2100      	movs	r1, #0
 8003b12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	0018      	movs	r0, r3
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	b002      	add	sp, #8
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	46c0      	nop			@ (mov r8, r8)
 8003b20:	bffdfff8 	.word	0xbffdfff8
 8003b24:	ffff800f 	.word	0xffff800f

08003b28 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
 8003b34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b36:	2317      	movs	r3, #23
 8003b38:	18fb      	adds	r3, r7, r3
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2224      	movs	r2, #36	@ 0x24
 8003b42:	5c9b      	ldrb	r3, [r3, r2]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_DMA_Start_IT+0x24>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e06f      	b.n	8003c2c <HAL_DMA_Start_IT+0x104>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2224      	movs	r2, #36	@ 0x24
 8003b50:	2101      	movs	r1, #1
 8003b52:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2225      	movs	r2, #37	@ 0x25
 8003b58:	5c9b      	ldrb	r3, [r3, r2]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d157      	bne.n	8003c10 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2225      	movs	r2, #37	@ 0x25
 8003b64:	2102      	movs	r1, #2
 8003b66:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2101      	movs	r1, #1
 8003b7a:	438a      	bics	r2, r1
 8003b7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f969 	bl	8003e5c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	210e      	movs	r1, #14
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	e00f      	b.n	8003bc4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2104      	movs	r1, #4
 8003bb0:	438a      	bics	r2, r1
 8003bb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	210a      	movs	r1, #10
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	2380      	movs	r3, #128	@ 0x80
 8003bcc:	025b      	lsls	r3, r3, #9
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d008      	beq.n	8003be4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bdc:	2180      	movs	r1, #128	@ 0x80
 8003bde:	0049      	lsls	r1, r1, #1
 8003be0:	430a      	orrs	r2, r1
 8003be2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf6:	2180      	movs	r1, #128	@ 0x80
 8003bf8:	0049      	lsls	r1, r1, #1
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2101      	movs	r1, #1
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	e00a      	b.n	8003c26 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2280      	movs	r2, #128	@ 0x80
 8003c14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2224      	movs	r2, #36	@ 0x24
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003c1e:	2317      	movs	r3, #23
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	2201      	movs	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003c26:	2317      	movs	r3, #23
 8003c28:	18fb      	adds	r3, r7, r3
 8003c2a:	781b      	ldrb	r3, [r3, #0]
}
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b006      	add	sp, #24
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e050      	b.n	8003ce8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2225      	movs	r2, #37	@ 0x25
 8003c4a:	5c9b      	ldrb	r3, [r3, r2]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d008      	beq.n	8003c64 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2204      	movs	r2, #4
 8003c56:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2224      	movs	r2, #36	@ 0x24
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e041      	b.n	8003ce8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	210e      	movs	r1, #14
 8003c70:	438a      	bics	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7e:	491c      	ldr	r1, [pc, #112]	@ (8003cf0 <HAL_DMA_Abort+0xbc>)
 8003c80:	400a      	ands	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2101      	movs	r1, #1
 8003c90:	438a      	bics	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003c94:	4b17      	ldr	r3, [pc, #92]	@ (8003cf4 <HAL_DMA_Abort+0xc0>)
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9c:	221c      	movs	r2, #28
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	4b13      	ldr	r3, [pc, #76]	@ (8003cf4 <HAL_DMA_Abort+0xc0>)
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003cb2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00c      	beq.n	8003cd6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc6:	490a      	ldr	r1, [pc, #40]	@ (8003cf0 <HAL_DMA_Abort+0xbc>)
 8003cc8:	400a      	ands	r2, r1
 8003cca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003cd4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2225      	movs	r2, #37	@ 0x25
 8003cda:	2101      	movs	r1, #1
 8003cdc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2224      	movs	r2, #36	@ 0x24
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	0018      	movs	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b002      	add	sp, #8
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	fffffeff 	.word	0xfffffeff
 8003cf4:	40020000 	.word	0x40020000

08003cf8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003d00:	4b55      	ldr	r3, [pc, #340]	@ (8003e58 <HAL_DMA_IRQHandler+0x160>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d12:	221c      	movs	r2, #28
 8003d14:	4013      	ands	r3, r2
 8003d16:	2204      	movs	r2, #4
 8003d18:	409a      	lsls	r2, r3
 8003d1a:	0013      	movs	r3, r2
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d027      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x7a>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2204      	movs	r2, #4
 8003d26:	4013      	ands	r3, r2
 8003d28:	d023      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2220      	movs	r2, #32
 8003d32:	4013      	ands	r3, r2
 8003d34:	d107      	bne.n	8003d46 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2104      	movs	r1, #4
 8003d42:	438a      	bics	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003d46:	4b44      	ldr	r3, [pc, #272]	@ (8003e58 <HAL_DMA_IRQHandler+0x160>)
 8003d48:	6859      	ldr	r1, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	221c      	movs	r2, #28
 8003d50:	4013      	ands	r3, r2
 8003d52:	2204      	movs	r2, #4
 8003d54:	409a      	lsls	r2, r3
 8003d56:	4b40      	ldr	r3, [pc, #256]	@ (8003e58 <HAL_DMA_IRQHandler+0x160>)
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d100      	bne.n	8003d66 <HAL_DMA_IRQHandler+0x6e>
 8003d64:	e073      	b.n	8003e4e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	0010      	movs	r0, r2
 8003d6e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003d70:	e06d      	b.n	8003e4e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	221c      	movs	r2, #28
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	0013      	movs	r3, r2
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4013      	ands	r3, r2
 8003d84:	d02e      	beq.n	8003de4 <HAL_DMA_IRQHandler+0xec>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	d02a      	beq.n	8003de4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2220      	movs	r2, #32
 8003d96:	4013      	ands	r3, r2
 8003d98:	d10b      	bne.n	8003db2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	210a      	movs	r1, #10
 8003da6:	438a      	bics	r2, r1
 8003da8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2225      	movs	r2, #37	@ 0x25
 8003dae:	2101      	movs	r1, #1
 8003db0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003db2:	4b29      	ldr	r3, [pc, #164]	@ (8003e58 <HAL_DMA_IRQHandler+0x160>)
 8003db4:	6859      	ldr	r1, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dba:	221c      	movs	r2, #28
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	4b25      	ldr	r3, [pc, #148]	@ (8003e58 <HAL_DMA_IRQHandler+0x160>)
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2224      	movs	r2, #36	@ 0x24
 8003dcc:	2100      	movs	r1, #0
 8003dce:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d03a      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	0010      	movs	r0, r2
 8003de0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003de2:	e034      	b.n	8003e4e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de8:	221c      	movs	r2, #28
 8003dea:	4013      	ands	r3, r2
 8003dec:	2208      	movs	r2, #8
 8003dee:	409a      	lsls	r2, r3
 8003df0:	0013      	movs	r3, r2
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4013      	ands	r3, r2
 8003df6:	d02b      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x158>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2208      	movs	r2, #8
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d027      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	210e      	movs	r1, #14
 8003e0c:	438a      	bics	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003e10:	4b11      	ldr	r3, [pc, #68]	@ (8003e58 <HAL_DMA_IRQHandler+0x160>)
 8003e12:	6859      	ldr	r1, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e18:	221c      	movs	r2, #28
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	4b0d      	ldr	r3, [pc, #52]	@ (8003e58 <HAL_DMA_IRQHandler+0x160>)
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2225      	movs	r2, #37	@ 0x25
 8003e30:	2101      	movs	r1, #1
 8003e32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2224      	movs	r2, #36	@ 0x24
 8003e38:	2100      	movs	r1, #0
 8003e3a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	0010      	movs	r0, r2
 8003e4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e4e:	46c0      	nop			@ (mov r8, r8)
 8003e50:	46c0      	nop			@ (mov r8, r8)
}
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b004      	add	sp, #16
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40020000 	.word	0x40020000

08003e5c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003e72:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d004      	beq.n	8003e86 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003e84:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003e86:	4b14      	ldr	r3, [pc, #80]	@ (8003ed8 <DMA_SetConfig+0x7c>)
 8003e88:	6859      	ldr	r1, [r3, #4]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	221c      	movs	r2, #28
 8003e90:	4013      	ands	r3, r2
 8003e92:	2201      	movs	r2, #1
 8003e94:	409a      	lsls	r2, r3
 8003e96:	4b10      	ldr	r3, [pc, #64]	@ (8003ed8 <DMA_SetConfig+0x7c>)
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d108      	bne.n	8003ebe <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ebc:	e007      	b.n	8003ece <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	60da      	str	r2, [r3, #12]
}
 8003ece:	46c0      	nop			@ (mov r8, r8)
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b004      	add	sp, #16
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	46c0      	nop			@ (mov r8, r8)
 8003ed8:	40020000 	.word	0x40020000

08003edc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee8:	089b      	lsrs	r3, r3, #2
 8003eea:	4a10      	ldr	r2, [pc, #64]	@ (8003f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003eec:	4694      	mov	ip, r2
 8003eee:	4463      	add	r3, ip
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	001a      	movs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	001a      	movs	r2, r3
 8003efe:	23ff      	movs	r3, #255	@ 0xff
 8003f00:	4013      	ands	r3, r2
 8003f02:	3b08      	subs	r3, #8
 8003f04:	2114      	movs	r1, #20
 8003f06:	0018      	movs	r0, r3
 8003f08:	f7fc f8fc 	bl	8000104 <__udivsi3>
 8003f0c:	0003      	movs	r3, r0
 8003f0e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a07      	ldr	r2, [pc, #28]	@ (8003f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003f14:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	221f      	movs	r2, #31
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003f24:	46c0      	nop			@ (mov r8, r8)
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b004      	add	sp, #16
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	10008200 	.word	0x10008200
 8003f30:	40020880 	.word	0x40020880

08003f34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	223f      	movs	r2, #63	@ 0x3f
 8003f42:	4013      	ands	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4a0a      	ldr	r2, [pc, #40]	@ (8003f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f4a:	4694      	mov	ip, r2
 8003f4c:	4463      	add	r3, ip
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	001a      	movs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a07      	ldr	r2, [pc, #28]	@ (8003f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	2203      	movs	r2, #3
 8003f62:	4013      	ands	r3, r2
 8003f64:	2201      	movs	r2, #1
 8003f66:	409a      	lsls	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003f6c:	46c0      	nop			@ (mov r8, r8)
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b004      	add	sp, #16
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	1000823f 	.word	0x1000823f
 8003f78:	40020940 	.word	0x40020940

08003f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f8a:	e147      	b.n	800421c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2101      	movs	r1, #1
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4091      	lsls	r1, r2
 8003f96:	000a      	movs	r2, r1
 8003f98:	4013      	ands	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d100      	bne.n	8003fa4 <HAL_GPIO_Init+0x28>
 8003fa2:	e138      	b.n	8004216 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2203      	movs	r2, #3
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d005      	beq.n	8003fbc <HAL_GPIO_Init+0x40>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d130      	bne.n	800401e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	0013      	movs	r3, r2
 8003fcc:	43da      	mvns	r2, r3
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	409a      	lsls	r2, r3
 8003fde:	0013      	movs	r3, r2
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	0013      	movs	r3, r2
 8003ffa:	43da      	mvns	r2, r3
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4013      	ands	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	2201      	movs	r2, #1
 800400a:	401a      	ands	r2, r3
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	409a      	lsls	r2, r3
 8004010:	0013      	movs	r3, r2
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2203      	movs	r2, #3
 8004024:	4013      	ands	r3, r2
 8004026:	2b03      	cmp	r3, #3
 8004028:	d017      	beq.n	800405a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	2203      	movs	r2, #3
 8004036:	409a      	lsls	r2, r3
 8004038:	0013      	movs	r3, r2
 800403a:	43da      	mvns	r2, r3
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	4013      	ands	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	409a      	lsls	r2, r3
 800404c:	0013      	movs	r3, r2
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2203      	movs	r2, #3
 8004060:	4013      	ands	r3, r2
 8004062:	2b02      	cmp	r3, #2
 8004064:	d123      	bne.n	80040ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	08da      	lsrs	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3208      	adds	r2, #8
 800406e:	0092      	lsls	r2, r2, #2
 8004070:	58d3      	ldr	r3, [r2, r3]
 8004072:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2207      	movs	r2, #7
 8004078:	4013      	ands	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	220f      	movs	r2, #15
 800407e:	409a      	lsls	r2, r3
 8004080:	0013      	movs	r3, r2
 8004082:	43da      	mvns	r2, r3
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2107      	movs	r1, #7
 8004092:	400b      	ands	r3, r1
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	409a      	lsls	r2, r3
 8004098:	0013      	movs	r3, r2
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	08da      	lsrs	r2, r3, #3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3208      	adds	r2, #8
 80040a8:	0092      	lsls	r2, r2, #2
 80040aa:	6939      	ldr	r1, [r7, #16]
 80040ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	2203      	movs	r2, #3
 80040ba:	409a      	lsls	r2, r3
 80040bc:	0013      	movs	r3, r2
 80040be:	43da      	mvns	r2, r3
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4013      	ands	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2203      	movs	r2, #3
 80040cc:	401a      	ands	r2, r3
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	409a      	lsls	r2, r3
 80040d4:	0013      	movs	r3, r2
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	23c0      	movs	r3, #192	@ 0xc0
 80040e8:	029b      	lsls	r3, r3, #10
 80040ea:	4013      	ands	r3, r2
 80040ec:	d100      	bne.n	80040f0 <HAL_GPIO_Init+0x174>
 80040ee:	e092      	b.n	8004216 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80040f0:	4a50      	ldr	r2, [pc, #320]	@ (8004234 <HAL_GPIO_Init+0x2b8>)
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	089b      	lsrs	r3, r3, #2
 80040f6:	3318      	adds	r3, #24
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	589b      	ldr	r3, [r3, r2]
 80040fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2203      	movs	r2, #3
 8004102:	4013      	ands	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	220f      	movs	r2, #15
 8004108:	409a      	lsls	r2, r3
 800410a:	0013      	movs	r3, r2
 800410c:	43da      	mvns	r2, r3
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4013      	ands	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	23a0      	movs	r3, #160	@ 0xa0
 8004118:	05db      	lsls	r3, r3, #23
 800411a:	429a      	cmp	r2, r3
 800411c:	d013      	beq.n	8004146 <HAL_GPIO_Init+0x1ca>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a45      	ldr	r2, [pc, #276]	@ (8004238 <HAL_GPIO_Init+0x2bc>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00d      	beq.n	8004142 <HAL_GPIO_Init+0x1c6>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a44      	ldr	r2, [pc, #272]	@ (800423c <HAL_GPIO_Init+0x2c0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d007      	beq.n	800413e <HAL_GPIO_Init+0x1c2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a43      	ldr	r2, [pc, #268]	@ (8004240 <HAL_GPIO_Init+0x2c4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d101      	bne.n	800413a <HAL_GPIO_Init+0x1be>
 8004136:	2303      	movs	r3, #3
 8004138:	e006      	b.n	8004148 <HAL_GPIO_Init+0x1cc>
 800413a:	2305      	movs	r3, #5
 800413c:	e004      	b.n	8004148 <HAL_GPIO_Init+0x1cc>
 800413e:	2302      	movs	r3, #2
 8004140:	e002      	b.n	8004148 <HAL_GPIO_Init+0x1cc>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <HAL_GPIO_Init+0x1cc>
 8004146:	2300      	movs	r3, #0
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	2103      	movs	r1, #3
 800414c:	400a      	ands	r2, r1
 800414e:	00d2      	lsls	r2, r2, #3
 8004150:	4093      	lsls	r3, r2
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004158:	4936      	ldr	r1, [pc, #216]	@ (8004234 <HAL_GPIO_Init+0x2b8>)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	089b      	lsrs	r3, r3, #2
 800415e:	3318      	adds	r3, #24
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004166:	4b33      	ldr	r3, [pc, #204]	@ (8004234 <HAL_GPIO_Init+0x2b8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	43da      	mvns	r2, r3
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4013      	ands	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	2380      	movs	r3, #128	@ 0x80
 800417c:	035b      	lsls	r3, r3, #13
 800417e:	4013      	ands	r3, r2
 8004180:	d003      	beq.n	800418a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800418a:	4b2a      	ldr	r3, [pc, #168]	@ (8004234 <HAL_GPIO_Init+0x2b8>)
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004190:	4b28      	ldr	r3, [pc, #160]	@ (8004234 <HAL_GPIO_Init+0x2b8>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	43da      	mvns	r2, r3
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	4013      	ands	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	2380      	movs	r3, #128	@ 0x80
 80041a6:	039b      	lsls	r3, r3, #14
 80041a8:	4013      	ands	r3, r2
 80041aa:	d003      	beq.n	80041b4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004234 <HAL_GPIO_Init+0x2b8>)
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80041ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004234 <HAL_GPIO_Init+0x2b8>)
 80041bc:	2384      	movs	r3, #132	@ 0x84
 80041be:	58d3      	ldr	r3, [r2, r3]
 80041c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	43da      	mvns	r2, r3
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4013      	ands	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	2380      	movs	r3, #128	@ 0x80
 80041d2:	029b      	lsls	r3, r3, #10
 80041d4:	4013      	ands	r3, r2
 80041d6:	d003      	beq.n	80041e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041e0:	4914      	ldr	r1, [pc, #80]	@ (8004234 <HAL_GPIO_Init+0x2b8>)
 80041e2:	2284      	movs	r2, #132	@ 0x84
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80041e8:	4a12      	ldr	r2, [pc, #72]	@ (8004234 <HAL_GPIO_Init+0x2b8>)
 80041ea:	2380      	movs	r3, #128	@ 0x80
 80041ec:	58d3      	ldr	r3, [r2, r3]
 80041ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	43da      	mvns	r2, r3
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4013      	ands	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	2380      	movs	r3, #128	@ 0x80
 8004200:	025b      	lsls	r3, r3, #9
 8004202:	4013      	ands	r3, r2
 8004204:	d003      	beq.n	800420e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800420e:	4909      	ldr	r1, [pc, #36]	@ (8004234 <HAL_GPIO_Init+0x2b8>)
 8004210:	2280      	movs	r2, #128	@ 0x80
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	3301      	adds	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	40da      	lsrs	r2, r3
 8004224:	1e13      	subs	r3, r2, #0
 8004226:	d000      	beq.n	800422a <HAL_GPIO_Init+0x2ae>
 8004228:	e6b0      	b.n	8003f8c <HAL_GPIO_Init+0x10>
  }
}
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	46c0      	nop			@ (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b006      	add	sp, #24
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40021800 	.word	0x40021800
 8004238:	50000400 	.word	0x50000400
 800423c:	50000800 	.word	0x50000800
 8004240:	50000c00 	.word	0x50000c00

08004244 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	000a      	movs	r2, r1
 800424e:	1cbb      	adds	r3, r7, #2
 8004250:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	1cba      	adds	r2, r7, #2
 8004258:	8812      	ldrh	r2, [r2, #0]
 800425a:	4013      	ands	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800425e:	230f      	movs	r3, #15
 8004260:	18fb      	adds	r3, r7, r3
 8004262:	2201      	movs	r2, #1
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	e003      	b.n	8004270 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004268:	230f      	movs	r3, #15
 800426a:	18fb      	adds	r3, r7, r3
 800426c:	2200      	movs	r2, #0
 800426e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004270:	230f      	movs	r3, #15
 8004272:	18fb      	adds	r3, r7, r3
 8004274:	781b      	ldrb	r3, [r3, #0]
}
 8004276:	0018      	movs	r0, r3
 8004278:	46bd      	mov	sp, r7
 800427a:	b004      	add	sp, #16
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	0008      	movs	r0, r1
 8004288:	0011      	movs	r1, r2
 800428a:	1cbb      	adds	r3, r7, #2
 800428c:	1c02      	adds	r2, r0, #0
 800428e:	801a      	strh	r2, [r3, #0]
 8004290:	1c7b      	adds	r3, r7, #1
 8004292:	1c0a      	adds	r2, r1, #0
 8004294:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004296:	1c7b      	adds	r3, r7, #1
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d004      	beq.n	80042a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800429e:	1cbb      	adds	r3, r7, #2
 80042a0:	881a      	ldrh	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042a6:	e003      	b.n	80042b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042a8:	1cbb      	adds	r3, r7, #2
 80042aa:	881a      	ldrh	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80042b0:	46c0      	nop			@ (mov r8, r8)
 80042b2:	46bd      	mov	sp, r7
 80042b4:	b002      	add	sp, #8
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	000a      	movs	r2, r1
 80042c2:	1cbb      	adds	r3, r7, #2
 80042c4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042cc:	1cbb      	adds	r3, r7, #2
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4013      	ands	r3, r2
 80042d4:	041a      	lsls	r2, r3, #16
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	43db      	mvns	r3, r3
 80042da:	1cb9      	adds	r1, r7, #2
 80042dc:	8809      	ldrh	r1, [r1, #0]
 80042de:	400b      	ands	r3, r1
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	619a      	str	r2, [r3, #24]
}
 80042e6:	46c0      	nop			@ (mov r8, r8)
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b004      	add	sp, #16
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	0002      	movs	r2, r0
 80042f8:	1dbb      	adds	r3, r7, #6
 80042fa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80042fc:	4b10      	ldr	r3, [pc, #64]	@ (8004340 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	1dba      	adds	r2, r7, #6
 8004302:	8812      	ldrh	r2, [r2, #0]
 8004304:	4013      	ands	r3, r2
 8004306:	d008      	beq.n	800431a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004308:	4b0d      	ldr	r3, [pc, #52]	@ (8004340 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800430a:	1dba      	adds	r2, r7, #6
 800430c:	8812      	ldrh	r2, [r2, #0]
 800430e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004310:	1dbb      	adds	r3, r7, #6
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	0018      	movs	r0, r3
 8004316:	f7fe f885 	bl	8002424 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800431a:	4b09      	ldr	r3, [pc, #36]	@ (8004340 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	1dba      	adds	r2, r7, #6
 8004320:	8812      	ldrh	r2, [r2, #0]
 8004322:	4013      	ands	r3, r2
 8004324:	d008      	beq.n	8004338 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004326:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004328:	1dba      	adds	r2, r7, #6
 800432a:	8812      	ldrh	r2, [r2, #0]
 800432c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800432e:	1dbb      	adds	r3, r7, #6
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	0018      	movs	r0, r3
 8004334:	f7fe f822 	bl	800237c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004338:	46c0      	nop			@ (mov r8, r8)
 800433a:	46bd      	mov	sp, r7
 800433c:	b002      	add	sp, #8
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40021800 	.word	0x40021800

08004344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e08f      	b.n	8004476 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2241      	movs	r2, #65	@ 0x41
 800435a:	5c9b      	ldrb	r3, [r3, r2]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d107      	bne.n	8004372 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2240      	movs	r2, #64	@ 0x40
 8004366:	2100      	movs	r1, #0
 8004368:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	0018      	movs	r0, r3
 800436e:	f7fe fe93 	bl	8003098 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2241      	movs	r2, #65	@ 0x41
 8004376:	2124      	movs	r1, #36	@ 0x24
 8004378:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2101      	movs	r1, #1
 8004386:	438a      	bics	r2, r1
 8004388:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	493b      	ldr	r1, [pc, #236]	@ (8004480 <HAL_I2C_Init+0x13c>)
 8004394:	400a      	ands	r2, r1
 8004396:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4938      	ldr	r1, [pc, #224]	@ (8004484 <HAL_I2C_Init+0x140>)
 80043a4:	400a      	ands	r2, r1
 80043a6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d108      	bne.n	80043c2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2180      	movs	r1, #128	@ 0x80
 80043ba:	0209      	lsls	r1, r1, #8
 80043bc:	430a      	orrs	r2, r1
 80043be:	609a      	str	r2, [r3, #8]
 80043c0:	e007      	b.n	80043d2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2184      	movs	r1, #132	@ 0x84
 80043cc:	0209      	lsls	r1, r1, #8
 80043ce:	430a      	orrs	r2, r1
 80043d0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d109      	bne.n	80043ee <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2180      	movs	r1, #128	@ 0x80
 80043e6:	0109      	lsls	r1, r1, #4
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
 80043ec:	e007      	b.n	80043fe <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4923      	ldr	r1, [pc, #140]	@ (8004488 <HAL_I2C_Init+0x144>)
 80043fa:	400a      	ands	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4920      	ldr	r1, [pc, #128]	@ (800448c <HAL_I2C_Init+0x148>)
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	491a      	ldr	r1, [pc, #104]	@ (8004484 <HAL_I2C_Init+0x140>)
 800441a:	400a      	ands	r2, r1
 800441c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	431a      	orrs	r2, r3
 8004428:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69d9      	ldr	r1, [r3, #28]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1a      	ldr	r2, [r3, #32]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2101      	movs	r1, #1
 8004454:	430a      	orrs	r2, r1
 8004456:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2241      	movs	r2, #65	@ 0x41
 8004462:	2120      	movs	r1, #32
 8004464:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2242      	movs	r2, #66	@ 0x42
 8004470:	2100      	movs	r1, #0
 8004472:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	0018      	movs	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	b002      	add	sp, #8
 800447c:	bd80      	pop	{r7, pc}
 800447e:	46c0      	nop			@ (mov r8, r8)
 8004480:	f0ffffff 	.word	0xf0ffffff
 8004484:	ffff7fff 	.word	0xffff7fff
 8004488:	fffff7ff 	.word	0xfffff7ff
 800448c:	02008000 	.word	0x02008000

08004490 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004490:	b590      	push	{r4, r7, lr}
 8004492:	b089      	sub	sp, #36	@ 0x24
 8004494:	af02      	add	r7, sp, #8
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	0008      	movs	r0, r1
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	0019      	movs	r1, r3
 800449e:	230a      	movs	r3, #10
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	1c02      	adds	r2, r0, #0
 80044a4:	801a      	strh	r2, [r3, #0]
 80044a6:	2308      	movs	r3, #8
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	1c0a      	adds	r2, r1, #0
 80044ac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2241      	movs	r2, #65	@ 0x41
 80044b2:	5c9b      	ldrb	r3, [r3, r2]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d000      	beq.n	80044bc <HAL_I2C_Master_Transmit+0x2c>
 80044ba:	e10a      	b.n	80046d2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2240      	movs	r2, #64	@ 0x40
 80044c0:	5c9b      	ldrb	r3, [r3, r2]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_I2C_Master_Transmit+0x3a>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e104      	b.n	80046d4 <HAL_I2C_Master_Transmit+0x244>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2240      	movs	r2, #64	@ 0x40
 80044ce:	2101      	movs	r1, #1
 80044d0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044d2:	f7ff f9b7 	bl	8003844 <HAL_GetTick>
 80044d6:	0003      	movs	r3, r0
 80044d8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044da:	2380      	movs	r3, #128	@ 0x80
 80044dc:	0219      	lsls	r1, r3, #8
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	2319      	movs	r3, #25
 80044e6:	2201      	movs	r2, #1
 80044e8:	f000 fa26 	bl	8004938 <I2C_WaitOnFlagUntilTimeout>
 80044ec:	1e03      	subs	r3, r0, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0ef      	b.n	80046d4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2241      	movs	r2, #65	@ 0x41
 80044f8:	2121      	movs	r1, #33	@ 0x21
 80044fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2242      	movs	r2, #66	@ 0x42
 8004500:	2110      	movs	r1, #16
 8004502:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2208      	movs	r2, #8
 8004514:	18ba      	adds	r2, r7, r2
 8004516:	8812      	ldrh	r2, [r2, #0]
 8004518:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004524:	b29b      	uxth	r3, r3
 8004526:	2bff      	cmp	r3, #255	@ 0xff
 8004528:	d906      	bls.n	8004538 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	22ff      	movs	r2, #255	@ 0xff
 800452e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004530:	2380      	movs	r3, #128	@ 0x80
 8004532:	045b      	lsls	r3, r3, #17
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	e007      	b.n	8004548 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004542:	2380      	movs	r3, #128	@ 0x80
 8004544:	049b      	lsls	r3, r3, #18
 8004546:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800454c:	2b00      	cmp	r3, #0
 800454e:	d027      	beq.n	80045a0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	781a      	ldrb	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004584:	b2db      	uxtb	r3, r3
 8004586:	3301      	adds	r3, #1
 8004588:	b2da      	uxtb	r2, r3
 800458a:	697c      	ldr	r4, [r7, #20]
 800458c:	230a      	movs	r3, #10
 800458e:	18fb      	adds	r3, r7, r3
 8004590:	8819      	ldrh	r1, [r3, #0]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	4b51      	ldr	r3, [pc, #324]	@ (80046dc <HAL_I2C_Master_Transmit+0x24c>)
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	0023      	movs	r3, r4
 800459a:	f000 fc45 	bl	8004e28 <I2C_TransferConfig>
 800459e:	e06f      	b.n	8004680 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	697c      	ldr	r4, [r7, #20]
 80045a8:	230a      	movs	r3, #10
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	8819      	ldrh	r1, [r3, #0]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	4b4a      	ldr	r3, [pc, #296]	@ (80046dc <HAL_I2C_Master_Transmit+0x24c>)
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	0023      	movs	r3, r4
 80045b6:	f000 fc37 	bl	8004e28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80045ba:	e061      	b.n	8004680 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	0018      	movs	r0, r3
 80045c4:	f000 fa10 	bl	80049e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80045c8:	1e03      	subs	r3, r0, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e081      	b.n	80046d4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d03a      	beq.n	8004680 <HAL_I2C_Master_Transmit+0x1f0>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460e:	2b00      	cmp	r3, #0
 8004610:	d136      	bne.n	8004680 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004612:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	0013      	movs	r3, r2
 800461c:	2200      	movs	r2, #0
 800461e:	2180      	movs	r1, #128	@ 0x80
 8004620:	f000 f98a 	bl	8004938 <I2C_WaitOnFlagUntilTimeout>
 8004624:	1e03      	subs	r3, r0, #0
 8004626:	d001      	beq.n	800462c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e053      	b.n	80046d4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	2bff      	cmp	r3, #255	@ 0xff
 8004634:	d911      	bls.n	800465a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	22ff      	movs	r2, #255	@ 0xff
 800463a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004640:	b2da      	uxtb	r2, r3
 8004642:	2380      	movs	r3, #128	@ 0x80
 8004644:	045c      	lsls	r4, r3, #17
 8004646:	230a      	movs	r3, #10
 8004648:	18fb      	adds	r3, r7, r3
 800464a:	8819      	ldrh	r1, [r3, #0]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	2300      	movs	r3, #0
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	0023      	movs	r3, r4
 8004654:	f000 fbe8 	bl	8004e28 <I2C_TransferConfig>
 8004658:	e012      	b.n	8004680 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004668:	b2da      	uxtb	r2, r3
 800466a:	2380      	movs	r3, #128	@ 0x80
 800466c:	049c      	lsls	r4, r3, #18
 800466e:	230a      	movs	r3, #10
 8004670:	18fb      	adds	r3, r7, r3
 8004672:	8819      	ldrh	r1, [r3, #0]
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	2300      	movs	r3, #0
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	0023      	movs	r3, r4
 800467c:	f000 fbd4 	bl	8004e28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004684:	b29b      	uxth	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d198      	bne.n	80045bc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	0018      	movs	r0, r3
 8004692:	f000 f9ef 	bl	8004a74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004696:	1e03      	subs	r3, r0, #0
 8004698:	d001      	beq.n	800469e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e01a      	b.n	80046d4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2220      	movs	r2, #32
 80046a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	490b      	ldr	r1, [pc, #44]	@ (80046e0 <HAL_I2C_Master_Transmit+0x250>)
 80046b2:	400a      	ands	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2241      	movs	r2, #65	@ 0x41
 80046ba:	2120      	movs	r1, #32
 80046bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2242      	movs	r2, #66	@ 0x42
 80046c2:	2100      	movs	r1, #0
 80046c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2240      	movs	r2, #64	@ 0x40
 80046ca:	2100      	movs	r1, #0
 80046cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	e000      	b.n	80046d4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80046d2:	2302      	movs	r3, #2
  }
}
 80046d4:	0018      	movs	r0, r3
 80046d6:	46bd      	mov	sp, r7
 80046d8:	b007      	add	sp, #28
 80046da:	bd90      	pop	{r4, r7, pc}
 80046dc:	80002000 	.word	0x80002000
 80046e0:	fe00e800 	.word	0xfe00e800

080046e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80046e4:	b590      	push	{r4, r7, lr}
 80046e6:	b089      	sub	sp, #36	@ 0x24
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	0008      	movs	r0, r1
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	0019      	movs	r1, r3
 80046f2:	230a      	movs	r3, #10
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	1c02      	adds	r2, r0, #0
 80046f8:	801a      	strh	r2, [r3, #0]
 80046fa:	2308      	movs	r3, #8
 80046fc:	18fb      	adds	r3, r7, r3
 80046fe:	1c0a      	adds	r2, r1, #0
 8004700:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2241      	movs	r2, #65	@ 0x41
 8004706:	5c9b      	ldrb	r3, [r3, r2]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b20      	cmp	r3, #32
 800470c:	d000      	beq.n	8004710 <HAL_I2C_Master_Receive+0x2c>
 800470e:	e0e8      	b.n	80048e2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2240      	movs	r2, #64	@ 0x40
 8004714:	5c9b      	ldrb	r3, [r3, r2]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_I2C_Master_Receive+0x3a>
 800471a:	2302      	movs	r3, #2
 800471c:	e0e2      	b.n	80048e4 <HAL_I2C_Master_Receive+0x200>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2240      	movs	r2, #64	@ 0x40
 8004722:	2101      	movs	r1, #1
 8004724:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004726:	f7ff f88d 	bl	8003844 <HAL_GetTick>
 800472a:	0003      	movs	r3, r0
 800472c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800472e:	2380      	movs	r3, #128	@ 0x80
 8004730:	0219      	lsls	r1, r3, #8
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	2319      	movs	r3, #25
 800473a:	2201      	movs	r2, #1
 800473c:	f000 f8fc 	bl	8004938 <I2C_WaitOnFlagUntilTimeout>
 8004740:	1e03      	subs	r3, r0, #0
 8004742:	d001      	beq.n	8004748 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0cd      	b.n	80048e4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2241      	movs	r2, #65	@ 0x41
 800474c:	2122      	movs	r1, #34	@ 0x22
 800474e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2242      	movs	r2, #66	@ 0x42
 8004754:	2110      	movs	r1, #16
 8004756:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2208      	movs	r2, #8
 8004768:	18ba      	adds	r2, r7, r2
 800476a:	8812      	ldrh	r2, [r2, #0]
 800476c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004778:	b29b      	uxth	r3, r3
 800477a:	2bff      	cmp	r3, #255	@ 0xff
 800477c:	d911      	bls.n	80047a2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	22ff      	movs	r2, #255	@ 0xff
 8004782:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004788:	b2da      	uxtb	r2, r3
 800478a:	2380      	movs	r3, #128	@ 0x80
 800478c:	045c      	lsls	r4, r3, #17
 800478e:	230a      	movs	r3, #10
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	8819      	ldrh	r1, [r3, #0]
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	4b55      	ldr	r3, [pc, #340]	@ (80048ec <HAL_I2C_Master_Receive+0x208>)
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	0023      	movs	r3, r4
 800479c:	f000 fb44 	bl	8004e28 <I2C_TransferConfig>
 80047a0:	e076      	b.n	8004890 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	2380      	movs	r3, #128	@ 0x80
 80047b4:	049c      	lsls	r4, r3, #18
 80047b6:	230a      	movs	r3, #10
 80047b8:	18fb      	adds	r3, r7, r3
 80047ba:	8819      	ldrh	r1, [r3, #0]
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	4b4b      	ldr	r3, [pc, #300]	@ (80048ec <HAL_I2C_Master_Receive+0x208>)
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	0023      	movs	r3, r4
 80047c4:	f000 fb30 	bl	8004e28 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80047c8:	e062      	b.n	8004890 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f000 f993 	bl	8004afc <I2C_WaitOnRXNEFlagUntilTimeout>
 80047d6:	1e03      	subs	r3, r0, #0
 80047d8:	d001      	beq.n	80047de <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e082      	b.n	80048e4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d03a      	beq.n	8004890 <HAL_I2C_Master_Receive+0x1ac>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800481e:	2b00      	cmp	r3, #0
 8004820:	d136      	bne.n	8004890 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004822:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	0013      	movs	r3, r2
 800482c:	2200      	movs	r2, #0
 800482e:	2180      	movs	r1, #128	@ 0x80
 8004830:	f000 f882 	bl	8004938 <I2C_WaitOnFlagUntilTimeout>
 8004834:	1e03      	subs	r3, r0, #0
 8004836:	d001      	beq.n	800483c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e053      	b.n	80048e4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	2bff      	cmp	r3, #255	@ 0xff
 8004844:	d911      	bls.n	800486a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	22ff      	movs	r2, #255	@ 0xff
 800484a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004850:	b2da      	uxtb	r2, r3
 8004852:	2380      	movs	r3, #128	@ 0x80
 8004854:	045c      	lsls	r4, r3, #17
 8004856:	230a      	movs	r3, #10
 8004858:	18fb      	adds	r3, r7, r3
 800485a:	8819      	ldrh	r1, [r3, #0]
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	2300      	movs	r3, #0
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	0023      	movs	r3, r4
 8004864:	f000 fae0 	bl	8004e28 <I2C_TransferConfig>
 8004868:	e012      	b.n	8004890 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004878:	b2da      	uxtb	r2, r3
 800487a:	2380      	movs	r3, #128	@ 0x80
 800487c:	049c      	lsls	r4, r3, #18
 800487e:	230a      	movs	r3, #10
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	8819      	ldrh	r1, [r3, #0]
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	2300      	movs	r3, #0
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	0023      	movs	r3, r4
 800488c:	f000 facc 	bl	8004e28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d197      	bne.n	80047ca <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	0018      	movs	r0, r3
 80048a2:	f000 f8e7 	bl	8004a74 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048a6:	1e03      	subs	r3, r0, #0
 80048a8:	d001      	beq.n	80048ae <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e01a      	b.n	80048e4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2220      	movs	r2, #32
 80048b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	490b      	ldr	r1, [pc, #44]	@ (80048f0 <HAL_I2C_Master_Receive+0x20c>)
 80048c2:	400a      	ands	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2241      	movs	r2, #65	@ 0x41
 80048ca:	2120      	movs	r1, #32
 80048cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2242      	movs	r2, #66	@ 0x42
 80048d2:	2100      	movs	r1, #0
 80048d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2240      	movs	r2, #64	@ 0x40
 80048da:	2100      	movs	r1, #0
 80048dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	e000      	b.n	80048e4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80048e2:	2302      	movs	r3, #2
  }
}
 80048e4:	0018      	movs	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	b007      	add	sp, #28
 80048ea:	bd90      	pop	{r4, r7, pc}
 80048ec:	80002400 	.word	0x80002400
 80048f0:	fe00e800 	.word	0xfe00e800

080048f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2202      	movs	r2, #2
 8004904:	4013      	ands	r3, r2
 8004906:	2b02      	cmp	r3, #2
 8004908:	d103      	bne.n	8004912 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2200      	movs	r2, #0
 8004910:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	2201      	movs	r2, #1
 800491a:	4013      	ands	r3, r2
 800491c:	2b01      	cmp	r3, #1
 800491e:	d007      	beq.n	8004930 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2101      	movs	r1, #1
 800492c:	430a      	orrs	r2, r1
 800492e:	619a      	str	r2, [r3, #24]
  }
}
 8004930:	46c0      	nop			@ (mov r8, r8)
 8004932:	46bd      	mov	sp, r7
 8004934:	b002      	add	sp, #8
 8004936:	bd80      	pop	{r7, pc}

08004938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	1dfb      	adds	r3, r7, #7
 8004946:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004948:	e03a      	b.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	6839      	ldr	r1, [r7, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	0018      	movs	r0, r3
 8004952:	f000 f971 	bl	8004c38 <I2C_IsErrorOccurred>
 8004956:	1e03      	subs	r3, r0, #0
 8004958:	d001      	beq.n	800495e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e040      	b.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	3301      	adds	r3, #1
 8004962:	d02d      	beq.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004964:	f7fe ff6e 	bl	8003844 <HAL_GetTick>
 8004968:	0002      	movs	r2, r0
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d302      	bcc.n	800497a <I2C_WaitOnFlagUntilTimeout+0x42>
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d122      	bne.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	4013      	ands	r3, r2
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	425a      	negs	r2, r3
 800498a:	4153      	adcs	r3, r2
 800498c:	b2db      	uxtb	r3, r3
 800498e:	001a      	movs	r2, r3
 8004990:	1dfb      	adds	r3, r7, #7
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d113      	bne.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499c:	2220      	movs	r2, #32
 800499e:	431a      	orrs	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2241      	movs	r2, #65	@ 0x41
 80049a8:	2120      	movs	r1, #32
 80049aa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2242      	movs	r2, #66	@ 0x42
 80049b0:	2100      	movs	r1, #0
 80049b2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2240      	movs	r2, #64	@ 0x40
 80049b8:	2100      	movs	r1, #0
 80049ba:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e00f      	b.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	4013      	ands	r3, r2
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	425a      	negs	r2, r3
 80049d0:	4153      	adcs	r3, r2
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	001a      	movs	r2, r3
 80049d6:	1dfb      	adds	r3, r7, #7
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d0b5      	beq.n	800494a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	0018      	movs	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b004      	add	sp, #16
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049f4:	e032      	b.n	8004a5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	68b9      	ldr	r1, [r7, #8]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f000 f91b 	bl	8004c38 <I2C_IsErrorOccurred>
 8004a02:	1e03      	subs	r3, r0, #0
 8004a04:	d001      	beq.n	8004a0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e030      	b.n	8004a6c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	d025      	beq.n	8004a5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a10:	f7fe ff18 	bl	8003844 <HAL_GetTick>
 8004a14:	0002      	movs	r2, r0
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d302      	bcc.n	8004a26 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d11a      	bne.n	8004a5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d013      	beq.n	8004a5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a38:	2220      	movs	r2, #32
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2241      	movs	r2, #65	@ 0x41
 8004a44:	2120      	movs	r1, #32
 8004a46:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2242      	movs	r2, #66	@ 0x42
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2240      	movs	r2, #64	@ 0x40
 8004a54:	2100      	movs	r1, #0
 8004a56:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e007      	b.n	8004a6c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	2202      	movs	r2, #2
 8004a64:	4013      	ands	r3, r2
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d1c5      	bne.n	80049f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b004      	add	sp, #16
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a80:	e02f      	b.n	8004ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f000 f8d5 	bl	8004c38 <I2C_IsErrorOccurred>
 8004a8e:	1e03      	subs	r3, r0, #0
 8004a90:	d001      	beq.n	8004a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e02d      	b.n	8004af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a96:	f7fe fed5 	bl	8003844 <HAL_GetTick>
 8004a9a:	0002      	movs	r2, r0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d302      	bcc.n	8004aac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d11a      	bne.n	8004ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	d013      	beq.n	8004ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abe:	2220      	movs	r2, #32
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2241      	movs	r2, #65	@ 0x41
 8004aca:	2120      	movs	r1, #32
 8004acc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2242      	movs	r2, #66	@ 0x42
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2240      	movs	r2, #64	@ 0x40
 8004ada:	2100      	movs	r1, #0
 8004adc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e007      	b.n	8004af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	d1c8      	bne.n	8004a82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	0018      	movs	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	b004      	add	sp, #16
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b08:	2317      	movs	r3, #23
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004b10:	e07b      	b.n	8004c0a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	68b9      	ldr	r1, [r7, #8]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f000 f88d 	bl	8004c38 <I2C_IsErrorOccurred>
 8004b1e:	1e03      	subs	r3, r0, #0
 8004b20:	d003      	beq.n	8004b2a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004b22:	2317      	movs	r3, #23
 8004b24:	18fb      	adds	r3, r7, r3
 8004b26:	2201      	movs	r2, #1
 8004b28:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	2220      	movs	r2, #32
 8004b32:	4013      	ands	r3, r2
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d140      	bne.n	8004bba <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004b38:	2117      	movs	r1, #23
 8004b3a:	187b      	adds	r3, r7, r1
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d13b      	bne.n	8004bba <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	2204      	movs	r2, #4
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d106      	bne.n	8004b5e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004b58:	187b      	adds	r3, r7, r1
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	2210      	movs	r2, #16
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d123      	bne.n	8004bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2210      	movs	r2, #16
 8004b72:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2204      	movs	r2, #4
 8004b78:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4929      	ldr	r1, [pc, #164]	@ (8004c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004b8e:	400a      	ands	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2241      	movs	r2, #65	@ 0x41
 8004b96:	2120      	movs	r1, #32
 8004b98:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2242      	movs	r2, #66	@ 0x42
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2240      	movs	r2, #64	@ 0x40
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004baa:	2317      	movs	r3, #23
 8004bac:	18fb      	adds	r3, r7, r3
 8004bae:	2201      	movs	r2, #1
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	e002      	b.n	8004bba <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004bba:	f7fe fe43 	bl	8003844 <HAL_GetTick>
 8004bbe:	0002      	movs	r2, r0
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d302      	bcc.n	8004bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d11c      	bne.n	8004c0a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004bd0:	2017      	movs	r0, #23
 8004bd2:	183b      	adds	r3, r7, r0
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d117      	bne.n	8004c0a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	2204      	movs	r2, #4
 8004be2:	4013      	ands	r3, r2
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d010      	beq.n	8004c0a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bec:	2220      	movs	r2, #32
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2241      	movs	r2, #65	@ 0x41
 8004bf8:	2120      	movs	r1, #32
 8004bfa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2240      	movs	r2, #64	@ 0x40
 8004c00:	2100      	movs	r1, #0
 8004c02:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004c04:	183b      	adds	r3, r7, r0
 8004c06:	2201      	movs	r2, #1
 8004c08:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	2204      	movs	r2, #4
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d005      	beq.n	8004c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004c18:	2317      	movs	r3, #23
 8004c1a:	18fb      	adds	r3, r7, r3
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d100      	bne.n	8004c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004c22:	e776      	b.n	8004b12 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004c24:	2317      	movs	r3, #23
 8004c26:	18fb      	adds	r3, r7, r3
 8004c28:	781b      	ldrb	r3, [r3, #0]
}
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b006      	add	sp, #24
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	46c0      	nop			@ (mov r8, r8)
 8004c34:	fe00e800 	.word	0xfe00e800

08004c38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	@ 0x28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c44:	2327      	movs	r3, #39	@ 0x27
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	2200      	movs	r2, #0
 8004c4a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2210      	movs	r2, #16
 8004c60:	4013      	ands	r3, r2
 8004c62:	d100      	bne.n	8004c66 <I2C_IsErrorOccurred+0x2e>
 8004c64:	e079      	b.n	8004d5a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2210      	movs	r2, #16
 8004c6c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c6e:	e057      	b.n	8004d20 <I2C_IsErrorOccurred+0xe8>
 8004c70:	2227      	movs	r2, #39	@ 0x27
 8004c72:	18bb      	adds	r3, r7, r2
 8004c74:	18ba      	adds	r2, r7, r2
 8004c76:	7812      	ldrb	r2, [r2, #0]
 8004c78:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	d04f      	beq.n	8004d20 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c80:	f7fe fde0 	bl	8003844 <HAL_GetTick>
 8004c84:	0002      	movs	r2, r0
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d302      	bcc.n	8004c96 <I2C_IsErrorOccurred+0x5e>
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d144      	bne.n	8004d20 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	2380      	movs	r3, #128	@ 0x80
 8004c9e:	01db      	lsls	r3, r3, #7
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ca4:	2013      	movs	r0, #19
 8004ca6:	183b      	adds	r3, r7, r0
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	2142      	movs	r1, #66	@ 0x42
 8004cac:	5c52      	ldrb	r2, [r2, r1]
 8004cae:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	2380      	movs	r3, #128	@ 0x80
 8004cb8:	021b      	lsls	r3, r3, #8
 8004cba:	401a      	ands	r2, r3
 8004cbc:	2380      	movs	r3, #128	@ 0x80
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d126      	bne.n	8004d12 <I2C_IsErrorOccurred+0xda>
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	2380      	movs	r3, #128	@ 0x80
 8004cc8:	01db      	lsls	r3, r3, #7
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d021      	beq.n	8004d12 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004cce:	183b      	adds	r3, r7, r0
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d01d      	beq.n	8004d12 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2180      	movs	r1, #128	@ 0x80
 8004ce2:	01c9      	lsls	r1, r1, #7
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ce8:	f7fe fdac 	bl	8003844 <HAL_GetTick>
 8004cec:	0003      	movs	r3, r0
 8004cee:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cf0:	e00f      	b.n	8004d12 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004cf2:	f7fe fda7 	bl	8003844 <HAL_GetTick>
 8004cf6:	0002      	movs	r2, r0
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b19      	cmp	r3, #25
 8004cfe:	d908      	bls.n	8004d12 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	2220      	movs	r2, #32
 8004d04:	4313      	orrs	r3, r2
 8004d06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004d08:	2327      	movs	r3, #39	@ 0x27
 8004d0a:	18fb      	adds	r3, r7, r3
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	701a      	strb	r2, [r3, #0]

              break;
 8004d10:	e006      	b.n	8004d20 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d1e8      	bne.n	8004cf2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2220      	movs	r2, #32
 8004d28:	4013      	ands	r3, r2
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	d004      	beq.n	8004d38 <I2C_IsErrorOccurred+0x100>
 8004d2e:	2327      	movs	r3, #39	@ 0x27
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d09b      	beq.n	8004c70 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d38:	2327      	movs	r3, #39	@ 0x27
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d103      	bne.n	8004d4a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2220      	movs	r2, #32
 8004d48:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	2204      	movs	r2, #4
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d52:	2327      	movs	r3, #39	@ 0x27
 8004d54:	18fb      	adds	r3, r7, r3
 8004d56:	2201      	movs	r2, #1
 8004d58:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	2380      	movs	r3, #128	@ 0x80
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d00c      	beq.n	8004d86 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	4313      	orrs	r3, r2
 8004d72:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2280      	movs	r2, #128	@ 0x80
 8004d7a:	0052      	lsls	r2, r2, #1
 8004d7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d7e:	2327      	movs	r3, #39	@ 0x27
 8004d80:	18fb      	adds	r3, r7, r3
 8004d82:	2201      	movs	r2, #1
 8004d84:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	2380      	movs	r3, #128	@ 0x80
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d00c      	beq.n	8004daa <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	2208      	movs	r2, #8
 8004d94:	4313      	orrs	r3, r2
 8004d96:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2280      	movs	r2, #128	@ 0x80
 8004d9e:	00d2      	lsls	r2, r2, #3
 8004da0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004da2:	2327      	movs	r3, #39	@ 0x27
 8004da4:	18fb      	adds	r3, r7, r3
 8004da6:	2201      	movs	r2, #1
 8004da8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	2380      	movs	r3, #128	@ 0x80
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4013      	ands	r3, r2
 8004db2:	d00c      	beq.n	8004dce <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	2202      	movs	r2, #2
 8004db8:	4313      	orrs	r3, r2
 8004dba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2280      	movs	r2, #128	@ 0x80
 8004dc2:	0092      	lsls	r2, r2, #2
 8004dc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dc6:	2327      	movs	r3, #39	@ 0x27
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	2201      	movs	r2, #1
 8004dcc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004dce:	2327      	movs	r3, #39	@ 0x27
 8004dd0:	18fb      	adds	r3, r7, r3
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01d      	beq.n	8004e14 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f7ff fd8a 	bl	80048f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	490e      	ldr	r1, [pc, #56]	@ (8004e24 <I2C_IsErrorOccurred+0x1ec>)
 8004dec:	400a      	ands	r2, r1
 8004dee:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2241      	movs	r2, #65	@ 0x41
 8004e00:	2120      	movs	r1, #32
 8004e02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2242      	movs	r2, #66	@ 0x42
 8004e08:	2100      	movs	r1, #0
 8004e0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2240      	movs	r2, #64	@ 0x40
 8004e10:	2100      	movs	r1, #0
 8004e12:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004e14:	2327      	movs	r3, #39	@ 0x27
 8004e16:	18fb      	adds	r3, r7, r3
 8004e18:	781b      	ldrb	r3, [r3, #0]
}
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b00a      	add	sp, #40	@ 0x28
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	46c0      	nop			@ (mov r8, r8)
 8004e24:	fe00e800 	.word	0xfe00e800

08004e28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e28:	b590      	push	{r4, r7, lr}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	0008      	movs	r0, r1
 8004e32:	0011      	movs	r1, r2
 8004e34:	607b      	str	r3, [r7, #4]
 8004e36:	240a      	movs	r4, #10
 8004e38:	193b      	adds	r3, r7, r4
 8004e3a:	1c02      	adds	r2, r0, #0
 8004e3c:	801a      	strh	r2, [r3, #0]
 8004e3e:	2009      	movs	r0, #9
 8004e40:	183b      	adds	r3, r7, r0
 8004e42:	1c0a      	adds	r2, r1, #0
 8004e44:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e46:	193b      	adds	r3, r7, r4
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	059b      	lsls	r3, r3, #22
 8004e4c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e4e:	183b      	adds	r3, r7, r0
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	0419      	lsls	r1, r3, #16
 8004e54:	23ff      	movs	r3, #255	@ 0xff
 8004e56:	041b      	lsls	r3, r3, #16
 8004e58:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e5a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e62:	4313      	orrs	r3, r2
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	085b      	lsrs	r3, r3, #1
 8004e68:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e72:	0d51      	lsrs	r1, r2, #21
 8004e74:	2280      	movs	r2, #128	@ 0x80
 8004e76:	00d2      	lsls	r2, r2, #3
 8004e78:	400a      	ands	r2, r1
 8004e7a:	4907      	ldr	r1, [pc, #28]	@ (8004e98 <I2C_TransferConfig+0x70>)
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	43d2      	mvns	r2, r2
 8004e80:	401a      	ands	r2, r3
 8004e82:	0011      	movs	r1, r2
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e8e:	46c0      	nop			@ (mov r8, r8)
 8004e90:	46bd      	mov	sp, r7
 8004e92:	b007      	add	sp, #28
 8004e94:	bd90      	pop	{r4, r7, pc}
 8004e96:	46c0      	nop			@ (mov r8, r8)
 8004e98:	03ff63ff 	.word	0x03ff63ff

08004e9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2241      	movs	r2, #65	@ 0x41
 8004eaa:	5c9b      	ldrb	r3, [r3, r2]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d138      	bne.n	8004f24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2240      	movs	r2, #64	@ 0x40
 8004eb6:	5c9b      	ldrb	r3, [r3, r2]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e032      	b.n	8004f26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2240      	movs	r2, #64	@ 0x40
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2241      	movs	r2, #65	@ 0x41
 8004ecc:	2124      	movs	r1, #36	@ 0x24
 8004ece:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2101      	movs	r1, #1
 8004edc:	438a      	bics	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4911      	ldr	r1, [pc, #68]	@ (8004f30 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004eec:	400a      	ands	r2, r1
 8004eee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6819      	ldr	r1, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2241      	movs	r2, #65	@ 0x41
 8004f14:	2120      	movs	r1, #32
 8004f16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2240      	movs	r2, #64	@ 0x40
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	e000      	b.n	8004f26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f24:	2302      	movs	r3, #2
  }
}
 8004f26:	0018      	movs	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b002      	add	sp, #8
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	46c0      	nop			@ (mov r8, r8)
 8004f30:	ffffefff 	.word	0xffffefff

08004f34 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2241      	movs	r2, #65	@ 0x41
 8004f42:	5c9b      	ldrb	r3, [r3, r2]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	d139      	bne.n	8004fbe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2240      	movs	r2, #64	@ 0x40
 8004f4e:	5c9b      	ldrb	r3, [r3, r2]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e033      	b.n	8004fc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2240      	movs	r2, #64	@ 0x40
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2241      	movs	r2, #65	@ 0x41
 8004f64:	2124      	movs	r1, #36	@ 0x24
 8004f66:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2101      	movs	r1, #1
 8004f74:	438a      	bics	r2, r1
 8004f76:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4a11      	ldr	r2, [pc, #68]	@ (8004fc8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	021b      	lsls	r3, r3, #8
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2241      	movs	r2, #65	@ 0x41
 8004fae:	2120      	movs	r1, #32
 8004fb0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2240      	movs	r2, #64	@ 0x40
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e000      	b.n	8004fc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004fbe:	2302      	movs	r3, #2
  }
}
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	b004      	add	sp, #16
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	fffff0ff 	.word	0xfffff0ff

08004fcc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b088      	sub	sp, #32
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e0e5      	b.n	80051aa <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2235      	movs	r2, #53	@ 0x35
 8004fe2:	5c9b      	ldrb	r3, [r3, r2]
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d107      	bne.n	8004ffa <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2234      	movs	r2, #52	@ 0x34
 8004fee:	2100      	movs	r1, #0
 8004ff0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f7fe f8b1 	bl	800315c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2235      	movs	r2, #53	@ 0x35
 8004ffe:	2102      	movs	r1, #2
 8005000:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4969      	ldr	r1, [pc, #420]	@ (80051b4 <HAL_I2S_Init+0x1e8>)
 800500e:	400a      	ands	r2, r1
 8005010:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2202      	movs	r2, #2
 8005018:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d100      	bne.n	8005024 <HAL_I2S_Init+0x58>
 8005022:	e076      	b.n	8005112 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d102      	bne.n	8005032 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800502c:	2310      	movs	r3, #16
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	e001      	b.n	8005036 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005032:	2320      	movs	r3, #32
 8005034:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2b20      	cmp	r3, #32
 800503c:	d802      	bhi.n	8005044 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8005044:	2380      	movs	r3, #128	@ 0x80
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	0018      	movs	r0, r3
 800504a:	f001 f955 	bl	80062f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800504e:	0003      	movs	r3, r0
 8005050:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691a      	ldr	r2, [r3, #16]
 8005056:	2380      	movs	r3, #128	@ 0x80
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	429a      	cmp	r2, r3
 800505c:	d131      	bne.n	80050c2 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d016      	beq.n	8005094 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	0019      	movs	r1, r3
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f7fb f849 	bl	8000104 <__udivsi3>
 8005072:	0003      	movs	r3, r0
 8005074:	001a      	movs	r2, r3
 8005076:	0013      	movs	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	189b      	adds	r3, r3, r2
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	001a      	movs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	0019      	movs	r1, r3
 8005086:	0010      	movs	r0, r2
 8005088:	f7fb f83c 	bl	8000104 <__udivsi3>
 800508c:	0003      	movs	r3, r0
 800508e:	3305      	adds	r3, #5
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	e02a      	b.n	80050ea <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	0019      	movs	r1, r3
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f7fb f832 	bl	8000104 <__udivsi3>
 80050a0:	0003      	movs	r3, r0
 80050a2:	001a      	movs	r2, r3
 80050a4:	0013      	movs	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	189b      	adds	r3, r3, r2
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	001a      	movs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	0019      	movs	r1, r3
 80050b4:	0010      	movs	r0, r2
 80050b6:	f7fb f825 	bl	8000104 <__udivsi3>
 80050ba:	0003      	movs	r3, r0
 80050bc:	3305      	adds	r3, #5
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	e013      	b.n	80050ea <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050c2:	6979      	ldr	r1, [r7, #20]
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7fb f81d 	bl	8000104 <__udivsi3>
 80050ca:	0003      	movs	r3, r0
 80050cc:	001a      	movs	r2, r3
 80050ce:	0013      	movs	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	189b      	adds	r3, r3, r2
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	001a      	movs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	0019      	movs	r1, r3
 80050de:	0010      	movs	r0, r2
 80050e0:	f7fb f810 	bl	8000104 <__udivsi3>
 80050e4:	0003      	movs	r3, r0
 80050e6:	3305      	adds	r3, #5
 80050e8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	210a      	movs	r1, #10
 80050ee:	0018      	movs	r0, r3
 80050f0:	f7fb f808 	bl	8000104 <__udivsi3>
 80050f4:	0003      	movs	r3, r0
 80050f6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2201      	movs	r2, #1
 80050fc:	4013      	ands	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	085b      	lsrs	r3, r3, #1
 8005108:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	021b      	lsls	r3, r3, #8
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	e003      	b.n	800511a <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005112:	2302      	movs	r3, #2
 8005114:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d902      	bls.n	8005126 <HAL_I2S_Init+0x15a>
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	2bff      	cmp	r3, #255	@ 0xff
 8005124:	d907      	bls.n	8005136 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512a:	2210      	movs	r2, #16
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e039      	b.n	80051aa <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	431a      	orrs	r2, r3
 800513e:	0011      	movs	r1, r2
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	69fa      	ldr	r2, [r7, #28]
 8005146:	430a      	orrs	r2, r1
 8005148:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	4a18      	ldr	r2, [pc, #96]	@ (80051b4 <HAL_I2S_Init+0x1e8>)
 8005152:	401a      	ands	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6859      	ldr	r1, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	4319      	orrs	r1, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	4319      	orrs	r1, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	430b      	orrs	r3, r1
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2180      	movs	r1, #128	@ 0x80
 8005172:	0109      	lsls	r1, r1, #4
 8005174:	430a      	orrs	r2, r1
 8005176:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b30      	cmp	r3, #48	@ 0x30
 800517e:	d003      	beq.n	8005188 <HAL_I2S_Init+0x1bc>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	2bb0      	cmp	r3, #176	@ 0xb0
 8005186:	d108      	bne.n	800519a <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69da      	ldr	r2, [r3, #28]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2180      	movs	r1, #128	@ 0x80
 8005194:	0149      	lsls	r1, r1, #5
 8005196:	430a      	orrs	r2, r1
 8005198:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2235      	movs	r2, #53	@ 0x35
 80051a4:	2101      	movs	r1, #1
 80051a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	0018      	movs	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b008      	add	sp, #32
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	46c0      	nop			@ (mov r8, r8)
 80051b4:	fffff040 	.word	0xfffff040

080051b8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	1dbb      	adds	r3, r7, #6
 80051c4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <HAL_I2S_Transmit_DMA+0x1c>
 80051cc:	1dbb      	adds	r3, r7, #6
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e091      	b.n	80052fc <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2234      	movs	r2, #52	@ 0x34
 80051dc:	5c9b      	ldrb	r3, [r3, r2]
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_I2S_Transmit_DMA+0x30>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e089      	b.n	80052fc <HAL_I2S_Transmit_DMA+0x144>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2234      	movs	r2, #52	@ 0x34
 80051ec:	2101      	movs	r1, #1
 80051ee:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2235      	movs	r2, #53	@ 0x35
 80051f4:	5c9b      	ldrb	r3, [r3, r2]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d005      	beq.n	8005208 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2234      	movs	r2, #52	@ 0x34
 8005200:	2100      	movs	r1, #0
 8005202:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8005204:	2302      	movs	r3, #2
 8005206:	e079      	b.n	80052fc <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2235      	movs	r2, #53	@ 0x35
 800520c:	2103      	movs	r1, #3
 800520e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	2207      	movs	r2, #7
 8005224:	4013      	ands	r3, r2
 8005226:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2b03      	cmp	r3, #3
 800522c:	d002      	beq.n	8005234 <HAL_I2S_Transmit_DMA+0x7c>
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b05      	cmp	r3, #5
 8005232:	d10c      	bne.n	800524e <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005234:	1dbb      	adds	r3, r7, #6
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	18db      	adds	r3, r3, r3
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8005240:	1dbb      	adds	r3, r7, #6
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	18db      	adds	r3, r3, r3
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	845a      	strh	r2, [r3, #34]	@ 0x22
 800524c:	e007      	b.n	800525e <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	1dba      	adds	r2, r7, #6
 8005252:	8812      	ldrh	r2, [r2, #0]
 8005254:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	1dba      	adds	r2, r7, #6
 800525a:	8812      	ldrh	r2, [r2, #0]
 800525c:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005262:	4a28      	ldr	r2, [pc, #160]	@ (8005304 <HAL_I2S_Transmit_DMA+0x14c>)
 8005264:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526a:	4a27      	ldr	r2, [pc, #156]	@ (8005308 <HAL_I2S_Transmit_DMA+0x150>)
 800526c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005272:	4a26      	ldr	r2, [pc, #152]	@ (800530c <HAL_I2S_Transmit_DMA+0x154>)
 8005274:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800527e:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005286:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8c1b      	ldrh	r3, [r3, #32]
 800528c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800528e:	f7fe fc4b 	bl	8003b28 <HAL_DMA_Start_IT>
 8005292:	1e03      	subs	r3, r0, #0
 8005294:	d00f      	beq.n	80052b6 <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529a:	2208      	movs	r2, #8
 800529c:	431a      	orrs	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2235      	movs	r2, #53	@ 0x35
 80052a6:	2101      	movs	r1, #1
 80052a8:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2234      	movs	r2, #52	@ 0x34
 80052ae:	2100      	movs	r1, #0
 80052b0:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e022      	b.n	80052fc <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	2380      	movs	r3, #128	@ 0x80
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4013      	ands	r3, r2
 80052c2:	d108      	bne.n	80052d6 <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	69da      	ldr	r2, [r3, #28]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2180      	movs	r1, #128	@ 0x80
 80052d0:	00c9      	lsls	r1, r1, #3
 80052d2:	430a      	orrs	r2, r1
 80052d4:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2202      	movs	r2, #2
 80052de:	4013      	ands	r3, r2
 80052e0:	d107      	bne.n	80052f2 <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2102      	movs	r1, #2
 80052ee:	430a      	orrs	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2234      	movs	r2, #52	@ 0x34
 80052f6:	2100      	movs	r1, #0
 80052f8:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	0018      	movs	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	b006      	add	sp, #24
 8005302:	bd80      	pop	{r7, pc}
 8005304:	080054ed 	.word	0x080054ed
 8005308:	080054a9 	.word	0x080054a9
 800530c:	0800550b 	.word	0x0800550b

08005310 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005318:	2317      	movs	r3, #23
 800531a:	18fb      	adds	r3, r7, r3
 800531c:	2200      	movs	r2, #0
 800531e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	2380      	movs	r3, #128	@ 0x80
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	429a      	cmp	r2, r3
 800532a:	d003      	beq.n	8005334 <HAL_I2S_DMAStop+0x24>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d158      	bne.n	80053e6 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d010      	beq.n	800535e <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005340:	0018      	movs	r0, r3
 8005342:	f7fe fc77 	bl	8003c34 <HAL_DMA_Abort>
 8005346:	1e03      	subs	r3, r0, #0
 8005348:	d009      	beq.n	800535e <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534e:	2208      	movs	r2, #8
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8005356:	2317      	movs	r3, #23
 8005358:	18fb      	adds	r3, r7, r3
 800535a:	2201      	movs	r2, #1
 800535c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	2364      	movs	r3, #100	@ 0x64
 8005362:	2201      	movs	r2, #1
 8005364:	2102      	movs	r1, #2
 8005366:	f000 f8f7 	bl	8005558 <I2S_WaitFlagStateUntilTimeout>
 800536a:	1e03      	subs	r3, r0, #0
 800536c:	d00d      	beq.n	800538a <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005372:	2201      	movs	r2, #1
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2235      	movs	r2, #53	@ 0x35
 800537e:	2101      	movs	r1, #1
 8005380:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8005382:	2317      	movs	r3, #23
 8005384:	18fb      	adds	r3, r7, r3
 8005386:	2201      	movs	r2, #1
 8005388:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	2364      	movs	r3, #100	@ 0x64
 800538e:	2200      	movs	r2, #0
 8005390:	2180      	movs	r1, #128	@ 0x80
 8005392:	f000 f8e1 	bl	8005558 <I2S_WaitFlagStateUntilTimeout>
 8005396:	1e03      	subs	r3, r0, #0
 8005398:	d00d      	beq.n	80053b6 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539e:	2201      	movs	r2, #1
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2235      	movs	r2, #53	@ 0x35
 80053aa:	2101      	movs	r1, #1
 80053ac:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80053ae:	2317      	movs	r3, #23
 80053b0:	18fb      	adds	r3, r7, r3
 80053b2:	2201      	movs	r2, #1
 80053b4:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69da      	ldr	r2, [r3, #28]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4938      	ldr	r1, [pc, #224]	@ (80054a4 <HAL_I2S_DMAStop+0x194>)
 80053c2:	400a      	ands	r2, r1
 80053c4:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80053c6:	2300      	movs	r3, #0
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2102      	movs	r1, #2
 80053e0:	438a      	bics	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]
 80053e4:	e053      	b.n	800548e <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	23c0      	movs	r3, #192	@ 0xc0
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d005      	beq.n	80053fe <HAL_I2S_DMAStop+0xee>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	2380      	movs	r3, #128	@ 0x80
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d147      	bne.n	800548e <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005402:	2b00      	cmp	r3, #0
 8005404:	d010      	beq.n	8005428 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540a:	0018      	movs	r0, r3
 800540c:	f7fe fc12 	bl	8003c34 <HAL_DMA_Abort>
 8005410:	1e03      	subs	r3, r0, #0
 8005412:	d009      	beq.n	8005428 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005418:	2208      	movs	r2, #8
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8005420:	2317      	movs	r3, #23
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	2201      	movs	r2, #1
 8005426:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	69da      	ldr	r2, [r3, #28]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	491c      	ldr	r1, [pc, #112]	@ (80054a4 <HAL_I2S_DMAStop+0x194>)
 8005434:	400a      	ands	r2, r1
 8005436:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2101      	movs	r1, #1
 800545a:	438a      	bics	r2, r1
 800545c:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	2380      	movs	r3, #128	@ 0x80
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	429a      	cmp	r2, r3
 8005468:	d10e      	bne.n	8005488 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546e:	2240      	movs	r2, #64	@ 0x40
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2235      	movs	r2, #53	@ 0x35
 800547a:	2101      	movs	r1, #1
 800547c:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800547e:	2317      	movs	r3, #23
 8005480:	18fb      	adds	r3, r7, r3
 8005482:	2201      	movs	r2, #1
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	e002      	b.n	800548e <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2235      	movs	r2, #53	@ 0x35
 8005492:	2101      	movs	r1, #1
 8005494:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8005496:	2317      	movs	r3, #23
 8005498:	18fb      	adds	r3, r7, r3
 800549a:	781b      	ldrb	r3, [r3, #0]
}
 800549c:	0018      	movs	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	b006      	add	sp, #24
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	fffffbff 	.word	0xfffffbff

080054a8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10e      	bne.n	80054dc <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2102      	movs	r1, #2
 80054ca:	438a      	bics	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	845a      	strh	r2, [r3, #34]	@ 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2235      	movs	r2, #53	@ 0x35
 80054d8:	2101      	movs	r1, #1
 80054da:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	0018      	movs	r0, r3
 80054e0:	f7fd fb21 	bl	8002b26 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80054e4:	46c0      	nop			@ (mov r8, r8)
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b004      	add	sp, #16
 80054ea:	bd80      	pop	{r7, pc}

080054ec <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7fd fb07 	bl	8002b10 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005502:	46c0      	nop			@ (mov r8, r8)
 8005504:	46bd      	mov	sp, r7
 8005506:	b004      	add	sp, #16
 8005508:	bd80      	pop	{r7, pc}

0800550a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005516:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2103      	movs	r1, #3
 8005524:	438a      	bics	r2, r1
 8005526:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2235      	movs	r2, #53	@ 0x35
 8005538:	2101      	movs	r1, #1
 800553a:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005540:	2208      	movs	r2, #8
 8005542:	431a      	orrs	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	0018      	movs	r0, r3
 800554c:	f7fd fb48 	bl	8002be0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005550:	46c0      	nop			@ (mov r8, r8)
 8005552:	46bd      	mov	sp, r7
 8005554:	b004      	add	sp, #16
 8005556:	bd80      	pop	{r7, pc}

08005558 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	1dfb      	adds	r3, r7, #7
 8005566:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005568:	f7fe f96c 	bl	8003844 <HAL_GetTick>
 800556c:	0003      	movs	r3, r0
 800556e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005570:	e017      	b.n	80055a2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	3301      	adds	r3, #1
 8005576:	d014      	beq.n	80055a2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005578:	f7fe f964 	bl	8003844 <HAL_GetTick>
 800557c:	0002      	movs	r2, r0
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	429a      	cmp	r2, r3
 8005586:	d902      	bls.n	800558e <I2S_WaitFlagStateUntilTimeout+0x36>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d109      	bne.n	80055a2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2235      	movs	r2, #53	@ 0x35
 8005592:	2101      	movs	r1, #1
 8005594:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2234      	movs	r2, #52	@ 0x34
 800559a:	2100      	movs	r1, #0
 800559c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e00f      	b.n	80055c2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	4013      	ands	r3, r2
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	425a      	negs	r2, r3
 80055b2:	4153      	adcs	r3, r2
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	001a      	movs	r2, r3
 80055b8:	1dfb      	adds	r3, r7, #7
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d1d8      	bne.n	8005572 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	0018      	movs	r0, r3
 80055c4:	46bd      	mov	sp, r7
 80055c6:	b006      	add	sp, #24
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055d0:	4b04      	ldr	r3, [pc, #16]	@ (80055e4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	4b03      	ldr	r3, [pc, #12]	@ (80055e4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80055d6:	2180      	movs	r1, #128	@ 0x80
 80055d8:	0049      	lsls	r1, r1, #1
 80055da:	430a      	orrs	r2, r1
 80055dc:	601a      	str	r2, [r3, #0]
}
 80055de:	46c0      	nop			@ (mov r8, r8)
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40007000 	.word	0x40007000

080055e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80055f0:	4b19      	ldr	r3, [pc, #100]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a19      	ldr	r2, [pc, #100]	@ (800565c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	0019      	movs	r1, r3
 80055fa:	4b17      	ldr	r3, [pc, #92]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	430a      	orrs	r2, r1
 8005600:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	2380      	movs	r3, #128	@ 0x80
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	429a      	cmp	r2, r3
 800560a:	d11f      	bne.n	800564c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800560c:	4b14      	ldr	r3, [pc, #80]	@ (8005660 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	0013      	movs	r3, r2
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	189b      	adds	r3, r3, r2
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	4912      	ldr	r1, [pc, #72]	@ (8005664 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800561a:	0018      	movs	r0, r3
 800561c:	f7fa fd72 	bl	8000104 <__udivsi3>
 8005620:	0003      	movs	r3, r0
 8005622:	3301      	adds	r3, #1
 8005624:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005626:	e008      	b.n	800563a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3b01      	subs	r3, #1
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	e001      	b.n	800563a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e009      	b.n	800564e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800563a:	4b07      	ldr	r3, [pc, #28]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800563c:	695a      	ldr	r2, [r3, #20]
 800563e:	2380      	movs	r3, #128	@ 0x80
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	401a      	ands	r2, r3
 8005644:	2380      	movs	r3, #128	@ 0x80
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	429a      	cmp	r2, r3
 800564a:	d0ed      	beq.n	8005628 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	0018      	movs	r0, r3
 8005650:	46bd      	mov	sp, r7
 8005652:	b004      	add	sp, #16
 8005654:	bd80      	pop	{r7, pc}
 8005656:	46c0      	nop			@ (mov r8, r8)
 8005658:	40007000 	.word	0x40007000
 800565c:	fffff9ff 	.word	0xfffff9ff
 8005660:	2000008c 	.word	0x2000008c
 8005664:	000f4240 	.word	0x000f4240

08005668 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800566c:	4b03      	ldr	r3, [pc, #12]	@ (800567c <LL_RCC_GetAPB1Prescaler+0x14>)
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	23e0      	movs	r3, #224	@ 0xe0
 8005672:	01db      	lsls	r3, r3, #7
 8005674:	4013      	ands	r3, r2
}
 8005676:	0018      	movs	r0, r3
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40021000 	.word	0x40021000

08005680 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e2fe      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2201      	movs	r2, #1
 8005698:	4013      	ands	r3, r2
 800569a:	d100      	bne.n	800569e <HAL_RCC_OscConfig+0x1e>
 800569c:	e07c      	b.n	8005798 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800569e:	4bc3      	ldr	r3, [pc, #780]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2238      	movs	r2, #56	@ 0x38
 80056a4:	4013      	ands	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056a8:	4bc0      	ldr	r3, [pc, #768]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	2203      	movs	r2, #3
 80056ae:	4013      	ands	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b10      	cmp	r3, #16
 80056b6:	d102      	bne.n	80056be <HAL_RCC_OscConfig+0x3e>
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d002      	beq.n	80056c4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d10b      	bne.n	80056dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c4:	4bb9      	ldr	r3, [pc, #740]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	2380      	movs	r3, #128	@ 0x80
 80056ca:	029b      	lsls	r3, r3, #10
 80056cc:	4013      	ands	r3, r2
 80056ce:	d062      	beq.n	8005796 <HAL_RCC_OscConfig+0x116>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d15e      	bne.n	8005796 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e2d9      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	2380      	movs	r3, #128	@ 0x80
 80056e2:	025b      	lsls	r3, r3, #9
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d107      	bne.n	80056f8 <HAL_RCC_OscConfig+0x78>
 80056e8:	4bb0      	ldr	r3, [pc, #704]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	4baf      	ldr	r3, [pc, #700]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 80056ee:	2180      	movs	r1, #128	@ 0x80
 80056f0:	0249      	lsls	r1, r1, #9
 80056f2:	430a      	orrs	r2, r1
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	e020      	b.n	800573a <HAL_RCC_OscConfig+0xba>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	23a0      	movs	r3, #160	@ 0xa0
 80056fe:	02db      	lsls	r3, r3, #11
 8005700:	429a      	cmp	r2, r3
 8005702:	d10e      	bne.n	8005722 <HAL_RCC_OscConfig+0xa2>
 8005704:	4ba9      	ldr	r3, [pc, #676]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	4ba8      	ldr	r3, [pc, #672]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 800570a:	2180      	movs	r1, #128	@ 0x80
 800570c:	02c9      	lsls	r1, r1, #11
 800570e:	430a      	orrs	r2, r1
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	4ba6      	ldr	r3, [pc, #664]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	4ba5      	ldr	r3, [pc, #660]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005718:	2180      	movs	r1, #128	@ 0x80
 800571a:	0249      	lsls	r1, r1, #9
 800571c:	430a      	orrs	r2, r1
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	e00b      	b.n	800573a <HAL_RCC_OscConfig+0xba>
 8005722:	4ba2      	ldr	r3, [pc, #648]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	4ba1      	ldr	r3, [pc, #644]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005728:	49a1      	ldr	r1, [pc, #644]	@ (80059b0 <HAL_RCC_OscConfig+0x330>)
 800572a:	400a      	ands	r2, r1
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	4b9f      	ldr	r3, [pc, #636]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	4b9e      	ldr	r3, [pc, #632]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005734:	499f      	ldr	r1, [pc, #636]	@ (80059b4 <HAL_RCC_OscConfig+0x334>)
 8005736:	400a      	ands	r2, r1
 8005738:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d014      	beq.n	800576c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005742:	f7fe f87f 	bl	8003844 <HAL_GetTick>
 8005746:	0003      	movs	r3, r0
 8005748:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800574c:	f7fe f87a 	bl	8003844 <HAL_GetTick>
 8005750:	0002      	movs	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b64      	cmp	r3, #100	@ 0x64
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e298      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800575e:	4b93      	ldr	r3, [pc, #588]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	2380      	movs	r3, #128	@ 0x80
 8005764:	029b      	lsls	r3, r3, #10
 8005766:	4013      	ands	r3, r2
 8005768:	d0f0      	beq.n	800574c <HAL_RCC_OscConfig+0xcc>
 800576a:	e015      	b.n	8005798 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576c:	f7fe f86a 	bl	8003844 <HAL_GetTick>
 8005770:	0003      	movs	r3, r0
 8005772:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005774:	e008      	b.n	8005788 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005776:	f7fe f865 	bl	8003844 <HAL_GetTick>
 800577a:	0002      	movs	r2, r0
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b64      	cmp	r3, #100	@ 0x64
 8005782:	d901      	bls.n	8005788 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e283      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005788:	4b88      	ldr	r3, [pc, #544]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	2380      	movs	r3, #128	@ 0x80
 800578e:	029b      	lsls	r3, r3, #10
 8005790:	4013      	ands	r3, r2
 8005792:	d1f0      	bne.n	8005776 <HAL_RCC_OscConfig+0xf6>
 8005794:	e000      	b.n	8005798 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005796:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2202      	movs	r2, #2
 800579e:	4013      	ands	r3, r2
 80057a0:	d100      	bne.n	80057a4 <HAL_RCC_OscConfig+0x124>
 80057a2:	e099      	b.n	80058d8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057a4:	4b81      	ldr	r3, [pc, #516]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2238      	movs	r2, #56	@ 0x38
 80057aa:	4013      	ands	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057ae:	4b7f      	ldr	r3, [pc, #508]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	2203      	movs	r2, #3
 80057b4:	4013      	ands	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	2b10      	cmp	r3, #16
 80057bc:	d102      	bne.n	80057c4 <HAL_RCC_OscConfig+0x144>
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d002      	beq.n	80057ca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d135      	bne.n	8005836 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057ca:	4b78      	ldr	r3, [pc, #480]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	2380      	movs	r3, #128	@ 0x80
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	4013      	ands	r3, r2
 80057d4:	d005      	beq.n	80057e2 <HAL_RCC_OscConfig+0x162>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e256      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057e2:	4b72      	ldr	r3, [pc, #456]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	4a74      	ldr	r2, [pc, #464]	@ (80059b8 <HAL_RCC_OscConfig+0x338>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	0019      	movs	r1, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	021a      	lsls	r2, r3, #8
 80057f2:	4b6e      	ldr	r3, [pc, #440]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 80057f4:	430a      	orrs	r2, r1
 80057f6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d112      	bne.n	8005824 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80057fe:	4b6b      	ldr	r3, [pc, #428]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a6e      	ldr	r2, [pc, #440]	@ (80059bc <HAL_RCC_OscConfig+0x33c>)
 8005804:	4013      	ands	r3, r2
 8005806:	0019      	movs	r1, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	4b67      	ldr	r3, [pc, #412]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 800580e:	430a      	orrs	r2, r1
 8005810:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005812:	4b66      	ldr	r3, [pc, #408]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	0adb      	lsrs	r3, r3, #11
 8005818:	2207      	movs	r2, #7
 800581a:	4013      	ands	r3, r2
 800581c:	4a68      	ldr	r2, [pc, #416]	@ (80059c0 <HAL_RCC_OscConfig+0x340>)
 800581e:	40da      	lsrs	r2, r3
 8005820:	4b68      	ldr	r3, [pc, #416]	@ (80059c4 <HAL_RCC_OscConfig+0x344>)
 8005822:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005824:	4b68      	ldr	r3, [pc, #416]	@ (80059c8 <HAL_RCC_OscConfig+0x348>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	0018      	movs	r0, r3
 800582a:	f7fd ffaf 	bl	800378c <HAL_InitTick>
 800582e:	1e03      	subs	r3, r0, #0
 8005830:	d051      	beq.n	80058d6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e22c      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d030      	beq.n	80058a0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800583e:	4b5b      	ldr	r3, [pc, #364]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a5e      	ldr	r2, [pc, #376]	@ (80059bc <HAL_RCC_OscConfig+0x33c>)
 8005844:	4013      	ands	r3, r2
 8005846:	0019      	movs	r1, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	4b57      	ldr	r3, [pc, #348]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 800584e:	430a      	orrs	r2, r1
 8005850:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005852:	4b56      	ldr	r3, [pc, #344]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4b55      	ldr	r3, [pc, #340]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005858:	2180      	movs	r1, #128	@ 0x80
 800585a:	0049      	lsls	r1, r1, #1
 800585c:	430a      	orrs	r2, r1
 800585e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005860:	f7fd fff0 	bl	8003844 <HAL_GetTick>
 8005864:	0003      	movs	r3, r0
 8005866:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800586a:	f7fd ffeb 	bl	8003844 <HAL_GetTick>
 800586e:	0002      	movs	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e209      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800587c:	4b4b      	ldr	r3, [pc, #300]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	2380      	movs	r3, #128	@ 0x80
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	4013      	ands	r3, r2
 8005886:	d0f0      	beq.n	800586a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005888:	4b48      	ldr	r3, [pc, #288]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	4a4a      	ldr	r2, [pc, #296]	@ (80059b8 <HAL_RCC_OscConfig+0x338>)
 800588e:	4013      	ands	r3, r2
 8005890:	0019      	movs	r1, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	021a      	lsls	r2, r3, #8
 8005898:	4b44      	ldr	r3, [pc, #272]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
 800589e:	e01b      	b.n	80058d8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80058a0:	4b42      	ldr	r3, [pc, #264]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	4b41      	ldr	r3, [pc, #260]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 80058a6:	4949      	ldr	r1, [pc, #292]	@ (80059cc <HAL_RCC_OscConfig+0x34c>)
 80058a8:	400a      	ands	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ac:	f7fd ffca 	bl	8003844 <HAL_GetTick>
 80058b0:	0003      	movs	r3, r0
 80058b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058b4:	e008      	b.n	80058c8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058b6:	f7fd ffc5 	bl	8003844 <HAL_GetTick>
 80058ba:	0002      	movs	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e1e3      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058c8:	4b38      	ldr	r3, [pc, #224]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	2380      	movs	r3, #128	@ 0x80
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	4013      	ands	r3, r2
 80058d2:	d1f0      	bne.n	80058b6 <HAL_RCC_OscConfig+0x236>
 80058d4:	e000      	b.n	80058d8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058d6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2208      	movs	r2, #8
 80058de:	4013      	ands	r3, r2
 80058e0:	d047      	beq.n	8005972 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80058e2:	4b32      	ldr	r3, [pc, #200]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	2238      	movs	r2, #56	@ 0x38
 80058e8:	4013      	ands	r3, r2
 80058ea:	2b18      	cmp	r3, #24
 80058ec:	d10a      	bne.n	8005904 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80058ee:	4b2f      	ldr	r3, [pc, #188]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 80058f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058f2:	2202      	movs	r2, #2
 80058f4:	4013      	ands	r3, r2
 80058f6:	d03c      	beq.n	8005972 <HAL_RCC_OscConfig+0x2f2>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d138      	bne.n	8005972 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e1c5      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d019      	beq.n	8005940 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800590c:	4b27      	ldr	r3, [pc, #156]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 800590e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005910:	4b26      	ldr	r3, [pc, #152]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005912:	2101      	movs	r1, #1
 8005914:	430a      	orrs	r2, r1
 8005916:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005918:	f7fd ff94 	bl	8003844 <HAL_GetTick>
 800591c:	0003      	movs	r3, r0
 800591e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005920:	e008      	b.n	8005934 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005922:	f7fd ff8f 	bl	8003844 <HAL_GetTick>
 8005926:	0002      	movs	r2, r0
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e1ad      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005934:	4b1d      	ldr	r3, [pc, #116]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005938:	2202      	movs	r2, #2
 800593a:	4013      	ands	r3, r2
 800593c:	d0f1      	beq.n	8005922 <HAL_RCC_OscConfig+0x2a2>
 800593e:	e018      	b.n	8005972 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005940:	4b1a      	ldr	r3, [pc, #104]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005942:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005944:	4b19      	ldr	r3, [pc, #100]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005946:	2101      	movs	r1, #1
 8005948:	438a      	bics	r2, r1
 800594a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fd ff7a 	bl	8003844 <HAL_GetTick>
 8005950:	0003      	movs	r3, r0
 8005952:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005954:	e008      	b.n	8005968 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005956:	f7fd ff75 	bl	8003844 <HAL_GetTick>
 800595a:	0002      	movs	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e193      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005968:	4b10      	ldr	r3, [pc, #64]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 800596a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800596c:	2202      	movs	r2, #2
 800596e:	4013      	ands	r3, r2
 8005970:	d1f1      	bne.n	8005956 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2204      	movs	r2, #4
 8005978:	4013      	ands	r3, r2
 800597a:	d100      	bne.n	800597e <HAL_RCC_OscConfig+0x2fe>
 800597c:	e0c6      	b.n	8005b0c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800597e:	231f      	movs	r3, #31
 8005980:	18fb      	adds	r3, r7, r3
 8005982:	2200      	movs	r2, #0
 8005984:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005986:	4b09      	ldr	r3, [pc, #36]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2238      	movs	r2, #56	@ 0x38
 800598c:	4013      	ands	r3, r2
 800598e:	2b20      	cmp	r3, #32
 8005990:	d11e      	bne.n	80059d0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005992:	4b06      	ldr	r3, [pc, #24]	@ (80059ac <HAL_RCC_OscConfig+0x32c>)
 8005994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005996:	2202      	movs	r2, #2
 8005998:	4013      	ands	r3, r2
 800599a:	d100      	bne.n	800599e <HAL_RCC_OscConfig+0x31e>
 800599c:	e0b6      	b.n	8005b0c <HAL_RCC_OscConfig+0x48c>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d000      	beq.n	80059a8 <HAL_RCC_OscConfig+0x328>
 80059a6:	e0b1      	b.n	8005b0c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e171      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
 80059ac:	40021000 	.word	0x40021000
 80059b0:	fffeffff 	.word	0xfffeffff
 80059b4:	fffbffff 	.word	0xfffbffff
 80059b8:	ffff80ff 	.word	0xffff80ff
 80059bc:	ffffc7ff 	.word	0xffffc7ff
 80059c0:	00f42400 	.word	0x00f42400
 80059c4:	2000008c 	.word	0x2000008c
 80059c8:	20000090 	.word	0x20000090
 80059cc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059d0:	4bb1      	ldr	r3, [pc, #708]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 80059d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059d4:	2380      	movs	r3, #128	@ 0x80
 80059d6:	055b      	lsls	r3, r3, #21
 80059d8:	4013      	ands	r3, r2
 80059da:	d101      	bne.n	80059e0 <HAL_RCC_OscConfig+0x360>
 80059dc:	2301      	movs	r3, #1
 80059de:	e000      	b.n	80059e2 <HAL_RCC_OscConfig+0x362>
 80059e0:	2300      	movs	r3, #0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d011      	beq.n	8005a0a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80059e6:	4bac      	ldr	r3, [pc, #688]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 80059e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059ea:	4bab      	ldr	r3, [pc, #684]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 80059ec:	2180      	movs	r1, #128	@ 0x80
 80059ee:	0549      	lsls	r1, r1, #21
 80059f0:	430a      	orrs	r2, r1
 80059f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80059f4:	4ba8      	ldr	r3, [pc, #672]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 80059f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059f8:	2380      	movs	r3, #128	@ 0x80
 80059fa:	055b      	lsls	r3, r3, #21
 80059fc:	4013      	ands	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005a02:	231f      	movs	r3, #31
 8005a04:	18fb      	adds	r3, r7, r3
 8005a06:	2201      	movs	r2, #1
 8005a08:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a0a:	4ba4      	ldr	r3, [pc, #656]	@ (8005c9c <HAL_RCC_OscConfig+0x61c>)
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	2380      	movs	r3, #128	@ 0x80
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	4013      	ands	r3, r2
 8005a14:	d11a      	bne.n	8005a4c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a16:	4ba1      	ldr	r3, [pc, #644]	@ (8005c9c <HAL_RCC_OscConfig+0x61c>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	4ba0      	ldr	r3, [pc, #640]	@ (8005c9c <HAL_RCC_OscConfig+0x61c>)
 8005a1c:	2180      	movs	r1, #128	@ 0x80
 8005a1e:	0049      	lsls	r1, r1, #1
 8005a20:	430a      	orrs	r2, r1
 8005a22:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005a24:	f7fd ff0e 	bl	8003844 <HAL_GetTick>
 8005a28:	0003      	movs	r3, r0
 8005a2a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a2e:	f7fd ff09 	bl	8003844 <HAL_GetTick>
 8005a32:	0002      	movs	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e127      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a40:	4b96      	ldr	r3, [pc, #600]	@ (8005c9c <HAL_RCC_OscConfig+0x61c>)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	2380      	movs	r3, #128	@ 0x80
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d0f0      	beq.n	8005a2e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d106      	bne.n	8005a62 <HAL_RCC_OscConfig+0x3e2>
 8005a54:	4b90      	ldr	r3, [pc, #576]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005a56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a58:	4b8f      	ldr	r3, [pc, #572]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a60:	e01c      	b.n	8005a9c <HAL_RCC_OscConfig+0x41c>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2b05      	cmp	r3, #5
 8005a68:	d10c      	bne.n	8005a84 <HAL_RCC_OscConfig+0x404>
 8005a6a:	4b8b      	ldr	r3, [pc, #556]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005a6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a6e:	4b8a      	ldr	r3, [pc, #552]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005a70:	2104      	movs	r1, #4
 8005a72:	430a      	orrs	r2, r1
 8005a74:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a76:	4b88      	ldr	r3, [pc, #544]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005a78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a7a:	4b87      	ldr	r3, [pc, #540]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a82:	e00b      	b.n	8005a9c <HAL_RCC_OscConfig+0x41c>
 8005a84:	4b84      	ldr	r3, [pc, #528]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005a86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a88:	4b83      	ldr	r3, [pc, #524]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	438a      	bics	r2, r1
 8005a8e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a90:	4b81      	ldr	r3, [pc, #516]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005a92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a94:	4b80      	ldr	r3, [pc, #512]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005a96:	2104      	movs	r1, #4
 8005a98:	438a      	bics	r2, r1
 8005a9a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d014      	beq.n	8005ace <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa4:	f7fd fece 	bl	8003844 <HAL_GetTick>
 8005aa8:	0003      	movs	r3, r0
 8005aaa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aac:	e009      	b.n	8005ac2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aae:	f7fd fec9 	bl	8003844 <HAL_GetTick>
 8005ab2:	0002      	movs	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	4a79      	ldr	r2, [pc, #484]	@ (8005ca0 <HAL_RCC_OscConfig+0x620>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e0e6      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ac2:	4b75      	ldr	r3, [pc, #468]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	4013      	ands	r3, r2
 8005aca:	d0f0      	beq.n	8005aae <HAL_RCC_OscConfig+0x42e>
 8005acc:	e013      	b.n	8005af6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ace:	f7fd feb9 	bl	8003844 <HAL_GetTick>
 8005ad2:	0003      	movs	r3, r0
 8005ad4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ad6:	e009      	b.n	8005aec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad8:	f7fd feb4 	bl	8003844 <HAL_GetTick>
 8005adc:	0002      	movs	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	4a6f      	ldr	r2, [pc, #444]	@ (8005ca0 <HAL_RCC_OscConfig+0x620>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e0d1      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005aec:	4b6a      	ldr	r3, [pc, #424]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005af0:	2202      	movs	r2, #2
 8005af2:	4013      	ands	r3, r2
 8005af4:	d1f0      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005af6:	231f      	movs	r3, #31
 8005af8:	18fb      	adds	r3, r7, r3
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d105      	bne.n	8005b0c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005b00:	4b65      	ldr	r3, [pc, #404]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005b02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b04:	4b64      	ldr	r3, [pc, #400]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005b06:	4967      	ldr	r1, [pc, #412]	@ (8005ca4 <HAL_RCC_OscConfig+0x624>)
 8005b08:	400a      	ands	r2, r1
 8005b0a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d100      	bne.n	8005b16 <HAL_RCC_OscConfig+0x496>
 8005b14:	e0bb      	b.n	8005c8e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b16:	4b60      	ldr	r3, [pc, #384]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2238      	movs	r2, #56	@ 0x38
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	2b10      	cmp	r3, #16
 8005b20:	d100      	bne.n	8005b24 <HAL_RCC_OscConfig+0x4a4>
 8005b22:	e07b      	b.n	8005c1c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d156      	bne.n	8005bda <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2c:	4b5a      	ldr	r3, [pc, #360]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	4b59      	ldr	r3, [pc, #356]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005b32:	495d      	ldr	r1, [pc, #372]	@ (8005ca8 <HAL_RCC_OscConfig+0x628>)
 8005b34:	400a      	ands	r2, r1
 8005b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b38:	f7fd fe84 	bl	8003844 <HAL_GetTick>
 8005b3c:	0003      	movs	r3, r0
 8005b3e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b40:	e008      	b.n	8005b54 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b42:	f7fd fe7f 	bl	8003844 <HAL_GetTick>
 8005b46:	0002      	movs	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e09d      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b54:	4b50      	ldr	r3, [pc, #320]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	2380      	movs	r3, #128	@ 0x80
 8005b5a:	049b      	lsls	r3, r3, #18
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	d1f0      	bne.n	8005b42 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b60:	4b4d      	ldr	r3, [pc, #308]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	4a51      	ldr	r2, [pc, #324]	@ (8005cac <HAL_RCC_OscConfig+0x62c>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	0019      	movs	r1, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1a      	ldr	r2, [r3, #32]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b78:	021b      	lsls	r3, r3, #8
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	4b42      	ldr	r3, [pc, #264]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005b90:	430a      	orrs	r2, r1
 8005b92:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b94:	4b40      	ldr	r3, [pc, #256]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	4b3f      	ldr	r3, [pc, #252]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005b9a:	2180      	movs	r1, #128	@ 0x80
 8005b9c:	0449      	lsls	r1, r1, #17
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	4b3c      	ldr	r3, [pc, #240]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005ba8:	2180      	movs	r1, #128	@ 0x80
 8005baa:	0549      	lsls	r1, r1, #21
 8005bac:	430a      	orrs	r2, r1
 8005bae:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb0:	f7fd fe48 	bl	8003844 <HAL_GetTick>
 8005bb4:	0003      	movs	r3, r0
 8005bb6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bb8:	e008      	b.n	8005bcc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bba:	f7fd fe43 	bl	8003844 <HAL_GetTick>
 8005bbe:	0002      	movs	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e061      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bcc:	4b32      	ldr	r3, [pc, #200]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	2380      	movs	r3, #128	@ 0x80
 8005bd2:	049b      	lsls	r3, r3, #18
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	d0f0      	beq.n	8005bba <HAL_RCC_OscConfig+0x53a>
 8005bd8:	e059      	b.n	8005c8e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bda:	4b2f      	ldr	r3, [pc, #188]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b2e      	ldr	r3, [pc, #184]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005be0:	4931      	ldr	r1, [pc, #196]	@ (8005ca8 <HAL_RCC_OscConfig+0x628>)
 8005be2:	400a      	ands	r2, r1
 8005be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be6:	f7fd fe2d 	bl	8003844 <HAL_GetTick>
 8005bea:	0003      	movs	r3, r0
 8005bec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf0:	f7fd fe28 	bl	8003844 <HAL_GetTick>
 8005bf4:	0002      	movs	r2, r0
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e046      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c02:	4b25      	ldr	r3, [pc, #148]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	2380      	movs	r3, #128	@ 0x80
 8005c08:	049b      	lsls	r3, r3, #18
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	d1f0      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005c0e:	4b22      	ldr	r3, [pc, #136]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	4b21      	ldr	r3, [pc, #132]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005c14:	4926      	ldr	r1, [pc, #152]	@ (8005cb0 <HAL_RCC_OscConfig+0x630>)
 8005c16:	400a      	ands	r2, r1
 8005c18:	60da      	str	r2, [r3, #12]
 8005c1a:	e038      	b.n	8005c8e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e033      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005c28:	4b1b      	ldr	r3, [pc, #108]	@ (8005c98 <HAL_RCC_OscConfig+0x618>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2203      	movs	r2, #3
 8005c32:	401a      	ands	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d126      	bne.n	8005c8a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2270      	movs	r2, #112	@ 0x70
 8005c40:	401a      	ands	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d11f      	bne.n	8005c8a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	23fe      	movs	r3, #254	@ 0xfe
 8005c4e:	01db      	lsls	r3, r3, #7
 8005c50:	401a      	ands	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c56:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d116      	bne.n	8005c8a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	23f8      	movs	r3, #248	@ 0xf8
 8005c60:	039b      	lsls	r3, r3, #14
 8005c62:	401a      	ands	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d10e      	bne.n	8005c8a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	23e0      	movs	r3, #224	@ 0xe0
 8005c70:	051b      	lsls	r3, r3, #20
 8005c72:	401a      	ands	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d106      	bne.n	8005c8a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	0f5b      	lsrs	r3, r3, #29
 8005c80:	075a      	lsls	r2, r3, #29
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d001      	beq.n	8005c8e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	0018      	movs	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	b008      	add	sp, #32
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	40007000 	.word	0x40007000
 8005ca0:	00001388 	.word	0x00001388
 8005ca4:	efffffff 	.word	0xefffffff
 8005ca8:	feffffff 	.word	0xfeffffff
 8005cac:	11c1808c 	.word	0x11c1808c
 8005cb0:	eefefffc 	.word	0xeefefffc

08005cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e0e9      	b.n	8005e9c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cc8:	4b76      	ldr	r3, [pc, #472]	@ (8005ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2207      	movs	r2, #7
 8005cce:	4013      	ands	r3, r2
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d91e      	bls.n	8005d14 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd6:	4b73      	ldr	r3, [pc, #460]	@ (8005ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2207      	movs	r2, #7
 8005cdc:	4393      	bics	r3, r2
 8005cde:	0019      	movs	r1, r3
 8005ce0:	4b70      	ldr	r3, [pc, #448]	@ (8005ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ce8:	f7fd fdac 	bl	8003844 <HAL_GetTick>
 8005cec:	0003      	movs	r3, r0
 8005cee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005cf0:	e009      	b.n	8005d06 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf2:	f7fd fda7 	bl	8003844 <HAL_GetTick>
 8005cf6:	0002      	movs	r2, r0
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	4a6a      	ldr	r2, [pc, #424]	@ (8005ea8 <HAL_RCC_ClockConfig+0x1f4>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e0ca      	b.n	8005e9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d06:	4b67      	ldr	r3, [pc, #412]	@ (8005ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2207      	movs	r2, #7
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d1ee      	bne.n	8005cf2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	d015      	beq.n	8005d4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2204      	movs	r2, #4
 8005d24:	4013      	ands	r3, r2
 8005d26:	d006      	beq.n	8005d36 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005d28:	4b60      	ldr	r3, [pc, #384]	@ (8005eac <HAL_RCC_ClockConfig+0x1f8>)
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	4b5f      	ldr	r3, [pc, #380]	@ (8005eac <HAL_RCC_ClockConfig+0x1f8>)
 8005d2e:	21e0      	movs	r1, #224	@ 0xe0
 8005d30:	01c9      	lsls	r1, r1, #7
 8005d32:	430a      	orrs	r2, r1
 8005d34:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d36:	4b5d      	ldr	r3, [pc, #372]	@ (8005eac <HAL_RCC_ClockConfig+0x1f8>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	4a5d      	ldr	r2, [pc, #372]	@ (8005eb0 <HAL_RCC_ClockConfig+0x1fc>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	0019      	movs	r1, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	4b59      	ldr	r3, [pc, #356]	@ (8005eac <HAL_RCC_ClockConfig+0x1f8>)
 8005d46:	430a      	orrs	r2, r1
 8005d48:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	4013      	ands	r3, r2
 8005d52:	d057      	beq.n	8005e04 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d107      	bne.n	8005d6c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d5c:	4b53      	ldr	r3, [pc, #332]	@ (8005eac <HAL_RCC_ClockConfig+0x1f8>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	2380      	movs	r3, #128	@ 0x80
 8005d62:	029b      	lsls	r3, r3, #10
 8005d64:	4013      	ands	r3, r2
 8005d66:	d12b      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e097      	b.n	8005e9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d107      	bne.n	8005d84 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d74:	4b4d      	ldr	r3, [pc, #308]	@ (8005eac <HAL_RCC_ClockConfig+0x1f8>)
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	2380      	movs	r3, #128	@ 0x80
 8005d7a:	049b      	lsls	r3, r3, #18
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	d11f      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e08b      	b.n	8005e9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d107      	bne.n	8005d9c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d8c:	4b47      	ldr	r3, [pc, #284]	@ (8005eac <HAL_RCC_ClockConfig+0x1f8>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	2380      	movs	r3, #128	@ 0x80
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	4013      	ands	r3, r2
 8005d96:	d113      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e07f      	b.n	8005e9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d106      	bne.n	8005db2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005da4:	4b41      	ldr	r3, [pc, #260]	@ (8005eac <HAL_RCC_ClockConfig+0x1f8>)
 8005da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005da8:	2202      	movs	r2, #2
 8005daa:	4013      	ands	r3, r2
 8005dac:	d108      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e074      	b.n	8005e9c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005db2:	4b3e      	ldr	r3, [pc, #248]	@ (8005eac <HAL_RCC_ClockConfig+0x1f8>)
 8005db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005db6:	2202      	movs	r2, #2
 8005db8:	4013      	ands	r3, r2
 8005dba:	d101      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e06d      	b.n	8005e9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dc0:	4b3a      	ldr	r3, [pc, #232]	@ (8005eac <HAL_RCC_ClockConfig+0x1f8>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	2207      	movs	r2, #7
 8005dc6:	4393      	bics	r3, r2
 8005dc8:	0019      	movs	r1, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	4b37      	ldr	r3, [pc, #220]	@ (8005eac <HAL_RCC_ClockConfig+0x1f8>)
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dd4:	f7fd fd36 	bl	8003844 <HAL_GetTick>
 8005dd8:	0003      	movs	r3, r0
 8005dda:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ddc:	e009      	b.n	8005df2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dde:	f7fd fd31 	bl	8003844 <HAL_GetTick>
 8005de2:	0002      	movs	r2, r0
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	4a2f      	ldr	r2, [pc, #188]	@ (8005ea8 <HAL_RCC_ClockConfig+0x1f4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e054      	b.n	8005e9c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005df2:	4b2e      	ldr	r3, [pc, #184]	@ (8005eac <HAL_RCC_ClockConfig+0x1f8>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	2238      	movs	r2, #56	@ 0x38
 8005df8:	401a      	ands	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d1ec      	bne.n	8005dde <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e04:	4b27      	ldr	r3, [pc, #156]	@ (8005ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2207      	movs	r2, #7
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d21e      	bcs.n	8005e50 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e12:	4b24      	ldr	r3, [pc, #144]	@ (8005ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2207      	movs	r2, #7
 8005e18:	4393      	bics	r3, r2
 8005e1a:	0019      	movs	r1, r3
 8005e1c:	4b21      	ldr	r3, [pc, #132]	@ (8005ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e24:	f7fd fd0e 	bl	8003844 <HAL_GetTick>
 8005e28:	0003      	movs	r3, r0
 8005e2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005e2c:	e009      	b.n	8005e42 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e2e:	f7fd fd09 	bl	8003844 <HAL_GetTick>
 8005e32:	0002      	movs	r2, r0
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea8 <HAL_RCC_ClockConfig+0x1f4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e02c      	b.n	8005e9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005e42:	4b18      	ldr	r3, [pc, #96]	@ (8005ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2207      	movs	r2, #7
 8005e48:	4013      	ands	r3, r2
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d1ee      	bne.n	8005e2e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2204      	movs	r2, #4
 8005e56:	4013      	ands	r3, r2
 8005e58:	d009      	beq.n	8005e6e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005e5a:	4b14      	ldr	r3, [pc, #80]	@ (8005eac <HAL_RCC_ClockConfig+0x1f8>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	4a15      	ldr	r2, [pc, #84]	@ (8005eb4 <HAL_RCC_ClockConfig+0x200>)
 8005e60:	4013      	ands	r3, r2
 8005e62:	0019      	movs	r1, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	4b10      	ldr	r3, [pc, #64]	@ (8005eac <HAL_RCC_ClockConfig+0x1f8>)
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005e6e:	f000 f829 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8005e72:	0001      	movs	r1, r0
 8005e74:	4b0d      	ldr	r3, [pc, #52]	@ (8005eac <HAL_RCC_ClockConfig+0x1f8>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	220f      	movs	r2, #15
 8005e7c:	401a      	ands	r2, r3
 8005e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005eb8 <HAL_RCC_ClockConfig+0x204>)
 8005e80:	0092      	lsls	r2, r2, #2
 8005e82:	58d3      	ldr	r3, [r2, r3]
 8005e84:	221f      	movs	r2, #31
 8005e86:	4013      	ands	r3, r2
 8005e88:	000a      	movs	r2, r1
 8005e8a:	40da      	lsrs	r2, r3
 8005e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005ebc <HAL_RCC_ClockConfig+0x208>)
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e90:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec0 <HAL_RCC_ClockConfig+0x20c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	0018      	movs	r0, r3
 8005e96:	f7fd fc79 	bl	800378c <HAL_InitTick>
 8005e9a:	0003      	movs	r3, r0
}
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	b004      	add	sp, #16
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	40022000 	.word	0x40022000
 8005ea8:	00001388 	.word	0x00001388
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	fffff0ff 	.word	0xfffff0ff
 8005eb4:	ffff8fff 	.word	0xffff8fff
 8005eb8:	080093a0 	.word	0x080093a0
 8005ebc:	2000008c 	.word	0x2000008c
 8005ec0:	20000090 	.word	0x20000090

08005ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005eca:	4b3c      	ldr	r3, [pc, #240]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	2238      	movs	r2, #56	@ 0x38
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	d10f      	bne.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005ed4:	4b39      	ldr	r3, [pc, #228]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	0adb      	lsrs	r3, r3, #11
 8005eda:	2207      	movs	r2, #7
 8005edc:	4013      	ands	r3, r2
 8005ede:	2201      	movs	r2, #1
 8005ee0:	409a      	lsls	r2, r3
 8005ee2:	0013      	movs	r3, r2
 8005ee4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005ee6:	6839      	ldr	r1, [r7, #0]
 8005ee8:	4835      	ldr	r0, [pc, #212]	@ (8005fc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005eea:	f7fa f90b 	bl	8000104 <__udivsi3>
 8005eee:	0003      	movs	r3, r0
 8005ef0:	613b      	str	r3, [r7, #16]
 8005ef2:	e05d      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ef4:	4b31      	ldr	r3, [pc, #196]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	2238      	movs	r2, #56	@ 0x38
 8005efa:	4013      	ands	r3, r2
 8005efc:	2b08      	cmp	r3, #8
 8005efe:	d102      	bne.n	8005f06 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f00:	4b2f      	ldr	r3, [pc, #188]	@ (8005fc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f02:	613b      	str	r3, [r7, #16]
 8005f04:	e054      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f06:	4b2d      	ldr	r3, [pc, #180]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	2238      	movs	r2, #56	@ 0x38
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	2b10      	cmp	r3, #16
 8005f10:	d138      	bne.n	8005f84 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005f12:	4b2a      	ldr	r3, [pc, #168]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	2203      	movs	r2, #3
 8005f18:	4013      	ands	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f1c:	4b27      	ldr	r3, [pc, #156]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	091b      	lsrs	r3, r3, #4
 8005f22:	2207      	movs	r2, #7
 8005f24:	4013      	ands	r3, r2
 8005f26:	3301      	adds	r3, #1
 8005f28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d10d      	bne.n	8005f4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	4823      	ldr	r0, [pc, #140]	@ (8005fc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f34:	f7fa f8e6 	bl	8000104 <__udivsi3>
 8005f38:	0003      	movs	r3, r0
 8005f3a:	0019      	movs	r1, r3
 8005f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	0a1b      	lsrs	r3, r3, #8
 8005f42:	227f      	movs	r2, #127	@ 0x7f
 8005f44:	4013      	ands	r3, r2
 8005f46:	434b      	muls	r3, r1
 8005f48:	617b      	str	r3, [r7, #20]
        break;
 8005f4a:	e00d      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005f4c:	68b9      	ldr	r1, [r7, #8]
 8005f4e:	481c      	ldr	r0, [pc, #112]	@ (8005fc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f50:	f7fa f8d8 	bl	8000104 <__udivsi3>
 8005f54:	0003      	movs	r3, r0
 8005f56:	0019      	movs	r1, r3
 8005f58:	4b18      	ldr	r3, [pc, #96]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	0a1b      	lsrs	r3, r3, #8
 8005f5e:	227f      	movs	r2, #127	@ 0x7f
 8005f60:	4013      	ands	r3, r2
 8005f62:	434b      	muls	r3, r1
 8005f64:	617b      	str	r3, [r7, #20]
        break;
 8005f66:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005f68:	4b14      	ldr	r3, [pc, #80]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	0f5b      	lsrs	r3, r3, #29
 8005f6e:	2207      	movs	r2, #7
 8005f70:	4013      	ands	r3, r2
 8005f72:	3301      	adds	r3, #1
 8005f74:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005f76:	6879      	ldr	r1, [r7, #4]
 8005f78:	6978      	ldr	r0, [r7, #20]
 8005f7a:	f7fa f8c3 	bl	8000104 <__udivsi3>
 8005f7e:	0003      	movs	r3, r0
 8005f80:	613b      	str	r3, [r7, #16]
 8005f82:	e015      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005f84:	4b0d      	ldr	r3, [pc, #52]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	2238      	movs	r2, #56	@ 0x38
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	2b20      	cmp	r3, #32
 8005f8e:	d103      	bne.n	8005f98 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005f90:	2380      	movs	r3, #128	@ 0x80
 8005f92:	021b      	lsls	r3, r3, #8
 8005f94:	613b      	str	r3, [r7, #16]
 8005f96:	e00b      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005f98:	4b08      	ldr	r3, [pc, #32]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	2238      	movs	r2, #56	@ 0x38
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	2b18      	cmp	r3, #24
 8005fa2:	d103      	bne.n	8005fac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005fa4:	23fa      	movs	r3, #250	@ 0xfa
 8005fa6:	01db      	lsls	r3, r3, #7
 8005fa8:	613b      	str	r3, [r7, #16]
 8005faa:	e001      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005fb0:	693b      	ldr	r3, [r7, #16]
}
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	b006      	add	sp, #24
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	46c0      	nop			@ (mov r8, r8)
 8005fbc:	40021000 	.word	0x40021000
 8005fc0:	00f42400 	.word	0x00f42400

08005fc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fc8:	4b02      	ldr	r3, [pc, #8]	@ (8005fd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005fca:	681b      	ldr	r3, [r3, #0]
}
 8005fcc:	0018      	movs	r0, r3
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	46c0      	nop			@ (mov r8, r8)
 8005fd4:	2000008c 	.word	0x2000008c

08005fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fd8:	b5b0      	push	{r4, r5, r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005fdc:	f7ff fff2 	bl	8005fc4 <HAL_RCC_GetHCLKFreq>
 8005fe0:	0004      	movs	r4, r0
 8005fe2:	f7ff fb41 	bl	8005668 <LL_RCC_GetAPB1Prescaler>
 8005fe6:	0003      	movs	r3, r0
 8005fe8:	0b1a      	lsrs	r2, r3, #12
 8005fea:	4b05      	ldr	r3, [pc, #20]	@ (8006000 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fec:	0092      	lsls	r2, r2, #2
 8005fee:	58d3      	ldr	r3, [r2, r3]
 8005ff0:	221f      	movs	r2, #31
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	40dc      	lsrs	r4, r3
 8005ff6:	0023      	movs	r3, r4
}
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8005ffe:	46c0      	nop			@ (mov r8, r8)
 8006000:	080093e0 	.word	0x080093e0

08006004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800600c:	2313      	movs	r3, #19
 800600e:	18fb      	adds	r3, r7, r3
 8006010:	2200      	movs	r2, #0
 8006012:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006014:	2312      	movs	r3, #18
 8006016:	18fb      	adds	r3, r7, r3
 8006018:	2200      	movs	r2, #0
 800601a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	2380      	movs	r3, #128	@ 0x80
 8006022:	029b      	lsls	r3, r3, #10
 8006024:	4013      	ands	r3, r2
 8006026:	d100      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006028:	e0a3      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800602a:	2011      	movs	r0, #17
 800602c:	183b      	adds	r3, r7, r0
 800602e:	2200      	movs	r2, #0
 8006030:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006032:	4ba5      	ldr	r3, [pc, #660]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006034:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006036:	2380      	movs	r3, #128	@ 0x80
 8006038:	055b      	lsls	r3, r3, #21
 800603a:	4013      	ands	r3, r2
 800603c:	d110      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800603e:	4ba2      	ldr	r3, [pc, #648]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006040:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006042:	4ba1      	ldr	r3, [pc, #644]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006044:	2180      	movs	r1, #128	@ 0x80
 8006046:	0549      	lsls	r1, r1, #21
 8006048:	430a      	orrs	r2, r1
 800604a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800604c:	4b9e      	ldr	r3, [pc, #632]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800604e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006050:	2380      	movs	r3, #128	@ 0x80
 8006052:	055b      	lsls	r3, r3, #21
 8006054:	4013      	ands	r3, r2
 8006056:	60bb      	str	r3, [r7, #8]
 8006058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800605a:	183b      	adds	r3, r7, r0
 800605c:	2201      	movs	r2, #1
 800605e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006060:	4b9a      	ldr	r3, [pc, #616]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	4b99      	ldr	r3, [pc, #612]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006066:	2180      	movs	r1, #128	@ 0x80
 8006068:	0049      	lsls	r1, r1, #1
 800606a:	430a      	orrs	r2, r1
 800606c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800606e:	f7fd fbe9 	bl	8003844 <HAL_GetTick>
 8006072:	0003      	movs	r3, r0
 8006074:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006076:	e00b      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006078:	f7fd fbe4 	bl	8003844 <HAL_GetTick>
 800607c:	0002      	movs	r2, r0
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d904      	bls.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006086:	2313      	movs	r3, #19
 8006088:	18fb      	adds	r3, r7, r3
 800608a:	2203      	movs	r2, #3
 800608c:	701a      	strb	r2, [r3, #0]
        break;
 800608e:	e005      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006090:	4b8e      	ldr	r3, [pc, #568]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	2380      	movs	r3, #128	@ 0x80
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	4013      	ands	r3, r2
 800609a:	d0ed      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800609c:	2313      	movs	r3, #19
 800609e:	18fb      	adds	r3, r7, r3
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d154      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060a6:	4b88      	ldr	r3, [pc, #544]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060aa:	23c0      	movs	r3, #192	@ 0xc0
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4013      	ands	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d019      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d014      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060c2:	4b81      	ldr	r3, [pc, #516]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060c6:	4a82      	ldr	r2, [pc, #520]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060cc:	4b7e      	ldr	r3, [pc, #504]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060d0:	4b7d      	ldr	r3, [pc, #500]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060d2:	2180      	movs	r1, #128	@ 0x80
 80060d4:	0249      	lsls	r1, r1, #9
 80060d6:	430a      	orrs	r2, r1
 80060d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060da:	4b7b      	ldr	r3, [pc, #492]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060de:	4b7a      	ldr	r3, [pc, #488]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060e0:	497c      	ldr	r1, [pc, #496]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80060e2:	400a      	ands	r2, r1
 80060e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060e6:	4b78      	ldr	r3, [pc, #480]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2201      	movs	r2, #1
 80060f0:	4013      	ands	r3, r2
 80060f2:	d016      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f4:	f7fd fba6 	bl	8003844 <HAL_GetTick>
 80060f8:	0003      	movs	r3, r0
 80060fa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060fc:	e00c      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060fe:	f7fd fba1 	bl	8003844 <HAL_GetTick>
 8006102:	0002      	movs	r2, r0
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	4a73      	ldr	r2, [pc, #460]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d904      	bls.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800610e:	2313      	movs	r3, #19
 8006110:	18fb      	adds	r3, r7, r3
 8006112:	2203      	movs	r2, #3
 8006114:	701a      	strb	r2, [r3, #0]
            break;
 8006116:	e004      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006118:	4b6b      	ldr	r3, [pc, #428]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800611a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800611c:	2202      	movs	r2, #2
 800611e:	4013      	ands	r3, r2
 8006120:	d0ed      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006122:	2313      	movs	r3, #19
 8006124:	18fb      	adds	r3, r7, r3
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800612c:	4b66      	ldr	r3, [pc, #408]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800612e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006130:	4a67      	ldr	r2, [pc, #412]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006132:	4013      	ands	r3, r2
 8006134:	0019      	movs	r1, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800613a:	4b63      	ldr	r3, [pc, #396]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800613c:	430a      	orrs	r2, r1
 800613e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006140:	e00c      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006142:	2312      	movs	r3, #18
 8006144:	18fb      	adds	r3, r7, r3
 8006146:	2213      	movs	r2, #19
 8006148:	18ba      	adds	r2, r7, r2
 800614a:	7812      	ldrb	r2, [r2, #0]
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	e005      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006150:	2312      	movs	r3, #18
 8006152:	18fb      	adds	r3, r7, r3
 8006154:	2213      	movs	r2, #19
 8006156:	18ba      	adds	r2, r7, r2
 8006158:	7812      	ldrb	r2, [r2, #0]
 800615a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800615c:	2311      	movs	r3, #17
 800615e:	18fb      	adds	r3, r7, r3
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d105      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006166:	4b58      	ldr	r3, [pc, #352]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006168:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800616a:	4b57      	ldr	r3, [pc, #348]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800616c:	495b      	ldr	r1, [pc, #364]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800616e:	400a      	ands	r2, r1
 8006170:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2201      	movs	r2, #1
 8006178:	4013      	ands	r3, r2
 800617a:	d009      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800617c:	4b52      	ldr	r3, [pc, #328]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800617e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006180:	2203      	movs	r2, #3
 8006182:	4393      	bics	r3, r2
 8006184:	0019      	movs	r1, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	4b4f      	ldr	r3, [pc, #316]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800618c:	430a      	orrs	r2, r1
 800618e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2210      	movs	r2, #16
 8006196:	4013      	ands	r3, r2
 8006198:	d009      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800619a:	4b4b      	ldr	r3, [pc, #300]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800619c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800619e:	4a50      	ldr	r2, [pc, #320]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	0019      	movs	r1, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	4b47      	ldr	r3, [pc, #284]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061aa:	430a      	orrs	r2, r1
 80061ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	2380      	movs	r3, #128	@ 0x80
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4013      	ands	r3, r2
 80061b8:	d009      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061ba:	4b43      	ldr	r3, [pc, #268]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061be:	4a49      	ldr	r2, [pc, #292]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80061c0:	4013      	ands	r3, r2
 80061c2:	0019      	movs	r1, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	695a      	ldr	r2, [r3, #20]
 80061c8:	4b3f      	ldr	r3, [pc, #252]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061ca:	430a      	orrs	r2, r1
 80061cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	2380      	movs	r3, #128	@ 0x80
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	4013      	ands	r3, r2
 80061d8:	d009      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061da:	4b3b      	ldr	r3, [pc, #236]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061de:	4a42      	ldr	r2, [pc, #264]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	0019      	movs	r1, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699a      	ldr	r2, [r3, #24]
 80061e8:	4b37      	ldr	r3, [pc, #220]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061ea:	430a      	orrs	r2, r1
 80061ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2220      	movs	r2, #32
 80061f4:	4013      	ands	r3, r2
 80061f6:	d009      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061f8:	4b33      	ldr	r3, [pc, #204]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061fc:	4a3b      	ldr	r2, [pc, #236]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80061fe:	4013      	ands	r3, r2
 8006200:	0019      	movs	r1, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	4b30      	ldr	r3, [pc, #192]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006208:	430a      	orrs	r2, r1
 800620a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	2380      	movs	r3, #128	@ 0x80
 8006212:	01db      	lsls	r3, r3, #7
 8006214:	4013      	ands	r3, r2
 8006216:	d015      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006218:	4b2b      	ldr	r3, [pc, #172]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800621a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	0899      	lsrs	r1, r3, #2
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	69da      	ldr	r2, [r3, #28]
 8006224:	4b28      	ldr	r3, [pc, #160]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006226:	430a      	orrs	r2, r1
 8006228:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69da      	ldr	r2, [r3, #28]
 800622e:	2380      	movs	r3, #128	@ 0x80
 8006230:	05db      	lsls	r3, r3, #23
 8006232:	429a      	cmp	r2, r3
 8006234:	d106      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006236:	4b24      	ldr	r3, [pc, #144]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	4b23      	ldr	r3, [pc, #140]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800623c:	2180      	movs	r1, #128	@ 0x80
 800623e:	0249      	lsls	r1, r1, #9
 8006240:	430a      	orrs	r2, r1
 8006242:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	2380      	movs	r3, #128	@ 0x80
 800624a:	039b      	lsls	r3, r3, #14
 800624c:	4013      	ands	r3, r2
 800624e:	d016      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006250:	4b1d      	ldr	r3, [pc, #116]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006254:	4a26      	ldr	r2, [pc, #152]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006256:	4013      	ands	r3, r2
 8006258:	0019      	movs	r1, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1a      	ldr	r2, [r3, #32]
 800625e:	4b1a      	ldr	r3, [pc, #104]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006260:	430a      	orrs	r2, r1
 8006262:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a1a      	ldr	r2, [r3, #32]
 8006268:	2380      	movs	r3, #128	@ 0x80
 800626a:	03db      	lsls	r3, r3, #15
 800626c:	429a      	cmp	r2, r3
 800626e:	d106      	bne.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006270:	4b15      	ldr	r3, [pc, #84]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	4b14      	ldr	r3, [pc, #80]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006276:	2180      	movs	r1, #128	@ 0x80
 8006278:	0449      	lsls	r1, r1, #17
 800627a:	430a      	orrs	r2, r1
 800627c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	2380      	movs	r3, #128	@ 0x80
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	4013      	ands	r3, r2
 8006288:	d016      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800628a:	4b0f      	ldr	r3, [pc, #60]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800628c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800628e:	4a19      	ldr	r2, [pc, #100]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006290:	4013      	ands	r3, r2
 8006292:	0019      	movs	r1, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691a      	ldr	r2, [r3, #16]
 8006298:	4b0b      	ldr	r3, [pc, #44]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800629a:	430a      	orrs	r2, r1
 800629c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691a      	ldr	r2, [r3, #16]
 80062a2:	2380      	movs	r3, #128	@ 0x80
 80062a4:	01db      	lsls	r3, r3, #7
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d106      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80062aa:	4b07      	ldr	r3, [pc, #28]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	4b06      	ldr	r3, [pc, #24]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062b0:	2180      	movs	r1, #128	@ 0x80
 80062b2:	0249      	lsls	r1, r1, #9
 80062b4:	430a      	orrs	r2, r1
 80062b6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80062b8:	2312      	movs	r3, #18
 80062ba:	18fb      	adds	r3, r7, r3
 80062bc:	781b      	ldrb	r3, [r3, #0]
}
 80062be:	0018      	movs	r0, r3
 80062c0:	46bd      	mov	sp, r7
 80062c2:	b006      	add	sp, #24
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	46c0      	nop			@ (mov r8, r8)
 80062c8:	40021000 	.word	0x40021000
 80062cc:	40007000 	.word	0x40007000
 80062d0:	fffffcff 	.word	0xfffffcff
 80062d4:	fffeffff 	.word	0xfffeffff
 80062d8:	00001388 	.word	0x00001388
 80062dc:	efffffff 	.word	0xefffffff
 80062e0:	fffff3ff 	.word	0xfffff3ff
 80062e4:	fff3ffff 	.word	0xfff3ffff
 80062e8:	ffcfffff 	.word	0xffcfffff
 80062ec:	ffffcfff 	.word	0xffffcfff
 80062f0:	ffbfffff 	.word	0xffbfffff
 80062f4:	ffff3fff 	.word	0xffff3fff

080062f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	2380      	movs	r3, #128	@ 0x80
 8006308:	029b      	lsls	r3, r3, #10
 800630a:	429a      	cmp	r2, r3
 800630c:	d136      	bne.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800630e:	4bcd      	ldr	r3, [pc, #820]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006310:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006312:	23c0      	movs	r3, #192	@ 0xc0
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4013      	ands	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800631a:	4bca      	ldr	r3, [pc, #808]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800631c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800631e:	2202      	movs	r2, #2
 8006320:	4013      	ands	r3, r2
 8006322:	2b02      	cmp	r3, #2
 8006324:	d108      	bne.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	2380      	movs	r3, #128	@ 0x80
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	429a      	cmp	r2, r3
 800632e:	d103      	bne.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8006330:	2380      	movs	r3, #128	@ 0x80
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	e26b      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006338:	4bc2      	ldr	r3, [pc, #776]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800633a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800633c:	2202      	movs	r2, #2
 800633e:	4013      	ands	r3, r2
 8006340:	2b02      	cmp	r3, #2
 8006342:	d108      	bne.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	2380      	movs	r3, #128	@ 0x80
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	429a      	cmp	r2, r3
 800634c:	d103      	bne.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 800634e:	23fa      	movs	r3, #250	@ 0xfa
 8006350:	01db      	lsls	r3, r3, #7
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	e25c      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006356:	4bbb      	ldr	r3, [pc, #748]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	2380      	movs	r3, #128	@ 0x80
 800635c:	029b      	lsls	r3, r3, #10
 800635e:	401a      	ands	r2, r3
 8006360:	2380      	movs	r3, #128	@ 0x80
 8006362:	029b      	lsls	r3, r3, #10
 8006364:	429a      	cmp	r2, r3
 8006366:	d000      	beq.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8006368:	e252      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	23c0      	movs	r3, #192	@ 0xc0
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	429a      	cmp	r2, r3
 8006372:	d000      	beq.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8006374:	e24c      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    {
      frequency = HSE_VALUE / 32U;
 8006376:	4bb4      	ldr	r3, [pc, #720]	@ (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	e249      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 800637c:	4bb1      	ldr	r3, [pc, #708]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	2203      	movs	r2, #3
 8006382:	4013      	ands	r3, r2
 8006384:	2b02      	cmp	r3, #2
 8006386:	d102      	bne.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8006388:	4bb0      	ldr	r3, [pc, #704]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800638a:	613b      	str	r3, [r7, #16]
 800638c:	e00a      	b.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 800638e:	4bad      	ldr	r3, [pc, #692]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	2203      	movs	r2, #3
 8006394:	4013      	ands	r3, r2
 8006396:	2b03      	cmp	r3, #3
 8006398:	d102      	bne.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 800639a:	4bac      	ldr	r3, [pc, #688]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	e001      	b.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80063a4:	4ba7      	ldr	r3, [pc, #668]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	091b      	lsrs	r3, r3, #4
 80063aa:	2207      	movs	r2, #7
 80063ac:	4013      	ands	r3, r2
 80063ae:	3301      	adds	r3, #1
 80063b0:	0019      	movs	r1, r3
 80063b2:	6938      	ldr	r0, [r7, #16]
 80063b4:	f7f9 fea6 	bl	8000104 <__udivsi3>
 80063b8:	0003      	movs	r3, r0
 80063ba:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	2380      	movs	r3, #128	@ 0x80
 80063c0:	039b      	lsls	r3, r3, #14
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d100      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 80063c6:	e1e3      	b.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	2380      	movs	r3, #128	@ 0x80
 80063cc:	039b      	lsls	r3, r3, #14
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d900      	bls.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80063d2:	e20c      	b.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	2380      	movs	r3, #128	@ 0x80
 80063d8:	01db      	lsls	r3, r3, #7
 80063da:	429a      	cmp	r2, r3
 80063dc:	d100      	bne.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80063de:	e0a5      	b.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	2380      	movs	r3, #128	@ 0x80
 80063e4:	01db      	lsls	r3, r3, #7
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d900      	bls.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80063ea:	e200      	b.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	2380      	movs	r3, #128	@ 0x80
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d100      	bne.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80063f6:	e0fc      	b.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	2380      	movs	r3, #128	@ 0x80
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	429a      	cmp	r2, r3
 8006400:	d900      	bls.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8006402:	e1f4      	b.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	2380      	movs	r3, #128	@ 0x80
 8006408:	00db      	lsls	r3, r3, #3
 800640a:	429a      	cmp	r2, r3
 800640c:	d100      	bne.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 800640e:	e181      	b.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	2380      	movs	r3, #128	@ 0x80
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	429a      	cmp	r2, r3
 8006418:	d900      	bls.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800641a:	e1e8      	b.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	2380      	movs	r3, #128	@ 0x80
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	429a      	cmp	r2, r3
 8006424:	d100      	bne.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8006426:	e135      	b.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	2380      	movs	r3, #128	@ 0x80
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	429a      	cmp	r2, r3
 8006430:	d900      	bls.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8006432:	e1dc      	b.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b20      	cmp	r3, #32
 8006438:	d100      	bne.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800643a:	e0af      	b.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b20      	cmp	r3, #32
 8006440:	d900      	bls.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8006442:	e1d4      	b.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d003      	beq.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b10      	cmp	r3, #16
 800644e:	d033      	beq.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8006450:	e1cd      	b.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006452:	4b7c      	ldr	r3, [pc, #496]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006456:	2203      	movs	r2, #3
 8006458:	4013      	ands	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d104      	bne.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x174>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006462:	f7ff fdb9 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 8006466:	0003      	movs	r3, r0
 8006468:	617b      	str	r3, [r7, #20]
        break;
 800646a:	e1c2      	b.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d104      	bne.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          frequency = HAL_RCC_GetSysClockFreq();
 8006472:	f7ff fd27 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8006476:	0003      	movs	r3, r0
 8006478:	617b      	str	r3, [r7, #20]
        break;
 800647a:	e1ba      	b.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800647c:	4b71      	ldr	r3, [pc, #452]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	2380      	movs	r3, #128	@ 0x80
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	401a      	ands	r2, r3
 8006486:	2380      	movs	r3, #128	@ 0x80
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	429a      	cmp	r2, r3
 800648c:	d105      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b02      	cmp	r3, #2
 8006492:	d102      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = HSI_VALUE;
 8006494:	4b6d      	ldr	r3, [pc, #436]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006496:	617b      	str	r3, [r7, #20]
        break;
 8006498:	e1ab      	b.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800649a:	4b6a      	ldr	r3, [pc, #424]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800649c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800649e:	2202      	movs	r2, #2
 80064a0:	4013      	ands	r3, r2
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d000      	beq.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 80064a6:	e1a4      	b.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d000      	beq.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80064ae:	e1a0      	b.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          frequency = LSE_VALUE;
 80064b0:	2380      	movs	r3, #128	@ 0x80
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	617b      	str	r3, [r7, #20]
        break;
 80064b6:	e19c      	b.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80064b8:	4b62      	ldr	r3, [pc, #392]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80064ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064bc:	23c0      	movs	r3, #192	@ 0xc0
 80064be:	011b      	lsls	r3, r3, #4
 80064c0:	4013      	ands	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d104      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80064ca:	f7ff fd85 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 80064ce:	0003      	movs	r3, r0
 80064d0:	617b      	str	r3, [r7, #20]
        break;
 80064d2:	e190      	b.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	2380      	movs	r3, #128	@ 0x80
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	429a      	cmp	r2, r3
 80064dc:	d104      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80064de:	f7ff fcf1 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 80064e2:	0003      	movs	r3, r0
 80064e4:	617b      	str	r3, [r7, #20]
        break;
 80064e6:	e186      	b.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80064e8:	4b56      	ldr	r3, [pc, #344]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	2380      	movs	r3, #128	@ 0x80
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	401a      	ands	r2, r3
 80064f2:	2380      	movs	r3, #128	@ 0x80
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d107      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	2380      	movs	r3, #128	@ 0x80
 80064fe:	011b      	lsls	r3, r3, #4
 8006500:	429a      	cmp	r2, r3
 8006502:	d102      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = HSI_VALUE;
 8006504:	4b51      	ldr	r3, [pc, #324]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006506:	617b      	str	r3, [r7, #20]
        break;
 8006508:	e175      	b.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800650a:	4b4e      	ldr	r3, [pc, #312]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800650c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800650e:	2202      	movs	r2, #2
 8006510:	4013      	ands	r3, r2
 8006512:	2b02      	cmp	r3, #2
 8006514:	d000      	beq.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 8006516:	e16e      	b.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	23c0      	movs	r3, #192	@ 0xc0
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	429a      	cmp	r2, r3
 8006520:	d000      	beq.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006522:	e168      	b.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          frequency = LSE_VALUE;
 8006524:	2380      	movs	r3, #128	@ 0x80
 8006526:	021b      	lsls	r3, r3, #8
 8006528:	617b      	str	r3, [r7, #20]
        break;
 800652a:	e164      	b.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800652c:	4b45      	ldr	r3, [pc, #276]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800652e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006530:	0f9b      	lsrs	r3, r3, #30
 8006532:	079b      	lsls	r3, r3, #30
 8006534:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d104      	bne.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          frequency = HAL_RCC_GetSysClockFreq();
 800653c:	f7ff fcc2 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8006540:	0003      	movs	r3, r0
 8006542:	617b      	str	r3, [r7, #20]
        break;
 8006544:	e159      	b.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	2380      	movs	r3, #128	@ 0x80
 800654a:	061b      	lsls	r3, r3, #24
 800654c:	429a      	cmp	r2, r3
 800654e:	d102      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          frequency = HSI_VALUE;
 8006550:	4b3e      	ldr	r3, [pc, #248]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006552:	617b      	str	r3, [r7, #20]
        break;
 8006554:	e151      	b.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	2380      	movs	r3, #128	@ 0x80
 800655a:	05db      	lsls	r3, r3, #23
 800655c:	429a      	cmp	r2, r3
 800655e:	d000      	beq.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006560:	e14b      	b.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8006562:	4b38      	ldr	r3, [pc, #224]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	2380      	movs	r3, #128	@ 0x80
 8006568:	025b      	lsls	r3, r3, #9
 800656a:	4013      	ands	r3, r2
 800656c:	d100      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 800656e:	e144      	b.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006570:	4b34      	ldr	r3, [pc, #208]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	0a1b      	lsrs	r3, r3, #8
 8006576:	227f      	movs	r2, #127	@ 0x7f
 8006578:	4013      	ands	r3, r2
 800657a:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	435a      	muls	r2, r3
 8006582:	4b30      	ldr	r3, [pc, #192]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	0c5b      	lsrs	r3, r3, #17
 8006588:	211f      	movs	r1, #31
 800658a:	400b      	ands	r3, r1
 800658c:	3301      	adds	r3, #1
 800658e:	0019      	movs	r1, r3
 8006590:	0010      	movs	r0, r2
 8006592:	f7f9 fdb7 	bl	8000104 <__udivsi3>
 8006596:	0003      	movs	r3, r0
 8006598:	617b      	str	r3, [r7, #20]
        break;
 800659a:	e12e      	b.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800659c:	4b29      	ldr	r3, [pc, #164]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800659e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80065a0:	23c0      	movs	r3, #192	@ 0xc0
 80065a2:	019b      	lsls	r3, r3, #6
 80065a4:	4013      	ands	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d104      	bne.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065ae:	f7ff fd13 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 80065b2:	0003      	movs	r3, r0
 80065b4:	617b      	str	r3, [r7, #20]
        break;
 80065b6:	e122      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	2380      	movs	r3, #128	@ 0x80
 80065bc:	015b      	lsls	r3, r3, #5
 80065be:	429a      	cmp	r2, r3
 80065c0:	d104      	bne.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
          frequency = HAL_RCC_GetSysClockFreq();
 80065c2:	f7ff fc7f 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 80065c6:	0003      	movs	r3, r0
 80065c8:	617b      	str	r3, [r7, #20]
        break;
 80065ca:	e118      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80065cc:	4b1d      	ldr	r3, [pc, #116]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	2380      	movs	r3, #128	@ 0x80
 80065d2:	00db      	lsls	r3, r3, #3
 80065d4:	401a      	ands	r2, r3
 80065d6:	2380      	movs	r3, #128	@ 0x80
 80065d8:	00db      	lsls	r3, r3, #3
 80065da:	429a      	cmp	r2, r3
 80065dc:	d000      	beq.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80065de:	e10e      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	2380      	movs	r3, #128	@ 0x80
 80065e4:	019b      	lsls	r3, r3, #6
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d000      	beq.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80065ea:	e108      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          frequency = HSI_VALUE;
 80065ec:	4b17      	ldr	r3, [pc, #92]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80065ee:	617b      	str	r3, [r7, #20]
        break;
 80065f0:	e105      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 80065f2:	4b14      	ldr	r3, [pc, #80]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80065f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80065f6:	23c0      	movs	r3, #192	@ 0xc0
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	4013      	ands	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	2380      	movs	r3, #128	@ 0x80
 8006602:	01db      	lsls	r3, r3, #7
 8006604:	429a      	cmp	r2, r3
 8006606:	d123      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8006608:	4b0e      	ldr	r3, [pc, #56]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	2380      	movs	r3, #128	@ 0x80
 800660e:	025b      	lsls	r3, r3, #9
 8006610:	4013      	ands	r3, r2
 8006612:	d100      	bne.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006614:	e0f5      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006616:	4b0b      	ldr	r3, [pc, #44]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	0a1b      	lsrs	r3, r3, #8
 800661c:	227f      	movs	r2, #127	@ 0x7f
 800661e:	4013      	ands	r3, r2
 8006620:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	435a      	muls	r2, r3
 8006628:	4b06      	ldr	r3, [pc, #24]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	0c5b      	lsrs	r3, r3, #17
 800662e:	211f      	movs	r1, #31
 8006630:	400b      	ands	r3, r1
 8006632:	3301      	adds	r3, #1
 8006634:	0019      	movs	r1, r3
 8006636:	0010      	movs	r0, r2
 8006638:	f7f9 fd64 	bl	8000104 <__udivsi3>
 800663c:	0003      	movs	r3, r0
 800663e:	617b      	str	r3, [r7, #20]
        break;
 8006640:	e0df      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8006642:	46c0      	nop			@ (mov r8, r8)
 8006644:	40021000 	.word	0x40021000
 8006648:	0007a120 	.word	0x0007a120
 800664c:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d104      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          frequency = HAL_RCC_GetSysClockFreq();
 8006656:	f7ff fc35 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 800665a:	0003      	movs	r3, r0
 800665c:	617b      	str	r3, [r7, #20]
        break;
 800665e:	e0d0      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8006660:	4b6e      	ldr	r3, [pc, #440]	@ (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	2380      	movs	r3, #128	@ 0x80
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	401a      	ands	r2, r3
 800666a:	2380      	movs	r3, #128	@ 0x80
 800666c:	00db      	lsls	r3, r3, #3
 800666e:	429a      	cmp	r2, r3
 8006670:	d107      	bne.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	2380      	movs	r3, #128	@ 0x80
 8006676:	021b      	lsls	r3, r3, #8
 8006678:	429a      	cmp	r2, r3
 800667a:	d102      	bne.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
          frequency = HSI_VALUE;
 800667c:	4b68      	ldr	r3, [pc, #416]	@ (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800667e:	617b      	str	r3, [r7, #20]
        break;
 8006680:	e0bf      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	23c0      	movs	r3, #192	@ 0xc0
 8006686:	021b      	lsls	r3, r3, #8
 8006688:	429a      	cmp	r2, r3
 800668a:	d000      	beq.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800668c:	e0b9      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 800668e:	4b65      	ldr	r3, [pc, #404]	@ (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006690:	617b      	str	r3, [r7, #20]
        break;
 8006692:	e0b6      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006694:	4b61      	ldr	r3, [pc, #388]	@ (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006696:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006698:	23c0      	movs	r3, #192	@ 0xc0
 800669a:	031b      	lsls	r3, r3, #12
 800669c:	4013      	ands	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d104      	bne.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066a6:	f7ff fc97 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 80066aa:	0003      	movs	r3, r0
 80066ac:	617b      	str	r3, [r7, #20]
        break;
 80066ae:	e0aa      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80066b0:	4b5a      	ldr	r3, [pc, #360]	@ (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066b4:	2202      	movs	r2, #2
 80066b6:	4013      	ands	r3, r2
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d108      	bne.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	2380      	movs	r3, #128	@ 0x80
 80066c0:	02db      	lsls	r3, r3, #11
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d103      	bne.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = LSI_VALUE;
 80066c6:	23fa      	movs	r3, #250	@ 0xfa
 80066c8:	01db      	lsls	r3, r3, #7
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	e021      	b.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80066ce:	4b53      	ldr	r3, [pc, #332]	@ (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	2380      	movs	r3, #128	@ 0x80
 80066d4:	00db      	lsls	r3, r3, #3
 80066d6:	401a      	ands	r2, r3
 80066d8:	2380      	movs	r3, #128	@ 0x80
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	429a      	cmp	r2, r3
 80066de:	d107      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	2380      	movs	r3, #128	@ 0x80
 80066e4:	031b      	lsls	r3, r3, #12
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d102      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          frequency = HSI_VALUE;
 80066ea:	4b4d      	ldr	r3, [pc, #308]	@ (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	e010      	b.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80066f0:	4b4a      	ldr	r3, [pc, #296]	@ (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066f4:	2202      	movs	r2, #2
 80066f6:	4013      	ands	r3, r2
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d000      	beq.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 80066fc:	e083      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	23c0      	movs	r3, #192	@ 0xc0
 8006702:	031b      	lsls	r3, r3, #12
 8006704:	429a      	cmp	r2, r3
 8006706:	d000      	beq.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8006708:	e07d      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
          frequency = LSE_VALUE;
 800670a:	2380      	movs	r3, #128	@ 0x80
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	617b      	str	r3, [r7, #20]
        break;
 8006710:	e079      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006712:	e078      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006714:	4b41      	ldr	r3, [pc, #260]	@ (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006716:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006718:	23c0      	movs	r3, #192	@ 0xc0
 800671a:	039b      	lsls	r3, r3, #14
 800671c:	4013      	ands	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d104      	bne.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006726:	f7ff fc57 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 800672a:	0003      	movs	r3, r0
 800672c:	617b      	str	r3, [r7, #20]
        break;
 800672e:	e06c      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006730:	4b3a      	ldr	r3, [pc, #232]	@ (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006734:	2202      	movs	r2, #2
 8006736:	4013      	ands	r3, r2
 8006738:	2b02      	cmp	r3, #2
 800673a:	d108      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	2380      	movs	r3, #128	@ 0x80
 8006740:	035b      	lsls	r3, r3, #13
 8006742:	429a      	cmp	r2, r3
 8006744:	d103      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          frequency = LSI_VALUE;
 8006746:	23fa      	movs	r3, #250	@ 0xfa
 8006748:	01db      	lsls	r3, r3, #7
 800674a:	617b      	str	r3, [r7, #20]
 800674c:	e01f      	b.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800674e:	4b33      	ldr	r3, [pc, #204]	@ (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	2380      	movs	r3, #128	@ 0x80
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	401a      	ands	r2, r3
 8006758:	2380      	movs	r3, #128	@ 0x80
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	429a      	cmp	r2, r3
 800675e:	d107      	bne.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	2380      	movs	r3, #128	@ 0x80
 8006764:	039b      	lsls	r3, r3, #14
 8006766:	429a      	cmp	r2, r3
 8006768:	d102      	bne.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HSI_VALUE;
 800676a:	4b2d      	ldr	r3, [pc, #180]	@ (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800676c:	617b      	str	r3, [r7, #20]
 800676e:	e00e      	b.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006770:	4b2a      	ldr	r3, [pc, #168]	@ (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006774:	2202      	movs	r2, #2
 8006776:	4013      	ands	r3, r2
 8006778:	2b02      	cmp	r3, #2
 800677a:	d146      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	23c0      	movs	r3, #192	@ 0xc0
 8006780:	039b      	lsls	r3, r3, #14
 8006782:	429a      	cmp	r2, r3
 8006784:	d141      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          frequency = LSE_VALUE;
 8006786:	2380      	movs	r3, #128	@ 0x80
 8006788:	021b      	lsls	r3, r3, #8
 800678a:	617b      	str	r3, [r7, #20]
        break;
 800678c:	e03d      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 800678e:	e03c      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8006790:	4b22      	ldr	r3, [pc, #136]	@ (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006792:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006794:	2380      	movs	r3, #128	@ 0x80
 8006796:	03db      	lsls	r3, r3, #15
 8006798:	4013      	ands	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	2380      	movs	r3, #128	@ 0x80
 80067a0:	03db      	lsls	r3, r3, #15
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d11b      	bne.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80067a6:	4b1d      	ldr	r3, [pc, #116]	@ (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	2380      	movs	r3, #128	@ 0x80
 80067ac:	045b      	lsls	r3, r3, #17
 80067ae:	4013      	ands	r3, r2
 80067b0:	d02d      	beq.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80067b2:	4b1a      	ldr	r3, [pc, #104]	@ (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	0a1b      	lsrs	r3, r3, #8
 80067b8:	227f      	movs	r2, #127	@ 0x7f
 80067ba:	4013      	ands	r3, r2
 80067bc:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	435a      	muls	r2, r3
 80067c4:	4b15      	ldr	r3, [pc, #84]	@ (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	0e5b      	lsrs	r3, r3, #25
 80067ca:	2107      	movs	r1, #7
 80067cc:	400b      	ands	r3, r1
 80067ce:	3301      	adds	r3, #1
 80067d0:	0019      	movs	r1, r3
 80067d2:	0010      	movs	r0, r2
 80067d4:	f7f9 fc96 	bl	8000104 <__udivsi3>
 80067d8:	0003      	movs	r3, r0
 80067da:	617b      	str	r3, [r7, #20]
        break;
 80067dc:	e017      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d114      	bne.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067e4:	f7ff fbf8 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 80067e8:	0003      	movs	r3, r0
 80067ea:	617b      	str	r3, [r7, #20]
        break;
 80067ec:	e00f      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        break;
 80067ee:	46c0      	nop			@ (mov r8, r8)
 80067f0:	e00e      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80067f2:	46c0      	nop			@ (mov r8, r8)
 80067f4:	e00c      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80067f6:	46c0      	nop			@ (mov r8, r8)
 80067f8:	e00a      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80067fa:	46c0      	nop			@ (mov r8, r8)
 80067fc:	e008      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80067fe:	46c0      	nop			@ (mov r8, r8)
 8006800:	e006      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006802:	46c0      	nop			@ (mov r8, r8)
 8006804:	e004      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006806:	46c0      	nop			@ (mov r8, r8)
 8006808:	e002      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800680a:	46c0      	nop			@ (mov r8, r8)
 800680c:	e000      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800680e:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return (frequency);
 8006810:	697b      	ldr	r3, [r7, #20]
}
 8006812:	0018      	movs	r0, r3
 8006814:	46bd      	mov	sp, r7
 8006816:	b006      	add	sp, #24
 8006818:	bd80      	pop	{r7, pc}
 800681a:	46c0      	nop			@ (mov r8, r8)
 800681c:	40021000 	.word	0x40021000
 8006820:	00f42400 	.word	0x00f42400
 8006824:	00bb8000 	.word	0x00bb8000

08006828 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006828:	b5b0      	push	{r4, r5, r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006830:	230f      	movs	r3, #15
 8006832:	18fb      	adds	r3, r7, r3
 8006834:	2201      	movs	r2, #1
 8006836:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d100      	bne.n	8006840 <HAL_RTC_Init+0x18>
 800683e:	e08c      	b.n	800695a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2229      	movs	r2, #41	@ 0x29
 8006844:	5c9b      	ldrb	r3, [r3, r2]
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10b      	bne.n	8006864 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2228      	movs	r2, #40	@ 0x28
 8006850:	2100      	movs	r1, #0
 8006852:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2288      	movs	r2, #136	@ 0x88
 8006858:	0212      	lsls	r2, r2, #8
 800685a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	0018      	movs	r0, r3
 8006860:	f7fc fd32 	bl	80032c8 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2229      	movs	r2, #41	@ 0x29
 8006868:	2102      	movs	r1, #2
 800686a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	2210      	movs	r2, #16
 8006874:	4013      	ands	r3, r2
 8006876:	2b10      	cmp	r3, #16
 8006878:	d062      	beq.n	8006940 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	22ca      	movs	r2, #202	@ 0xca
 8006880:	625a      	str	r2, [r3, #36]	@ 0x24
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2253      	movs	r2, #83	@ 0x53
 8006888:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800688a:	250f      	movs	r5, #15
 800688c:	197c      	adds	r4, r7, r5
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	0018      	movs	r0, r3
 8006892:	f000 fc27 	bl	80070e4 <RTC_EnterInitMode>
 8006896:	0003      	movs	r3, r0
 8006898:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800689a:	0028      	movs	r0, r5
 800689c:	183b      	adds	r3, r7, r0
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d12c      	bne.n	80068fe <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	492e      	ldr	r1, [pc, #184]	@ (8006968 <HAL_RTC_Init+0x140>)
 80068b0:	400a      	ands	r2, r1
 80068b2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6999      	ldr	r1, [r3, #24]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	431a      	orrs	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	431a      	orrs	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6912      	ldr	r2, [r2, #16]
 80068da:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6919      	ldr	r1, [r3, #16]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	041a      	lsls	r2, r3, #16
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80068f0:	183c      	adds	r4, r7, r0
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	0018      	movs	r0, r3
 80068f6:	f000 fc37 	bl	8007168 <RTC_ExitInitMode>
 80068fa:	0003      	movs	r3, r0
 80068fc:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80068fe:	230f      	movs	r3, #15
 8006900:	18fb      	adds	r3, r7, r3
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d116      	bne.n	8006936 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	00d2      	lsls	r2, r2, #3
 8006914:	08d2      	lsrs	r2, r2, #3
 8006916:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6999      	ldr	r1, [r3, #24]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	431a      	orrs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	431a      	orrs	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	22ff      	movs	r2, #255	@ 0xff
 800693c:	625a      	str	r2, [r3, #36]	@ 0x24
 800693e:	e003      	b.n	8006948 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006940:	230f      	movs	r3, #15
 8006942:	18fb      	adds	r3, r7, r3
 8006944:	2200      	movs	r2, #0
 8006946:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8006948:	230f      	movs	r3, #15
 800694a:	18fb      	adds	r3, r7, r3
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d103      	bne.n	800695a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2229      	movs	r2, #41	@ 0x29
 8006956:	2101      	movs	r1, #1
 8006958:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800695a:	230f      	movs	r3, #15
 800695c:	18fb      	adds	r3, r7, r3
 800695e:	781b      	ldrb	r3, [r3, #0]
}
 8006960:	0018      	movs	r0, r3
 8006962:	46bd      	mov	sp, r7
 8006964:	b004      	add	sp, #16
 8006966:	bdb0      	pop	{r4, r5, r7, pc}
 8006968:	fb8fffbf 	.word	0xfb8fffbf

0800696c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800696c:	b5b0      	push	{r4, r5, r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2228      	movs	r2, #40	@ 0x28
 800697c:	5c9b      	ldrb	r3, [r3, r2]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <HAL_RTC_SetTime+0x1a>
 8006982:	2302      	movs	r3, #2
 8006984:	e092      	b.n	8006aac <HAL_RTC_SetTime+0x140>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2228      	movs	r2, #40	@ 0x28
 800698a:	2101      	movs	r1, #1
 800698c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2229      	movs	r2, #41	@ 0x29
 8006992:	2102      	movs	r1, #2
 8006994:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	22ca      	movs	r2, #202	@ 0xca
 800699c:	625a      	str	r2, [r3, #36]	@ 0x24
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2253      	movs	r2, #83	@ 0x53
 80069a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80069a6:	2513      	movs	r5, #19
 80069a8:	197c      	adds	r4, r7, r5
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	0018      	movs	r0, r3
 80069ae:	f000 fb99 	bl	80070e4 <RTC_EnterInitMode>
 80069b2:	0003      	movs	r3, r0
 80069b4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80069b6:	197b      	adds	r3, r7, r5
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d162      	bne.n	8006a84 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d125      	bne.n	8006a10 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	2240      	movs	r2, #64	@ 0x40
 80069cc:	4013      	ands	r3, r2
 80069ce:	d102      	bne.n	80069d6 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2200      	movs	r2, #0
 80069d4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	0018      	movs	r0, r3
 80069dc:	f000 fc08 	bl	80071f0 <RTC_ByteToBcd2>
 80069e0:	0003      	movs	r3, r0
 80069e2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	785b      	ldrb	r3, [r3, #1]
 80069e8:	0018      	movs	r0, r3
 80069ea:	f000 fc01 	bl	80071f0 <RTC_ByteToBcd2>
 80069ee:	0003      	movs	r3, r0
 80069f0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80069f2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	789b      	ldrb	r3, [r3, #2]
 80069f8:	0018      	movs	r0, r3
 80069fa:	f000 fbf9 	bl	80071f0 <RTC_ByteToBcd2>
 80069fe:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a00:	0022      	movs	r2, r4
 8006a02:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	78db      	ldrb	r3, [r3, #3]
 8006a08:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	e017      	b.n	8006a40 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	2240      	movs	r2, #64	@ 0x40
 8006a18:	4013      	ands	r3, r2
 8006a1a:	d102      	bne.n	8006a22 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	785b      	ldrb	r3, [r3, #1]
 8006a2c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a2e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a34:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	78db      	ldrb	r3, [r3, #3]
 8006a3a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	491b      	ldr	r1, [pc, #108]	@ (8006ab4 <HAL_RTC_SetTime+0x148>)
 8006a48:	400a      	ands	r2, r1
 8006a4a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699a      	ldr	r2, [r3, #24]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4918      	ldr	r1, [pc, #96]	@ (8006ab8 <HAL_RTC_SetTime+0x14c>)
 8006a58:	400a      	ands	r2, r1
 8006a5a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6999      	ldr	r1, [r3, #24]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006a74:	2313      	movs	r3, #19
 8006a76:	18fc      	adds	r4, r7, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f000 fb74 	bl	8007168 <RTC_ExitInitMode>
 8006a80:	0003      	movs	r3, r0
 8006a82:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	22ff      	movs	r2, #255	@ 0xff
 8006a8a:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8006a8c:	2313      	movs	r3, #19
 8006a8e:	18fb      	adds	r3, r7, r3
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d103      	bne.n	8006a9e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2229      	movs	r2, #41	@ 0x29
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2228      	movs	r2, #40	@ 0x28
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	5499      	strb	r1, [r3, r2]

  return status;
 8006aa6:	2313      	movs	r3, #19
 8006aa8:	18fb      	adds	r3, r7, r3
 8006aaa:	781b      	ldrb	r3, [r3, #0]
}
 8006aac:	0018      	movs	r0, r3
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	b006      	add	sp, #24
 8006ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8006ab4:	007f7f7f 	.word	0x007f7f7f
 8006ab8:	fffbffff 	.word	0xfffbffff

08006abc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	045b      	lsls	r3, r3, #17
 8006ada:	0c5a      	lsrs	r2, r3, #17
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a22      	ldr	r2, [pc, #136]	@ (8006b70 <HAL_RTC_GetTime+0xb4>)
 8006ae8:	4013      	ands	r3, r2
 8006aea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	0c1b      	lsrs	r3, r3, #16
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	223f      	movs	r2, #63	@ 0x3f
 8006af4:	4013      	ands	r3, r2
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	0a1b      	lsrs	r3, r3, #8
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	227f      	movs	r2, #127	@ 0x7f
 8006b04:	4013      	ands	r3, r2
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	227f      	movs	r2, #127	@ 0x7f
 8006b12:	4013      	ands	r3, r2
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	0d9b      	lsrs	r3, r3, #22
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2201      	movs	r2, #1
 8006b22:	4013      	ands	r3, r2
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d11a      	bne.n	8006b66 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	0018      	movs	r0, r3
 8006b36:	f000 fb83 	bl	8007240 <RTC_Bcd2ToByte>
 8006b3a:	0003      	movs	r3, r0
 8006b3c:	001a      	movs	r2, r3
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	785b      	ldrb	r3, [r3, #1]
 8006b46:	0018      	movs	r0, r3
 8006b48:	f000 fb7a 	bl	8007240 <RTC_Bcd2ToByte>
 8006b4c:	0003      	movs	r3, r0
 8006b4e:	001a      	movs	r2, r3
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	789b      	ldrb	r3, [r3, #2]
 8006b58:	0018      	movs	r0, r3
 8006b5a:	f000 fb71 	bl	8007240 <RTC_Bcd2ToByte>
 8006b5e:	0003      	movs	r3, r0
 8006b60:	001a      	movs	r2, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	0018      	movs	r0, r3
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	b006      	add	sp, #24
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	007f7f7f 	.word	0x007f7f7f

08006b74 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	4a21      	ldr	r2, [pc, #132]	@ (8006c0c <HAL_RTC_GetDate+0x98>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	0c1b      	lsrs	r3, r3, #16
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	0a1b      	lsrs	r3, r3, #8
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	221f      	movs	r2, #31
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	223f      	movs	r2, #63	@ 0x3f
 8006bac:	4013      	ands	r3, r2
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	0b5b      	lsrs	r3, r3, #13
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2207      	movs	r2, #7
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d11a      	bne.n	8006c00 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	78db      	ldrb	r3, [r3, #3]
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f000 fb36 	bl	8007240 <RTC_Bcd2ToByte>
 8006bd4:	0003      	movs	r3, r0
 8006bd6:	001a      	movs	r2, r3
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	785b      	ldrb	r3, [r3, #1]
 8006be0:	0018      	movs	r0, r3
 8006be2:	f000 fb2d 	bl	8007240 <RTC_Bcd2ToByte>
 8006be6:	0003      	movs	r3, r0
 8006be8:	001a      	movs	r2, r3
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	789b      	ldrb	r3, [r3, #2]
 8006bf2:	0018      	movs	r0, r3
 8006bf4:	f000 fb24 	bl	8007240 <RTC_Bcd2ToByte>
 8006bf8:	0003      	movs	r3, r0
 8006bfa:	001a      	movs	r2, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	0018      	movs	r0, r3
 8006c04:	46bd      	mov	sp, r7
 8006c06:	b006      	add	sp, #24
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	46c0      	nop			@ (mov r8, r8)
 8006c0c:	00ffff3f 	.word	0x00ffff3f

08006c10 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006c10:	b590      	push	{r4, r7, lr}
 8006c12:	b089      	sub	sp, #36	@ 0x24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2228      	movs	r2, #40	@ 0x28
 8006c20:	5c9b      	ldrb	r3, [r3, r2]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d101      	bne.n	8006c2a <HAL_RTC_SetAlarm_IT+0x1a>
 8006c26:	2302      	movs	r3, #2
 8006c28:	e127      	b.n	8006e7a <HAL_RTC_SetAlarm_IT+0x26a>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2228      	movs	r2, #40	@ 0x28
 8006c2e:	2101      	movs	r1, #1
 8006c30:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2229      	movs	r2, #41	@ 0x29
 8006c36:	2102      	movs	r1, #2
 8006c38:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d136      	bne.n	8006cae <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	2240      	movs	r2, #64	@ 0x40
 8006c48:	4013      	ands	r3, r2
 8006c4a:	d102      	bne.n	8006c52 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	0018      	movs	r0, r3
 8006c58:	f000 faca 	bl	80071f0 <RTC_ByteToBcd2>
 8006c5c:	0003      	movs	r3, r0
 8006c5e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	785b      	ldrb	r3, [r3, #1]
 8006c64:	0018      	movs	r0, r3
 8006c66:	f000 fac3 	bl	80071f0 <RTC_ByteToBcd2>
 8006c6a:	0003      	movs	r3, r0
 8006c6c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c6e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	789b      	ldrb	r3, [r3, #2]
 8006c74:	0018      	movs	r0, r3
 8006c76:	f000 fabb 	bl	80071f0 <RTC_ByteToBcd2>
 8006c7a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c7c:	0022      	movs	r2, r4
 8006c7e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	78db      	ldrb	r3, [r3, #3]
 8006c84:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c86:	431a      	orrs	r2, r3
 8006c88:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	5c9b      	ldrb	r3, [r3, r2]
 8006c90:	0018      	movs	r0, r3
 8006c92:	f000 faad 	bl	80071f0 <RTC_ByteToBcd2>
 8006c96:	0003      	movs	r3, r0
 8006c98:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c9a:	0022      	movs	r2, r4
 8006c9c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ca2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	61fb      	str	r3, [r7, #28]
 8006cac:	e022      	b.n	8006cf4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	2240      	movs	r2, #64	@ 0x40
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	d102      	bne.n	8006cc0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	785b      	ldrb	r3, [r3, #1]
 8006cca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ccc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006cd2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	78db      	ldrb	r3, [r3, #3]
 8006cd8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006cda:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2120      	movs	r1, #32
 8006ce0:	5c5b      	ldrb	r3, [r3, r1]
 8006ce2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ce4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006cea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	22ca      	movs	r2, #202	@ 0xca
 8006d06:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2253      	movs	r2, #83	@ 0x53
 8006d0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d14:	2380      	movs	r3, #128	@ 0x80
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d14c      	bne.n	8006db6 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699a      	ldr	r2, [r3, #24]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4957      	ldr	r1, [pc, #348]	@ (8006e84 <HAL_RTC_SetAlarm_IT+0x274>)
 8006d28:	400a      	ands	r2, r1
 8006d2a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2101      	movs	r1, #1
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8006d3c:	f7fc fd82 	bl	8003844 <HAL_GetTick>
 8006d40:	0003      	movs	r3, r0
 8006d42:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006d44:	e016      	b.n	8006d74 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006d46:	f7fc fd7d 	bl	8003844 <HAL_GetTick>
 8006d4a:	0002      	movs	r2, r0
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	1ad2      	subs	r2, r2, r3
 8006d50:	23fa      	movs	r3, #250	@ 0xfa
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d90d      	bls.n	8006d74 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	22ff      	movs	r2, #255	@ 0xff
 8006d5e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2229      	movs	r2, #41	@ 0x29
 8006d64:	2103      	movs	r1, #3
 8006d66:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2228      	movs	r2, #40	@ 0x28
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e082      	b.n	8006e7a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	d0e2      	beq.n	8006d46 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	69fa      	ldr	r2, [r7, #28]
 8006d86:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699a      	ldr	r2, [r3, #24]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2180      	movs	r1, #128	@ 0x80
 8006d9c:	0049      	lsls	r1, r1, #1
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	699a      	ldr	r2, [r3, #24]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2180      	movs	r1, #128	@ 0x80
 8006dae:	0149      	lsls	r1, r1, #5
 8006db0:	430a      	orrs	r2, r1
 8006db2:	619a      	str	r2, [r3, #24]
 8006db4:	e04b      	b.n	8006e4e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	699a      	ldr	r2, [r3, #24]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4931      	ldr	r1, [pc, #196]	@ (8006e88 <HAL_RTC_SetAlarm_IT+0x278>)
 8006dc2:	400a      	ands	r2, r1
 8006dc4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2102      	movs	r1, #2
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8006dd6:	f7fc fd35 	bl	8003844 <HAL_GetTick>
 8006dda:	0003      	movs	r3, r0
 8006ddc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006dde:	e016      	b.n	8006e0e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006de0:	f7fc fd30 	bl	8003844 <HAL_GetTick>
 8006de4:	0002      	movs	r2, r0
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	1ad2      	subs	r2, r2, r3
 8006dea:	23fa      	movs	r3, #250	@ 0xfa
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d90d      	bls.n	8006e0e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	22ff      	movs	r2, #255	@ 0xff
 8006df8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2229      	movs	r2, #41	@ 0x29
 8006dfe:	2103      	movs	r1, #3
 8006e00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2228      	movs	r2, #40	@ 0x28
 8006e06:	2100      	movs	r1, #0
 8006e08:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e035      	b.n	8006e7a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	2202      	movs	r2, #2
 8006e16:	4013      	ands	r3, r2
 8006e18:	d0e2      	beq.n	8006de0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69fa      	ldr	r2, [r7, #28]
 8006e20:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	69ba      	ldr	r2, [r7, #24]
 8006e28:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	699a      	ldr	r2, [r3, #24]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2180      	movs	r1, #128	@ 0x80
 8006e36:	0089      	lsls	r1, r1, #2
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699a      	ldr	r2, [r3, #24]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2180      	movs	r1, #128	@ 0x80
 8006e48:	0189      	lsls	r1, r1, #6
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006e4e:	4a0f      	ldr	r2, [pc, #60]	@ (8006e8c <HAL_RTC_SetAlarm_IT+0x27c>)
 8006e50:	2380      	movs	r3, #128	@ 0x80
 8006e52:	58d3      	ldr	r3, [r2, r3]
 8006e54:	490d      	ldr	r1, [pc, #52]	@ (8006e8c <HAL_RTC_SetAlarm_IT+0x27c>)
 8006e56:	2280      	movs	r2, #128	@ 0x80
 8006e58:	0312      	lsls	r2, r2, #12
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	2280      	movs	r2, #128	@ 0x80
 8006e5e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	22ff      	movs	r2, #255	@ 0xff
 8006e66:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2229      	movs	r2, #41	@ 0x29
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2228      	movs	r2, #40	@ 0x28
 8006e74:	2100      	movs	r1, #0
 8006e76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	0018      	movs	r0, r3
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	b009      	add	sp, #36	@ 0x24
 8006e80:	bd90      	pop	{r4, r7, pc}
 8006e82:	46c0      	nop			@ (mov r8, r8)
 8006e84:	fffffeff 	.word	0xfffffeff
 8006e88:	fffffdff 	.word	0xfffffdff
 8006e8c:	40021800 	.word	0x40021800

08006e90 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	2380      	movs	r3, #128	@ 0x80
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d144      	bne.n	8006f32 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2280      	movs	r2, #128	@ 0x80
 8006eac:	0052      	lsls	r2, r2, #1
 8006eae:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb6:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ebe:	045b      	lsls	r3, r3, #17
 8006ec0:	0c5b      	lsrs	r3, r3, #17
 8006ec2:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	0c1b      	lsrs	r3, r3, #16
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	223f      	movs	r2, #63	@ 0x3f
 8006ecc:	4013      	ands	r3, r2
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	0a1b      	lsrs	r3, r3, #8
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	227f      	movs	r2, #127	@ 0x7f
 8006edc:	4013      	ands	r3, r2
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	227f      	movs	r2, #127	@ 0x7f
 8006eea:	4013      	ands	r3, r2
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	0d9b      	lsrs	r3, r3, #22
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2201      	movs	r2, #1
 8006efa:	4013      	ands	r3, r2
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	0e1b      	lsrs	r3, r3, #24
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	223f      	movs	r2, #63	@ 0x3f
 8006f10:	4013      	ands	r3, r2
 8006f12:	b2d9      	uxtb	r1, r3
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2220      	movs	r2, #32
 8006f18:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	2380      	movs	r3, #128	@ 0x80
 8006f1e:	05db      	lsls	r3, r3, #23
 8006f20:	401a      	ands	r2, r3
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	4a3b      	ldr	r2, [pc, #236]	@ (8007018 <HAL_RTC_GetAlarm+0x188>)
 8006f2a:	401a      	ands	r2, r3
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	615a      	str	r2, [r3, #20]
 8006f30:	e043      	b.n	8006fba <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2280      	movs	r2, #128	@ 0x80
 8006f36:	0092      	lsls	r2, r2, #2
 8006f38:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f40:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f48:	045b      	lsls	r3, r3, #17
 8006f4a:	0c5b      	lsrs	r3, r3, #17
 8006f4c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	0c1b      	lsrs	r3, r3, #16
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	223f      	movs	r2, #63	@ 0x3f
 8006f56:	4013      	ands	r3, r2
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	0a1b      	lsrs	r3, r3, #8
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	227f      	movs	r2, #127	@ 0x7f
 8006f66:	4013      	ands	r3, r2
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	227f      	movs	r2, #127	@ 0x7f
 8006f74:	4013      	ands	r3, r2
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	0d9b      	lsrs	r3, r3, #22
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2201      	movs	r2, #1
 8006f84:	4013      	ands	r3, r2
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	0e1b      	lsrs	r3, r3, #24
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	223f      	movs	r2, #63	@ 0x3f
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	b2d9      	uxtb	r1, r3
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	2380      	movs	r3, #128	@ 0x80
 8006fa8:	05db      	lsls	r3, r3, #23
 8006faa:	401a      	ands	r2, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	4a19      	ldr	r2, [pc, #100]	@ (8007018 <HAL_RTC_GetAlarm+0x188>)
 8006fb4:	401a      	ands	r2, r3
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d125      	bne.n	800700c <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	0018      	movs	r0, r3
 8006fc6:	f000 f93b 	bl	8007240 <RTC_Bcd2ToByte>
 8006fca:	0003      	movs	r3, r0
 8006fcc:	001a      	movs	r2, r3
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	785b      	ldrb	r3, [r3, #1]
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	f000 f932 	bl	8007240 <RTC_Bcd2ToByte>
 8006fdc:	0003      	movs	r3, r0
 8006fde:	001a      	movs	r2, r3
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	789b      	ldrb	r3, [r3, #2]
 8006fe8:	0018      	movs	r0, r3
 8006fea:	f000 f929 	bl	8007240 <RTC_Bcd2ToByte>
 8006fee:	0003      	movs	r3, r0
 8006ff0:	001a      	movs	r2, r3
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	5c9b      	ldrb	r3, [r3, r2]
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	f000 f91f 	bl	8007240 <RTC_Bcd2ToByte>
 8007002:	0003      	movs	r3, r0
 8007004:	0019      	movs	r1, r3
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2220      	movs	r2, #32
 800700a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	0018      	movs	r0, r3
 8007010:	46bd      	mov	sp, r7
 8007012:	b006      	add	sp, #24
 8007014:	bd80      	pop	{r7, pc}
 8007016:	46c0      	nop			@ (mov r8, r8)
 8007018:	80808080 	.word	0x80808080

0800701c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	699a      	ldr	r2, [r3, #24]
 800702a:	2380      	movs	r3, #128	@ 0x80
 800702c:	015b      	lsls	r3, r3, #5
 800702e:	4013      	ands	r3, r2
 8007030:	d011      	beq.n	8007056 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007038:	2201      	movs	r2, #1
 800703a:	4013      	ands	r3, r2
 800703c:	d00b      	beq.n	8007056 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2101      	movs	r1, #1
 800704a:	430a      	orrs	r2, r1
 800704c:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	0018      	movs	r0, r3
 8007052:	f7fb f881 	bl	8002158 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	699a      	ldr	r2, [r3, #24]
 800705c:	2380      	movs	r3, #128	@ 0x80
 800705e:	019b      	lsls	r3, r3, #6
 8007060:	4013      	ands	r3, r2
 8007062:	d011      	beq.n	8007088 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800706a:	2202      	movs	r2, #2
 800706c:	4013      	ands	r3, r2
 800706e:	d00b      	beq.n	8007088 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2102      	movs	r1, #2
 800707c:	430a      	orrs	r2, r1
 800707e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	0018      	movs	r0, r3
 8007084:	f000 f95b 	bl	800733e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2229      	movs	r2, #41	@ 0x29
 800708c:	2101      	movs	r1, #1
 800708e:	5499      	strb	r1, [r3, r2]
}
 8007090:	46c0      	nop			@ (mov r8, r8)
 8007092:	46bd      	mov	sp, r7
 8007094:	b002      	add	sp, #8
 8007096:	bd80      	pop	{r7, pc}

08007098 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a0e      	ldr	r2, [pc, #56]	@ (80070e0 <HAL_RTC_WaitForSynchro+0x48>)
 80070a6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80070a8:	f7fc fbcc 	bl	8003844 <HAL_GetTick>
 80070ac:	0003      	movs	r3, r0
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80070b0:	e00a      	b.n	80070c8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80070b2:	f7fc fbc7 	bl	8003844 <HAL_GetTick>
 80070b6:	0002      	movs	r2, r0
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	1ad2      	subs	r2, r2, r3
 80070bc:	23fa      	movs	r3, #250	@ 0xfa
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d901      	bls.n	80070c8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e006      	b.n	80070d6 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	2220      	movs	r2, #32
 80070d0:	4013      	ands	r3, r2
 80070d2:	d0ee      	beq.n	80070b2 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	0018      	movs	r0, r3
 80070d8:	46bd      	mov	sp, r7
 80070da:	b004      	add	sp, #16
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	46c0      	nop			@ (mov r8, r8)
 80070e0:	0001005f 	.word	0x0001005f

080070e4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80070ec:	230f      	movs	r3, #15
 80070ee:	18fb      	adds	r3, r7, r3
 80070f0:	2200      	movs	r2, #0
 80070f2:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	2240      	movs	r2, #64	@ 0x40
 80070fc:	4013      	ands	r3, r2
 80070fe:	d12c      	bne.n	800715a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2180      	movs	r1, #128	@ 0x80
 800710c:	430a      	orrs	r2, r1
 800710e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007110:	f7fc fb98 	bl	8003844 <HAL_GetTick>
 8007114:	0003      	movs	r3, r0
 8007116:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007118:	e014      	b.n	8007144 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800711a:	f7fc fb93 	bl	8003844 <HAL_GetTick>
 800711e:	0002      	movs	r2, r0
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	1ad2      	subs	r2, r2, r3
 8007124:	200f      	movs	r0, #15
 8007126:	183b      	adds	r3, r7, r0
 8007128:	1839      	adds	r1, r7, r0
 800712a:	7809      	ldrb	r1, [r1, #0]
 800712c:	7019      	strb	r1, [r3, #0]
 800712e:	23fa      	movs	r3, #250	@ 0xfa
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	429a      	cmp	r2, r3
 8007134:	d906      	bls.n	8007144 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8007136:	183b      	adds	r3, r7, r0
 8007138:	2203      	movs	r2, #3
 800713a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2229      	movs	r2, #41	@ 0x29
 8007140:	2103      	movs	r1, #3
 8007142:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	2240      	movs	r2, #64	@ 0x40
 800714c:	4013      	ands	r3, r2
 800714e:	d104      	bne.n	800715a <RTC_EnterInitMode+0x76>
 8007150:	230f      	movs	r3, #15
 8007152:	18fb      	adds	r3, r7, r3
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b03      	cmp	r3, #3
 8007158:	d1df      	bne.n	800711a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800715a:	230f      	movs	r3, #15
 800715c:	18fb      	adds	r3, r7, r3
 800715e:	781b      	ldrb	r3, [r3, #0]
}
 8007160:	0018      	movs	r0, r3
 8007162:	46bd      	mov	sp, r7
 8007164:	b004      	add	sp, #16
 8007166:	bd80      	pop	{r7, pc}

08007168 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007168:	b590      	push	{r4, r7, lr}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007170:	240f      	movs	r4, #15
 8007172:	193b      	adds	r3, r7, r4
 8007174:	2200      	movs	r2, #0
 8007176:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007178:	4b1c      	ldr	r3, [pc, #112]	@ (80071ec <RTC_ExitInitMode+0x84>)
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	4b1b      	ldr	r3, [pc, #108]	@ (80071ec <RTC_ExitInitMode+0x84>)
 800717e:	2180      	movs	r1, #128	@ 0x80
 8007180:	438a      	bics	r2, r1
 8007182:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007184:	4b19      	ldr	r3, [pc, #100]	@ (80071ec <RTC_ExitInitMode+0x84>)
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	2220      	movs	r2, #32
 800718a:	4013      	ands	r3, r2
 800718c:	d10d      	bne.n	80071aa <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	0018      	movs	r0, r3
 8007192:	f7ff ff81 	bl	8007098 <HAL_RTC_WaitForSynchro>
 8007196:	1e03      	subs	r3, r0, #0
 8007198:	d021      	beq.n	80071de <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2229      	movs	r2, #41	@ 0x29
 800719e:	2103      	movs	r1, #3
 80071a0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80071a2:	193b      	adds	r3, r7, r4
 80071a4:	2203      	movs	r2, #3
 80071a6:	701a      	strb	r2, [r3, #0]
 80071a8:	e019      	b.n	80071de <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80071aa:	4b10      	ldr	r3, [pc, #64]	@ (80071ec <RTC_ExitInitMode+0x84>)
 80071ac:	699a      	ldr	r2, [r3, #24]
 80071ae:	4b0f      	ldr	r3, [pc, #60]	@ (80071ec <RTC_ExitInitMode+0x84>)
 80071b0:	2120      	movs	r1, #32
 80071b2:	438a      	bics	r2, r1
 80071b4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	0018      	movs	r0, r3
 80071ba:	f7ff ff6d 	bl	8007098 <HAL_RTC_WaitForSynchro>
 80071be:	1e03      	subs	r3, r0, #0
 80071c0:	d007      	beq.n	80071d2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2229      	movs	r2, #41	@ 0x29
 80071c6:	2103      	movs	r1, #3
 80071c8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80071ca:	230f      	movs	r3, #15
 80071cc:	18fb      	adds	r3, r7, r3
 80071ce:	2203      	movs	r2, #3
 80071d0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80071d2:	4b06      	ldr	r3, [pc, #24]	@ (80071ec <RTC_ExitInitMode+0x84>)
 80071d4:	699a      	ldr	r2, [r3, #24]
 80071d6:	4b05      	ldr	r3, [pc, #20]	@ (80071ec <RTC_ExitInitMode+0x84>)
 80071d8:	2120      	movs	r1, #32
 80071da:	430a      	orrs	r2, r1
 80071dc:	619a      	str	r2, [r3, #24]
  }

  return status;
 80071de:	230f      	movs	r3, #15
 80071e0:	18fb      	adds	r3, r7, r3
 80071e2:	781b      	ldrb	r3, [r3, #0]
}
 80071e4:	0018      	movs	r0, r3
 80071e6:	46bd      	mov	sp, r7
 80071e8:	b005      	add	sp, #20
 80071ea:	bd90      	pop	{r4, r7, pc}
 80071ec:	40002800 	.word	0x40002800

080071f0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	0002      	movs	r2, r0
 80071f8:	1dfb      	adds	r3, r7, #7
 80071fa:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8007200:	230b      	movs	r3, #11
 8007202:	18fb      	adds	r3, r7, r3
 8007204:	1dfa      	adds	r2, r7, #7
 8007206:	7812      	ldrb	r2, [r2, #0]
 8007208:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800720a:	e008      	b.n	800721e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3301      	adds	r3, #1
 8007210:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8007212:	220b      	movs	r2, #11
 8007214:	18bb      	adds	r3, r7, r2
 8007216:	18ba      	adds	r2, r7, r2
 8007218:	7812      	ldrb	r2, [r2, #0]
 800721a:	3a0a      	subs	r2, #10
 800721c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800721e:	210b      	movs	r1, #11
 8007220:	187b      	adds	r3, r7, r1
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	2b09      	cmp	r3, #9
 8007226:	d8f1      	bhi.n	800720c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	b2db      	uxtb	r3, r3
 800722c:	011b      	lsls	r3, r3, #4
 800722e:	b2da      	uxtb	r2, r3
 8007230:	187b      	adds	r3, r7, r1
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	4313      	orrs	r3, r2
 8007236:	b2db      	uxtb	r3, r3
}
 8007238:	0018      	movs	r0, r3
 800723a:	46bd      	mov	sp, r7
 800723c:	b004      	add	sp, #16
 800723e:	bd80      	pop	{r7, pc}

08007240 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	0002      	movs	r2, r0
 8007248:	1dfb      	adds	r3, r7, #7
 800724a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800724c:	1dfb      	adds	r3, r7, #7
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	091b      	lsrs	r3, r3, #4
 8007252:	b2db      	uxtb	r3, r3
 8007254:	001a      	movs	r2, r3
 8007256:	0013      	movs	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	189b      	adds	r3, r3, r2
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	b2da      	uxtb	r2, r3
 8007264:	1dfb      	adds	r3, r7, #7
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	210f      	movs	r1, #15
 800726a:	400b      	ands	r3, r1
 800726c:	b2db      	uxtb	r3, r3
 800726e:	18d3      	adds	r3, r2, r3
 8007270:	b2db      	uxtb	r3, r3
}
 8007272:	0018      	movs	r0, r3
 8007274:	46bd      	mov	sp, r7
 8007276:	b004      	add	sp, #16
 8007278:	bd80      	pop	{r7, pc}

0800727a <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b086      	sub	sp, #24
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	607a      	str	r2, [r7, #4]
 8007286:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2228      	movs	r2, #40	@ 0x28
 800728c:	5c9b      	ldrb	r3, [r3, r2]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d101      	bne.n	8007296 <HAL_RTCEx_SetSmoothCalib+0x1c>
 8007292:	2302      	movs	r3, #2
 8007294:	e04f      	b.n	8007336 <HAL_RTCEx_SetSmoothCalib+0xbc>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2228      	movs	r2, #40	@ 0x28
 800729a:	2101      	movs	r1, #1
 800729c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2229      	movs	r2, #41	@ 0x29
 80072a2:	2102      	movs	r1, #2
 80072a4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	22ca      	movs	r2, #202	@ 0xca
 80072ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2253      	movs	r2, #83	@ 0x53
 80072b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	2380      	movs	r3, #128	@ 0x80
 80072be:	025b      	lsls	r3, r3, #9
 80072c0:	4013      	ands	r3, r2
 80072c2:	d022      	beq.n	800730a <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 80072c4:	f7fc fabe 	bl	8003844 <HAL_GetTick>
 80072c8:	0003      	movs	r3, r0
 80072ca:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80072cc:	e016      	b.n	80072fc <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80072ce:	f7fc fab9 	bl	8003844 <HAL_GetTick>
 80072d2:	0002      	movs	r2, r0
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	1ad2      	subs	r2, r2, r3
 80072d8:	23fa      	movs	r3, #250	@ 0xfa
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	429a      	cmp	r2, r3
 80072de:	d90d      	bls.n	80072fc <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	22ff      	movs	r2, #255	@ 0xff
 80072e6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2229      	movs	r2, #41	@ 0x29
 80072ec:	2103      	movs	r1, #3
 80072ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2228      	movs	r2, #40	@ 0x28
 80072f4:	2100      	movs	r1, #0
 80072f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e01c      	b.n	8007336 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	2380      	movs	r3, #128	@ 0x80
 8007304:	025b      	lsls	r3, r3, #9
 8007306:	4013      	ands	r3, r2
 8007308:	d1e1      	bne.n	80072ce <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	431a      	orrs	r2, r3
 8007310:	0011      	movs	r1, r2
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	430a      	orrs	r2, r1
 800731a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	22ff      	movs	r2, #255	@ 0xff
 8007322:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2229      	movs	r2, #41	@ 0x29
 8007328:	2101      	movs	r1, #1
 800732a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2228      	movs	r2, #40	@ 0x28
 8007330:	2100      	movs	r1, #0
 8007332:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	0018      	movs	r0, r3
 8007338:	46bd      	mov	sp, r7
 800733a:	b006      	add	sp, #24
 800733c:	bd80      	pop	{r7, pc}

0800733e <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007346:	46c0      	nop			@ (mov r8, r8)
 8007348:	46bd      	mov	sp, r7
 800734a:	b002      	add	sp, #8
 800734c:	bd80      	pop	{r7, pc}

0800734e <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b086      	sub	sp, #24
 8007352:	af00      	add	r7, sp, #0
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	60b9      	str	r1, [r7, #8]
 8007358:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	001a      	movs	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	18d3      	adds	r3, r2, r3
 8007366:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	3301      	adds	r3, #1
 800736c:	33ff      	adds	r3, #255	@ 0xff
 800736e:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	18d3      	adds	r3, r2, r3
 8007378:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	601a      	str	r2, [r3, #0]
}
 8007380:	46c0      	nop			@ (mov r8, r8)
 8007382:	46bd      	mov	sp, r7
 8007384:	b006      	add	sp, #24
 8007386:	bd80      	pop	{r7, pc}

08007388 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	001a      	movs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	18d3      	adds	r3, r2, r3
 800739e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3301      	adds	r3, #1
 80073a4:	33ff      	adds	r3, #255	@ 0xff
 80073a6:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	18d3      	adds	r3, r2, r3
 80073b0:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	681b      	ldr	r3, [r3, #0]
}
 80073b6:	0018      	movs	r0, r3
 80073b8:	46bd      	mov	sp, r7
 80073ba:	b004      	add	sp, #16
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e0a8      	b.n	8007524 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d109      	bne.n	80073ee <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	2382      	movs	r3, #130	@ 0x82
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d009      	beq.n	80073fa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	61da      	str	r2, [r3, #28]
 80073ec:	e005      	b.n	80073fa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	225d      	movs	r2, #93	@ 0x5d
 8007404:	5c9b      	ldrb	r3, [r3, r2]
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	d107      	bne.n	800741c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	225c      	movs	r2, #92	@ 0x5c
 8007410:	2100      	movs	r1, #0
 8007412:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	0018      	movs	r0, r3
 8007418:	f7fb ff9c 	bl	8003354 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	225d      	movs	r2, #93	@ 0x5d
 8007420:	2102      	movs	r1, #2
 8007422:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2140      	movs	r1, #64	@ 0x40
 8007430:	438a      	bics	r2, r1
 8007432:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68da      	ldr	r2, [r3, #12]
 8007438:	23e0      	movs	r3, #224	@ 0xe0
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	429a      	cmp	r2, r3
 800743e:	d902      	bls.n	8007446 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007440:	2300      	movs	r3, #0
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	e002      	b.n	800744c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007446:	2380      	movs	r3, #128	@ 0x80
 8007448:	015b      	lsls	r3, r3, #5
 800744a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	68da      	ldr	r2, [r3, #12]
 8007450:	23f0      	movs	r3, #240	@ 0xf0
 8007452:	011b      	lsls	r3, r3, #4
 8007454:	429a      	cmp	r2, r3
 8007456:	d008      	beq.n	800746a <HAL_SPI_Init+0xaa>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68da      	ldr	r2, [r3, #12]
 800745c:	23e0      	movs	r3, #224	@ 0xe0
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	429a      	cmp	r2, r3
 8007462:	d002      	beq.n	800746a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	2382      	movs	r3, #130	@ 0x82
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	401a      	ands	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6899      	ldr	r1, [r3, #8]
 8007478:	2384      	movs	r3, #132	@ 0x84
 800747a:	021b      	lsls	r3, r3, #8
 800747c:	400b      	ands	r3, r1
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2102      	movs	r1, #2
 8007486:	400b      	ands	r3, r1
 8007488:	431a      	orrs	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	2101      	movs	r1, #1
 8007490:	400b      	ands	r3, r1
 8007492:	431a      	orrs	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6999      	ldr	r1, [r3, #24]
 8007498:	2380      	movs	r3, #128	@ 0x80
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	400b      	ands	r3, r1
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	2138      	movs	r1, #56	@ 0x38
 80074a6:	400b      	ands	r3, r1
 80074a8:	431a      	orrs	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	2180      	movs	r1, #128	@ 0x80
 80074b0:	400b      	ands	r3, r1
 80074b2:	431a      	orrs	r2, r3
 80074b4:	0011      	movs	r1, r2
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074ba:	2380      	movs	r3, #128	@ 0x80
 80074bc:	019b      	lsls	r3, r3, #6
 80074be:	401a      	ands	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	0c1b      	lsrs	r3, r3, #16
 80074ce:	2204      	movs	r2, #4
 80074d0:	401a      	ands	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d6:	2110      	movs	r1, #16
 80074d8:	400b      	ands	r3, r1
 80074da:	431a      	orrs	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074e0:	2108      	movs	r1, #8
 80074e2:	400b      	ands	r3, r1
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68d9      	ldr	r1, [r3, #12]
 80074ea:	23f0      	movs	r3, #240	@ 0xf0
 80074ec:	011b      	lsls	r3, r3, #4
 80074ee:	400b      	ands	r3, r1
 80074f0:	431a      	orrs	r2, r3
 80074f2:	0011      	movs	r1, r2
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	2380      	movs	r3, #128	@ 0x80
 80074f8:	015b      	lsls	r3, r3, #5
 80074fa:	401a      	ands	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	430a      	orrs	r2, r1
 8007502:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	69da      	ldr	r2, [r3, #28]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4907      	ldr	r1, [pc, #28]	@ (800752c <HAL_SPI_Init+0x16c>)
 8007510:	400a      	ands	r2, r1
 8007512:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	225d      	movs	r2, #93	@ 0x5d
 800751e:	2101      	movs	r1, #1
 8007520:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	0018      	movs	r0, r3
 8007526:	46bd      	mov	sp, r7
 8007528:	b004      	add	sp, #16
 800752a:	bd80      	pop	{r7, pc}
 800752c:	fffff7ff 	.word	0xfffff7ff

08007530 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b088      	sub	sp, #32
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	603b      	str	r3, [r7, #0]
 800753c:	1dbb      	adds	r3, r7, #6
 800753e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007540:	231f      	movs	r3, #31
 8007542:	18fb      	adds	r3, r7, r3
 8007544:	2200      	movs	r2, #0
 8007546:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	225c      	movs	r2, #92	@ 0x5c
 800754c:	5c9b      	ldrb	r3, [r3, r2]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d101      	bne.n	8007556 <HAL_SPI_Transmit+0x26>
 8007552:	2302      	movs	r3, #2
 8007554:	e147      	b.n	80077e6 <HAL_SPI_Transmit+0x2b6>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	225c      	movs	r2, #92	@ 0x5c
 800755a:	2101      	movs	r1, #1
 800755c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800755e:	f7fc f971 	bl	8003844 <HAL_GetTick>
 8007562:	0003      	movs	r3, r0
 8007564:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007566:	2316      	movs	r3, #22
 8007568:	18fb      	adds	r3, r7, r3
 800756a:	1dba      	adds	r2, r7, #6
 800756c:	8812      	ldrh	r2, [r2, #0]
 800756e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	225d      	movs	r2, #93	@ 0x5d
 8007574:	5c9b      	ldrb	r3, [r3, r2]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b01      	cmp	r3, #1
 800757a:	d004      	beq.n	8007586 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800757c:	231f      	movs	r3, #31
 800757e:	18fb      	adds	r3, r7, r3
 8007580:	2202      	movs	r2, #2
 8007582:	701a      	strb	r2, [r3, #0]
    goto error;
 8007584:	e128      	b.n	80077d8 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <HAL_SPI_Transmit+0x64>
 800758c:	1dbb      	adds	r3, r7, #6
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d104      	bne.n	800759e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007594:	231f      	movs	r3, #31
 8007596:	18fb      	adds	r3, r7, r3
 8007598:	2201      	movs	r2, #1
 800759a:	701a      	strb	r2, [r3, #0]
    goto error;
 800759c:	e11c      	b.n	80077d8 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	225d      	movs	r2, #93	@ 0x5d
 80075a2:	2103      	movs	r1, #3
 80075a4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	1dba      	adds	r2, r7, #6
 80075b6:	8812      	ldrh	r2, [r2, #0]
 80075b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	1dba      	adds	r2, r7, #6
 80075be:	8812      	ldrh	r2, [r2, #0]
 80075c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2244      	movs	r2, #68	@ 0x44
 80075cc:	2100      	movs	r1, #0
 80075ce:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2246      	movs	r2, #70	@ 0x46
 80075d4:	2100      	movs	r1, #0
 80075d6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	2380      	movs	r3, #128	@ 0x80
 80075ea:	021b      	lsls	r3, r3, #8
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d110      	bne.n	8007612 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2140      	movs	r1, #64	@ 0x40
 80075fc:	438a      	bics	r2, r1
 80075fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2180      	movs	r1, #128	@ 0x80
 800760c:	01c9      	lsls	r1, r1, #7
 800760e:	430a      	orrs	r2, r1
 8007610:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2240      	movs	r2, #64	@ 0x40
 800761a:	4013      	ands	r3, r2
 800761c:	2b40      	cmp	r3, #64	@ 0x40
 800761e:	d007      	beq.n	8007630 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2140      	movs	r1, #64	@ 0x40
 800762c:	430a      	orrs	r2, r1
 800762e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	68da      	ldr	r2, [r3, #12]
 8007634:	23e0      	movs	r3, #224	@ 0xe0
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	429a      	cmp	r2, r3
 800763a:	d952      	bls.n	80076e2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d004      	beq.n	800764e <HAL_SPI_Transmit+0x11e>
 8007644:	2316      	movs	r3, #22
 8007646:	18fb      	adds	r3, r7, r3
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d143      	bne.n	80076d6 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007652:	881a      	ldrh	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765e:	1c9a      	adds	r2, r3, #2
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007668:	b29b      	uxth	r3, r3
 800766a:	3b01      	subs	r3, #1
 800766c:	b29a      	uxth	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007672:	e030      	b.n	80076d6 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	2202      	movs	r2, #2
 800767c:	4013      	ands	r3, r2
 800767e:	2b02      	cmp	r3, #2
 8007680:	d112      	bne.n	80076a8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007686:	881a      	ldrh	r2, [r3, #0]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007692:	1c9a      	adds	r2, r3, #2
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800769c:	b29b      	uxth	r3, r3
 800769e:	3b01      	subs	r3, #1
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80076a6:	e016      	b.n	80076d6 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076a8:	f7fc f8cc 	bl	8003844 <HAL_GetTick>
 80076ac:	0002      	movs	r2, r0
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d802      	bhi.n	80076be <HAL_SPI_Transmit+0x18e>
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	3301      	adds	r3, #1
 80076bc:	d102      	bne.n	80076c4 <HAL_SPI_Transmit+0x194>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d108      	bne.n	80076d6 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80076c4:	231f      	movs	r3, #31
 80076c6:	18fb      	adds	r3, r7, r3
 80076c8:	2203      	movs	r2, #3
 80076ca:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	225d      	movs	r2, #93	@ 0x5d
 80076d0:	2101      	movs	r1, #1
 80076d2:	5499      	strb	r1, [r3, r2]
          goto error;
 80076d4:	e080      	b.n	80077d8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1c9      	bne.n	8007674 <HAL_SPI_Transmit+0x144>
 80076e0:	e053      	b.n	800778a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d004      	beq.n	80076f4 <HAL_SPI_Transmit+0x1c4>
 80076ea:	2316      	movs	r3, #22
 80076ec:	18fb      	adds	r3, r7, r3
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d145      	bne.n	8007780 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	330c      	adds	r3, #12
 80076fe:	7812      	ldrb	r2, [r2, #0]
 8007700:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007710:	b29b      	uxth	r3, r3
 8007712:	3b01      	subs	r3, #1
 8007714:	b29a      	uxth	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800771a:	e031      	b.n	8007780 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	2202      	movs	r2, #2
 8007724:	4013      	ands	r3, r2
 8007726:	2b02      	cmp	r3, #2
 8007728:	d113      	bne.n	8007752 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	330c      	adds	r3, #12
 8007734:	7812      	ldrb	r2, [r2, #0]
 8007736:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007746:	b29b      	uxth	r3, r3
 8007748:	3b01      	subs	r3, #1
 800774a:	b29a      	uxth	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007750:	e016      	b.n	8007780 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007752:	f7fc f877 	bl	8003844 <HAL_GetTick>
 8007756:	0002      	movs	r2, r0
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	429a      	cmp	r2, r3
 8007760:	d802      	bhi.n	8007768 <HAL_SPI_Transmit+0x238>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	3301      	adds	r3, #1
 8007766:	d102      	bne.n	800776e <HAL_SPI_Transmit+0x23e>
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d108      	bne.n	8007780 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800776e:	231f      	movs	r3, #31
 8007770:	18fb      	adds	r3, r7, r3
 8007772:	2203      	movs	r2, #3
 8007774:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	225d      	movs	r2, #93	@ 0x5d
 800777a:	2101      	movs	r1, #1
 800777c:	5499      	strb	r1, [r3, r2]
          goto error;
 800777e:	e02b      	b.n	80077d8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007784:	b29b      	uxth	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1c8      	bne.n	800771c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	0018      	movs	r0, r3
 8007792:	f000 fcef 	bl	8008174 <SPI_EndRxTxTransaction>
 8007796:	1e03      	subs	r3, r0, #0
 8007798:	d002      	beq.n	80077a0 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2220      	movs	r2, #32
 800779e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10a      	bne.n	80077be <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077a8:	2300      	movs	r3, #0
 80077aa:	613b      	str	r3, [r7, #16]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	613b      	str	r3, [r7, #16]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	613b      	str	r3, [r7, #16]
 80077bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d004      	beq.n	80077d0 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80077c6:	231f      	movs	r3, #31
 80077c8:	18fb      	adds	r3, r7, r3
 80077ca:	2201      	movs	r2, #1
 80077cc:	701a      	strb	r2, [r3, #0]
 80077ce:	e003      	b.n	80077d8 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	225d      	movs	r2, #93	@ 0x5d
 80077d4:	2101      	movs	r1, #1
 80077d6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	225c      	movs	r2, #92	@ 0x5c
 80077dc:	2100      	movs	r1, #0
 80077de:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80077e0:	231f      	movs	r3, #31
 80077e2:	18fb      	adds	r3, r7, r3
 80077e4:	781b      	ldrb	r3, [r3, #0]
}
 80077e6:	0018      	movs	r0, r3
 80077e8:	46bd      	mov	sp, r7
 80077ea:	b008      	add	sp, #32
 80077ec:	bd80      	pop	{r7, pc}
	...

080077f0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077f0:	b590      	push	{r4, r7, lr}
 80077f2:	b089      	sub	sp, #36	@ 0x24
 80077f4:	af02      	add	r7, sp, #8
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	603b      	str	r3, [r7, #0]
 80077fc:	1dbb      	adds	r3, r7, #6
 80077fe:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007800:	2117      	movs	r1, #23
 8007802:	187b      	adds	r3, r7, r1
 8007804:	2200      	movs	r2, #0
 8007806:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	225d      	movs	r2, #93	@ 0x5d
 800780c:	5c9b      	ldrb	r3, [r3, r2]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b01      	cmp	r3, #1
 8007812:	d003      	beq.n	800781c <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8007814:	187b      	adds	r3, r7, r1
 8007816:	2202      	movs	r2, #2
 8007818:	701a      	strb	r2, [r3, #0]
    goto error;
 800781a:	e12b      	b.n	8007a74 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	2382      	movs	r3, #130	@ 0x82
 8007822:	005b      	lsls	r3, r3, #1
 8007824:	429a      	cmp	r2, r3
 8007826:	d113      	bne.n	8007850 <HAL_SPI_Receive+0x60>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10f      	bne.n	8007850 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	225d      	movs	r2, #93	@ 0x5d
 8007834:	2104      	movs	r1, #4
 8007836:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007838:	1dbb      	adds	r3, r7, #6
 800783a:	881c      	ldrh	r4, [r3, #0]
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	68b9      	ldr	r1, [r7, #8]
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	0023      	movs	r3, r4
 8007848:	f000 f924 	bl	8007a94 <HAL_SPI_TransmitReceive>
 800784c:	0003      	movs	r3, r0
 800784e:	e118      	b.n	8007a82 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	225c      	movs	r2, #92	@ 0x5c
 8007854:	5c9b      	ldrb	r3, [r3, r2]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d101      	bne.n	800785e <HAL_SPI_Receive+0x6e>
 800785a:	2302      	movs	r3, #2
 800785c:	e111      	b.n	8007a82 <HAL_SPI_Receive+0x292>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	225c      	movs	r2, #92	@ 0x5c
 8007862:	2101      	movs	r1, #1
 8007864:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007866:	f7fb ffed 	bl	8003844 <HAL_GetTick>
 800786a:	0003      	movs	r3, r0
 800786c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <HAL_SPI_Receive+0x8c>
 8007874:	1dbb      	adds	r3, r7, #6
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d104      	bne.n	8007886 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800787c:	2317      	movs	r3, #23
 800787e:	18fb      	adds	r3, r7, r3
 8007880:	2201      	movs	r2, #1
 8007882:	701a      	strb	r2, [r3, #0]
    goto error;
 8007884:	e0f6      	b.n	8007a74 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	225d      	movs	r2, #93	@ 0x5d
 800788a:	2104      	movs	r1, #4
 800788c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	1dba      	adds	r2, r7, #6
 800789e:	2144      	movs	r1, #68	@ 0x44
 80078a0:	8812      	ldrh	r2, [r2, #0]
 80078a2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	1dba      	adds	r2, r7, #6
 80078a8:	2146      	movs	r1, #70	@ 0x46
 80078aa:	8812      	ldrh	r2, [r2, #0]
 80078ac:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	23e0      	movs	r3, #224	@ 0xe0
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d908      	bls.n	80078ea <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	496a      	ldr	r1, [pc, #424]	@ (8007a8c <HAL_SPI_Receive+0x29c>)
 80078e4:	400a      	ands	r2, r1
 80078e6:	605a      	str	r2, [r3, #4]
 80078e8:	e008      	b.n	80078fc <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2180      	movs	r1, #128	@ 0x80
 80078f6:	0149      	lsls	r1, r1, #5
 80078f8:	430a      	orrs	r2, r1
 80078fa:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	2380      	movs	r3, #128	@ 0x80
 8007902:	021b      	lsls	r3, r3, #8
 8007904:	429a      	cmp	r2, r3
 8007906:	d10f      	bne.n	8007928 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2140      	movs	r1, #64	@ 0x40
 8007914:	438a      	bics	r2, r1
 8007916:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	495b      	ldr	r1, [pc, #364]	@ (8007a90 <HAL_SPI_Receive+0x2a0>)
 8007924:	400a      	ands	r2, r1
 8007926:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2240      	movs	r2, #64	@ 0x40
 8007930:	4013      	ands	r3, r2
 8007932:	2b40      	cmp	r3, #64	@ 0x40
 8007934:	d007      	beq.n	8007946 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2140      	movs	r1, #64	@ 0x40
 8007942:	430a      	orrs	r2, r1
 8007944:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	68da      	ldr	r2, [r3, #12]
 800794a:	23e0      	movs	r3, #224	@ 0xe0
 800794c:	00db      	lsls	r3, r3, #3
 800794e:	429a      	cmp	r2, r3
 8007950:	d900      	bls.n	8007954 <HAL_SPI_Receive+0x164>
 8007952:	e071      	b.n	8007a38 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007954:	e035      	b.n	80079c2 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	2201      	movs	r2, #1
 800795e:	4013      	ands	r3, r2
 8007960:	2b01      	cmp	r3, #1
 8007962:	d117      	bne.n	8007994 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	330c      	adds	r3, #12
 800796a:	001a      	movs	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007970:	7812      	ldrb	r2, [r2, #0]
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2246      	movs	r2, #70	@ 0x46
 8007984:	5a9b      	ldrh	r3, [r3, r2]
 8007986:	b29b      	uxth	r3, r3
 8007988:	3b01      	subs	r3, #1
 800798a:	b299      	uxth	r1, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2246      	movs	r2, #70	@ 0x46
 8007990:	5299      	strh	r1, [r3, r2]
 8007992:	e016      	b.n	80079c2 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007994:	f7fb ff56 	bl	8003844 <HAL_GetTick>
 8007998:	0002      	movs	r2, r0
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d802      	bhi.n	80079aa <HAL_SPI_Receive+0x1ba>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	3301      	adds	r3, #1
 80079a8:	d102      	bne.n	80079b0 <HAL_SPI_Receive+0x1c0>
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d108      	bne.n	80079c2 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 80079b0:	2317      	movs	r3, #23
 80079b2:	18fb      	adds	r3, r7, r3
 80079b4:	2203      	movs	r2, #3
 80079b6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	225d      	movs	r2, #93	@ 0x5d
 80079bc:	2101      	movs	r1, #1
 80079be:	5499      	strb	r1, [r3, r2]
          goto error;
 80079c0:	e058      	b.n	8007a74 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2246      	movs	r2, #70	@ 0x46
 80079c6:	5a9b      	ldrh	r3, [r3, r2]
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1c3      	bne.n	8007956 <HAL_SPI_Receive+0x166>
 80079ce:	e039      	b.n	8007a44 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	2201      	movs	r2, #1
 80079d8:	4013      	ands	r3, r2
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d115      	bne.n	8007a0a <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68da      	ldr	r2, [r3, #12]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e8:	b292      	uxth	r2, r2
 80079ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f0:	1c9a      	adds	r2, r3, #2
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2246      	movs	r2, #70	@ 0x46
 80079fa:	5a9b      	ldrh	r3, [r3, r2]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	3b01      	subs	r3, #1
 8007a00:	b299      	uxth	r1, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2246      	movs	r2, #70	@ 0x46
 8007a06:	5299      	strh	r1, [r3, r2]
 8007a08:	e016      	b.n	8007a38 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a0a:	f7fb ff1b 	bl	8003844 <HAL_GetTick>
 8007a0e:	0002      	movs	r2, r0
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d802      	bhi.n	8007a20 <HAL_SPI_Receive+0x230>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	d102      	bne.n	8007a26 <HAL_SPI_Receive+0x236>
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d108      	bne.n	8007a38 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8007a26:	2317      	movs	r3, #23
 8007a28:	18fb      	adds	r3, r7, r3
 8007a2a:	2203      	movs	r2, #3
 8007a2c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	225d      	movs	r2, #93	@ 0x5d
 8007a32:	2101      	movs	r1, #1
 8007a34:	5499      	strb	r1, [r3, r2]
          goto error;
 8007a36:	e01d      	b.n	8007a74 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2246      	movs	r2, #70	@ 0x46
 8007a3c:	5a9b      	ldrh	r3, [r3, r2]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1c5      	bne.n	80079d0 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	0018      	movs	r0, r3
 8007a4c:	f000 fb34 	bl	80080b8 <SPI_EndRxTransaction>
 8007a50:	1e03      	subs	r3, r0, #0
 8007a52:	d002      	beq.n	8007a5a <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2220      	movs	r2, #32
 8007a58:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d004      	beq.n	8007a6c <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8007a62:	2317      	movs	r3, #23
 8007a64:	18fb      	adds	r3, r7, r3
 8007a66:	2201      	movs	r2, #1
 8007a68:	701a      	strb	r2, [r3, #0]
 8007a6a:	e003      	b.n	8007a74 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	225d      	movs	r2, #93	@ 0x5d
 8007a70:	2101      	movs	r1, #1
 8007a72:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	225c      	movs	r2, #92	@ 0x5c
 8007a78:	2100      	movs	r1, #0
 8007a7a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007a7c:	2317      	movs	r3, #23
 8007a7e:	18fb      	adds	r3, r7, r3
 8007a80:	781b      	ldrb	r3, [r3, #0]
}
 8007a82:	0018      	movs	r0, r3
 8007a84:	46bd      	mov	sp, r7
 8007a86:	b007      	add	sp, #28
 8007a88:	bd90      	pop	{r4, r7, pc}
 8007a8a:	46c0      	nop			@ (mov r8, r8)
 8007a8c:	ffffefff 	.word	0xffffefff
 8007a90:	ffffbfff 	.word	0xffffbfff

08007a94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08a      	sub	sp, #40	@ 0x28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
 8007aa0:	001a      	movs	r2, r3
 8007aa2:	1cbb      	adds	r3, r7, #2
 8007aa4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007aaa:	2323      	movs	r3, #35	@ 0x23
 8007aac:	18fb      	adds	r3, r7, r3
 8007aae:	2200      	movs	r2, #0
 8007ab0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	225c      	movs	r2, #92	@ 0x5c
 8007ab6:	5c9b      	ldrb	r3, [r3, r2]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d101      	bne.n	8007ac0 <HAL_SPI_TransmitReceive+0x2c>
 8007abc:	2302      	movs	r3, #2
 8007abe:	e1c4      	b.n	8007e4a <HAL_SPI_TransmitReceive+0x3b6>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	225c      	movs	r2, #92	@ 0x5c
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ac8:	f7fb febc 	bl	8003844 <HAL_GetTick>
 8007acc:	0003      	movs	r3, r0
 8007ace:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ad0:	201b      	movs	r0, #27
 8007ad2:	183b      	adds	r3, r7, r0
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	215d      	movs	r1, #93	@ 0x5d
 8007ad8:	5c52      	ldrb	r2, [r2, r1]
 8007ada:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007ae2:	2312      	movs	r3, #18
 8007ae4:	18fb      	adds	r3, r7, r3
 8007ae6:	1cba      	adds	r2, r7, #2
 8007ae8:	8812      	ldrh	r2, [r2, #0]
 8007aea:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007aec:	183b      	adds	r3, r7, r0
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d011      	beq.n	8007b18 <HAL_SPI_TransmitReceive+0x84>
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	2382      	movs	r3, #130	@ 0x82
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d107      	bne.n	8007b0e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d103      	bne.n	8007b0e <HAL_SPI_TransmitReceive+0x7a>
 8007b06:	183b      	adds	r3, r7, r0
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d004      	beq.n	8007b18 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8007b0e:	2323      	movs	r3, #35	@ 0x23
 8007b10:	18fb      	adds	r3, r7, r3
 8007b12:	2202      	movs	r2, #2
 8007b14:	701a      	strb	r2, [r3, #0]
    goto error;
 8007b16:	e191      	b.n	8007e3c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d006      	beq.n	8007b2c <HAL_SPI_TransmitReceive+0x98>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d003      	beq.n	8007b2c <HAL_SPI_TransmitReceive+0x98>
 8007b24:	1cbb      	adds	r3, r7, #2
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d104      	bne.n	8007b36 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007b2c:	2323      	movs	r3, #35	@ 0x23
 8007b2e:	18fb      	adds	r3, r7, r3
 8007b30:	2201      	movs	r2, #1
 8007b32:	701a      	strb	r2, [r3, #0]
    goto error;
 8007b34:	e182      	b.n	8007e3c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	225d      	movs	r2, #93	@ 0x5d
 8007b3a:	5c9b      	ldrb	r3, [r3, r2]
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b04      	cmp	r3, #4
 8007b40:	d003      	beq.n	8007b4a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	225d      	movs	r2, #93	@ 0x5d
 8007b46:	2105      	movs	r1, #5
 8007b48:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	1cba      	adds	r2, r7, #2
 8007b5a:	2146      	movs	r1, #70	@ 0x46
 8007b5c:	8812      	ldrh	r2, [r2, #0]
 8007b5e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	1cba      	adds	r2, r7, #2
 8007b64:	2144      	movs	r1, #68	@ 0x44
 8007b66:	8812      	ldrh	r2, [r2, #0]
 8007b68:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	1cba      	adds	r2, r7, #2
 8007b74:	8812      	ldrh	r2, [r2, #0]
 8007b76:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	1cba      	adds	r2, r7, #2
 8007b7c:	8812      	ldrh	r2, [r2, #0]
 8007b7e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	68da      	ldr	r2, [r3, #12]
 8007b90:	23e0      	movs	r3, #224	@ 0xe0
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d908      	bls.n	8007baa <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	49ac      	ldr	r1, [pc, #688]	@ (8007e54 <HAL_SPI_TransmitReceive+0x3c0>)
 8007ba4:	400a      	ands	r2, r1
 8007ba6:	605a      	str	r2, [r3, #4]
 8007ba8:	e008      	b.n	8007bbc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2180      	movs	r1, #128	@ 0x80
 8007bb6:	0149      	lsls	r1, r1, #5
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2240      	movs	r2, #64	@ 0x40
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	2b40      	cmp	r3, #64	@ 0x40
 8007bc8:	d007      	beq.n	8007bda <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2140      	movs	r1, #64	@ 0x40
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	23e0      	movs	r3, #224	@ 0xe0
 8007be0:	00db      	lsls	r3, r3, #3
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d800      	bhi.n	8007be8 <HAL_SPI_TransmitReceive+0x154>
 8007be6:	e083      	b.n	8007cf0 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d005      	beq.n	8007bfc <HAL_SPI_TransmitReceive+0x168>
 8007bf0:	2312      	movs	r3, #18
 8007bf2:	18fb      	adds	r3, r7, r3
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d000      	beq.n	8007bfc <HAL_SPI_TransmitReceive+0x168>
 8007bfa:	e06d      	b.n	8007cd8 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c00:	881a      	ldrh	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c0c:	1c9a      	adds	r2, r3, #2
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c20:	e05a      	b.n	8007cd8 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d11b      	bne.n	8007c68 <HAL_SPI_TransmitReceive+0x1d4>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d016      	beq.n	8007c68 <HAL_SPI_TransmitReceive+0x1d4>
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d113      	bne.n	8007c68 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c44:	881a      	ldrh	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c50:	1c9a      	adds	r2, r3, #2
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	4013      	ands	r3, r2
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d11c      	bne.n	8007cb0 <HAL_SPI_TransmitReceive+0x21c>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2246      	movs	r2, #70	@ 0x46
 8007c7a:	5a9b      	ldrh	r3, [r3, r2]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d016      	beq.n	8007cb0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c8c:	b292      	uxth	r2, r2
 8007c8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c94:	1c9a      	adds	r2, r3, #2
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2246      	movs	r2, #70	@ 0x46
 8007c9e:	5a9b      	ldrh	r3, [r3, r2]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	b299      	uxth	r1, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2246      	movs	r2, #70	@ 0x46
 8007caa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cac:	2301      	movs	r3, #1
 8007cae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007cb0:	f7fb fdc8 	bl	8003844 <HAL_GetTick>
 8007cb4:	0002      	movs	r2, r0
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d80b      	bhi.n	8007cd8 <HAL_SPI_TransmitReceive+0x244>
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	d008      	beq.n	8007cd8 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8007cc6:	2323      	movs	r3, #35	@ 0x23
 8007cc8:	18fb      	adds	r3, r7, r3
 8007cca:	2203      	movs	r2, #3
 8007ccc:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	225d      	movs	r2, #93	@ 0x5d
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	5499      	strb	r1, [r3, r2]
        goto error;
 8007cd6:	e0b1      	b.n	8007e3c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d19f      	bne.n	8007c22 <HAL_SPI_TransmitReceive+0x18e>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2246      	movs	r2, #70	@ 0x46
 8007ce6:	5a9b      	ldrh	r3, [r3, r2]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d199      	bne.n	8007c22 <HAL_SPI_TransmitReceive+0x18e>
 8007cee:	e089      	b.n	8007e04 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d005      	beq.n	8007d04 <HAL_SPI_TransmitReceive+0x270>
 8007cf8:	2312      	movs	r3, #18
 8007cfa:	18fb      	adds	r3, r7, r3
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d000      	beq.n	8007d04 <HAL_SPI_TransmitReceive+0x270>
 8007d02:	e074      	b.n	8007dee <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	330c      	adds	r3, #12
 8007d0e:	7812      	ldrb	r2, [r2, #0]
 8007d10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	3b01      	subs	r3, #1
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d2a:	e060      	b.n	8007dee <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	2202      	movs	r2, #2
 8007d34:	4013      	ands	r3, r2
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d11c      	bne.n	8007d74 <HAL_SPI_TransmitReceive+0x2e0>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d017      	beq.n	8007d74 <HAL_SPI_TransmitReceive+0x2e0>
 8007d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d114      	bne.n	8007d74 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	330c      	adds	r3, #12
 8007d54:	7812      	ldrb	r2, [r2, #0]
 8007d56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5c:	1c5a      	adds	r2, r3, #1
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d70:	2300      	movs	r3, #0
 8007d72:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d11e      	bne.n	8007dc0 <HAL_SPI_TransmitReceive+0x32c>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2246      	movs	r2, #70	@ 0x46
 8007d86:	5a9b      	ldrh	r3, [r3, r2]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d018      	beq.n	8007dc0 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	330c      	adds	r3, #12
 8007d94:	001a      	movs	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d9a:	7812      	ldrb	r2, [r2, #0]
 8007d9c:	b2d2      	uxtb	r2, r2
 8007d9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2246      	movs	r2, #70	@ 0x46
 8007dae:	5a9b      	ldrh	r3, [r3, r2]
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	3b01      	subs	r3, #1
 8007db4:	b299      	uxth	r1, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2246      	movs	r2, #70	@ 0x46
 8007dba:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007dc0:	f7fb fd40 	bl	8003844 <HAL_GetTick>
 8007dc4:	0002      	movs	r2, r0
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d802      	bhi.n	8007dd6 <HAL_SPI_TransmitReceive+0x342>
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	d102      	bne.n	8007ddc <HAL_SPI_TransmitReceive+0x348>
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d108      	bne.n	8007dee <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8007ddc:	2323      	movs	r3, #35	@ 0x23
 8007dde:	18fb      	adds	r3, r7, r3
 8007de0:	2203      	movs	r2, #3
 8007de2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	225d      	movs	r2, #93	@ 0x5d
 8007de8:	2101      	movs	r1, #1
 8007dea:	5499      	strb	r1, [r3, r2]
        goto error;
 8007dec:	e026      	b.n	8007e3c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d199      	bne.n	8007d2c <HAL_SPI_TransmitReceive+0x298>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2246      	movs	r2, #70	@ 0x46
 8007dfc:	5a9b      	ldrh	r3, [r3, r2]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d193      	bne.n	8007d2c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e04:	69fa      	ldr	r2, [r7, #28]
 8007e06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	0018      	movs	r0, r3
 8007e0c:	f000 f9b2 	bl	8008174 <SPI_EndRxTxTransaction>
 8007e10:	1e03      	subs	r3, r0, #0
 8007e12:	d006      	beq.n	8007e22 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8007e14:	2323      	movs	r3, #35	@ 0x23
 8007e16:	18fb      	adds	r3, r7, r3
 8007e18:	2201      	movs	r2, #1
 8007e1a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d004      	beq.n	8007e34 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8007e2a:	2323      	movs	r3, #35	@ 0x23
 8007e2c:	18fb      	adds	r3, r7, r3
 8007e2e:	2201      	movs	r2, #1
 8007e30:	701a      	strb	r2, [r3, #0]
 8007e32:	e003      	b.n	8007e3c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	225d      	movs	r2, #93	@ 0x5d
 8007e38:	2101      	movs	r1, #1
 8007e3a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	225c      	movs	r2, #92	@ 0x5c
 8007e40:	2100      	movs	r1, #0
 8007e42:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007e44:	2323      	movs	r3, #35	@ 0x23
 8007e46:	18fb      	adds	r3, r7, r3
 8007e48:	781b      	ldrb	r3, [r3, #0]
}
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	b00a      	add	sp, #40	@ 0x28
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	46c0      	nop			@ (mov r8, r8)
 8007e54:	ffffefff 	.word	0xffffefff

08007e58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b088      	sub	sp, #32
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	1dfb      	adds	r3, r7, #7
 8007e66:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e68:	f7fb fcec 	bl	8003844 <HAL_GetTick>
 8007e6c:	0002      	movs	r2, r0
 8007e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e70:	1a9b      	subs	r3, r3, r2
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	18d3      	adds	r3, r2, r3
 8007e76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e78:	f7fb fce4 	bl	8003844 <HAL_GetTick>
 8007e7c:	0003      	movs	r3, r0
 8007e7e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e80:	4b3a      	ldr	r3, [pc, #232]	@ (8007f6c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	015b      	lsls	r3, r3, #5
 8007e86:	0d1b      	lsrs	r3, r3, #20
 8007e88:	69fa      	ldr	r2, [r7, #28]
 8007e8a:	4353      	muls	r3, r2
 8007e8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e8e:	e058      	b.n	8007f42 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	3301      	adds	r3, #1
 8007e94:	d055      	beq.n	8007f42 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e96:	f7fb fcd5 	bl	8003844 <HAL_GetTick>
 8007e9a:	0002      	movs	r2, r0
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	69fa      	ldr	r2, [r7, #28]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d902      	bls.n	8007eac <SPI_WaitFlagStateUntilTimeout+0x54>
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d142      	bne.n	8007f32 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	21e0      	movs	r1, #224	@ 0xe0
 8007eb8:	438a      	bics	r2, r1
 8007eba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	2382      	movs	r3, #130	@ 0x82
 8007ec2:	005b      	lsls	r3, r3, #1
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d113      	bne.n	8007ef0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	689a      	ldr	r2, [r3, #8]
 8007ecc:	2380      	movs	r3, #128	@ 0x80
 8007ece:	021b      	lsls	r3, r3, #8
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d005      	beq.n	8007ee0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	2380      	movs	r3, #128	@ 0x80
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d107      	bne.n	8007ef0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2140      	movs	r1, #64	@ 0x40
 8007eec:	438a      	bics	r2, r1
 8007eee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ef4:	2380      	movs	r3, #128	@ 0x80
 8007ef6:	019b      	lsls	r3, r3, #6
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d110      	bne.n	8007f1e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	491a      	ldr	r1, [pc, #104]	@ (8007f70 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007f08:	400a      	ands	r2, r1
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2180      	movs	r1, #128	@ 0x80
 8007f18:	0189      	lsls	r1, r1, #6
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	225d      	movs	r2, #93	@ 0x5d
 8007f22:	2101      	movs	r1, #1
 8007f24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	225c      	movs	r2, #92	@ 0x5c
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e017      	b.n	8007f62 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d101      	bne.n	8007f3c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	425a      	negs	r2, r3
 8007f52:	4153      	adcs	r3, r2
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	001a      	movs	r2, r3
 8007f58:	1dfb      	adds	r3, r7, #7
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d197      	bne.n	8007e90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	0018      	movs	r0, r3
 8007f64:	46bd      	mov	sp, r7
 8007f66:	b008      	add	sp, #32
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	46c0      	nop			@ (mov r8, r8)
 8007f6c:	2000008c 	.word	0x2000008c
 8007f70:	ffffdfff 	.word	0xffffdfff

08007f74 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b08a      	sub	sp, #40	@ 0x28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
 8007f80:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007f82:	2317      	movs	r3, #23
 8007f84:	18fb      	adds	r3, r7, r3
 8007f86:	2200      	movs	r2, #0
 8007f88:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007f8a:	f7fb fc5b 	bl	8003844 <HAL_GetTick>
 8007f8e:	0002      	movs	r2, r0
 8007f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f92:	1a9b      	subs	r3, r3, r2
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	18d3      	adds	r3, r2, r3
 8007f98:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007f9a:	f7fb fc53 	bl	8003844 <HAL_GetTick>
 8007f9e:	0003      	movs	r3, r0
 8007fa0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	330c      	adds	r3, #12
 8007fa8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007faa:	4b41      	ldr	r3, [pc, #260]	@ (80080b0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	0013      	movs	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	189b      	adds	r3, r3, r2
 8007fb4:	00da      	lsls	r2, r3, #3
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	0d1b      	lsrs	r3, r3, #20
 8007fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fbc:	4353      	muls	r3, r2
 8007fbe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007fc0:	e068      	b.n	8008094 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	23c0      	movs	r3, #192	@ 0xc0
 8007fc6:	00db      	lsls	r3, r3, #3
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d10a      	bne.n	8007fe2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d107      	bne.n	8007fe2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	2117      	movs	r1, #23
 8007fda:	187b      	adds	r3, r7, r1
 8007fdc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007fde:	187b      	adds	r3, r7, r1
 8007fe0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	d055      	beq.n	8008094 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fe8:	f7fb fc2c 	bl	8003844 <HAL_GetTick>
 8007fec:	0002      	movs	r2, r0
 8007fee:	6a3b      	ldr	r3, [r7, #32]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d902      	bls.n	8007ffe <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d142      	bne.n	8008084 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	21e0      	movs	r1, #224	@ 0xe0
 800800a:	438a      	bics	r2, r1
 800800c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	685a      	ldr	r2, [r3, #4]
 8008012:	2382      	movs	r3, #130	@ 0x82
 8008014:	005b      	lsls	r3, r3, #1
 8008016:	429a      	cmp	r2, r3
 8008018:	d113      	bne.n	8008042 <SPI_WaitFifoStateUntilTimeout+0xce>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	2380      	movs	r3, #128	@ 0x80
 8008020:	021b      	lsls	r3, r3, #8
 8008022:	429a      	cmp	r2, r3
 8008024:	d005      	beq.n	8008032 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	689a      	ldr	r2, [r3, #8]
 800802a:	2380      	movs	r3, #128	@ 0x80
 800802c:	00db      	lsls	r3, r3, #3
 800802e:	429a      	cmp	r2, r3
 8008030:	d107      	bne.n	8008042 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2140      	movs	r1, #64	@ 0x40
 800803e:	438a      	bics	r2, r1
 8008040:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008046:	2380      	movs	r3, #128	@ 0x80
 8008048:	019b      	lsls	r3, r3, #6
 800804a:	429a      	cmp	r2, r3
 800804c:	d110      	bne.n	8008070 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4916      	ldr	r1, [pc, #88]	@ (80080b4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800805a:	400a      	ands	r2, r1
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2180      	movs	r1, #128	@ 0x80
 800806a:	0189      	lsls	r1, r1, #6
 800806c:	430a      	orrs	r2, r1
 800806e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	225d      	movs	r2, #93	@ 0x5d
 8008074:	2101      	movs	r1, #1
 8008076:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	225c      	movs	r2, #92	@ 0x5c
 800807c:	2100      	movs	r1, #0
 800807e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e010      	b.n	80080a6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	3b01      	subs	r3, #1
 8008092:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	4013      	ands	r3, r2
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d18e      	bne.n	8007fc2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	0018      	movs	r0, r3
 80080a8:	46bd      	mov	sp, r7
 80080aa:	b00a      	add	sp, #40	@ 0x28
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	46c0      	nop			@ (mov r8, r8)
 80080b0:	2000008c 	.word	0x2000008c
 80080b4:	ffffdfff 	.word	0xffffdfff

080080b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af02      	add	r7, sp, #8
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	2382      	movs	r3, #130	@ 0x82
 80080ca:	005b      	lsls	r3, r3, #1
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d113      	bne.n	80080f8 <SPI_EndRxTransaction+0x40>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	689a      	ldr	r2, [r3, #8]
 80080d4:	2380      	movs	r3, #128	@ 0x80
 80080d6:	021b      	lsls	r3, r3, #8
 80080d8:	429a      	cmp	r2, r3
 80080da:	d005      	beq.n	80080e8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	689a      	ldr	r2, [r3, #8]
 80080e0:	2380      	movs	r3, #128	@ 0x80
 80080e2:	00db      	lsls	r3, r3, #3
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d107      	bne.n	80080f8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2140      	movs	r1, #64	@ 0x40
 80080f4:	438a      	bics	r2, r1
 80080f6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	0013      	movs	r3, r2
 8008102:	2200      	movs	r2, #0
 8008104:	2180      	movs	r1, #128	@ 0x80
 8008106:	f7ff fea7 	bl	8007e58 <SPI_WaitFlagStateUntilTimeout>
 800810a:	1e03      	subs	r3, r0, #0
 800810c:	d007      	beq.n	800811e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008112:	2220      	movs	r2, #32
 8008114:	431a      	orrs	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e026      	b.n	800816c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	2382      	movs	r3, #130	@ 0x82
 8008124:	005b      	lsls	r3, r3, #1
 8008126:	429a      	cmp	r2, r3
 8008128:	d11f      	bne.n	800816a <SPI_EndRxTransaction+0xb2>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	689a      	ldr	r2, [r3, #8]
 800812e:	2380      	movs	r3, #128	@ 0x80
 8008130:	021b      	lsls	r3, r3, #8
 8008132:	429a      	cmp	r2, r3
 8008134:	d005      	beq.n	8008142 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	689a      	ldr	r2, [r3, #8]
 800813a:	2380      	movs	r3, #128	@ 0x80
 800813c:	00db      	lsls	r3, r3, #3
 800813e:	429a      	cmp	r2, r3
 8008140:	d113      	bne.n	800816a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	23c0      	movs	r3, #192	@ 0xc0
 8008146:	00d9      	lsls	r1, r3, #3
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	0013      	movs	r3, r2
 8008150:	2200      	movs	r2, #0
 8008152:	f7ff ff0f 	bl	8007f74 <SPI_WaitFifoStateUntilTimeout>
 8008156:	1e03      	subs	r3, r0, #0
 8008158:	d007      	beq.n	800816a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800815e:	2220      	movs	r2, #32
 8008160:	431a      	orrs	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e000      	b.n	800816c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	0018      	movs	r0, r3
 800816e:	46bd      	mov	sp, r7
 8008170:	b004      	add	sp, #16
 8008172:	bd80      	pop	{r7, pc}

08008174 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af02      	add	r7, sp, #8
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	23c0      	movs	r3, #192	@ 0xc0
 8008184:	0159      	lsls	r1, r3, #5
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	0013      	movs	r3, r2
 800818e:	2200      	movs	r2, #0
 8008190:	f7ff fef0 	bl	8007f74 <SPI_WaitFifoStateUntilTimeout>
 8008194:	1e03      	subs	r3, r0, #0
 8008196:	d007      	beq.n	80081a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800819c:	2220      	movs	r2, #32
 800819e:	431a      	orrs	r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e027      	b.n	80081f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	0013      	movs	r3, r2
 80081b2:	2200      	movs	r2, #0
 80081b4:	2180      	movs	r1, #128	@ 0x80
 80081b6:	f7ff fe4f 	bl	8007e58 <SPI_WaitFlagStateUntilTimeout>
 80081ba:	1e03      	subs	r3, r0, #0
 80081bc:	d007      	beq.n	80081ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081c2:	2220      	movs	r2, #32
 80081c4:	431a      	orrs	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e014      	b.n	80081f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	23c0      	movs	r3, #192	@ 0xc0
 80081d2:	00d9      	lsls	r1, r3, #3
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	0013      	movs	r3, r2
 80081dc:	2200      	movs	r2, #0
 80081de:	f7ff fec9 	bl	8007f74 <SPI_WaitFifoStateUntilTimeout>
 80081e2:	1e03      	subs	r3, r0, #0
 80081e4:	d007      	beq.n	80081f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081ea:	2220      	movs	r2, #32
 80081ec:	431a      	orrs	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e000      	b.n	80081f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	0018      	movs	r0, r3
 80081fa:	46bd      	mov	sp, r7
 80081fc:	b004      	add	sp, #16
 80081fe:	bd80      	pop	{r7, pc}

08008200 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e04a      	b.n	80082a8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	223d      	movs	r2, #61	@ 0x3d
 8008216:	5c9b      	ldrb	r3, [r3, r2]
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d107      	bne.n	800822e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	223c      	movs	r2, #60	@ 0x3c
 8008222:	2100      	movs	r1, #0
 8008224:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	0018      	movs	r0, r3
 800822a:	f7fb f96d 	bl	8003508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	223d      	movs	r2, #61	@ 0x3d
 8008232:	2102      	movs	r1, #2
 8008234:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	3304      	adds	r3, #4
 800823e:	0019      	movs	r1, r3
 8008240:	0010      	movs	r0, r2
 8008242:	f000 fc87 	bl	8008b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2248      	movs	r2, #72	@ 0x48
 800824a:	2101      	movs	r1, #1
 800824c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	223e      	movs	r2, #62	@ 0x3e
 8008252:	2101      	movs	r1, #1
 8008254:	5499      	strb	r1, [r3, r2]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	223f      	movs	r2, #63	@ 0x3f
 800825a:	2101      	movs	r1, #1
 800825c:	5499      	strb	r1, [r3, r2]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2240      	movs	r2, #64	@ 0x40
 8008262:	2101      	movs	r1, #1
 8008264:	5499      	strb	r1, [r3, r2]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2241      	movs	r2, #65	@ 0x41
 800826a:	2101      	movs	r1, #1
 800826c:	5499      	strb	r1, [r3, r2]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2242      	movs	r2, #66	@ 0x42
 8008272:	2101      	movs	r1, #1
 8008274:	5499      	strb	r1, [r3, r2]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2243      	movs	r2, #67	@ 0x43
 800827a:	2101      	movs	r1, #1
 800827c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2244      	movs	r2, #68	@ 0x44
 8008282:	2101      	movs	r1, #1
 8008284:	5499      	strb	r1, [r3, r2]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2245      	movs	r2, #69	@ 0x45
 800828a:	2101      	movs	r1, #1
 800828c:	5499      	strb	r1, [r3, r2]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2246      	movs	r2, #70	@ 0x46
 8008292:	2101      	movs	r1, #1
 8008294:	5499      	strb	r1, [r3, r2]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2247      	movs	r2, #71	@ 0x47
 800829a:	2101      	movs	r1, #1
 800829c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	223d      	movs	r2, #61	@ 0x3d
 80082a2:	2101      	movs	r1, #1
 80082a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	0018      	movs	r0, r3
 80082aa:	46bd      	mov	sp, r7
 80082ac:	b002      	add	sp, #8
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	223d      	movs	r2, #61	@ 0x3d
 80082bc:	5c9b      	ldrb	r3, [r3, r2]
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d001      	beq.n	80082c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e035      	b.n	8008334 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	223d      	movs	r2, #61	@ 0x3d
 80082cc:	2102      	movs	r1, #2
 80082ce:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a19      	ldr	r2, [pc, #100]	@ (800833c <HAL_TIM_Base_Start+0x8c>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d00a      	beq.n	80082f0 <HAL_TIM_Base_Start+0x40>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	2380      	movs	r3, #128	@ 0x80
 80082e0:	05db      	lsls	r3, r3, #23
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d004      	beq.n	80082f0 <HAL_TIM_Base_Start+0x40>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a15      	ldr	r2, [pc, #84]	@ (8008340 <HAL_TIM_Base_Start+0x90>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d116      	bne.n	800831e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	4a13      	ldr	r2, [pc, #76]	@ (8008344 <HAL_TIM_Base_Start+0x94>)
 80082f8:	4013      	ands	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b06      	cmp	r3, #6
 8008300:	d016      	beq.n	8008330 <HAL_TIM_Base_Start+0x80>
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	2380      	movs	r3, #128	@ 0x80
 8008306:	025b      	lsls	r3, r3, #9
 8008308:	429a      	cmp	r2, r3
 800830a:	d011      	beq.n	8008330 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2101      	movs	r1, #1
 8008318:	430a      	orrs	r2, r1
 800831a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800831c:	e008      	b.n	8008330 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2101      	movs	r1, #1
 800832a:	430a      	orrs	r2, r1
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	e000      	b.n	8008332 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008330:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	0018      	movs	r0, r3
 8008336:	46bd      	mov	sp, r7
 8008338:	b004      	add	sp, #16
 800833a:	bd80      	pop	{r7, pc}
 800833c:	40012c00 	.word	0x40012c00
 8008340:	40000400 	.word	0x40000400
 8008344:	00010007 	.word	0x00010007

08008348 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	4a0d      	ldr	r2, [pc, #52]	@ (800838c <HAL_TIM_Base_Stop+0x44>)
 8008358:	4013      	ands	r3, r2
 800835a:	d10d      	bne.n	8008378 <HAL_TIM_Base_Stop+0x30>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	4a0b      	ldr	r2, [pc, #44]	@ (8008390 <HAL_TIM_Base_Stop+0x48>)
 8008364:	4013      	ands	r3, r2
 8008366:	d107      	bne.n	8008378 <HAL_TIM_Base_Stop+0x30>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2101      	movs	r1, #1
 8008374:	438a      	bics	r2, r1
 8008376:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	223d      	movs	r2, #61	@ 0x3d
 800837c:	2101      	movs	r1, #1
 800837e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	0018      	movs	r0, r3
 8008384:	46bd      	mov	sp, r7
 8008386:	b002      	add	sp, #8
 8008388:	bd80      	pop	{r7, pc}
 800838a:	46c0      	nop			@ (mov r8, r8)
 800838c:	00001111 	.word	0x00001111
 8008390:	00000444 	.word	0x00000444

08008394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	223d      	movs	r2, #61	@ 0x3d
 80083a0:	5c9b      	ldrb	r3, [r3, r2]
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d001      	beq.n	80083ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e03d      	b.n	8008428 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	223d      	movs	r2, #61	@ 0x3d
 80083b0:	2102      	movs	r1, #2
 80083b2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68da      	ldr	r2, [r3, #12]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2101      	movs	r1, #1
 80083c0:	430a      	orrs	r2, r1
 80083c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a19      	ldr	r2, [pc, #100]	@ (8008430 <HAL_TIM_Base_Start_IT+0x9c>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d00a      	beq.n	80083e4 <HAL_TIM_Base_Start_IT+0x50>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	2380      	movs	r3, #128	@ 0x80
 80083d4:	05db      	lsls	r3, r3, #23
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d004      	beq.n	80083e4 <HAL_TIM_Base_Start_IT+0x50>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a15      	ldr	r2, [pc, #84]	@ (8008434 <HAL_TIM_Base_Start_IT+0xa0>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d116      	bne.n	8008412 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	4a13      	ldr	r2, [pc, #76]	@ (8008438 <HAL_TIM_Base_Start_IT+0xa4>)
 80083ec:	4013      	ands	r3, r2
 80083ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2b06      	cmp	r3, #6
 80083f4:	d016      	beq.n	8008424 <HAL_TIM_Base_Start_IT+0x90>
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	2380      	movs	r3, #128	@ 0x80
 80083fa:	025b      	lsls	r3, r3, #9
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d011      	beq.n	8008424 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2101      	movs	r1, #1
 800840c:	430a      	orrs	r2, r1
 800840e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008410:	e008      	b.n	8008424 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2101      	movs	r1, #1
 800841e:	430a      	orrs	r2, r1
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	e000      	b.n	8008426 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008424:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	0018      	movs	r0, r3
 800842a:	46bd      	mov	sp, r7
 800842c:	b004      	add	sp, #16
 800842e:	bd80      	pop	{r7, pc}
 8008430:	40012c00 	.word	0x40012c00
 8008434:	40000400 	.word	0x40000400
 8008438:	00010007 	.word	0x00010007

0800843c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68da      	ldr	r2, [r3, #12]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2101      	movs	r1, #1
 8008450:	438a      	bics	r2, r1
 8008452:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	4a0d      	ldr	r2, [pc, #52]	@ (8008490 <HAL_TIM_Base_Stop_IT+0x54>)
 800845c:	4013      	ands	r3, r2
 800845e:	d10d      	bne.n	800847c <HAL_TIM_Base_Stop_IT+0x40>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	4a0b      	ldr	r2, [pc, #44]	@ (8008494 <HAL_TIM_Base_Stop_IT+0x58>)
 8008468:	4013      	ands	r3, r2
 800846a:	d107      	bne.n	800847c <HAL_TIM_Base_Stop_IT+0x40>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2101      	movs	r1, #1
 8008478:	438a      	bics	r2, r1
 800847a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	223d      	movs	r2, #61	@ 0x3d
 8008480:	2101      	movs	r1, #1
 8008482:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	0018      	movs	r0, r3
 8008488:	46bd      	mov	sp, r7
 800848a:	b002      	add	sp, #8
 800848c:	bd80      	pop	{r7, pc}
 800848e:	46c0      	nop			@ (mov r8, r8)
 8008490:	00001111 	.word	0x00001111
 8008494:	00000444 	.word	0x00000444

08008498 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d101      	bne.n	80084aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e04a      	b.n	8008540 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	223d      	movs	r2, #61	@ 0x3d
 80084ae:	5c9b      	ldrb	r3, [r3, r2]
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d107      	bne.n	80084c6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	223c      	movs	r2, #60	@ 0x3c
 80084ba:	2100      	movs	r1, #0
 80084bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	0018      	movs	r0, r3
 80084c2:	f7fb f805 	bl	80034d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	223d      	movs	r2, #61	@ 0x3d
 80084ca:	2102      	movs	r1, #2
 80084cc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	3304      	adds	r3, #4
 80084d6:	0019      	movs	r1, r3
 80084d8:	0010      	movs	r0, r2
 80084da:	f000 fb3b 	bl	8008b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2248      	movs	r2, #72	@ 0x48
 80084e2:	2101      	movs	r1, #1
 80084e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	223e      	movs	r2, #62	@ 0x3e
 80084ea:	2101      	movs	r1, #1
 80084ec:	5499      	strb	r1, [r3, r2]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	223f      	movs	r2, #63	@ 0x3f
 80084f2:	2101      	movs	r1, #1
 80084f4:	5499      	strb	r1, [r3, r2]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2240      	movs	r2, #64	@ 0x40
 80084fa:	2101      	movs	r1, #1
 80084fc:	5499      	strb	r1, [r3, r2]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2241      	movs	r2, #65	@ 0x41
 8008502:	2101      	movs	r1, #1
 8008504:	5499      	strb	r1, [r3, r2]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2242      	movs	r2, #66	@ 0x42
 800850a:	2101      	movs	r1, #1
 800850c:	5499      	strb	r1, [r3, r2]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2243      	movs	r2, #67	@ 0x43
 8008512:	2101      	movs	r1, #1
 8008514:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2244      	movs	r2, #68	@ 0x44
 800851a:	2101      	movs	r1, #1
 800851c:	5499      	strb	r1, [r3, r2]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2245      	movs	r2, #69	@ 0x45
 8008522:	2101      	movs	r1, #1
 8008524:	5499      	strb	r1, [r3, r2]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2246      	movs	r2, #70	@ 0x46
 800852a:	2101      	movs	r1, #1
 800852c:	5499      	strb	r1, [r3, r2]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2247      	movs	r2, #71	@ 0x47
 8008532:	2101      	movs	r1, #1
 8008534:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	223d      	movs	r2, #61	@ 0x3d
 800853a:	2101      	movs	r1, #1
 800853c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	0018      	movs	r0, r3
 8008542:	46bd      	mov	sp, r7
 8008544:	b002      	add	sp, #8
 8008546:	bd80      	pop	{r7, pc}

08008548 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d108      	bne.n	800856a <HAL_TIM_PWM_Start+0x22>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	223e      	movs	r2, #62	@ 0x3e
 800855c:	5c9b      	ldrb	r3, [r3, r2]
 800855e:	b2db      	uxtb	r3, r3
 8008560:	3b01      	subs	r3, #1
 8008562:	1e5a      	subs	r2, r3, #1
 8008564:	4193      	sbcs	r3, r2
 8008566:	b2db      	uxtb	r3, r3
 8008568:	e037      	b.n	80085da <HAL_TIM_PWM_Start+0x92>
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	2b04      	cmp	r3, #4
 800856e:	d108      	bne.n	8008582 <HAL_TIM_PWM_Start+0x3a>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	223f      	movs	r2, #63	@ 0x3f
 8008574:	5c9b      	ldrb	r3, [r3, r2]
 8008576:	b2db      	uxtb	r3, r3
 8008578:	3b01      	subs	r3, #1
 800857a:	1e5a      	subs	r2, r3, #1
 800857c:	4193      	sbcs	r3, r2
 800857e:	b2db      	uxtb	r3, r3
 8008580:	e02b      	b.n	80085da <HAL_TIM_PWM_Start+0x92>
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b08      	cmp	r3, #8
 8008586:	d108      	bne.n	800859a <HAL_TIM_PWM_Start+0x52>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2240      	movs	r2, #64	@ 0x40
 800858c:	5c9b      	ldrb	r3, [r3, r2]
 800858e:	b2db      	uxtb	r3, r3
 8008590:	3b01      	subs	r3, #1
 8008592:	1e5a      	subs	r2, r3, #1
 8008594:	4193      	sbcs	r3, r2
 8008596:	b2db      	uxtb	r3, r3
 8008598:	e01f      	b.n	80085da <HAL_TIM_PWM_Start+0x92>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2b0c      	cmp	r3, #12
 800859e:	d108      	bne.n	80085b2 <HAL_TIM_PWM_Start+0x6a>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2241      	movs	r2, #65	@ 0x41
 80085a4:	5c9b      	ldrb	r3, [r3, r2]
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	3b01      	subs	r3, #1
 80085aa:	1e5a      	subs	r2, r3, #1
 80085ac:	4193      	sbcs	r3, r2
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	e013      	b.n	80085da <HAL_TIM_PWM_Start+0x92>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b10      	cmp	r3, #16
 80085b6:	d108      	bne.n	80085ca <HAL_TIM_PWM_Start+0x82>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2242      	movs	r2, #66	@ 0x42
 80085bc:	5c9b      	ldrb	r3, [r3, r2]
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	3b01      	subs	r3, #1
 80085c2:	1e5a      	subs	r2, r3, #1
 80085c4:	4193      	sbcs	r3, r2
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	e007      	b.n	80085da <HAL_TIM_PWM_Start+0x92>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2243      	movs	r2, #67	@ 0x43
 80085ce:	5c9b      	ldrb	r3, [r3, r2]
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	3b01      	subs	r3, #1
 80085d4:	1e5a      	subs	r2, r3, #1
 80085d6:	4193      	sbcs	r3, r2
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e081      	b.n	80086e6 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d104      	bne.n	80085f2 <HAL_TIM_PWM_Start+0xaa>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	223e      	movs	r2, #62	@ 0x3e
 80085ec:	2102      	movs	r1, #2
 80085ee:	5499      	strb	r1, [r3, r2]
 80085f0:	e023      	b.n	800863a <HAL_TIM_PWM_Start+0xf2>
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	d104      	bne.n	8008602 <HAL_TIM_PWM_Start+0xba>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	223f      	movs	r2, #63	@ 0x3f
 80085fc:	2102      	movs	r1, #2
 80085fe:	5499      	strb	r1, [r3, r2]
 8008600:	e01b      	b.n	800863a <HAL_TIM_PWM_Start+0xf2>
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	2b08      	cmp	r3, #8
 8008606:	d104      	bne.n	8008612 <HAL_TIM_PWM_Start+0xca>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2240      	movs	r2, #64	@ 0x40
 800860c:	2102      	movs	r1, #2
 800860e:	5499      	strb	r1, [r3, r2]
 8008610:	e013      	b.n	800863a <HAL_TIM_PWM_Start+0xf2>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b0c      	cmp	r3, #12
 8008616:	d104      	bne.n	8008622 <HAL_TIM_PWM_Start+0xda>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2241      	movs	r2, #65	@ 0x41
 800861c:	2102      	movs	r1, #2
 800861e:	5499      	strb	r1, [r3, r2]
 8008620:	e00b      	b.n	800863a <HAL_TIM_PWM_Start+0xf2>
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	2b10      	cmp	r3, #16
 8008626:	d104      	bne.n	8008632 <HAL_TIM_PWM_Start+0xea>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2242      	movs	r2, #66	@ 0x42
 800862c:	2102      	movs	r1, #2
 800862e:	5499      	strb	r1, [r3, r2]
 8008630:	e003      	b.n	800863a <HAL_TIM_PWM_Start+0xf2>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2243      	movs	r2, #67	@ 0x43
 8008636:	2102      	movs	r1, #2
 8008638:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	2201      	movs	r2, #1
 8008642:	0018      	movs	r0, r3
 8008644:	f000 fda6 	bl	8009194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a28      	ldr	r2, [pc, #160]	@ (80086f0 <HAL_TIM_PWM_Start+0x1a8>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d009      	beq.n	8008666 <HAL_TIM_PWM_Start+0x11e>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a27      	ldr	r2, [pc, #156]	@ (80086f4 <HAL_TIM_PWM_Start+0x1ac>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d004      	beq.n	8008666 <HAL_TIM_PWM_Start+0x11e>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a25      	ldr	r2, [pc, #148]	@ (80086f8 <HAL_TIM_PWM_Start+0x1b0>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d101      	bne.n	800866a <HAL_TIM_PWM_Start+0x122>
 8008666:	2301      	movs	r3, #1
 8008668:	e000      	b.n	800866c <HAL_TIM_PWM_Start+0x124>
 800866a:	2300      	movs	r3, #0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d008      	beq.n	8008682 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2180      	movs	r1, #128	@ 0x80
 800867c:	0209      	lsls	r1, r1, #8
 800867e:	430a      	orrs	r2, r1
 8008680:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a1a      	ldr	r2, [pc, #104]	@ (80086f0 <HAL_TIM_PWM_Start+0x1a8>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d00a      	beq.n	80086a2 <HAL_TIM_PWM_Start+0x15a>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	2380      	movs	r3, #128	@ 0x80
 8008692:	05db      	lsls	r3, r3, #23
 8008694:	429a      	cmp	r2, r3
 8008696:	d004      	beq.n	80086a2 <HAL_TIM_PWM_Start+0x15a>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a17      	ldr	r2, [pc, #92]	@ (80086fc <HAL_TIM_PWM_Start+0x1b4>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d116      	bne.n	80086d0 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	4a15      	ldr	r2, [pc, #84]	@ (8008700 <HAL_TIM_PWM_Start+0x1b8>)
 80086aa:	4013      	ands	r3, r2
 80086ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b06      	cmp	r3, #6
 80086b2:	d016      	beq.n	80086e2 <HAL_TIM_PWM_Start+0x19a>
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	2380      	movs	r3, #128	@ 0x80
 80086b8:	025b      	lsls	r3, r3, #9
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d011      	beq.n	80086e2 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2101      	movs	r1, #1
 80086ca:	430a      	orrs	r2, r1
 80086cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ce:	e008      	b.n	80086e2 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2101      	movs	r1, #1
 80086dc:	430a      	orrs	r2, r1
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	e000      	b.n	80086e4 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	0018      	movs	r0, r3
 80086e8:	46bd      	mov	sp, r7
 80086ea:	b004      	add	sp, #16
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	46c0      	nop			@ (mov r8, r8)
 80086f0:	40012c00 	.word	0x40012c00
 80086f4:	40014400 	.word	0x40014400
 80086f8:	40014800 	.word	0x40014800
 80086fc:	40000400 	.word	0x40000400
 8008700:	00010007 	.word	0x00010007

08008704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2202      	movs	r2, #2
 8008720:	4013      	ands	r3, r2
 8008722:	d021      	beq.n	8008768 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2202      	movs	r2, #2
 8008728:	4013      	ands	r3, r2
 800872a:	d01d      	beq.n	8008768 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2203      	movs	r2, #3
 8008732:	4252      	negs	r2, r2
 8008734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	2203      	movs	r2, #3
 8008744:	4013      	ands	r3, r2
 8008746:	d004      	beq.n	8008752 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	0018      	movs	r0, r3
 800874c:	f000 f9ea 	bl	8008b24 <HAL_TIM_IC_CaptureCallback>
 8008750:	e007      	b.n	8008762 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	0018      	movs	r0, r3
 8008756:	f000 f9dd 	bl	8008b14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	0018      	movs	r0, r3
 800875e:	f000 f9e9 	bl	8008b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2204      	movs	r2, #4
 800876c:	4013      	ands	r3, r2
 800876e:	d022      	beq.n	80087b6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2204      	movs	r2, #4
 8008774:	4013      	ands	r3, r2
 8008776:	d01e      	beq.n	80087b6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2205      	movs	r2, #5
 800877e:	4252      	negs	r2, r2
 8008780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2202      	movs	r2, #2
 8008786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	699a      	ldr	r2, [r3, #24]
 800878e:	23c0      	movs	r3, #192	@ 0xc0
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4013      	ands	r3, r2
 8008794:	d004      	beq.n	80087a0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	0018      	movs	r0, r3
 800879a:	f000 f9c3 	bl	8008b24 <HAL_TIM_IC_CaptureCallback>
 800879e:	e007      	b.n	80087b0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	0018      	movs	r0, r3
 80087a4:	f000 f9b6 	bl	8008b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	0018      	movs	r0, r3
 80087ac:	f000 f9c2 	bl	8008b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2208      	movs	r2, #8
 80087ba:	4013      	ands	r3, r2
 80087bc:	d021      	beq.n	8008802 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2208      	movs	r2, #8
 80087c2:	4013      	ands	r3, r2
 80087c4:	d01d      	beq.n	8008802 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2209      	movs	r2, #9
 80087cc:	4252      	negs	r2, r2
 80087ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2204      	movs	r2, #4
 80087d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	69db      	ldr	r3, [r3, #28]
 80087dc:	2203      	movs	r2, #3
 80087de:	4013      	ands	r3, r2
 80087e0:	d004      	beq.n	80087ec <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	0018      	movs	r0, r3
 80087e6:	f000 f99d 	bl	8008b24 <HAL_TIM_IC_CaptureCallback>
 80087ea:	e007      	b.n	80087fc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	0018      	movs	r0, r3
 80087f0:	f000 f990 	bl	8008b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	0018      	movs	r0, r3
 80087f8:	f000 f99c 	bl	8008b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2210      	movs	r2, #16
 8008806:	4013      	ands	r3, r2
 8008808:	d022      	beq.n	8008850 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2210      	movs	r2, #16
 800880e:	4013      	ands	r3, r2
 8008810:	d01e      	beq.n	8008850 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2211      	movs	r2, #17
 8008818:	4252      	negs	r2, r2
 800881a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2208      	movs	r2, #8
 8008820:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	69da      	ldr	r2, [r3, #28]
 8008828:	23c0      	movs	r3, #192	@ 0xc0
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4013      	ands	r3, r2
 800882e:	d004      	beq.n	800883a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	0018      	movs	r0, r3
 8008834:	f000 f976 	bl	8008b24 <HAL_TIM_IC_CaptureCallback>
 8008838:	e007      	b.n	800884a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	0018      	movs	r0, r3
 800883e:	f000 f969 	bl	8008b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	0018      	movs	r0, r3
 8008846:	f000 f975 	bl	8008b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	2201      	movs	r2, #1
 8008854:	4013      	ands	r3, r2
 8008856:	d00c      	beq.n	8008872 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2201      	movs	r2, #1
 800885c:	4013      	ands	r3, r2
 800885e:	d008      	beq.n	8008872 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2202      	movs	r2, #2
 8008866:	4252      	negs	r2, r2
 8008868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	0018      	movs	r0, r3
 800886e:	f7f9 fdeb 	bl	8002448 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2280      	movs	r2, #128	@ 0x80
 8008876:	4013      	ands	r3, r2
 8008878:	d104      	bne.n	8008884 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	2380      	movs	r3, #128	@ 0x80
 800887e:	019b      	lsls	r3, r3, #6
 8008880:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008882:	d00b      	beq.n	800889c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2280      	movs	r2, #128	@ 0x80
 8008888:	4013      	ands	r3, r2
 800888a:	d007      	beq.n	800889c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a1e      	ldr	r2, [pc, #120]	@ (800890c <HAL_TIM_IRQHandler+0x208>)
 8008892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	0018      	movs	r0, r3
 8008898:	f000 fd10 	bl	80092bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	2380      	movs	r3, #128	@ 0x80
 80088a0:	005b      	lsls	r3, r3, #1
 80088a2:	4013      	ands	r3, r2
 80088a4:	d00b      	beq.n	80088be <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2280      	movs	r2, #128	@ 0x80
 80088aa:	4013      	ands	r3, r2
 80088ac:	d007      	beq.n	80088be <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a17      	ldr	r2, [pc, #92]	@ (8008910 <HAL_TIM_IRQHandler+0x20c>)
 80088b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	0018      	movs	r0, r3
 80088ba:	f000 fd07 	bl	80092cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	2240      	movs	r2, #64	@ 0x40
 80088c2:	4013      	ands	r3, r2
 80088c4:	d00c      	beq.n	80088e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2240      	movs	r2, #64	@ 0x40
 80088ca:	4013      	ands	r3, r2
 80088cc:	d008      	beq.n	80088e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2241      	movs	r2, #65	@ 0x41
 80088d4:	4252      	negs	r2, r2
 80088d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	0018      	movs	r0, r3
 80088dc:	f000 f932 	bl	8008b44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	2220      	movs	r2, #32
 80088e4:	4013      	ands	r3, r2
 80088e6:	d00c      	beq.n	8008902 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2220      	movs	r2, #32
 80088ec:	4013      	ands	r3, r2
 80088ee:	d008      	beq.n	8008902 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2221      	movs	r2, #33	@ 0x21
 80088f6:	4252      	negs	r2, r2
 80088f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	0018      	movs	r0, r3
 80088fe:	f000 fcd5 	bl	80092ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008902:	46c0      	nop			@ (mov r8, r8)
 8008904:	46bd      	mov	sp, r7
 8008906:	b004      	add	sp, #16
 8008908:	bd80      	pop	{r7, pc}
 800890a:	46c0      	nop			@ (mov r8, r8)
 800890c:	ffffdf7f 	.word	0xffffdf7f
 8008910:	fffffeff 	.word	0xfffffeff

08008914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008920:	2317      	movs	r3, #23
 8008922:	18fb      	adds	r3, r7, r3
 8008924:	2200      	movs	r2, #0
 8008926:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	223c      	movs	r2, #60	@ 0x3c
 800892c:	5c9b      	ldrb	r3, [r3, r2]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d101      	bne.n	8008936 <HAL_TIM_PWM_ConfigChannel+0x22>
 8008932:	2302      	movs	r3, #2
 8008934:	e0e5      	b.n	8008b02 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	223c      	movs	r2, #60	@ 0x3c
 800893a:	2101      	movs	r1, #1
 800893c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b14      	cmp	r3, #20
 8008942:	d900      	bls.n	8008946 <HAL_TIM_PWM_ConfigChannel+0x32>
 8008944:	e0d1      	b.n	8008aea <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	009a      	lsls	r2, r3, #2
 800894a:	4b70      	ldr	r3, [pc, #448]	@ (8008b0c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800894c:	18d3      	adds	r3, r2, r3
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	0011      	movs	r1, r2
 800895a:	0018      	movs	r0, r3
 800895c:	f000 f97e 	bl	8008c5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699a      	ldr	r2, [r3, #24]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2108      	movs	r1, #8
 800896c:	430a      	orrs	r2, r1
 800896e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	699a      	ldr	r2, [r3, #24]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2104      	movs	r1, #4
 800897c:	438a      	bics	r2, r1
 800897e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6999      	ldr	r1, [r3, #24]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	691a      	ldr	r2, [r3, #16]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	619a      	str	r2, [r3, #24]
      break;
 8008992:	e0af      	b.n	8008af4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	0011      	movs	r1, r2
 800899c:	0018      	movs	r0, r3
 800899e:	f000 f9dd 	bl	8008d5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	699a      	ldr	r2, [r3, #24]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2180      	movs	r1, #128	@ 0x80
 80089ae:	0109      	lsls	r1, r1, #4
 80089b0:	430a      	orrs	r2, r1
 80089b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	699a      	ldr	r2, [r3, #24]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4954      	ldr	r1, [pc, #336]	@ (8008b10 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80089c0:	400a      	ands	r2, r1
 80089c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6999      	ldr	r1, [r3, #24]
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	021a      	lsls	r2, r3, #8
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	430a      	orrs	r2, r1
 80089d6:	619a      	str	r2, [r3, #24]
      break;
 80089d8:	e08c      	b.n	8008af4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	0011      	movs	r1, r2
 80089e2:	0018      	movs	r0, r3
 80089e4:	f000 fa38 	bl	8008e58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	69da      	ldr	r2, [r3, #28]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2108      	movs	r1, #8
 80089f4:	430a      	orrs	r2, r1
 80089f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	69da      	ldr	r2, [r3, #28]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2104      	movs	r1, #4
 8008a04:	438a      	bics	r2, r1
 8008a06:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	69d9      	ldr	r1, [r3, #28]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	691a      	ldr	r2, [r3, #16]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	430a      	orrs	r2, r1
 8008a18:	61da      	str	r2, [r3, #28]
      break;
 8008a1a:	e06b      	b.n	8008af4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	0011      	movs	r1, r2
 8008a24:	0018      	movs	r0, r3
 8008a26:	f000 fa99 	bl	8008f5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	69da      	ldr	r2, [r3, #28]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2180      	movs	r1, #128	@ 0x80
 8008a36:	0109      	lsls	r1, r1, #4
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	69da      	ldr	r2, [r3, #28]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4932      	ldr	r1, [pc, #200]	@ (8008b10 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008a48:	400a      	ands	r2, r1
 8008a4a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	69d9      	ldr	r1, [r3, #28]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	021a      	lsls	r2, r3, #8
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	61da      	str	r2, [r3, #28]
      break;
 8008a60:	e048      	b.n	8008af4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	0011      	movs	r1, r2
 8008a6a:	0018      	movs	r0, r3
 8008a6c:	f000 fada 	bl	8009024 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2108      	movs	r1, #8
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2104      	movs	r1, #4
 8008a8c:	438a      	bics	r2, r1
 8008a8e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	691a      	ldr	r2, [r3, #16]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008aa2:	e027      	b.n	8008af4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	0011      	movs	r1, r2
 8008aac:	0018      	movs	r0, r3
 8008aae:	f000 fb13 	bl	80090d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2180      	movs	r1, #128	@ 0x80
 8008abe:	0109      	lsls	r1, r1, #4
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4910      	ldr	r1, [pc, #64]	@ (8008b10 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008ad0:	400a      	ands	r2, r1
 8008ad2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	021a      	lsls	r2, r3, #8
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008ae8:	e004      	b.n	8008af4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8008aea:	2317      	movs	r3, #23
 8008aec:	18fb      	adds	r3, r7, r3
 8008aee:	2201      	movs	r2, #1
 8008af0:	701a      	strb	r2, [r3, #0]
      break;
 8008af2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	223c      	movs	r2, #60	@ 0x3c
 8008af8:	2100      	movs	r1, #0
 8008afa:	5499      	strb	r1, [r3, r2]

  return status;
 8008afc:	2317      	movs	r3, #23
 8008afe:	18fb      	adds	r3, r7, r3
 8008b00:	781b      	ldrb	r3, [r3, #0]
}
 8008b02:	0018      	movs	r0, r3
 8008b04:	46bd      	mov	sp, r7
 8008b06:	b006      	add	sp, #24
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	46c0      	nop			@ (mov r8, r8)
 8008b0c:	08009400 	.word	0x08009400
 8008b10:	fffffbff 	.word	0xfffffbff

08008b14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b1c:	46c0      	nop			@ (mov r8, r8)
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	b002      	add	sp, #8
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b2c:	46c0      	nop			@ (mov r8, r8)
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	b002      	add	sp, #8
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b3c:	46c0      	nop			@ (mov r8, r8)
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	b002      	add	sp, #8
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b4c:	46c0      	nop			@ (mov r8, r8)
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	b002      	add	sp, #8
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a37      	ldr	r2, [pc, #220]	@ (8008c44 <TIM_Base_SetConfig+0xf0>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d008      	beq.n	8008b7e <TIM_Base_SetConfig+0x2a>
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	2380      	movs	r3, #128	@ 0x80
 8008b70:	05db      	lsls	r3, r3, #23
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d003      	beq.n	8008b7e <TIM_Base_SetConfig+0x2a>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a33      	ldr	r2, [pc, #204]	@ (8008c48 <TIM_Base_SetConfig+0xf4>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d108      	bne.n	8008b90 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2270      	movs	r2, #112	@ 0x70
 8008b82:	4393      	bics	r3, r2
 8008b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a2c      	ldr	r2, [pc, #176]	@ (8008c44 <TIM_Base_SetConfig+0xf0>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d014      	beq.n	8008bc2 <TIM_Base_SetConfig+0x6e>
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	2380      	movs	r3, #128	@ 0x80
 8008b9c:	05db      	lsls	r3, r3, #23
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d00f      	beq.n	8008bc2 <TIM_Base_SetConfig+0x6e>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a28      	ldr	r2, [pc, #160]	@ (8008c48 <TIM_Base_SetConfig+0xf4>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d00b      	beq.n	8008bc2 <TIM_Base_SetConfig+0x6e>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a27      	ldr	r2, [pc, #156]	@ (8008c4c <TIM_Base_SetConfig+0xf8>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d007      	beq.n	8008bc2 <TIM_Base_SetConfig+0x6e>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a26      	ldr	r2, [pc, #152]	@ (8008c50 <TIM_Base_SetConfig+0xfc>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d003      	beq.n	8008bc2 <TIM_Base_SetConfig+0x6e>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a25      	ldr	r2, [pc, #148]	@ (8008c54 <TIM_Base_SetConfig+0x100>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d108      	bne.n	8008bd4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	4a24      	ldr	r2, [pc, #144]	@ (8008c58 <TIM_Base_SetConfig+0x104>)
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2280      	movs	r2, #128	@ 0x80
 8008bd8:	4393      	bics	r3, r2
 8008bda:	001a      	movs	r2, r3
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	695b      	ldr	r3, [r3, #20]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	689a      	ldr	r2, [r3, #8]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a11      	ldr	r2, [pc, #68]	@ (8008c44 <TIM_Base_SetConfig+0xf0>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d007      	beq.n	8008c12 <TIM_Base_SetConfig+0xbe>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a12      	ldr	r2, [pc, #72]	@ (8008c50 <TIM_Base_SetConfig+0xfc>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d003      	beq.n	8008c12 <TIM_Base_SetConfig+0xbe>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a11      	ldr	r2, [pc, #68]	@ (8008c54 <TIM_Base_SetConfig+0x100>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d103      	bne.n	8008c1a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	691a      	ldr	r2, [r3, #16]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	2201      	movs	r2, #1
 8008c26:	4013      	ands	r3, r2
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d106      	bne.n	8008c3a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	2201      	movs	r2, #1
 8008c32:	4393      	bics	r3, r2
 8008c34:	001a      	movs	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	611a      	str	r2, [r3, #16]
  }
}
 8008c3a:	46c0      	nop			@ (mov r8, r8)
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	b004      	add	sp, #16
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	46c0      	nop			@ (mov r8, r8)
 8008c44:	40012c00 	.word	0x40012c00
 8008c48:	40000400 	.word	0x40000400
 8008c4c:	40002000 	.word	0x40002000
 8008c50:	40014400 	.word	0x40014400
 8008c54:	40014800 	.word	0x40014800
 8008c58:	fffffcff 	.word	0xfffffcff

08008c5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a1b      	ldr	r3, [r3, #32]
 8008c70:	2201      	movs	r2, #1
 8008c72:	4393      	bics	r3, r2
 8008c74:	001a      	movs	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4a2e      	ldr	r2, [pc, #184]	@ (8008d44 <TIM_OC1_SetConfig+0xe8>)
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2203      	movs	r2, #3
 8008c92:	4393      	bics	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	4393      	bics	r3, r2
 8008ca6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a24      	ldr	r2, [pc, #144]	@ (8008d48 <TIM_OC1_SetConfig+0xec>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d007      	beq.n	8008cca <TIM_OC1_SetConfig+0x6e>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a23      	ldr	r2, [pc, #140]	@ (8008d4c <TIM_OC1_SetConfig+0xf0>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d003      	beq.n	8008cca <TIM_OC1_SetConfig+0x6e>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a22      	ldr	r2, [pc, #136]	@ (8008d50 <TIM_OC1_SetConfig+0xf4>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d10c      	bne.n	8008ce4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	2208      	movs	r2, #8
 8008cce:	4393      	bics	r3, r2
 8008cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	2204      	movs	r2, #4
 8008ce0:	4393      	bics	r3, r2
 8008ce2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a18      	ldr	r2, [pc, #96]	@ (8008d48 <TIM_OC1_SetConfig+0xec>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d007      	beq.n	8008cfc <TIM_OC1_SetConfig+0xa0>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a17      	ldr	r2, [pc, #92]	@ (8008d4c <TIM_OC1_SetConfig+0xf0>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d003      	beq.n	8008cfc <TIM_OC1_SetConfig+0xa0>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a16      	ldr	r2, [pc, #88]	@ (8008d50 <TIM_OC1_SetConfig+0xf4>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d111      	bne.n	8008d20 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	4a15      	ldr	r2, [pc, #84]	@ (8008d54 <TIM_OC1_SetConfig+0xf8>)
 8008d00:	4013      	ands	r3, r2
 8008d02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	4a14      	ldr	r2, [pc, #80]	@ (8008d58 <TIM_OC1_SetConfig+0xfc>)
 8008d08:	4013      	ands	r3, r2
 8008d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	695b      	ldr	r3, [r3, #20]
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	685a      	ldr	r2, [r3, #4]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	621a      	str	r2, [r3, #32]
}
 8008d3a:	46c0      	nop			@ (mov r8, r8)
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	b006      	add	sp, #24
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	46c0      	nop			@ (mov r8, r8)
 8008d44:	fffeff8f 	.word	0xfffeff8f
 8008d48:	40012c00 	.word	0x40012c00
 8008d4c:	40014400 	.word	0x40014400
 8008d50:	40014800 	.word	0x40014800
 8008d54:	fffffeff 	.word	0xfffffeff
 8008d58:	fffffdff 	.word	0xfffffdff

08008d5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a1b      	ldr	r3, [r3, #32]
 8008d70:	2210      	movs	r2, #16
 8008d72:	4393      	bics	r3, r2
 8008d74:	001a      	movs	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	4a2c      	ldr	r2, [pc, #176]	@ (8008e3c <TIM_OC2_SetConfig+0xe0>)
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	4a2b      	ldr	r2, [pc, #172]	@ (8008e40 <TIM_OC2_SetConfig+0xe4>)
 8008d92:	4013      	ands	r3, r2
 8008d94:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	021b      	lsls	r3, r3, #8
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	2220      	movs	r2, #32
 8008da6:	4393      	bics	r3, r2
 8008da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	011b      	lsls	r3, r3, #4
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a22      	ldr	r2, [pc, #136]	@ (8008e44 <TIM_OC2_SetConfig+0xe8>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d10d      	bne.n	8008dda <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	2280      	movs	r2, #128	@ 0x80
 8008dc2:	4393      	bics	r3, r2
 8008dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	011b      	lsls	r3, r3, #4
 8008dcc:	697a      	ldr	r2, [r7, #20]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	2240      	movs	r2, #64	@ 0x40
 8008dd6:	4393      	bics	r3, r2
 8008dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a19      	ldr	r2, [pc, #100]	@ (8008e44 <TIM_OC2_SetConfig+0xe8>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d007      	beq.n	8008df2 <TIM_OC2_SetConfig+0x96>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a18      	ldr	r2, [pc, #96]	@ (8008e48 <TIM_OC2_SetConfig+0xec>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d003      	beq.n	8008df2 <TIM_OC2_SetConfig+0x96>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a17      	ldr	r2, [pc, #92]	@ (8008e4c <TIM_OC2_SetConfig+0xf0>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d113      	bne.n	8008e1a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	4a16      	ldr	r2, [pc, #88]	@ (8008e50 <TIM_OC2_SetConfig+0xf4>)
 8008df6:	4013      	ands	r3, r2
 8008df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	4a15      	ldr	r2, [pc, #84]	@ (8008e54 <TIM_OC2_SetConfig+0xf8>)
 8008dfe:	4013      	ands	r3, r2
 8008e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	695b      	ldr	r3, [r3, #20]
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	693a      	ldr	r2, [r7, #16]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	685a      	ldr	r2, [r3, #4]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	621a      	str	r2, [r3, #32]
}
 8008e34:	46c0      	nop			@ (mov r8, r8)
 8008e36:	46bd      	mov	sp, r7
 8008e38:	b006      	add	sp, #24
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	feff8fff 	.word	0xfeff8fff
 8008e40:	fffffcff 	.word	0xfffffcff
 8008e44:	40012c00 	.word	0x40012c00
 8008e48:	40014400 	.word	0x40014400
 8008e4c:	40014800 	.word	0x40014800
 8008e50:	fffffbff 	.word	0xfffffbff
 8008e54:	fffff7ff 	.word	0xfffff7ff

08008e58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a1b      	ldr	r3, [r3, #32]
 8008e6c:	4a31      	ldr	r2, [pc, #196]	@ (8008f34 <TIM_OC3_SetConfig+0xdc>)
 8008e6e:	401a      	ands	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4a2d      	ldr	r2, [pc, #180]	@ (8008f38 <TIM_OC3_SetConfig+0xe0>)
 8008e84:	4013      	ands	r3, r2
 8008e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2203      	movs	r2, #3
 8008e8c:	4393      	bics	r3, r2
 8008e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	4a27      	ldr	r2, [pc, #156]	@ (8008f3c <TIM_OC3_SetConfig+0xe4>)
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	021b      	lsls	r3, r3, #8
 8008ea8:	697a      	ldr	r2, [r7, #20]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a23      	ldr	r2, [pc, #140]	@ (8008f40 <TIM_OC3_SetConfig+0xe8>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d10d      	bne.n	8008ed2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	4a22      	ldr	r2, [pc, #136]	@ (8008f44 <TIM_OC3_SetConfig+0xec>)
 8008eba:	4013      	ands	r3, r2
 8008ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	021b      	lsls	r3, r3, #8
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8008f48 <TIM_OC3_SetConfig+0xf0>)
 8008ece:	4013      	ands	r3, r2
 8008ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8008f40 <TIM_OC3_SetConfig+0xe8>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d007      	beq.n	8008eea <TIM_OC3_SetConfig+0x92>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a1b      	ldr	r2, [pc, #108]	@ (8008f4c <TIM_OC3_SetConfig+0xf4>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d003      	beq.n	8008eea <TIM_OC3_SetConfig+0x92>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a1a      	ldr	r2, [pc, #104]	@ (8008f50 <TIM_OC3_SetConfig+0xf8>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d113      	bne.n	8008f12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	4a19      	ldr	r2, [pc, #100]	@ (8008f54 <TIM_OC3_SetConfig+0xfc>)
 8008eee:	4013      	ands	r3, r2
 8008ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	4a18      	ldr	r2, [pc, #96]	@ (8008f58 <TIM_OC3_SetConfig+0x100>)
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	011b      	lsls	r3, r3, #4
 8008f00:	693a      	ldr	r2, [r7, #16]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	011b      	lsls	r3, r3, #4
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	697a      	ldr	r2, [r7, #20]
 8008f2a:	621a      	str	r2, [r3, #32]
}
 8008f2c:	46c0      	nop			@ (mov r8, r8)
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	b006      	add	sp, #24
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	fffffeff 	.word	0xfffffeff
 8008f38:	fffeff8f 	.word	0xfffeff8f
 8008f3c:	fffffdff 	.word	0xfffffdff
 8008f40:	40012c00 	.word	0x40012c00
 8008f44:	fffff7ff 	.word	0xfffff7ff
 8008f48:	fffffbff 	.word	0xfffffbff
 8008f4c:	40014400 	.word	0x40014400
 8008f50:	40014800 	.word	0x40014800
 8008f54:	ffffefff 	.word	0xffffefff
 8008f58:	ffffdfff 	.word	0xffffdfff

08008f5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	4a24      	ldr	r2, [pc, #144]	@ (8009004 <TIM_OC4_SetConfig+0xa8>)
 8008f72:	401a      	ands	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	4a20      	ldr	r2, [pc, #128]	@ (8009008 <TIM_OC4_SetConfig+0xac>)
 8008f88:	4013      	ands	r3, r2
 8008f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800900c <TIM_OC4_SetConfig+0xb0>)
 8008f90:	4013      	ands	r3, r2
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	021b      	lsls	r3, r3, #8
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8009010 <TIM_OC4_SetConfig+0xb4>)
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	031b      	lsls	r3, r3, #12
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a17      	ldr	r2, [pc, #92]	@ (8009014 <TIM_OC4_SetConfig+0xb8>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d007      	beq.n	8008fcc <TIM_OC4_SetConfig+0x70>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a16      	ldr	r2, [pc, #88]	@ (8009018 <TIM_OC4_SetConfig+0xbc>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d003      	beq.n	8008fcc <TIM_OC4_SetConfig+0x70>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a15      	ldr	r2, [pc, #84]	@ (800901c <TIM_OC4_SetConfig+0xc0>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d109      	bne.n	8008fe0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	4a14      	ldr	r2, [pc, #80]	@ (8009020 <TIM_OC4_SetConfig+0xc4>)
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	695b      	ldr	r3, [r3, #20]
 8008fd8:	019b      	lsls	r3, r3, #6
 8008fda:	697a      	ldr	r2, [r7, #20]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	621a      	str	r2, [r3, #32]
}
 8008ffa:	46c0      	nop			@ (mov r8, r8)
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	b006      	add	sp, #24
 8009000:	bd80      	pop	{r7, pc}
 8009002:	46c0      	nop			@ (mov r8, r8)
 8009004:	ffffefff 	.word	0xffffefff
 8009008:	feff8fff 	.word	0xfeff8fff
 800900c:	fffffcff 	.word	0xfffffcff
 8009010:	ffffdfff 	.word	0xffffdfff
 8009014:	40012c00 	.word	0x40012c00
 8009018:	40014400 	.word	0x40014400
 800901c:	40014800 	.word	0x40014800
 8009020:	ffffbfff 	.word	0xffffbfff

08009024 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a1b      	ldr	r3, [r3, #32]
 8009038:	4a21      	ldr	r2, [pc, #132]	@ (80090c0 <TIM_OC5_SetConfig+0x9c>)
 800903a:	401a      	ands	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800904a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4a1d      	ldr	r2, [pc, #116]	@ (80090c4 <TIM_OC5_SetConfig+0xa0>)
 8009050:	4013      	ands	r3, r2
 8009052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	4313      	orrs	r3, r2
 800905c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	4a19      	ldr	r2, [pc, #100]	@ (80090c8 <TIM_OC5_SetConfig+0xa4>)
 8009062:	4013      	ands	r3, r2
 8009064:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	041b      	lsls	r3, r3, #16
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	4313      	orrs	r3, r2
 8009070:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a15      	ldr	r2, [pc, #84]	@ (80090cc <TIM_OC5_SetConfig+0xa8>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d007      	beq.n	800908a <TIM_OC5_SetConfig+0x66>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a14      	ldr	r2, [pc, #80]	@ (80090d0 <TIM_OC5_SetConfig+0xac>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d003      	beq.n	800908a <TIM_OC5_SetConfig+0x66>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a13      	ldr	r2, [pc, #76]	@ (80090d4 <TIM_OC5_SetConfig+0xb0>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d109      	bne.n	800909e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	4a0c      	ldr	r2, [pc, #48]	@ (80090c0 <TIM_OC5_SetConfig+0x9c>)
 800908e:	4013      	ands	r3, r2
 8009090:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	021b      	lsls	r3, r3, #8
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	4313      	orrs	r3, r2
 800909c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	621a      	str	r2, [r3, #32]
}
 80090b8:	46c0      	nop			@ (mov r8, r8)
 80090ba:	46bd      	mov	sp, r7
 80090bc:	b006      	add	sp, #24
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	fffeffff 	.word	0xfffeffff
 80090c4:	fffeff8f 	.word	0xfffeff8f
 80090c8:	fffdffff 	.word	0xfffdffff
 80090cc:	40012c00 	.word	0x40012c00
 80090d0:	40014400 	.word	0x40014400
 80090d4:	40014800 	.word	0x40014800

080090d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a1b      	ldr	r3, [r3, #32]
 80090e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a1b      	ldr	r3, [r3, #32]
 80090ec:	4a22      	ldr	r2, [pc, #136]	@ (8009178 <TIM_OC6_SetConfig+0xa0>)
 80090ee:	401a      	ands	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	4a1e      	ldr	r2, [pc, #120]	@ (800917c <TIM_OC6_SetConfig+0xa4>)
 8009104:	4013      	ands	r3, r2
 8009106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	021b      	lsls	r3, r3, #8
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	4313      	orrs	r3, r2
 8009112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	4a1a      	ldr	r2, [pc, #104]	@ (8009180 <TIM_OC6_SetConfig+0xa8>)
 8009118:	4013      	ands	r3, r2
 800911a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	051b      	lsls	r3, r3, #20
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	4313      	orrs	r3, r2
 8009126:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a16      	ldr	r2, [pc, #88]	@ (8009184 <TIM_OC6_SetConfig+0xac>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d007      	beq.n	8009140 <TIM_OC6_SetConfig+0x68>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a15      	ldr	r2, [pc, #84]	@ (8009188 <TIM_OC6_SetConfig+0xb0>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d003      	beq.n	8009140 <TIM_OC6_SetConfig+0x68>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a14      	ldr	r2, [pc, #80]	@ (800918c <TIM_OC6_SetConfig+0xb4>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d109      	bne.n	8009154 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	4a13      	ldr	r2, [pc, #76]	@ (8009190 <TIM_OC6_SetConfig+0xb8>)
 8009144:	4013      	ands	r3, r2
 8009146:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	695b      	ldr	r3, [r3, #20]
 800914c:	029b      	lsls	r3, r3, #10
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	4313      	orrs	r3, r2
 8009152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	685a      	ldr	r2, [r3, #4]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	621a      	str	r2, [r3, #32]
}
 800916e:	46c0      	nop			@ (mov r8, r8)
 8009170:	46bd      	mov	sp, r7
 8009172:	b006      	add	sp, #24
 8009174:	bd80      	pop	{r7, pc}
 8009176:	46c0      	nop			@ (mov r8, r8)
 8009178:	ffefffff 	.word	0xffefffff
 800917c:	feff8fff 	.word	0xfeff8fff
 8009180:	ffdfffff 	.word	0xffdfffff
 8009184:	40012c00 	.word	0x40012c00
 8009188:	40014400 	.word	0x40014400
 800918c:	40014800 	.word	0x40014800
 8009190:	fffbffff 	.word	0xfffbffff

08009194 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	221f      	movs	r2, #31
 80091a4:	4013      	ands	r3, r2
 80091a6:	2201      	movs	r2, #1
 80091a8:	409a      	lsls	r2, r3
 80091aa:	0013      	movs	r3, r2
 80091ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	697a      	ldr	r2, [r7, #20]
 80091b4:	43d2      	mvns	r2, r2
 80091b6:	401a      	ands	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6a1a      	ldr	r2, [r3, #32]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	211f      	movs	r1, #31
 80091c4:	400b      	ands	r3, r1
 80091c6:	6879      	ldr	r1, [r7, #4]
 80091c8:	4099      	lsls	r1, r3
 80091ca:	000b      	movs	r3, r1
 80091cc:	431a      	orrs	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	621a      	str	r2, [r3, #32]
}
 80091d2:	46c0      	nop			@ (mov r8, r8)
 80091d4:	46bd      	mov	sp, r7
 80091d6:	b006      	add	sp, #24
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	223c      	movs	r2, #60	@ 0x3c
 80091ea:	5c9b      	ldrb	r3, [r3, r2]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d101      	bne.n	80091f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091f0:	2302      	movs	r3, #2
 80091f2:	e050      	b.n	8009296 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	223c      	movs	r2, #60	@ 0x3c
 80091f8:	2101      	movs	r1, #1
 80091fa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	223d      	movs	r2, #61	@ 0x3d
 8009200:	2102      	movs	r1, #2
 8009202:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a21      	ldr	r2, [pc, #132]	@ (80092a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d108      	bne.n	8009230 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	4a20      	ldr	r2, [pc, #128]	@ (80092a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009222:	4013      	ands	r3, r2
 8009224:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	4313      	orrs	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2270      	movs	r2, #112	@ 0x70
 8009234:	4393      	bics	r3, r2
 8009236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	4313      	orrs	r3, r2
 8009240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a14      	ldr	r2, [pc, #80]	@ (80092a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d00a      	beq.n	800926a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	2380      	movs	r3, #128	@ 0x80
 800925a:	05db      	lsls	r3, r3, #23
 800925c:	429a      	cmp	r2, r3
 800925e:	d004      	beq.n	800926a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a10      	ldr	r2, [pc, #64]	@ (80092a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d10c      	bne.n	8009284 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2280      	movs	r2, #128	@ 0x80
 800926e:	4393      	bics	r3, r2
 8009270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	4313      	orrs	r3, r2
 800927a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68ba      	ldr	r2, [r7, #8]
 8009282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	223d      	movs	r2, #61	@ 0x3d
 8009288:	2101      	movs	r1, #1
 800928a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	223c      	movs	r2, #60	@ 0x3c
 8009290:	2100      	movs	r1, #0
 8009292:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	0018      	movs	r0, r3
 8009298:	46bd      	mov	sp, r7
 800929a:	b004      	add	sp, #16
 800929c:	bd80      	pop	{r7, pc}
 800929e:	46c0      	nop			@ (mov r8, r8)
 80092a0:	40012c00 	.word	0x40012c00
 80092a4:	ff0fffff 	.word	0xff0fffff
 80092a8:	40000400 	.word	0x40000400

080092ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092b4:	46c0      	nop			@ (mov r8, r8)
 80092b6:	46bd      	mov	sp, r7
 80092b8:	b002      	add	sp, #8
 80092ba:	bd80      	pop	{r7, pc}

080092bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092c4:	46c0      	nop			@ (mov r8, r8)
 80092c6:	46bd      	mov	sp, r7
 80092c8:	b002      	add	sp, #8
 80092ca:	bd80      	pop	{r7, pc}

080092cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80092d4:	46c0      	nop			@ (mov r8, r8)
 80092d6:	46bd      	mov	sp, r7
 80092d8:	b002      	add	sp, #8
 80092da:	bd80      	pop	{r7, pc}

080092dc <memset>:
 80092dc:	0003      	movs	r3, r0
 80092de:	1882      	adds	r2, r0, r2
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d100      	bne.n	80092e6 <memset+0xa>
 80092e4:	4770      	bx	lr
 80092e6:	7019      	strb	r1, [r3, #0]
 80092e8:	3301      	adds	r3, #1
 80092ea:	e7f9      	b.n	80092e0 <memset+0x4>

080092ec <__libc_init_array>:
 80092ec:	b570      	push	{r4, r5, r6, lr}
 80092ee:	2600      	movs	r6, #0
 80092f0:	4c0c      	ldr	r4, [pc, #48]	@ (8009324 <__libc_init_array+0x38>)
 80092f2:	4d0d      	ldr	r5, [pc, #52]	@ (8009328 <__libc_init_array+0x3c>)
 80092f4:	1b64      	subs	r4, r4, r5
 80092f6:	10a4      	asrs	r4, r4, #2
 80092f8:	42a6      	cmp	r6, r4
 80092fa:	d109      	bne.n	8009310 <__libc_init_array+0x24>
 80092fc:	2600      	movs	r6, #0
 80092fe:	f000 f823 	bl	8009348 <_init>
 8009302:	4c0a      	ldr	r4, [pc, #40]	@ (800932c <__libc_init_array+0x40>)
 8009304:	4d0a      	ldr	r5, [pc, #40]	@ (8009330 <__libc_init_array+0x44>)
 8009306:	1b64      	subs	r4, r4, r5
 8009308:	10a4      	asrs	r4, r4, #2
 800930a:	42a6      	cmp	r6, r4
 800930c:	d105      	bne.n	800931a <__libc_init_array+0x2e>
 800930e:	bd70      	pop	{r4, r5, r6, pc}
 8009310:	00b3      	lsls	r3, r6, #2
 8009312:	58eb      	ldr	r3, [r5, r3]
 8009314:	4798      	blx	r3
 8009316:	3601      	adds	r6, #1
 8009318:	e7ee      	b.n	80092f8 <__libc_init_array+0xc>
 800931a:	00b3      	lsls	r3, r6, #2
 800931c:	58eb      	ldr	r3, [r5, r3]
 800931e:	4798      	blx	r3
 8009320:	3601      	adds	r6, #1
 8009322:	e7f2      	b.n	800930a <__libc_init_array+0x1e>
 8009324:	08009454 	.word	0x08009454
 8009328:	08009454 	.word	0x08009454
 800932c:	08009458 	.word	0x08009458
 8009330:	08009454 	.word	0x08009454

08009334 <memcpy>:
 8009334:	2300      	movs	r3, #0
 8009336:	b510      	push	{r4, lr}
 8009338:	429a      	cmp	r2, r3
 800933a:	d100      	bne.n	800933e <memcpy+0xa>
 800933c:	bd10      	pop	{r4, pc}
 800933e:	5ccc      	ldrb	r4, [r1, r3]
 8009340:	54c4      	strb	r4, [r0, r3]
 8009342:	3301      	adds	r3, #1
 8009344:	e7f8      	b.n	8009338 <memcpy+0x4>
	...

08009348 <_init>:
 8009348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934a:	46c0      	nop			@ (mov r8, r8)
 800934c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800934e:	bc08      	pop	{r3}
 8009350:	469e      	mov	lr, r3
 8009352:	4770      	bx	lr

08009354 <_fini>:
 8009354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009356:	46c0      	nop			@ (mov r8, r8)
 8009358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800935a:	bc08      	pop	{r3}
 800935c:	469e      	mov	lr, r3
 800935e:	4770      	bx	lr
