
Beethoven-clock_master_64KB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d24  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08008de0  08008de0  00009de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ed4  08008ed4  0000a09c  2**0
                  CONTENTS
  4 .ARM          00000000  08008ed4  08008ed4  0000a09c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ed4  08008ed4  0000a09c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ed4  08008ed4  00009ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ed8  08008ed8  00009ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08008edc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  2000009c  08008f78  0000a09c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  08008f78  0000a6b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f97  00000000  00000000  0000a0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036bd  00000000  00000000  0002205b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  00025718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c9  00000000  00000000  00026de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194e7  00000000  00000000  00027fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c56a  00000000  00000000  00041498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c65d  00000000  00000000  0005da02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa05f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052f0  00000000  00000000  000fa0a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000ff394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000009c 	.word	0x2000009c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008dc8 	.word	0x08008dc8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a0 	.word	0x200000a0
 8000100:	08008dc8 	.word	0x08008dc8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-low hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2200      	movs	r2, #0
 800025a:	0019      	movs	r1, r3
 800025c:	f003 fe89 	bl	8003f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2201      	movs	r2, #1
 800026c:	0019      	movs	r1, r3
 800026e:	f003 fe80 	bl	8003f72 <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f007 fda6 	bl	8007dc8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f007 fd55 	bl	8007d30 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f003 fe93 	bl	8004184 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f003 ffa7 	bl	80043d8 <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	08008de0 	.word	0x08008de0

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f003 fe55 	bl	8004184 <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f003 fe2f 	bl	8004184 <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f003 ff43 	bl	80043d8 <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	08008de4 	.word	0x08008de4

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f003 fdeb 	bl	8004184 <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f003 feff 	bl	80043d8 <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	08008de8 	.word	0x08008de8

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f003 fd9b 	bl	8004184 <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f003 feaf 	bl	80043d8 <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	08008dec 	.word	0x08008dec
 8000700:	08008df4 	.word	0x08008df4

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f003 fd19 	bl	8004184 <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f003 fe2d 	bl	80043d8 <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f003 fcba 	bl	8004184 <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f003 fc99 	bl	8004184 <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f003 fdad 	bl	80043d8 <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	08008dec 	.word	0x08008dec
 8000894:	08008df4 	.word	0x08008df4

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f003 fc3f 	bl	8004184 <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f003 fc1d 	bl	8004184 <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f003 fd3a 	bl	80043d8 <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	08008dfc 	.word	0x08008dfc
 8000978:	08008dec 	.word	0x08008dec

0800097c <NAU9315YG_Init>:

#ifndef NAU8315YG_H_
#include "../Inc/NAU8315YG.h"
#endif

void NAU9315YG_Init(NAU8315YG *nau, I2S_HandleTypeDef *hi2s, GPIO_TypeDef *enablePort, uint32_t enablePin) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	603b      	str	r3, [r7, #0]

	nau->hi2s = hi2s;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	601a      	str	r2, [r3, #0]

	nau->enablePort = enablePort;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	605a      	str	r2, [r3, #4]
	nau->enablePin = enablePin;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	609a      	str	r2, [r3, #8]

	NAU8315YG_AmpDisable(nau);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f804 	bl	80009ac <NAU8315YG_AmpDisable>

}
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b004      	add	sp, #16
 80009aa:	bd80      	pop	{r7, pc}

080009ac <NAU8315YG_AmpDisable>:
	nau->ampEnableFlag = 1;

}


void NAU8315YG_AmpDisable(NAU8315YG *nau) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

	// Set enable pin high
	HAL_GPIO_WritePin(nau->enablePort, nau->enablePin, GPIO_PIN_RESET);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6858      	ldr	r0, [r3, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	2200      	movs	r2, #0
 80009c0:	0019      	movs	r1, r3
 80009c2:	f003 fad6 	bl	8003f72 <HAL_GPIO_WritePin>

	nau->ampEnableFlag = 0;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2200      	movs	r2, #0
 80009ca:	731a      	strb	r2, [r3, #12]

}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <W25Q_Init>:
#endif


uint8_t W25Q_Init(W25Q *wq, GPIO_TypeDef *nCSPort, GPIO_TypeDef *nWPPort, GPIO_TypeDef *nHOLDPort,
					uint32_t nCSPin, uint32_t nWPPin, uint32_t nHOLDPin, SPI_HandleTypeDef *hspi,
					uint8_t devID, uint8_t isQuadChip, uint8_t driveStrength) {
 80009d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d6:	b087      	sub	sp, #28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
 80009e0:	603b      	str	r3, [r7, #0]

	// Map struct GPIO Ports & Pins to passed parameters
	wq->nCSPort = nCSPort;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	68ba      	ldr	r2, [r7, #8]
 80009e6:	601a      	str	r2, [r3, #0]
	wq->nWPPort = nWPPort;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	605a      	str	r2, [r3, #4]
	wq->nHOLDPort = nHOLDPort;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	609a      	str	r2, [r3, #8]

	wq->nCSPin = nCSPin;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80009f8:	60da      	str	r2, [r3, #12]
	wq->nWPPin = nWPPin;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80009fe:	611a      	str	r2, [r3, #16]
	wq->nHOLDPin = nHOLDPin;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a04:	615a      	str	r2, [r3, #20]

	wq->hspi = hspi;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a0a:	619a      	str	r2, [r3, #24]

	wq->quadEnable = isQuadChip;		// Default state depends on PN of chip.
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	223c      	movs	r2, #60	@ 0x3c
 8000a10:	2108      	movs	r1, #8
 8000a12:	1852      	adds	r2, r2, r1
 8000a14:	19d2      	adds	r2, r2, r7
 8000a16:	2125      	movs	r1, #37	@ 0x25
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	545a      	strb	r2, [r3, r1]
	wq->writeEnable = 0;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2223      	movs	r2, #35	@ 0x23
 8000a20:	2100      	movs	r1, #0
 8000a22:	5499      	strb	r1, [r3, r2]

	// Set CS pin high
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	6818      	ldr	r0, [r3, #0]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	2201      	movs	r2, #1
 8000a30:	0019      	movs	r1, r3
 8000a32:	f003 fa9e 	bl	8003f72 <HAL_GPIO_WritePin>

	// Set hold pin high (Disable)
	HAL_GPIO_WritePin(wq->nHOLDPort, wq->nHOLDPin, GPIO_PIN_SET);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	6898      	ldr	r0, [r3, #8]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	2201      	movs	r2, #1
 8000a42:	0019      	movs	r1, r3
 8000a44:	f003 fa95 	bl	8003f72 <HAL_GPIO_WritePin>

	// Set WP pin high (disable)
	HAL_GPIO_WritePin(wq->nWPPort, wq->nWPPin, GPIO_PIN_SET);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	6858      	ldr	r0, [r3, #4]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	691b      	ldr	r3, [r3, #16]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	2201      	movs	r2, #1
 8000a54:	0019      	movs	r1, r3
 8000a56:	f003 fa8c 	bl	8003f72 <HAL_GPIO_WritePin>

	// HAL status handle used to indicate error messages
	HAL_StatusTypeDef halRet = HAL_OK;
 8000a5a:	2116      	movs	r1, #22
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2200      	movs	r2, #0
 8000a60:	701a      	strb	r2, [r3, #0]

	uint8_t returnInc = 1;			// Integer error code return, incremented after successful things.
 8000a62:	2617      	movs	r6, #23
 8000a64:	19bb      	adds	r3, r7, r6
 8000a66:	2201      	movs	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]

	uint8_t errorsEnabled = 1;		// Use for debugging
 8000a6a:	2315      	movs	r3, #21
 8000a6c:	18fb      	adds	r3, r7, r3
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]

	// Release from power down mode
	halRet = W25Q_ReleasePowerDown(wq);
 8000a72:	000d      	movs	r5, r1
 8000a74:	187c      	adds	r4, r7, r1
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 f8ea 	bl	8000c52 <W25Q_ReleasePowerDown>
 8000a7e:	0003      	movs	r3, r0
 8000a80:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000a82:	197b      	adds	r3, r7, r5
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d007      	beq.n	8000a9a <W25Q_Init+0xc6>
 8000a8a:	2315      	movs	r3, #21
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <W25Q_Init+0xc6>
		return returnInc;
 8000a94:	19bb      	adds	r3, r7, r6
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	e0d7      	b.n	8000c4a <W25Q_Init+0x276>
	else
		returnInc++;
 8000a9a:	2517      	movs	r5, #23
 8000a9c:	197b      	adds	r3, r7, r5
 8000a9e:	781a      	ldrb	r2, [r3, #0]
 8000aa0:	197b      	adds	r3, r7, r5
 8000aa2:	3201      	adds	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]

	// Reset Device
	halRet = W25Q_ChipReset(wq);
 8000aa6:	2616      	movs	r6, #22
 8000aa8:	19bc      	adds	r4, r7, r6
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	0018      	movs	r0, r3
 8000aae:	f000 fc45 	bl	800133c <W25Q_ChipReset>
 8000ab2:	0003      	movs	r3, r0
 8000ab4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000ab6:	19bb      	adds	r3, r7, r6
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d007      	beq.n	8000ace <W25Q_Init+0xfa>
 8000abe:	2315      	movs	r3, #21
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d002      	beq.n	8000ace <W25Q_Init+0xfa>
		return returnInc;
 8000ac8:	197b      	adds	r3, r7, r5
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	e0bd      	b.n	8000c4a <W25Q_Init+0x276>
	else
		returnInc++;
 8000ace:	2517      	movs	r5, #23
 8000ad0:	197b      	adds	r3, r7, r5
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	197b      	adds	r3, r7, r5
 8000ad6:	3201      	adds	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]

	// Read initial Status Registers
	halRet = W25Q_ReadStatusRegs(wq);
 8000ada:	2616      	movs	r6, #22
 8000adc:	19bc      	adds	r4, r7, r6
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 faef 	bl	80010c4 <W25Q_ReadStatusRegs>
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000aea:	19bb      	adds	r3, r7, r6
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d007      	beq.n	8000b02 <W25Q_Init+0x12e>
 8000af2:	2315      	movs	r3, #21
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d002      	beq.n	8000b02 <W25Q_Init+0x12e>
		return returnInc;
 8000afc:	197b      	adds	r3, r7, r5
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	e0a3      	b.n	8000c4a <W25Q_Init+0x276>
	else
		returnInc++;
 8000b02:	2517      	movs	r5, #23
 8000b04:	197b      	adds	r3, r7, r5
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	197b      	adds	r3, r7, r5
 8000b0a:	3201      	adds	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]

	// Increase driver strength?
	halRet = W25Q_SetDriverStrength(wq, driveStrength);
 8000b0e:	2616      	movs	r6, #22
 8000b10:	19bc      	adds	r4, r7, r6
 8000b12:	2340      	movs	r3, #64	@ 0x40
 8000b14:	2208      	movs	r2, #8
 8000b16:	189b      	adds	r3, r3, r2
 8000b18:	19db      	adds	r3, r3, r7
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	0011      	movs	r1, r2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f000 fc75 	bl	8001410 <W25Q_SetDriverStrength>
 8000b26:	0003      	movs	r3, r0
 8000b28:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b2a:	19bb      	adds	r3, r7, r6
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d007      	beq.n	8000b42 <W25Q_Init+0x16e>
 8000b32:	2315      	movs	r3, #21
 8000b34:	18fb      	adds	r3, r7, r3
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <W25Q_Init+0x16e>
		return returnInc;
 8000b3c:	197b      	adds	r3, r7, r5
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	e083      	b.n	8000c4a <W25Q_Init+0x276>
	else
		returnInc++;
 8000b42:	2517      	movs	r5, #23
 8000b44:	197b      	adds	r3, r7, r5
 8000b46:	781a      	ldrb	r2, [r3, #0]
 8000b48:	197b      	adds	r3, r7, r5
 8000b4a:	3201      	adds	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
//			returnInc++;
//	}


	// Get + Store IDs
	halRet = W25Q_GetIDs(wq, devID);
 8000b4e:	2616      	movs	r6, #22
 8000b50:	19bc      	adds	r4, r7, r6
 8000b52:	2338      	movs	r3, #56	@ 0x38
 8000b54:	2208      	movs	r2, #8
 8000b56:	189b      	adds	r3, r3, r2
 8000b58:	19db      	adds	r3, r3, r7
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 f8bb 	bl	8000cdc <W25Q_GetIDs>
 8000b66:	0003      	movs	r3, r0
 8000b68:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b6a:	19bb      	adds	r3, r7, r6
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d007      	beq.n	8000b82 <W25Q_Init+0x1ae>
 8000b72:	2315      	movs	r3, #21
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <W25Q_Init+0x1ae>
		return returnInc;
 8000b7c:	197b      	adds	r3, r7, r5
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	e063      	b.n	8000c4a <W25Q_Init+0x276>
	else
		returnInc++;
 8000b82:	2517      	movs	r5, #23
 8000b84:	197b      	adds	r3, r7, r5
 8000b86:	781a      	ldrb	r2, [r3, #0]
 8000b88:	197b      	adds	r3, r7, r5
 8000b8a:	3201      	adds	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]

	// Get + Store Status Register Contents
	halRet = W25Q_ReadStatusRegs(wq);
 8000b8e:	2616      	movs	r6, #22
 8000b90:	19bc      	adds	r4, r7, r6
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	0018      	movs	r0, r3
 8000b96:	f000 fa95 	bl	80010c4 <W25Q_ReadStatusRegs>
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b9e:	19bb      	adds	r3, r7, r6
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d007      	beq.n	8000bb6 <W25Q_Init+0x1e2>
 8000ba6:	2315      	movs	r3, #21
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d002      	beq.n	8000bb6 <W25Q_Init+0x1e2>
		return returnInc;
 8000bb0:	197b      	adds	r3, r7, r5
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	e049      	b.n	8000c4a <W25Q_Init+0x276>
	else
		returnInc++;
 8000bb6:	2517      	movs	r5, #23
 8000bb8:	197b      	adds	r3, r7, r5
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	197b      	adds	r3, r7, r5
 8000bbe:	3201      	adds	r2, #1
 8000bc0:	701a      	strb	r2, [r3, #0]

	// Disable Write Access to Memory
	if(wq->writeEnable != 0) {
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2223      	movs	r2, #35	@ 0x23
 8000bc6:	5c9b      	ldrb	r3, [r3, r2]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d019      	beq.n	8000c00 <W25Q_Init+0x22c>
		halRet = W25Q_DisableWrite(wq);
 8000bcc:	2616      	movs	r6, #22
 8000bce:	19bc      	adds	r4, r7, r6
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 f985 	bl	8000ee2 <W25Q_DisableWrite>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK && errorsEnabled)
 8000bdc:	19bb      	adds	r3, r7, r6
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d007      	beq.n	8000bf4 <W25Q_Init+0x220>
 8000be4:	2315      	movs	r3, #21
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <W25Q_Init+0x220>
			return returnInc;
 8000bee:	197b      	adds	r3, r7, r5
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	e02a      	b.n	8000c4a <W25Q_Init+0x276>
		else
			returnInc++;
 8000bf4:	2117      	movs	r1, #23
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	3201      	adds	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
	}

	// Get + Store Status Register Contents
	halRet = W25Q_ReadStatusRegs(wq);
 8000c00:	2516      	movs	r5, #22
 8000c02:	197c      	adds	r4, r7, r5
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 fa5c 	bl	80010c4 <W25Q_ReadStatusRegs>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000c10:	197b      	adds	r3, r7, r5
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d008      	beq.n	8000c2a <W25Q_Init+0x256>
 8000c18:	2315      	movs	r3, #21
 8000c1a:	18fb      	adds	r3, r7, r3
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d003      	beq.n	8000c2a <W25Q_Init+0x256>
		return returnInc;
 8000c22:	2317      	movs	r3, #23
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	e00f      	b.n	8000c4a <W25Q_Init+0x276>
	else
		returnInc++;
 8000c2a:	2117      	movs	r1, #23
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	3201      	adds	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]

	// Set WP pin low (Enable)
	HAL_GPIO_WritePin(wq->nWPPort, wq->nWPPin, GPIO_PIN_RESET);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	6858      	ldr	r0, [r3, #4]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	2200      	movs	r2, #0
 8000c42:	0019      	movs	r1, r3
 8000c44:	f003 f995 	bl	8003f72 <HAL_GPIO_WritePin>

	return 0;
 8000c48:	2300      	movs	r3, #0

}
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b007      	add	sp, #28
 8000c50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c52 <W25Q_ReleasePowerDown>:

HAL_StatusTypeDef W25Q_ReleasePowerDown(W25Q *wq) {
 8000c52:	b590      	push	{r4, r7, lr}
 8000c54:	b085      	sub	sp, #20
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000c5a:	240e      	movs	r4, #14
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]

	// TX release power-down instruction
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6818      	ldr	r0, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	0019      	movs	r1, r3
 8000c70:	f003 f97f 	bl	8003f72 <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_READ_RELEASE_ID}, 1, HAL_MAX_DELAY);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6998      	ldr	r0, [r3, #24]
 8000c78:	210c      	movs	r1, #12
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	22ab      	movs	r2, #171	@ 0xab
 8000c7e:	701a      	strb	r2, [r3, #0]
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	2301      	movs	r3, #1
 8000c84:	425b      	negs	r3, r3
 8000c86:	1879      	adds	r1, r7, r1
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f006 f991 	bl	8006fb0 <HAL_SPI_Transmit>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6818      	ldr	r0, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	f003 f967 	bl	8003f72 <HAL_GPIO_WritePin>

	// Delay for at least 3 us
	for(uint8_t i = 0; i < 15; i++) {
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
 8000cac:	e006      	b.n	8000cbc <W25Q_ReleasePowerDown+0x6a>
		__NOP();
 8000cae:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < 15; i++) {
 8000cb0:	210f      	movs	r1, #15
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	781a      	ldrb	r2, [r3, #0]
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	3201      	adds	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b0e      	cmp	r3, #14
 8000cc4:	d9f3      	bls.n	8000cae <W25Q_ReleasePowerDown+0x5c>
	}

	wq->powerUp = 1; 		// We have now successfully exited power-down state
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2224      	movs	r2, #36	@ 0x24
 8000cca:	2101      	movs	r1, #1
 8000ccc:	5499      	strb	r1, [r3, r2]

	return halRet;
 8000cce:	230e      	movs	r3, #14
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	781b      	ldrb	r3, [r3, #0]

}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b005      	add	sp, #20
 8000cda:	bd90      	pop	{r4, r7, pc}

08000cdc <W25Q_GetIDs>:

HAL_StatusTypeDef W25Q_GetIDs(W25Q *wq, uint8_t devID_passed) {
 8000cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cde:	b089      	sub	sp, #36	@ 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	000a      	movs	r2, r1
 8000ce6:	1cfb      	adds	r3, r7, #3
 8000ce8:	701a      	strb	r2, [r3, #0]


	HAL_StatusTypeDef halRet = HAL_OK;
 8000cea:	241f      	movs	r4, #31
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]

	/*
	 * Release power down + read device ID
	 */
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6818      	ldr	r0, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	0019      	movs	r1, r3
 8000d00:	f003 f937 	bl	8003f72 <HAL_GPIO_WritePin>
		// TX return device ID instruction
		halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[4]){CMD_READ_RELEASE_ID, 0x00, 0x00, 0x00}, 4, HAL_MAX_DELAY);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6998      	ldr	r0, [r3, #24]
 8000d08:	2118      	movs	r1, #24
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	22ab      	movs	r2, #171	@ 0xab
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2200      	movs	r2, #0
 8000d14:	705a      	strb	r2, [r3, #1]
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2200      	movs	r2, #0
 8000d1a:	709a      	strb	r2, [r3, #2]
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	2200      	movs	r2, #0
 8000d20:	70da      	strb	r2, [r3, #3]
 8000d22:	0025      	movs	r5, r4
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	2301      	movs	r3, #1
 8000d28:	425b      	negs	r3, r3
 8000d2a:	1879      	adds	r1, r7, r1
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	f006 f93f 	bl	8006fb0 <HAL_SPI_Transmit>
 8000d32:	0003      	movs	r3, r0
 8000d34:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 8000d36:	197b      	adds	r3, r7, r5
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d00b      	beq.n	8000d56 <W25Q_GetIDs+0x7a>
			HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	2201      	movs	r2, #1
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	f003 f911 	bl	8003f72 <HAL_GPIO_WritePin>
			return halRet;
 8000d50:	197b      	adds	r3, r7, r5
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	e07c      	b.n	8000e50 <W25Q_GetIDs+0x174>
		}

		// RX device ID into struct variable
		uint8_t devIDRet[1] = {0x00};
 8000d56:	2514      	movs	r5, #20
 8000d58:	197b      	adds	r3, r7, r5
 8000d5a:	4a3f      	ldr	r2, [pc, #252]	@ (8000e58 <W25Q_GetIDs+0x17c>)
 8000d5c:	7812      	ldrb	r2, [r2, #0]
 8000d5e:	701a      	strb	r2, [r3, #0]
		halRet = HAL_SPI_Receive(wq->hspi, devIDRet, 1, HAL_MAX_DELAY);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6998      	ldr	r0, [r3, #24]
 8000d64:	261f      	movs	r6, #31
 8000d66:	19bc      	adds	r4, r7, r6
 8000d68:	2301      	movs	r3, #1
 8000d6a:	425b      	negs	r3, r3
 8000d6c:	1979      	adds	r1, r7, r5
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f006 fa7e 	bl	8007270 <HAL_SPI_Receive>
 8000d74:	0003      	movs	r3, r0
 8000d76:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	2201      	movs	r2, #1
 8000d84:	0019      	movs	r1, r3
 8000d86:	f003 f8f4 	bl	8003f72 <HAL_GPIO_WritePin>
		wq->devID = devIDRet[0];
 8000d8a:	197b      	adds	r3, r7, r5
 8000d8c:	781a      	ldrb	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	775a      	strb	r2, [r3, #29]


		 // Check to ensure that received device ID is equal to that passed by the user in the init function
		if((halRet != HAL_OK) || (wq->devID != devID_passed))
 8000d92:	19bb      	adds	r3, r7, r6
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d105      	bne.n	8000da6 <W25Q_GetIDs+0xca>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7f5b      	ldrb	r3, [r3, #29]
 8000d9e:	1cfa      	adds	r2, r7, #3
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d001      	beq.n	8000daa <W25Q_GetIDs+0xce>
			return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e052      	b.n	8000e50 <W25Q_GetIDs+0x174>

	/*
	 * Read and check MFR ID
	 */
		// TX read mfr + device ID command
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	2200      	movs	r2, #0
 8000db6:	0019      	movs	r1, r3
 8000db8:	f003 f8db 	bl	8003f72 <HAL_GPIO_WritePin>
		halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[4]){CMD_READ_MFR_ID, 0x00, 0x00, 0x00}, 4, HAL_MAX_DELAY);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6998      	ldr	r0, [r3, #24]
 8000dc0:	2110      	movs	r1, #16
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2290      	movs	r2, #144	@ 0x90
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2200      	movs	r2, #0
 8000dcc:	705a      	strb	r2, [r3, #1]
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	709a      	strb	r2, [r3, #2]
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	70da      	strb	r2, [r3, #3]
 8000dda:	251f      	movs	r5, #31
 8000ddc:	197c      	adds	r4, r7, r5
 8000dde:	2301      	movs	r3, #1
 8000de0:	425b      	negs	r3, r3
 8000de2:	1879      	adds	r1, r7, r1
 8000de4:	2204      	movs	r2, #4
 8000de6:	f006 f8e3 	bl	8006fb0 <HAL_SPI_Transmit>
 8000dea:	0003      	movs	r3, r0
 8000dec:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000dee:	197b      	adds	r3, r7, r5
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <W25Q_GetIDs+0x120>
			return halRet;
 8000df6:	197b      	adds	r3, r7, r5
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	e029      	b.n	8000e50 <W25Q_GetIDs+0x174>
		}



		// RX device and mfr ID, store in struct variable
		uint8_t retIDs[2] = {0x00, 0x00};
 8000dfc:	250c      	movs	r5, #12
 8000dfe:	197b      	adds	r3, r7, r5
 8000e00:	2200      	movs	r2, #0
 8000e02:	801a      	strh	r2, [r3, #0]
		halRet = HAL_SPI_Receive(wq->hspi, retIDs, 2, HAL_MAX_DELAY);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6998      	ldr	r0, [r3, #24]
 8000e08:	261f      	movs	r6, #31
 8000e0a:	19bc      	adds	r4, r7, r6
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	425b      	negs	r3, r3
 8000e10:	1979      	adds	r1, r7, r5
 8000e12:	2202      	movs	r2, #2
 8000e14:	f006 fa2c 	bl	8007270 <HAL_SPI_Receive>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	2201      	movs	r2, #1
 8000e28:	0019      	movs	r1, r3
 8000e2a:	f003 f8a2 	bl	8003f72 <HAL_GPIO_WritePin>
		wq->mfrID = retIDs[0];
 8000e2e:	197b      	adds	r3, r7, r5
 8000e30:	781a      	ldrb	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	771a      	strb	r2, [r3, #28]


		// Check to ensure that received mfr ID is correct.
		if((halRet != HAL_OK) || (wq->mfrID != 0xEF))
 8000e36:	19bb      	adds	r3, r7, r6
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d103      	bne.n	8000e46 <W25Q_GetIDs+0x16a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7f1b      	ldrb	r3, [r3, #28]
 8000e42:	2bef      	cmp	r3, #239	@ 0xef
 8000e44:	d001      	beq.n	8000e4a <W25Q_GetIDs+0x16e>
			return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e002      	b.n	8000e50 <W25Q_GetIDs+0x174>

	/*
	 * Leaving out for now: Read JEDEC ID
	 */

		return halRet;
 8000e4a:	231f      	movs	r3, #31
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	781b      	ldrb	r3, [r3, #0]
}
 8000e50:	0018      	movs	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b009      	add	sp, #36	@ 0x24
 8000e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e58:	08008e04 	.word	0x08008e04

08000e5c <W25Q_EnableWrite>:

HAL_StatusTypeDef W25Q_EnableWrite(W25Q *wq) {
 8000e5c:	b5b0      	push	{r4, r5, r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000e64:	250f      	movs	r5, #15
 8000e66:	197b      	adds	r3, r7, r5
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]

	// TX write enable command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6818      	ldr	r0, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	2200      	movs	r2, #0
 8000e78:	0019      	movs	r1, r3
 8000e7a:	f003 f87a 	bl	8003f72 <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_WRITE_ENABLE}, 1, HAL_MAX_DELAY);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6998      	ldr	r0, [r3, #24]
 8000e82:	210c      	movs	r1, #12
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2206      	movs	r2, #6
 8000e88:	701a      	strb	r2, [r3, #0]
 8000e8a:	197c      	adds	r4, r7, r5
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	425b      	negs	r3, r3
 8000e90:	1879      	adds	r1, r7, r1
 8000e92:	2201      	movs	r2, #1
 8000e94:	f006 f88c 	bl	8006fb0 <HAL_SPI_Transmit>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	f003 f862 	bl	8003f72 <HAL_GPIO_WritePin>

	if(halRet != HAL_OK)
 8000eae:	197b      	adds	r3, r7, r5
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <W25Q_EnableWrite+0x60>
		return halRet;
 8000eb6:	197b      	adds	r3, r7, r5
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	e00e      	b.n	8000eda <W25Q_EnableWrite+0x7e>

	// Read back written value and confirm
	W25Q_ReadStatusReg(wq, 1);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f000 f851 	bl	8000f68 <W25Q_ReadStatusReg>

	// Bit 1 of status register 1 should now be 1
	if(wq->writeEnable != 1)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2223      	movs	r2, #35	@ 0x23
 8000eca:	5c9b      	ldrb	r3, [r3, r2]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d001      	beq.n	8000ed4 <W25Q_EnableWrite+0x78>
		return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e002      	b.n	8000eda <W25Q_EnableWrite+0x7e>

	return halRet;
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	781b      	ldrb	r3, [r3, #0]

}
 8000eda:	0018      	movs	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b004      	add	sp, #16
 8000ee0:	bdb0      	pop	{r4, r5, r7, pc}

08000ee2 <W25Q_DisableWrite>:

HAL_StatusTypeDef W25Q_DisableWrite(W25Q *wq) {
 8000ee2:	b5b0      	push	{r4, r5, r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000eea:	250f      	movs	r5, #15
 8000eec:	197b      	adds	r3, r7, r5
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]

	// TX write disable command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6818      	ldr	r0, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	2200      	movs	r2, #0
 8000efe:	0019      	movs	r1, r3
 8000f00:	f003 f837 	bl	8003f72 <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_WRITE_DISABLE}, 1, HAL_MAX_DELAY);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6998      	ldr	r0, [r3, #24]
 8000f08:	210c      	movs	r1, #12
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	701a      	strb	r2, [r3, #0]
 8000f10:	197c      	adds	r4, r7, r5
 8000f12:	2301      	movs	r3, #1
 8000f14:	425b      	negs	r3, r3
 8000f16:	1879      	adds	r1, r7, r1
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f006 f849 	bl	8006fb0 <HAL_SPI_Transmit>
 8000f1e:	0003      	movs	r3, r0
 8000f20:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	0019      	movs	r1, r3
 8000f30:	f003 f81f 	bl	8003f72 <HAL_GPIO_WritePin>

	if(halRet != HAL_OK)
 8000f34:	197b      	adds	r3, r7, r5
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <W25Q_DisableWrite+0x60>
		return halRet;
 8000f3c:	197b      	adds	r3, r7, r5
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	e00e      	b.n	8000f60 <W25Q_DisableWrite+0x7e>

	// Read back written value and confirm
	W25Q_ReadStatusReg(wq, 1);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2101      	movs	r1, #1
 8000f46:	0018      	movs	r0, r3
 8000f48:	f000 f80e 	bl	8000f68 <W25Q_ReadStatusReg>

	// Bit 1 of status register 1 should still be 0
	if(wq->writeEnable != 0)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2223      	movs	r2, #35	@ 0x23
 8000f50:	5c9b      	ldrb	r3, [r3, r2]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <W25Q_DisableWrite+0x78>
		return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e002      	b.n	8000f60 <W25Q_DisableWrite+0x7e>

	return halRet;
 8000f5a:	230f      	movs	r3, #15
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	781b      	ldrb	r3, [r3, #0]

}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b004      	add	sp, #16
 8000f66:	bdb0      	pop	{r4, r5, r7, pc}

08000f68 <W25Q_ReadStatusReg>:

HAL_StatusTypeDef W25Q_ReadStatusReg(W25Q *wq, uint8_t regNum) {
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	000a      	movs	r2, r1
 8000f72:	1cfb      	adds	r3, r7, #3
 8000f74:	701a      	strb	r2, [r3, #0]

	// Check register number is valid
	if(regNum < 1 || regNum > 3) {
 8000f76:	1cfb      	adds	r3, r7, #3
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <W25Q_ReadStatusReg+0x1e>
 8000f7e:	1cfb      	adds	r3, r7, #3
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d901      	bls.n	8000f8a <W25Q_ReadStatusReg+0x22>
		return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e094      	b.n	80010b4 <W25Q_ReadStatusReg+0x14c>
	}

	HAL_StatusTypeDef halRet = HAL_OK;
 8000f8a:	2417      	movs	r4, #23
 8000f8c:	193b      	adds	r3, r7, r4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]

	// Array of commands for status registers 1-3
	uint8_t statRegCMDs[3] = {CMD_READ_STAT_1, CMD_READ_STAT_2, CMD_READ_STAT_3};
 8000f92:	2514      	movs	r5, #20
 8000f94:	197b      	adds	r3, r7, r5
 8000f96:	4a49      	ldr	r2, [pc, #292]	@ (80010bc <W25Q_ReadStatusReg+0x154>)
 8000f98:	8811      	ldrh	r1, [r2, #0]
 8000f9a:	8019      	strh	r1, [r3, #0]
 8000f9c:	7892      	ldrb	r2, [r2, #2]
 8000f9e:	709a      	strb	r2, [r3, #2]

	// TX read status register command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6818      	ldr	r0, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	2200      	movs	r2, #0
 8000fac:	0019      	movs	r1, r3
 8000fae:	f002 ffe0 	bl	8003f72 <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){statRegCMDs[regNum - 1]}, 1, HAL_MAX_DELAY);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6998      	ldr	r0, [r3, #24]
 8000fb6:	1cfb      	adds	r3, r7, #3
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	197a      	adds	r2, r7, r5
 8000fbe:	5cd2      	ldrb	r2, [r2, r3]
 8000fc0:	2110      	movs	r1, #16
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	0025      	movs	r5, r4
 8000fc8:	193c      	adds	r4, r7, r4
 8000fca:	2301      	movs	r3, #1
 8000fcc:	425b      	negs	r3, r3
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f005 ffed 	bl	8006fb0 <HAL_SPI_Transmit>
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000fda:	197b      	adds	r3, r7, r5
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00b      	beq.n	8000ffa <W25Q_ReadStatusReg+0x92>
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	2201      	movs	r2, #1
 8000fee:	0019      	movs	r1, r3
 8000ff0:	f002 ffbf 	bl	8003f72 <HAL_GPIO_WritePin>
		return halRet;
 8000ff4:	197b      	adds	r3, r7, r5
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	e05c      	b.n	80010b4 <W25Q_ReadStatusReg+0x14c>
	}

	// RX status register
	uint8_t statRegRet[1] = {0x00};
 8000ffa:	210c      	movs	r1, #12
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	4a30      	ldr	r2, [pc, #192]	@ (80010c0 <W25Q_ReadStatusReg+0x158>)
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	701a      	strb	r2, [r3, #0]
	halRet = HAL_SPI_Receive(wq->hspi, statRegRet, 1, HAL_MAX_DELAY);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6998      	ldr	r0, [r3, #24]
 8001008:	2317      	movs	r3, #23
 800100a:	18fc      	adds	r4, r7, r3
 800100c:	2301      	movs	r3, #1
 800100e:	425b      	negs	r3, r3
 8001010:	1879      	adds	r1, r7, r1
 8001012:	2201      	movs	r2, #1
 8001014:	f006 f92c 	bl	8007270 <HAL_SPI_Receive>
 8001018:	0003      	movs	r3, r0
 800101a:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	b29b      	uxth	r3, r3
 8001026:	2201      	movs	r2, #1
 8001028:	0019      	movs	r1, r3
 800102a:	f002 ffa2 	bl	8003f72 <HAL_GPIO_WritePin>

	switch(regNum) {
 800102e:	1cfb      	adds	r3, r7, #3
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b03      	cmp	r3, #3
 8001034:	d029      	beq.n	800108a <W25Q_ReadStatusReg+0x122>
 8001036:	dc3a      	bgt.n	80010ae <W25Q_ReadStatusReg+0x146>
 8001038:	2b01      	cmp	r3, #1
 800103a:	d002      	beq.n	8001042 <W25Q_ReadStatusReg+0xda>
 800103c:	2b02      	cmp	r3, #2
 800103e:	d012      	beq.n	8001066 <W25Q_ReadStatusReg+0xfe>
 8001040:	e035      	b.n	80010ae <W25Q_ReadStatusReg+0x146>
	case 1:
		wq->statReg1 = statRegRet[0];
 8001042:	230c      	movs	r3, #12
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	7819      	ldrb	r1, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2220      	movs	r2, #32
 800104c:	5499      	strb	r1, [r3, r2]
		wq->writeEnable = (wq->statReg1 & 0b00000010) >> 1;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2220      	movs	r2, #32
 8001052:	5c9b      	ldrb	r3, [r3, r2]
 8001054:	105b      	asrs	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2201      	movs	r2, #1
 800105a:	4013      	ands	r3, r2
 800105c:	b2d9      	uxtb	r1, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2223      	movs	r2, #35	@ 0x23
 8001062:	5499      	strb	r1, [r3, r2]
		break;
 8001064:	e023      	b.n	80010ae <W25Q_ReadStatusReg+0x146>
	case 2:
		wq->statReg2 = statRegRet[0];
 8001066:	230c      	movs	r3, #12
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	7819      	ldrb	r1, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2221      	movs	r2, #33	@ 0x21
 8001070:	5499      	strb	r1, [r3, r2]
		wq->quadEnable = (wq->statReg2 & 0b00000010) >> 1;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2221      	movs	r2, #33	@ 0x21
 8001076:	5c9b      	ldrb	r3, [r3, r2]
 8001078:	105b      	asrs	r3, r3, #1
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2201      	movs	r2, #1
 800107e:	4013      	ands	r3, r2
 8001080:	b2d9      	uxtb	r1, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2225      	movs	r2, #37	@ 0x25
 8001086:	5499      	strb	r1, [r3, r2]
		break;
 8001088:	e011      	b.n	80010ae <W25Q_ReadStatusReg+0x146>
	case 3:
		wq->statReg3 = statRegRet[0];
 800108a:	230c      	movs	r3, #12
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	7819      	ldrb	r1, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2222      	movs	r2, #34	@ 0x22
 8001094:	5499      	strb	r1, [r3, r2]
		wq->driverStrength = (wq->statReg3 & 0b01100000) >> 5;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2222      	movs	r2, #34	@ 0x22
 800109a:	5c9b      	ldrb	r3, [r3, r2]
 800109c:	115b      	asrs	r3, r3, #5
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2203      	movs	r2, #3
 80010a2:	4013      	ands	r3, r2
 80010a4:	b2d9      	uxtb	r1, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2226      	movs	r2, #38	@ 0x26
 80010aa:	5499      	strb	r1, [r3, r2]
		break;
 80010ac:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 80010ae:	2317      	movs	r3, #23
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	781b      	ldrb	r3, [r3, #0]

}
 80010b4:	0018      	movs	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b006      	add	sp, #24
 80010ba:	bdb0      	pop	{r4, r5, r7, pc}
 80010bc:	08008e08 	.word	0x08008e08
 80010c0:	08008e04 	.word	0x08008e04

080010c4 <W25Q_ReadStatusRegs>:

HAL_StatusTypeDef W25Q_ReadStatusRegs(W25Q *wq) {
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80010cc:	230e      	movs	r3, #14
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 1; i <=3; i++) {
 80010d4:	230f      	movs	r3, #15
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e00d      	b.n	80010fa <W25Q_ReadStatusRegs+0x36>

		W25Q_ReadStatusReg(wq, i);
 80010de:	240f      	movs	r4, #15
 80010e0:	193b      	adds	r3, r7, r4
 80010e2:	781a      	ldrb	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	0011      	movs	r1, r2
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff ff3d 	bl	8000f68 <W25Q_ReadStatusReg>
	for(uint8_t i = 1; i <=3; i++) {
 80010ee:	0021      	movs	r1, r4
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	781a      	ldrb	r2, [r3, #0]
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	3201      	adds	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	230f      	movs	r3, #15
 80010fc:	18fb      	adds	r3, r7, r3
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b03      	cmp	r3, #3
 8001102:	d9ec      	bls.n	80010de <W25Q_ReadStatusRegs+0x1a>

	}

	return halRet;
 8001104:	230e      	movs	r3, #14
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	781b      	ldrb	r3, [r3, #0]

}
 800110a:	0018      	movs	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	b005      	add	sp, #20
 8001110:	bd90      	pop	{r4, r7, pc}
	...

08001114 <W25Q_WriteStatusReg>:

HAL_StatusTypeDef W25Q_WriteStatusReg(W25Q *wq, uint8_t regNum, uint8_t regVal) {
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	0008      	movs	r0, r1
 800111e:	0011      	movs	r1, r2
 8001120:	1cfb      	adds	r3, r7, #3
 8001122:	1c02      	adds	r2, r0, #0
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	1cbb      	adds	r3, r7, #2
 8001128:	1c0a      	adds	r2, r1, #0
 800112a:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800112c:	2513      	movs	r5, #19
 800112e:	197b      	adds	r3, r7, r5
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]

	// Enable Write Access to Memory
	// Write access will disable after status register write
	if(wq->writeEnable != 1) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2223      	movs	r2, #35	@ 0x23
 8001138:	5c9b      	ldrb	r3, [r3, r2]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d00c      	beq.n	8001158 <W25Q_WriteStatusReg+0x44>
		halRet = W25Q_EnableWrite(wq);
 800113e:	197c      	adds	r4, r7, r5
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	0018      	movs	r0, r3
 8001144:	f7ff fe8a 	bl	8000e5c <W25Q_EnableWrite>
 8001148:	0003      	movs	r3, r0
 800114a:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK)
 800114c:	197b      	adds	r3, r7, r5
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <W25Q_WriteStatusReg+0x44>
			return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e08a      	b.n	800126e <W25Q_WriteStatusReg+0x15a>
	}

	// Array of commands for status registers 1-3
	uint8_t statRegCMDs[3] = {CMD_WRITE_STAT_1, CMD_WRITE_STAT_2, CMD_WRITE_STAT_3};
 8001158:	2410      	movs	r4, #16
 800115a:	193b      	adds	r3, r7, r4
 800115c:	4a46      	ldr	r2, [pc, #280]	@ (8001278 <W25Q_WriteStatusReg+0x164>)
 800115e:	8811      	ldrh	r1, [r2, #0]
 8001160:	8019      	strh	r1, [r3, #0]
 8001162:	7892      	ldrb	r2, [r2, #2]
 8001164:	709a      	strb	r2, [r3, #2]

	// TX write status reg with value
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	b29b      	uxth	r3, r3
 8001170:	2200      	movs	r2, #0
 8001172:	0019      	movs	r1, r3
 8001174:	f002 fefd 	bl	8003f72 <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[2]){statRegCMDs[regNum - 1], regVal}, 2, HAL_MAX_DELAY);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6998      	ldr	r0, [r3, #24]
 800117c:	1cfb      	adds	r3, r7, #3
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	3b01      	subs	r3, #1
 8001182:	193a      	adds	r2, r7, r4
 8001184:	5cd2      	ldrb	r2, [r2, r3]
 8001186:	210c      	movs	r1, #12
 8001188:	187b      	adds	r3, r7, r1
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	187b      	adds	r3, r7, r1
 800118e:	1cba      	adds	r2, r7, #2
 8001190:	7812      	ldrb	r2, [r2, #0]
 8001192:	705a      	strb	r2, [r3, #1]
 8001194:	2513      	movs	r5, #19
 8001196:	197c      	adds	r4, r7, r5
 8001198:	2301      	movs	r3, #1
 800119a:	425b      	negs	r3, r3
 800119c:	1879      	adds	r1, r7, r1
 800119e:	2202      	movs	r2, #2
 80011a0:	f005 ff06 	bl	8006fb0 <HAL_SPI_Transmit>
 80011a4:	0003      	movs	r3, r0
 80011a6:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	2201      	movs	r2, #1
 80011b4:	0019      	movs	r1, r3
 80011b6:	f002 fedc 	bl	8003f72 <HAL_GPIO_WritePin>

	// WEL bit will now be set back to 0
	halRet = W25Q_ReadStatusReg(wq, 1);
 80011ba:	197c      	adds	r4, r7, r5
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2101      	movs	r1, #1
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff fed1 	bl	8000f68 <W25Q_ReadStatusReg>
 80011c6:	0003      	movs	r3, r0
 80011c8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80011ca:	197b      	adds	r3, r7, r5
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <W25Q_WriteStatusReg+0xc4>
		return halRet;
 80011d2:	197b      	adds	r3, r7, r5
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	e04a      	b.n	800126e <W25Q_WriteStatusReg+0x15a>

	// Delay maximum status register write time (15ms), as given by chip datasheet.
	// ~235ns per i
	for(uint32_t i = 0; i < 70000; i++) {
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	e003      	b.n	80011e6 <W25Q_WriteStatusReg+0xd2>
		__NOP();
 80011de:	46c0      	nop			@ (mov r8, r8)
	for(uint32_t i = 0; i < 70000; i++) {
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3301      	adds	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	4a24      	ldr	r2, [pc, #144]	@ (800127c <W25Q_WriteStatusReg+0x168>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d9f7      	bls.n	80011de <W25Q_WriteStatusReg+0xca>
	}

	if(halRet != HAL_OK)
 80011ee:	2213      	movs	r2, #19
 80011f0:	18bb      	adds	r3, r7, r2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <W25Q_WriteStatusReg+0xea>
		return halRet;
 80011f8:	18bb      	adds	r3, r7, r2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	e037      	b.n	800126e <W25Q_WriteStatusReg+0x15a>

	// Read back written value and confirm
	halRet = W25Q_ReadStatusReg(wq, regNum);
 80011fe:	2313      	movs	r3, #19
 8001200:	18fc      	adds	r4, r7, r3
 8001202:	1cfb      	adds	r3, r7, #3
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	0011      	movs	r1, r2
 800120a:	0018      	movs	r0, r3
 800120c:	f7ff feac 	bl	8000f68 <W25Q_ReadStatusReg>
 8001210:	0003      	movs	r3, r0
 8001212:	7023      	strb	r3, [r4, #0]
	switch(regNum) {
 8001214:	1cfb      	adds	r3, r7, #3
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b03      	cmp	r3, #3
 800121a:	d017      	beq.n	800124c <W25Q_WriteStatusReg+0x138>
 800121c:	dc24      	bgt.n	8001268 <W25Q_WriteStatusReg+0x154>
 800121e:	2b01      	cmp	r3, #1
 8001220:	d002      	beq.n	8001228 <W25Q_WriteStatusReg+0x114>
 8001222:	2b02      	cmp	r3, #2
 8001224:	d009      	beq.n	800123a <W25Q_WriteStatusReg+0x126>
 8001226:	e01f      	b.n	8001268 <W25Q_WriteStatusReg+0x154>
		case 1:
			if(wq->statReg1 != regVal)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2220      	movs	r2, #32
 800122c:	5c9b      	ldrb	r3, [r3, r2]
 800122e:	1cba      	adds	r2, r7, #2
 8001230:	7812      	ldrb	r2, [r2, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d013      	beq.n	800125e <W25Q_WriteStatusReg+0x14a>
				return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e019      	b.n	800126e <W25Q_WriteStatusReg+0x15a>
			break;
		case 2:
			if(wq->statReg2 != regVal)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2221      	movs	r2, #33	@ 0x21
 800123e:	5c9b      	ldrb	r3, [r3, r2]
 8001240:	1cba      	adds	r2, r7, #2
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d00c      	beq.n	8001262 <W25Q_WriteStatusReg+0x14e>
				return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e010      	b.n	800126e <W25Q_WriteStatusReg+0x15a>
			break;
		case 3:
			if(wq->statReg3 != regVal)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2222      	movs	r2, #34	@ 0x22
 8001250:	5c9b      	ldrb	r3, [r3, r2]
 8001252:	1cba      	adds	r2, r7, #2
 8001254:	7812      	ldrb	r2, [r2, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d005      	beq.n	8001266 <W25Q_WriteStatusReg+0x152>
				return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e007      	b.n	800126e <W25Q_WriteStatusReg+0x15a>
			break;
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	e002      	b.n	8001268 <W25Q_WriteStatusReg+0x154>
			break;
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	e000      	b.n	8001268 <W25Q_WriteStatusReg+0x154>
			break;
 8001266:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 8001268:	2313      	movs	r3, #19
 800126a:	18fb      	adds	r3, r7, r3
 800126c:	781b      	ldrb	r3, [r3, #0]


}
 800126e:	0018      	movs	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	b006      	add	sp, #24
 8001274:	bdb0      	pop	{r4, r5, r7, pc}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	08008e0c 	.word	0x08008e0c
 800127c:	0001116f 	.word	0x0001116f

08001280 <W25Q_readData>:

HAL_StatusTypeDef W25Q_readData(W25Q *wq, uint32_t startAddress, uint32_t dataSize, uint8_t *dataLocation) {
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800128e:	2417      	movs	r4, #23
 8001290:	193b      	adds	r3, r7, r4
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]

	// Create read data array with start address
	uint8_t readDataArr[4] = {CMD_READ_DATA, ((startAddress >> 16) & 0xFF), ((startAddress >> 8) & 0xFF), ((startAddress) & 0xFF)};
 8001296:	2510      	movs	r5, #16
 8001298:	197b      	adds	r3, r7, r5
 800129a:	2203      	movs	r2, #3
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	0c1b      	lsrs	r3, r3, #16
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	197b      	adds	r3, r7, r5
 80012a6:	705a      	strb	r2, [r3, #1]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	0a1b      	lsrs	r3, r3, #8
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	197b      	adds	r3, r7, r5
 80012b0:	709a      	strb	r2, [r3, #2]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	197b      	adds	r3, r7, r5
 80012b8:	70da      	strb	r2, [r3, #3]

	// TX read data in single-SPI mode command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	2200      	movs	r2, #0
 80012c6:	0019      	movs	r1, r3
 80012c8:	f002 fe53 	bl	8003f72 <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, readDataArr, 4, HAL_MAX_DELAY);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6998      	ldr	r0, [r3, #24]
 80012d0:	0026      	movs	r6, r4
 80012d2:	193c      	adds	r4, r7, r4
 80012d4:	2301      	movs	r3, #1
 80012d6:	425b      	negs	r3, r3
 80012d8:	1979      	adds	r1, r7, r5
 80012da:	2204      	movs	r2, #4
 80012dc:	f005 fe68 	bl	8006fb0 <HAL_SPI_Transmit>
 80012e0:	0003      	movs	r3, r0
 80012e2:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 80012e4:	19bb      	adds	r3, r7, r6
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00b      	beq.n	8001304 <W25Q_readData+0x84>
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6818      	ldr	r0, [r3, #0]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	2201      	movs	r2, #1
 80012f8:	0019      	movs	r1, r3
 80012fa:	f002 fe3a 	bl	8003f72 <HAL_GPIO_WritePin>
		return halRet;
 80012fe:	19bb      	adds	r3, r7, r6
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	e017      	b.n	8001334 <W25Q_readData+0xb4>
	}

	// RX data
	halRet = HAL_SPI_Receive(wq->hspi, dataLocation, dataSize, HAL_MAX_DELAY);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6998      	ldr	r0, [r3, #24]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	b29a      	uxth	r2, r3
 800130c:	2517      	movs	r5, #23
 800130e:	197c      	adds	r4, r7, r5
 8001310:	2301      	movs	r3, #1
 8001312:	425b      	negs	r3, r3
 8001314:	6839      	ldr	r1, [r7, #0]
 8001316:	f005 ffab 	bl	8007270 <HAL_SPI_Receive>
 800131a:	0003      	movs	r3, r0
 800131c:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	b29b      	uxth	r3, r3
 8001328:	2201      	movs	r2, #1
 800132a:	0019      	movs	r1, r3
 800132c:	f002 fe21 	bl	8003f72 <HAL_GPIO_WritePin>


	return halRet;
 8001330:	197b      	adds	r3, r7, r5
 8001332:	781b      	ldrb	r3, [r3, #0]

}
 8001334:	0018      	movs	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	b007      	add	sp, #28
 800133a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800133c <W25Q_ChipReset>:
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);

	return halRet;
}

HAL_StatusTypeDef W25Q_ChipReset(W25Q *wq) {
 800133c:	b5b0      	push	{r4, r5, r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8001344:	250e      	movs	r5, #14
 8001346:	197b      	adds	r3, r7, r5
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]

	/*
	 * Send both enable reset an reset device commands
	 */
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	b29b      	uxth	r3, r3
 8001356:	2200      	movs	r2, #0
 8001358:	0019      	movs	r1, r3
 800135a:	f002 fe0a 	bl	8003f72 <HAL_GPIO_WritePin>
	// TX enable reset instruction
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_RESET_ENABLE}, 1, HAL_MAX_DELAY);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6998      	ldr	r0, [r3, #24]
 8001362:	210c      	movs	r1, #12
 8001364:	187b      	adds	r3, r7, r1
 8001366:	2266      	movs	r2, #102	@ 0x66
 8001368:	701a      	strb	r2, [r3, #0]
 800136a:	197c      	adds	r4, r7, r5
 800136c:	2301      	movs	r3, #1
 800136e:	425b      	negs	r3, r3
 8001370:	1879      	adds	r1, r7, r1
 8001372:	2201      	movs	r2, #1
 8001374:	f005 fe1c 	bl	8006fb0 <HAL_SPI_Transmit>
 8001378:	0003      	movs	r3, r0
 800137a:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	b29b      	uxth	r3, r3
 8001386:	2201      	movs	r2, #1
 8001388:	0019      	movs	r1, r3
 800138a:	f002 fdf2 	bl	8003f72 <HAL_GPIO_WritePin>
	if(halRet != HAL_OK)
 800138e:	197b      	adds	r3, r7, r5
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <W25Q_ChipReset+0x60>
		return halRet;
 8001396:	197b      	adds	r3, r7, r5
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	e035      	b.n	8001408 <W25Q_ChipReset+0xcc>

	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6818      	ldr	r0, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	2200      	movs	r2, #0
 80013a8:	0019      	movs	r1, r3
 80013aa:	f002 fde2 	bl	8003f72 <HAL_GPIO_WritePin>
	// TX reset device instruction
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_RESET_DEVICE}, 1, HAL_MAX_DELAY);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6998      	ldr	r0, [r3, #24]
 80013b2:	2108      	movs	r1, #8
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	2299      	movs	r2, #153	@ 0x99
 80013b8:	701a      	strb	r2, [r3, #0]
 80013ba:	230e      	movs	r3, #14
 80013bc:	18fc      	adds	r4, r7, r3
 80013be:	2301      	movs	r3, #1
 80013c0:	425b      	negs	r3, r3
 80013c2:	1879      	adds	r1, r7, r1
 80013c4:	2201      	movs	r2, #1
 80013c6:	f005 fdf3 	bl	8006fb0 <HAL_SPI_Transmit>
 80013ca:	0003      	movs	r3, r0
 80013cc:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	2201      	movs	r2, #1
 80013da:	0019      	movs	r1, r3
 80013dc:	f002 fdc9 	bl	8003f72 <HAL_GPIO_WritePin>

	// Delay at least 30 us
	for(uint8_t i = 0; i < 180; i++) {
 80013e0:	230f      	movs	r3, #15
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	e006      	b.n	80013f8 <W25Q_ChipReset+0xbc>
		__NOP();
 80013ea:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < 180; i++) {
 80013ec:	210f      	movs	r1, #15
 80013ee:	187b      	adds	r3, r7, r1
 80013f0:	781a      	ldrb	r2, [r3, #0]
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	3201      	adds	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
 80013f8:	230f      	movs	r3, #15
 80013fa:	18fb      	adds	r3, r7, r3
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2bb3      	cmp	r3, #179	@ 0xb3
 8001400:	d9f3      	bls.n	80013ea <W25Q_ChipReset+0xae>
	}


	return halRet;
 8001402:	230e      	movs	r3, #14
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	781b      	ldrb	r3, [r3, #0]

}
 8001408:	0018      	movs	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	b004      	add	sp, #16
 800140e:	bdb0      	pop	{r4, r5, r7, pc}

08001410 <W25Q_SetDriverStrength>:

	return halRet;

}

HAL_StatusTypeDef W25Q_SetDriverStrength(W25Q *wq, uint8_t driverStrength) {
 8001410:	b5b0      	push	{r4, r5, r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	000a      	movs	r2, r1
 800141a:	1cfb      	adds	r3, r7, #3
 800141c:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800141e:	230f      	movs	r3, #15
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]

	// Check to ensure passed driver strength value lies in range
	if(driverStrength < 0 || driverStrength > 3)
 8001426:	1cfb      	adds	r3, r7, #3
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b03      	cmp	r3, #3
 800142c:	d901      	bls.n	8001432 <W25Q_SetDriverStrength+0x22>
		return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e041      	b.n	80014b6 <W25Q_SetDriverStrength+0xa6>

	// Read current value in status register 3
	halRet = W25Q_ReadStatusReg(wq, 3);
 8001432:	250f      	movs	r5, #15
 8001434:	197c      	adds	r4, r7, r5
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2103      	movs	r1, #3
 800143a:	0018      	movs	r0, r3
 800143c:	f7ff fd94 	bl	8000f68 <W25Q_ReadStatusReg>
 8001440:	0003      	movs	r3, r0
 8001442:	7023      	strb	r3, [r4, #0]

	// Isolate bits 5-6 and change value to reflect new driver strength
	uint8_t newRegVal = (wq->statReg3) & (0b10011111);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2222      	movs	r2, #34	@ 0x22
 8001448:	5c9a      	ldrb	r2, [r3, r2]
 800144a:	200e      	movs	r0, #14
 800144c:	183b      	adds	r3, r7, r0
 800144e:	2160      	movs	r1, #96	@ 0x60
 8001450:	438a      	bics	r2, r1
 8001452:	701a      	strb	r2, [r3, #0]
	newRegVal = (newRegVal) | (driverStrength << 5);
 8001454:	1cfb      	adds	r3, r7, #3
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	015b      	lsls	r3, r3, #5
 800145a:	b25a      	sxtb	r2, r3
 800145c:	183b      	adds	r3, r7, r0
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	b25b      	sxtb	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b25a      	sxtb	r2, r3
 8001466:	183b      	adds	r3, r7, r0
 8001468:	701a      	strb	r2, [r3, #0]

	// Write status register 3 with new value
	halRet = W25Q_WriteStatusReg(wq, 3, newRegVal);
 800146a:	197c      	adds	r4, r7, r5
 800146c:	183b      	adds	r3, r7, r0
 800146e:	781a      	ldrb	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2103      	movs	r1, #3
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff fe4d 	bl	8001114 <W25Q_WriteStatusReg>
 800147a:	0003      	movs	r3, r0
 800147c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800147e:	197b      	adds	r3, r7, r5
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <W25Q_SetDriverStrength+0x7c>
		return halRet;
 8001486:	197b      	adds	r3, r7, r5
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	e014      	b.n	80014b6 <W25Q_SetDriverStrength+0xa6>

	// Read back status register 3 and confirm successful write
	halRet = W25Q_ReadStatusReg(wq, 3);
 800148c:	230f      	movs	r3, #15
 800148e:	18fc      	adds	r4, r7, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2103      	movs	r1, #3
 8001494:	0018      	movs	r0, r3
 8001496:	f7ff fd67 	bl	8000f68 <W25Q_ReadStatusReg>
 800149a:	0003      	movs	r3, r0
 800149c:	7023      	strb	r3, [r4, #0]
	if(wq->driverStrength != driverStrength)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2226      	movs	r2, #38	@ 0x26
 80014a2:	5c9b      	ldrb	r3, [r3, r2]
 80014a4:	1cfa      	adds	r2, r7, #3
 80014a6:	7812      	ldrb	r2, [r2, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d001      	beq.n	80014b0 <W25Q_SetDriverStrength+0xa0>
		return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e002      	b.n	80014b6 <W25Q_SetDriverStrength+0xa6>

	return halRet;
 80014b0:	230f      	movs	r3, #15
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	781b      	ldrb	r3, [r3, #0]

}
 80014b6:	0018      	movs	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b004      	add	sp, #16
 80014bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080014c0 <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80014c0:	b5b0      	push	{r4, r5, r7, lr}
 80014c2:	b09a      	sub	sp, #104	@ 0x68
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80014cc:	2567      	movs	r5, #103	@ 0x67
 80014ce:	197b      	adds	r3, r7, r5
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 80014d4:	243c      	movs	r4, #60	@ 0x3c
 80014d6:	193b      	adds	r3, r7, r4
 80014d8:	0018      	movs	r0, r3
 80014da:	2328      	movs	r3, #40	@ 0x28
 80014dc:	001a      	movs	r2, r3
 80014de:	2100      	movs	r1, #0
 80014e0:	f007 fc3c 	bl	8008d5c <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	0021      	movs	r1, r4
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	785b      	ldrb	r3, [r3, #1]
 80014f2:	3301      	adds	r3, #1
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	187b      	adds	r3, r7, r1
 80014f8:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	789a      	ldrb	r2, [r3, #2]
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	187b      	adds	r3, r7, r1
 8001508:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	78da      	ldrb	r2, [r3, #3]
 800150e:	187b      	adds	r3, r7, r1
 8001510:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	78da      	ldrb	r2, [r3, #3]
 8001516:	187b      	adds	r3, r7, r1
 8001518:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800151a:	0008      	movs	r0, r1
 800151c:	183b      	adds	r3, r7, r0
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001522:	183b      	adds	r3, r7, r0
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8001528:	183b      	adds	r3, r7, r0
 800152a:	4a19      	ldr	r2, [pc, #100]	@ (8001590 <initRTCInternalAlarm+0xd0>)
 800152c:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800152e:	183b      	adds	r3, r7, r0
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001534:	183b      	adds	r3, r7, r0
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 800153a:	183b      	adds	r3, r7, r0
 800153c:	2220      	movs	r2, #32
 800153e:	2101      	movs	r1, #1
 8001540:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 8001542:	0001      	movs	r1, r0
 8001544:	187b      	adds	r3, r7, r1
 8001546:	2280      	movs	r2, #128	@ 0x80
 8001548:	0052      	lsls	r2, r2, #1
 800154a:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 800154c:	197c      	adds	r4, r7, r5
 800154e:	1879      	adds	r1, r7, r1
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	0018      	movs	r0, r3
 8001556:	f005 f853 	bl	8006600 <HAL_RTC_SetAlarm_IT>
 800155a:	0003      	movs	r3, r0
 800155c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800155e:	197b      	adds	r3, r7, r5
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <initRTCInternalAlarm+0xac>
		return halRet;
 8001566:	197b      	adds	r3, r7, r5
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	e00d      	b.n	8001588 <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 800156c:	2567      	movs	r5, #103	@ 0x67
 800156e:	197c      	adds	r4, r7, r5
 8001570:	2380      	movs	r3, #128	@ 0x80
 8001572:	005a      	lsls	r2, r3, #1
 8001574:	2314      	movs	r3, #20
 8001576:	18f9      	adds	r1, r7, r3
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	2300      	movs	r3, #0
 800157c:	f005 f980 	bl	8006880 <HAL_RTC_GetAlarm>
 8001580:	0003      	movs	r3, r0
 8001582:	7023      	strb	r3, [r4, #0]
	return halRet;
 8001584:	197b      	adds	r3, r7, r5
 8001586:	781b      	ldrb	r3, [r3, #0]

}
 8001588:	0018      	movs	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	b01a      	add	sp, #104	@ 0x68
 800158e:	bdb0      	pop	{r4, r5, r7, pc}
 8001590:	80800080 	.word	0x80800080

08001594 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	0018      	movs	r0, r3
 80015a8:	f004 ff80 	bl	80064ac <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	0018      	movs	r0, r3
 80015b4:	f004 ffd6 	bl	8006564 <HAL_RTC_GetDate>

}
 80015b8:	46c0      	nop			@ (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b004      	add	sp, #16
 80015be:	bd80      	pop	{r7, pc}

080015c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	46de      	mov	lr, fp
 80015c4:	4657      	mov	r7, sl
 80015c6:	464e      	mov	r6, r9
 80015c8:	4645      	mov	r5, r8
 80015ca:	b5e0      	push	{r5, r6, r7, lr}
 80015cc:	b08f      	sub	sp, #60	@ 0x3c
 80015ce:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d0:	f002 f85e 	bl	8003690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d4:	f000 f9ee 	bl	80019b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d8:	f000 fc50 	bl	8001e7c <MX_GPIO_Init>
  MX_DMA_Init();
 80015dc:	f000 fc28 	bl	8001e30 <MX_DMA_Init>
  MX_RTC_Init();
 80015e0:	f000 fabe 	bl	8001b60 <MX_RTC_Init>
  MX_I2C1_Init();
 80015e4:	f000 fa52 	bl	8001a8c <MX_I2C1_Init>
  MX_I2S1_Init();
 80015e8:	f000 fa90 	bl	8001b0c <MX_I2S1_Init>
  MX_SPI2_Init();
 80015ec:	f000 fb32 	bl	8001c54 <MX_SPI2_Init>
  MX_TIM2_Init();
 80015f0:	f000 fb6e 	bl	8001cd0 <MX_TIM2_Init>
  MX_TIM14_Init();
 80015f4:	f000 fbcc 	bl	8001d90 <MX_TIM14_Init>
  MX_TIM16_Init();
 80015f8:	f000 fbf0 	bl	8001ddc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	  // HAL Status handle for error-checking
	  HAL_StatusTypeDef halRet = HAL_OK;
 80015fc:	2317      	movs	r3, #23
 80015fe:	18fb      	adds	r3, r7, r3
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]

	  // Determine which time format we will be using
	  	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 8001604:	4bc5      	ldr	r3, [pc, #788]	@ (800191c <main+0x35c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2210      	movs	r2, #16
 800160a:	0011      	movs	r1, r2
 800160c:	0018      	movs	r0, r3
 800160e:	f002 fc93 	bl	8003f38 <HAL_GPIO_ReadPin>
 8001612:	0003      	movs	r3, r0
 8001614:	001a      	movs	r2, r3
 8001616:	4bc2      	ldr	r3, [pc, #776]	@ (8001920 <main+0x360>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d103      	bne.n	8001626 <main+0x66>
	  	  userTimeFormat = RTC_HOURFORMAT_12;
 800161e:	4bc1      	ldr	r3, [pc, #772]	@ (8001924 <main+0x364>)
 8001620:	2240      	movs	r2, #64	@ 0x40
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	e002      	b.n	800162c <main+0x6c>
	  	}
	  	else {
	  	  userTimeFormat = RTC_HOURFORMAT_24;
 8001626:	4bbf      	ldr	r3, [pc, #764]	@ (8001924 <main+0x364>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
	  	}

  	  // Set Smooth Calibration Value
	  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 800162c:	4bbe      	ldr	r3, [pc, #760]	@ (8001928 <main+0x368>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2517      	movs	r5, #23
 8001632:	197c      	adds	r4, r7, r5
 8001634:	2280      	movs	r2, #128	@ 0x80
 8001636:	01d1      	lsls	r1, r2, #7
 8001638:	48bc      	ldr	r0, [pc, #752]	@ (800192c <main+0x36c>)
 800163a:	2200      	movs	r2, #0
 800163c:	f005 fb15 	bl	8006c6a <HAL_RTCEx_SetSmoothCalib>
 8001640:	0003      	movs	r3, r0
 8001642:	7023      	strb	r3, [r4, #0]
									RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
	  if(halRet != HAL_OK) {
 8001644:	197b      	adds	r3, r7, r5
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <main+0x90>
		  // Failure to talk to RTC is a hard failure
		  dispFailure();
 800164c:	f001 f99c 	bl	8002988 <dispFailure>
	  }

	  // Init the internal RTC alarm time to track the current time
	  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 8001650:	2517      	movs	r5, #23
 8001652:	197c      	adds	r4, r7, r5
 8001654:	4ab6      	ldr	r2, [pc, #728]	@ (8001930 <main+0x370>)
 8001656:	49b7      	ldr	r1, [pc, #732]	@ (8001934 <main+0x374>)
 8001658:	4bb4      	ldr	r3, [pc, #720]	@ (800192c <main+0x36c>)
 800165a:	0018      	movs	r0, r3
 800165c:	f7ff ff30 	bl	80014c0 <initRTCInternalAlarm>
 8001660:	0003      	movs	r3, r0
 8001662:	7023      	strb	r3, [r4, #0]
	  if(halRet != HAL_OK) {
 8001664:	197b      	adds	r3, r7, r5
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <main+0xb0>
		  // Failure to initialize RTC alarm is a hard failure
		  dispFailure();
 800166c:	f001 f98c 	bl	8002988 <dispFailure>
		}

	  // Initialize all GPIOs to be used with 7 segment display
		sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8001670:	2380      	movs	r3, #128	@ 0x80
 8001672:	009c      	lsls	r4, r3, #2
 8001674:	2380      	movs	r3, #128	@ 0x80
 8001676:	00dd      	lsls	r5, r3, #3
 8001678:	2680      	movs	r6, #128	@ 0x80
 800167a:	2340      	movs	r3, #64	@ 0x40
 800167c:	469c      	mov	ip, r3
 800167e:	2380      	movs	r3, #128	@ 0x80
 8001680:	011a      	lsls	r2, r3, #4
 8001682:	4bad      	ldr	r3, [pc, #692]	@ (8001938 <main+0x378>)
 8001684:	6819      	ldr	r1, [r3, #0]
 8001686:	4bad      	ldr	r3, [pc, #692]	@ (800193c <main+0x37c>)
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	4bad      	ldr	r3, [pc, #692]	@ (8001940 <main+0x380>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	9304      	str	r3, [sp, #16]
 8001690:	9003      	str	r0, [sp, #12]
 8001692:	9102      	str	r1, [sp, #8]
 8001694:	4bab      	ldr	r3, [pc, #684]	@ (8001944 <main+0x384>)
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	9200      	str	r2, [sp, #0]
 800169a:	4663      	mov	r3, ip
 800169c:	0032      	movs	r2, r6
 800169e:	0029      	movs	r1, r5
 80016a0:	0020      	movs	r0, r4
 80016a2:	f001 fa4f 	bl	8002b44 <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


		halRet = updateAndDisplayTime();
 80016a6:	2517      	movs	r5, #23
 80016a8:	197c      	adds	r4, r7, r5
 80016aa:	f000 fcf9 	bl	80020a0 <updateAndDisplayTime>
 80016ae:	0003      	movs	r3, r0
 80016b0:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 80016b2:	197b      	adds	r3, r7, r5
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <main+0xfe>
		  // Failure to display current time is a hard failure
		  dispFailure();
 80016ba:	f001 f965 	bl	8002988 <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

		// Used to separate return initializations into critical and non-critical errors.
		uint8_t initRet = 0;
 80016be:	2116      	movs	r1, #22
 80016c0:	187b      	adds	r3, r7, r1
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]

		initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 80016c6:	4b9c      	ldr	r3, [pc, #624]	@ (8001938 <main+0x378>)
 80016c8:	681d      	ldr	r5, [r3, #0]
 80016ca:	2380      	movs	r3, #128	@ 0x80
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4a9e      	ldr	r2, [pc, #632]	@ (8001948 <main+0x388>)
 80016d0:	7812      	ldrb	r2, [r2, #0]
 80016d2:	187c      	adds	r4, r7, r1
 80016d4:	4e9d      	ldr	r6, [pc, #628]	@ (800194c <main+0x38c>)
 80016d6:	499e      	ldr	r1, [pc, #632]	@ (8001950 <main+0x390>)
 80016d8:	489e      	ldr	r0, [pc, #632]	@ (8001954 <main+0x394>)
 80016da:	9201      	str	r2, [sp, #4]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	0033      	movs	r3, r6
 80016e0:	002a      	movs	r2, r5
 80016e2:	f7fe fd9b 	bl	800021c <capTouch_Init>
 80016e6:	0003      	movs	r3, r0
 80016e8:	7023      	strb	r3, [r4, #0]
								&capTouchResetPort, capTouchResetPin, capTouchChannels);
		if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 80016ea:	2116      	movs	r1, #22
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d007      	beq.n	8001704 <main+0x144>
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d003      	beq.n	8001704 <main+0x144>
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b04      	cmp	r3, #4
 8001702:	d102      	bne.n	800170a <main+0x14a>
			/* Critical Errors:
			 * 1 = Failure to read correct device ID
			 * 2 = Failure to read Keys
			 * 3 = Failure to enable keys
			 */
			dispFailure();
 8001704:	f001 f940 	bl	8002988 <dispFailure>
 8001708:	e00d      	b.n	8001726 <main+0x166>
		}
		else if (initRet == 2) {
 800170a:	2316      	movs	r3, #22
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d102      	bne.n	800171a <main+0x15a>
			/*
			 * Non-critical Errors:
			 * 2 = Failure to Recalibrate
			 */
			dispFault();
 8001714:	f001 f928 	bl	8002968 <dispFault>
 8001718:	e005      	b.n	8001726 <main+0x166>
		}
		else if(initRet == 0) {
 800171a:	2316      	movs	r3, #22
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d100      	bne.n	8001726 <main+0x166>
			// initRet = 0 = all is well
			__NOP();
 8001724:	46c0      	nop			@ (mov r8, r8)
		}

		// Set averaging factor
		uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8001726:	4b8c      	ldr	r3, [pc, #560]	@ (8001958 <main+0x398>)
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	210c      	movs	r1, #12
 800172c:	187b      	adds	r3, r7, r1
 800172e:	701a      	strb	r2, [r3, #0]
 8001730:	4b89      	ldr	r3, [pc, #548]	@ (8001958 <main+0x398>)
 8001732:	781a      	ldrb	r2, [r3, #0]
 8001734:	187b      	adds	r3, r7, r1
 8001736:	705a      	strb	r2, [r3, #1]
 8001738:	4b87      	ldr	r3, [pc, #540]	@ (8001958 <main+0x398>)
 800173a:	781a      	ldrb	r2, [r3, #0]
 800173c:	187b      	adds	r3, r7, r1
 800173e:	709a      	strb	r2, [r3, #2]
 8001740:	4b85      	ldr	r3, [pc, #532]	@ (8001958 <main+0x398>)
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	187b      	adds	r3, r7, r1
 8001746:	70da      	strb	r2, [r3, #3]
 8001748:	187b      	adds	r3, r7, r1
 800174a:	2200      	movs	r2, #0
 800174c:	711a      	strb	r2, [r3, #4]
 800174e:	187b      	adds	r3, r7, r1
 8001750:	2200      	movs	r2, #0
 8001752:	715a      	strb	r2, [r3, #5]
 8001754:	187b      	adds	r3, r7, r1
 8001756:	2200      	movs	r2, #0
 8001758:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 800175a:	2517      	movs	r5, #23
 800175c:	197c      	adds	r4, r7, r5
 800175e:	187a      	adds	r2, r7, r1
 8001760:	4b7c      	ldr	r3, [pc, #496]	@ (8001954 <main+0x394>)
 8001762:	0011      	movs	r1, r2
 8001764:	0018      	movs	r0, r3
 8001766:	f7fe ffcd 	bl	8000704 <capTouch_SetAveragingFactor>
 800176a:	0003      	movs	r3, r0
 800176c:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 800176e:	197b      	adds	r3, r7, r5
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <main+0x1ba>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 8001776:	f001 f8f7 	bl	8002968 <dispFault>
		}

		// Set detection integration factors
		uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 800177a:	4b78      	ldr	r3, [pc, #480]	@ (800195c <main+0x39c>)
 800177c:	781a      	ldrb	r2, [r3, #0]
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	4b76      	ldr	r3, [pc, #472]	@ (800195c <main+0x39c>)
 8001784:	781a      	ldrb	r2, [r3, #0]
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	705a      	strb	r2, [r3, #1]
 800178a:	4b74      	ldr	r3, [pc, #464]	@ (800195c <main+0x39c>)
 800178c:	781a      	ldrb	r2, [r3, #0]
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	709a      	strb	r2, [r3, #2]
 8001792:	4b72      	ldr	r3, [pc, #456]	@ (800195c <main+0x39c>)
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	70da      	strb	r2, [r3, #3]
 800179a:	4b70      	ldr	r3, [pc, #448]	@ (800195c <main+0x39c>)
 800179c:	781a      	ldrb	r2, [r3, #0]
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	711a      	strb	r2, [r3, #4]
 80017a2:	4b6e      	ldr	r3, [pc, #440]	@ (800195c <main+0x39c>)
 80017a4:	781a      	ldrb	r2, [r3, #0]
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	715a      	strb	r2, [r3, #5]
 80017aa:	4b6c      	ldr	r3, [pc, #432]	@ (800195c <main+0x39c>)
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 80017b2:	2517      	movs	r5, #23
 80017b4:	197c      	adds	r4, r7, r5
 80017b6:	1d3a      	adds	r2, r7, #4
 80017b8:	4b66      	ldr	r3, [pc, #408]	@ (8001954 <main+0x394>)
 80017ba:	0011      	movs	r1, r2
 80017bc:	0018      	movs	r0, r3
 80017be:	f7ff f86b 	bl	8000898 <capTouch_SetDetectionIntegrator>
 80017c2:	0003      	movs	r3, r0
 80017c4:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 80017c6:	197b      	adds	r3, r7, r5
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <main+0x212>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 80017ce:	f001 f8cb 	bl	8002968 <dispFault>
		}

		userAlarmToggle = false;			//Default to off
 80017d2:	4b63      	ldr	r3, [pc, #396]	@ (8001960 <main+0x3a0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

		if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 80017d8:	4b62      	ldr	r3, [pc, #392]	@ (8001964 <main+0x3a4>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b53      	ldr	r3, [pc, #332]	@ (800192c <main+0x36c>)
 80017de:	0011      	movs	r1, r2
 80017e0:	0018      	movs	r0, r3
 80017e2:	f005 fb12 	bl	8006e0a <HAL_RTCEx_BKUPRead>
 80017e6:	0003      	movs	r3, r0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d11c      	bne.n	8001828 <main+0x268>

			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 80017ee:	4b5e      	ldr	r3, [pc, #376]	@ (8001968 <main+0x3a8>)
 80017f0:	6819      	ldr	r1, [r3, #0]
 80017f2:	4b4e      	ldr	r3, [pc, #312]	@ (800192c <main+0x36c>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	0018      	movs	r0, r3
 80017f8:	f005 faea 	bl	8006dd0 <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 80017fc:	4b5b      	ldr	r3, [pc, #364]	@ (800196c <main+0x3ac>)
 80017fe:	6819      	ldr	r1, [r3, #0]
 8001800:	4b4a      	ldr	r3, [pc, #296]	@ (800192c <main+0x36c>)
 8001802:	2200      	movs	r2, #0
 8001804:	0018      	movs	r0, r3
 8001806:	f005 fae3 	bl	8006dd0 <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 800180a:	4b59      	ldr	r3, [pc, #356]	@ (8001970 <main+0x3b0>)
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	4b47      	ldr	r3, [pc, #284]	@ (800192c <main+0x36c>)
 8001810:	2200      	movs	r2, #0
 8001812:	0018      	movs	r0, r3
 8001814:	f005 fadc 	bl	8006dd0 <HAL_RTCEx_BKUPWrite>

			// Write backup register with a non-zero value to signify that it has been initialized before
			HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8001818:	4b52      	ldr	r3, [pc, #328]	@ (8001964 <main+0x3a4>)
 800181a:	6819      	ldr	r1, [r3, #0]
 800181c:	2301      	movs	r3, #1
 800181e:	425a      	negs	r2, r3
 8001820:	4b42      	ldr	r3, [pc, #264]	@ (800192c <main+0x36c>)
 8001822:	0018      	movs	r0, r3
 8001824:	f005 fad4 	bl	8006dd0 <HAL_RTCEx_BKUPWrite>

		}

		userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8001828:	4b4f      	ldr	r3, [pc, #316]	@ (8001968 <main+0x3a8>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b3f      	ldr	r3, [pc, #252]	@ (800192c <main+0x36c>)
 800182e:	0011      	movs	r1, r2
 8001830:	0018      	movs	r0, r3
 8001832:	f005 faea 	bl	8006e0a <HAL_RTCEx_BKUPRead>
 8001836:	0003      	movs	r3, r0
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4b4e      	ldr	r3, [pc, #312]	@ (8001974 <main+0x3b4>)
 800183c:	701a      	strb	r2, [r3, #0]
		userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 800183e:	4b4b      	ldr	r3, [pc, #300]	@ (800196c <main+0x3ac>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b3a      	ldr	r3, [pc, #232]	@ (800192c <main+0x36c>)
 8001844:	0011      	movs	r1, r2
 8001846:	0018      	movs	r0, r3
 8001848:	f005 fadf 	bl	8006e0a <HAL_RTCEx_BKUPRead>
 800184c:	0003      	movs	r3, r0
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b48      	ldr	r3, [pc, #288]	@ (8001974 <main+0x3b4>)
 8001852:	705a      	strb	r2, [r3, #1]
		userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 8001854:	4b46      	ldr	r3, [pc, #280]	@ (8001970 <main+0x3b0>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b34      	ldr	r3, [pc, #208]	@ (800192c <main+0x36c>)
 800185a:	0011      	movs	r1, r2
 800185c:	0018      	movs	r0, r3
 800185e:	f005 fad4 	bl	8006e0a <HAL_RTCEx_BKUPRead>
 8001862:	0003      	movs	r3, r0
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b43      	ldr	r3, [pc, #268]	@ (8001974 <main+0x3b4>)
 8001868:	70da      	strb	r2, [r3, #3]


		// Init Memory Chip
		initRet = W25Q_Init(&spiFlash, nCSPort, nWPPort, nHOLDPort,
 800186a:	4b43      	ldr	r3, [pc, #268]	@ (8001978 <main+0x3b8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4698      	mov	r8, r3
 8001870:	4b42      	ldr	r3, [pc, #264]	@ (800197c <main+0x3bc>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4699      	mov	r9, r3
 8001876:	4b42      	ldr	r3, [pc, #264]	@ (8001980 <main+0x3c0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	469a      	mov	sl, r3
 800187c:	4b41      	ldr	r3, [pc, #260]	@ (8001984 <main+0x3c4>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b41      	ldr	r3, [pc, #260]	@ (8001988 <main+0x3c8>)
 8001882:	6819      	ldr	r1, [r3, #0]
 8001884:	4b41      	ldr	r3, [pc, #260]	@ (800198c <main+0x3cc>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	469b      	mov	fp, r3
 800188a:	4841      	ldr	r0, [pc, #260]	@ (8001990 <main+0x3d0>)
 800188c:	7800      	ldrb	r0, [r0, #0]
 800188e:	4c41      	ldr	r4, [pc, #260]	@ (8001994 <main+0x3d4>)
 8001890:	7825      	ldrb	r5, [r4, #0]
 8001892:	4c41      	ldr	r4, [pc, #260]	@ (8001998 <main+0x3d8>)
 8001894:	7826      	ldrb	r6, [r4, #0]
 8001896:	2416      	movs	r4, #22
 8001898:	193c      	adds	r4, r7, r4
 800189a:	4b40      	ldr	r3, [pc, #256]	@ (800199c <main+0x3dc>)
 800189c:	469c      	mov	ip, r3
 800189e:	9606      	str	r6, [sp, #24]
 80018a0:	9505      	str	r5, [sp, #20]
 80018a2:	9004      	str	r0, [sp, #16]
 80018a4:	483e      	ldr	r0, [pc, #248]	@ (80019a0 <main+0x3e0>)
 80018a6:	9003      	str	r0, [sp, #12]
 80018a8:	465b      	mov	r3, fp
 80018aa:	9302      	str	r3, [sp, #8]
 80018ac:	9101      	str	r1, [sp, #4]
 80018ae:	9200      	str	r2, [sp, #0]
 80018b0:	4653      	mov	r3, sl
 80018b2:	464a      	mov	r2, r9
 80018b4:	4641      	mov	r1, r8
 80018b6:	4660      	mov	r0, ip
 80018b8:	f7ff f88c 	bl	80009d4 <W25Q_Init>
 80018bc:	0003      	movs	r3, r0
 80018be:	7023      	strb	r3, [r4, #0]
	    		 nCSPin, nWPPin, nHOLDPin, &hspi2, spiFlash_devID, spiFlash_isQuadChip, spiFlash_driveStrength);

		// Enter error loop if there's an error in initialization
		if( (initRet == 1) || (initRet == 7) ) {
 80018c0:	2216      	movs	r2, #22
 80018c2:	18bb      	adds	r3, r7, r2
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d003      	beq.n	80018d2 <main+0x312>
 80018ca:	18bb      	adds	r3, r7, r2
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b07      	cmp	r3, #7
 80018d0:	d102      	bne.n	80018d8 <main+0x318>
			/* Critical Errors:
			* 1 = Failure to release chip from power down
			* 7 = Failure to disable write protection
			*/
			dispFailure();
 80018d2:	f001 f859 	bl	8002988 <dispFailure>
 80018d6:	e016      	b.n	8001906 <main+0x346>
		}
		else if ( ((initRet >= 2) && (initRet <= 6)) || (initRet == 8) ) {
 80018d8:	2216      	movs	r2, #22
 80018da:	18bb      	adds	r3, r7, r2
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d903      	bls.n	80018ea <main+0x32a>
 80018e2:	18bb      	adds	r3, r7, r2
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d904      	bls.n	80018f4 <main+0x334>
 80018ea:	2316      	movs	r3, #22
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d102      	bne.n	80018fa <main+0x33a>
			* 2 = Failure to reset chip
			* 3,6,8 = Failure to read status registers
			* 4 = Failure to set driver strength
			* 5 = Failure to read device ID
			*/
			dispFault();
 80018f4:	f001 f838 	bl	8002968 <dispFault>
 80018f8:	e005      	b.n	8001906 <main+0x346>
		}
		else if(initRet == 0) {
 80018fa:	2316      	movs	r3, #22
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d100      	bne.n	8001906 <main+0x346>
			// initRet = 0 = all is well
			__NOP();
 8001904:	46c0      	nop			@ (mov r8, r8)
		}


		// Init i2s amplifier
		NAU9315YG_Init(&i2sAmp, &hi2s1, i2sAmp_enablePort, i2sAmp_enablePin);
 8001906:	4b27      	ldr	r3, [pc, #156]	@ (80019a4 <main+0x3e4>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4b27      	ldr	r3, [pc, #156]	@ (80019a8 <main+0x3e8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4927      	ldr	r1, [pc, #156]	@ (80019ac <main+0x3ec>)
 8001910:	4827      	ldr	r0, [pc, #156]	@ (80019b0 <main+0x3f0>)
 8001912:	f7ff f833 	bl	800097c <NAU9315YG_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8001916:	46c0      	nop			@ (mov r8, r8)
 8001918:	e7fd      	b.n	8001916 <main+0x356>
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	20000008 	.word	0x20000008
 8001920:	20000040 	.word	0x20000040
 8001924:	200000ec 	.word	0x200000ec
 8001928:	2000002c 	.word	0x2000002c
 800192c:	200001dc 	.word	0x200001dc
 8001930:	200000d0 	.word	0x200000d0
 8001934:	200000bc 	.word	0x200000bc
 8001938:	2000006c 	.word	0x2000006c
 800193c:	20000068 	.word	0x20000068
 8001940:	20000030 	.word	0x20000030
 8001944:	20000014 	.word	0x20000014
 8001948:	20000010 	.word	0x20000010
 800194c:	2000000c 	.word	0x2000000c
 8001950:	200000f0 	.word	0x200000f0
 8001954:	2000040c 	.word	0x2000040c
 8001958:	20000011 	.word	0x20000011
 800195c:	20000012 	.word	0x20000012
 8001960:	200000b9 	.word	0x200000b9
 8001964:	2000003c 	.word	0x2000003c
 8001968:	200000e8 	.word	0x200000e8
 800196c:	20000034 	.word	0x20000034
 8001970:	20000038 	.word	0x20000038
 8001974:	200000d4 	.word	0x200000d4
 8001978:	20000044 	.word	0x20000044
 800197c:	20000048 	.word	0x20000048
 8001980:	2000004c 	.word	0x2000004c
 8001984:	20000050 	.word	0x20000050
 8001988:	20000054 	.word	0x20000054
 800198c:	20000058 	.word	0x20000058
 8001990:	2000005c 	.word	0x2000005c
 8001994:	2000005d 	.word	0x2000005d
 8001998:	2000005e 	.word	0x2000005e
 800199c:	20000420 	.word	0x20000420
 80019a0:	20000208 	.word	0x20000208
 80019a4:	20000060 	.word	0x20000060
 80019a8:	20000064 	.word	0x20000064
 80019ac:	20000144 	.word	0x20000144
 80019b0:	20000448 	.word	0x20000448

080019b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b093      	sub	sp, #76	@ 0x4c
 80019b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ba:	2410      	movs	r4, #16
 80019bc:	193b      	adds	r3, r7, r4
 80019be:	0018      	movs	r0, r3
 80019c0:	2338      	movs	r3, #56	@ 0x38
 80019c2:	001a      	movs	r2, r3
 80019c4:	2100      	movs	r1, #0
 80019c6:	f007 f9c9 	bl	8008d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ca:	003b      	movs	r3, r7
 80019cc:	0018      	movs	r0, r3
 80019ce:	2310      	movs	r3, #16
 80019d0:	001a      	movs	r2, r3
 80019d2:	2100      	movs	r1, #0
 80019d4:	f007 f9c2 	bl	8008d5c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d8:	2380      	movs	r3, #128	@ 0x80
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	0018      	movs	r0, r3
 80019de:	f003 fa83 	bl	8004ee8 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019e2:	f003 fa63 	bl	8004eac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80019e6:	4b28      	ldr	r3, [pc, #160]	@ (8001a88 <SystemClock_Config+0xd4>)
 80019e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019ea:	4b27      	ldr	r3, [pc, #156]	@ (8001a88 <SystemClock_Config+0xd4>)
 80019ec:	2118      	movs	r1, #24
 80019ee:	438a      	bics	r2, r1
 80019f0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 80019f2:	193b      	adds	r3, r7, r4
 80019f4:	220d      	movs	r2, #13
 80019f6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019f8:	193b      	adds	r3, r7, r4
 80019fa:	2280      	movs	r2, #128	@ 0x80
 80019fc:	0252      	lsls	r2, r2, #9
 80019fe:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a00:	0021      	movs	r1, r4
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	2201      	movs	r2, #1
 8001a06:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	2202      	movs	r2, #2
 8001a12:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	2203      	movs	r2, #3
 8001a18:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001a1a:	187b      	adds	r3, r7, r1
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	2208      	movs	r2, #8
 8001a24:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	22c0      	movs	r2, #192	@ 0xc0
 8001a2a:	02d2      	lsls	r2, r2, #11
 8001a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a2e:	187b      	adds	r3, r7, r1
 8001a30:	2280      	movs	r2, #128	@ 0x80
 8001a32:	0492      	lsls	r2, r2, #18
 8001a34:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a36:	187b      	adds	r3, r7, r1
 8001a38:	2280      	movs	r2, #128	@ 0x80
 8001a3a:	0592      	lsls	r2, r2, #22
 8001a3c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a3e:	187b      	adds	r3, r7, r1
 8001a40:	0018      	movs	r0, r3
 8001a42:	f003 fa9d 	bl	8004f80 <HAL_RCC_OscConfig>
 8001a46:	1e03      	subs	r3, r0, #0
 8001a48:	d001      	beq.n	8001a4e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a4a:	f001 f874 	bl	8002b36 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a4e:	003b      	movs	r3, r7
 8001a50:	2207      	movs	r2, #7
 8001a52:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a54:	003b      	movs	r3, r7
 8001a56:	2202      	movs	r2, #2
 8001a58:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a5a:	003b      	movs	r3, r7
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a60:	003b      	movs	r3, r7
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a66:	003b      	movs	r3, r7
 8001a68:	2102      	movs	r1, #2
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f003 fda2 	bl	80055b4 <HAL_RCC_ClockConfig>
 8001a70:	1e03      	subs	r3, r0, #0
 8001a72:	d001      	beq.n	8001a78 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a74:	f001 f85f 	bl	8002b36 <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f004 fb55 	bl	8006128 <HAL_RCCEx_EnableLSCO>
}
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b013      	add	sp, #76	@ 0x4c
 8001a84:	bd90      	pop	{r4, r7, pc}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	40021000 	.word	0x40021000

08001a8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a90:	4b1b      	ldr	r3, [pc, #108]	@ (8001b00 <MX_I2C1_Init+0x74>)
 8001a92:	4a1c      	ldr	r2, [pc, #112]	@ (8001b04 <MX_I2C1_Init+0x78>)
 8001a94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8001a96:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <MX_I2C1_Init+0x74>)
 8001a98:	4a1b      	ldr	r2, [pc, #108]	@ (8001b08 <MX_I2C1_Init+0x7c>)
 8001a9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <MX_I2C1_Init+0x74>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <MX_I2C1_Init+0x74>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <MX_I2C1_Init+0x74>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001aae:	4b14      	ldr	r3, [pc, #80]	@ (8001b00 <MX_I2C1_Init+0x74>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ab4:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <MX_I2C1_Init+0x74>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aba:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <MX_I2C1_Init+0x74>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b00 <MX_I2C1_Init+0x74>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <MX_I2C1_Init+0x74>)
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f002 fab5 	bl	8004038 <HAL_I2C_Init>
 8001ace:	1e03      	subs	r3, r0, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ad2:	f001 f830 	bl	8002b36 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b00 <MX_I2C1_Init+0x74>)
 8001ad8:	2100      	movs	r1, #0
 8001ada:	0018      	movs	r0, r3
 8001adc:	f003 f858 	bl	8004b90 <HAL_I2CEx_ConfigAnalogFilter>
 8001ae0:	1e03      	subs	r3, r0, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ae4:	f001 f827 	bl	8002b36 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ae8:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <MX_I2C1_Init+0x74>)
 8001aea:	2100      	movs	r1, #0
 8001aec:	0018      	movs	r0, r3
 8001aee:	f003 f89b 	bl	8004c28 <HAL_I2CEx_ConfigDigitalFilter>
 8001af2:	1e03      	subs	r3, r0, #0
 8001af4:	d001      	beq.n	8001afa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001af6:	f001 f81e 	bl	8002b36 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	200000f0 	.word	0x200000f0
 8001b04:	40005400 	.word	0x40005400
 8001b08:	00602173 	.word	0x00602173

08001b0c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001b10:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <MX_I2S1_Init+0x48>)
 8001b12:	4a11      	ldr	r2, [pc, #68]	@ (8001b58 <MX_I2S1_Init+0x4c>)
 8001b14:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8001b16:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <MX_I2S1_Init+0x48>)
 8001b18:	2280      	movs	r2, #128	@ 0x80
 8001b1a:	0092      	lsls	r2, r2, #2
 8001b1c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <MX_I2S1_Init+0x48>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001b24:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <MX_I2S1_Init+0x48>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <MX_I2S1_Init+0x48>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001b30:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <MX_I2S1_Init+0x48>)
 8001b32:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <MX_I2S1_Init+0x50>)
 8001b34:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8001b36:	4b07      	ldr	r3, [pc, #28]	@ (8001b54 <MX_I2S1_Init+0x48>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <MX_I2S1_Init+0x48>)
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f003 f8be 	bl	8004cc0 <HAL_I2S_Init>
 8001b44:	1e03      	subs	r3, r0, #0
 8001b46:	d001      	beq.n	8001b4c <MX_I2S1_Init+0x40>
  {
    Error_Handler();
 8001b48:	f000 fff5 	bl	8002b36 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8001b4c:	46c0      	nop			@ (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			@ (mov r8, r8)
 8001b54:	20000144 	.word	0x20000144
 8001b58:	40013000 	.word	0x40013000
 8001b5c:	0000ac44 	.word	0x0000ac44

08001b60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	@ 0x28
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 0 */

//  RTC_TimeTypeDef sTime = {0};
//  RTC_DateTypeDef sDate = {0};
  RTC_AlarmTypeDef sAlarm = {0};
 8001b66:	003b      	movs	r3, r7
 8001b68:	0018      	movs	r0, r3
 8001b6a:	2328      	movs	r3, #40	@ 0x28
 8001b6c:	001a      	movs	r2, r3
 8001b6e:	2100      	movs	r1, #0
 8001b70:	f007 f8f4 	bl	8008d5c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b74:	4b33      	ldr	r3, [pc, #204]	@ (8001c44 <MX_RTC_Init+0xe4>)
 8001b76:	4a34      	ldr	r2, [pc, #208]	@ (8001c48 <MX_RTC_Init+0xe8>)
 8001b78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001b7a:	4b32      	ldr	r3, [pc, #200]	@ (8001c44 <MX_RTC_Init+0xe4>)
 8001b7c:	2240      	movs	r2, #64	@ 0x40
 8001b7e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8001b80:	4b30      	ldr	r3, [pc, #192]	@ (8001c44 <MX_RTC_Init+0xe4>)
 8001b82:	227f      	movs	r2, #127	@ 0x7f
 8001b84:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8001b86:	4b2f      	ldr	r3, [pc, #188]	@ (8001c44 <MX_RTC_Init+0xe4>)
 8001b88:	22ff      	movs	r2, #255	@ 0xff
 8001b8a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c44 <MX_RTC_Init+0xe4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b92:	4b2c      	ldr	r3, [pc, #176]	@ (8001c44 <MX_RTC_Init+0xe4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b98:	4b2a      	ldr	r3, [pc, #168]	@ (8001c44 <MX_RTC_Init+0xe4>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b9e:	4b29      	ldr	r3, [pc, #164]	@ (8001c44 <MX_RTC_Init+0xe4>)
 8001ba0:	2280      	movs	r2, #128	@ 0x80
 8001ba2:	05d2      	lsls	r2, r2, #23
 8001ba4:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001ba6:	4b27      	ldr	r3, [pc, #156]	@ (8001c44 <MX_RTC_Init+0xe4>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bac:	4b25      	ldr	r3, [pc, #148]	@ (8001c44 <MX_RTC_Init+0xe4>)
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f004 fb32 	bl	8006218 <HAL_RTC_Init>
 8001bb4:	1e03      	subs	r3, r0, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001bb8:	f000 ffbd 	bl	8002b36 <Error_Handler>
//    Error_Handler();
//  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8001bbc:	003b      	movs	r3, r7
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001bc2:	003b      	movs	r3, r7
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001bc8:	003b      	movs	r3, r7
 8001bca:	2200      	movs	r2, #0
 8001bcc:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001bce:	003b      	movs	r3, r7
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001bd4:	003b      	movs	r3, r7
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bda:	003b      	movs	r3, r7
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001be0:	003b      	movs	r3, r7
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8001be6:	003b      	movs	r3, r7
 8001be8:	4a18      	ldr	r2, [pc, #96]	@ (8001c4c <MX_RTC_Init+0xec>)
 8001bea:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001bec:	003b      	movs	r3, r7
 8001bee:	2200      	movs	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001bf2:	003b      	movs	r3, r7
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001bf8:	003b      	movs	r3, r7
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c00:	003b      	movs	r3, r7
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	0052      	lsls	r2, r2, #1
 8001c06:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c08:	0039      	movs	r1, r7
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <MX_RTC_Init+0xe4>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f004 fcf6 	bl	8006600 <HAL_RTC_SetAlarm_IT>
 8001c14:	1e03      	subs	r3, r0, #0
 8001c16:	d001      	beq.n	8001c1c <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8001c18:	f000 ff8d 	bl	8002b36 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8001c1c:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <MX_RTC_Init+0xe4>)
 8001c1e:	2100      	movs	r1, #0
 8001c20:	0018      	movs	r0, r3
 8001c22:	f005 f885 	bl	8006d30 <HAL_RTCEx_SetCalibrationOutPut>
 8001c26:	1e03      	subs	r3, r0, #0
 8001c28:	d001      	beq.n	8001c2e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001c2a:	f000 ff84 	bl	8002b36 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8001c2e:	4908      	ldr	r1, [pc, #32]	@ (8001c50 <MX_RTC_Init+0xf0>)
 8001c30:	4b04      	ldr	r3, [pc, #16]	@ (8001c44 <MX_RTC_Init+0xe4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	0018      	movs	r0, r3
 8001c36:	f004 fc39 	bl	80064ac <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8001c3a:	46c0      	nop			@ (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b00a      	add	sp, #40	@ 0x28
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			@ (mov r8, r8)
 8001c44:	200001dc 	.word	0x200001dc
 8001c48:	40002800 	.word	0x40002800
 8001c4c:	80800080 	.word	0x80800080
 8001c50:	200000bc 	.word	0x200000bc

08001c54 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001ccc <MX_SPI2_Init+0x78>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c60:	2282      	movs	r2, #130	@ 0x82
 8001c62:	0052      	lsls	r2, r2, #1
 8001c64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c66:	4b18      	ldr	r3, [pc, #96]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c6c:	4b16      	ldr	r3, [pc, #88]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c6e:	22e0      	movs	r2, #224	@ 0xe0
 8001c70:	00d2      	lsls	r2, r2, #3
 8001c72:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c74:	4b14      	ldr	r3, [pc, #80]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c7a:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c80:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c82:	2280      	movs	r2, #128	@ 0x80
 8001c84:	0092      	lsls	r2, r2, #2
 8001c86:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c88:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c8a:	2210      	movs	r2, #16
 8001c8c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001ca2:	2207      	movs	r2, #7
 8001ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ca6:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001cae:	2208      	movs	r2, #8
 8001cb0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cb2:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <MX_SPI2_Init+0x74>)
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f005 f8c3 	bl	8006e40 <HAL_SPI_Init>
 8001cba:	1e03      	subs	r3, r0, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001cbe:	f000 ff3a 	bl	8002b36 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cc2:	46c0      	nop			@ (mov r8, r8)
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000208 	.word	0x20000208
 8001ccc:	40003800 	.word	0x40003800

08001cd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	@ 0x28
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd6:	231c      	movs	r3, #28
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	0018      	movs	r0, r3
 8001cdc:	230c      	movs	r3, #12
 8001cde:	001a      	movs	r2, r3
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	f007 f83b 	bl	8008d5c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce6:	003b      	movs	r3, r7
 8001ce8:	0018      	movs	r0, r3
 8001cea:	231c      	movs	r3, #28
 8001cec:	001a      	movs	r2, r3
 8001cee:	2100      	movs	r1, #0
 8001cf0:	f007 f834 	bl	8008d5c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cf4:	4b24      	ldr	r3, [pc, #144]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001cf6:	2280      	movs	r2, #128	@ 0x80
 8001cf8:	05d2      	lsls	r2, r2, #23
 8001cfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8001cfc:	4b22      	ldr	r3, [pc, #136]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001cfe:	4a23      	ldr	r2, [pc, #140]	@ (8001d8c <MX_TIM2_Init+0xbc>)
 8001d00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d02:	4b21      	ldr	r3, [pc, #132]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001d08:	4b1f      	ldr	r3, [pc, #124]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001d0a:	2263      	movs	r2, #99	@ 0x63
 8001d0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d14:	4b1c      	ldr	r3, [pc, #112]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f006 f8fb 	bl	8007f18 <HAL_TIM_PWM_Init>
 8001d22:	1e03      	subs	r3, r0, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d26:	f000 ff06 	bl	8002b36 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2a:	211c      	movs	r1, #28
 8001d2c:	187b      	adds	r3, r7, r1
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d32:	187b      	adds	r3, r7, r1
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d38:	187a      	adds	r2, r7, r1
 8001d3a:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001d3c:	0011      	movs	r1, r2
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f006 ff8c 	bl	8008c5c <HAL_TIMEx_MasterConfigSynchronization>
 8001d44:	1e03      	subs	r3, r0, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001d48:	f000 fef5 	bl	8002b36 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d4c:	003b      	movs	r3, r7
 8001d4e:	2260      	movs	r2, #96	@ 0x60
 8001d50:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001d52:	003b      	movs	r3, r7
 8001d54:	2200      	movs	r2, #0
 8001d56:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d58:	003b      	movs	r3, r7
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d5e:	003b      	movs	r3, r7
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d64:	0039      	movs	r1, r7
 8001d66:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001d68:	2208      	movs	r2, #8
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f006 fb12 	bl	8008394 <HAL_TIM_PWM_ConfigChannel>
 8001d70:	1e03      	subs	r3, r0, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001d74:	f000 fedf 	bl	8002b36 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <MX_TIM2_Init+0xb8>)
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f001 fba4 	bl	80034c8 <HAL_TIM_MspPostInit>

}
 8001d80:	46c0      	nop			@ (mov r8, r8)
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b00a      	add	sp, #40	@ 0x28
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000324 	.word	0x20000324
 8001d8c:	0000031f 	.word	0x0000031f

08001d90 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001d94:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <MX_TIM14_Init+0x40>)
 8001d96:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd4 <MX_TIM14_Init+0x44>)
 8001d98:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <MX_TIM14_Init+0x40>)
 8001d9c:	22f4      	movs	r2, #244	@ 0xf4
 8001d9e:	0092      	lsls	r2, r2, #2
 8001da0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <MX_TIM14_Init+0x40>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001da8:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <MX_TIM14_Init+0x40>)
 8001daa:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd8 <MX_TIM14_Init+0x48>)
 8001dac:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dae:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <MX_TIM14_Init+0x40>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <MX_TIM14_Init+0x40>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001dba:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <MX_TIM14_Init+0x40>)
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f005 ff5f 	bl	8007c80 <HAL_TIM_Base_Init>
 8001dc2:	1e03      	subs	r3, r0, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001dc6:	f000 feb6 	bl	8002b36 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001dca:	46c0      	nop			@ (mov r8, r8)
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000370 	.word	0x20000370
 8001dd4:	40002000 	.word	0x40002000
 8001dd8:	0000ffff 	.word	0x0000ffff

08001ddc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001de0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <MX_TIM16_Init+0x44>)
 8001de2:	4a10      	ldr	r2, [pc, #64]	@ (8001e24 <MX_TIM16_Init+0x48>)
 8001de4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 58595;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e20 <MX_TIM16_Init+0x44>)
 8001de8:	4a0f      	ldr	r2, [pc, #60]	@ (8001e28 <MX_TIM16_Init+0x4c>)
 8001dea:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <MX_TIM16_Init+0x44>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001df2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <MX_TIM16_Init+0x44>)
 8001df4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <MX_TIM16_Init+0x50>)
 8001df6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df8:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <MX_TIM16_Init+0x44>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 10;
 8001dfe:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <MX_TIM16_Init+0x44>)
 8001e00:	220a      	movs	r2, #10
 8001e02:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <MX_TIM16_Init+0x44>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e0a:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <MX_TIM16_Init+0x44>)
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f005 ff37 	bl	8007c80 <HAL_TIM_Base_Init>
 8001e12:	1e03      	subs	r3, r0, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001e16:	f000 fe8e 	bl	8002b36 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001e1a:	46c0      	nop			@ (mov r8, r8)
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	200003bc 	.word	0x200003bc
 8001e24:	40014400 	.word	0x40014400
 8001e28:	0000e4e3 	.word	0x0000e4e3
 8001e2c:	0000ffff 	.word	0x0000ffff

08001e30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e36:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <MX_DMA_Init+0x48>)
 8001e38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <MX_DMA_Init+0x48>)
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e42:	4b0d      	ldr	r3, [pc, #52]	@ (8001e78 <MX_DMA_Init+0x48>)
 8001e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e46:	2201      	movs	r2, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2009      	movs	r0, #9
 8001e54:	f001 fd4e 	bl	80038f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e58:	2009      	movs	r0, #9
 8001e5a:	f001 fd60 	bl	800391e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	200a      	movs	r0, #10
 8001e64:	f001 fd46 	bl	80038f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001e68:	200a      	movs	r0, #10
 8001e6a:	f001 fd58 	bl	800391e <HAL_NVIC_EnableIRQ>

}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b002      	add	sp, #8
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	40021000 	.word	0x40021000

08001e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b08b      	sub	sp, #44	@ 0x2c
 8001e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	2414      	movs	r4, #20
 8001e84:	193b      	adds	r3, r7, r4
 8001e86:	0018      	movs	r0, r3
 8001e88:	2314      	movs	r3, #20
 8001e8a:	001a      	movs	r2, r3
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	f006 ff65 	bl	8008d5c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e92:	4b7d      	ldr	r3, [pc, #500]	@ (8002088 <MX_GPIO_Init+0x20c>)
 8001e94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e96:	4b7c      	ldr	r3, [pc, #496]	@ (8002088 <MX_GPIO_Init+0x20c>)
 8001e98:	2104      	movs	r1, #4
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e9e:	4b7a      	ldr	r3, [pc, #488]	@ (8002088 <MX_GPIO_Init+0x20c>)
 8001ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eaa:	4b77      	ldr	r3, [pc, #476]	@ (8002088 <MX_GPIO_Init+0x20c>)
 8001eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eae:	4b76      	ldr	r3, [pc, #472]	@ (8002088 <MX_GPIO_Init+0x20c>)
 8001eb0:	2120      	movs	r1, #32
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eb6:	4b74      	ldr	r3, [pc, #464]	@ (8002088 <MX_GPIO_Init+0x20c>)
 8001eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eba:	2220      	movs	r2, #32
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	4b71      	ldr	r3, [pc, #452]	@ (8002088 <MX_GPIO_Init+0x20c>)
 8001ec4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ec6:	4b70      	ldr	r3, [pc, #448]	@ (8002088 <MX_GPIO_Init+0x20c>)
 8001ec8:	2101      	movs	r1, #1
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ece:	4b6e      	ldr	r3, [pc, #440]	@ (8002088 <MX_GPIO_Init+0x20c>)
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eda:	4b6b      	ldr	r3, [pc, #428]	@ (8002088 <MX_GPIO_Init+0x20c>)
 8001edc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ede:	4b6a      	ldr	r3, [pc, #424]	@ (8002088 <MX_GPIO_Init+0x20c>)
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ee6:	4b68      	ldr	r3, [pc, #416]	@ (8002088 <MX_GPIO_Init+0x20c>)
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eea:	2202      	movs	r2, #2
 8001eec:	4013      	ands	r3, r2
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef2:	4b65      	ldr	r3, [pc, #404]	@ (8002088 <MX_GPIO_Init+0x20c>)
 8001ef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ef6:	4b64      	ldr	r3, [pc, #400]	@ (8002088 <MX_GPIO_Init+0x20c>)
 8001ef8:	2108      	movs	r1, #8
 8001efa:	430a      	orrs	r2, r1
 8001efc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001efe:	4b62      	ldr	r3, [pc, #392]	@ (8002088 <MX_GPIO_Init+0x20c>)
 8001f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f02:	2208      	movs	r2, #8
 8001f04:	4013      	ands	r3, r2
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_MCLR_Pin, GPIO_PIN_SET);
 8001f0a:	238e      	movs	r3, #142	@ 0x8e
 8001f0c:	0119      	lsls	r1, r3, #4
 8001f0e:	23a0      	movs	r3, #160	@ 0xa0
 8001f10:	05db      	lsls	r3, r3, #23
 8001f12:	2201      	movs	r2, #1
 8001f14:	0018      	movs	r0, r3
 8001f16:	f002 f82c 	bl	8003f72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_ENABLE_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001f1a:	495c      	ldr	r1, [pc, #368]	@ (800208c <MX_GPIO_Init+0x210>)
 8001f1c:	4b5c      	ldr	r3, [pc, #368]	@ (8002090 <MX_GPIO_Init+0x214>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	0018      	movs	r0, r3
 8001f22:	f002 f826 	bl	8003f72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin, GPIO_PIN_RESET);
 8001f26:	23c0      	movs	r3, #192	@ 0xc0
 8001f28:	00d9      	lsls	r1, r3, #3
 8001f2a:	23a0      	movs	r3, #160	@ 0xa0
 8001f2c:	05db      	lsls	r3, r3, #23
 8001f2e:	2200      	movs	r2, #0
 8001f30:	0018      	movs	r0, r3
 8001f32:	f002 f81e 	bl	8003f72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8001f36:	4b57      	ldr	r3, [pc, #348]	@ (8002094 <MX_GPIO_Init+0x218>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2180      	movs	r1, #128	@ 0x80
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f002 f818 	bl	8003f72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAPTOUCH_RESET_GPIO_Port, CAPTOUCH_RESET_Pin, GPIO_PIN_SET);
 8001f42:	2380      	movs	r3, #128	@ 0x80
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4852      	ldr	r0, [pc, #328]	@ (8002090 <MX_GPIO_Init+0x214>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	f002 f811 	bl	8003f72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f50:	193b      	adds	r3, r7, r4
 8001f52:	2204      	movs	r2, #4
 8001f54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f56:	193b      	adds	r3, r7, r4
 8001f58:	2203      	movs	r2, #3
 8001f5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	193b      	adds	r3, r7, r4
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	193a      	adds	r2, r7, r4
 8001f64:	23a0      	movs	r3, #160	@ 0xa0
 8001f66:	05db      	lsls	r3, r3, #23
 8001f68:	0011      	movs	r1, r2
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f001 fe80 	bl	8003c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CHIP_SELECT_Pin MEM_nWP_Pin MEM_nHOLD_Pin SHIFT_DATA_IN_Pin
                           SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_DATA_IN_Pin
 8001f70:	0021      	movs	r1, r4
 8001f72:	187b      	adds	r3, r7, r1
 8001f74:	22ee      	movs	r2, #238	@ 0xee
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	601a      	str	r2, [r3, #0]
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7a:	000c      	movs	r4, r1
 8001f7c:	193b      	adds	r3, r7, r4
 8001f7e:	2201      	movs	r2, #1
 8001f80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	193b      	adds	r3, r7, r4
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f88:	193b      	adds	r3, r7, r4
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	193a      	adds	r2, r7, r4
 8001f90:	23a0      	movs	r3, #160	@ 0xa0
 8001f92:	05db      	lsls	r3, r3, #23
 8001f94:	0011      	movs	r1, r2
 8001f96:	0018      	movs	r0, r3
 8001f98:	f001 fe6a 	bl	8003c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_ENABLE_Pin DEBUG_LED_Pin CAPTOUCH_RESET_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin;
 8001f9c:	193b      	adds	r3, r7, r4
 8001f9e:	4a3e      	ldr	r2, [pc, #248]	@ (8002098 <MX_GPIO_Init+0x21c>)
 8001fa0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa2:	193b      	adds	r3, r7, r4
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	193b      	adds	r3, r7, r4
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	193b      	adds	r3, r7, r4
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb4:	193b      	adds	r3, r7, r4
 8001fb6:	4a36      	ldr	r2, [pc, #216]	@ (8002090 <MX_GPIO_Init+0x214>)
 8001fb8:	0019      	movs	r1, r3
 8001fba:	0010      	movs	r0, r2
 8001fbc:	f001 fe58 	bl	8003c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8001fc0:	193b      	adds	r3, r7, r4
 8001fc2:	2280      	movs	r2, #128	@ 0x80
 8001fc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc6:	193b      	adds	r3, r7, r4
 8001fc8:	2201      	movs	r2, #1
 8001fca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	193b      	adds	r3, r7, r4
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	193b      	adds	r3, r7, r4
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 8001fd8:	193b      	adds	r3, r7, r4
 8001fda:	4a2e      	ldr	r2, [pc, #184]	@ (8002094 <MX_GPIO_Init+0x218>)
 8001fdc:	0019      	movs	r1, r3
 8001fde:	0010      	movs	r0, r2
 8001fe0:	f001 fe46 	bl	8003c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_SET_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = ALARM_SET_BUTTON_EXTI_Pin;
 8001fe4:	193b      	adds	r3, r7, r4
 8001fe6:	2280      	movs	r2, #128	@ 0x80
 8001fe8:	0212      	lsls	r2, r2, #8
 8001fea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fec:	193b      	adds	r3, r7, r4
 8001fee:	2284      	movs	r2, #132	@ 0x84
 8001ff0:	0392      	lsls	r2, r2, #14
 8001ff2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ff4:	193b      	adds	r3, r7, r4
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALARM_SET_BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	193a      	adds	r2, r7, r4
 8001ffc:	23a0      	movs	r3, #160	@ 0xa0
 8001ffe:	05db      	lsls	r3, r3, #23
 8002000:	0011      	movs	r1, r2
 8002002:	0018      	movs	r0, r3
 8002004:	f001 fe34 	bl	8003c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_EXTI_Pin MINUTE_SET_BUTTON_EXTI_Pin ALARM_EN_BUTTON_EXTI_Pin DISPLAY_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_EXTI_Pin|MINUTE_SET_BUTTON_EXTI_Pin|ALARM_EN_BUTTON_EXTI_Pin|DISPLAY_BUTTON_EXTI_Pin;
 8002008:	0021      	movs	r1, r4
 800200a:	187b      	adds	r3, r7, r1
 800200c:	220f      	movs	r2, #15
 800200e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002010:	187b      	adds	r3, r7, r1
 8002012:	2284      	movs	r2, #132	@ 0x84
 8002014:	0392      	lsls	r2, r2, #14
 8002016:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002018:	187b      	adds	r3, r7, r1
 800201a:	2201      	movs	r2, #1
 800201c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800201e:	000c      	movs	r4, r1
 8002020:	187b      	adds	r3, r7, r1
 8002022:	4a1e      	ldr	r2, [pc, #120]	@ (800209c <MX_GPIO_Init+0x220>)
 8002024:	0019      	movs	r1, r3
 8002026:	0010      	movs	r0, r2
 8002028:	f001 fe22 	bl	8003c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIME_SWITCH_EXTI_Pin */
  GPIO_InitStruct.Pin = TIME_SWITCH_EXTI_Pin;
 800202c:	0021      	movs	r1, r4
 800202e:	187b      	adds	r3, r7, r1
 8002030:	2210      	movs	r2, #16
 8002032:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002034:	187b      	adds	r3, r7, r1
 8002036:	22c4      	movs	r2, #196	@ 0xc4
 8002038:	0392      	lsls	r2, r2, #14
 800203a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800203c:	187b      	adds	r3, r7, r1
 800203e:	2201      	movs	r2, #1
 8002040:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TIME_SWITCH_EXTI_GPIO_Port, &GPIO_InitStruct);
 8002042:	187b      	adds	r3, r7, r1
 8002044:	4a12      	ldr	r2, [pc, #72]	@ (8002090 <MX_GPIO_Init+0x214>)
 8002046:	0019      	movs	r1, r3
 8002048:	0010      	movs	r0, r2
 800204a:	f001 fe11 	bl	8003c70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	2100      	movs	r1, #0
 8002052:	2005      	movs	r0, #5
 8002054:	f001 fc4e 	bl	80038f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002058:	2005      	movs	r0, #5
 800205a:	f001 fc60 	bl	800391e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2101      	movs	r1, #1
 8002062:	2006      	movs	r0, #6
 8002064:	f001 fc46 	bl	80038f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002068:	2006      	movs	r0, #6
 800206a:	f001 fc58 	bl	800391e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2101      	movs	r1, #1
 8002072:	2007      	movs	r0, #7
 8002074:	f001 fc3e 	bl	80038f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002078:	2007      	movs	r0, #7
 800207a:	f001 fc50 	bl	800391e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	b00b      	add	sp, #44	@ 0x2c
 8002084:	bd90      	pop	{r4, r7, pc}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	40021000 	.word	0x40021000
 800208c:	00001002 	.word	0x00001002
 8002090:	50000400 	.word	0x50000400
 8002094:	50000800 	.word	0x50000800
 8002098:	00001102 	.word	0x00001102
 800209c:	50000c00 	.word	0x50000c00

080020a0 <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80020a6:	2317      	movs	r3, #23
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 80020ae:	4a14      	ldr	r2, [pc, #80]	@ (8002100 <updateAndDisplayTime+0x60>)
 80020b0:	4914      	ldr	r1, [pc, #80]	@ (8002104 <updateAndDisplayTime+0x64>)
 80020b2:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <updateAndDisplayTime+0x68>)
 80020b4:	0018      	movs	r0, r3
 80020b6:	f7ff fa6d 	bl	8001594 <getRTCTime>

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 80020ba:	4b14      	ldr	r3, [pc, #80]	@ (800210c <updateAndDisplayTime+0x6c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10e      	bne.n	80020e0 <updateAndDisplayTime+0x40>

		RTC_TimeTypeDef currTimeMil = conv2Mil(&currTime);
 80020c2:	003b      	movs	r3, r7
 80020c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002104 <updateAndDisplayTime+0x64>)
 80020c6:	0011      	movs	r1, r2
 80020c8:	0018      	movs	r0, r3
 80020ca:	f000 fcc9 	bl	8002a60 <conv2Mil>

		sevSeg_updateDigits(&currTimeMil, userAlarmToggle);
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <updateAndDisplayTime+0x70>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	001a      	movs	r2, r3
 80020d4:	003b      	movs	r3, r7
 80020d6:	0011      	movs	r1, r2
 80020d8:	0018      	movs	r0, r3
 80020da:	f000 fe53 	bl	8002d84 <sevSeg_updateDigits>
 80020de:	e007      	b.n	80020f0 <updateAndDisplayTime+0x50>

	}
	else {
		sevSeg_updateDigits(&currTime, userAlarmToggle);
 80020e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <updateAndDisplayTime+0x70>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	001a      	movs	r2, r3
 80020e6:	4b07      	ldr	r3, [pc, #28]	@ (8002104 <updateAndDisplayTime+0x64>)
 80020e8:	0011      	movs	r1, r2
 80020ea:	0018      	movs	r0, r3
 80020ec:	f000 fe4a 	bl	8002d84 <sevSeg_updateDigits>
	}

	return halRet;
 80020f0:	2317      	movs	r3, #23
 80020f2:	18fb      	adds	r3, r7, r3
 80020f4:	781b      	ldrb	r3, [r3, #0]

}
 80020f6:	0018      	movs	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b006      	add	sp, #24
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			@ (mov r8, r8)
 8002100:	200000d0 	.word	0x200000d0
 8002104:	200000bc 	.word	0x200000bc
 8002108:	200001dc 	.word	0x200001dc
 800210c:	200000ec 	.word	0x200000ec
 8002110:	200000b9 	.word	0x200000b9

08002114 <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800211a:	2317      	movs	r3, #23
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 8002122:	4b11      	ldr	r3, [pc, #68]	@ (8002168 <updateAndDisplayAlarm+0x54>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10e      	bne.n	8002148 <updateAndDisplayAlarm+0x34>

		RTC_TimeTypeDef userAlarmTimeMil = conv2Mil(&userAlarmTime);
 800212a:	003b      	movs	r3, r7
 800212c:	4a0f      	ldr	r2, [pc, #60]	@ (800216c <updateAndDisplayAlarm+0x58>)
 800212e:	0011      	movs	r1, r2
 8002130:	0018      	movs	r0, r3
 8002132:	f000 fc95 	bl	8002a60 <conv2Mil>

		sevSeg_updateDigits(&userAlarmTimeMil, userAlarmToggle);
 8002136:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <updateAndDisplayAlarm+0x5c>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	001a      	movs	r2, r3
 800213c:	003b      	movs	r3, r7
 800213e:	0011      	movs	r1, r2
 8002140:	0018      	movs	r0, r3
 8002142:	f000 fe1f 	bl	8002d84 <sevSeg_updateDigits>
 8002146:	e007      	b.n	8002158 <updateAndDisplayAlarm+0x44>

	}
	else {
		sevSeg_updateDigits(&userAlarmTime, userAlarmToggle);
 8002148:	4b09      	ldr	r3, [pc, #36]	@ (8002170 <updateAndDisplayAlarm+0x5c>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	001a      	movs	r2, r3
 800214e:	4b07      	ldr	r3, [pc, #28]	@ (800216c <updateAndDisplayAlarm+0x58>)
 8002150:	0011      	movs	r1, r2
 8002152:	0018      	movs	r0, r3
 8002154:	f000 fe16 	bl	8002d84 <sevSeg_updateDigits>
	}



	return halRet;
 8002158:	2317      	movs	r3, #23
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	781b      	ldrb	r3, [r3, #0]

}
 800215e:	0018      	movs	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	b006      	add	sp, #24
 8002164:	bd80      	pop	{r7, pc}
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	200000ec 	.word	0x200000ec
 800216c:	200000d4 	.word	0x200000d4
 8002170:	200000b9 	.word	0x200000b9

08002174 <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b08d      	sub	sp, #52	@ 0x34
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 800217c:	2408      	movs	r4, #8
 800217e:	193b      	adds	r3, r7, r4
 8002180:	0018      	movs	r0, r3
 8002182:	2328      	movs	r3, #40	@ 0x28
 8002184:	001a      	movs	r2, r3
 8002186:	2100      	movs	r1, #0
 8002188:	f006 fde8 	bl	8008d5c <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 800218c:	2380      	movs	r3, #128	@ 0x80
 800218e:	005a      	lsls	r2, r3, #1
 8002190:	1939      	adds	r1, r7, r4
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	2300      	movs	r3, #0
 8002196:	f004 fb73 	bl	8006880 <HAL_RTC_GetAlarm>


	  if(sAlarm.AlarmTime.Minutes>58) {
 800219a:	193b      	adds	r3, r7, r4
 800219c:	785b      	ldrb	r3, [r3, #1]
 800219e:	2b3a      	cmp	r3, #58	@ 0x3a
 80021a0:	d903      	bls.n	80021aa <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 80021a2:	193b      	adds	r3, r7, r4
 80021a4:	2200      	movs	r2, #0
 80021a6:	705a      	strb	r2, [r3, #1]
 80021a8:	e006      	b.n	80021b8 <HAL_RTC_AlarmAEventCallback+0x44>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 80021aa:	2108      	movs	r1, #8
 80021ac:	187b      	adds	r3, r7, r1
 80021ae:	785b      	ldrb	r3, [r3, #1]
 80021b0:	3301      	adds	r3, #1
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	187b      	adds	r3, r7, r1
 80021b6:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 80021b8:	46c0      	nop			@ (mov r8, r8)
 80021ba:	2308      	movs	r3, #8
 80021bc:	18f9      	adds	r1, r7, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	0018      	movs	r0, r3
 80021c4:	f004 fa1c 	bl	8006600 <HAL_RTC_SetAlarm_IT>
 80021c8:	1e03      	subs	r3, r0, #0
 80021ca:	d1f6      	bne.n	80021ba <HAL_RTC_AlarmAEventCallback+0x46>

	  updateAndDisplayTime();
 80021cc:	f7ff ff68 	bl	80020a0 <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 80021d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002208 <HAL_RTC_AlarmAEventCallback+0x94>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d013      	beq.n	8002200 <HAL_RTC_AlarmAEventCallback+0x8c>
 80021d8:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <HAL_RTC_AlarmAEventCallback+0x98>)
 80021da:	781a      	ldrb	r2, [r3, #0]
 80021dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d10d      	bne.n	8002200 <HAL_RTC_AlarmAEventCallback+0x8c>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 80021e4:	4b09      	ldr	r3, [pc, #36]	@ (800220c <HAL_RTC_AlarmAEventCallback+0x98>)
 80021e6:	785a      	ldrb	r2, [r3, #1]
 80021e8:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80021ea:	785b      	ldrb	r3, [r3, #1]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d107      	bne.n	8002200 <HAL_RTC_AlarmAEventCallback+0x8c>
 80021f0:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_RTC_AlarmAEventCallback+0x98>)
 80021f2:	78da      	ldrb	r2, [r3, #3]
 80021f4:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80021f6:	78db      	ldrb	r3, [r3, #3]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d101      	bne.n	8002200 <HAL_RTC_AlarmAEventCallback+0x8c>
		  userAlarmBeep();
 80021fc:	f000 f80a 	bl	8002214 <userAlarmBeep>
	  }


}
 8002200:	46c0      	nop			@ (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b00d      	add	sp, #52	@ 0x34
 8002206:	bd90      	pop	{r4, r7, pc}
 8002208:	200000b9 	.word	0x200000b9
 800220c:	200000d4 	.word	0x200000d4
 8002210:	200000bc 	.word	0x200000bc

08002214 <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 800221a:	4b52      	ldr	r3, [pc, #328]	@ (8002364 <userAlarmBeep+0x150>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d02d      	beq.n	800227e <userAlarmBeep+0x6a>

			// Stop the timer and
			HAL_TIM_Base_Stop_IT(timerSnooze);
 8002222:	4b51      	ldr	r3, [pc, #324]	@ (8002368 <userAlarmBeep+0x154>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	0018      	movs	r0, r3
 8002228:	f005 fe48 	bl	8007ebc <HAL_TIM_Base_Stop_IT>

			// Reset count to 0
			// only bits 0 - 15 should be changed.
			timerSnooze->Instance->CNT &= 0xFFFF0000;
 800222c:	4b4e      	ldr	r3, [pc, #312]	@ (8002368 <userAlarmBeep+0x154>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002234:	4b4c      	ldr	r3, [pc, #304]	@ (8002368 <userAlarmBeep+0x154>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	0c12      	lsrs	r2, r2, #16
 800223c:	0412      	lsls	r2, r2, #16
 800223e:	625a      	str	r2, [r3, #36]	@ 0x24

			// Reset interrupt status register
			timerSnooze->Instance->SR &= 0xFFFC;
 8002240:	4b49      	ldr	r3, [pc, #292]	@ (8002368 <userAlarmBeep+0x154>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	4b47      	ldr	r3, [pc, #284]	@ (8002368 <userAlarmBeep+0x154>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4947      	ldr	r1, [pc, #284]	@ (800236c <userAlarmBeep+0x158>)
 8002250:	400a      	ands	r2, r1
 8002252:	611a      	str	r2, [r3, #16]

			// Re-write RCR with 10
			timerSnooze->Instance->RCR &= 0xFF00;
 8002254:	4b44      	ldr	r3, [pc, #272]	@ (8002368 <userAlarmBeep+0x154>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800225c:	4b42      	ldr	r3, [pc, #264]	@ (8002368 <userAlarmBeep+0x154>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	22ff      	movs	r2, #255	@ 0xff
 8002264:	0212      	lsls	r2, r2, #8
 8002266:	400a      	ands	r2, r1
 8002268:	631a      	str	r2, [r3, #48]	@ 0x30
			timerSnooze->Instance->RCR |= timerSnooze_RCR;
 800226a:	4b3f      	ldr	r3, [pc, #252]	@ (8002368 <userAlarmBeep+0x154>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002272:	2164      	movs	r1, #100	@ 0x64
 8002274:	4b3c      	ldr	r3, [pc, #240]	@ (8002368 <userAlarmBeep+0x154>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	631a      	str	r2, [r3, #48]	@ 0x30

		}

	HAL_TIM_Base_Stop(timerDelay);
 800227e:	4b3c      	ldr	r3, [pc, #240]	@ (8002370 <userAlarmBeep+0x15c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	0018      	movs	r0, r3
 8002284:	f005 fda0 	bl	8007dc8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8002288:	4b39      	ldr	r3, [pc, #228]	@ (8002370 <userAlarmBeep+0x15c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0018      	movs	r0, r3
 800228e:	f005 fd4f 	bl	8007d30 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8002292:	4b37      	ldr	r3, [pc, #220]	@ (8002370 <userAlarmBeep+0x15c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 800229c:	1cfb      	adds	r3, r7, #3
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]

	// TODO: Start audio DMA streams
	startAudioStream();
 80022a2:	f000 fc13 	bl	8002acc <startAudioStream>

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 80022a6:	f7ff fefb 	bl	80020a0 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 80022aa:	4b31      	ldr	r3, [pc, #196]	@ (8002370 <userAlarmBeep+0x15c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002374 <userAlarmBeep+0x160>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d91a      	bls.n	80022f2 <userAlarmBeep+0xde>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 80022bc:	1cfb      	adds	r3, r7, #3
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002378 <userAlarmBeep+0x164>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f000 fe11 	bl	8002eec <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80022ca:	4b29      	ldr	r3, [pc, #164]	@ (8002370 <userAlarmBeep+0x15c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80022d4:	1cfb      	adds	r3, r7, #3
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	1e5a      	subs	r2, r3, #1
 80022da:	4193      	sbcs	r3, r2
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2201      	movs	r2, #1
 80022e0:	4053      	eors	r3, r2
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	001a      	movs	r2, r3
 80022e6:	1cfb      	adds	r3, r7, #3
 80022e8:	701a      	strb	r2, [r3, #0]
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	2101      	movs	r1, #1
 80022ee:	400a      	ands	r2, r1
 80022f0:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 80022f2:	4b22      	ldr	r3, [pc, #136]	@ (800237c <userAlarmBeep+0x168>)
 80022f4:	0018      	movs	r0, r3
 80022f6:	f7fe f93d 	bl	8000574 <capTouch_readChannels>

	} while(capTouch.keyStat == 0x00 &&
 80022fa:	4b20      	ldr	r3, [pc, #128]	@ (800237c <userAlarmBeep+0x168>)
 80022fc:	7c1b      	ldrb	r3, [r3, #16]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d108      	bne.n	8002314 <userAlarmBeep+0x100>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 8002302:	4b1f      	ldr	r3, [pc, #124]	@ (8002380 <userAlarmBeep+0x16c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2204      	movs	r2, #4
 8002308:	0011      	movs	r1, r2
 800230a:	0018      	movs	r0, r3
 800230c:	f001 fe14 	bl	8003f38 <HAL_GPIO_ReadPin>
 8002310:	1e03      	subs	r3, r0, #0
	} while(capTouch.keyStat == 0x00 &&
 8002312:	d1c8      	bne.n	80022a6 <userAlarmBeep+0x92>

	/*
	 * Stop blinking, turn off buzzer, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 8002314:	4b16      	ldr	r3, [pc, #88]	@ (8002370 <userAlarmBeep+0x15c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	0018      	movs	r0, r3
 800231a:	f005 fd55 	bl	8007dc8 <HAL_TIM_Base_Stop>

	// TODO: Stop audio stream
	stopAudioStream();
 800231e:	f000 fc05 	bl	8002b2c <stopAudioStream>

	updateAndDisplayTime();				// Update to current time and display
 8002322:	f7ff febd 	bl	80020a0 <updateAndDisplayTime>
	sevSeg_setIntensity(sevSeg_intensityDuty[1]);	// Set to 50% duty cycle
 8002326:	2332      	movs	r3, #50	@ 0x32
 8002328:	0018      	movs	r0, r3
 800232a:	f000 fddf 	bl	8002eec <sevSeg_setIntensity>
	displayToggle = 2;								// Set to 2 for future display button ISRs
 800232e:	4b15      	ldr	r3, [pc, #84]	@ (8002384 <userAlarmBeep+0x170>)
 8002330:	2202      	movs	r2, #2
 8002332:	701a      	strb	r2, [r3, #0]


	// If this is the first snooze,
	if(!secondSnooze) {
 8002334:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <userAlarmBeep+0x150>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2201      	movs	r2, #1
 800233a:	4053      	eors	r3, r2
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <userAlarmBeep+0x140>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 8002342:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <userAlarmBeep+0x154>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	0018      	movs	r0, r3
 8002348:	f005 fd64 	bl	8007e14 <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 800234c:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <userAlarmBeep+0x150>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
		 * in the top conditional, the secondSnooze is always true;
		 */
		secondSnooze = false;

	}
}
 8002352:	e002      	b.n	800235a <userAlarmBeep+0x146>
		secondSnooze = false;
 8002354:	4b03      	ldr	r3, [pc, #12]	@ (8002364 <userAlarmBeep+0x150>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
}
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	46bd      	mov	sp, r7
 800235e:	b002      	add	sp, #8
 8002360:	bd80      	pop	{r7, pc}
 8002362:	46c0      	nop			@ (mov r8, r8)
 8002364:	20000409 	.word	0x20000409
 8002368:	20000070 	.word	0x20000070
 800236c:	0000fffc 	.word	0x0000fffc
 8002370:	2000006c 	.word	0x2000006c
 8002374:	00007ffe 	.word	0x00007ffe
 8002378:	08008e10 	.word	0x08008e10
 800237c:	2000040c 	.word	0x2000040c
 8002380:	20000000 	.word	0x20000000
 8002384:	200000b8 	.word	0x200000b8

08002388 <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	0002      	movs	r2, r0
 8002390:	1dbb      	adds	r3, r7, #6
 8002392:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8002394:	2208      	movs	r2, #8
 8002396:	1dbb      	adds	r3, r7, #6
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	4293      	cmp	r3, r2
 800239c:	d106      	bne.n	80023ac <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 800239e:	230f      	movs	r3, #15
 80023a0:	18fc      	adds	r4, r7, r3
 80023a2:	f000 f86f 	bl	8002484 <displayButtonISR>
 80023a6:	0003      	movs	r3, r0
 80023a8:	7023      	strb	r3, [r4, #0]

	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 80023aa:	e03d      	b.n	8002428 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 80023ac:	2204      	movs	r2, #4
 80023ae:	1dbb      	adds	r3, r7, #6
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d106      	bne.n	80023c4 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 80023b6:	230f      	movs	r3, #15
 80023b8:	18fc      	adds	r4, r7, r3
 80023ba:	f000 f88b 	bl	80024d4 <alarmEnableISR>
 80023be:	0003      	movs	r3, r0
 80023c0:	7023      	strb	r3, [r4, #0]
}
 80023c2:	e031      	b.n	8002428 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmSetButtonPin) {
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	1dba      	adds	r2, r7, #6
 80023ca:	8812      	ldrh	r2, [r2, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d106      	bne.n	80023de <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 80023d0:	230f      	movs	r3, #15
 80023d2:	18fc      	adds	r4, r7, r3
 80023d4:	f000 f8a8 	bl	8002528 <alarmSetISR>
 80023d8:	0003      	movs	r3, r0
 80023da:	7023      	strb	r3, [r4, #0]
}
 80023dc:	e024      	b.n	8002428 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == hourSetButtonPin) {
 80023de:	2201      	movs	r2, #1
 80023e0:	1dbb      	adds	r3, r7, #6
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d106      	bne.n	80023f6 <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 80023e8:	230f      	movs	r3, #15
 80023ea:	18fc      	adds	r4, r7, r3
 80023ec:	f000 f95c 	bl	80026a8 <hourSetISR>
 80023f0:	0003      	movs	r3, r0
 80023f2:	7023      	strb	r3, [r4, #0]
}
 80023f4:	e018      	b.n	8002428 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == minuteSetButtonPin) {
 80023f6:	2202      	movs	r2, #2
 80023f8:	1dbb      	adds	r3, r7, #6
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d106      	bne.n	800240e <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 8002400:	230f      	movs	r3, #15
 8002402:	18fc      	adds	r4, r7, r3
 8002404:	f000 f97c 	bl	8002700 <minuteSetISR>
 8002408:	0003      	movs	r3, r0
 800240a:	7023      	strb	r3, [r4, #0]
}
 800240c:	e00c      	b.n	8002428 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == timeFormatSwitchPin) {
 800240e:	2210      	movs	r2, #16
 8002410:	1dbb      	adds	r3, r7, #6
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	4293      	cmp	r3, r2
 8002416:	d106      	bne.n	8002426 <HAL_GPIO_EXTI_Falling_Callback+0x9e>
		halRet = timeFormatSwitchISR();
 8002418:	230f      	movs	r3, #15
 800241a:	18fc      	adds	r4, r7, r3
 800241c:	f000 f9c2 	bl	80027a4 <timeFormatSwitchISR>
 8002420:	0003      	movs	r3, r0
 8002422:	7023      	strb	r3, [r4, #0]
}
 8002424:	e000      	b.n	8002428 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
		__NOP();
 8002426:	46c0      	nop			@ (mov r8, r8)
}
 8002428:	46c0      	nop			@ (mov r8, r8)
 800242a:	46bd      	mov	sp, r7
 800242c:	b005      	add	sp, #20
 800242e:	bd90      	pop	{r4, r7, pc}

08002430 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	0002      	movs	r2, r0
 8002438:	1dbb      	adds	r3, r7, #6
 800243a:	801a      	strh	r2, [r3, #0]

	if(GPIO_Pin == timeFormatSwitchPin) {
 800243c:	2210      	movs	r2, #16
 800243e:	1dbb      	adds	r3, r7, #6
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_GPIO_EXTI_Rising_Callback+0x1a>

		timeFormatSwitchISR();
 8002446:	f000 f9ad 	bl	80027a4 <timeFormatSwitchISR>

	}

}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	46bd      	mov	sp, r7
 800244e:	b002      	add	sp, #8
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]

	if((htim == timerSnooze) && (secondSnooze == true)) {
 800245c:	4b07      	ldr	r3, [pc, #28]	@ (800247c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	429a      	cmp	r2, r3
 8002464:	d105      	bne.n	8002472 <HAL_TIM_PeriodElapsedCallback+0x1e>
 8002466:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_TIM_PeriodElapsedCallback+0x1e>

		userAlarmBeep();
 800246e:	f7ff fed1 	bl	8002214 <userAlarmBeep>

	}

}
 8002472:	46c0      	nop			@ (mov r8, r8)
 8002474:	46bd      	mov	sp, r7
 8002476:	b002      	add	sp, #8
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			@ (mov r8, r8)
 800247c:	20000070 	.word	0x20000070
 8002480:	20000409 	.word	0x20000409

08002484 <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800248a:	1dfb      	adds	r3, r7, #7
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 8002490:	f7ff fe06 	bl	80020a0 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8002494:	4b0d      	ldr	r3, [pc, #52]	@ (80024cc <displayButtonISR+0x48>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	001a      	movs	r2, r3
 800249a:	4b0d      	ldr	r3, [pc, #52]	@ (80024d0 <displayButtonISR+0x4c>)
 800249c:	5c9b      	ldrb	r3, [r3, r2]
 800249e:	0018      	movs	r0, r3
 80024a0:	f000 fd24 	bl	8002eec <sevSeg_setIntensity>

	if(displayToggle >= 1) {			// Increment display toggle or reset back down to 0;
 80024a4:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <displayButtonISR+0x48>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <displayButtonISR+0x30>
		displayToggle = 0;
 80024ac:	4b07      	ldr	r3, [pc, #28]	@ (80024cc <displayButtonISR+0x48>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	e005      	b.n	80024c0 <displayButtonISR+0x3c>
	} else {
		displayToggle++;
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <displayButtonISR+0x48>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	3301      	adds	r3, #1
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	4b03      	ldr	r3, [pc, #12]	@ (80024cc <displayButtonISR+0x48>)
 80024be:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 80024c0:	1dfb      	adds	r3, r7, #7
 80024c2:	781b      	ldrb	r3, [r3, #0]

}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	200000b8 	.word	0x200000b8
 80024d0:	08008e10 	.word	0x08008e10

080024d4 <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0



	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80024da:	1dfb      	adds	r3, r7, #7
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 80024e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002520 <alarmEnableISR+0x4c>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2201      	movs	r2, #1
 80024e6:	4053      	eors	r3, r2
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <alarmEnableISR+0x22>

		userAlarmToggle = true;								// Toggle internal flag to true
 80024ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002520 <alarmEnableISR+0x4c>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	e008      	b.n	8002508 <alarmEnableISR+0x34>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 80024f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002520 <alarmEnableISR+0x4c>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <alarmEnableISR+0x32>

		userAlarmToggle = false;							// Toggle internal flag to false
 80024fe:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <alarmEnableISR+0x4c>)
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
 8002504:	e000      	b.n	8002508 <alarmEnableISR+0x34>
	}
	else {
		__NOP();							//Code should never reach here.
 8002506:	46c0      	nop			@ (mov r8, r8)
	}

	updateAndDisplayTime();				// Update display with correct decimal point
 8002508:	f7ff fdca 	bl	80020a0 <updateAndDisplayTime>

	// Reset snooze time
	secondSnooze = false;
 800250c:	4b05      	ldr	r3, [pc, #20]	@ (8002524 <alarmEnableISR+0x50>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]

	return halRet;
 8002512:	1dfb      	adds	r3, r7, #7
 8002514:	781b      	ldrb	r3, [r3, #0]

}
 8002516:	0018      	movs	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	b002      	add	sp, #8
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			@ (mov r8, r8)
 8002520:	200000b9 	.word	0x200000b9
 8002524:	20000409 	.word	0x20000409

08002528 <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 800252e:	1c7b      	adds	r3, r7, #1
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 8002534:	1dfb      	adds	r3, r7, #7
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e01a      	b.n	8002572 <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 800253c:	4b55      	ldr	r3, [pc, #340]	@ (8002694 <alarmSetISR+0x16c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0018      	movs	r0, r3
 8002542:	f005 fc41 	bl	8007dc8 <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 8002546:	4b53      	ldr	r3, [pc, #332]	@ (8002694 <alarmSetISR+0x16c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2200      	movs	r2, #0
 800254e:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8002550:	4b50      	ldr	r3, [pc, #320]	@ (8002694 <alarmSetISR+0x16c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0018      	movs	r0, r3
 8002556:	f005 fbeb 	bl	8007d30 <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 800255a:	4b4e      	ldr	r3, [pc, #312]	@ (8002694 <alarmSetISR+0x16c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	4a4d      	ldr	r2, [pc, #308]	@ (8002698 <alarmSetISR+0x170>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d9f8      	bls.n	800255a <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 8002568:	1dfb      	adds	r3, r7, #7
 800256a:	781a      	ldrb	r2, [r3, #0]
 800256c:	1dfb      	adds	r3, r7, #7
 800256e:	3201      	adds	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	1dfb      	adds	r3, r7, #7
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d9e0      	bls.n	800253c <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 800257a:	4b48      	ldr	r3, [pc, #288]	@ (800269c <alarmSetISR+0x174>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2280      	movs	r2, #128	@ 0x80
 8002580:	0212      	lsls	r2, r2, #8
 8002582:	0011      	movs	r1, r2
 8002584:	0018      	movs	r0, r3
 8002586:	f001 fcd7 	bl	8003f38 <HAL_GPIO_ReadPin>
 800258a:	1e03      	subs	r3, r0, #0
 800258c:	d11f      	bne.n	80025ce <alarmSetISR+0xa6>
		alarmSetMode = true;
 800258e:	4b44      	ldr	r3, [pc, #272]	@ (80026a0 <alarmSetISR+0x178>)
 8002590:	2201      	movs	r2, #1
 8002592:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 8002594:	4b3f      	ldr	r3, [pc, #252]	@ (8002694 <alarmSetISR+0x16c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0018      	movs	r0, r3
 800259a:	f005 fc15 	bl	8007dc8 <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 800259e:	4b3d      	ldr	r3, [pc, #244]	@ (8002694 <alarmSetISR+0x16c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2200      	movs	r2, #0
 80025a6:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80025a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002694 <alarmSetISR+0x16c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0018      	movs	r0, r3
 80025ae:	f005 fbbf 	bl	8007d30 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80025b2:	4b38      	ldr	r3, [pc, #224]	@ (8002694 <alarmSetISR+0x16c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 80025be:	1cfb      	adds	r3, r7, #3
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 80025c4:	4b36      	ldr	r3, [pc, #216]	@ (80026a0 <alarmSetISR+0x178>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d059      	beq.n	8002680 <alarmSetISR+0x158>
 80025cc:	e002      	b.n	80025d4 <alarmSetISR+0xac>
		return halRet;
 80025ce:	1c7b      	adds	r3, r7, #1
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	e05a      	b.n	800268a <alarmSetISR+0x162>

		bool displayBlink = false;
 80025d4:	1cbb      	adds	r3, r7, #2
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 80025da:	4b30      	ldr	r3, [pc, #192]	@ (800269c <alarmSetISR+0x174>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2280      	movs	r2, #128	@ 0x80
 80025e0:	0212      	lsls	r2, r2, #8
 80025e2:	0011      	movs	r1, r2
 80025e4:	0018      	movs	r0, r3
 80025e6:	f001 fca7 	bl	8003f38 <HAL_GPIO_ReadPin>
 80025ea:	0003      	movs	r3, r0
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d102      	bne.n	80025f6 <alarmSetISR+0xce>
				alarmSetButtonReset = true;
 80025f0:	1cfb      	adds	r3, r7, #3
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 80025f6:	f7ff fd8d 	bl	8002114 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 80025fa:	4b26      	ldr	r3, [pc, #152]	@ (8002694 <alarmSetISR+0x16c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	1ad2      	subs	r2, r2, r3
 8002608:	2380      	movs	r3, #128	@ 0x80
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	429a      	cmp	r2, r3
 800260e:	d31b      	bcc.n	8002648 <alarmSetISR+0x120>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8002610:	1cbb      	adds	r3, r7, #2
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	4a23      	ldr	r2, [pc, #140]	@ (80026a4 <alarmSetISR+0x17c>)
 8002616:	5cd3      	ldrb	r3, [r2, r3]
 8002618:	0018      	movs	r0, r3
 800261a:	f000 fc67 	bl	8002eec <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 800261e:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <alarmSetISR+0x16c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 800262a:	1cbb      	adds	r3, r7, #2
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	1e5a      	subs	r2, r3, #1
 8002630:	4193      	sbcs	r3, r2
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2201      	movs	r2, #1
 8002636:	4053      	eors	r3, r2
 8002638:	b2db      	uxtb	r3, r3
 800263a:	001a      	movs	r2, r3
 800263c:	1cbb      	adds	r3, r7, #2
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	781a      	ldrb	r2, [r3, #0]
 8002642:	2101      	movs	r1, #1
 8002644:	400a      	ands	r2, r1
 8002646:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 8002648:	4b14      	ldr	r3, [pc, #80]	@ (800269c <alarmSetISR+0x174>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2280      	movs	r2, #128	@ 0x80
 800264e:	0212      	lsls	r2, r2, #8
 8002650:	0011      	movs	r1, r2
 8002652:	0018      	movs	r0, r3
 8002654:	f001 fc70 	bl	8003f38 <HAL_GPIO_ReadPin>
 8002658:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 800265a:	d1be      	bne.n	80025da <alarmSetISR+0xb2>
 800265c:	1cfb      	adds	r3, r7, #3
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2201      	movs	r2, #1
 8002662:	4053      	eors	r3, r2
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1b7      	bne.n	80025da <alarmSetISR+0xb2>

		sevSeg_setIntensity(sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 800266a:	2332      	movs	r3, #50	@ 0x32
 800266c:	0018      	movs	r0, r3
 800266e:	f000 fc3d 	bl	8002eec <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 8002672:	4b08      	ldr	r3, [pc, #32]	@ (8002694 <alarmSetISR+0x16c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	0018      	movs	r0, r3
 8002678:	f005 fba6 	bl	8007dc8 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 800267c:	f7ff fd10 	bl	80020a0 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8002680:	4b07      	ldr	r3, [pc, #28]	@ (80026a0 <alarmSetISR+0x178>)
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 8002686:	1c7b      	adds	r3, r7, #1
 8002688:	781b      	ldrb	r3, [r3, #0]

}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b002      	add	sp, #8
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	2000006c 	.word	0x2000006c
 8002698:	0000fffe 	.word	0x0000fffe
 800269c:	20000004 	.word	0x20000004
 80026a0:	20000408 	.word	0x20000408
 80026a4:	08008e10 	.word	0x08008e10

080026a8 <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 80026ae:	1dfb      	adds	r3, r7, #7
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80026b4:	4b0e      	ldr	r3, [pc, #56]	@ (80026f0 <hourSetISR+0x48>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <hourSetISR+0x1a>

		alarmHourInc();
 80026bc:	f000 f89a 	bl	80027f4 <alarmHourInc>
 80026c0:	e00f      	b.n	80026e2 <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 80026c2:	f000 f8c7 	bl	8002854 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80026c6:	490b      	ldr	r1, [pc, #44]	@ (80026f4 <hourSetISR+0x4c>)
 80026c8:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <hourSetISR+0x50>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	0018      	movs	r0, r3
 80026ce:	f003 fe45 	bl	800635c <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80026d2:	f7ff fce5 	bl	80020a0 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80026d6:	4a09      	ldr	r2, [pc, #36]	@ (80026fc <hourSetISR+0x54>)
 80026d8:	4906      	ldr	r1, [pc, #24]	@ (80026f4 <hourSetISR+0x4c>)
 80026da:	4b07      	ldr	r3, [pc, #28]	@ (80026f8 <hourSetISR+0x50>)
 80026dc:	0018      	movs	r0, r3
 80026de:	f7fe ff59 	bl	8001594 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 80026e2:	1dfb      	adds	r3, r7, #7
 80026e4:	781b      	ldrb	r3, [r3, #0]

}
 80026e6:	0018      	movs	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b002      	add	sp, #8
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	20000408 	.word	0x20000408
 80026f4:	200000bc 	.word	0x200000bc
 80026f8:	200001dc 	.word	0x200001dc
 80026fc:	200000d0 	.word	0x200000d0

08002700 <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b08c      	sub	sp, #48	@ 0x30
 8002704:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 8002706:	232f      	movs	r3, #47	@ 0x2f
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 800270e:	4b21      	ldr	r3, [pc, #132]	@ (8002794 <minuteSetISR+0x94>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <minuteSetISR+0x1c>

		alarmMinuteInc();
 8002716:	f000 f8dd 	bl	80028d4 <alarmMinuteInc>
 800271a:	e034      	b.n	8002786 <minuteSetISR+0x86>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 800271c:	f000 f8f8 	bl	8002910 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8002720:	491d      	ldr	r1, [pc, #116]	@ (8002798 <minuteSetISR+0x98>)
 8002722:	4b1e      	ldr	r3, [pc, #120]	@ (800279c <minuteSetISR+0x9c>)
 8002724:	2200      	movs	r2, #0
 8002726:	0018      	movs	r0, r3
 8002728:	f003 fe18 	bl	800635c <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	0018      	movs	r0, r3
 8002730:	2328      	movs	r3, #40	@ 0x28
 8002732:	001a      	movs	r2, r3
 8002734:	2100      	movs	r1, #0
 8002736:	f006 fb11 	bl	8008d5c <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 800273a:	2380      	movs	r3, #128	@ 0x80
 800273c:	005a      	lsls	r2, r3, #1
 800273e:	1d39      	adds	r1, r7, #4
 8002740:	4816      	ldr	r0, [pc, #88]	@ (800279c <minuteSetISR+0x9c>)
 8002742:	2300      	movs	r3, #0
 8002744:	f004 f89c 	bl	8006880 <HAL_RTC_GetAlarm>

		if(sAlarm.AlarmTime.Minutes>58) {
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	785b      	ldrb	r3, [r3, #1]
 800274c:	2b3a      	cmp	r3, #58	@ 0x3a
 800274e:	d903      	bls.n	8002758 <minuteSetISR+0x58>
			sAlarm.AlarmTime.Minutes=0;
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	2200      	movs	r2, #0
 8002754:	705a      	strb	r2, [r3, #1]
 8002756:	e005      	b.n	8002764 <minuteSetISR+0x64>
			//printf("Reset alarm time\n\r");
		} else {
			sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	785b      	ldrb	r3, [r3, #1]
 800275c:	3301      	adds	r3, #1
 800275e:	b2da      	uxtb	r2, r3
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8002764:	46c0      	nop			@ (mov r8, r8)
 8002766:	1d39      	adds	r1, r7, #4
 8002768:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <minuteSetISR+0x9c>)
 800276a:	2200      	movs	r2, #0
 800276c:	0018      	movs	r0, r3
 800276e:	f003 ff47 	bl	8006600 <HAL_RTC_SetAlarm_IT>
 8002772:	1e03      	subs	r3, r0, #0
 8002774:	d1f7      	bne.n	8002766 <minuteSetISR+0x66>

		updateAndDisplayTime();
 8002776:	f7ff fc93 	bl	80020a0 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 800277a:	4a09      	ldr	r2, [pc, #36]	@ (80027a0 <minuteSetISR+0xa0>)
 800277c:	4906      	ldr	r1, [pc, #24]	@ (8002798 <minuteSetISR+0x98>)
 800277e:	4b07      	ldr	r3, [pc, #28]	@ (800279c <minuteSetISR+0x9c>)
 8002780:	0018      	movs	r0, r3
 8002782:	f7fe ff07 	bl	8001594 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 8002786:	232f      	movs	r3, #47	@ 0x2f
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	781b      	ldrb	r3, [r3, #0]
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b00c      	add	sp, #48	@ 0x30
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000408 	.word	0x20000408
 8002798:	200000bc 	.word	0x200000bc
 800279c:	200001dc 	.word	0x200001dc
 80027a0:	200000d0 	.word	0x200000d0

080027a4 <timeFormatSwitchISR>:

/*
 * Switch hour format (12 or 24 hr)
 */
HAL_StatusTypeDef timeFormatSwitchISR(void) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80027aa:	1dfb      	adds	r3, r7, #7
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]

	// Determine which time format we will be using
	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 80027b0:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <timeFormatSwitchISR+0x44>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2210      	movs	r2, #16
 80027b6:	0011      	movs	r1, r2
 80027b8:	0018      	movs	r0, r3
 80027ba:	f001 fbbd 	bl	8003f38 <HAL_GPIO_ReadPin>
 80027be:	0003      	movs	r3, r0
 80027c0:	001a      	movs	r2, r3
 80027c2:	4b0a      	ldr	r3, [pc, #40]	@ (80027ec <timeFormatSwitchISR+0x48>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d103      	bne.n	80027d2 <timeFormatSwitchISR+0x2e>
	  userTimeFormat = RTC_HOURFORMAT_12;
 80027ca:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <timeFormatSwitchISR+0x4c>)
 80027cc:	2240      	movs	r2, #64	@ 0x40
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	e002      	b.n	80027d8 <timeFormatSwitchISR+0x34>
	}
	else {
	  userTimeFormat = RTC_HOURFORMAT_24;
 80027d2:	4b07      	ldr	r3, [pc, #28]	@ (80027f0 <timeFormatSwitchISR+0x4c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
	}

	updateAndDisplayTime();
 80027d8:	f7ff fc62 	bl	80020a0 <updateAndDisplayTime>

	return halRet;
 80027dc:	1dfb      	adds	r3, r7, #7
 80027de:	781b      	ldrb	r3, [r3, #0]

}
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000008 	.word	0x20000008
 80027ec:	20000040 	.word	0x20000040
 80027f0:	200000ec 	.word	0x200000ec

080027f4 <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 80027f8:	4b15      	ldr	r3, [pc, #84]	@ (8002850 <alarmHourInc+0x5c>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b0b      	cmp	r3, #11
 80027fe:	d903      	bls.n	8002808 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8002800:	4b13      	ldr	r3, [pc, #76]	@ (8002850 <alarmHourInc+0x5c>)
 8002802:	2201      	movs	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	e01e      	b.n	8002846 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8002808:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <alarmHourInc+0x5c>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b0b      	cmp	r3, #11
 800280e:	d10e      	bne.n	800282e <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8002810:	4b0f      	ldr	r3, [pc, #60]	@ (8002850 <alarmHourInc+0x5c>)
 8002812:	78db      	ldrb	r3, [r3, #3]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d103      	bne.n	8002820 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8002818:	4b0d      	ldr	r3, [pc, #52]	@ (8002850 <alarmHourInc+0x5c>)
 800281a:	2201      	movs	r2, #1
 800281c:	70da      	strb	r2, [r3, #3]
 800281e:	e002      	b.n	8002826 <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002820:	4b0b      	ldr	r3, [pc, #44]	@ (8002850 <alarmHourInc+0x5c>)
 8002822:	2200      	movs	r2, #0
 8002824:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 8002826:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <alarmHourInc+0x5c>)
 8002828:	220c      	movs	r2, #12
 800282a:	701a      	strb	r2, [r3, #0]
 800282c:	e00b      	b.n	8002846 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 800282e:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <alarmHourInc+0x5c>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b0a      	cmp	r3, #10
 8002834:	d806      	bhi.n	8002844 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8002836:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <alarmHourInc+0x5c>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	3301      	adds	r3, #1
 800283c:	b2da      	uxtb	r2, r3
 800283e:	4b04      	ldr	r3, [pc, #16]	@ (8002850 <alarmHourInc+0x5c>)
 8002840:	701a      	strb	r2, [r3, #0]
 8002842:	e000      	b.n	8002846 <alarmHourInc+0x52>
	}
	else {
		__NOP();
 8002844:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8002846:	f000 f8e1 	bl	8002a0c <updateRTCBackupReg>

}
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	200000d4 	.word	0x200000d4

08002854 <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8002858:	4a1a      	ldr	r2, [pc, #104]	@ (80028c4 <currHourInc+0x70>)
 800285a:	491b      	ldr	r1, [pc, #108]	@ (80028c8 <currHourInc+0x74>)
 800285c:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <currHourInc+0x78>)
 800285e:	0018      	movs	r0, r3
 8002860:	f7fe fe98 	bl	8001594 <getRTCTime>

	if(currTime.Hours >= 12) {
 8002864:	4b18      	ldr	r3, [pc, #96]	@ (80028c8 <currHourInc+0x74>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b0b      	cmp	r3, #11
 800286a:	d903      	bls.n	8002874 <currHourInc+0x20>
		currTime.Hours = 1;
 800286c:	4b16      	ldr	r3, [pc, #88]	@ (80028c8 <currHourInc+0x74>)
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e01e      	b.n	80028b2 <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 8002874:	4b14      	ldr	r3, [pc, #80]	@ (80028c8 <currHourInc+0x74>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b0b      	cmp	r3, #11
 800287a:	d10e      	bne.n	800289a <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800287c:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <currHourInc+0x74>)
 800287e:	78db      	ldrb	r3, [r3, #3]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d103      	bne.n	800288c <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8002884:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <currHourInc+0x74>)
 8002886:	2201      	movs	r2, #1
 8002888:	70da      	strb	r2, [r3, #3]
 800288a:	e002      	b.n	8002892 <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800288c:	4b0e      	ldr	r3, [pc, #56]	@ (80028c8 <currHourInc+0x74>)
 800288e:	2200      	movs	r2, #0
 8002890:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 8002892:	4b0d      	ldr	r3, [pc, #52]	@ (80028c8 <currHourInc+0x74>)
 8002894:	220c      	movs	r2, #12
 8002896:	701a      	strb	r2, [r3, #0]
 8002898:	e00b      	b.n	80028b2 <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 800289a:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <currHourInc+0x7c>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b0a      	cmp	r3, #10
 80028a0:	d806      	bhi.n	80028b0 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 80028a2:	4b09      	ldr	r3, [pc, #36]	@ (80028c8 <currHourInc+0x74>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	3301      	adds	r3, #1
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <currHourInc+0x74>)
 80028ac:	701a      	strb	r2, [r3, #0]
 80028ae:	e000      	b.n	80028b2 <currHourInc+0x5e>
	}
	else {
		__NOP();
 80028b0:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 80028b2:	4b05      	ldr	r3, [pc, #20]	@ (80028c8 <currHourInc+0x74>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 80028b8:	4b03      	ldr	r3, [pc, #12]	@ (80028c8 <currHourInc+0x74>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]

}
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	200000d0 	.word	0x200000d0
 80028c8:	200000bc 	.word	0x200000bc
 80028cc:	200001dc 	.word	0x200001dc
 80028d0:	200000d4 	.word	0x200000d4

080028d4 <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 80028d8:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <alarmMinuteInc+0x38>)
 80028da:	785b      	ldrb	r3, [r3, #1]
 80028dc:	2b3a      	cmp	r3, #58	@ 0x3a
 80028de:	d903      	bls.n	80028e8 <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 80028e0:	4b0a      	ldr	r3, [pc, #40]	@ (800290c <alarmMinuteInc+0x38>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	705a      	strb	r2, [r3, #1]
 80028e6:	e00b      	b.n	8002900 <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 80028e8:	4b08      	ldr	r3, [pc, #32]	@ (800290c <alarmMinuteInc+0x38>)
 80028ea:	785b      	ldrb	r3, [r3, #1]
 80028ec:	2b3a      	cmp	r3, #58	@ 0x3a
 80028ee:	d806      	bhi.n	80028fe <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 80028f0:	4b06      	ldr	r3, [pc, #24]	@ (800290c <alarmMinuteInc+0x38>)
 80028f2:	785b      	ldrb	r3, [r3, #1]
 80028f4:	3301      	adds	r3, #1
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	4b04      	ldr	r3, [pc, #16]	@ (800290c <alarmMinuteInc+0x38>)
 80028fa:	705a      	strb	r2, [r3, #1]
 80028fc:	e000      	b.n	8002900 <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 80028fe:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8002900:	f000 f884 	bl	8002a0c <updateRTCBackupReg>

}
 8002904:	46c0      	nop			@ (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	200000d4 	.word	0x200000d4

08002910 <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8002914:	4a11      	ldr	r2, [pc, #68]	@ (800295c <currMinuteInc+0x4c>)
 8002916:	4912      	ldr	r1, [pc, #72]	@ (8002960 <currMinuteInc+0x50>)
 8002918:	4b12      	ldr	r3, [pc, #72]	@ (8002964 <currMinuteInc+0x54>)
 800291a:	0018      	movs	r0, r3
 800291c:	f7fe fe3a 	bl	8001594 <getRTCTime>

	if(currTime.Minutes >= 59) {
 8002920:	4b0f      	ldr	r3, [pc, #60]	@ (8002960 <currMinuteInc+0x50>)
 8002922:	785b      	ldrb	r3, [r3, #1]
 8002924:	2b3a      	cmp	r3, #58	@ 0x3a
 8002926:	d903      	bls.n	8002930 <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 8002928:	4b0d      	ldr	r3, [pc, #52]	@ (8002960 <currMinuteInc+0x50>)
 800292a:	2200      	movs	r2, #0
 800292c:	705a      	strb	r2, [r3, #1]
 800292e:	e00b      	b.n	8002948 <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 8002930:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <currMinuteInc+0x50>)
 8002932:	785b      	ldrb	r3, [r3, #1]
 8002934:	2b3a      	cmp	r3, #58	@ 0x3a
 8002936:	d806      	bhi.n	8002946 <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 8002938:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <currMinuteInc+0x50>)
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	3301      	adds	r3, #1
 800293e:	b2da      	uxtb	r2, r3
 8002940:	4b07      	ldr	r3, [pc, #28]	@ (8002960 <currMinuteInc+0x50>)
 8002942:	705a      	strb	r2, [r3, #1]
 8002944:	e000      	b.n	8002948 <currMinuteInc+0x38>
	}
	else {
		__NOP();
 8002946:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8002948:	4b05      	ldr	r3, [pc, #20]	@ (8002960 <currMinuteInc+0x50>)
 800294a:	2200      	movs	r2, #0
 800294c:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 800294e:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <currMinuteInc+0x50>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]

}
 8002954:	46c0      	nop			@ (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	46c0      	nop			@ (mov r8, r8)
 800295c:	200000d0 	.word	0x200000d0
 8002960:	200000bc 	.word	0x200000bc
 8002964:	200001dc 	.word	0x200001dc

08002968 <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 800296c:	4b05      	ldr	r3, [pc, #20]	@ (8002984 <dispFault+0x1c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2280      	movs	r2, #128	@ 0x80
 8002972:	0151      	lsls	r1, r2, #5
 8002974:	2201      	movs	r2, #1
 8002976:	0018      	movs	r0, r3
 8002978:	f001 fafb 	bl	8003f72 <HAL_GPIO_WritePin>
}
 800297c:	46c0      	nop			@ (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	46c0      	nop			@ (mov r8, r8)
 8002984:	20000028 	.word	0x20000028

08002988 <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 800298e:	4b1c      	ldr	r3, [pc, #112]	@ (8002a00 <dispFailure+0x78>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	0018      	movs	r0, r3
 8002994:	f005 fa18 	bl	8007dc8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8002998:	4b19      	ldr	r3, [pc, #100]	@ (8002a00 <dispFailure+0x78>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	0018      	movs	r0, r3
 800299e:	f005 f9c7 	bl	8007d30 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80029a2:	4b17      	ldr	r3, [pc, #92]	@ (8002a00 <dispFailure+0x78>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029aa:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80029ac:	1cfb      	adds	r3, r7, #3
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 80029b2:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <dispFailure+0x78>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	4a11      	ldr	r2, [pc, #68]	@ (8002a04 <dispFailure+0x7c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d9f6      	bls.n	80029b2 <dispFailure+0x2a>

			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 80029c4:	4b10      	ldr	r3, [pc, #64]	@ (8002a08 <dispFailure+0x80>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2280      	movs	r2, #128	@ 0x80
 80029ca:	0152      	lsls	r2, r2, #5
 80029cc:	0011      	movs	r1, r2
 80029ce:	0018      	movs	r0, r3
 80029d0:	f001 faec 	bl	8003fac <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80029d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a00 <dispFailure+0x78>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80029de:	1cfb      	adds	r3, r7, #3
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	1e5a      	subs	r2, r3, #1
 80029e4:	4193      	sbcs	r3, r2
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2201      	movs	r2, #1
 80029ea:	4053      	eors	r3, r2
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	001a      	movs	r2, r3
 80029f0:	1cfb      	adds	r3, r7, #3
 80029f2:	701a      	strb	r2, [r3, #0]
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	2101      	movs	r1, #1
 80029f8:	400a      	ands	r2, r1
 80029fa:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 80029fc:	e7d9      	b.n	80029b2 <dispFailure+0x2a>
 80029fe:	46c0      	nop			@ (mov r8, r8)
 8002a00:	2000006c 	.word	0x2000006c
 8002a04:	00003ffe 	.word	0x00003ffe
 8002a08:	20000028 	.word	0x20000028

08002a0c <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8002a10:	4b0e      	ldr	r3, [pc, #56]	@ (8002a4c <updateRTCBackupReg+0x40>)
 8002a12:	6819      	ldr	r1, [r3, #0]
 8002a14:	4b0e      	ldr	r3, [pc, #56]	@ (8002a50 <updateRTCBackupReg+0x44>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	001a      	movs	r2, r3
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a54 <updateRTCBackupReg+0x48>)
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f004 f9d7 	bl	8006dd0 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8002a22:	4b0d      	ldr	r3, [pc, #52]	@ (8002a58 <updateRTCBackupReg+0x4c>)
 8002a24:	6819      	ldr	r1, [r3, #0]
 8002a26:	4b0a      	ldr	r3, [pc, #40]	@ (8002a50 <updateRTCBackupReg+0x44>)
 8002a28:	785b      	ldrb	r3, [r3, #1]
 8002a2a:	001a      	movs	r2, r3
 8002a2c:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <updateRTCBackupReg+0x48>)
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f004 f9ce 	bl	8006dd0 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8002a34:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <updateRTCBackupReg+0x50>)
 8002a36:	6819      	ldr	r1, [r3, #0]
 8002a38:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <updateRTCBackupReg+0x44>)
 8002a3a:	78db      	ldrb	r3, [r3, #3]
 8002a3c:	001a      	movs	r2, r3
 8002a3e:	4b05      	ldr	r3, [pc, #20]	@ (8002a54 <updateRTCBackupReg+0x48>)
 8002a40:	0018      	movs	r0, r3
 8002a42:	f004 f9c5 	bl	8006dd0 <HAL_RTCEx_BKUPWrite>

}
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	200000e8 	.word	0x200000e8
 8002a50:	200000d4 	.word	0x200000d4
 8002a54:	200001dc 	.word	0x200001dc
 8002a58:	20000034 	.word	0x20000034
 8002a5c:	20000038 	.word	0x20000038

08002a60 <conv2Mil>:

/*
 * Converts the time in an AM/PM RTC time to 24-hour time
 * Returns this time in an RTC Time Def object
 */
RTC_TimeTypeDef conv2Mil(RTC_TimeTypeDef *oldTime) {
 8002a60:	b5b0      	push	{r4, r5, r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]

	RTC_TimeTypeDef convertedTime = *oldTime;
 8002a6a:	250c      	movs	r5, #12
 8002a6c:	197b      	adds	r3, r7, r5
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a72:	c313      	stmia	r3!, {r0, r1, r4}
 8002a74:	ca03      	ldmia	r2!, {r0, r1}
 8002a76:	c303      	stmia	r3!, {r0, r1}

	// If we are in PM, increment hours by 12 (but not if it is 12 p.m.)
	if(oldTime->TimeFormat == RTC_HOURFORMAT12_PM && oldTime->Hours != 12) {
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	78db      	ldrb	r3, [r3, #3]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d10a      	bne.n	8002a96 <conv2Mil+0x36>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b0c      	cmp	r3, #12
 8002a86:	d006      	beq.n	8002a96 <conv2Mil+0x36>
		convertedTime.Hours += 12;
 8002a88:	197b      	adds	r3, r7, r5
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	197b      	adds	r3, r7, r5
 8002a92:	701a      	strb	r2, [r3, #0]
 8002a94:	e00b      	b.n	8002aae <conv2Mil+0x4e>
	}
	// If we are in AM and the hours are 12, set hours to 0.
	else if(oldTime->TimeFormat == RTC_HOURFORMAT12_AM && oldTime->Hours == 12) {
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	78db      	ldrb	r3, [r3, #3]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d107      	bne.n	8002aae <conv2Mil+0x4e>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d103      	bne.n	8002aae <conv2Mil+0x4e>
		convertedTime.Hours = 0;
 8002aa6:	230c      	movs	r3, #12
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
	else { // No change

	}

	// Make the update and display time function think that it is AM always
	convertedTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002aae:	210c      	movs	r1, #12
 8002ab0:	187b      	adds	r3, r7, r1
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	70da      	strb	r2, [r3, #3]

	return convertedTime;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	187a      	adds	r2, r7, r1
 8002aba:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002abc:	c313      	stmia	r3!, {r0, r1, r4}
 8002abe:	ca03      	ldmia	r2!, {r0, r1}
 8002ac0:	c303      	stmia	r3!, {r0, r1}

}
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b008      	add	sp, #32
 8002ac8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002acc <startAudioStream>:

/*
 * Begins DMA streams to pull data from memory, process data, and push to i2s amplifier.
 */
void startAudioStream(void) {
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8002ad2:	1dfb      	adds	r3, r7, #7
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]

	// Prime RX buffers with data
	halRet = W25Q_readData(&spiFlash, 0x00000000, BUFFER_SIZE, spiRxPtr);
 8002ad8:	4b10      	ldr	r3, [pc, #64]	@ (8002b1c <startAudioStream+0x50>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	1dfc      	adds	r4, r7, #7
 8002ade:	2280      	movs	r2, #128	@ 0x80
 8002ae0:	0052      	lsls	r2, r2, #1
 8002ae2:	480f      	ldr	r0, [pc, #60]	@ (8002b20 <startAudioStream+0x54>)
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	f7fe fbcb 	bl	8001280 <W25Q_readData>
 8002aea:	0003      	movs	r3, r0
 8002aec:	7023      	strb	r3, [r4, #0]
	spiRxPtr = spiRxBuff2;
 8002aee:	4b0b      	ldr	r3, [pc, #44]	@ (8002b1c <startAudioStream+0x50>)
 8002af0:	4a0c      	ldr	r2, [pc, #48]	@ (8002b24 <startAudioStream+0x58>)
 8002af2:	601a      	str	r2, [r3, #0]
	halRet = W25Q_readData(&spiFlash, (0x00000000 + BUFFER_SIZE), BUFFER_SIZE, spiRxPtr);
 8002af4:	4b09      	ldr	r3, [pc, #36]	@ (8002b1c <startAudioStream+0x50>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	1dfc      	adds	r4, r7, #7
 8002afa:	2280      	movs	r2, #128	@ 0x80
 8002afc:	0052      	lsls	r2, r2, #1
 8002afe:	2180      	movs	r1, #128	@ 0x80
 8002b00:	0049      	lsls	r1, r1, #1
 8002b02:	4807      	ldr	r0, [pc, #28]	@ (8002b20 <startAudioStream+0x54>)
 8002b04:	f7fe fbbc 	bl	8001280 <W25Q_readData>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	7023      	strb	r3, [r4, #0]
	spiRxPtr = spiRxBuff1;
 8002b0c:	4b03      	ldr	r3, [pc, #12]	@ (8002b1c <startAudioStream+0x50>)
 8002b0e:	4a06      	ldr	r2, [pc, #24]	@ (8002b28 <startAudioStream+0x5c>)
 8002b10:	601a      	str	r2, [r3, #0]





}
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b003      	add	sp, #12
 8002b18:	bd90      	pop	{r4, r7, pc}
 8002b1a:	46c0      	nop			@ (mov r8, r8)
 8002b1c:	20000074 	.word	0x20000074
 8002b20:	20000420 	.word	0x20000420
 8002b24:	20000558 	.word	0x20000558
 8002b28:	20000458 	.word	0x20000458

08002b2c <stopAudioStream>:

/*
 * Halts DMA streams
 */
void stopAudioStream(void) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0

}
 8002b30:	46c0      	nop			@ (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b3a:	b672      	cpsid	i
}
 8002b3c:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	e7fd      	b.n	8002b3e <Error_Handler+0x8>
	...

08002b44 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8002b44:	b5b0      	push	{r4, r5, r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	0005      	movs	r5, r0
 8002b4c:	000c      	movs	r4, r1
 8002b4e:	0010      	movs	r0, r2
 8002b50:	0019      	movs	r1, r3
 8002b52:	1dbb      	adds	r3, r7, #6
 8002b54:	1c2a      	adds	r2, r5, #0
 8002b56:	801a      	strh	r2, [r3, #0]
 8002b58:	1d3b      	adds	r3, r7, #4
 8002b5a:	1c22      	adds	r2, r4, #0
 8002b5c:	801a      	strh	r2, [r3, #0]
 8002b5e:	1cbb      	adds	r3, r7, #2
 8002b60:	1c02      	adds	r2, r0, #0
 8002b62:	801a      	strh	r2, [r3, #0]
 8002b64:	003b      	movs	r3, r7
 8002b66:	1c0a      	adds	r2, r1, #0
 8002b68:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8002b6a:	4b7c      	ldr	r3, [pc, #496]	@ (8002d5c <sevSeg_Init+0x218>)
 8002b6c:	1dba      	adds	r2, r7, #6
 8002b6e:	8812      	ldrh	r2, [r2, #0]
 8002b70:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8002b72:	4b7b      	ldr	r3, [pc, #492]	@ (8002d60 <sevSeg_Init+0x21c>)
 8002b74:	1d3a      	adds	r2, r7, #4
 8002b76:	8812      	ldrh	r2, [r2, #0]
 8002b78:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8002b7a:	4b7a      	ldr	r3, [pc, #488]	@ (8002d64 <sevSeg_Init+0x220>)
 8002b7c:	1cba      	adds	r2, r7, #2
 8002b7e:	8812      	ldrh	r2, [r2, #0]
 8002b80:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8002b82:	4b79      	ldr	r3, [pc, #484]	@ (8002d68 <sevSeg_Init+0x224>)
 8002b84:	003a      	movs	r2, r7
 8002b86:	8812      	ldrh	r2, [r2, #0]
 8002b88:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8002b8a:	4a78      	ldr	r2, [pc, #480]	@ (8002d6c <sevSeg_Init+0x228>)
 8002b8c:	2330      	movs	r3, #48	@ 0x30
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8002b94:	4a76      	ldr	r2, [pc, #472]	@ (8002d70 <sevSeg_Init+0x22c>)
 8002b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b98:	0010      	movs	r0, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	234c      	movs	r3, #76	@ 0x4c
 8002b9e:	001a      	movs	r2, r3
 8002ba0:	f006 f908 	bl	8008db4 <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8002ba4:	4b73      	ldr	r3, [pc, #460]	@ (8002d74 <sevSeg_Init+0x230>)
 8002ba6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ba8:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	e00b      	b.n	8002bc8 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002bb6:	18d3      	adds	r3, r2, r3
 8002bb8:	6819      	ldr	r1, [r3, #0]
 8002bba:	4b6f      	ldr	r3, [pc, #444]	@ (8002d78 <sevSeg_Init+0x234>)
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	ddf0      	ble.n	8002bb0 <sevSeg_Init+0x6c>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8002bce:	4b6a      	ldr	r3, [pc, #424]	@ (8002d78 <sevSeg_Init+0x234>)
 8002bd0:	6918      	ldr	r0, [r3, #16]
 8002bd2:	4b66      	ldr	r3, [pc, #408]	@ (8002d6c <sevSeg_Init+0x228>)
 8002bd4:	8819      	ldrh	r1, [r3, #0]
 8002bd6:	4b69      	ldr	r3, [pc, #420]	@ (8002d7c <sevSeg_Init+0x238>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	001a      	movs	r2, r3
 8002bdc:	f001 f9c9 	bl	8003f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8002be0:	4b65      	ldr	r3, [pc, #404]	@ (8002d78 <sevSeg_Init+0x234>)
 8002be2:	6918      	ldr	r0, [r3, #16]
 8002be4:	4b61      	ldr	r3, [pc, #388]	@ (8002d6c <sevSeg_Init+0x228>)
 8002be6:	8819      	ldrh	r1, [r3, #0]
 8002be8:	4b64      	ldr	r3, [pc, #400]	@ (8002d7c <sevSeg_Init+0x238>)
 8002bea:	785b      	ldrb	r3, [r3, #1]
 8002bec:	001a      	movs	r2, r3
 8002bee:	f001 f9c0 	bl	8003f72 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002bf2:	4b61      	ldr	r3, [pc, #388]	@ (8002d78 <sevSeg_Init+0x234>)
 8002bf4:	6898      	ldr	r0, [r3, #8]
 8002bf6:	4b5b      	ldr	r3, [pc, #364]	@ (8002d64 <sevSeg_Init+0x220>)
 8002bf8:	8819      	ldrh	r1, [r3, #0]
 8002bfa:	4b60      	ldr	r3, [pc, #384]	@ (8002d7c <sevSeg_Init+0x238>)
 8002bfc:	785b      	ldrb	r3, [r3, #1]
 8002bfe:	001a      	movs	r2, r3
 8002c00:	f001 f9b7 	bl	8003f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002c04:	4b5c      	ldr	r3, [pc, #368]	@ (8002d78 <sevSeg_Init+0x234>)
 8002c06:	6898      	ldr	r0, [r3, #8]
 8002c08:	4b56      	ldr	r3, [pc, #344]	@ (8002d64 <sevSeg_Init+0x220>)
 8002c0a:	8819      	ldrh	r1, [r3, #0]
 8002c0c:	4b5b      	ldr	r3, [pc, #364]	@ (8002d7c <sevSeg_Init+0x238>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	001a      	movs	r2, r3
 8002c12:	f001 f9ae 	bl	8003f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8002c16:	4b58      	ldr	r3, [pc, #352]	@ (8002d78 <sevSeg_Init+0x234>)
 8002c18:	68d8      	ldr	r0, [r3, #12]
 8002c1a:	4b53      	ldr	r3, [pc, #332]	@ (8002d68 <sevSeg_Init+0x224>)
 8002c1c:	8819      	ldrh	r1, [r3, #0]
 8002c1e:	4b57      	ldr	r3, [pc, #348]	@ (8002d7c <sevSeg_Init+0x238>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	001a      	movs	r2, r3
 8002c24:	f001 f9a5 	bl	8003f72 <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(50);
 8002c28:	2032      	movs	r0, #50	@ 0x32
 8002c2a:	f000 f95f 	bl	8002eec <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8002c2e:	2308      	movs	r3, #8
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	4a53      	ldr	r2, [pc, #332]	@ (8002d80 <sevSeg_Init+0x23c>)
 8002c34:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	e038      	b.n	8002cae <sevSeg_Init+0x16a>

		sendByte = hofSymb[i];
 8002c3c:	231b      	movs	r3, #27
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	2208      	movs	r2, #8
 8002c42:	18b9      	adds	r1, r7, r2
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	188a      	adds	r2, r1, r2
 8002c48:	7812      	ldrb	r2, [r2, #0]
 8002c4a:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	e027      	b.n	8002ca2 <sevSeg_Init+0x15e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8002c52:	4b49      	ldr	r3, [pc, #292]	@ (8002d78 <sevSeg_Init+0x234>)
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	4b41      	ldr	r3, [pc, #260]	@ (8002d5c <sevSeg_Init+0x218>)
 8002c58:	8819      	ldrh	r1, [r3, #0]
 8002c5a:	241b      	movs	r4, #27
 8002c5c:	193b      	adds	r3, r7, r4
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2201      	movs	r2, #1
 8002c62:	4013      	ands	r3, r2
 8002c64:	4a45      	ldr	r2, [pc, #276]	@ (8002d7c <sevSeg_Init+0x238>)
 8002c66:	5cd3      	ldrb	r3, [r2, r3]
 8002c68:	001a      	movs	r2, r3
 8002c6a:	f001 f982 	bl	8003f72 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8002c6e:	4b42      	ldr	r3, [pc, #264]	@ (8002d78 <sevSeg_Init+0x234>)
 8002c70:	6858      	ldr	r0, [r3, #4]
 8002c72:	4b3b      	ldr	r3, [pc, #236]	@ (8002d60 <sevSeg_Init+0x21c>)
 8002c74:	8819      	ldrh	r1, [r3, #0]
 8002c76:	4b41      	ldr	r3, [pc, #260]	@ (8002d7c <sevSeg_Init+0x238>)
 8002c78:	785b      	ldrb	r3, [r3, #1]
 8002c7a:	001a      	movs	r2, r3
 8002c7c:	f001 f979 	bl	8003f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8002c80:	4b3d      	ldr	r3, [pc, #244]	@ (8002d78 <sevSeg_Init+0x234>)
 8002c82:	6858      	ldr	r0, [r3, #4]
 8002c84:	4b36      	ldr	r3, [pc, #216]	@ (8002d60 <sevSeg_Init+0x21c>)
 8002c86:	8819      	ldrh	r1, [r3, #0]
 8002c88:	4b3c      	ldr	r3, [pc, #240]	@ (8002d7c <sevSeg_Init+0x238>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	f001 f970 	bl	8003f72 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	193a      	adds	r2, r7, r4
 8002c96:	7812      	ldrb	r2, [r2, #0]
 8002c98:	0852      	lsrs	r2, r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b07      	cmp	r3, #7
 8002ca6:	ddd4      	ble.n	8002c52 <sevSeg_Init+0x10e>
	for(int i = 0; i <= 3; i++) {
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	3301      	adds	r3, #1
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	ddc3      	ble.n	8002c3c <sevSeg_Init+0xf8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002cb4:	4b30      	ldr	r3, [pc, #192]	@ (8002d78 <sevSeg_Init+0x234>)
 8002cb6:	6898      	ldr	r0, [r3, #8]
 8002cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8002d64 <sevSeg_Init+0x220>)
 8002cba:	8819      	ldrh	r1, [r3, #0]
 8002cbc:	4b2f      	ldr	r3, [pc, #188]	@ (8002d7c <sevSeg_Init+0x238>)
 8002cbe:	785b      	ldrb	r3, [r3, #1]
 8002cc0:	001a      	movs	r2, r3
 8002cc2:	f001 f956 	bl	8003f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002cc6:	4b2c      	ldr	r3, [pc, #176]	@ (8002d78 <sevSeg_Init+0x234>)
 8002cc8:	6898      	ldr	r0, [r3, #8]
 8002cca:	4b26      	ldr	r3, [pc, #152]	@ (8002d64 <sevSeg_Init+0x220>)
 8002ccc:	8819      	ldrh	r1, [r3, #0]
 8002cce:	4b2b      	ldr	r3, [pc, #172]	@ (8002d7c <sevSeg_Init+0x238>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	001a      	movs	r2, r3
 8002cd4:	f001 f94d 	bl	8003f72 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8002cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f005 f874 	bl	8007dc8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f005 f824 	bl	8007d30 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8002ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cee:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8002cf0:	46c0      	nop			@ (mov r8, r8)
 8002cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1ad2      	subs	r2, r2, r3
 8002cfc:	2380      	movs	r3, #128	@ 0x80
 8002cfe:	01db      	lsls	r3, r3, #7
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d3f6      	bcc.n	8002cf2 <sevSeg_Init+0x1ae>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8002d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d06:	0018      	movs	r0, r3
 8002d08:	f005 f85e 	bl	8007dc8 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <sevSeg_Init+0x234>)
 8002d0e:	6918      	ldr	r0, [r3, #16]
 8002d10:	4b16      	ldr	r3, [pc, #88]	@ (8002d6c <sevSeg_Init+0x228>)
 8002d12:	8819      	ldrh	r1, [r3, #0]
 8002d14:	4b19      	ldr	r3, [pc, #100]	@ (8002d7c <sevSeg_Init+0x238>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	001a      	movs	r2, r3
 8002d1a:	f001 f92a 	bl	8003f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8002d1e:	4b16      	ldr	r3, [pc, #88]	@ (8002d78 <sevSeg_Init+0x234>)
 8002d20:	6918      	ldr	r0, [r3, #16]
 8002d22:	4b12      	ldr	r3, [pc, #72]	@ (8002d6c <sevSeg_Init+0x228>)
 8002d24:	8819      	ldrh	r1, [r3, #0]
 8002d26:	4b15      	ldr	r3, [pc, #84]	@ (8002d7c <sevSeg_Init+0x238>)
 8002d28:	785b      	ldrb	r3, [r3, #1]
 8002d2a:	001a      	movs	r2, r3
 8002d2c:	f001 f921 	bl	8003f72 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002d30:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <sevSeg_Init+0x234>)
 8002d32:	6898      	ldr	r0, [r3, #8]
 8002d34:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <sevSeg_Init+0x220>)
 8002d36:	8819      	ldrh	r1, [r3, #0]
 8002d38:	4b10      	ldr	r3, [pc, #64]	@ (8002d7c <sevSeg_Init+0x238>)
 8002d3a:	785b      	ldrb	r3, [r3, #1]
 8002d3c:	001a      	movs	r2, r3
 8002d3e:	f001 f918 	bl	8003f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002d42:	4b0d      	ldr	r3, [pc, #52]	@ (8002d78 <sevSeg_Init+0x234>)
 8002d44:	6898      	ldr	r0, [r3, #8]
 8002d46:	4b07      	ldr	r3, [pc, #28]	@ (8002d64 <sevSeg_Init+0x220>)
 8002d48:	8819      	ldrh	r1, [r3, #0]
 8002d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <sevSeg_Init+0x238>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	001a      	movs	r2, r3
 8002d50:	f001 f90f 	bl	8003f72 <HAL_GPIO_WritePin>

}
 8002d54:	46c0      	nop			@ (mov r8, r8)
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b008      	add	sp, #32
 8002d5a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d5c:	20000658 	.word	0x20000658
 8002d60:	2000065a 	.word	0x2000065a
 8002d64:	2000065c 	.word	0x2000065c
 8002d68:	2000065e 	.word	0x2000065e
 8002d6c:	20000660 	.word	0x20000660
 8002d70:	20000664 	.word	0x20000664
 8002d74:	200006b0 	.word	0x200006b0
 8002d78:	20000078 	.word	0x20000078
 8002d7c:	2000008c 	.word	0x2000008c
 8002d80:	471d3700 	.word	0x471d3700

08002d84 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime, uint8_t userAlarmEnable) {
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	000a      	movs	r2, r1
 8002d8e:	1cfb      	adds	r3, r7, #3
 8002d90:	701a      	strb	r2, [r3, #0]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	210a      	movs	r1, #10
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f7fd f9b3 	bl	8000104 <__udivsi3>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	2408      	movs	r4, #8
 8002da4:	193b      	adds	r3, r7, r4
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	210a      	movs	r1, #10
 8002dae:	0018      	movs	r0, r3
 8002db0:	f7fd fa2e 	bl	8000210 <__aeabi_uidivmod>
 8002db4:	000b      	movs	r3, r1
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	193b      	adds	r3, r7, r4
 8002dba:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002dc0:	210a      	movs	r1, #10
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f7fd f99e 	bl	8000104 <__udivsi3>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	193b      	adds	r3, r7, r4
 8002dce:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002dd4:	210a      	movs	r1, #10
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f7fd fa1a 	bl	8000210 <__aeabi_uidivmod>
 8002ddc:	000b      	movs	r3, r1
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	193b      	adds	r3, r7, r4
 8002de2:	70da      	strb	r2, [r3, #3]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 3; i >= 0; i--) {
 8002de4:	2303      	movs	r3, #3
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	e05b      	b.n	8002ea2 <sevSeg_updateDigits+0x11e>

		sendByte = dispDigits[sendTime[i]];
 8002dea:	2308      	movs	r3, #8
 8002dec:	18fa      	adds	r2, r7, r3
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	18d3      	adds	r3, r2, r3
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	0019      	movs	r1, r3
 8002df6:	2017      	movs	r0, #23
 8002df8:	183b      	adds	r3, r7, r0
 8002dfa:	4a36      	ldr	r2, [pc, #216]	@ (8002ed4 <sevSeg_updateDigits+0x150>)
 8002dfc:	5c52      	ldrb	r2, [r2, r1]
 8002dfe:	701a      	strb	r2, [r3, #0]

		// If tenth's place of hour and zero, disable this segment
		if( (i == 0) && (sendByte == dispDigits[0])) {
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d107      	bne.n	8002e16 <sevSeg_updateDigits+0x92>
 8002e06:	2242      	movs	r2, #66	@ 0x42
 8002e08:	183b      	adds	r3, r7, r0
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d102      	bne.n	8002e16 <sevSeg_updateDigits+0x92>
			sendByte = 0xFF;
 8002e10:	183b      	adds	r3, r7, r0
 8002e12:	22ff      	movs	r2, #255	@ 0xff
 8002e14:	701a      	strb	r2, [r3, #0]
		}

		// If one's place of hour, set decimal point based on AM/PM.
		// OR
		// If one's place of minute, set decimal place based on user alarm enabled
		if( ((i == 1) && (updateTime->TimeFormat == RTC_HOURFORMAT12_PM)) ||
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d103      	bne.n	8002e24 <sevSeg_updateDigits+0xa0>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	78db      	ldrb	r3, [r3, #3]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d006      	beq.n	8002e32 <sevSeg_updateDigits+0xae>
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d10a      	bne.n	8002e40 <sevSeg_updateDigits+0xbc>
			((i == 3) && userAlarmEnable)	) {
 8002e2a:	1cfb      	adds	r3, r7, #3
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d006      	beq.n	8002e40 <sevSeg_updateDigits+0xbc>
			sendByte = (sendByte & 0b11111101);
 8002e32:	2217      	movs	r2, #23
 8002e34:	18bb      	adds	r3, r7, r2
 8002e36:	18ba      	adds	r2, r7, r2
 8002e38:	7812      	ldrb	r2, [r2, #0]
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	438a      	bics	r2, r1
 8002e3e:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	e027      	b.n	8002e96 <sevSeg_updateDigits+0x112>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[(sendByte & 1)]);
 8002e46:	4b24      	ldr	r3, [pc, #144]	@ (8002ed8 <sevSeg_updateDigits+0x154>)
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	4b24      	ldr	r3, [pc, #144]	@ (8002edc <sevSeg_updateDigits+0x158>)
 8002e4c:	8819      	ldrh	r1, [r3, #0]
 8002e4e:	2417      	movs	r4, #23
 8002e50:	193b      	adds	r3, r7, r4
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2201      	movs	r2, #1
 8002e56:	4013      	ands	r3, r2
 8002e58:	4a21      	ldr	r2, [pc, #132]	@ (8002ee0 <sevSeg_updateDigits+0x15c>)
 8002e5a:	5cd3      	ldrb	r3, [r2, r3]
 8002e5c:	001a      	movs	r2, r3
 8002e5e:	f001 f888 	bl	8003f72 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8002e62:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed8 <sevSeg_updateDigits+0x154>)
 8002e64:	6858      	ldr	r0, [r3, #4]
 8002e66:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee4 <sevSeg_updateDigits+0x160>)
 8002e68:	8819      	ldrh	r1, [r3, #0]
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee0 <sevSeg_updateDigits+0x15c>)
 8002e6c:	785b      	ldrb	r3, [r3, #1]
 8002e6e:	001a      	movs	r2, r3
 8002e70:	f001 f87f 	bl	8003f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8002e74:	4b18      	ldr	r3, [pc, #96]	@ (8002ed8 <sevSeg_updateDigits+0x154>)
 8002e76:	6858      	ldr	r0, [r3, #4]
 8002e78:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee4 <sevSeg_updateDigits+0x160>)
 8002e7a:	8819      	ldrh	r1, [r3, #0]
 8002e7c:	4b18      	ldr	r3, [pc, #96]	@ (8002ee0 <sevSeg_updateDigits+0x15c>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	001a      	movs	r2, r3
 8002e82:	f001 f876 	bl	8003f72 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8002e86:	193b      	adds	r3, r7, r4
 8002e88:	193a      	adds	r2, r7, r4
 8002e8a:	7812      	ldrb	r2, [r2, #0]
 8002e8c:	0852      	lsrs	r2, r2, #1
 8002e8e:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3301      	adds	r3, #1
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b07      	cmp	r3, #7
 8002e9a:	ddd4      	ble.n	8002e46 <sevSeg_updateDigits+0xc2>
	for(int i = 3; i >= 0; i--) {
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	daa0      	bge.n	8002dea <sevSeg_updateDigits+0x66>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <sevSeg_updateDigits+0x154>)
 8002eaa:	6898      	ldr	r0, [r3, #8]
 8002eac:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee8 <sevSeg_updateDigits+0x164>)
 8002eae:	8819      	ldrh	r1, [r3, #0]
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <sevSeg_updateDigits+0x15c>)
 8002eb2:	785b      	ldrb	r3, [r3, #1]
 8002eb4:	001a      	movs	r2, r3
 8002eb6:	f001 f85c 	bl	8003f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002eba:	4b07      	ldr	r3, [pc, #28]	@ (8002ed8 <sevSeg_updateDigits+0x154>)
 8002ebc:	6898      	ldr	r0, [r3, #8]
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee8 <sevSeg_updateDigits+0x164>)
 8002ec0:	8819      	ldrh	r1, [r3, #0]
 8002ec2:	4b07      	ldr	r3, [pc, #28]	@ (8002ee0 <sevSeg_updateDigits+0x15c>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	001a      	movs	r2, r3
 8002ec8:	f001 f853 	bl	8003f72 <HAL_GPIO_WritePin>

	return;
 8002ecc:	46c0      	nop			@ (mov r8, r8)

}
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b007      	add	sp, #28
 8002ed2:	bd90      	pop	{r4, r7, pc}
 8002ed4:	08008e14 	.word	0x08008e14
 8002ed8:	20000078 	.word	0x20000078
 8002edc:	20000658 	.word	0x20000658
 8002ee0:	2000008c 	.word	0x2000008c
 8002ee4:	2000065a 	.word	0x2000065a
 8002ee8:	2000065c 	.word	0x2000065c

08002eec <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	0002      	movs	r2, r0
 8002ef4:	1dbb      	adds	r3, r7, #6
 8002ef6:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8002ef8:	4b20      	ldr	r3, [pc, #128]	@ (8002f7c <sevSeg_setIntensity+0x90>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d105      	bne.n	8002f0c <sevSeg_setIntensity+0x20>
 8002f00:	4b1f      	ldr	r3, [pc, #124]	@ (8002f80 <sevSeg_setIntensity+0x94>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	1dba      	adds	r2, r7, #6
 8002f06:	8812      	ldrh	r2, [r2, #0]
 8002f08:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f0a:	e02c      	b.n	8002f66 <sevSeg_setIntensity+0x7a>
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f7c <sevSeg_setIntensity+0x90>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d105      	bne.n	8002f20 <sevSeg_setIntensity+0x34>
 8002f14:	4b1a      	ldr	r3, [pc, #104]	@ (8002f80 <sevSeg_setIntensity+0x94>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	1dbb      	adds	r3, r7, #6
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	6393      	str	r3, [r2, #56]	@ 0x38
 8002f1e:	e022      	b.n	8002f66 <sevSeg_setIntensity+0x7a>
 8002f20:	4b16      	ldr	r3, [pc, #88]	@ (8002f7c <sevSeg_setIntensity+0x90>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d105      	bne.n	8002f34 <sevSeg_setIntensity+0x48>
 8002f28:	4b15      	ldr	r3, [pc, #84]	@ (8002f80 <sevSeg_setIntensity+0x94>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	1dbb      	adds	r3, r7, #6
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002f32:	e018      	b.n	8002f66 <sevSeg_setIntensity+0x7a>
 8002f34:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <sevSeg_setIntensity+0x90>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b0c      	cmp	r3, #12
 8002f3a:	d105      	bne.n	8002f48 <sevSeg_setIntensity+0x5c>
 8002f3c:	4b10      	ldr	r3, [pc, #64]	@ (8002f80 <sevSeg_setIntensity+0x94>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	1dbb      	adds	r3, r7, #6
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f46:	e00e      	b.n	8002f66 <sevSeg_setIntensity+0x7a>
 8002f48:	4b0c      	ldr	r3, [pc, #48]	@ (8002f7c <sevSeg_setIntensity+0x90>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b10      	cmp	r3, #16
 8002f4e:	d105      	bne.n	8002f5c <sevSeg_setIntensity+0x70>
 8002f50:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <sevSeg_setIntensity+0x94>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	1dbb      	adds	r3, r7, #6
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f5a:	e004      	b.n	8002f66 <sevSeg_setIntensity+0x7a>
 8002f5c:	4b08      	ldr	r3, [pc, #32]	@ (8002f80 <sevSeg_setIntensity+0x94>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	1dbb      	adds	r3, r7, #6
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 8002f66:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <sevSeg_setIntensity+0x90>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <sevSeg_setIntensity+0x94>)
 8002f6c:	0011      	movs	r1, r2
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f005 f82a 	bl	8007fc8 <HAL_TIM_PWM_Start>

}
 8002f74:	46c0      	nop			@ (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b002      	add	sp, #8
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	200006b0 	.word	0x200006b0
 8002f80:	20000664 	.word	0x20000664

08002f84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f8a:	4b13      	ldr	r3, [pc, #76]	@ (8002fd8 <HAL_MspInit+0x54>)
 8002f8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f8e:	4b12      	ldr	r3, [pc, #72]	@ (8002fd8 <HAL_MspInit+0x54>)
 8002f90:	2101      	movs	r1, #1
 8002f92:	430a      	orrs	r2, r1
 8002f94:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f96:	4b10      	ldr	r3, [pc, #64]	@ (8002fd8 <HAL_MspInit+0x54>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	607b      	str	r3, [r7, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd8 <HAL_MspInit+0x54>)
 8002fa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd8 <HAL_MspInit+0x54>)
 8002fa8:	2180      	movs	r1, #128	@ 0x80
 8002faa:	0549      	lsls	r1, r1, #21
 8002fac:	430a      	orrs	r2, r1
 8002fae:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002fb0:	4b09      	ldr	r3, [pc, #36]	@ (8002fd8 <HAL_MspInit+0x54>)
 8002fb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fb4:	2380      	movs	r3, #128	@ 0x80
 8002fb6:	055b      	lsls	r3, r3, #21
 8002fb8:	4013      	ands	r3, r2
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2004      	movs	r0, #4
 8002fc4:	f000 fc96 	bl	80038f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002fc8:	2004      	movs	r0, #4
 8002fca:	f000 fca8 	bl	800391e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fce:	46c0      	nop			@ (mov r8, r8)
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b002      	add	sp, #8
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			@ (mov r8, r8)
 8002fd8:	40021000 	.word	0x40021000

08002fdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fdc:	b590      	push	{r4, r7, lr}
 8002fde:	b095      	sub	sp, #84	@ 0x54
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe4:	233c      	movs	r3, #60	@ 0x3c
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	0018      	movs	r0, r3
 8002fea:	2314      	movs	r3, #20
 8002fec:	001a      	movs	r2, r3
 8002fee:	2100      	movs	r1, #0
 8002ff0:	f005 feb4 	bl	8008d5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ff4:	2414      	movs	r4, #20
 8002ff6:	193b      	adds	r3, r7, r4
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	2328      	movs	r3, #40	@ 0x28
 8002ffc:	001a      	movs	r2, r3
 8002ffe:	2100      	movs	r1, #0
 8003000:	f005 feac 	bl	8008d5c <memset>
  if(hi2c->Instance==I2C1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a22      	ldr	r2, [pc, #136]	@ (8003094 <HAL_I2C_MspInit+0xb8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d13d      	bne.n	800308a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800300e:	193b      	adds	r3, r7, r4
 8003010:	2220      	movs	r2, #32
 8003012:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003014:	193b      	adds	r3, r7, r4
 8003016:	2200      	movs	r2, #0
 8003018:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800301a:	193b      	adds	r3, r7, r4
 800301c:	0018      	movs	r0, r3
 800301e:	f002 fc71 	bl	8005904 <HAL_RCCEx_PeriphCLKConfig>
 8003022:	1e03      	subs	r3, r0, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003026:	f7ff fd86 	bl	8002b36 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800302a:	4b1b      	ldr	r3, [pc, #108]	@ (8003098 <HAL_I2C_MspInit+0xbc>)
 800302c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800302e:	4b1a      	ldr	r3, [pc, #104]	@ (8003098 <HAL_I2C_MspInit+0xbc>)
 8003030:	2102      	movs	r1, #2
 8003032:	430a      	orrs	r2, r1
 8003034:	635a      	str	r2, [r3, #52]	@ 0x34
 8003036:	4b18      	ldr	r3, [pc, #96]	@ (8003098 <HAL_I2C_MspInit+0xbc>)
 8003038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800303a:	2202      	movs	r2, #2
 800303c:	4013      	ands	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003042:	213c      	movs	r1, #60	@ 0x3c
 8003044:	187b      	adds	r3, r7, r1
 8003046:	22c0      	movs	r2, #192	@ 0xc0
 8003048:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800304a:	187b      	adds	r3, r7, r1
 800304c:	2212      	movs	r2, #18
 800304e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	187b      	adds	r3, r7, r1
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003056:	187b      	adds	r3, r7, r1
 8003058:	2200      	movs	r2, #0
 800305a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800305c:	187b      	adds	r3, r7, r1
 800305e:	2206      	movs	r2, #6
 8003060:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003062:	187b      	adds	r3, r7, r1
 8003064:	4a0d      	ldr	r2, [pc, #52]	@ (800309c <HAL_I2C_MspInit+0xc0>)
 8003066:	0019      	movs	r1, r3
 8003068:	0010      	movs	r0, r2
 800306a:	f000 fe01 	bl	8003c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800306e:	4b0a      	ldr	r3, [pc, #40]	@ (8003098 <HAL_I2C_MspInit+0xbc>)
 8003070:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003072:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <HAL_I2C_MspInit+0xbc>)
 8003074:	2180      	movs	r1, #128	@ 0x80
 8003076:	0389      	lsls	r1, r1, #14
 8003078:	430a      	orrs	r2, r1
 800307a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800307c:	4b06      	ldr	r3, [pc, #24]	@ (8003098 <HAL_I2C_MspInit+0xbc>)
 800307e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003080:	2380      	movs	r3, #128	@ 0x80
 8003082:	039b      	lsls	r3, r3, #14
 8003084:	4013      	ands	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800308a:	46c0      	nop			@ (mov r8, r8)
 800308c:	46bd      	mov	sp, r7
 800308e:	b015      	add	sp, #84	@ 0x54
 8003090:	bd90      	pop	{r4, r7, pc}
 8003092:	46c0      	nop			@ (mov r8, r8)
 8003094:	40005400 	.word	0x40005400
 8003098:	40021000 	.word	0x40021000
 800309c:	50000400 	.word	0x50000400

080030a0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b095      	sub	sp, #84	@ 0x54
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	233c      	movs	r3, #60	@ 0x3c
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	0018      	movs	r0, r3
 80030ae:	2314      	movs	r3, #20
 80030b0:	001a      	movs	r2, r3
 80030b2:	2100      	movs	r1, #0
 80030b4:	f005 fe52 	bl	8008d5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030b8:	2414      	movs	r4, #20
 80030ba:	193b      	adds	r3, r7, r4
 80030bc:	0018      	movs	r0, r3
 80030be:	2328      	movs	r3, #40	@ 0x28
 80030c0:	001a      	movs	r2, r3
 80030c2:	2100      	movs	r1, #0
 80030c4:	f005 fe4a 	bl	8008d5c <memset>
  if(hi2s->Instance==SPI1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a4a      	ldr	r2, [pc, #296]	@ (80031f8 <HAL_I2S_MspInit+0x158>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d000      	beq.n	80030d4 <HAL_I2S_MspInit+0x34>
 80030d2:	e08d      	b.n	80031f0 <HAL_I2S_MspInit+0x150>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80030d4:	193b      	adds	r3, r7, r4
 80030d6:	2280      	movs	r2, #128	@ 0x80
 80030d8:	0112      	lsls	r2, r2, #4
 80030da:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80030dc:	193b      	adds	r3, r7, r4
 80030de:	2200      	movs	r2, #0
 80030e0:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030e2:	193b      	adds	r3, r7, r4
 80030e4:	0018      	movs	r0, r3
 80030e6:	f002 fc0d 	bl	8005904 <HAL_RCCEx_PeriphCLKConfig>
 80030ea:	1e03      	subs	r3, r0, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80030ee:	f7ff fd22 	bl	8002b36 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030f2:	4b42      	ldr	r3, [pc, #264]	@ (80031fc <HAL_I2S_MspInit+0x15c>)
 80030f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030f6:	4b41      	ldr	r3, [pc, #260]	@ (80031fc <HAL_I2S_MspInit+0x15c>)
 80030f8:	2180      	movs	r1, #128	@ 0x80
 80030fa:	0149      	lsls	r1, r1, #5
 80030fc:	430a      	orrs	r2, r1
 80030fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8003100:	4b3e      	ldr	r3, [pc, #248]	@ (80031fc <HAL_I2S_MspInit+0x15c>)
 8003102:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003104:	2380      	movs	r3, #128	@ 0x80
 8003106:	015b      	lsls	r3, r3, #5
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310e:	4b3b      	ldr	r3, [pc, #236]	@ (80031fc <HAL_I2S_MspInit+0x15c>)
 8003110:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003112:	4b3a      	ldr	r3, [pc, #232]	@ (80031fc <HAL_I2S_MspInit+0x15c>)
 8003114:	2101      	movs	r1, #1
 8003116:	430a      	orrs	r2, r1
 8003118:	635a      	str	r2, [r3, #52]	@ 0x34
 800311a:	4b38      	ldr	r3, [pc, #224]	@ (80031fc <HAL_I2S_MspInit+0x15c>)
 800311c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800311e:	2201      	movs	r2, #1
 8003120:	4013      	ands	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003126:	4b35      	ldr	r3, [pc, #212]	@ (80031fc <HAL_I2S_MspInit+0x15c>)
 8003128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800312a:	4b34      	ldr	r3, [pc, #208]	@ (80031fc <HAL_I2S_MspInit+0x15c>)
 800312c:	2102      	movs	r1, #2
 800312e:	430a      	orrs	r2, r1
 8003130:	635a      	str	r2, [r3, #52]	@ 0x34
 8003132:	4b32      	ldr	r3, [pc, #200]	@ (80031fc <HAL_I2S_MspInit+0x15c>)
 8003134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003136:	2202      	movs	r2, #2
 8003138:	4013      	ands	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA1     ------> I2S1_CK
    PB0     ------> I2S1_WS
    PA12 [PA10]     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 800313e:	243c      	movs	r4, #60	@ 0x3c
 8003140:	193b      	adds	r3, r7, r4
 8003142:	4a2f      	ldr	r2, [pc, #188]	@ (8003200 <HAL_I2S_MspInit+0x160>)
 8003144:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003146:	193b      	adds	r3, r7, r4
 8003148:	2202      	movs	r2, #2
 800314a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	193b      	adds	r3, r7, r4
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003152:	193b      	adds	r3, r7, r4
 8003154:	2200      	movs	r2, #0
 8003156:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003158:	193b      	adds	r3, r7, r4
 800315a:	2200      	movs	r2, #0
 800315c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315e:	193a      	adds	r2, r7, r4
 8003160:	23a0      	movs	r3, #160	@ 0xa0
 8003162:	05db      	lsls	r3, r3, #23
 8003164:	0011      	movs	r1, r2
 8003166:	0018      	movs	r0, r3
 8003168:	f000 fd82 	bl	8003c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800316c:	0021      	movs	r1, r4
 800316e:	187b      	adds	r3, r7, r1
 8003170:	2201      	movs	r2, #1
 8003172:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003174:	187b      	adds	r3, r7, r1
 8003176:	2202      	movs	r2, #2
 8003178:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	187b      	adds	r3, r7, r1
 800317c:	2200      	movs	r2, #0
 800317e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003180:	187b      	adds	r3, r7, r1
 8003182:	2200      	movs	r2, #0
 8003184:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003186:	187b      	adds	r3, r7, r1
 8003188:	2200      	movs	r2, #0
 800318a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800318c:	187b      	adds	r3, r7, r1
 800318e:	4a1d      	ldr	r2, [pc, #116]	@ (8003204 <HAL_I2S_MspInit+0x164>)
 8003190:	0019      	movs	r1, r3
 8003192:	0010      	movs	r0, r2
 8003194:	f000 fd6c 	bl	8003c70 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003198:	4b1b      	ldr	r3, [pc, #108]	@ (8003208 <HAL_I2S_MspInit+0x168>)
 800319a:	4a1c      	ldr	r2, [pc, #112]	@ (800320c <HAL_I2S_MspInit+0x16c>)
 800319c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800319e:	4b1a      	ldr	r3, [pc, #104]	@ (8003208 <HAL_I2S_MspInit+0x168>)
 80031a0:	2211      	movs	r2, #17
 80031a2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031a4:	4b18      	ldr	r3, [pc, #96]	@ (8003208 <HAL_I2S_MspInit+0x168>)
 80031a6:	2210      	movs	r2, #16
 80031a8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031aa:	4b17      	ldr	r3, [pc, #92]	@ (8003208 <HAL_I2S_MspInit+0x168>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031b0:	4b15      	ldr	r3, [pc, #84]	@ (8003208 <HAL_I2S_MspInit+0x168>)
 80031b2:	2280      	movs	r2, #128	@ 0x80
 80031b4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031b6:	4b14      	ldr	r3, [pc, #80]	@ (8003208 <HAL_I2S_MspInit+0x168>)
 80031b8:	2280      	movs	r2, #128	@ 0x80
 80031ba:	0052      	lsls	r2, r2, #1
 80031bc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031be:	4b12      	ldr	r3, [pc, #72]	@ (8003208 <HAL_I2S_MspInit+0x168>)
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	00d2      	lsls	r2, r2, #3
 80031c4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80031c6:	4b10      	ldr	r3, [pc, #64]	@ (8003208 <HAL_I2S_MspInit+0x168>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003208 <HAL_I2S_MspInit+0x168>)
 80031ce:	22c0      	movs	r2, #192	@ 0xc0
 80031d0:	0192      	lsls	r2, r2, #6
 80031d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80031d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003208 <HAL_I2S_MspInit+0x168>)
 80031d6:	0018      	movs	r0, r3
 80031d8:	f000 fbbe 	bl	8003958 <HAL_DMA_Init>
 80031dc:	1e03      	subs	r3, r0, #0
 80031de:	d001      	beq.n	80031e4 <HAL_I2S_MspInit+0x144>
    {
      Error_Handler();
 80031e0:	f7ff fca9 	bl	8002b36 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a08      	ldr	r2, [pc, #32]	@ (8003208 <HAL_I2S_MspInit+0x168>)
 80031e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80031ea:	4b07      	ldr	r3, [pc, #28]	@ (8003208 <HAL_I2S_MspInit+0x168>)
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80031f0:	46c0      	nop			@ (mov r8, r8)
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b015      	add	sp, #84	@ 0x54
 80031f6:	bd90      	pop	{r4, r7, pc}
 80031f8:	40013000 	.word	0x40013000
 80031fc:	40021000 	.word	0x40021000
 8003200:	00001002 	.word	0x00001002
 8003204:	50000400 	.word	0x50000400
 8003208:	20000180 	.word	0x20000180
 800320c:	40020030 	.word	0x40020030

08003210 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b08f      	sub	sp, #60	@ 0x3c
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003218:	2410      	movs	r4, #16
 800321a:	193b      	adds	r3, r7, r4
 800321c:	0018      	movs	r0, r3
 800321e:	2328      	movs	r3, #40	@ 0x28
 8003220:	001a      	movs	r2, r3
 8003222:	2100      	movs	r1, #0
 8003224:	f005 fd9a 	bl	8008d5c <memset>
  if(hrtc->Instance==RTC)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a19      	ldr	r2, [pc, #100]	@ (8003294 <HAL_RTC_MspInit+0x84>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d12c      	bne.n	800328c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003232:	193b      	adds	r3, r7, r4
 8003234:	2280      	movs	r2, #128	@ 0x80
 8003236:	0292      	lsls	r2, r2, #10
 8003238:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800323a:	193b      	adds	r3, r7, r4
 800323c:	2280      	movs	r2, #128	@ 0x80
 800323e:	0052      	lsls	r2, r2, #1
 8003240:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003242:	193b      	adds	r3, r7, r4
 8003244:	0018      	movs	r0, r3
 8003246:	f002 fb5d 	bl	8005904 <HAL_RCCEx_PeriphCLKConfig>
 800324a:	1e03      	subs	r3, r0, #0
 800324c:	d001      	beq.n	8003252 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800324e:	f7ff fc72 	bl	8002b36 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003252:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <HAL_RTC_MspInit+0x88>)
 8003254:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003256:	4b10      	ldr	r3, [pc, #64]	@ (8003298 <HAL_RTC_MspInit+0x88>)
 8003258:	2180      	movs	r1, #128	@ 0x80
 800325a:	0209      	lsls	r1, r1, #8
 800325c:	430a      	orrs	r2, r1
 800325e:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003260:	4b0d      	ldr	r3, [pc, #52]	@ (8003298 <HAL_RTC_MspInit+0x88>)
 8003262:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003264:	4b0c      	ldr	r3, [pc, #48]	@ (8003298 <HAL_RTC_MspInit+0x88>)
 8003266:	2180      	movs	r1, #128	@ 0x80
 8003268:	00c9      	lsls	r1, r1, #3
 800326a:	430a      	orrs	r2, r1
 800326c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800326e:	4b0a      	ldr	r3, [pc, #40]	@ (8003298 <HAL_RTC_MspInit+0x88>)
 8003270:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003272:	2380      	movs	r3, #128	@ 0x80
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4013      	ands	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800327c:	2200      	movs	r2, #0
 800327e:	2100      	movs	r1, #0
 8003280:	2002      	movs	r0, #2
 8003282:	f000 fb37 	bl	80038f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8003286:	2002      	movs	r0, #2
 8003288:	f000 fb49 	bl	800391e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800328c:	46c0      	nop			@ (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	b00f      	add	sp, #60	@ 0x3c
 8003292:	bd90      	pop	{r4, r7, pc}
 8003294:	40002800 	.word	0x40002800
 8003298:	40021000 	.word	0x40021000

0800329c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b08b      	sub	sp, #44	@ 0x2c
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a4:	2414      	movs	r4, #20
 80032a6:	193b      	adds	r3, r7, r4
 80032a8:	0018      	movs	r0, r3
 80032aa:	2314      	movs	r3, #20
 80032ac:	001a      	movs	r2, r3
 80032ae:	2100      	movs	r1, #0
 80032b0:	f005 fd54 	bl	8008d5c <memset>
  if(hspi->Instance==SPI2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a50      	ldr	r2, [pc, #320]	@ (80033fc <HAL_SPI_MspInit+0x160>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d000      	beq.n	80032c0 <HAL_SPI_MspInit+0x24>
 80032be:	e098      	b.n	80033f2 <HAL_SPI_MspInit+0x156>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80032c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003400 <HAL_SPI_MspInit+0x164>)
 80032c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032c4:	4b4e      	ldr	r3, [pc, #312]	@ (8003400 <HAL_SPI_MspInit+0x164>)
 80032c6:	2180      	movs	r1, #128	@ 0x80
 80032c8:	01c9      	lsls	r1, r1, #7
 80032ca:	430a      	orrs	r2, r1
 80032cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032ce:	4b4c      	ldr	r3, [pc, #304]	@ (8003400 <HAL_SPI_MspInit+0x164>)
 80032d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032d2:	2380      	movs	r3, #128	@ 0x80
 80032d4:	01db      	lsls	r3, r3, #7
 80032d6:	4013      	ands	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032dc:	4b48      	ldr	r3, [pc, #288]	@ (8003400 <HAL_SPI_MspInit+0x164>)
 80032de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032e0:	4b47      	ldr	r3, [pc, #284]	@ (8003400 <HAL_SPI_MspInit+0x164>)
 80032e2:	2101      	movs	r1, #1
 80032e4:	430a      	orrs	r2, r1
 80032e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80032e8:	4b45      	ldr	r3, [pc, #276]	@ (8003400 <HAL_SPI_MspInit+0x164>)
 80032ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ec:	2201      	movs	r2, #1
 80032ee:	4013      	ands	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80032f4:	193b      	adds	r3, r7, r4
 80032f6:	2209      	movs	r2, #9
 80032f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fa:	193b      	adds	r3, r7, r4
 80032fc:	2202      	movs	r2, #2
 80032fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	193b      	adds	r3, r7, r4
 8003302:	2200      	movs	r2, #0
 8003304:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003306:	193b      	adds	r3, r7, r4
 8003308:	2200      	movs	r2, #0
 800330a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800330c:	193b      	adds	r3, r7, r4
 800330e:	2200      	movs	r2, #0
 8003310:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003312:	193a      	adds	r2, r7, r4
 8003314:	23a0      	movs	r3, #160	@ 0xa0
 8003316:	05db      	lsls	r3, r3, #23
 8003318:	0011      	movs	r1, r2
 800331a:	0018      	movs	r0, r3
 800331c:	f000 fca8 	bl	8003c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003320:	0021      	movs	r1, r4
 8003322:	187b      	adds	r3, r7, r1
 8003324:	2210      	movs	r2, #16
 8003326:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003328:	187b      	adds	r3, r7, r1
 800332a:	2202      	movs	r2, #2
 800332c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	187b      	adds	r3, r7, r1
 8003330:	2200      	movs	r2, #0
 8003332:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003334:	187b      	adds	r3, r7, r1
 8003336:	2200      	movs	r2, #0
 8003338:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 800333a:	187b      	adds	r3, r7, r1
 800333c:	2201      	movs	r2, #1
 800333e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003340:	187a      	adds	r2, r7, r1
 8003342:	23a0      	movs	r3, #160	@ 0xa0
 8003344:	05db      	lsls	r3, r3, #23
 8003346:	0011      	movs	r1, r2
 8003348:	0018      	movs	r0, r3
 800334a:	f000 fc91 	bl	8003c70 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel1;
 800334e:	4b2d      	ldr	r3, [pc, #180]	@ (8003404 <HAL_SPI_MspInit+0x168>)
 8003350:	4a2d      	ldr	r2, [pc, #180]	@ (8003408 <HAL_SPI_MspInit+0x16c>)
 8003352:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8003354:	4b2b      	ldr	r3, [pc, #172]	@ (8003404 <HAL_SPI_MspInit+0x168>)
 8003356:	2212      	movs	r2, #18
 8003358:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800335a:	4b2a      	ldr	r3, [pc, #168]	@ (8003404 <HAL_SPI_MspInit+0x168>)
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003360:	4b28      	ldr	r3, [pc, #160]	@ (8003404 <HAL_SPI_MspInit+0x168>)
 8003362:	2200      	movs	r2, #0
 8003364:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003366:	4b27      	ldr	r3, [pc, #156]	@ (8003404 <HAL_SPI_MspInit+0x168>)
 8003368:	2280      	movs	r2, #128	@ 0x80
 800336a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800336c:	4b25      	ldr	r3, [pc, #148]	@ (8003404 <HAL_SPI_MspInit+0x168>)
 800336e:	2200      	movs	r2, #0
 8003370:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003372:	4b24      	ldr	r3, [pc, #144]	@ (8003404 <HAL_SPI_MspInit+0x168>)
 8003374:	2200      	movs	r2, #0
 8003376:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003378:	4b22      	ldr	r3, [pc, #136]	@ (8003404 <HAL_SPI_MspInit+0x168>)
 800337a:	2200      	movs	r2, #0
 800337c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800337e:	4b21      	ldr	r3, [pc, #132]	@ (8003404 <HAL_SPI_MspInit+0x168>)
 8003380:	2200      	movs	r2, #0
 8003382:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003384:	4b1f      	ldr	r3, [pc, #124]	@ (8003404 <HAL_SPI_MspInit+0x168>)
 8003386:	0018      	movs	r0, r3
 8003388:	f000 fae6 	bl	8003958 <HAL_DMA_Init>
 800338c:	1e03      	subs	r3, r0, #0
 800338e:	d001      	beq.n	8003394 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8003390:	f7ff fbd1 	bl	8002b36 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a1b      	ldr	r2, [pc, #108]	@ (8003404 <HAL_SPI_MspInit+0x168>)
 8003398:	659a      	str	r2, [r3, #88]	@ 0x58
 800339a:	4b1a      	ldr	r3, [pc, #104]	@ (8003404 <HAL_SPI_MspInit+0x168>)
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel2;
 80033a0:	4b1a      	ldr	r3, [pc, #104]	@ (800340c <HAL_SPI_MspInit+0x170>)
 80033a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003410 <HAL_SPI_MspInit+0x174>)
 80033a4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80033a6:	4b19      	ldr	r3, [pc, #100]	@ (800340c <HAL_SPI_MspInit+0x170>)
 80033a8:	2213      	movs	r2, #19
 80033aa:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033ac:	4b17      	ldr	r3, [pc, #92]	@ (800340c <HAL_SPI_MspInit+0x170>)
 80033ae:	2210      	movs	r2, #16
 80033b0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b2:	4b16      	ldr	r3, [pc, #88]	@ (800340c <HAL_SPI_MspInit+0x170>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033b8:	4b14      	ldr	r3, [pc, #80]	@ (800340c <HAL_SPI_MspInit+0x170>)
 80033ba:	2280      	movs	r2, #128	@ 0x80
 80033bc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033be:	4b13      	ldr	r3, [pc, #76]	@ (800340c <HAL_SPI_MspInit+0x170>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033c4:	4b11      	ldr	r3, [pc, #68]	@ (800340c <HAL_SPI_MspInit+0x170>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80033ca:	4b10      	ldr	r3, [pc, #64]	@ (800340c <HAL_SPI_MspInit+0x170>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033d0:	4b0e      	ldr	r3, [pc, #56]	@ (800340c <HAL_SPI_MspInit+0x170>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80033d6:	4b0d      	ldr	r3, [pc, #52]	@ (800340c <HAL_SPI_MspInit+0x170>)
 80033d8:	0018      	movs	r0, r3
 80033da:	f000 fabd 	bl	8003958 <HAL_DMA_Init>
 80033de:	1e03      	subs	r3, r0, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 80033e2:	f7ff fba8 	bl	8002b36 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a08      	ldr	r2, [pc, #32]	@ (800340c <HAL_SPI_MspInit+0x170>)
 80033ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80033ec:	4b07      	ldr	r3, [pc, #28]	@ (800340c <HAL_SPI_MspInit+0x170>)
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80033f2:	46c0      	nop			@ (mov r8, r8)
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b00b      	add	sp, #44	@ 0x2c
 80033f8:	bd90      	pop	{r4, r7, pc}
 80033fa:	46c0      	nop			@ (mov r8, r8)
 80033fc:	40003800 	.word	0x40003800
 8003400:	40021000 	.word	0x40021000
 8003404:	2000026c 	.word	0x2000026c
 8003408:	40020008 	.word	0x40020008
 800340c:	200002c8 	.word	0x200002c8
 8003410:	4002001c 	.word	0x4002001c

08003414 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	2380      	movs	r3, #128	@ 0x80
 8003422:	05db      	lsls	r3, r3, #23
 8003424:	429a      	cmp	r2, r3
 8003426:	d10b      	bne.n	8003440 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003428:	4b07      	ldr	r3, [pc, #28]	@ (8003448 <HAL_TIM_PWM_MspInit+0x34>)
 800342a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <HAL_TIM_PWM_MspInit+0x34>)
 800342e:	2101      	movs	r1, #1
 8003430:	430a      	orrs	r2, r1
 8003432:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003434:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <HAL_TIM_PWM_MspInit+0x34>)
 8003436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003438:	2201      	movs	r2, #1
 800343a:	4013      	ands	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003440:	46c0      	nop			@ (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	b004      	add	sp, #16
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000

0800344c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a18      	ldr	r2, [pc, #96]	@ (80034bc <HAL_TIM_Base_MspInit+0x70>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d10e      	bne.n	800347c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800345e:	4b18      	ldr	r3, [pc, #96]	@ (80034c0 <HAL_TIM_Base_MspInit+0x74>)
 8003460:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003462:	4b17      	ldr	r3, [pc, #92]	@ (80034c0 <HAL_TIM_Base_MspInit+0x74>)
 8003464:	2180      	movs	r1, #128	@ 0x80
 8003466:	0209      	lsls	r1, r1, #8
 8003468:	430a      	orrs	r2, r1
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40
 800346c:	4b14      	ldr	r3, [pc, #80]	@ (80034c0 <HAL_TIM_Base_MspInit+0x74>)
 800346e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003470:	2380      	movs	r3, #128	@ 0x80
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	4013      	ands	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800347a:	e01a      	b.n	80034b2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a10      	ldr	r2, [pc, #64]	@ (80034c4 <HAL_TIM_Base_MspInit+0x78>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d115      	bne.n	80034b2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003486:	4b0e      	ldr	r3, [pc, #56]	@ (80034c0 <HAL_TIM_Base_MspInit+0x74>)
 8003488:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800348a:	4b0d      	ldr	r3, [pc, #52]	@ (80034c0 <HAL_TIM_Base_MspInit+0x74>)
 800348c:	2180      	movs	r1, #128	@ 0x80
 800348e:	0289      	lsls	r1, r1, #10
 8003490:	430a      	orrs	r2, r1
 8003492:	641a      	str	r2, [r3, #64]	@ 0x40
 8003494:	4b0a      	ldr	r3, [pc, #40]	@ (80034c0 <HAL_TIM_Base_MspInit+0x74>)
 8003496:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003498:	2380      	movs	r3, #128	@ 0x80
 800349a:	029b      	lsls	r3, r3, #10
 800349c:	4013      	ands	r3, r2
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80034a2:	2200      	movs	r2, #0
 80034a4:	2100      	movs	r1, #0
 80034a6:	2015      	movs	r0, #21
 80034a8:	f000 fa24 	bl	80038f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80034ac:	2015      	movs	r0, #21
 80034ae:	f000 fa36 	bl	800391e <HAL_NVIC_EnableIRQ>
}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b004      	add	sp, #16
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	46c0      	nop			@ (mov r8, r8)
 80034bc:	40002000 	.word	0x40002000
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40014400 	.word	0x40014400

080034c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034c8:	b590      	push	{r4, r7, lr}
 80034ca:	b089      	sub	sp, #36	@ 0x24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	240c      	movs	r4, #12
 80034d2:	193b      	adds	r3, r7, r4
 80034d4:	0018      	movs	r0, r3
 80034d6:	2314      	movs	r3, #20
 80034d8:	001a      	movs	r2, r3
 80034da:	2100      	movs	r1, #0
 80034dc:	f005 fc3e 	bl	8008d5c <memset>
  if(htim->Instance==TIM2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	2380      	movs	r3, #128	@ 0x80
 80034e6:	05db      	lsls	r3, r3, #23
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d121      	bne.n	8003530 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ec:	4b12      	ldr	r3, [pc, #72]	@ (8003538 <HAL_TIM_MspPostInit+0x70>)
 80034ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034f0:	4b11      	ldr	r3, [pc, #68]	@ (8003538 <HAL_TIM_MspPostInit+0x70>)
 80034f2:	2104      	movs	r1, #4
 80034f4:	430a      	orrs	r2, r1
 80034f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80034f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003538 <HAL_TIM_MspPostInit+0x70>)
 80034fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034fc:	2204      	movs	r2, #4
 80034fe:	4013      	ands	r3, r2
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_SHIFT_nOE_Pin;
 8003504:	0021      	movs	r1, r4
 8003506:	187b      	adds	r3, r7, r1
 8003508:	2240      	movs	r2, #64	@ 0x40
 800350a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350c:	187b      	adds	r3, r7, r1
 800350e:	2202      	movs	r2, #2
 8003510:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	187b      	adds	r3, r7, r1
 8003514:	2200      	movs	r2, #0
 8003516:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003518:	187b      	adds	r3, r7, r1
 800351a:	2200      	movs	r2, #0
 800351c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800351e:	187b      	adds	r3, r7, r1
 8003520:	2202      	movs	r2, #2
 8003522:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_SHIFT_nOE_GPIO_Port, &GPIO_InitStruct);
 8003524:	187b      	adds	r3, r7, r1
 8003526:	4a05      	ldr	r2, [pc, #20]	@ (800353c <HAL_TIM_MspPostInit+0x74>)
 8003528:	0019      	movs	r1, r3
 800352a:	0010      	movs	r0, r2
 800352c:	f000 fba0 	bl	8003c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003530:	46c0      	nop			@ (mov r8, r8)
 8003532:	46bd      	mov	sp, r7
 8003534:	b009      	add	sp, #36	@ 0x24
 8003536:	bd90      	pop	{r4, r7, pc}
 8003538:	40021000 	.word	0x40021000
 800353c:	50000800 	.word	0x50000800

08003540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003544:	46c0      	nop			@ (mov r8, r8)
 8003546:	e7fd      	b.n	8003544 <NMI_Handler+0x4>

08003548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800354c:	46c0      	nop			@ (mov r8, r8)
 800354e:	e7fd      	b.n	800354c <HardFault_Handler+0x4>

08003550 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003554:	46c0      	nop			@ (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800355e:	46c0      	nop			@ (mov r8, r8)
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003568:	f000 f8fc 	bl	8003764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800356c:	46c0      	nop			@ (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003578:	4b03      	ldr	r3, [pc, #12]	@ (8003588 <RTC_TAMP_IRQHandler+0x14>)
 800357a:	0018      	movs	r0, r3
 800357c:	f003 fa46 	bl	8006a0c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003580:	46c0      	nop			@ (mov r8, r8)
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	200001dc 	.word	0x200001dc

0800358c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003590:	46c0      	nop			@ (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_EXTI_Pin);
 800359a:	2001      	movs	r0, #1
 800359c:	f000 fd22 	bl	8003fe4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_EXTI_Pin);
 80035a0:	2002      	movs	r0, #2
 80035a2:	f000 fd1f 	bl	8003fe4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80035a6:	46c0      	nop			@ (mov r8, r8)
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_EXTI_Pin);
 80035b0:	2004      	movs	r0, #4
 80035b2:	f000 fd17 	bl	8003fe4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_EXTI_Pin);
 80035b6:	2008      	movs	r0, #8
 80035b8:	f000 fd14 	bl	8003fe4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80035bc:	46c0      	nop			@ (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_SWITCH_EXTI_Pin);
 80035c6:	2010      	movs	r0, #16
 80035c8:	f000 fd0c 	bl	8003fe4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_EXTI_Pin);
 80035cc:	2380      	movs	r3, #128	@ 0x80
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	0018      	movs	r0, r3
 80035d2:	f000 fd07 	bl	8003fe4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80035e0:	4b03      	ldr	r3, [pc, #12]	@ (80035f0 <DMA1_Channel1_IRQHandler+0x14>)
 80035e2:	0018      	movs	r0, r3
 80035e4:	f000 fa42 	bl	8003a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80035e8:	46c0      	nop			@ (mov r8, r8)
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	46c0      	nop			@ (mov r8, r8)
 80035f0:	2000026c 	.word	0x2000026c

080035f4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80035f8:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 fa36 	bl	8003a6c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003600:	4b04      	ldr	r3, [pc, #16]	@ (8003614 <DMA1_Channel2_3_IRQHandler+0x20>)
 8003602:	0018      	movs	r0, r3
 8003604:	f000 fa32 	bl	8003a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003608:	46c0      	nop			@ (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	200002c8 	.word	0x200002c8
 8003614:	20000180 	.word	0x20000180

08003618 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800361c:	4b03      	ldr	r3, [pc, #12]	@ (800362c <TIM16_IRQHandler+0x14>)
 800361e:	0018      	movs	r0, r3
 8003620:	f004 fdb0 	bl	8008184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003624:	46c0      	nop			@ (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	46c0      	nop			@ (mov r8, r8)
 800362c:	200003bc 	.word	0x200003bc

08003630 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003634:	46c0      	nop			@ (mov r8, r8)
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800363c:	480d      	ldr	r0, [pc, #52]	@ (8003674 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800363e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003640:	f7ff fff6 	bl	8003630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003644:	480c      	ldr	r0, [pc, #48]	@ (8003678 <LoopForever+0x6>)
  ldr r1, =_edata
 8003646:	490d      	ldr	r1, [pc, #52]	@ (800367c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003648:	4a0d      	ldr	r2, [pc, #52]	@ (8003680 <LoopForever+0xe>)
  movs r3, #0
 800364a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800364c:	e002      	b.n	8003654 <LoopCopyDataInit>

0800364e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800364e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003652:	3304      	adds	r3, #4

08003654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003658:	d3f9      	bcc.n	800364e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800365a:	4a0a      	ldr	r2, [pc, #40]	@ (8003684 <LoopForever+0x12>)
  ldr r4, =_ebss
 800365c:	4c0a      	ldr	r4, [pc, #40]	@ (8003688 <LoopForever+0x16>)
  movs r3, #0
 800365e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003660:	e001      	b.n	8003666 <LoopFillZerobss>

08003662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003664:	3204      	adds	r2, #4

08003666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003668:	d3fb      	bcc.n	8003662 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800366a:	f005 fb7f 	bl	8008d6c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800366e:	f7fd ffa7 	bl	80015c0 <main>

08003672 <LoopForever>:

LoopForever:
  b LoopForever
 8003672:	e7fe      	b.n	8003672 <LoopForever>
  ldr   r0, =_estack
 8003674:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800367c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8003680:	08008edc 	.word	0x08008edc
  ldr r2, =_sbss
 8003684:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8003688:	200006b8 	.word	0x200006b8

0800368c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800368c:	e7fe      	b.n	800368c <ADC1_IRQHandler>
	...

08003690 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003696:	1dfb      	adds	r3, r7, #7
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800369c:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <HAL_Init+0x3c>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	4b0a      	ldr	r3, [pc, #40]	@ (80036cc <HAL_Init+0x3c>)
 80036a2:	2180      	movs	r1, #128	@ 0x80
 80036a4:	0049      	lsls	r1, r1, #1
 80036a6:	430a      	orrs	r2, r1
 80036a8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036aa:	2003      	movs	r0, #3
 80036ac:	f000 f810 	bl	80036d0 <HAL_InitTick>
 80036b0:	1e03      	subs	r3, r0, #0
 80036b2:	d003      	beq.n	80036bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80036b4:	1dfb      	adds	r3, r7, #7
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
 80036ba:	e001      	b.n	80036c0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80036bc:	f7ff fc62 	bl	8002f84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036c0:	1dfb      	adds	r3, r7, #7
 80036c2:	781b      	ldrb	r3, [r3, #0]
}
 80036c4:	0018      	movs	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b002      	add	sp, #8
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40022000 	.word	0x40022000

080036d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036d8:	230f      	movs	r3, #15
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80036e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003758 <HAL_InitTick+0x88>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d02b      	beq.n	8003740 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80036e8:	4b1c      	ldr	r3, [pc, #112]	@ (800375c <HAL_InitTick+0x8c>)
 80036ea:	681c      	ldr	r4, [r3, #0]
 80036ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003758 <HAL_InitTick+0x88>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	0019      	movs	r1, r3
 80036f2:	23fa      	movs	r3, #250	@ 0xfa
 80036f4:	0098      	lsls	r0, r3, #2
 80036f6:	f7fc fd05 	bl	8000104 <__udivsi3>
 80036fa:	0003      	movs	r3, r0
 80036fc:	0019      	movs	r1, r3
 80036fe:	0020      	movs	r0, r4
 8003700:	f7fc fd00 	bl	8000104 <__udivsi3>
 8003704:	0003      	movs	r3, r0
 8003706:	0018      	movs	r0, r3
 8003708:	f000 f919 	bl	800393e <HAL_SYSTICK_Config>
 800370c:	1e03      	subs	r3, r0, #0
 800370e:	d112      	bne.n	8003736 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b03      	cmp	r3, #3
 8003714:	d80a      	bhi.n	800372c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	2301      	movs	r3, #1
 800371a:	425b      	negs	r3, r3
 800371c:	2200      	movs	r2, #0
 800371e:	0018      	movs	r0, r3
 8003720:	f000 f8e8 	bl	80038f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003724:	4b0e      	ldr	r3, [pc, #56]	@ (8003760 <HAL_InitTick+0x90>)
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	e00d      	b.n	8003748 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800372c:	230f      	movs	r3, #15
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	2201      	movs	r2, #1
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	e008      	b.n	8003748 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003736:	230f      	movs	r3, #15
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e003      	b.n	8003748 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003740:	230f      	movs	r3, #15
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	2201      	movs	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003748:	230f      	movs	r3, #15
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	781b      	ldrb	r3, [r3, #0]
}
 800374e:	0018      	movs	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	b005      	add	sp, #20
 8003754:	bd90      	pop	{r4, r7, pc}
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	20000098 	.word	0x20000098
 800375c:	20000090 	.word	0x20000090
 8003760:	20000094 	.word	0x20000094

08003764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003768:	4b05      	ldr	r3, [pc, #20]	@ (8003780 <HAL_IncTick+0x1c>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	001a      	movs	r2, r3
 800376e:	4b05      	ldr	r3, [pc, #20]	@ (8003784 <HAL_IncTick+0x20>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	18d2      	adds	r2, r2, r3
 8003774:	4b03      	ldr	r3, [pc, #12]	@ (8003784 <HAL_IncTick+0x20>)
 8003776:	601a      	str	r2, [r3, #0]
}
 8003778:	46c0      	nop			@ (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	46c0      	nop			@ (mov r8, r8)
 8003780:	20000098 	.word	0x20000098
 8003784:	200006b4 	.word	0x200006b4

08003788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  return uwTick;
 800378c:	4b02      	ldr	r3, [pc, #8]	@ (8003798 <HAL_GetTick+0x10>)
 800378e:	681b      	ldr	r3, [r3, #0]
}
 8003790:	0018      	movs	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	200006b4 	.word	0x200006b4

0800379c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	0002      	movs	r2, r0
 80037a4:	1dfb      	adds	r3, r7, #7
 80037a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80037a8:	1dfb      	adds	r3, r7, #7
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80037ae:	d809      	bhi.n	80037c4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037b0:	1dfb      	adds	r3, r7, #7
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	001a      	movs	r2, r3
 80037b6:	231f      	movs	r3, #31
 80037b8:	401a      	ands	r2, r3
 80037ba:	4b04      	ldr	r3, [pc, #16]	@ (80037cc <__NVIC_EnableIRQ+0x30>)
 80037bc:	2101      	movs	r1, #1
 80037be:	4091      	lsls	r1, r2
 80037c0:	000a      	movs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80037c4:	46c0      	nop			@ (mov r8, r8)
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b002      	add	sp, #8
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	e000e100 	.word	0xe000e100

080037d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	0002      	movs	r2, r0
 80037d8:	6039      	str	r1, [r7, #0]
 80037da:	1dfb      	adds	r3, r7, #7
 80037dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80037de:	1dfb      	adds	r3, r7, #7
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80037e4:	d828      	bhi.n	8003838 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037e6:	4a2f      	ldr	r2, [pc, #188]	@ (80038a4 <__NVIC_SetPriority+0xd4>)
 80037e8:	1dfb      	adds	r3, r7, #7
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	b25b      	sxtb	r3, r3
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	33c0      	adds	r3, #192	@ 0xc0
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	589b      	ldr	r3, [r3, r2]
 80037f6:	1dfa      	adds	r2, r7, #7
 80037f8:	7812      	ldrb	r2, [r2, #0]
 80037fa:	0011      	movs	r1, r2
 80037fc:	2203      	movs	r2, #3
 80037fe:	400a      	ands	r2, r1
 8003800:	00d2      	lsls	r2, r2, #3
 8003802:	21ff      	movs	r1, #255	@ 0xff
 8003804:	4091      	lsls	r1, r2
 8003806:	000a      	movs	r2, r1
 8003808:	43d2      	mvns	r2, r2
 800380a:	401a      	ands	r2, r3
 800380c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	019b      	lsls	r3, r3, #6
 8003812:	22ff      	movs	r2, #255	@ 0xff
 8003814:	401a      	ands	r2, r3
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	0018      	movs	r0, r3
 800381c:	2303      	movs	r3, #3
 800381e:	4003      	ands	r3, r0
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003824:	481f      	ldr	r0, [pc, #124]	@ (80038a4 <__NVIC_SetPriority+0xd4>)
 8003826:	1dfb      	adds	r3, r7, #7
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	b25b      	sxtb	r3, r3
 800382c:	089b      	lsrs	r3, r3, #2
 800382e:	430a      	orrs	r2, r1
 8003830:	33c0      	adds	r3, #192	@ 0xc0
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003836:	e031      	b.n	800389c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003838:	4a1b      	ldr	r2, [pc, #108]	@ (80038a8 <__NVIC_SetPriority+0xd8>)
 800383a:	1dfb      	adds	r3, r7, #7
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	0019      	movs	r1, r3
 8003840:	230f      	movs	r3, #15
 8003842:	400b      	ands	r3, r1
 8003844:	3b08      	subs	r3, #8
 8003846:	089b      	lsrs	r3, r3, #2
 8003848:	3306      	adds	r3, #6
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	18d3      	adds	r3, r2, r3
 800384e:	3304      	adds	r3, #4
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	1dfa      	adds	r2, r7, #7
 8003854:	7812      	ldrb	r2, [r2, #0]
 8003856:	0011      	movs	r1, r2
 8003858:	2203      	movs	r2, #3
 800385a:	400a      	ands	r2, r1
 800385c:	00d2      	lsls	r2, r2, #3
 800385e:	21ff      	movs	r1, #255	@ 0xff
 8003860:	4091      	lsls	r1, r2
 8003862:	000a      	movs	r2, r1
 8003864:	43d2      	mvns	r2, r2
 8003866:	401a      	ands	r2, r3
 8003868:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	019b      	lsls	r3, r3, #6
 800386e:	22ff      	movs	r2, #255	@ 0xff
 8003870:	401a      	ands	r2, r3
 8003872:	1dfb      	adds	r3, r7, #7
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	0018      	movs	r0, r3
 8003878:	2303      	movs	r3, #3
 800387a:	4003      	ands	r3, r0
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003880:	4809      	ldr	r0, [pc, #36]	@ (80038a8 <__NVIC_SetPriority+0xd8>)
 8003882:	1dfb      	adds	r3, r7, #7
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	001c      	movs	r4, r3
 8003888:	230f      	movs	r3, #15
 800388a:	4023      	ands	r3, r4
 800388c:	3b08      	subs	r3, #8
 800388e:	089b      	lsrs	r3, r3, #2
 8003890:	430a      	orrs	r2, r1
 8003892:	3306      	adds	r3, #6
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	18c3      	adds	r3, r0, r3
 8003898:	3304      	adds	r3, #4
 800389a:	601a      	str	r2, [r3, #0]
}
 800389c:	46c0      	nop			@ (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	b003      	add	sp, #12
 80038a2:	bd90      	pop	{r4, r7, pc}
 80038a4:	e000e100 	.word	0xe000e100
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	1e5a      	subs	r2, r3, #1
 80038b8:	2380      	movs	r3, #128	@ 0x80
 80038ba:	045b      	lsls	r3, r3, #17
 80038bc:	429a      	cmp	r2, r3
 80038be:	d301      	bcc.n	80038c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038c0:	2301      	movs	r3, #1
 80038c2:	e010      	b.n	80038e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038c4:	4b0a      	ldr	r3, [pc, #40]	@ (80038f0 <SysTick_Config+0x44>)
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	3a01      	subs	r2, #1
 80038ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038cc:	2301      	movs	r3, #1
 80038ce:	425b      	negs	r3, r3
 80038d0:	2103      	movs	r1, #3
 80038d2:	0018      	movs	r0, r3
 80038d4:	f7ff ff7c 	bl	80037d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d8:	4b05      	ldr	r3, [pc, #20]	@ (80038f0 <SysTick_Config+0x44>)
 80038da:	2200      	movs	r2, #0
 80038dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038de:	4b04      	ldr	r3, [pc, #16]	@ (80038f0 <SysTick_Config+0x44>)
 80038e0:	2207      	movs	r2, #7
 80038e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	0018      	movs	r0, r3
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b002      	add	sp, #8
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	e000e010 	.word	0xe000e010

080038f4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	210f      	movs	r1, #15
 8003900:	187b      	adds	r3, r7, r1
 8003902:	1c02      	adds	r2, r0, #0
 8003904:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	187b      	adds	r3, r7, r1
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	b25b      	sxtb	r3, r3
 800390e:	0011      	movs	r1, r2
 8003910:	0018      	movs	r0, r3
 8003912:	f7ff ff5d 	bl	80037d0 <__NVIC_SetPriority>
}
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	46bd      	mov	sp, r7
 800391a:	b004      	add	sp, #16
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	0002      	movs	r2, r0
 8003926:	1dfb      	adds	r3, r7, #7
 8003928:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800392a:	1dfb      	adds	r3, r7, #7
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	b25b      	sxtb	r3, r3
 8003930:	0018      	movs	r0, r3
 8003932:	f7ff ff33 	bl	800379c <__NVIC_EnableIRQ>
}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b002      	add	sp, #8
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	0018      	movs	r0, r3
 800394a:	f7ff ffaf 	bl	80038ac <SysTick_Config>
 800394e:	0003      	movs	r3, r0
}
 8003950:	0018      	movs	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	b002      	add	sp, #8
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e077      	b.n	8003a5a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a3d      	ldr	r2, [pc, #244]	@ (8003a64 <HAL_DMA_Init+0x10c>)
 8003970:	4694      	mov	ip, r2
 8003972:	4463      	add	r3, ip
 8003974:	2114      	movs	r1, #20
 8003976:	0018      	movs	r0, r3
 8003978:	f7fc fbc4 	bl	8000104 <__udivsi3>
 800397c:	0003      	movs	r3, r0
 800397e:	009a      	lsls	r2, r3, #2
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2225      	movs	r2, #37	@ 0x25
 8003988:	2102      	movs	r1, #2
 800398a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4934      	ldr	r1, [pc, #208]	@ (8003a68 <HAL_DMA_Init+0x110>)
 8003998:	400a      	ands	r2, r1
 800399a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6819      	ldr	r1, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	0018      	movs	r0, r3
 80039d6:	f000 f8fb 	bl	8003bd0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	2380      	movs	r3, #128	@ 0x80
 80039e0:	01db      	lsls	r3, r3, #7
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d102      	bne.n	80039ec <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f4:	213f      	movs	r1, #63	@ 0x3f
 80039f6:	400a      	ands	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003a02:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d011      	beq.n	8003a30 <HAL_DMA_Init+0xd8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d80d      	bhi.n	8003a30 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	0018      	movs	r0, r3
 8003a18:	f000 f906 	bl	8003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	e008      	b.n	8003a42 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2225      	movs	r2, #37	@ 0x25
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2224      	movs	r2, #36	@ 0x24
 8003a54:	2100      	movs	r1, #0
 8003a56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b002      	add	sp, #8
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	bffdfff8 	.word	0xbffdfff8
 8003a68:	ffff800f 	.word	0xffff800f

08003a6c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003a74:	4b55      	ldr	r3, [pc, #340]	@ (8003bcc <HAL_DMA_IRQHandler+0x160>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	221c      	movs	r2, #28
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	409a      	lsls	r2, r3
 8003a8e:	0013      	movs	r3, r2
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4013      	ands	r3, r2
 8003a94:	d027      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x7a>
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2204      	movs	r2, #4
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d023      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d107      	bne.n	8003aba <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2104      	movs	r1, #4
 8003ab6:	438a      	bics	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003aba:	4b44      	ldr	r3, [pc, #272]	@ (8003bcc <HAL_DMA_IRQHandler+0x160>)
 8003abc:	6859      	ldr	r1, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac2:	221c      	movs	r2, #28
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	4b40      	ldr	r3, [pc, #256]	@ (8003bcc <HAL_DMA_IRQHandler+0x160>)
 8003acc:	430a      	orrs	r2, r1
 8003ace:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d100      	bne.n	8003ada <HAL_DMA_IRQHandler+0x6e>
 8003ad8:	e073      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	0010      	movs	r0, r2
 8003ae2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003ae4:	e06d      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	221c      	movs	r2, #28
 8003aec:	4013      	ands	r3, r2
 8003aee:	2202      	movs	r2, #2
 8003af0:	409a      	lsls	r2, r3
 8003af2:	0013      	movs	r3, r2
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4013      	ands	r3, r2
 8003af8:	d02e      	beq.n	8003b58 <HAL_DMA_IRQHandler+0xec>
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2202      	movs	r2, #2
 8003afe:	4013      	ands	r3, r2
 8003b00:	d02a      	beq.n	8003b58 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d10b      	bne.n	8003b26 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	210a      	movs	r1, #10
 8003b1a:	438a      	bics	r2, r1
 8003b1c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2225      	movs	r2, #37	@ 0x25
 8003b22:	2101      	movs	r1, #1
 8003b24:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003b26:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <HAL_DMA_IRQHandler+0x160>)
 8003b28:	6859      	ldr	r1, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	221c      	movs	r2, #28
 8003b30:	4013      	ands	r3, r2
 8003b32:	2202      	movs	r2, #2
 8003b34:	409a      	lsls	r2, r3
 8003b36:	4b25      	ldr	r3, [pc, #148]	@ (8003bcc <HAL_DMA_IRQHandler+0x160>)
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2224      	movs	r2, #36	@ 0x24
 8003b40:	2100      	movs	r1, #0
 8003b42:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d03a      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	0010      	movs	r0, r2
 8003b54:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003b56:	e034      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5c:	221c      	movs	r2, #28
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2208      	movs	r2, #8
 8003b62:	409a      	lsls	r2, r3
 8003b64:	0013      	movs	r3, r2
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d02b      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x158>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2208      	movs	r2, #8
 8003b70:	4013      	ands	r3, r2
 8003b72:	d027      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	210e      	movs	r1, #14
 8003b80:	438a      	bics	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003b84:	4b11      	ldr	r3, [pc, #68]	@ (8003bcc <HAL_DMA_IRQHandler+0x160>)
 8003b86:	6859      	ldr	r1, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	221c      	movs	r2, #28
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2201      	movs	r2, #1
 8003b92:	409a      	lsls	r2, r3
 8003b94:	4b0d      	ldr	r3, [pc, #52]	@ (8003bcc <HAL_DMA_IRQHandler+0x160>)
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2225      	movs	r2, #37	@ 0x25
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2224      	movs	r2, #36	@ 0x24
 8003bac:	2100      	movs	r1, #0
 8003bae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	0010      	movs	r0, r2
 8003bc0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003bc2:	46c0      	nop			@ (mov r8, r8)
 8003bc4:	46c0      	nop			@ (mov r8, r8)
}
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b004      	add	sp, #16
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40020000 	.word	0x40020000

08003bd0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	089b      	lsrs	r3, r3, #2
 8003bde:	4a10      	ldr	r2, [pc, #64]	@ (8003c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003be0:	4694      	mov	ip, r2
 8003be2:	4463      	add	r3, ip
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	001a      	movs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	001a      	movs	r2, r3
 8003bf2:	23ff      	movs	r3, #255	@ 0xff
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	3b08      	subs	r3, #8
 8003bf8:	2114      	movs	r1, #20
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f7fc fa82 	bl	8000104 <__udivsi3>
 8003c00:	0003      	movs	r3, r0
 8003c02:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a07      	ldr	r2, [pc, #28]	@ (8003c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003c08:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	221f      	movs	r2, #31
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2201      	movs	r2, #1
 8003c12:	409a      	lsls	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003c18:	46c0      	nop			@ (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b004      	add	sp, #16
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	10008200 	.word	0x10008200
 8003c24:	40020880 	.word	0x40020880

08003c28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	223f      	movs	r2, #63	@ 0x3f
 8003c36:	4013      	ands	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8003c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c3e:	4694      	mov	ip, r2
 8003c40:	4463      	add	r3, ip
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	001a      	movs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a07      	ldr	r2, [pc, #28]	@ (8003c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c4e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	2203      	movs	r2, #3
 8003c56:	4013      	ands	r3, r2
 8003c58:	2201      	movs	r2, #1
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003c60:	46c0      	nop			@ (mov r8, r8)
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b004      	add	sp, #16
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	1000823f 	.word	0x1000823f
 8003c6c:	40020940 	.word	0x40020940

08003c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c7e:	e147      	b.n	8003f10 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2101      	movs	r1, #1
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4091      	lsls	r1, r2
 8003c8a:	000a      	movs	r2, r1
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d100      	bne.n	8003c98 <HAL_GPIO_Init+0x28>
 8003c96:	e138      	b.n	8003f0a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d005      	beq.n	8003cb0 <HAL_GPIO_Init+0x40>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2203      	movs	r2, #3
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d130      	bne.n	8003d12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	2203      	movs	r2, #3
 8003cbc:	409a      	lsls	r2, r3
 8003cbe:	0013      	movs	r3, r2
 8003cc0:	43da      	mvns	r2, r3
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	0013      	movs	r3, r2
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	409a      	lsls	r2, r3
 8003cec:	0013      	movs	r3, r2
 8003cee:	43da      	mvns	r2, r3
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	401a      	ands	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	409a      	lsls	r2, r3
 8003d04:	0013      	movs	r3, r2
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2203      	movs	r2, #3
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d017      	beq.n	8003d4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	2203      	movs	r2, #3
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	0013      	movs	r3, r2
 8003d2e:	43da      	mvns	r2, r3
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4013      	ands	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	0013      	movs	r3, r2
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2203      	movs	r2, #3
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d123      	bne.n	8003da2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	08da      	lsrs	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3208      	adds	r2, #8
 8003d62:	0092      	lsls	r2, r2, #2
 8003d64:	58d3      	ldr	r3, [r2, r3]
 8003d66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2207      	movs	r2, #7
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	220f      	movs	r2, #15
 8003d72:	409a      	lsls	r2, r3
 8003d74:	0013      	movs	r3, r2
 8003d76:	43da      	mvns	r2, r3
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2107      	movs	r1, #7
 8003d86:	400b      	ands	r3, r1
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	0013      	movs	r3, r2
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	08da      	lsrs	r2, r3, #3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3208      	adds	r2, #8
 8003d9c:	0092      	lsls	r2, r2, #2
 8003d9e:	6939      	ldr	r1, [r7, #16]
 8003da0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	2203      	movs	r2, #3
 8003dae:	409a      	lsls	r2, r3
 8003db0:	0013      	movs	r3, r2
 8003db2:	43da      	mvns	r2, r3
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4013      	ands	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	401a      	ands	r2, r3
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	409a      	lsls	r2, r3
 8003dc8:	0013      	movs	r3, r2
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	23c0      	movs	r3, #192	@ 0xc0
 8003ddc:	029b      	lsls	r3, r3, #10
 8003dde:	4013      	ands	r3, r2
 8003de0:	d100      	bne.n	8003de4 <HAL_GPIO_Init+0x174>
 8003de2:	e092      	b.n	8003f0a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003de4:	4a50      	ldr	r2, [pc, #320]	@ (8003f28 <HAL_GPIO_Init+0x2b8>)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	3318      	adds	r3, #24
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	589b      	ldr	r3, [r3, r2]
 8003df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2203      	movs	r2, #3
 8003df6:	4013      	ands	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	220f      	movs	r2, #15
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	0013      	movs	r3, r2
 8003e00:	43da      	mvns	r2, r3
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4013      	ands	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	23a0      	movs	r3, #160	@ 0xa0
 8003e0c:	05db      	lsls	r3, r3, #23
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d013      	beq.n	8003e3a <HAL_GPIO_Init+0x1ca>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a45      	ldr	r2, [pc, #276]	@ (8003f2c <HAL_GPIO_Init+0x2bc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00d      	beq.n	8003e36 <HAL_GPIO_Init+0x1c6>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a44      	ldr	r2, [pc, #272]	@ (8003f30 <HAL_GPIO_Init+0x2c0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d007      	beq.n	8003e32 <HAL_GPIO_Init+0x1c2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a43      	ldr	r2, [pc, #268]	@ (8003f34 <HAL_GPIO_Init+0x2c4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d101      	bne.n	8003e2e <HAL_GPIO_Init+0x1be>
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e006      	b.n	8003e3c <HAL_GPIO_Init+0x1cc>
 8003e2e:	2305      	movs	r3, #5
 8003e30:	e004      	b.n	8003e3c <HAL_GPIO_Init+0x1cc>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e002      	b.n	8003e3c <HAL_GPIO_Init+0x1cc>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <HAL_GPIO_Init+0x1cc>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	2103      	movs	r1, #3
 8003e40:	400a      	ands	r2, r1
 8003e42:	00d2      	lsls	r2, r2, #3
 8003e44:	4093      	lsls	r3, r2
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003e4c:	4936      	ldr	r1, [pc, #216]	@ (8003f28 <HAL_GPIO_Init+0x2b8>)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	089b      	lsrs	r3, r3, #2
 8003e52:	3318      	adds	r3, #24
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e5a:	4b33      	ldr	r3, [pc, #204]	@ (8003f28 <HAL_GPIO_Init+0x2b8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	43da      	mvns	r2, r3
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4013      	ands	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	2380      	movs	r3, #128	@ 0x80
 8003e70:	035b      	lsls	r3, r3, #13
 8003e72:	4013      	ands	r3, r2
 8003e74:	d003      	beq.n	8003e7e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003f28 <HAL_GPIO_Init+0x2b8>)
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003e84:	4b28      	ldr	r3, [pc, #160]	@ (8003f28 <HAL_GPIO_Init+0x2b8>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	43da      	mvns	r2, r3
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4013      	ands	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	2380      	movs	r3, #128	@ 0x80
 8003e9a:	039b      	lsls	r3, r3, #14
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8003f28 <HAL_GPIO_Init+0x2b8>)
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003eae:	4a1e      	ldr	r2, [pc, #120]	@ (8003f28 <HAL_GPIO_Init+0x2b8>)
 8003eb0:	2384      	movs	r3, #132	@ 0x84
 8003eb2:	58d3      	ldr	r3, [r2, r3]
 8003eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	43da      	mvns	r2, r3
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	2380      	movs	r3, #128	@ 0x80
 8003ec6:	029b      	lsls	r3, r3, #10
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d003      	beq.n	8003ed4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ed4:	4914      	ldr	r1, [pc, #80]	@ (8003f28 <HAL_GPIO_Init+0x2b8>)
 8003ed6:	2284      	movs	r2, #132	@ 0x84
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003edc:	4a12      	ldr	r2, [pc, #72]	@ (8003f28 <HAL_GPIO_Init+0x2b8>)
 8003ede:	2380      	movs	r3, #128	@ 0x80
 8003ee0:	58d3      	ldr	r3, [r2, r3]
 8003ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	43da      	mvns	r2, r3
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4013      	ands	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	2380      	movs	r3, #128	@ 0x80
 8003ef4:	025b      	lsls	r3, r3, #9
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d003      	beq.n	8003f02 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f02:	4909      	ldr	r1, [pc, #36]	@ (8003f28 <HAL_GPIO_Init+0x2b8>)
 8003f04:	2280      	movs	r2, #128	@ 0x80
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	40da      	lsrs	r2, r3
 8003f18:	1e13      	subs	r3, r2, #0
 8003f1a:	d000      	beq.n	8003f1e <HAL_GPIO_Init+0x2ae>
 8003f1c:	e6b0      	b.n	8003c80 <HAL_GPIO_Init+0x10>
  }
}
 8003f1e:	46c0      	nop			@ (mov r8, r8)
 8003f20:	46c0      	nop			@ (mov r8, r8)
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b006      	add	sp, #24
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40021800 	.word	0x40021800
 8003f2c:	50000400 	.word	0x50000400
 8003f30:	50000800 	.word	0x50000800
 8003f34:	50000c00 	.word	0x50000c00

08003f38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	000a      	movs	r2, r1
 8003f42:	1cbb      	adds	r3, r7, #2
 8003f44:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	1cba      	adds	r2, r7, #2
 8003f4c:	8812      	ldrh	r2, [r2, #0]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d004      	beq.n	8003f5c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003f52:	230f      	movs	r3, #15
 8003f54:	18fb      	adds	r3, r7, r3
 8003f56:	2201      	movs	r2, #1
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	e003      	b.n	8003f64 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f5c:	230f      	movs	r3, #15
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	2200      	movs	r2, #0
 8003f62:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003f64:	230f      	movs	r3, #15
 8003f66:	18fb      	adds	r3, r7, r3
 8003f68:	781b      	ldrb	r3, [r3, #0]
}
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b004      	add	sp, #16
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	0008      	movs	r0, r1
 8003f7c:	0011      	movs	r1, r2
 8003f7e:	1cbb      	adds	r3, r7, #2
 8003f80:	1c02      	adds	r2, r0, #0
 8003f82:	801a      	strh	r2, [r3, #0]
 8003f84:	1c7b      	adds	r3, r7, #1
 8003f86:	1c0a      	adds	r2, r1, #0
 8003f88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f8a:	1c7b      	adds	r3, r7, #1
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d004      	beq.n	8003f9c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f92:	1cbb      	adds	r3, r7, #2
 8003f94:	881a      	ldrh	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f9a:	e003      	b.n	8003fa4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f9c:	1cbb      	adds	r3, r7, #2
 8003f9e:	881a      	ldrh	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003fa4:	46c0      	nop			@ (mov r8, r8)
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b002      	add	sp, #8
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	000a      	movs	r2, r1
 8003fb6:	1cbb      	adds	r3, r7, #2
 8003fb8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fc0:	1cbb      	adds	r3, r7, #2
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	041a      	lsls	r2, r3, #16
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	1cb9      	adds	r1, r7, #2
 8003fd0:	8809      	ldrh	r1, [r1, #0]
 8003fd2:	400b      	ands	r3, r1
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	619a      	str	r2, [r3, #24]
}
 8003fda:	46c0      	nop			@ (mov r8, r8)
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b004      	add	sp, #16
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	0002      	movs	r2, r0
 8003fec:	1dbb      	adds	r3, r7, #6
 8003fee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003ff0:	4b10      	ldr	r3, [pc, #64]	@ (8004034 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	1dba      	adds	r2, r7, #6
 8003ff6:	8812      	ldrh	r2, [r2, #0]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d008      	beq.n	800400e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8004034 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003ffe:	1dba      	adds	r2, r7, #6
 8004000:	8812      	ldrh	r2, [r2, #0]
 8004002:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004004:	1dbb      	adds	r3, r7, #6
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	0018      	movs	r0, r3
 800400a:	f7fe fa11 	bl	8002430 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800400e:	4b09      	ldr	r3, [pc, #36]	@ (8004034 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	1dba      	adds	r2, r7, #6
 8004014:	8812      	ldrh	r2, [r2, #0]
 8004016:	4013      	ands	r3, r2
 8004018:	d008      	beq.n	800402c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800401a:	4b06      	ldr	r3, [pc, #24]	@ (8004034 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800401c:	1dba      	adds	r2, r7, #6
 800401e:	8812      	ldrh	r2, [r2, #0]
 8004020:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004022:	1dbb      	adds	r3, r7, #6
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	0018      	movs	r0, r3
 8004028:	f7fe f9ae 	bl	8002388 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800402c:	46c0      	nop			@ (mov r8, r8)
 800402e:	46bd      	mov	sp, r7
 8004030:	b002      	add	sp, #8
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40021800 	.word	0x40021800

08004038 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e08f      	b.n	800416a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2241      	movs	r2, #65	@ 0x41
 800404e:	5c9b      	ldrb	r3, [r3, r2]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d107      	bne.n	8004066 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2240      	movs	r2, #64	@ 0x40
 800405a:	2100      	movs	r1, #0
 800405c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	0018      	movs	r0, r3
 8004062:	f7fe ffbb 	bl	8002fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2241      	movs	r2, #65	@ 0x41
 800406a:	2124      	movs	r1, #36	@ 0x24
 800406c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2101      	movs	r1, #1
 800407a:	438a      	bics	r2, r1
 800407c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	493b      	ldr	r1, [pc, #236]	@ (8004174 <HAL_I2C_Init+0x13c>)
 8004088:	400a      	ands	r2, r1
 800408a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4938      	ldr	r1, [pc, #224]	@ (8004178 <HAL_I2C_Init+0x140>)
 8004098:	400a      	ands	r2, r1
 800409a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d108      	bne.n	80040b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2180      	movs	r1, #128	@ 0x80
 80040ae:	0209      	lsls	r1, r1, #8
 80040b0:	430a      	orrs	r2, r1
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	e007      	b.n	80040c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2184      	movs	r1, #132	@ 0x84
 80040c0:	0209      	lsls	r1, r1, #8
 80040c2:	430a      	orrs	r2, r1
 80040c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d109      	bne.n	80040e2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2180      	movs	r1, #128	@ 0x80
 80040da:	0109      	lsls	r1, r1, #4
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]
 80040e0:	e007      	b.n	80040f2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4923      	ldr	r1, [pc, #140]	@ (800417c <HAL_I2C_Init+0x144>)
 80040ee:	400a      	ands	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4920      	ldr	r1, [pc, #128]	@ (8004180 <HAL_I2C_Init+0x148>)
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	491a      	ldr	r1, [pc, #104]	@ (8004178 <HAL_I2C_Init+0x140>)
 800410e:	400a      	ands	r2, r1
 8004110:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	431a      	orrs	r2, r3
 800411c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69d9      	ldr	r1, [r3, #28]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1a      	ldr	r2, [r3, #32]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2101      	movs	r1, #1
 8004148:	430a      	orrs	r2, r1
 800414a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2241      	movs	r2, #65	@ 0x41
 8004156:	2120      	movs	r1, #32
 8004158:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2242      	movs	r2, #66	@ 0x42
 8004164:	2100      	movs	r1, #0
 8004166:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	b002      	add	sp, #8
 8004170:	bd80      	pop	{r7, pc}
 8004172:	46c0      	nop			@ (mov r8, r8)
 8004174:	f0ffffff 	.word	0xf0ffffff
 8004178:	ffff7fff 	.word	0xffff7fff
 800417c:	fffff7ff 	.word	0xfffff7ff
 8004180:	02008000 	.word	0x02008000

08004184 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004184:	b590      	push	{r4, r7, lr}
 8004186:	b089      	sub	sp, #36	@ 0x24
 8004188:	af02      	add	r7, sp, #8
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	0008      	movs	r0, r1
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	0019      	movs	r1, r3
 8004192:	230a      	movs	r3, #10
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	1c02      	adds	r2, r0, #0
 8004198:	801a      	strh	r2, [r3, #0]
 800419a:	2308      	movs	r3, #8
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	1c0a      	adds	r2, r1, #0
 80041a0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2241      	movs	r2, #65	@ 0x41
 80041a6:	5c9b      	ldrb	r3, [r3, r2]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d000      	beq.n	80041b0 <HAL_I2C_Master_Transmit+0x2c>
 80041ae:	e10a      	b.n	80043c6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2240      	movs	r2, #64	@ 0x40
 80041b4:	5c9b      	ldrb	r3, [r3, r2]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d101      	bne.n	80041be <HAL_I2C_Master_Transmit+0x3a>
 80041ba:	2302      	movs	r3, #2
 80041bc:	e104      	b.n	80043c8 <HAL_I2C_Master_Transmit+0x244>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2240      	movs	r2, #64	@ 0x40
 80041c2:	2101      	movs	r1, #1
 80041c4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041c6:	f7ff fadf 	bl	8003788 <HAL_GetTick>
 80041ca:	0003      	movs	r3, r0
 80041cc:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041ce:	2380      	movs	r3, #128	@ 0x80
 80041d0:	0219      	lsls	r1, r3, #8
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	2319      	movs	r3, #25
 80041da:	2201      	movs	r2, #1
 80041dc:	f000 fa26 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 80041e0:	1e03      	subs	r3, r0, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0ef      	b.n	80043c8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2241      	movs	r2, #65	@ 0x41
 80041ec:	2121      	movs	r1, #33	@ 0x21
 80041ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2242      	movs	r2, #66	@ 0x42
 80041f4:	2110      	movs	r1, #16
 80041f6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2208      	movs	r2, #8
 8004208:	18ba      	adds	r2, r7, r2
 800420a:	8812      	ldrh	r2, [r2, #0]
 800420c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	2bff      	cmp	r3, #255	@ 0xff
 800421c:	d906      	bls.n	800422c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	22ff      	movs	r2, #255	@ 0xff
 8004222:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004224:	2380      	movs	r3, #128	@ 0x80
 8004226:	045b      	lsls	r3, r3, #17
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	e007      	b.n	800423c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004236:	2380      	movs	r3, #128	@ 0x80
 8004238:	049b      	lsls	r3, r3, #18
 800423a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	d027      	beq.n	8004294 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	781a      	ldrb	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004278:	b2db      	uxtb	r3, r3
 800427a:	3301      	adds	r3, #1
 800427c:	b2da      	uxtb	r2, r3
 800427e:	697c      	ldr	r4, [r7, #20]
 8004280:	230a      	movs	r3, #10
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	8819      	ldrh	r1, [r3, #0]
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	4b51      	ldr	r3, [pc, #324]	@ (80043d0 <HAL_I2C_Master_Transmit+0x24c>)
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	0023      	movs	r3, r4
 800428e:	f000 fc45 	bl	8004b1c <I2C_TransferConfig>
 8004292:	e06f      	b.n	8004374 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004298:	b2da      	uxtb	r2, r3
 800429a:	697c      	ldr	r4, [r7, #20]
 800429c:	230a      	movs	r3, #10
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	8819      	ldrh	r1, [r3, #0]
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	4b4a      	ldr	r3, [pc, #296]	@ (80043d0 <HAL_I2C_Master_Transmit+0x24c>)
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	0023      	movs	r3, r4
 80042aa:	f000 fc37 	bl	8004b1c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80042ae:	e061      	b.n	8004374 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	0018      	movs	r0, r3
 80042b8:	f000 fa10 	bl	80046dc <I2C_WaitOnTXISFlagUntilTimeout>
 80042bc:	1e03      	subs	r3, r0, #0
 80042be:	d001      	beq.n	80042c4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e081      	b.n	80043c8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	781a      	ldrb	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d03a      	beq.n	8004374 <HAL_I2C_Master_Transmit+0x1f0>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004302:	2b00      	cmp	r3, #0
 8004304:	d136      	bne.n	8004374 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004306:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	0013      	movs	r3, r2
 8004310:	2200      	movs	r2, #0
 8004312:	2180      	movs	r1, #128	@ 0x80
 8004314:	f000 f98a 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 8004318:	1e03      	subs	r3, r0, #0
 800431a:	d001      	beq.n	8004320 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e053      	b.n	80043c8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	2bff      	cmp	r3, #255	@ 0xff
 8004328:	d911      	bls.n	800434e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	22ff      	movs	r2, #255	@ 0xff
 800432e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004334:	b2da      	uxtb	r2, r3
 8004336:	2380      	movs	r3, #128	@ 0x80
 8004338:	045c      	lsls	r4, r3, #17
 800433a:	230a      	movs	r3, #10
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	8819      	ldrh	r1, [r3, #0]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	2300      	movs	r3, #0
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	0023      	movs	r3, r4
 8004348:	f000 fbe8 	bl	8004b1c <I2C_TransferConfig>
 800434c:	e012      	b.n	8004374 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800435c:	b2da      	uxtb	r2, r3
 800435e:	2380      	movs	r3, #128	@ 0x80
 8004360:	049c      	lsls	r4, r3, #18
 8004362:	230a      	movs	r3, #10
 8004364:	18fb      	adds	r3, r7, r3
 8004366:	8819      	ldrh	r1, [r3, #0]
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	2300      	movs	r3, #0
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	0023      	movs	r3, r4
 8004370:	f000 fbd4 	bl	8004b1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d198      	bne.n	80042b0 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	0018      	movs	r0, r3
 8004386:	f000 f9ef 	bl	8004768 <I2C_WaitOnSTOPFlagUntilTimeout>
 800438a:	1e03      	subs	r3, r0, #0
 800438c:	d001      	beq.n	8004392 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e01a      	b.n	80043c8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2220      	movs	r2, #32
 8004398:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	490b      	ldr	r1, [pc, #44]	@ (80043d4 <HAL_I2C_Master_Transmit+0x250>)
 80043a6:	400a      	ands	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2241      	movs	r2, #65	@ 0x41
 80043ae:	2120      	movs	r1, #32
 80043b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2242      	movs	r2, #66	@ 0x42
 80043b6:	2100      	movs	r1, #0
 80043b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2240      	movs	r2, #64	@ 0x40
 80043be:	2100      	movs	r1, #0
 80043c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	e000      	b.n	80043c8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80043c6:	2302      	movs	r3, #2
  }
}
 80043c8:	0018      	movs	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b007      	add	sp, #28
 80043ce:	bd90      	pop	{r4, r7, pc}
 80043d0:	80002000 	.word	0x80002000
 80043d4:	fe00e800 	.word	0xfe00e800

080043d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b089      	sub	sp, #36	@ 0x24
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	0008      	movs	r0, r1
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	0019      	movs	r1, r3
 80043e6:	230a      	movs	r3, #10
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	1c02      	adds	r2, r0, #0
 80043ec:	801a      	strh	r2, [r3, #0]
 80043ee:	2308      	movs	r3, #8
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	1c0a      	adds	r2, r1, #0
 80043f4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2241      	movs	r2, #65	@ 0x41
 80043fa:	5c9b      	ldrb	r3, [r3, r2]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d000      	beq.n	8004404 <HAL_I2C_Master_Receive+0x2c>
 8004402:	e0e8      	b.n	80045d6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2240      	movs	r2, #64	@ 0x40
 8004408:	5c9b      	ldrb	r3, [r3, r2]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_I2C_Master_Receive+0x3a>
 800440e:	2302      	movs	r3, #2
 8004410:	e0e2      	b.n	80045d8 <HAL_I2C_Master_Receive+0x200>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2240      	movs	r2, #64	@ 0x40
 8004416:	2101      	movs	r1, #1
 8004418:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800441a:	f7ff f9b5 	bl	8003788 <HAL_GetTick>
 800441e:	0003      	movs	r3, r0
 8004420:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004422:	2380      	movs	r3, #128	@ 0x80
 8004424:	0219      	lsls	r1, r3, #8
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	2319      	movs	r3, #25
 800442e:	2201      	movs	r2, #1
 8004430:	f000 f8fc 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 8004434:	1e03      	subs	r3, r0, #0
 8004436:	d001      	beq.n	800443c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0cd      	b.n	80045d8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2241      	movs	r2, #65	@ 0x41
 8004440:	2122      	movs	r1, #34	@ 0x22
 8004442:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2242      	movs	r2, #66	@ 0x42
 8004448:	2110      	movs	r1, #16
 800444a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2208      	movs	r2, #8
 800445c:	18ba      	adds	r2, r7, r2
 800445e:	8812      	ldrh	r2, [r2, #0]
 8004460:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446c:	b29b      	uxth	r3, r3
 800446e:	2bff      	cmp	r3, #255	@ 0xff
 8004470:	d911      	bls.n	8004496 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	22ff      	movs	r2, #255	@ 0xff
 8004476:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447c:	b2da      	uxtb	r2, r3
 800447e:	2380      	movs	r3, #128	@ 0x80
 8004480:	045c      	lsls	r4, r3, #17
 8004482:	230a      	movs	r3, #10
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	8819      	ldrh	r1, [r3, #0]
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	4b55      	ldr	r3, [pc, #340]	@ (80045e0 <HAL_I2C_Master_Receive+0x208>)
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	0023      	movs	r3, r4
 8004490:	f000 fb44 	bl	8004b1c <I2C_TransferConfig>
 8004494:	e076      	b.n	8004584 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	2380      	movs	r3, #128	@ 0x80
 80044a8:	049c      	lsls	r4, r3, #18
 80044aa:	230a      	movs	r3, #10
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	8819      	ldrh	r1, [r3, #0]
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	4b4b      	ldr	r3, [pc, #300]	@ (80045e0 <HAL_I2C_Master_Receive+0x208>)
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	0023      	movs	r3, r4
 80044b8:	f000 fb30 	bl	8004b1c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80044bc:	e062      	b.n	8004584 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	0018      	movs	r0, r3
 80044c6:	f000 f993 	bl	80047f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044ca:	1e03      	subs	r3, r0, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e082      	b.n	80045d8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d03a      	beq.n	8004584 <HAL_I2C_Master_Receive+0x1ac>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004512:	2b00      	cmp	r3, #0
 8004514:	d136      	bne.n	8004584 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004516:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	0013      	movs	r3, r2
 8004520:	2200      	movs	r2, #0
 8004522:	2180      	movs	r1, #128	@ 0x80
 8004524:	f000 f882 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 8004528:	1e03      	subs	r3, r0, #0
 800452a:	d001      	beq.n	8004530 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e053      	b.n	80045d8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004534:	b29b      	uxth	r3, r3
 8004536:	2bff      	cmp	r3, #255	@ 0xff
 8004538:	d911      	bls.n	800455e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	22ff      	movs	r2, #255	@ 0xff
 800453e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004544:	b2da      	uxtb	r2, r3
 8004546:	2380      	movs	r3, #128	@ 0x80
 8004548:	045c      	lsls	r4, r3, #17
 800454a:	230a      	movs	r3, #10
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	8819      	ldrh	r1, [r3, #0]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	2300      	movs	r3, #0
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	0023      	movs	r3, r4
 8004558:	f000 fae0 	bl	8004b1c <I2C_TransferConfig>
 800455c:	e012      	b.n	8004584 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800456c:	b2da      	uxtb	r2, r3
 800456e:	2380      	movs	r3, #128	@ 0x80
 8004570:	049c      	lsls	r4, r3, #18
 8004572:	230a      	movs	r3, #10
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	8819      	ldrh	r1, [r3, #0]
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	2300      	movs	r3, #0
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	0023      	movs	r3, r4
 8004580:	f000 facc 	bl	8004b1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d197      	bne.n	80044be <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	0018      	movs	r0, r3
 8004596:	f000 f8e7 	bl	8004768 <I2C_WaitOnSTOPFlagUntilTimeout>
 800459a:	1e03      	subs	r3, r0, #0
 800459c:	d001      	beq.n	80045a2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e01a      	b.n	80045d8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2220      	movs	r2, #32
 80045a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	490b      	ldr	r1, [pc, #44]	@ (80045e4 <HAL_I2C_Master_Receive+0x20c>)
 80045b6:	400a      	ands	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2241      	movs	r2, #65	@ 0x41
 80045be:	2120      	movs	r1, #32
 80045c0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2242      	movs	r2, #66	@ 0x42
 80045c6:	2100      	movs	r1, #0
 80045c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2240      	movs	r2, #64	@ 0x40
 80045ce:	2100      	movs	r1, #0
 80045d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	e000      	b.n	80045d8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80045d6:	2302      	movs	r3, #2
  }
}
 80045d8:	0018      	movs	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	b007      	add	sp, #28
 80045de:	bd90      	pop	{r4, r7, pc}
 80045e0:	80002400 	.word	0x80002400
 80045e4:	fe00e800 	.word	0xfe00e800

080045e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2202      	movs	r2, #2
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d103      	bne.n	8004606 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2200      	movs	r2, #0
 8004604:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	2201      	movs	r2, #1
 800460e:	4013      	ands	r3, r2
 8004610:	2b01      	cmp	r3, #1
 8004612:	d007      	beq.n	8004624 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2101      	movs	r1, #1
 8004620:	430a      	orrs	r2, r1
 8004622:	619a      	str	r2, [r3, #24]
  }
}
 8004624:	46c0      	nop			@ (mov r8, r8)
 8004626:	46bd      	mov	sp, r7
 8004628:	b002      	add	sp, #8
 800462a:	bd80      	pop	{r7, pc}

0800462c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	1dfb      	adds	r3, r7, #7
 800463a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800463c:	e03a      	b.n	80046b4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	6839      	ldr	r1, [r7, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	0018      	movs	r0, r3
 8004646:	f000 f971 	bl	800492c <I2C_IsErrorOccurred>
 800464a:	1e03      	subs	r3, r0, #0
 800464c:	d001      	beq.n	8004652 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e040      	b.n	80046d4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	3301      	adds	r3, #1
 8004656:	d02d      	beq.n	80046b4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004658:	f7ff f896 	bl	8003788 <HAL_GetTick>
 800465c:	0002      	movs	r2, r0
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d302      	bcc.n	800466e <I2C_WaitOnFlagUntilTimeout+0x42>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d122      	bne.n	80046b4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	4013      	ands	r3, r2
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	425a      	negs	r2, r3
 800467e:	4153      	adcs	r3, r2
 8004680:	b2db      	uxtb	r3, r3
 8004682:	001a      	movs	r2, r3
 8004684:	1dfb      	adds	r3, r7, #7
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d113      	bne.n	80046b4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004690:	2220      	movs	r2, #32
 8004692:	431a      	orrs	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2241      	movs	r2, #65	@ 0x41
 800469c:	2120      	movs	r1, #32
 800469e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2242      	movs	r2, #66	@ 0x42
 80046a4:	2100      	movs	r1, #0
 80046a6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2240      	movs	r2, #64	@ 0x40
 80046ac:	2100      	movs	r1, #0
 80046ae:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e00f      	b.n	80046d4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	4013      	ands	r3, r2
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	425a      	negs	r2, r3
 80046c4:	4153      	adcs	r3, r2
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	001a      	movs	r2, r3
 80046ca:	1dfb      	adds	r3, r7, #7
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d0b5      	beq.n	800463e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	0018      	movs	r0, r3
 80046d6:	46bd      	mov	sp, r7
 80046d8:	b004      	add	sp, #16
 80046da:	bd80      	pop	{r7, pc}

080046dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046e8:	e032      	b.n	8004750 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	0018      	movs	r0, r3
 80046f2:	f000 f91b 	bl	800492c <I2C_IsErrorOccurred>
 80046f6:	1e03      	subs	r3, r0, #0
 80046f8:	d001      	beq.n	80046fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e030      	b.n	8004760 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	3301      	adds	r3, #1
 8004702:	d025      	beq.n	8004750 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004704:	f7ff f840 	bl	8003788 <HAL_GetTick>
 8004708:	0002      	movs	r2, r0
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	429a      	cmp	r2, r3
 8004712:	d302      	bcc.n	800471a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d11a      	bne.n	8004750 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	2202      	movs	r2, #2
 8004722:	4013      	ands	r3, r2
 8004724:	2b02      	cmp	r3, #2
 8004726:	d013      	beq.n	8004750 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472c:	2220      	movs	r2, #32
 800472e:	431a      	orrs	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2241      	movs	r2, #65	@ 0x41
 8004738:	2120      	movs	r1, #32
 800473a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2242      	movs	r2, #66	@ 0x42
 8004740:	2100      	movs	r1, #0
 8004742:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2240      	movs	r2, #64	@ 0x40
 8004748:	2100      	movs	r1, #0
 800474a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e007      	b.n	8004760 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2202      	movs	r2, #2
 8004758:	4013      	ands	r3, r2
 800475a:	2b02      	cmp	r3, #2
 800475c:	d1c5      	bne.n	80046ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	0018      	movs	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	b004      	add	sp, #16
 8004766:	bd80      	pop	{r7, pc}

08004768 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004774:	e02f      	b.n	80047d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	0018      	movs	r0, r3
 800477e:	f000 f8d5 	bl	800492c <I2C_IsErrorOccurred>
 8004782:	1e03      	subs	r3, r0, #0
 8004784:	d001      	beq.n	800478a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e02d      	b.n	80047e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800478a:	f7fe fffd 	bl	8003788 <HAL_GetTick>
 800478e:	0002      	movs	r2, r0
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	429a      	cmp	r2, r3
 8004798:	d302      	bcc.n	80047a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d11a      	bne.n	80047d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	2220      	movs	r2, #32
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	d013      	beq.n	80047d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b2:	2220      	movs	r2, #32
 80047b4:	431a      	orrs	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2241      	movs	r2, #65	@ 0x41
 80047be:	2120      	movs	r1, #32
 80047c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2242      	movs	r2, #66	@ 0x42
 80047c6:	2100      	movs	r1, #0
 80047c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2240      	movs	r2, #64	@ 0x40
 80047ce:	2100      	movs	r1, #0
 80047d0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e007      	b.n	80047e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	2220      	movs	r2, #32
 80047de:	4013      	ands	r3, r2
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d1c8      	bne.n	8004776 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	0018      	movs	r0, r3
 80047e8:	46bd      	mov	sp, r7
 80047ea:	b004      	add	sp, #16
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047fc:	2317      	movs	r3, #23
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	2200      	movs	r2, #0
 8004802:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004804:	e07b      	b.n	80048fe <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	0018      	movs	r0, r3
 800480e:	f000 f88d 	bl	800492c <I2C_IsErrorOccurred>
 8004812:	1e03      	subs	r3, r0, #0
 8004814:	d003      	beq.n	800481e <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004816:	2317      	movs	r3, #23
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	2201      	movs	r2, #1
 800481c:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	2220      	movs	r2, #32
 8004826:	4013      	ands	r3, r2
 8004828:	2b20      	cmp	r3, #32
 800482a:	d140      	bne.n	80048ae <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 800482c:	2117      	movs	r1, #23
 800482e:	187b      	adds	r3, r7, r1
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d13b      	bne.n	80048ae <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	2204      	movs	r2, #4
 800483e:	4013      	ands	r3, r2
 8004840:	2b04      	cmp	r3, #4
 8004842:	d106      	bne.n	8004852 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800484c:	187b      	adds	r3, r7, r1
 800484e:	2200      	movs	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	2210      	movs	r2, #16
 800485a:	4013      	ands	r3, r2
 800485c:	2b10      	cmp	r3, #16
 800485e:	d123      	bne.n	80048a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2210      	movs	r2, #16
 8004866:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2204      	movs	r2, #4
 800486c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2220      	movs	r2, #32
 8004874:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4929      	ldr	r1, [pc, #164]	@ (8004928 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004882:	400a      	ands	r2, r1
 8004884:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2241      	movs	r2, #65	@ 0x41
 800488a:	2120      	movs	r1, #32
 800488c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2242      	movs	r2, #66	@ 0x42
 8004892:	2100      	movs	r1, #0
 8004894:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2240      	movs	r2, #64	@ 0x40
 800489a:	2100      	movs	r1, #0
 800489c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800489e:	2317      	movs	r3, #23
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	2201      	movs	r2, #1
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	e002      	b.n	80048ae <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80048ae:	f7fe ff6b 	bl	8003788 <HAL_GetTick>
 80048b2:	0002      	movs	r2, r0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d302      	bcc.n	80048c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d11c      	bne.n	80048fe <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80048c4:	2017      	movs	r0, #23
 80048c6:	183b      	adds	r3, r7, r0
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d117      	bne.n	80048fe <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	2204      	movs	r2, #4
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d010      	beq.n	80048fe <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e0:	2220      	movs	r2, #32
 80048e2:	431a      	orrs	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2241      	movs	r2, #65	@ 0x41
 80048ec:	2120      	movs	r1, #32
 80048ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2240      	movs	r2, #64	@ 0x40
 80048f4:	2100      	movs	r1, #0
 80048f6:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80048f8:	183b      	adds	r3, r7, r0
 80048fa:	2201      	movs	r2, #1
 80048fc:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	2204      	movs	r2, #4
 8004906:	4013      	ands	r3, r2
 8004908:	2b04      	cmp	r3, #4
 800490a:	d005      	beq.n	8004918 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800490c:	2317      	movs	r3, #23
 800490e:	18fb      	adds	r3, r7, r3
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d100      	bne.n	8004918 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004916:	e776      	b.n	8004806 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004918:	2317      	movs	r3, #23
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	781b      	ldrb	r3, [r3, #0]
}
 800491e:	0018      	movs	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	b006      	add	sp, #24
 8004924:	bd80      	pop	{r7, pc}
 8004926:	46c0      	nop			@ (mov r8, r8)
 8004928:	fe00e800 	.word	0xfe00e800

0800492c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	@ 0x28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004938:	2327      	movs	r3, #39	@ 0x27
 800493a:	18fb      	adds	r3, r7, r3
 800493c:	2200      	movs	r2, #0
 800493e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	2210      	movs	r2, #16
 8004954:	4013      	ands	r3, r2
 8004956:	d100      	bne.n	800495a <I2C_IsErrorOccurred+0x2e>
 8004958:	e079      	b.n	8004a4e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2210      	movs	r2, #16
 8004960:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004962:	e057      	b.n	8004a14 <I2C_IsErrorOccurred+0xe8>
 8004964:	2227      	movs	r2, #39	@ 0x27
 8004966:	18bb      	adds	r3, r7, r2
 8004968:	18ba      	adds	r2, r7, r2
 800496a:	7812      	ldrb	r2, [r2, #0]
 800496c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	3301      	adds	r3, #1
 8004972:	d04f      	beq.n	8004a14 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004974:	f7fe ff08 	bl	8003788 <HAL_GetTick>
 8004978:	0002      	movs	r2, r0
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	429a      	cmp	r2, r3
 8004982:	d302      	bcc.n	800498a <I2C_IsErrorOccurred+0x5e>
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d144      	bne.n	8004a14 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	2380      	movs	r3, #128	@ 0x80
 8004992:	01db      	lsls	r3, r3, #7
 8004994:	4013      	ands	r3, r2
 8004996:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004998:	2013      	movs	r0, #19
 800499a:	183b      	adds	r3, r7, r0
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	2142      	movs	r1, #66	@ 0x42
 80049a0:	5c52      	ldrb	r2, [r2, r1]
 80049a2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	2380      	movs	r3, #128	@ 0x80
 80049ac:	021b      	lsls	r3, r3, #8
 80049ae:	401a      	ands	r2, r3
 80049b0:	2380      	movs	r3, #128	@ 0x80
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d126      	bne.n	8004a06 <I2C_IsErrorOccurred+0xda>
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	2380      	movs	r3, #128	@ 0x80
 80049bc:	01db      	lsls	r3, r3, #7
 80049be:	429a      	cmp	r2, r3
 80049c0:	d021      	beq.n	8004a06 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80049c2:	183b      	adds	r3, r7, r0
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	d01d      	beq.n	8004a06 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2180      	movs	r1, #128	@ 0x80
 80049d6:	01c9      	lsls	r1, r1, #7
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80049dc:	f7fe fed4 	bl	8003788 <HAL_GetTick>
 80049e0:	0003      	movs	r3, r0
 80049e2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049e4:	e00f      	b.n	8004a06 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80049e6:	f7fe fecf 	bl	8003788 <HAL_GetTick>
 80049ea:	0002      	movs	r2, r0
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b19      	cmp	r3, #25
 80049f2:	d908      	bls.n	8004a06 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	2220      	movs	r2, #32
 80049f8:	4313      	orrs	r3, r2
 80049fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80049fc:	2327      	movs	r3, #39	@ 0x27
 80049fe:	18fb      	adds	r3, r7, r3
 8004a00:	2201      	movs	r2, #1
 8004a02:	701a      	strb	r2, [r3, #0]

              break;
 8004a04:	e006      	b.n	8004a14 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d1e8      	bne.n	80049e6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d004      	beq.n	8004a2c <I2C_IsErrorOccurred+0x100>
 8004a22:	2327      	movs	r3, #39	@ 0x27
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d09b      	beq.n	8004964 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004a2c:	2327      	movs	r3, #39	@ 0x27
 8004a2e:	18fb      	adds	r3, r7, r3
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d103      	bne.n	8004a3e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	2204      	movs	r2, #4
 8004a42:	4313      	orrs	r3, r2
 8004a44:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004a46:	2327      	movs	r3, #39	@ 0x27
 8004a48:	18fb      	adds	r3, r7, r3
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	2380      	movs	r3, #128	@ 0x80
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	d00c      	beq.n	8004a7a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	2201      	movs	r2, #1
 8004a64:	4313      	orrs	r3, r2
 8004a66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2280      	movs	r2, #128	@ 0x80
 8004a6e:	0052      	lsls	r2, r2, #1
 8004a70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a72:	2327      	movs	r3, #39	@ 0x27
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	2201      	movs	r2, #1
 8004a78:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	2380      	movs	r3, #128	@ 0x80
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4013      	ands	r3, r2
 8004a82:	d00c      	beq.n	8004a9e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	2208      	movs	r2, #8
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2280      	movs	r2, #128	@ 0x80
 8004a92:	00d2      	lsls	r2, r2, #3
 8004a94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a96:	2327      	movs	r3, #39	@ 0x27
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	2380      	movs	r3, #128	@ 0x80
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d00c      	beq.n	8004ac2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	4313      	orrs	r3, r2
 8004aae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2280      	movs	r2, #128	@ 0x80
 8004ab6:	0092      	lsls	r2, r2, #2
 8004ab8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004aba:	2327      	movs	r3, #39	@ 0x27
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	2201      	movs	r2, #1
 8004ac0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004ac2:	2327      	movs	r3, #39	@ 0x27
 8004ac4:	18fb      	adds	r3, r7, r3
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01d      	beq.n	8004b08 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	0018      	movs	r0, r3
 8004ad0:	f7ff fd8a 	bl	80045e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	490e      	ldr	r1, [pc, #56]	@ (8004b18 <I2C_IsErrorOccurred+0x1ec>)
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2241      	movs	r2, #65	@ 0x41
 8004af4:	2120      	movs	r1, #32
 8004af6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2242      	movs	r2, #66	@ 0x42
 8004afc:	2100      	movs	r1, #0
 8004afe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2240      	movs	r2, #64	@ 0x40
 8004b04:	2100      	movs	r1, #0
 8004b06:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004b08:	2327      	movs	r3, #39	@ 0x27
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	781b      	ldrb	r3, [r3, #0]
}
 8004b0e:	0018      	movs	r0, r3
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b00a      	add	sp, #40	@ 0x28
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	46c0      	nop			@ (mov r8, r8)
 8004b18:	fe00e800 	.word	0xfe00e800

08004b1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b1c:	b590      	push	{r4, r7, lr}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	0008      	movs	r0, r1
 8004b26:	0011      	movs	r1, r2
 8004b28:	607b      	str	r3, [r7, #4]
 8004b2a:	240a      	movs	r4, #10
 8004b2c:	193b      	adds	r3, r7, r4
 8004b2e:	1c02      	adds	r2, r0, #0
 8004b30:	801a      	strh	r2, [r3, #0]
 8004b32:	2009      	movs	r0, #9
 8004b34:	183b      	adds	r3, r7, r0
 8004b36:	1c0a      	adds	r2, r1, #0
 8004b38:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b3a:	193b      	adds	r3, r7, r4
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	059b      	lsls	r3, r3, #22
 8004b40:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b42:	183b      	adds	r3, r7, r0
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	0419      	lsls	r1, r3, #16
 8004b48:	23ff      	movs	r3, #255	@ 0xff
 8004b4a:	041b      	lsls	r3, r3, #16
 8004b4c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b4e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b56:	4313      	orrs	r3, r2
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	085b      	lsrs	r3, r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b66:	0d51      	lsrs	r1, r2, #21
 8004b68:	2280      	movs	r2, #128	@ 0x80
 8004b6a:	00d2      	lsls	r2, r2, #3
 8004b6c:	400a      	ands	r2, r1
 8004b6e:	4907      	ldr	r1, [pc, #28]	@ (8004b8c <I2C_TransferConfig+0x70>)
 8004b70:	430a      	orrs	r2, r1
 8004b72:	43d2      	mvns	r2, r2
 8004b74:	401a      	ands	r2, r3
 8004b76:	0011      	movs	r1, r2
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b82:	46c0      	nop			@ (mov r8, r8)
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b007      	add	sp, #28
 8004b88:	bd90      	pop	{r4, r7, pc}
 8004b8a:	46c0      	nop			@ (mov r8, r8)
 8004b8c:	03ff63ff 	.word	0x03ff63ff

08004b90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2241      	movs	r2, #65	@ 0x41
 8004b9e:	5c9b      	ldrb	r3, [r3, r2]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b20      	cmp	r3, #32
 8004ba4:	d138      	bne.n	8004c18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2240      	movs	r2, #64	@ 0x40
 8004baa:	5c9b      	ldrb	r3, [r3, r2]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d101      	bne.n	8004bb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e032      	b.n	8004c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2240      	movs	r2, #64	@ 0x40
 8004bb8:	2101      	movs	r1, #1
 8004bba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2241      	movs	r2, #65	@ 0x41
 8004bc0:	2124      	movs	r1, #36	@ 0x24
 8004bc2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2101      	movs	r1, #1
 8004bd0:	438a      	bics	r2, r1
 8004bd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4911      	ldr	r1, [pc, #68]	@ (8004c24 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004be0:	400a      	ands	r2, r1
 8004be2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6819      	ldr	r1, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2101      	movs	r1, #1
 8004c00:	430a      	orrs	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2241      	movs	r2, #65	@ 0x41
 8004c08:	2120      	movs	r1, #32
 8004c0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2240      	movs	r2, #64	@ 0x40
 8004c10:	2100      	movs	r1, #0
 8004c12:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	e000      	b.n	8004c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c18:	2302      	movs	r3, #2
  }
}
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b002      	add	sp, #8
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	46c0      	nop			@ (mov r8, r8)
 8004c24:	ffffefff 	.word	0xffffefff

08004c28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2241      	movs	r2, #65	@ 0x41
 8004c36:	5c9b      	ldrb	r3, [r3, r2]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d139      	bne.n	8004cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2240      	movs	r2, #64	@ 0x40
 8004c42:	5c9b      	ldrb	r3, [r3, r2]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e033      	b.n	8004cb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2240      	movs	r2, #64	@ 0x40
 8004c50:	2101      	movs	r1, #1
 8004c52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2241      	movs	r2, #65	@ 0x41
 8004c58:	2124      	movs	r1, #36	@ 0x24
 8004c5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2101      	movs	r1, #1
 8004c68:	438a      	bics	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4a11      	ldr	r2, [pc, #68]	@ (8004cbc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2101      	movs	r1, #1
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2241      	movs	r2, #65	@ 0x41
 8004ca2:	2120      	movs	r1, #32
 8004ca4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2240      	movs	r2, #64	@ 0x40
 8004caa:	2100      	movs	r1, #0
 8004cac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e000      	b.n	8004cb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004cb2:	2302      	movs	r3, #2
  }
}
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b004      	add	sp, #16
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	fffff0ff 	.word	0xfffff0ff

08004cc0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e0e5      	b.n	8004e9e <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2235      	movs	r2, #53	@ 0x35
 8004cd6:	5c9b      	ldrb	r3, [r3, r2]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d107      	bne.n	8004cee <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2234      	movs	r2, #52	@ 0x34
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	0018      	movs	r0, r3
 8004cea:	f7fe f9d9 	bl	80030a0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2235      	movs	r2, #53	@ 0x35
 8004cf2:	2102      	movs	r1, #2
 8004cf4:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69da      	ldr	r2, [r3, #28]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4969      	ldr	r1, [pc, #420]	@ (8004ea8 <HAL_I2S_Init+0x1e8>)
 8004d02:	400a      	ands	r2, r1
 8004d04:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d100      	bne.n	8004d18 <HAL_I2S_Init+0x58>
 8004d16:	e076      	b.n	8004e06 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d102      	bne.n	8004d26 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004d20:	2310      	movs	r3, #16
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	e001      	b.n	8004d2a <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004d26:	2320      	movs	r3, #32
 8004d28:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b20      	cmp	r3, #32
 8004d30:	d802      	bhi.n	8004d38 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8004d38:	2380      	movs	r3, #128	@ 0x80
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f000 ff5b 	bl	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d42:	0003      	movs	r3, r0
 8004d44:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691a      	ldr	r2, [r3, #16]
 8004d4a:	2380      	movs	r3, #128	@ 0x80
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d131      	bne.n	8004db6 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d016      	beq.n	8004d88 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	0019      	movs	r1, r3
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7fb f9cf 	bl	8000104 <__udivsi3>
 8004d66:	0003      	movs	r3, r0
 8004d68:	001a      	movs	r2, r3
 8004d6a:	0013      	movs	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	189b      	adds	r3, r3, r2
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	001a      	movs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	0019      	movs	r1, r3
 8004d7a:	0010      	movs	r0, r2
 8004d7c:	f7fb f9c2 	bl	8000104 <__udivsi3>
 8004d80:	0003      	movs	r3, r0
 8004d82:	3305      	adds	r3, #5
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	e02a      	b.n	8004dde <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	0019      	movs	r1, r3
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f7fb f9b8 	bl	8000104 <__udivsi3>
 8004d94:	0003      	movs	r3, r0
 8004d96:	001a      	movs	r2, r3
 8004d98:	0013      	movs	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	189b      	adds	r3, r3, r2
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	001a      	movs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	0019      	movs	r1, r3
 8004da8:	0010      	movs	r0, r2
 8004daa:	f7fb f9ab 	bl	8000104 <__udivsi3>
 8004dae:	0003      	movs	r3, r0
 8004db0:	3305      	adds	r3, #5
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	e013      	b.n	8004dde <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004db6:	6979      	ldr	r1, [r7, #20]
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f7fb f9a3 	bl	8000104 <__udivsi3>
 8004dbe:	0003      	movs	r3, r0
 8004dc0:	001a      	movs	r2, r3
 8004dc2:	0013      	movs	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	189b      	adds	r3, r3, r2
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	001a      	movs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	0019      	movs	r1, r3
 8004dd2:	0010      	movs	r0, r2
 8004dd4:	f7fb f996 	bl	8000104 <__udivsi3>
 8004dd8:	0003      	movs	r3, r0
 8004dda:	3305      	adds	r3, #5
 8004ddc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	210a      	movs	r1, #10
 8004de2:	0018      	movs	r0, r3
 8004de4:	f7fb f98e 	bl	8000104 <__udivsi3>
 8004de8:	0003      	movs	r3, r0
 8004dea:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	2201      	movs	r2, #1
 8004df0:	4013      	ands	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	085b      	lsrs	r3, r3, #1
 8004dfc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	61bb      	str	r3, [r7, #24]
 8004e04:	e003      	b.n	8004e0e <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004e06:	2302      	movs	r3, #2
 8004e08:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d902      	bls.n	8004e1a <HAL_I2S_Init+0x15a>
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	2bff      	cmp	r3, #255	@ 0xff
 8004e18:	d907      	bls.n	8004e2a <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1e:	2210      	movs	r2, #16
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e039      	b.n	8004e9e <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	431a      	orrs	r2, r3
 8004e32:	0011      	movs	r1, r2
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	4a18      	ldr	r2, [pc, #96]	@ (8004ea8 <HAL_I2S_Init+0x1e8>)
 8004e46:	401a      	ands	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6859      	ldr	r1, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	4319      	orrs	r1, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	4319      	orrs	r1, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2180      	movs	r1, #128	@ 0x80
 8004e66:	0109      	lsls	r1, r1, #4
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b30      	cmp	r3, #48	@ 0x30
 8004e72:	d003      	beq.n	8004e7c <HAL_I2S_Init+0x1bc>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2bb0      	cmp	r3, #176	@ 0xb0
 8004e7a:	d108      	bne.n	8004e8e <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	69da      	ldr	r2, [r3, #28]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2180      	movs	r1, #128	@ 0x80
 8004e88:	0149      	lsls	r1, r1, #5
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2235      	movs	r2, #53	@ 0x35
 8004e98:	2101      	movs	r1, #1
 8004e9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	b008      	add	sp, #32
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	46c0      	nop			@ (mov r8, r8)
 8004ea8:	fffff040 	.word	0xfffff040

08004eac <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eb0:	4b04      	ldr	r3, [pc, #16]	@ (8004ec4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	4b03      	ldr	r3, [pc, #12]	@ (8004ec4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004eb6:	2180      	movs	r1, #128	@ 0x80
 8004eb8:	0049      	lsls	r1, r1, #1
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	601a      	str	r2, [r3, #0]
}
 8004ebe:	46c0      	nop			@ (mov r8, r8)
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40007000 	.word	0x40007000

08004ec8 <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ecc:	4b04      	ldr	r3, [pc, #16]	@ (8004ee0 <HAL_PWR_DisableBkUpAccess+0x18>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	4b03      	ldr	r3, [pc, #12]	@ (8004ee0 <HAL_PWR_DisableBkUpAccess+0x18>)
 8004ed2:	4904      	ldr	r1, [pc, #16]	@ (8004ee4 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8004ed4:	400a      	ands	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]
}
 8004ed8:	46c0      	nop			@ (mov r8, r8)
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	46c0      	nop			@ (mov r8, r8)
 8004ee0:	40007000 	.word	0x40007000
 8004ee4:	fffffeff 	.word	0xfffffeff

08004ee8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004ef0:	4b19      	ldr	r3, [pc, #100]	@ (8004f58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a19      	ldr	r2, [pc, #100]	@ (8004f5c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	0019      	movs	r1, r3
 8004efa:	4b17      	ldr	r3, [pc, #92]	@ (8004f58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	2380      	movs	r3, #128	@ 0x80
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d11f      	bne.n	8004f4c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004f0c:	4b14      	ldr	r3, [pc, #80]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	0013      	movs	r3, r2
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	189b      	adds	r3, r3, r2
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	4912      	ldr	r1, [pc, #72]	@ (8004f64 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f7fb f8f2 	bl	8000104 <__udivsi3>
 8004f20:	0003      	movs	r3, r0
 8004f22:	3301      	adds	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f26:	e008      	b.n	8004f3a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	e001      	b.n	8004f3a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e009      	b.n	8004f4e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f3a:	4b07      	ldr	r3, [pc, #28]	@ (8004f58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004f3c:	695a      	ldr	r2, [r3, #20]
 8004f3e:	2380      	movs	r3, #128	@ 0x80
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	401a      	ands	r2, r3
 8004f44:	2380      	movs	r3, #128	@ 0x80
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d0ed      	beq.n	8004f28 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	0018      	movs	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b004      	add	sp, #16
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	46c0      	nop			@ (mov r8, r8)
 8004f58:	40007000 	.word	0x40007000
 8004f5c:	fffff9ff 	.word	0xfffff9ff
 8004f60:	20000090 	.word	0x20000090
 8004f64:	000f4240 	.word	0x000f4240

08004f68 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004f6c:	4b03      	ldr	r3, [pc, #12]	@ (8004f7c <LL_RCC_GetAPB1Prescaler+0x14>)
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	23e0      	movs	r3, #224	@ 0xe0
 8004f72:	01db      	lsls	r3, r3, #7
 8004f74:	4013      	ands	r3, r2
}
 8004f76:	0018      	movs	r0, r3
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40021000 	.word	0x40021000

08004f80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e2fe      	b.n	8005590 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2201      	movs	r2, #1
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d100      	bne.n	8004f9e <HAL_RCC_OscConfig+0x1e>
 8004f9c:	e07c      	b.n	8005098 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f9e:	4bc3      	ldr	r3, [pc, #780]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	2238      	movs	r2, #56	@ 0x38
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fa8:	4bc0      	ldr	r3, [pc, #768]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	2203      	movs	r2, #3
 8004fae:	4013      	ands	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d102      	bne.n	8004fbe <HAL_RCC_OscConfig+0x3e>
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d002      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d10b      	bne.n	8004fdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc4:	4bb9      	ldr	r3, [pc, #740]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	2380      	movs	r3, #128	@ 0x80
 8004fca:	029b      	lsls	r3, r3, #10
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d062      	beq.n	8005096 <HAL_RCC_OscConfig+0x116>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d15e      	bne.n	8005096 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e2d9      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	2380      	movs	r3, #128	@ 0x80
 8004fe2:	025b      	lsls	r3, r3, #9
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d107      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x78>
 8004fe8:	4bb0      	ldr	r3, [pc, #704]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	4baf      	ldr	r3, [pc, #700]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8004fee:	2180      	movs	r1, #128	@ 0x80
 8004ff0:	0249      	lsls	r1, r1, #9
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	e020      	b.n	800503a <HAL_RCC_OscConfig+0xba>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	23a0      	movs	r3, #160	@ 0xa0
 8004ffe:	02db      	lsls	r3, r3, #11
 8005000:	429a      	cmp	r2, r3
 8005002:	d10e      	bne.n	8005022 <HAL_RCC_OscConfig+0xa2>
 8005004:	4ba9      	ldr	r3, [pc, #676]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	4ba8      	ldr	r3, [pc, #672]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 800500a:	2180      	movs	r1, #128	@ 0x80
 800500c:	02c9      	lsls	r1, r1, #11
 800500e:	430a      	orrs	r2, r1
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	4ba6      	ldr	r3, [pc, #664]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4ba5      	ldr	r3, [pc, #660]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005018:	2180      	movs	r1, #128	@ 0x80
 800501a:	0249      	lsls	r1, r1, #9
 800501c:	430a      	orrs	r2, r1
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	e00b      	b.n	800503a <HAL_RCC_OscConfig+0xba>
 8005022:	4ba2      	ldr	r3, [pc, #648]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4ba1      	ldr	r3, [pc, #644]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005028:	49a1      	ldr	r1, [pc, #644]	@ (80052b0 <HAL_RCC_OscConfig+0x330>)
 800502a:	400a      	ands	r2, r1
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	4b9f      	ldr	r3, [pc, #636]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4b9e      	ldr	r3, [pc, #632]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005034:	499f      	ldr	r1, [pc, #636]	@ (80052b4 <HAL_RCC_OscConfig+0x334>)
 8005036:	400a      	ands	r2, r1
 8005038:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d014      	beq.n	800506c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005042:	f7fe fba1 	bl	8003788 <HAL_GetTick>
 8005046:	0003      	movs	r3, r0
 8005048:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800504c:	f7fe fb9c 	bl	8003788 <HAL_GetTick>
 8005050:	0002      	movs	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b64      	cmp	r3, #100	@ 0x64
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e298      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800505e:	4b93      	ldr	r3, [pc, #588]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	2380      	movs	r3, #128	@ 0x80
 8005064:	029b      	lsls	r3, r3, #10
 8005066:	4013      	ands	r3, r2
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0xcc>
 800506a:	e015      	b.n	8005098 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506c:	f7fe fb8c 	bl	8003788 <HAL_GetTick>
 8005070:	0003      	movs	r3, r0
 8005072:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005074:	e008      	b.n	8005088 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005076:	f7fe fb87 	bl	8003788 <HAL_GetTick>
 800507a:	0002      	movs	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b64      	cmp	r3, #100	@ 0x64
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e283      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005088:	4b88      	ldr	r3, [pc, #544]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	2380      	movs	r3, #128	@ 0x80
 800508e:	029b      	lsls	r3, r3, #10
 8005090:	4013      	ands	r3, r2
 8005092:	d1f0      	bne.n	8005076 <HAL_RCC_OscConfig+0xf6>
 8005094:	e000      	b.n	8005098 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005096:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2202      	movs	r2, #2
 800509e:	4013      	ands	r3, r2
 80050a0:	d100      	bne.n	80050a4 <HAL_RCC_OscConfig+0x124>
 80050a2:	e099      	b.n	80051d8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050a4:	4b81      	ldr	r3, [pc, #516]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	2238      	movs	r2, #56	@ 0x38
 80050aa:	4013      	ands	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050ae:	4b7f      	ldr	r3, [pc, #508]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	2203      	movs	r2, #3
 80050b4:	4013      	ands	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	2b10      	cmp	r3, #16
 80050bc:	d102      	bne.n	80050c4 <HAL_RCC_OscConfig+0x144>
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d002      	beq.n	80050ca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d135      	bne.n	8005136 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050ca:	4b78      	ldr	r3, [pc, #480]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	2380      	movs	r3, #128	@ 0x80
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	4013      	ands	r3, r2
 80050d4:	d005      	beq.n	80050e2 <HAL_RCC_OscConfig+0x162>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e256      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e2:	4b72      	ldr	r3, [pc, #456]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	4a74      	ldr	r2, [pc, #464]	@ (80052b8 <HAL_RCC_OscConfig+0x338>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	0019      	movs	r1, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	021a      	lsls	r2, r3, #8
 80050f2:	4b6e      	ldr	r3, [pc, #440]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 80050f4:	430a      	orrs	r2, r1
 80050f6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d112      	bne.n	8005124 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80050fe:	4b6b      	ldr	r3, [pc, #428]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a6e      	ldr	r2, [pc, #440]	@ (80052bc <HAL_RCC_OscConfig+0x33c>)
 8005104:	4013      	ands	r3, r2
 8005106:	0019      	movs	r1, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	4b67      	ldr	r3, [pc, #412]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 800510e:	430a      	orrs	r2, r1
 8005110:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005112:	4b66      	ldr	r3, [pc, #408]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	0adb      	lsrs	r3, r3, #11
 8005118:	2207      	movs	r2, #7
 800511a:	4013      	ands	r3, r2
 800511c:	4a68      	ldr	r2, [pc, #416]	@ (80052c0 <HAL_RCC_OscConfig+0x340>)
 800511e:	40da      	lsrs	r2, r3
 8005120:	4b68      	ldr	r3, [pc, #416]	@ (80052c4 <HAL_RCC_OscConfig+0x344>)
 8005122:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005124:	4b68      	ldr	r3, [pc, #416]	@ (80052c8 <HAL_RCC_OscConfig+0x348>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	0018      	movs	r0, r3
 800512a:	f7fe fad1 	bl	80036d0 <HAL_InitTick>
 800512e:	1e03      	subs	r3, r0, #0
 8005130:	d051      	beq.n	80051d6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e22c      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d030      	beq.n	80051a0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800513e:	4b5b      	ldr	r3, [pc, #364]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a5e      	ldr	r2, [pc, #376]	@ (80052bc <HAL_RCC_OscConfig+0x33c>)
 8005144:	4013      	ands	r3, r2
 8005146:	0019      	movs	r1, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	4b57      	ldr	r3, [pc, #348]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 800514e:	430a      	orrs	r2, r1
 8005150:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005152:	4b56      	ldr	r3, [pc, #344]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	4b55      	ldr	r3, [pc, #340]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005158:	2180      	movs	r1, #128	@ 0x80
 800515a:	0049      	lsls	r1, r1, #1
 800515c:	430a      	orrs	r2, r1
 800515e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005160:	f7fe fb12 	bl	8003788 <HAL_GetTick>
 8005164:	0003      	movs	r3, r0
 8005166:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005168:	e008      	b.n	800517c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800516a:	f7fe fb0d 	bl	8003788 <HAL_GetTick>
 800516e:	0002      	movs	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e209      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800517c:	4b4b      	ldr	r3, [pc, #300]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	2380      	movs	r3, #128	@ 0x80
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	4013      	ands	r3, r2
 8005186:	d0f0      	beq.n	800516a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005188:	4b48      	ldr	r3, [pc, #288]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	4a4a      	ldr	r2, [pc, #296]	@ (80052b8 <HAL_RCC_OscConfig+0x338>)
 800518e:	4013      	ands	r3, r2
 8005190:	0019      	movs	r1, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	021a      	lsls	r2, r3, #8
 8005198:	4b44      	ldr	r3, [pc, #272]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
 800519e:	e01b      	b.n	80051d8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80051a0:	4b42      	ldr	r3, [pc, #264]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	4b41      	ldr	r3, [pc, #260]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 80051a6:	4949      	ldr	r1, [pc, #292]	@ (80052cc <HAL_RCC_OscConfig+0x34c>)
 80051a8:	400a      	ands	r2, r1
 80051aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ac:	f7fe faec 	bl	8003788 <HAL_GetTick>
 80051b0:	0003      	movs	r3, r0
 80051b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b6:	f7fe fae7 	bl	8003788 <HAL_GetTick>
 80051ba:	0002      	movs	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e1e3      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051c8:	4b38      	ldr	r3, [pc, #224]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	2380      	movs	r3, #128	@ 0x80
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	4013      	ands	r3, r2
 80051d2:	d1f0      	bne.n	80051b6 <HAL_RCC_OscConfig+0x236>
 80051d4:	e000      	b.n	80051d8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051d6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2208      	movs	r2, #8
 80051de:	4013      	ands	r3, r2
 80051e0:	d047      	beq.n	8005272 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80051e2:	4b32      	ldr	r3, [pc, #200]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2238      	movs	r2, #56	@ 0x38
 80051e8:	4013      	ands	r3, r2
 80051ea:	2b18      	cmp	r3, #24
 80051ec:	d10a      	bne.n	8005204 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80051ee:	4b2f      	ldr	r3, [pc, #188]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 80051f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051f2:	2202      	movs	r2, #2
 80051f4:	4013      	ands	r3, r2
 80051f6:	d03c      	beq.n	8005272 <HAL_RCC_OscConfig+0x2f2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d138      	bne.n	8005272 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e1c5      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d019      	beq.n	8005240 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800520c:	4b27      	ldr	r3, [pc, #156]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 800520e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005210:	4b26      	ldr	r3, [pc, #152]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005212:	2101      	movs	r1, #1
 8005214:	430a      	orrs	r2, r1
 8005216:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005218:	f7fe fab6 	bl	8003788 <HAL_GetTick>
 800521c:	0003      	movs	r3, r0
 800521e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005222:	f7fe fab1 	bl	8003788 <HAL_GetTick>
 8005226:	0002      	movs	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e1ad      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005234:	4b1d      	ldr	r3, [pc, #116]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005238:	2202      	movs	r2, #2
 800523a:	4013      	ands	r3, r2
 800523c:	d0f1      	beq.n	8005222 <HAL_RCC_OscConfig+0x2a2>
 800523e:	e018      	b.n	8005272 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005240:	4b1a      	ldr	r3, [pc, #104]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005242:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005244:	4b19      	ldr	r3, [pc, #100]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005246:	2101      	movs	r1, #1
 8005248:	438a      	bics	r2, r1
 800524a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524c:	f7fe fa9c 	bl	8003788 <HAL_GetTick>
 8005250:	0003      	movs	r3, r0
 8005252:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005254:	e008      	b.n	8005268 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005256:	f7fe fa97 	bl	8003788 <HAL_GetTick>
 800525a:	0002      	movs	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e193      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005268:	4b10      	ldr	r3, [pc, #64]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 800526a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800526c:	2202      	movs	r2, #2
 800526e:	4013      	ands	r3, r2
 8005270:	d1f1      	bne.n	8005256 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2204      	movs	r2, #4
 8005278:	4013      	ands	r3, r2
 800527a:	d100      	bne.n	800527e <HAL_RCC_OscConfig+0x2fe>
 800527c:	e0c6      	b.n	800540c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800527e:	231f      	movs	r3, #31
 8005280:	18fb      	adds	r3, r7, r3
 8005282:	2200      	movs	r2, #0
 8005284:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005286:	4b09      	ldr	r3, [pc, #36]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2238      	movs	r2, #56	@ 0x38
 800528c:	4013      	ands	r3, r2
 800528e:	2b20      	cmp	r3, #32
 8005290:	d11e      	bne.n	80052d0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005292:	4b06      	ldr	r3, [pc, #24]	@ (80052ac <HAL_RCC_OscConfig+0x32c>)
 8005294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005296:	2202      	movs	r2, #2
 8005298:	4013      	ands	r3, r2
 800529a:	d100      	bne.n	800529e <HAL_RCC_OscConfig+0x31e>
 800529c:	e0b6      	b.n	800540c <HAL_RCC_OscConfig+0x48c>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d000      	beq.n	80052a8 <HAL_RCC_OscConfig+0x328>
 80052a6:	e0b1      	b.n	800540c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e171      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
 80052ac:	40021000 	.word	0x40021000
 80052b0:	fffeffff 	.word	0xfffeffff
 80052b4:	fffbffff 	.word	0xfffbffff
 80052b8:	ffff80ff 	.word	0xffff80ff
 80052bc:	ffffc7ff 	.word	0xffffc7ff
 80052c0:	00f42400 	.word	0x00f42400
 80052c4:	20000090 	.word	0x20000090
 80052c8:	20000094 	.word	0x20000094
 80052cc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052d0:	4bb1      	ldr	r3, [pc, #708]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 80052d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052d4:	2380      	movs	r3, #128	@ 0x80
 80052d6:	055b      	lsls	r3, r3, #21
 80052d8:	4013      	ands	r3, r2
 80052da:	d101      	bne.n	80052e0 <HAL_RCC_OscConfig+0x360>
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <HAL_RCC_OscConfig+0x362>
 80052e0:	2300      	movs	r3, #0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d011      	beq.n	800530a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80052e6:	4bac      	ldr	r3, [pc, #688]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 80052e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052ea:	4bab      	ldr	r3, [pc, #684]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 80052ec:	2180      	movs	r1, #128	@ 0x80
 80052ee:	0549      	lsls	r1, r1, #21
 80052f0:	430a      	orrs	r2, r1
 80052f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80052f4:	4ba8      	ldr	r3, [pc, #672]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 80052f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052f8:	2380      	movs	r3, #128	@ 0x80
 80052fa:	055b      	lsls	r3, r3, #21
 80052fc:	4013      	ands	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005302:	231f      	movs	r3, #31
 8005304:	18fb      	adds	r3, r7, r3
 8005306:	2201      	movs	r2, #1
 8005308:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800530a:	4ba4      	ldr	r3, [pc, #656]	@ (800559c <HAL_RCC_OscConfig+0x61c>)
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	2380      	movs	r3, #128	@ 0x80
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	4013      	ands	r3, r2
 8005314:	d11a      	bne.n	800534c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005316:	4ba1      	ldr	r3, [pc, #644]	@ (800559c <HAL_RCC_OscConfig+0x61c>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	4ba0      	ldr	r3, [pc, #640]	@ (800559c <HAL_RCC_OscConfig+0x61c>)
 800531c:	2180      	movs	r1, #128	@ 0x80
 800531e:	0049      	lsls	r1, r1, #1
 8005320:	430a      	orrs	r2, r1
 8005322:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005324:	f7fe fa30 	bl	8003788 <HAL_GetTick>
 8005328:	0003      	movs	r3, r0
 800532a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800532e:	f7fe fa2b 	bl	8003788 <HAL_GetTick>
 8005332:	0002      	movs	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e127      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005340:	4b96      	ldr	r3, [pc, #600]	@ (800559c <HAL_RCC_OscConfig+0x61c>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	2380      	movs	r3, #128	@ 0x80
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	4013      	ands	r3, r2
 800534a:	d0f0      	beq.n	800532e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d106      	bne.n	8005362 <HAL_RCC_OscConfig+0x3e2>
 8005354:	4b90      	ldr	r3, [pc, #576]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 8005356:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005358:	4b8f      	ldr	r3, [pc, #572]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 800535a:	2101      	movs	r1, #1
 800535c:	430a      	orrs	r2, r1
 800535e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005360:	e01c      	b.n	800539c <HAL_RCC_OscConfig+0x41c>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	2b05      	cmp	r3, #5
 8005368:	d10c      	bne.n	8005384 <HAL_RCC_OscConfig+0x404>
 800536a:	4b8b      	ldr	r3, [pc, #556]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 800536c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800536e:	4b8a      	ldr	r3, [pc, #552]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 8005370:	2104      	movs	r1, #4
 8005372:	430a      	orrs	r2, r1
 8005374:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005376:	4b88      	ldr	r3, [pc, #544]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 8005378:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800537a:	4b87      	ldr	r3, [pc, #540]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 800537c:	2101      	movs	r1, #1
 800537e:	430a      	orrs	r2, r1
 8005380:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005382:	e00b      	b.n	800539c <HAL_RCC_OscConfig+0x41c>
 8005384:	4b84      	ldr	r3, [pc, #528]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 8005386:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005388:	4b83      	ldr	r3, [pc, #524]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 800538a:	2101      	movs	r1, #1
 800538c:	438a      	bics	r2, r1
 800538e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005390:	4b81      	ldr	r3, [pc, #516]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 8005392:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005394:	4b80      	ldr	r3, [pc, #512]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 8005396:	2104      	movs	r1, #4
 8005398:	438a      	bics	r2, r1
 800539a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d014      	beq.n	80053ce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a4:	f7fe f9f0 	bl	8003788 <HAL_GetTick>
 80053a8:	0003      	movs	r3, r0
 80053aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ac:	e009      	b.n	80053c2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ae:	f7fe f9eb 	bl	8003788 <HAL_GetTick>
 80053b2:	0002      	movs	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	4a79      	ldr	r2, [pc, #484]	@ (80055a0 <HAL_RCC_OscConfig+0x620>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e0e6      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053c2:	4b75      	ldr	r3, [pc, #468]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 80053c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c6:	2202      	movs	r2, #2
 80053c8:	4013      	ands	r3, r2
 80053ca:	d0f0      	beq.n	80053ae <HAL_RCC_OscConfig+0x42e>
 80053cc:	e013      	b.n	80053f6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ce:	f7fe f9db 	bl	8003788 <HAL_GetTick>
 80053d2:	0003      	movs	r3, r0
 80053d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053d6:	e009      	b.n	80053ec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d8:	f7fe f9d6 	bl	8003788 <HAL_GetTick>
 80053dc:	0002      	movs	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	4a6f      	ldr	r2, [pc, #444]	@ (80055a0 <HAL_RCC_OscConfig+0x620>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e0d1      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053ec:	4b6a      	ldr	r3, [pc, #424]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 80053ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f0:	2202      	movs	r2, #2
 80053f2:	4013      	ands	r3, r2
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80053f6:	231f      	movs	r3, #31
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d105      	bne.n	800540c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005400:	4b65      	ldr	r3, [pc, #404]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 8005402:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005404:	4b64      	ldr	r3, [pc, #400]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 8005406:	4967      	ldr	r1, [pc, #412]	@ (80055a4 <HAL_RCC_OscConfig+0x624>)
 8005408:	400a      	ands	r2, r1
 800540a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d100      	bne.n	8005416 <HAL_RCC_OscConfig+0x496>
 8005414:	e0bb      	b.n	800558e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005416:	4b60      	ldr	r3, [pc, #384]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2238      	movs	r2, #56	@ 0x38
 800541c:	4013      	ands	r3, r2
 800541e:	2b10      	cmp	r3, #16
 8005420:	d100      	bne.n	8005424 <HAL_RCC_OscConfig+0x4a4>
 8005422:	e07b      	b.n	800551c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	2b02      	cmp	r3, #2
 800542a:	d156      	bne.n	80054da <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800542c:	4b5a      	ldr	r3, [pc, #360]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	4b59      	ldr	r3, [pc, #356]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 8005432:	495d      	ldr	r1, [pc, #372]	@ (80055a8 <HAL_RCC_OscConfig+0x628>)
 8005434:	400a      	ands	r2, r1
 8005436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005438:	f7fe f9a6 	bl	8003788 <HAL_GetTick>
 800543c:	0003      	movs	r3, r0
 800543e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005442:	f7fe f9a1 	bl	8003788 <HAL_GetTick>
 8005446:	0002      	movs	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e09d      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005454:	4b50      	ldr	r3, [pc, #320]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	2380      	movs	r3, #128	@ 0x80
 800545a:	049b      	lsls	r3, r3, #18
 800545c:	4013      	ands	r3, r2
 800545e:	d1f0      	bne.n	8005442 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005460:	4b4d      	ldr	r3, [pc, #308]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	4a51      	ldr	r2, [pc, #324]	@ (80055ac <HAL_RCC_OscConfig+0x62c>)
 8005466:	4013      	ands	r3, r2
 8005468:	0019      	movs	r1, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1a      	ldr	r2, [r3, #32]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800548c:	431a      	orrs	r2, r3
 800548e:	4b42      	ldr	r3, [pc, #264]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 8005490:	430a      	orrs	r2, r1
 8005492:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005494:	4b40      	ldr	r3, [pc, #256]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	4b3f      	ldr	r3, [pc, #252]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 800549a:	2180      	movs	r1, #128	@ 0x80
 800549c:	0449      	lsls	r1, r1, #17
 800549e:	430a      	orrs	r2, r1
 80054a0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80054a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	4b3c      	ldr	r3, [pc, #240]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 80054a8:	2180      	movs	r1, #128	@ 0x80
 80054aa:	0549      	lsls	r1, r1, #21
 80054ac:	430a      	orrs	r2, r1
 80054ae:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b0:	f7fe f96a 	bl	8003788 <HAL_GetTick>
 80054b4:	0003      	movs	r3, r0
 80054b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ba:	f7fe f965 	bl	8003788 <HAL_GetTick>
 80054be:	0002      	movs	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e061      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054cc:	4b32      	ldr	r3, [pc, #200]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	2380      	movs	r3, #128	@ 0x80
 80054d2:	049b      	lsls	r3, r3, #18
 80054d4:	4013      	ands	r3, r2
 80054d6:	d0f0      	beq.n	80054ba <HAL_RCC_OscConfig+0x53a>
 80054d8:	e059      	b.n	800558e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054da:	4b2f      	ldr	r3, [pc, #188]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4b2e      	ldr	r3, [pc, #184]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 80054e0:	4931      	ldr	r1, [pc, #196]	@ (80055a8 <HAL_RCC_OscConfig+0x628>)
 80054e2:	400a      	ands	r2, r1
 80054e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e6:	f7fe f94f 	bl	8003788 <HAL_GetTick>
 80054ea:	0003      	movs	r3, r0
 80054ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f0:	f7fe f94a 	bl	8003788 <HAL_GetTick>
 80054f4:	0002      	movs	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e046      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005502:	4b25      	ldr	r3, [pc, #148]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	2380      	movs	r3, #128	@ 0x80
 8005508:	049b      	lsls	r3, r3, #18
 800550a:	4013      	ands	r3, r2
 800550c:	d1f0      	bne.n	80054f0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800550e:	4b22      	ldr	r3, [pc, #136]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	4b21      	ldr	r3, [pc, #132]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 8005514:	4926      	ldr	r1, [pc, #152]	@ (80055b0 <HAL_RCC_OscConfig+0x630>)
 8005516:	400a      	ands	r2, r1
 8005518:	60da      	str	r2, [r3, #12]
 800551a:	e038      	b.n	800558e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e033      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005528:	4b1b      	ldr	r3, [pc, #108]	@ (8005598 <HAL_RCC_OscConfig+0x618>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2203      	movs	r2, #3
 8005532:	401a      	ands	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	429a      	cmp	r2, r3
 800553a:	d126      	bne.n	800558a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	2270      	movs	r2, #112	@ 0x70
 8005540:	401a      	ands	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005546:	429a      	cmp	r2, r3
 8005548:	d11f      	bne.n	800558a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	23fe      	movs	r3, #254	@ 0xfe
 800554e:	01db      	lsls	r3, r3, #7
 8005550:	401a      	ands	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005556:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005558:	429a      	cmp	r2, r3
 800555a:	d116      	bne.n	800558a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	23f8      	movs	r3, #248	@ 0xf8
 8005560:	039b      	lsls	r3, r3, #14
 8005562:	401a      	ands	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005568:	429a      	cmp	r2, r3
 800556a:	d10e      	bne.n	800558a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	23e0      	movs	r3, #224	@ 0xe0
 8005570:	051b      	lsls	r3, r3, #20
 8005572:	401a      	ands	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005578:	429a      	cmp	r2, r3
 800557a:	d106      	bne.n	800558a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	0f5b      	lsrs	r3, r3, #29
 8005580:	075a      	lsls	r2, r3, #29
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005586:	429a      	cmp	r2, r3
 8005588:	d001      	beq.n	800558e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	0018      	movs	r0, r3
 8005592:	46bd      	mov	sp, r7
 8005594:	b008      	add	sp, #32
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40021000 	.word	0x40021000
 800559c:	40007000 	.word	0x40007000
 80055a0:	00001388 	.word	0x00001388
 80055a4:	efffffff 	.word	0xefffffff
 80055a8:	feffffff 	.word	0xfeffffff
 80055ac:	11c1808c 	.word	0x11c1808c
 80055b0:	eefefffc 	.word	0xeefefffc

080055b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e0e9      	b.n	800579c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055c8:	4b76      	ldr	r3, [pc, #472]	@ (80057a4 <HAL_RCC_ClockConfig+0x1f0>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2207      	movs	r2, #7
 80055ce:	4013      	ands	r3, r2
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d91e      	bls.n	8005614 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055d6:	4b73      	ldr	r3, [pc, #460]	@ (80057a4 <HAL_RCC_ClockConfig+0x1f0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2207      	movs	r2, #7
 80055dc:	4393      	bics	r3, r2
 80055de:	0019      	movs	r1, r3
 80055e0:	4b70      	ldr	r3, [pc, #448]	@ (80057a4 <HAL_RCC_ClockConfig+0x1f0>)
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055e8:	f7fe f8ce 	bl	8003788 <HAL_GetTick>
 80055ec:	0003      	movs	r3, r0
 80055ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80055f0:	e009      	b.n	8005606 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055f2:	f7fe f8c9 	bl	8003788 <HAL_GetTick>
 80055f6:	0002      	movs	r2, r0
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	4a6a      	ldr	r2, [pc, #424]	@ (80057a8 <HAL_RCC_ClockConfig+0x1f4>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e0ca      	b.n	800579c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005606:	4b67      	ldr	r3, [pc, #412]	@ (80057a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2207      	movs	r2, #7
 800560c:	4013      	ands	r3, r2
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d1ee      	bne.n	80055f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2202      	movs	r2, #2
 800561a:	4013      	ands	r3, r2
 800561c:	d015      	beq.n	800564a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2204      	movs	r2, #4
 8005624:	4013      	ands	r3, r2
 8005626:	d006      	beq.n	8005636 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005628:	4b60      	ldr	r3, [pc, #384]	@ (80057ac <HAL_RCC_ClockConfig+0x1f8>)
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	4b5f      	ldr	r3, [pc, #380]	@ (80057ac <HAL_RCC_ClockConfig+0x1f8>)
 800562e:	21e0      	movs	r1, #224	@ 0xe0
 8005630:	01c9      	lsls	r1, r1, #7
 8005632:	430a      	orrs	r2, r1
 8005634:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005636:	4b5d      	ldr	r3, [pc, #372]	@ (80057ac <HAL_RCC_ClockConfig+0x1f8>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	4a5d      	ldr	r2, [pc, #372]	@ (80057b0 <HAL_RCC_ClockConfig+0x1fc>)
 800563c:	4013      	ands	r3, r2
 800563e:	0019      	movs	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	4b59      	ldr	r3, [pc, #356]	@ (80057ac <HAL_RCC_ClockConfig+0x1f8>)
 8005646:	430a      	orrs	r2, r1
 8005648:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2201      	movs	r2, #1
 8005650:	4013      	ands	r3, r2
 8005652:	d057      	beq.n	8005704 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d107      	bne.n	800566c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800565c:	4b53      	ldr	r3, [pc, #332]	@ (80057ac <HAL_RCC_ClockConfig+0x1f8>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	2380      	movs	r3, #128	@ 0x80
 8005662:	029b      	lsls	r3, r3, #10
 8005664:	4013      	ands	r3, r2
 8005666:	d12b      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e097      	b.n	800579c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d107      	bne.n	8005684 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005674:	4b4d      	ldr	r3, [pc, #308]	@ (80057ac <HAL_RCC_ClockConfig+0x1f8>)
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	2380      	movs	r3, #128	@ 0x80
 800567a:	049b      	lsls	r3, r3, #18
 800567c:	4013      	ands	r3, r2
 800567e:	d11f      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e08b      	b.n	800579c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d107      	bne.n	800569c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800568c:	4b47      	ldr	r3, [pc, #284]	@ (80057ac <HAL_RCC_ClockConfig+0x1f8>)
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	2380      	movs	r3, #128	@ 0x80
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	4013      	ands	r3, r2
 8005696:	d113      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e07f      	b.n	800579c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d106      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056a4:	4b41      	ldr	r3, [pc, #260]	@ (80057ac <HAL_RCC_ClockConfig+0x1f8>)
 80056a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056a8:	2202      	movs	r2, #2
 80056aa:	4013      	ands	r3, r2
 80056ac:	d108      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e074      	b.n	800579c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056b2:	4b3e      	ldr	r3, [pc, #248]	@ (80057ac <HAL_RCC_ClockConfig+0x1f8>)
 80056b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056b6:	2202      	movs	r2, #2
 80056b8:	4013      	ands	r3, r2
 80056ba:	d101      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e06d      	b.n	800579c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056c0:	4b3a      	ldr	r3, [pc, #232]	@ (80057ac <HAL_RCC_ClockConfig+0x1f8>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	2207      	movs	r2, #7
 80056c6:	4393      	bics	r3, r2
 80056c8:	0019      	movs	r1, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	4b37      	ldr	r3, [pc, #220]	@ (80057ac <HAL_RCC_ClockConfig+0x1f8>)
 80056d0:	430a      	orrs	r2, r1
 80056d2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d4:	f7fe f858 	bl	8003788 <HAL_GetTick>
 80056d8:	0003      	movs	r3, r0
 80056da:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056dc:	e009      	b.n	80056f2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056de:	f7fe f853 	bl	8003788 <HAL_GetTick>
 80056e2:	0002      	movs	r2, r0
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	4a2f      	ldr	r2, [pc, #188]	@ (80057a8 <HAL_RCC_ClockConfig+0x1f4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e054      	b.n	800579c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056f2:	4b2e      	ldr	r3, [pc, #184]	@ (80057ac <HAL_RCC_ClockConfig+0x1f8>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	2238      	movs	r2, #56	@ 0x38
 80056f8:	401a      	ands	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	429a      	cmp	r2, r3
 8005702:	d1ec      	bne.n	80056de <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005704:	4b27      	ldr	r3, [pc, #156]	@ (80057a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2207      	movs	r2, #7
 800570a:	4013      	ands	r3, r2
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d21e      	bcs.n	8005750 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005712:	4b24      	ldr	r3, [pc, #144]	@ (80057a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2207      	movs	r2, #7
 8005718:	4393      	bics	r3, r2
 800571a:	0019      	movs	r1, r3
 800571c:	4b21      	ldr	r3, [pc, #132]	@ (80057a4 <HAL_RCC_ClockConfig+0x1f0>)
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005724:	f7fe f830 	bl	8003788 <HAL_GetTick>
 8005728:	0003      	movs	r3, r0
 800572a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800572c:	e009      	b.n	8005742 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800572e:	f7fe f82b 	bl	8003788 <HAL_GetTick>
 8005732:	0002      	movs	r2, r0
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	4a1b      	ldr	r2, [pc, #108]	@ (80057a8 <HAL_RCC_ClockConfig+0x1f4>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e02c      	b.n	800579c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005742:	4b18      	ldr	r3, [pc, #96]	@ (80057a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2207      	movs	r2, #7
 8005748:	4013      	ands	r3, r2
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d1ee      	bne.n	800572e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2204      	movs	r2, #4
 8005756:	4013      	ands	r3, r2
 8005758:	d009      	beq.n	800576e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800575a:	4b14      	ldr	r3, [pc, #80]	@ (80057ac <HAL_RCC_ClockConfig+0x1f8>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	4a15      	ldr	r2, [pc, #84]	@ (80057b4 <HAL_RCC_ClockConfig+0x200>)
 8005760:	4013      	ands	r3, r2
 8005762:	0019      	movs	r1, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	4b10      	ldr	r3, [pc, #64]	@ (80057ac <HAL_RCC_ClockConfig+0x1f8>)
 800576a:	430a      	orrs	r2, r1
 800576c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800576e:	f000 f829 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 8005772:	0001      	movs	r1, r0
 8005774:	4b0d      	ldr	r3, [pc, #52]	@ (80057ac <HAL_RCC_ClockConfig+0x1f8>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	0a1b      	lsrs	r3, r3, #8
 800577a:	220f      	movs	r2, #15
 800577c:	401a      	ands	r2, r3
 800577e:	4b0e      	ldr	r3, [pc, #56]	@ (80057b8 <HAL_RCC_ClockConfig+0x204>)
 8005780:	0092      	lsls	r2, r2, #2
 8005782:	58d3      	ldr	r3, [r2, r3]
 8005784:	221f      	movs	r2, #31
 8005786:	4013      	ands	r3, r2
 8005788:	000a      	movs	r2, r1
 800578a:	40da      	lsrs	r2, r3
 800578c:	4b0b      	ldr	r3, [pc, #44]	@ (80057bc <HAL_RCC_ClockConfig+0x208>)
 800578e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005790:	4b0b      	ldr	r3, [pc, #44]	@ (80057c0 <HAL_RCC_ClockConfig+0x20c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	0018      	movs	r0, r3
 8005796:	f7fd ff9b 	bl	80036d0 <HAL_InitTick>
 800579a:	0003      	movs	r3, r0
}
 800579c:	0018      	movs	r0, r3
 800579e:	46bd      	mov	sp, r7
 80057a0:	b004      	add	sp, #16
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40022000 	.word	0x40022000
 80057a8:	00001388 	.word	0x00001388
 80057ac:	40021000 	.word	0x40021000
 80057b0:	fffff0ff 	.word	0xfffff0ff
 80057b4:	ffff8fff 	.word	0xffff8fff
 80057b8:	08008e20 	.word	0x08008e20
 80057bc:	20000090 	.word	0x20000090
 80057c0:	20000094 	.word	0x20000094

080057c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057ca:	4b3c      	ldr	r3, [pc, #240]	@ (80058bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2238      	movs	r2, #56	@ 0x38
 80057d0:	4013      	ands	r3, r2
 80057d2:	d10f      	bne.n	80057f4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80057d4:	4b39      	ldr	r3, [pc, #228]	@ (80058bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	0adb      	lsrs	r3, r3, #11
 80057da:	2207      	movs	r2, #7
 80057dc:	4013      	ands	r3, r2
 80057de:	2201      	movs	r2, #1
 80057e0:	409a      	lsls	r2, r3
 80057e2:	0013      	movs	r3, r2
 80057e4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	4835      	ldr	r0, [pc, #212]	@ (80058c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80057ea:	f7fa fc8b 	bl	8000104 <__udivsi3>
 80057ee:	0003      	movs	r3, r0
 80057f0:	613b      	str	r3, [r7, #16]
 80057f2:	e05d      	b.n	80058b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057f4:	4b31      	ldr	r3, [pc, #196]	@ (80058bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	2238      	movs	r2, #56	@ 0x38
 80057fa:	4013      	ands	r3, r2
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d102      	bne.n	8005806 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005800:	4b2f      	ldr	r3, [pc, #188]	@ (80058c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	e054      	b.n	80058b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005806:	4b2d      	ldr	r3, [pc, #180]	@ (80058bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	2238      	movs	r2, #56	@ 0x38
 800580c:	4013      	ands	r3, r2
 800580e:	2b10      	cmp	r3, #16
 8005810:	d138      	bne.n	8005884 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005812:	4b2a      	ldr	r3, [pc, #168]	@ (80058bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	2203      	movs	r2, #3
 8005818:	4013      	ands	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800581c:	4b27      	ldr	r3, [pc, #156]	@ (80058bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	091b      	lsrs	r3, r3, #4
 8005822:	2207      	movs	r2, #7
 8005824:	4013      	ands	r3, r2
 8005826:	3301      	adds	r3, #1
 8005828:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b03      	cmp	r3, #3
 800582e:	d10d      	bne.n	800584c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	4823      	ldr	r0, [pc, #140]	@ (80058c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005834:	f7fa fc66 	bl	8000104 <__udivsi3>
 8005838:	0003      	movs	r3, r0
 800583a:	0019      	movs	r1, r3
 800583c:	4b1f      	ldr	r3, [pc, #124]	@ (80058bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	0a1b      	lsrs	r3, r3, #8
 8005842:	227f      	movs	r2, #127	@ 0x7f
 8005844:	4013      	ands	r3, r2
 8005846:	434b      	muls	r3, r1
 8005848:	617b      	str	r3, [r7, #20]
        break;
 800584a:	e00d      	b.n	8005868 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	481c      	ldr	r0, [pc, #112]	@ (80058c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005850:	f7fa fc58 	bl	8000104 <__udivsi3>
 8005854:	0003      	movs	r3, r0
 8005856:	0019      	movs	r1, r3
 8005858:	4b18      	ldr	r3, [pc, #96]	@ (80058bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	0a1b      	lsrs	r3, r3, #8
 800585e:	227f      	movs	r2, #127	@ 0x7f
 8005860:	4013      	ands	r3, r2
 8005862:	434b      	muls	r3, r1
 8005864:	617b      	str	r3, [r7, #20]
        break;
 8005866:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005868:	4b14      	ldr	r3, [pc, #80]	@ (80058bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	0f5b      	lsrs	r3, r3, #29
 800586e:	2207      	movs	r2, #7
 8005870:	4013      	ands	r3, r2
 8005872:	3301      	adds	r3, #1
 8005874:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	6978      	ldr	r0, [r7, #20]
 800587a:	f7fa fc43 	bl	8000104 <__udivsi3>
 800587e:	0003      	movs	r3, r0
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	e015      	b.n	80058b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005884:	4b0d      	ldr	r3, [pc, #52]	@ (80058bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2238      	movs	r2, #56	@ 0x38
 800588a:	4013      	ands	r3, r2
 800588c:	2b20      	cmp	r3, #32
 800588e:	d103      	bne.n	8005898 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005890:	2380      	movs	r3, #128	@ 0x80
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	e00b      	b.n	80058b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005898:	4b08      	ldr	r3, [pc, #32]	@ (80058bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2238      	movs	r2, #56	@ 0x38
 800589e:	4013      	ands	r3, r2
 80058a0:	2b18      	cmp	r3, #24
 80058a2:	d103      	bne.n	80058ac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80058a4:	23fa      	movs	r3, #250	@ 0xfa
 80058a6:	01db      	lsls	r3, r3, #7
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	e001      	b.n	80058b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80058b0:	693b      	ldr	r3, [r7, #16]
}
 80058b2:	0018      	movs	r0, r3
 80058b4:	46bd      	mov	sp, r7
 80058b6:	b006      	add	sp, #24
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	46c0      	nop			@ (mov r8, r8)
 80058bc:	40021000 	.word	0x40021000
 80058c0:	00f42400 	.word	0x00f42400

080058c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058c8:	4b02      	ldr	r3, [pc, #8]	@ (80058d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80058ca:	681b      	ldr	r3, [r3, #0]
}
 80058cc:	0018      	movs	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	46c0      	nop			@ (mov r8, r8)
 80058d4:	20000090 	.word	0x20000090

080058d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058d8:	b5b0      	push	{r4, r5, r7, lr}
 80058da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80058dc:	f7ff fff2 	bl	80058c4 <HAL_RCC_GetHCLKFreq>
 80058e0:	0004      	movs	r4, r0
 80058e2:	f7ff fb41 	bl	8004f68 <LL_RCC_GetAPB1Prescaler>
 80058e6:	0003      	movs	r3, r0
 80058e8:	0b1a      	lsrs	r2, r3, #12
 80058ea:	4b05      	ldr	r3, [pc, #20]	@ (8005900 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058ec:	0092      	lsls	r2, r2, #2
 80058ee:	58d3      	ldr	r3, [r2, r3]
 80058f0:	221f      	movs	r2, #31
 80058f2:	4013      	ands	r3, r2
 80058f4:	40dc      	lsrs	r4, r3
 80058f6:	0023      	movs	r3, r4
}
 80058f8:	0018      	movs	r0, r3
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bdb0      	pop	{r4, r5, r7, pc}
 80058fe:	46c0      	nop			@ (mov r8, r8)
 8005900:	08008e60 	.word	0x08008e60

08005904 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800590c:	2313      	movs	r3, #19
 800590e:	18fb      	adds	r3, r7, r3
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005914:	2312      	movs	r3, #18
 8005916:	18fb      	adds	r3, r7, r3
 8005918:	2200      	movs	r2, #0
 800591a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	2380      	movs	r3, #128	@ 0x80
 8005922:	029b      	lsls	r3, r3, #10
 8005924:	4013      	ands	r3, r2
 8005926:	d100      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005928:	e0a3      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800592a:	2011      	movs	r0, #17
 800592c:	183b      	adds	r3, r7, r0
 800592e:	2200      	movs	r2, #0
 8005930:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005932:	4ba5      	ldr	r3, [pc, #660]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005934:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005936:	2380      	movs	r3, #128	@ 0x80
 8005938:	055b      	lsls	r3, r3, #21
 800593a:	4013      	ands	r3, r2
 800593c:	d110      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800593e:	4ba2      	ldr	r3, [pc, #648]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005940:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005942:	4ba1      	ldr	r3, [pc, #644]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005944:	2180      	movs	r1, #128	@ 0x80
 8005946:	0549      	lsls	r1, r1, #21
 8005948:	430a      	orrs	r2, r1
 800594a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800594c:	4b9e      	ldr	r3, [pc, #632]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800594e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005950:	2380      	movs	r3, #128	@ 0x80
 8005952:	055b      	lsls	r3, r3, #21
 8005954:	4013      	ands	r3, r2
 8005956:	60bb      	str	r3, [r7, #8]
 8005958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800595a:	183b      	adds	r3, r7, r0
 800595c:	2201      	movs	r2, #1
 800595e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005960:	4b9a      	ldr	r3, [pc, #616]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	4b99      	ldr	r3, [pc, #612]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005966:	2180      	movs	r1, #128	@ 0x80
 8005968:	0049      	lsls	r1, r1, #1
 800596a:	430a      	orrs	r2, r1
 800596c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800596e:	f7fd ff0b 	bl	8003788 <HAL_GetTick>
 8005972:	0003      	movs	r3, r0
 8005974:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005976:	e00b      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005978:	f7fd ff06 	bl	8003788 <HAL_GetTick>
 800597c:	0002      	movs	r2, r0
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d904      	bls.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005986:	2313      	movs	r3, #19
 8005988:	18fb      	adds	r3, r7, r3
 800598a:	2203      	movs	r2, #3
 800598c:	701a      	strb	r2, [r3, #0]
        break;
 800598e:	e005      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005990:	4b8e      	ldr	r3, [pc, #568]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	2380      	movs	r3, #128	@ 0x80
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	4013      	ands	r3, r2
 800599a:	d0ed      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800599c:	2313      	movs	r3, #19
 800599e:	18fb      	adds	r3, r7, r3
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d154      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059a6:	4b88      	ldr	r3, [pc, #544]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80059a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059aa:	23c0      	movs	r3, #192	@ 0xc0
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4013      	ands	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d019      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d014      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059c2:	4b81      	ldr	r3, [pc, #516]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80059c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059c6:	4a82      	ldr	r2, [pc, #520]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059cc:	4b7e      	ldr	r3, [pc, #504]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80059ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059d0:	4b7d      	ldr	r3, [pc, #500]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80059d2:	2180      	movs	r1, #128	@ 0x80
 80059d4:	0249      	lsls	r1, r1, #9
 80059d6:	430a      	orrs	r2, r1
 80059d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059da:	4b7b      	ldr	r3, [pc, #492]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80059dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059de:	4b7a      	ldr	r3, [pc, #488]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80059e0:	497c      	ldr	r1, [pc, #496]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80059e2:	400a      	ands	r2, r1
 80059e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059e6:	4b78      	ldr	r3, [pc, #480]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	2201      	movs	r2, #1
 80059f0:	4013      	ands	r3, r2
 80059f2:	d016      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f4:	f7fd fec8 	bl	8003788 <HAL_GetTick>
 80059f8:	0003      	movs	r3, r0
 80059fa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059fc:	e00c      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059fe:	f7fd fec3 	bl	8003788 <HAL_GetTick>
 8005a02:	0002      	movs	r2, r0
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	4a73      	ldr	r2, [pc, #460]	@ (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d904      	bls.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005a0e:	2313      	movs	r3, #19
 8005a10:	18fb      	adds	r3, r7, r3
 8005a12:	2203      	movs	r2, #3
 8005a14:	701a      	strb	r2, [r3, #0]
            break;
 8005a16:	e004      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a18:	4b6b      	ldr	r3, [pc, #428]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	4013      	ands	r3, r2
 8005a20:	d0ed      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005a22:	2313      	movs	r3, #19
 8005a24:	18fb      	adds	r3, r7, r3
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a2c:	4b66      	ldr	r3, [pc, #408]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a30:	4a67      	ldr	r2, [pc, #412]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	0019      	movs	r1, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a3a:	4b63      	ldr	r3, [pc, #396]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a40:	e00c      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a42:	2312      	movs	r3, #18
 8005a44:	18fb      	adds	r3, r7, r3
 8005a46:	2213      	movs	r2, #19
 8005a48:	18ba      	adds	r2, r7, r2
 8005a4a:	7812      	ldrb	r2, [r2, #0]
 8005a4c:	701a      	strb	r2, [r3, #0]
 8005a4e:	e005      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a50:	2312      	movs	r3, #18
 8005a52:	18fb      	adds	r3, r7, r3
 8005a54:	2213      	movs	r2, #19
 8005a56:	18ba      	adds	r2, r7, r2
 8005a58:	7812      	ldrb	r2, [r2, #0]
 8005a5a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a5c:	2311      	movs	r3, #17
 8005a5e:	18fb      	adds	r3, r7, r3
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d105      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a66:	4b58      	ldr	r3, [pc, #352]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005a68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a6a:	4b57      	ldr	r3, [pc, #348]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005a6c:	495b      	ldr	r1, [pc, #364]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a6e:	400a      	ands	r2, r1
 8005a70:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2201      	movs	r2, #1
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d009      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a7c:	4b52      	ldr	r3, [pc, #328]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a80:	2203      	movs	r2, #3
 8005a82:	4393      	bics	r3, r2
 8005a84:	0019      	movs	r1, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	4b4f      	ldr	r3, [pc, #316]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2210      	movs	r2, #16
 8005a96:	4013      	ands	r3, r2
 8005a98:	d009      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a9e:	4a50      	ldr	r2, [pc, #320]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	0019      	movs	r1, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	4b47      	ldr	r3, [pc, #284]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	2380      	movs	r3, #128	@ 0x80
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	d009      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005aba:	4b43      	ldr	r3, [pc, #268]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005abe:	4a49      	ldr	r2, [pc, #292]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	0019      	movs	r1, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	695a      	ldr	r2, [r3, #20]
 8005ac8:	4b3f      	ldr	r3, [pc, #252]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005aca:	430a      	orrs	r2, r1
 8005acc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	2380      	movs	r3, #128	@ 0x80
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	d009      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ada:	4b3b      	ldr	r3, [pc, #236]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ade:	4a42      	ldr	r2, [pc, #264]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	0019      	movs	r1, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	699a      	ldr	r2, [r3, #24]
 8005ae8:	4b37      	ldr	r3, [pc, #220]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005aea:	430a      	orrs	r2, r1
 8005aec:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2220      	movs	r2, #32
 8005af4:	4013      	ands	r3, r2
 8005af6:	d009      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005af8:	4b33      	ldr	r3, [pc, #204]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005afc:	4a3b      	ldr	r2, [pc, #236]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005afe:	4013      	ands	r3, r2
 8005b00:	0019      	movs	r1, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	4b30      	ldr	r3, [pc, #192]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	2380      	movs	r3, #128	@ 0x80
 8005b12:	01db      	lsls	r3, r3, #7
 8005b14:	4013      	ands	r3, r2
 8005b16:	d015      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b18:	4b2b      	ldr	r3, [pc, #172]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	0899      	lsrs	r1, r3, #2
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	4b28      	ldr	r3, [pc, #160]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b26:	430a      	orrs	r2, r1
 8005b28:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69da      	ldr	r2, [r3, #28]
 8005b2e:	2380      	movs	r3, #128	@ 0x80
 8005b30:	05db      	lsls	r3, r3, #23
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d106      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005b36:	4b24      	ldr	r3, [pc, #144]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	4b23      	ldr	r3, [pc, #140]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b3c:	2180      	movs	r1, #128	@ 0x80
 8005b3e:	0249      	lsls	r1, r1, #9
 8005b40:	430a      	orrs	r2, r1
 8005b42:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	2380      	movs	r3, #128	@ 0x80
 8005b4a:	039b      	lsls	r3, r3, #14
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d016      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005b50:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b54:	4a26      	ldr	r2, [pc, #152]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	0019      	movs	r1, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1a      	ldr	r2, [r3, #32]
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b60:	430a      	orrs	r2, r1
 8005b62:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1a      	ldr	r2, [r3, #32]
 8005b68:	2380      	movs	r3, #128	@ 0x80
 8005b6a:	03db      	lsls	r3, r3, #15
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d106      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b70:	4b15      	ldr	r3, [pc, #84]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	4b14      	ldr	r3, [pc, #80]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b76:	2180      	movs	r1, #128	@ 0x80
 8005b78:	0449      	lsls	r1, r1, #17
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	2380      	movs	r3, #128	@ 0x80
 8005b84:	011b      	lsls	r3, r3, #4
 8005b86:	4013      	ands	r3, r2
 8005b88:	d016      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8e:	4a19      	ldr	r2, [pc, #100]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	0019      	movs	r1, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691a      	ldr	r2, [r3, #16]
 8005ba2:	2380      	movs	r3, #128	@ 0x80
 8005ba4:	01db      	lsls	r3, r3, #7
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d106      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005baa:	4b07      	ldr	r3, [pc, #28]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	4b06      	ldr	r3, [pc, #24]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005bb0:	2180      	movs	r1, #128	@ 0x80
 8005bb2:	0249      	lsls	r1, r1, #9
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005bb8:	2312      	movs	r3, #18
 8005bba:	18fb      	adds	r3, r7, r3
 8005bbc:	781b      	ldrb	r3, [r3, #0]
}
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	b006      	add	sp, #24
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	46c0      	nop			@ (mov r8, r8)
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	40007000 	.word	0x40007000
 8005bd0:	fffffcff 	.word	0xfffffcff
 8005bd4:	fffeffff 	.word	0xfffeffff
 8005bd8:	00001388 	.word	0x00001388
 8005bdc:	efffffff 	.word	0xefffffff
 8005be0:	fffff3ff 	.word	0xfffff3ff
 8005be4:	fff3ffff 	.word	0xfff3ffff
 8005be8:	ffcfffff 	.word	0xffcfffff
 8005bec:	ffffcfff 	.word	0xffffcfff
 8005bf0:	ffbfffff 	.word	0xffbfffff
 8005bf4:	ffff3fff 	.word	0xffff3fff

08005bf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	2380      	movs	r3, #128	@ 0x80
 8005c08:	029b      	lsls	r3, r3, #10
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d136      	bne.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005c0e:	4bcd      	ldr	r3, [pc, #820]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c12:	23c0      	movs	r3, #192	@ 0xc0
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4013      	ands	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005c1a:	4bca      	ldr	r3, [pc, #808]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c1e:	2202      	movs	r2, #2
 8005c20:	4013      	ands	r3, r2
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d108      	bne.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	2380      	movs	r3, #128	@ 0x80
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d103      	bne.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8005c30:	2380      	movs	r3, #128	@ 0x80
 8005c32:	021b      	lsls	r3, r3, #8
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	e26b      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005c38:	4bc2      	ldr	r3, [pc, #776]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	4013      	ands	r3, r2
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d108      	bne.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	2380      	movs	r3, #128	@ 0x80
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d103      	bne.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8005c4e:	23fa      	movs	r3, #250	@ 0xfa
 8005c50:	01db      	lsls	r3, r3, #7
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	e25c      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005c56:	4bbb      	ldr	r3, [pc, #748]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	2380      	movs	r3, #128	@ 0x80
 8005c5c:	029b      	lsls	r3, r3, #10
 8005c5e:	401a      	ands	r2, r3
 8005c60:	2380      	movs	r3, #128	@ 0x80
 8005c62:	029b      	lsls	r3, r3, #10
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d000      	beq.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8005c68:	e252      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	23c0      	movs	r3, #192	@ 0xc0
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d000      	beq.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8005c74:	e24c      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    {
      frequency = HSE_VALUE / 32U;
 8005c76:	4bb4      	ldr	r3, [pc, #720]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	e249      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8005c7c:	4bb1      	ldr	r3, [pc, #708]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	2203      	movs	r2, #3
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d102      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8005c88:	4bb0      	ldr	r3, [pc, #704]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005c8a:	613b      	str	r3, [r7, #16]
 8005c8c:	e00a      	b.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8005c8e:	4bad      	ldr	r3, [pc, #692]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	2203      	movs	r2, #3
 8005c94:	4013      	ands	r3, r2
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d102      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8005c9a:	4bac      	ldr	r3, [pc, #688]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005c9c:	613b      	str	r3, [r7, #16]
 8005c9e:	e001      	b.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ca4:	4ba7      	ldr	r3, [pc, #668]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	091b      	lsrs	r3, r3, #4
 8005caa:	2207      	movs	r2, #7
 8005cac:	4013      	ands	r3, r2
 8005cae:	3301      	adds	r3, #1
 8005cb0:	0019      	movs	r1, r3
 8005cb2:	6938      	ldr	r0, [r7, #16]
 8005cb4:	f7fa fa26 	bl	8000104 <__udivsi3>
 8005cb8:	0003      	movs	r3, r0
 8005cba:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	2380      	movs	r3, #128	@ 0x80
 8005cc0:	039b      	lsls	r3, r3, #14
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d100      	bne.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8005cc6:	e1e3      	b.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	2380      	movs	r3, #128	@ 0x80
 8005ccc:	039b      	lsls	r3, r3, #14
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d900      	bls.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005cd2:	e20c      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	2380      	movs	r3, #128	@ 0x80
 8005cd8:	01db      	lsls	r3, r3, #7
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d100      	bne.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005cde:	e0a5      	b.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	2380      	movs	r3, #128	@ 0x80
 8005ce4:	01db      	lsls	r3, r3, #7
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d900      	bls.n	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005cea:	e200      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	2380      	movs	r3, #128	@ 0x80
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d100      	bne.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005cf6:	e0fc      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	2380      	movs	r3, #128	@ 0x80
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d900      	bls.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8005d02:	e1f4      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	2380      	movs	r3, #128	@ 0x80
 8005d08:	00db      	lsls	r3, r3, #3
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d100      	bne.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8005d0e:	e181      	b.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	2380      	movs	r3, #128	@ 0x80
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d900      	bls.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005d1a:	e1e8      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	2380      	movs	r3, #128	@ 0x80
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d100      	bne.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8005d26:	e135      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	2380      	movs	r3, #128	@ 0x80
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d900      	bls.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8005d32:	e1dc      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b20      	cmp	r3, #32
 8005d38:	d100      	bne.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8005d3a:	e0af      	b.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	d900      	bls.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8005d42:	e1d4      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d003      	beq.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b10      	cmp	r3, #16
 8005d4e:	d033      	beq.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8005d50:	e1cd      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005d52:	4b7c      	ldr	r3, [pc, #496]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d56:	2203      	movs	r2, #3
 8005d58:	4013      	ands	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d104      	bne.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x174>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d62:	f7ff fdb9 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 8005d66:	0003      	movs	r3, r0
 8005d68:	617b      	str	r3, [r7, #20]
        break;
 8005d6a:	e1c2      	b.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d104      	bne.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d72:	f7ff fd27 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 8005d76:	0003      	movs	r3, r0
 8005d78:	617b      	str	r3, [r7, #20]
        break;
 8005d7a:	e1ba      	b.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005d7c:	4b71      	ldr	r3, [pc, #452]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	2380      	movs	r3, #128	@ 0x80
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	401a      	ands	r2, r3
 8005d86:	2380      	movs	r3, #128	@ 0x80
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d105      	bne.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d102      	bne.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = HSI_VALUE;
 8005d94:	4b6d      	ldr	r3, [pc, #436]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005d96:	617b      	str	r3, [r7, #20]
        break;
 8005d98:	e1ab      	b.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d9e:	2202      	movs	r2, #2
 8005da0:	4013      	ands	r3, r2
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d000      	beq.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8005da6:	e1a4      	b.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d000      	beq.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8005dae:	e1a0      	b.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          frequency = LSE_VALUE;
 8005db0:	2380      	movs	r3, #128	@ 0x80
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	617b      	str	r3, [r7, #20]
        break;
 8005db6:	e19c      	b.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005db8:	4b62      	ldr	r3, [pc, #392]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005dba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dbc:	23c0      	movs	r3, #192	@ 0xc0
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d104      	bne.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005dca:	f7ff fd85 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 8005dce:	0003      	movs	r3, r0
 8005dd0:	617b      	str	r3, [r7, #20]
        break;
 8005dd2:	e190      	b.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	2380      	movs	r3, #128	@ 0x80
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d104      	bne.n	8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005dde:	f7ff fcf1 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 8005de2:	0003      	movs	r3, r0
 8005de4:	617b      	str	r3, [r7, #20]
        break;
 8005de6:	e186      	b.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005de8:	4b56      	ldr	r3, [pc, #344]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	2380      	movs	r3, #128	@ 0x80
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	401a      	ands	r2, r3
 8005df2:	2380      	movs	r3, #128	@ 0x80
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d107      	bne.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	2380      	movs	r3, #128	@ 0x80
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d102      	bne.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = HSI_VALUE;
 8005e04:	4b51      	ldr	r3, [pc, #324]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005e06:	617b      	str	r3, [r7, #20]
        break;
 8005e08:	e175      	b.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005e0a:	4b4e      	ldr	r3, [pc, #312]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e0e:	2202      	movs	r2, #2
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d000      	beq.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 8005e16:	e16e      	b.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	23c0      	movs	r3, #192	@ 0xc0
 8005e1c:	011b      	lsls	r3, r3, #4
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d000      	beq.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005e22:	e168      	b.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          frequency = LSE_VALUE;
 8005e24:	2380      	movs	r3, #128	@ 0x80
 8005e26:	021b      	lsls	r3, r3, #8
 8005e28:	617b      	str	r3, [r7, #20]
        break;
 8005e2a:	e164      	b.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005e2c:	4b45      	ldr	r3, [pc, #276]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e30:	0f9b      	lsrs	r3, r3, #30
 8005e32:	079b      	lsls	r3, r3, #30
 8005e34:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d104      	bne.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e3c:	f7ff fcc2 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 8005e40:	0003      	movs	r3, r0
 8005e42:	617b      	str	r3, [r7, #20]
        break;
 8005e44:	e159      	b.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	2380      	movs	r3, #128	@ 0x80
 8005e4a:	061b      	lsls	r3, r3, #24
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d102      	bne.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          frequency = HSI_VALUE;
 8005e50:	4b3e      	ldr	r3, [pc, #248]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005e52:	617b      	str	r3, [r7, #20]
        break;
 8005e54:	e151      	b.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	2380      	movs	r3, #128	@ 0x80
 8005e5a:	05db      	lsls	r3, r3, #23
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d000      	beq.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005e60:	e14b      	b.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005e62:	4b38      	ldr	r3, [pc, #224]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	2380      	movs	r3, #128	@ 0x80
 8005e68:	025b      	lsls	r3, r3, #9
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	d100      	bne.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 8005e6e:	e144      	b.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005e70:	4b34      	ldr	r3, [pc, #208]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	0a1b      	lsrs	r3, r3, #8
 8005e76:	227f      	movs	r2, #127	@ 0x7f
 8005e78:	4013      	ands	r3, r2
 8005e7a:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	435a      	muls	r2, r3
 8005e82:	4b30      	ldr	r3, [pc, #192]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	0c5b      	lsrs	r3, r3, #17
 8005e88:	211f      	movs	r1, #31
 8005e8a:	400b      	ands	r3, r1
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	0019      	movs	r1, r3
 8005e90:	0010      	movs	r0, r2
 8005e92:	f7fa f937 	bl	8000104 <__udivsi3>
 8005e96:	0003      	movs	r3, r0
 8005e98:	617b      	str	r3, [r7, #20]
        break;
 8005e9a:	e12e      	b.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005e9c:	4b29      	ldr	r3, [pc, #164]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e9e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ea0:	23c0      	movs	r3, #192	@ 0xc0
 8005ea2:	019b      	lsls	r3, r3, #6
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d104      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005eae:	f7ff fd13 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 8005eb2:	0003      	movs	r3, r0
 8005eb4:	617b      	str	r3, [r7, #20]
        break;
 8005eb6:	e122      	b.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	2380      	movs	r3, #128	@ 0x80
 8005ebc:	015b      	lsls	r3, r3, #5
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d104      	bne.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ec2:	f7ff fc7f 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 8005ec6:	0003      	movs	r3, r0
 8005ec8:	617b      	str	r3, [r7, #20]
        break;
 8005eca:	e118      	b.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	2380      	movs	r3, #128	@ 0x80
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	401a      	ands	r2, r3
 8005ed6:	2380      	movs	r3, #128	@ 0x80
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d000      	beq.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8005ede:	e10e      	b.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	2380      	movs	r3, #128	@ 0x80
 8005ee4:	019b      	lsls	r3, r3, #6
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d000      	beq.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8005eea:	e108      	b.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          frequency = HSI_VALUE;
 8005eec:	4b17      	ldr	r3, [pc, #92]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005eee:	617b      	str	r3, [r7, #20]
        break;
 8005ef0:	e105      	b.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8005ef2:	4b14      	ldr	r3, [pc, #80]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005ef4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ef6:	23c0      	movs	r3, #192	@ 0xc0
 8005ef8:	021b      	lsls	r3, r3, #8
 8005efa:	4013      	ands	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	2380      	movs	r3, #128	@ 0x80
 8005f02:	01db      	lsls	r3, r3, #7
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d123      	bne.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005f08:	4b0e      	ldr	r3, [pc, #56]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	2380      	movs	r3, #128	@ 0x80
 8005f0e:	025b      	lsls	r3, r3, #9
 8005f10:	4013      	ands	r3, r2
 8005f12:	d100      	bne.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005f14:	e0f5      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005f16:	4b0b      	ldr	r3, [pc, #44]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	0a1b      	lsrs	r3, r3, #8
 8005f1c:	227f      	movs	r2, #127	@ 0x7f
 8005f1e:	4013      	ands	r3, r2
 8005f20:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	435a      	muls	r2, r3
 8005f28:	4b06      	ldr	r3, [pc, #24]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	0c5b      	lsrs	r3, r3, #17
 8005f2e:	211f      	movs	r1, #31
 8005f30:	400b      	ands	r3, r1
 8005f32:	3301      	adds	r3, #1
 8005f34:	0019      	movs	r1, r3
 8005f36:	0010      	movs	r0, r2
 8005f38:	f7fa f8e4 	bl	8000104 <__udivsi3>
 8005f3c:	0003      	movs	r3, r0
 8005f3e:	617b      	str	r3, [r7, #20]
        break;
 8005f40:	e0df      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8005f42:	46c0      	nop			@ (mov r8, r8)
 8005f44:	40021000 	.word	0x40021000
 8005f48:	0007a120 	.word	0x0007a120
 8005f4c:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d104      	bne.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f56:	f7ff fc35 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 8005f5a:	0003      	movs	r3, r0
 8005f5c:	617b      	str	r3, [r7, #20]
        break;
 8005f5e:	e0d0      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8005f60:	4b6e      	ldr	r3, [pc, #440]	@ (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	2380      	movs	r3, #128	@ 0x80
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	401a      	ands	r2, r3
 8005f6a:	2380      	movs	r3, #128	@ 0x80
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d107      	bne.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	2380      	movs	r3, #128	@ 0x80
 8005f76:	021b      	lsls	r3, r3, #8
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d102      	bne.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
          frequency = HSI_VALUE;
 8005f7c:	4b68      	ldr	r3, [pc, #416]	@ (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005f7e:	617b      	str	r3, [r7, #20]
        break;
 8005f80:	e0bf      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	23c0      	movs	r3, #192	@ 0xc0
 8005f86:	021b      	lsls	r3, r3, #8
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d000      	beq.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005f8c:	e0b9      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8005f8e:	4b65      	ldr	r3, [pc, #404]	@ (8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8005f90:	617b      	str	r3, [r7, #20]
        break;
 8005f92:	e0b6      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005f94:	4b61      	ldr	r3, [pc, #388]	@ (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005f96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f98:	23c0      	movs	r3, #192	@ 0xc0
 8005f9a:	031b      	lsls	r3, r3, #12
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d104      	bne.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fa6:	f7ff fc97 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 8005faa:	0003      	movs	r3, r0
 8005fac:	617b      	str	r3, [r7, #20]
        break;
 8005fae:	e0aa      	b.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005fb0:	4b5a      	ldr	r3, [pc, #360]	@ (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d108      	bne.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	2380      	movs	r3, #128	@ 0x80
 8005fc0:	02db      	lsls	r3, r3, #11
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d103      	bne.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = LSI_VALUE;
 8005fc6:	23fa      	movs	r3, #250	@ 0xfa
 8005fc8:	01db      	lsls	r3, r3, #7
 8005fca:	617b      	str	r3, [r7, #20]
 8005fcc:	e021      	b.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005fce:	4b53      	ldr	r3, [pc, #332]	@ (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	2380      	movs	r3, #128	@ 0x80
 8005fd4:	00db      	lsls	r3, r3, #3
 8005fd6:	401a      	ands	r2, r3
 8005fd8:	2380      	movs	r3, #128	@ 0x80
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d107      	bne.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	2380      	movs	r3, #128	@ 0x80
 8005fe4:	031b      	lsls	r3, r3, #12
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d102      	bne.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          frequency = HSI_VALUE;
 8005fea:	4b4d      	ldr	r3, [pc, #308]	@ (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	e010      	b.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005ff0:	4b4a      	ldr	r3, [pc, #296]	@ (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d000      	beq.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 8005ffc:	e083      	b.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	23c0      	movs	r3, #192	@ 0xc0
 8006002:	031b      	lsls	r3, r3, #12
 8006004:	429a      	cmp	r2, r3
 8006006:	d000      	beq.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8006008:	e07d      	b.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
          frequency = LSE_VALUE;
 800600a:	2380      	movs	r3, #128	@ 0x80
 800600c:	021b      	lsls	r3, r3, #8
 800600e:	617b      	str	r3, [r7, #20]
        break;
 8006010:	e079      	b.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006012:	e078      	b.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006014:	4b41      	ldr	r3, [pc, #260]	@ (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006016:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006018:	23c0      	movs	r3, #192	@ 0xc0
 800601a:	039b      	lsls	r3, r3, #14
 800601c:	4013      	ands	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d104      	bne.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006026:	f7ff fc57 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 800602a:	0003      	movs	r3, r0
 800602c:	617b      	str	r3, [r7, #20]
        break;
 800602e:	e06c      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006030:	4b3a      	ldr	r3, [pc, #232]	@ (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006034:	2202      	movs	r2, #2
 8006036:	4013      	ands	r3, r2
 8006038:	2b02      	cmp	r3, #2
 800603a:	d108      	bne.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	2380      	movs	r3, #128	@ 0x80
 8006040:	035b      	lsls	r3, r3, #13
 8006042:	429a      	cmp	r2, r3
 8006044:	d103      	bne.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          frequency = LSI_VALUE;
 8006046:	23fa      	movs	r3, #250	@ 0xfa
 8006048:	01db      	lsls	r3, r3, #7
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	e01f      	b.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800604e:	4b33      	ldr	r3, [pc, #204]	@ (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	2380      	movs	r3, #128	@ 0x80
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	401a      	ands	r2, r3
 8006058:	2380      	movs	r3, #128	@ 0x80
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	429a      	cmp	r2, r3
 800605e:	d107      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	2380      	movs	r3, #128	@ 0x80
 8006064:	039b      	lsls	r3, r3, #14
 8006066:	429a      	cmp	r2, r3
 8006068:	d102      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HSI_VALUE;
 800606a:	4b2d      	ldr	r3, [pc, #180]	@ (8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800606c:	617b      	str	r3, [r7, #20]
 800606e:	e00e      	b.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006070:	4b2a      	ldr	r3, [pc, #168]	@ (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006074:	2202      	movs	r2, #2
 8006076:	4013      	ands	r3, r2
 8006078:	2b02      	cmp	r3, #2
 800607a:	d146      	bne.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	23c0      	movs	r3, #192	@ 0xc0
 8006080:	039b      	lsls	r3, r3, #14
 8006082:	429a      	cmp	r2, r3
 8006084:	d141      	bne.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          frequency = LSE_VALUE;
 8006086:	2380      	movs	r3, #128	@ 0x80
 8006088:	021b      	lsls	r3, r3, #8
 800608a:	617b      	str	r3, [r7, #20]
        break;
 800608c:	e03d      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 800608e:	e03c      	b.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8006090:	4b22      	ldr	r3, [pc, #136]	@ (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006092:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006094:	2380      	movs	r3, #128	@ 0x80
 8006096:	03db      	lsls	r3, r3, #15
 8006098:	4013      	ands	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	2380      	movs	r3, #128	@ 0x80
 80060a0:	03db      	lsls	r3, r3, #15
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d11b      	bne.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80060a6:	4b1d      	ldr	r3, [pc, #116]	@ (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	2380      	movs	r3, #128	@ 0x80
 80060ac:	045b      	lsls	r3, r3, #17
 80060ae:	4013      	ands	r3, r2
 80060b0:	d02d      	beq.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80060b2:	4b1a      	ldr	r3, [pc, #104]	@ (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	0a1b      	lsrs	r3, r3, #8
 80060b8:	227f      	movs	r2, #127	@ 0x7f
 80060ba:	4013      	ands	r3, r2
 80060bc:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	435a      	muls	r2, r3
 80060c4:	4b15      	ldr	r3, [pc, #84]	@ (800611c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	0e5b      	lsrs	r3, r3, #25
 80060ca:	2107      	movs	r1, #7
 80060cc:	400b      	ands	r3, r1
 80060ce:	3301      	adds	r3, #1
 80060d0:	0019      	movs	r1, r3
 80060d2:	0010      	movs	r0, r2
 80060d4:	f7fa f816 	bl	8000104 <__udivsi3>
 80060d8:	0003      	movs	r3, r0
 80060da:	617b      	str	r3, [r7, #20]
        break;
 80060dc:	e017      	b.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d114      	bne.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          frequency = HAL_RCC_GetPCLK1Freq();
 80060e4:	f7ff fbf8 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 80060e8:	0003      	movs	r3, r0
 80060ea:	617b      	str	r3, [r7, #20]
        break;
 80060ec:	e00f      	b.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        break;
 80060ee:	46c0      	nop			@ (mov r8, r8)
 80060f0:	e00e      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80060f2:	46c0      	nop			@ (mov r8, r8)
 80060f4:	e00c      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80060f6:	46c0      	nop			@ (mov r8, r8)
 80060f8:	e00a      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80060fa:	46c0      	nop			@ (mov r8, r8)
 80060fc:	e008      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80060fe:	46c0      	nop			@ (mov r8, r8)
 8006100:	e006      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006102:	46c0      	nop			@ (mov r8, r8)
 8006104:	e004      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006106:	46c0      	nop			@ (mov r8, r8)
 8006108:	e002      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800610a:	46c0      	nop			@ (mov r8, r8)
 800610c:	e000      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800610e:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return (frequency);
 8006110:	697b      	ldr	r3, [r7, #20]
}
 8006112:	0018      	movs	r0, r3
 8006114:	46bd      	mov	sp, r7
 8006116:	b006      	add	sp, #24
 8006118:	bd80      	pop	{r7, pc}
 800611a:	46c0      	nop			@ (mov r8, r8)
 800611c:	40021000 	.word	0x40021000
 8006120:	00f42400 	.word	0x00f42400
 8006124:	00bb8000 	.word	0x00bb8000

08006128 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8006128:	b590      	push	{r4, r7, lr}
 800612a:	b08b      	sub	sp, #44	@ 0x2c
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8006130:	2427      	movs	r4, #39	@ 0x27
 8006132:	193b      	adds	r3, r7, r4
 8006134:	2200      	movs	r2, #0
 8006136:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 8006138:	2326      	movs	r3, #38	@ 0x26
 800613a:	18fb      	adds	r3, r7, r3
 800613c:	2200      	movs	r2, #0
 800613e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 8006140:	4b31      	ldr	r3, [pc, #196]	@ (8006208 <HAL_RCCEx_EnableLSCO+0xe0>)
 8006142:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006144:	4b30      	ldr	r3, [pc, #192]	@ (8006208 <HAL_RCCEx_EnableLSCO+0xe0>)
 8006146:	2101      	movs	r1, #1
 8006148:	430a      	orrs	r2, r1
 800614a:	635a      	str	r2, [r3, #52]	@ 0x34
 800614c:	4b2e      	ldr	r3, [pc, #184]	@ (8006208 <HAL_RCCEx_EnableLSCO+0xe0>)
 800614e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006150:	2201      	movs	r2, #1
 8006152:	4013      	ands	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]
 8006156:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8006158:	2110      	movs	r1, #16
 800615a:	187b      	adds	r3, r7, r1
 800615c:	2204      	movs	r2, #4
 800615e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006160:	187b      	adds	r3, r7, r1
 8006162:	2203      	movs	r2, #3
 8006164:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006166:	187b      	adds	r3, r7, r1
 8006168:	2203      	movs	r2, #3
 800616a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800616c:	187b      	adds	r3, r7, r1
 800616e:	2200      	movs	r2, #0
 8006170:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 8006172:	187a      	adds	r2, r7, r1
 8006174:	23a0      	movs	r3, #160	@ 0xa0
 8006176:	05db      	lsls	r3, r3, #23
 8006178:	0011      	movs	r1, r2
 800617a:	0018      	movs	r0, r3
 800617c:	f7fd fd78 	bl	8003c70 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006180:	4b21      	ldr	r3, [pc, #132]	@ (8006208 <HAL_RCCEx_EnableLSCO+0xe0>)
 8006182:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006184:	2380      	movs	r3, #128	@ 0x80
 8006186:	055b      	lsls	r3, r3, #21
 8006188:	4013      	ands	r3, r2
 800618a:	d110      	bne.n	80061ae <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800618c:	4b1e      	ldr	r3, [pc, #120]	@ (8006208 <HAL_RCCEx_EnableLSCO+0xe0>)
 800618e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006190:	4b1d      	ldr	r3, [pc, #116]	@ (8006208 <HAL_RCCEx_EnableLSCO+0xe0>)
 8006192:	2180      	movs	r1, #128	@ 0x80
 8006194:	0549      	lsls	r1, r1, #21
 8006196:	430a      	orrs	r2, r1
 8006198:	63da      	str	r2, [r3, #60]	@ 0x3c
 800619a:	4b1b      	ldr	r3, [pc, #108]	@ (8006208 <HAL_RCCEx_EnableLSCO+0xe0>)
 800619c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800619e:	2380      	movs	r3, #128	@ 0x80
 80061a0:	055b      	lsls	r3, r3, #21
 80061a2:	4013      	ands	r3, r2
 80061a4:	60bb      	str	r3, [r7, #8]
 80061a6:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 80061a8:	193b      	adds	r3, r7, r4
 80061aa:	2201      	movs	r2, #1
 80061ac:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061ae:	4b17      	ldr	r3, [pc, #92]	@ (800620c <HAL_RCCEx_EnableLSCO+0xe4>)
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	2380      	movs	r3, #128	@ 0x80
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	4013      	ands	r3, r2
 80061b8:	d105      	bne.n	80061c6 <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 80061ba:	f7fe fe77 	bl	8004eac <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 80061be:	2326      	movs	r3, #38	@ 0x26
 80061c0:	18fb      	adds	r3, r7, r3
 80061c2:	2201      	movs	r2, #1
 80061c4:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 80061c6:	4b10      	ldr	r3, [pc, #64]	@ (8006208 <HAL_RCCEx_EnableLSCO+0xe0>)
 80061c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ca:	4a11      	ldr	r2, [pc, #68]	@ (8006210 <HAL_RCCEx_EnableLSCO+0xe8>)
 80061cc:	401a      	ands	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	431a      	orrs	r2, r3
 80061d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006208 <HAL_RCCEx_EnableLSCO+0xe0>)
 80061d4:	2180      	movs	r1, #128	@ 0x80
 80061d6:	0449      	lsls	r1, r1, #17
 80061d8:	430a      	orrs	r2, r1
 80061da:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 80061dc:	2326      	movs	r3, #38	@ 0x26
 80061de:	18fb      	adds	r3, r7, r3
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d101      	bne.n	80061ea <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 80061e6:	f7fe fe6f 	bl	8004ec8 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 80061ea:	2327      	movs	r3, #39	@ 0x27
 80061ec:	18fb      	adds	r3, r7, r3
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d105      	bne.n	8006200 <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 80061f4:	4b04      	ldr	r3, [pc, #16]	@ (8006208 <HAL_RCCEx_EnableLSCO+0xe0>)
 80061f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061f8:	4b03      	ldr	r3, [pc, #12]	@ (8006208 <HAL_RCCEx_EnableLSCO+0xe0>)
 80061fa:	4906      	ldr	r1, [pc, #24]	@ (8006214 <HAL_RCCEx_EnableLSCO+0xec>)
 80061fc:	400a      	ands	r2, r1
 80061fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8006200:	46c0      	nop			@ (mov r8, r8)
 8006202:	46bd      	mov	sp, r7
 8006204:	b00b      	add	sp, #44	@ 0x2c
 8006206:	bd90      	pop	{r4, r7, pc}
 8006208:	40021000 	.word	0x40021000
 800620c:	40007000 	.word	0x40007000
 8006210:	fcffffff 	.word	0xfcffffff
 8006214:	efffffff 	.word	0xefffffff

08006218 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006218:	b5b0      	push	{r4, r5, r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006220:	230f      	movs	r3, #15
 8006222:	18fb      	adds	r3, r7, r3
 8006224:	2201      	movs	r2, #1
 8006226:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d100      	bne.n	8006230 <HAL_RTC_Init+0x18>
 800622e:	e08c      	b.n	800634a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2229      	movs	r2, #41	@ 0x29
 8006234:	5c9b      	ldrb	r3, [r3, r2]
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10b      	bne.n	8006254 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2228      	movs	r2, #40	@ 0x28
 8006240:	2100      	movs	r1, #0
 8006242:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2288      	movs	r2, #136	@ 0x88
 8006248:	0212      	lsls	r2, r2, #8
 800624a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	0018      	movs	r0, r3
 8006250:	f7fc ffde 	bl	8003210 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2229      	movs	r2, #41	@ 0x29
 8006258:	2102      	movs	r1, #2
 800625a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	2210      	movs	r2, #16
 8006264:	4013      	ands	r3, r2
 8006266:	2b10      	cmp	r3, #16
 8006268:	d062      	beq.n	8006330 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	22ca      	movs	r2, #202	@ 0xca
 8006270:	625a      	str	r2, [r3, #36]	@ 0x24
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2253      	movs	r2, #83	@ 0x53
 8006278:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800627a:	250f      	movs	r5, #15
 800627c:	197c      	adds	r4, r7, r5
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	0018      	movs	r0, r3
 8006282:	f000 fc27 	bl	8006ad4 <RTC_EnterInitMode>
 8006286:	0003      	movs	r3, r0
 8006288:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800628a:	0028      	movs	r0, r5
 800628c:	183b      	adds	r3, r7, r0
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d12c      	bne.n	80062ee <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	492e      	ldr	r1, [pc, #184]	@ (8006358 <HAL_RTC_Init+0x140>)
 80062a0:	400a      	ands	r2, r1
 80062a2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6999      	ldr	r1, [r3, #24]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6912      	ldr	r2, [r2, #16]
 80062ca:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6919      	ldr	r1, [r3, #16]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	041a      	lsls	r2, r3, #16
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80062e0:	183c      	adds	r4, r7, r0
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	0018      	movs	r0, r3
 80062e6:	f000 fc37 	bl	8006b58 <RTC_ExitInitMode>
 80062ea:	0003      	movs	r3, r0
 80062ec:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80062ee:	230f      	movs	r3, #15
 80062f0:	18fb      	adds	r3, r7, r3
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d116      	bne.n	8006326 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699a      	ldr	r2, [r3, #24]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	00d2      	lsls	r2, r2, #3
 8006304:	08d2      	lsrs	r2, r2, #3
 8006306:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6999      	ldr	r1, [r3, #24]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	431a      	orrs	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	431a      	orrs	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	22ff      	movs	r2, #255	@ 0xff
 800632c:	625a      	str	r2, [r3, #36]	@ 0x24
 800632e:	e003      	b.n	8006338 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006330:	230f      	movs	r3, #15
 8006332:	18fb      	adds	r3, r7, r3
 8006334:	2200      	movs	r2, #0
 8006336:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8006338:	230f      	movs	r3, #15
 800633a:	18fb      	adds	r3, r7, r3
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d103      	bne.n	800634a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2229      	movs	r2, #41	@ 0x29
 8006346:	2101      	movs	r1, #1
 8006348:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800634a:	230f      	movs	r3, #15
 800634c:	18fb      	adds	r3, r7, r3
 800634e:	781b      	ldrb	r3, [r3, #0]
}
 8006350:	0018      	movs	r0, r3
 8006352:	46bd      	mov	sp, r7
 8006354:	b004      	add	sp, #16
 8006356:	bdb0      	pop	{r4, r5, r7, pc}
 8006358:	fb8fffbf 	.word	0xfb8fffbf

0800635c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800635c:	b5b0      	push	{r4, r5, r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2228      	movs	r2, #40	@ 0x28
 800636c:	5c9b      	ldrb	r3, [r3, r2]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <HAL_RTC_SetTime+0x1a>
 8006372:	2302      	movs	r3, #2
 8006374:	e092      	b.n	800649c <HAL_RTC_SetTime+0x140>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2228      	movs	r2, #40	@ 0x28
 800637a:	2101      	movs	r1, #1
 800637c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2229      	movs	r2, #41	@ 0x29
 8006382:	2102      	movs	r1, #2
 8006384:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	22ca      	movs	r2, #202	@ 0xca
 800638c:	625a      	str	r2, [r3, #36]	@ 0x24
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2253      	movs	r2, #83	@ 0x53
 8006394:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006396:	2513      	movs	r5, #19
 8006398:	197c      	adds	r4, r7, r5
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	0018      	movs	r0, r3
 800639e:	f000 fb99 	bl	8006ad4 <RTC_EnterInitMode>
 80063a2:	0003      	movs	r3, r0
 80063a4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80063a6:	197b      	adds	r3, r7, r5
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d162      	bne.n	8006474 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d125      	bne.n	8006400 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	2240      	movs	r2, #64	@ 0x40
 80063bc:	4013      	ands	r3, r2
 80063be:	d102      	bne.n	80063c6 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2200      	movs	r2, #0
 80063c4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	0018      	movs	r0, r3
 80063cc:	f000 fc08 	bl	8006be0 <RTC_ByteToBcd2>
 80063d0:	0003      	movs	r3, r0
 80063d2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	785b      	ldrb	r3, [r3, #1]
 80063d8:	0018      	movs	r0, r3
 80063da:	f000 fc01 	bl	8006be0 <RTC_ByteToBcd2>
 80063de:	0003      	movs	r3, r0
 80063e0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80063e2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	789b      	ldrb	r3, [r3, #2]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f000 fbf9 	bl	8006be0 <RTC_ByteToBcd2>
 80063ee:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80063f0:	0022      	movs	r2, r4
 80063f2:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	78db      	ldrb	r3, [r3, #3]
 80063f8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80063fa:	4313      	orrs	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]
 80063fe:	e017      	b.n	8006430 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	2240      	movs	r2, #64	@ 0x40
 8006408:	4013      	ands	r3, r2
 800640a:	d102      	bne.n	8006412 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2200      	movs	r2, #0
 8006410:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	785b      	ldrb	r3, [r3, #1]
 800641c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800641e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006424:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	78db      	ldrb	r3, [r3, #3]
 800642a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800642c:	4313      	orrs	r3, r2
 800642e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	491b      	ldr	r1, [pc, #108]	@ (80064a4 <HAL_RTC_SetTime+0x148>)
 8006438:	400a      	ands	r2, r1
 800643a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699a      	ldr	r2, [r3, #24]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4918      	ldr	r1, [pc, #96]	@ (80064a8 <HAL_RTC_SetTime+0x14c>)
 8006448:	400a      	ands	r2, r1
 800644a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6999      	ldr	r1, [r3, #24]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	431a      	orrs	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006464:	2313      	movs	r3, #19
 8006466:	18fc      	adds	r4, r7, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	0018      	movs	r0, r3
 800646c:	f000 fb74 	bl	8006b58 <RTC_ExitInitMode>
 8006470:	0003      	movs	r3, r0
 8006472:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	22ff      	movs	r2, #255	@ 0xff
 800647a:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 800647c:	2313      	movs	r3, #19
 800647e:	18fb      	adds	r3, r7, r3
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2229      	movs	r2, #41	@ 0x29
 800648a:	2101      	movs	r1, #1
 800648c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2228      	movs	r2, #40	@ 0x28
 8006492:	2100      	movs	r1, #0
 8006494:	5499      	strb	r1, [r3, r2]

  return status;
 8006496:	2313      	movs	r3, #19
 8006498:	18fb      	adds	r3, r7, r3
 800649a:	781b      	ldrb	r3, [r3, #0]
}
 800649c:	0018      	movs	r0, r3
 800649e:	46bd      	mov	sp, r7
 80064a0:	b006      	add	sp, #24
 80064a2:	bdb0      	pop	{r4, r5, r7, pc}
 80064a4:	007f7f7f 	.word	0x007f7f7f
 80064a8:	fffbffff 	.word	0xfffbffff

080064ac <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	045b      	lsls	r3, r3, #17
 80064ca:	0c5a      	lsrs	r2, r3, #17
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a22      	ldr	r2, [pc, #136]	@ (8006560 <HAL_RTC_GetTime+0xb4>)
 80064d8:	4013      	ands	r3, r2
 80064da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	0c1b      	lsrs	r3, r3, #16
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	223f      	movs	r2, #63	@ 0x3f
 80064e4:	4013      	ands	r3, r2
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	0a1b      	lsrs	r3, r3, #8
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	227f      	movs	r2, #127	@ 0x7f
 80064f4:	4013      	ands	r3, r2
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	227f      	movs	r2, #127	@ 0x7f
 8006502:	4013      	ands	r3, r2
 8006504:	b2da      	uxtb	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	0d9b      	lsrs	r3, r3, #22
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2201      	movs	r2, #1
 8006512:	4013      	ands	r3, r2
 8006514:	b2da      	uxtb	r2, r3
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d11a      	bne.n	8006556 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	0018      	movs	r0, r3
 8006526:	f000 fb83 	bl	8006c30 <RTC_Bcd2ToByte>
 800652a:	0003      	movs	r3, r0
 800652c:	001a      	movs	r2, r3
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	785b      	ldrb	r3, [r3, #1]
 8006536:	0018      	movs	r0, r3
 8006538:	f000 fb7a 	bl	8006c30 <RTC_Bcd2ToByte>
 800653c:	0003      	movs	r3, r0
 800653e:	001a      	movs	r2, r3
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	789b      	ldrb	r3, [r3, #2]
 8006548:	0018      	movs	r0, r3
 800654a:	f000 fb71 	bl	8006c30 <RTC_Bcd2ToByte>
 800654e:	0003      	movs	r3, r0
 8006550:	001a      	movs	r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	0018      	movs	r0, r3
 800655a:	46bd      	mov	sp, r7
 800655c:	b006      	add	sp, #24
 800655e:	bd80      	pop	{r7, pc}
 8006560:	007f7f7f 	.word	0x007f7f7f

08006564 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	4a21      	ldr	r2, [pc, #132]	@ (80065fc <HAL_RTC_GetDate+0x98>)
 8006578:	4013      	ands	r3, r2
 800657a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	0c1b      	lsrs	r3, r3, #16
 8006580:	b2da      	uxtb	r2, r3
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	0a1b      	lsrs	r3, r3, #8
 800658a:	b2db      	uxtb	r3, r3
 800658c:	221f      	movs	r2, #31
 800658e:	4013      	ands	r3, r2
 8006590:	b2da      	uxtb	r2, r3
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	223f      	movs	r2, #63	@ 0x3f
 800659c:	4013      	ands	r3, r2
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	0b5b      	lsrs	r3, r3, #13
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2207      	movs	r2, #7
 80065ac:	4013      	ands	r3, r2
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d11a      	bne.n	80065f0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	78db      	ldrb	r3, [r3, #3]
 80065be:	0018      	movs	r0, r3
 80065c0:	f000 fb36 	bl	8006c30 <RTC_Bcd2ToByte>
 80065c4:	0003      	movs	r3, r0
 80065c6:	001a      	movs	r2, r3
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	785b      	ldrb	r3, [r3, #1]
 80065d0:	0018      	movs	r0, r3
 80065d2:	f000 fb2d 	bl	8006c30 <RTC_Bcd2ToByte>
 80065d6:	0003      	movs	r3, r0
 80065d8:	001a      	movs	r2, r3
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	789b      	ldrb	r3, [r3, #2]
 80065e2:	0018      	movs	r0, r3
 80065e4:	f000 fb24 	bl	8006c30 <RTC_Bcd2ToByte>
 80065e8:	0003      	movs	r3, r0
 80065ea:	001a      	movs	r2, r3
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	0018      	movs	r0, r3
 80065f4:	46bd      	mov	sp, r7
 80065f6:	b006      	add	sp, #24
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	46c0      	nop			@ (mov r8, r8)
 80065fc:	00ffff3f 	.word	0x00ffff3f

08006600 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006600:	b590      	push	{r4, r7, lr}
 8006602:	b089      	sub	sp, #36	@ 0x24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2228      	movs	r2, #40	@ 0x28
 8006610:	5c9b      	ldrb	r3, [r3, r2]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_RTC_SetAlarm_IT+0x1a>
 8006616:	2302      	movs	r3, #2
 8006618:	e127      	b.n	800686a <HAL_RTC_SetAlarm_IT+0x26a>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2228      	movs	r2, #40	@ 0x28
 800661e:	2101      	movs	r1, #1
 8006620:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2229      	movs	r2, #41	@ 0x29
 8006626:	2102      	movs	r1, #2
 8006628:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d136      	bne.n	800669e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	2240      	movs	r2, #64	@ 0x40
 8006638:	4013      	ands	r3, r2
 800663a:	d102      	bne.n	8006642 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2200      	movs	r2, #0
 8006640:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	0018      	movs	r0, r3
 8006648:	f000 faca 	bl	8006be0 <RTC_ByteToBcd2>
 800664c:	0003      	movs	r3, r0
 800664e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	785b      	ldrb	r3, [r3, #1]
 8006654:	0018      	movs	r0, r3
 8006656:	f000 fac3 	bl	8006be0 <RTC_ByteToBcd2>
 800665a:	0003      	movs	r3, r0
 800665c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800665e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	789b      	ldrb	r3, [r3, #2]
 8006664:	0018      	movs	r0, r3
 8006666:	f000 fabb 	bl	8006be0 <RTC_ByteToBcd2>
 800666a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800666c:	0022      	movs	r2, r4
 800666e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	78db      	ldrb	r3, [r3, #3]
 8006674:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006676:	431a      	orrs	r2, r3
 8006678:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2220      	movs	r2, #32
 800667e:	5c9b      	ldrb	r3, [r3, r2]
 8006680:	0018      	movs	r0, r3
 8006682:	f000 faad 	bl	8006be0 <RTC_ByteToBcd2>
 8006686:	0003      	movs	r3, r0
 8006688:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800668a:	0022      	movs	r2, r4
 800668c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006692:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006698:	4313      	orrs	r3, r2
 800669a:	61fb      	str	r3, [r7, #28]
 800669c:	e022      	b.n	80066e4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	2240      	movs	r2, #64	@ 0x40
 80066a6:	4013      	ands	r3, r2
 80066a8:	d102      	bne.n	80066b0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2200      	movs	r2, #0
 80066ae:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	785b      	ldrb	r3, [r3, #1]
 80066ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80066bc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80066c2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	78db      	ldrb	r3, [r3, #3]
 80066c8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80066ca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2120      	movs	r1, #32
 80066d0:	5c5b      	ldrb	r3, [r3, r1]
 80066d2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80066d4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80066da:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80066e0:	4313      	orrs	r3, r2
 80066e2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	22ca      	movs	r2, #202	@ 0xca
 80066f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2253      	movs	r2, #83	@ 0x53
 80066fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006704:	2380      	movs	r3, #128	@ 0x80
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	429a      	cmp	r2, r3
 800670a:	d14c      	bne.n	80067a6 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699a      	ldr	r2, [r3, #24]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4957      	ldr	r1, [pc, #348]	@ (8006874 <HAL_RTC_SetAlarm_IT+0x274>)
 8006718:	400a      	ands	r2, r1
 800671a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2101      	movs	r1, #1
 8006728:	430a      	orrs	r2, r1
 800672a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800672c:	f7fd f82c 	bl	8003788 <HAL_GetTick>
 8006730:	0003      	movs	r3, r0
 8006732:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006734:	e016      	b.n	8006764 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006736:	f7fd f827 	bl	8003788 <HAL_GetTick>
 800673a:	0002      	movs	r2, r0
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	1ad2      	subs	r2, r2, r3
 8006740:	23fa      	movs	r3, #250	@ 0xfa
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	429a      	cmp	r2, r3
 8006746:	d90d      	bls.n	8006764 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	22ff      	movs	r2, #255	@ 0xff
 800674e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2229      	movs	r2, #41	@ 0x29
 8006754:	2103      	movs	r1, #3
 8006756:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2228      	movs	r2, #40	@ 0x28
 800675c:	2100      	movs	r1, #0
 800675e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e082      	b.n	800686a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	2201      	movs	r2, #1
 800676c:	4013      	ands	r3, r2
 800676e:	d0e2      	beq.n	8006736 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2180      	movs	r1, #128	@ 0x80
 800678c:	0049      	lsls	r1, r1, #1
 800678e:	430a      	orrs	r2, r1
 8006790:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	699a      	ldr	r2, [r3, #24]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2180      	movs	r1, #128	@ 0x80
 800679e:	0149      	lsls	r1, r1, #5
 80067a0:	430a      	orrs	r2, r1
 80067a2:	619a      	str	r2, [r3, #24]
 80067a4:	e04b      	b.n	800683e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	699a      	ldr	r2, [r3, #24]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4931      	ldr	r1, [pc, #196]	@ (8006878 <HAL_RTC_SetAlarm_IT+0x278>)
 80067b2:	400a      	ands	r2, r1
 80067b4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2102      	movs	r1, #2
 80067c2:	430a      	orrs	r2, r1
 80067c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80067c6:	f7fc ffdf 	bl	8003788 <HAL_GetTick>
 80067ca:	0003      	movs	r3, r0
 80067cc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80067ce:	e016      	b.n	80067fe <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80067d0:	f7fc ffda 	bl	8003788 <HAL_GetTick>
 80067d4:	0002      	movs	r2, r0
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	1ad2      	subs	r2, r2, r3
 80067da:	23fa      	movs	r3, #250	@ 0xfa
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	429a      	cmp	r2, r3
 80067e0:	d90d      	bls.n	80067fe <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	22ff      	movs	r2, #255	@ 0xff
 80067e8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2229      	movs	r2, #41	@ 0x29
 80067ee:	2103      	movs	r1, #3
 80067f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2228      	movs	r2, #40	@ 0x28
 80067f6:	2100      	movs	r1, #0
 80067f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e035      	b.n	800686a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	2202      	movs	r2, #2
 8006806:	4013      	ands	r3, r2
 8006808:	d0e2      	beq.n	80067d0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	699a      	ldr	r2, [r3, #24]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2180      	movs	r1, #128	@ 0x80
 8006826:	0089      	lsls	r1, r1, #2
 8006828:	430a      	orrs	r2, r1
 800682a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699a      	ldr	r2, [r3, #24]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2180      	movs	r1, #128	@ 0x80
 8006838:	0189      	lsls	r1, r1, #6
 800683a:	430a      	orrs	r2, r1
 800683c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800683e:	4a0f      	ldr	r2, [pc, #60]	@ (800687c <HAL_RTC_SetAlarm_IT+0x27c>)
 8006840:	2380      	movs	r3, #128	@ 0x80
 8006842:	58d3      	ldr	r3, [r2, r3]
 8006844:	490d      	ldr	r1, [pc, #52]	@ (800687c <HAL_RTC_SetAlarm_IT+0x27c>)
 8006846:	2280      	movs	r2, #128	@ 0x80
 8006848:	0312      	lsls	r2, r2, #12
 800684a:	4313      	orrs	r3, r2
 800684c:	2280      	movs	r2, #128	@ 0x80
 800684e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	22ff      	movs	r2, #255	@ 0xff
 8006856:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2229      	movs	r2, #41	@ 0x29
 800685c:	2101      	movs	r1, #1
 800685e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2228      	movs	r2, #40	@ 0x28
 8006864:	2100      	movs	r1, #0
 8006866:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	0018      	movs	r0, r3
 800686c:	46bd      	mov	sp, r7
 800686e:	b009      	add	sp, #36	@ 0x24
 8006870:	bd90      	pop	{r4, r7, pc}
 8006872:	46c0      	nop			@ (mov r8, r8)
 8006874:	fffffeff 	.word	0xfffffeff
 8006878:	fffffdff 	.word	0xfffffdff
 800687c:	40021800 	.word	0x40021800

08006880 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
 800688c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	2380      	movs	r3, #128	@ 0x80
 8006892:	005b      	lsls	r3, r3, #1
 8006894:	429a      	cmp	r2, r3
 8006896:	d144      	bne.n	8006922 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2280      	movs	r2, #128	@ 0x80
 800689c:	0052      	lsls	r2, r2, #1
 800689e:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a6:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ae:	045b      	lsls	r3, r3, #17
 80068b0:	0c5b      	lsrs	r3, r3, #17
 80068b2:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	0c1b      	lsrs	r3, r3, #16
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	223f      	movs	r2, #63	@ 0x3f
 80068bc:	4013      	ands	r3, r2
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	0a1b      	lsrs	r3, r3, #8
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	227f      	movs	r2, #127	@ 0x7f
 80068cc:	4013      	ands	r3, r2
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	227f      	movs	r2, #127	@ 0x7f
 80068da:	4013      	ands	r3, r2
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	0d9b      	lsrs	r3, r3, #22
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2201      	movs	r2, #1
 80068ea:	4013      	ands	r3, r2
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	0e1b      	lsrs	r3, r3, #24
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	223f      	movs	r2, #63	@ 0x3f
 8006900:	4013      	ands	r3, r2
 8006902:	b2d9      	uxtb	r1, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2220      	movs	r2, #32
 8006908:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	2380      	movs	r3, #128	@ 0x80
 800690e:	05db      	lsls	r3, r3, #23
 8006910:	401a      	ands	r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	4a3b      	ldr	r2, [pc, #236]	@ (8006a08 <HAL_RTC_GetAlarm+0x188>)
 800691a:	401a      	ands	r2, r3
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	615a      	str	r2, [r3, #20]
 8006920:	e043      	b.n	80069aa <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2280      	movs	r2, #128	@ 0x80
 8006926:	0092      	lsls	r2, r2, #2
 8006928:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006930:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006938:	045b      	lsls	r3, r3, #17
 800693a:	0c5b      	lsrs	r3, r3, #17
 800693c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	0c1b      	lsrs	r3, r3, #16
 8006942:	b2db      	uxtb	r3, r3
 8006944:	223f      	movs	r2, #63	@ 0x3f
 8006946:	4013      	ands	r3, r2
 8006948:	b2da      	uxtb	r2, r3
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	0a1b      	lsrs	r3, r3, #8
 8006952:	b2db      	uxtb	r3, r3
 8006954:	227f      	movs	r2, #127	@ 0x7f
 8006956:	4013      	ands	r3, r2
 8006958:	b2da      	uxtb	r2, r3
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	b2db      	uxtb	r3, r3
 8006962:	227f      	movs	r2, #127	@ 0x7f
 8006964:	4013      	ands	r3, r2
 8006966:	b2da      	uxtb	r2, r3
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	0d9b      	lsrs	r3, r3, #22
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2201      	movs	r2, #1
 8006974:	4013      	ands	r3, r2
 8006976:	b2da      	uxtb	r2, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	0e1b      	lsrs	r3, r3, #24
 8006986:	b2db      	uxtb	r3, r3
 8006988:	223f      	movs	r2, #63	@ 0x3f
 800698a:	4013      	ands	r3, r2
 800698c:	b2d9      	uxtb	r1, r3
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2220      	movs	r2, #32
 8006992:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	2380      	movs	r3, #128	@ 0x80
 8006998:	05db      	lsls	r3, r3, #23
 800699a:	401a      	ands	r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	4a19      	ldr	r2, [pc, #100]	@ (8006a08 <HAL_RTC_GetAlarm+0x188>)
 80069a4:	401a      	ands	r2, r3
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d125      	bne.n	80069fc <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	0018      	movs	r0, r3
 80069b6:	f000 f93b 	bl	8006c30 <RTC_Bcd2ToByte>
 80069ba:	0003      	movs	r3, r0
 80069bc:	001a      	movs	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	785b      	ldrb	r3, [r3, #1]
 80069c6:	0018      	movs	r0, r3
 80069c8:	f000 f932 	bl	8006c30 <RTC_Bcd2ToByte>
 80069cc:	0003      	movs	r3, r0
 80069ce:	001a      	movs	r2, r3
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	789b      	ldrb	r3, [r3, #2]
 80069d8:	0018      	movs	r0, r3
 80069da:	f000 f929 	bl	8006c30 <RTC_Bcd2ToByte>
 80069de:	0003      	movs	r3, r0
 80069e0:	001a      	movs	r2, r3
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2220      	movs	r2, #32
 80069ea:	5c9b      	ldrb	r3, [r3, r2]
 80069ec:	0018      	movs	r0, r3
 80069ee:	f000 f91f 	bl	8006c30 <RTC_Bcd2ToByte>
 80069f2:	0003      	movs	r3, r0
 80069f4:	0019      	movs	r1, r3
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2220      	movs	r2, #32
 80069fa:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	0018      	movs	r0, r3
 8006a00:	46bd      	mov	sp, r7
 8006a02:	b006      	add	sp, #24
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	46c0      	nop			@ (mov r8, r8)
 8006a08:	80808080 	.word	0x80808080

08006a0c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699a      	ldr	r2, [r3, #24]
 8006a1a:	2380      	movs	r3, #128	@ 0x80
 8006a1c:	015b      	lsls	r3, r3, #5
 8006a1e:	4013      	ands	r3, r2
 8006a20:	d011      	beq.n	8006a46 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a28:	2201      	movs	r2, #1
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	d00b      	beq.n	8006a46 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2101      	movs	r1, #1
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	0018      	movs	r0, r3
 8006a42:	f7fb fb97 	bl	8002174 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	699a      	ldr	r2, [r3, #24]
 8006a4c:	2380      	movs	r3, #128	@ 0x80
 8006a4e:	019b      	lsls	r3, r3, #6
 8006a50:	4013      	ands	r3, r2
 8006a52:	d011      	beq.n	8006a78 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	d00b      	beq.n	8006a78 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2102      	movs	r1, #2
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	0018      	movs	r0, r3
 8006a74:	f000 f9a4 	bl	8006dc0 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2229      	movs	r2, #41	@ 0x29
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	5499      	strb	r1, [r3, r2]
}
 8006a80:	46c0      	nop			@ (mov r8, r8)
 8006a82:	46bd      	mov	sp, r7
 8006a84:	b002      	add	sp, #8
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a0e      	ldr	r2, [pc, #56]	@ (8006ad0 <HAL_RTC_WaitForSynchro+0x48>)
 8006a96:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006a98:	f7fc fe76 	bl	8003788 <HAL_GetTick>
 8006a9c:	0003      	movs	r3, r0
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006aa0:	e00a      	b.n	8006ab8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006aa2:	f7fc fe71 	bl	8003788 <HAL_GetTick>
 8006aa6:	0002      	movs	r2, r0
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	1ad2      	subs	r2, r2, r3
 8006aac:	23fa      	movs	r3, #250	@ 0xfa
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d901      	bls.n	8006ab8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e006      	b.n	8006ac6 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	d0ee      	beq.n	8006aa2 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	b004      	add	sp, #16
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	46c0      	nop			@ (mov r8, r8)
 8006ad0:	0001005f 	.word	0x0001005f

08006ad4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006adc:	230f      	movs	r3, #15
 8006ade:	18fb      	adds	r3, r7, r3
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	2240      	movs	r2, #64	@ 0x40
 8006aec:	4013      	ands	r3, r2
 8006aee:	d12c      	bne.n	8006b4a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68da      	ldr	r2, [r3, #12]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2180      	movs	r1, #128	@ 0x80
 8006afc:	430a      	orrs	r2, r1
 8006afe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006b00:	f7fc fe42 	bl	8003788 <HAL_GetTick>
 8006b04:	0003      	movs	r3, r0
 8006b06:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006b08:	e014      	b.n	8006b34 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006b0a:	f7fc fe3d 	bl	8003788 <HAL_GetTick>
 8006b0e:	0002      	movs	r2, r0
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	1ad2      	subs	r2, r2, r3
 8006b14:	200f      	movs	r0, #15
 8006b16:	183b      	adds	r3, r7, r0
 8006b18:	1839      	adds	r1, r7, r0
 8006b1a:	7809      	ldrb	r1, [r1, #0]
 8006b1c:	7019      	strb	r1, [r3, #0]
 8006b1e:	23fa      	movs	r3, #250	@ 0xfa
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d906      	bls.n	8006b34 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8006b26:	183b      	adds	r3, r7, r0
 8006b28:	2203      	movs	r2, #3
 8006b2a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2229      	movs	r2, #41	@ 0x29
 8006b30:	2103      	movs	r1, #3
 8006b32:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	2240      	movs	r2, #64	@ 0x40
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	d104      	bne.n	8006b4a <RTC_EnterInitMode+0x76>
 8006b40:	230f      	movs	r3, #15
 8006b42:	18fb      	adds	r3, r7, r3
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	d1df      	bne.n	8006b0a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006b4a:	230f      	movs	r3, #15
 8006b4c:	18fb      	adds	r3, r7, r3
 8006b4e:	781b      	ldrb	r3, [r3, #0]
}
 8006b50:	0018      	movs	r0, r3
 8006b52:	46bd      	mov	sp, r7
 8006b54:	b004      	add	sp, #16
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b58:	b590      	push	{r4, r7, lr}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b60:	240f      	movs	r4, #15
 8006b62:	193b      	adds	r3, r7, r4
 8006b64:	2200      	movs	r2, #0
 8006b66:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006b68:	4b1c      	ldr	r3, [pc, #112]	@ (8006bdc <RTC_ExitInitMode+0x84>)
 8006b6a:	68da      	ldr	r2, [r3, #12]
 8006b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8006bdc <RTC_ExitInitMode+0x84>)
 8006b6e:	2180      	movs	r1, #128	@ 0x80
 8006b70:	438a      	bics	r2, r1
 8006b72:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006b74:	4b19      	ldr	r3, [pc, #100]	@ (8006bdc <RTC_ExitInitMode+0x84>)
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	d10d      	bne.n	8006b9a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	0018      	movs	r0, r3
 8006b82:	f7ff ff81 	bl	8006a88 <HAL_RTC_WaitForSynchro>
 8006b86:	1e03      	subs	r3, r0, #0
 8006b88:	d021      	beq.n	8006bce <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2229      	movs	r2, #41	@ 0x29
 8006b8e:	2103      	movs	r1, #3
 8006b90:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006b92:	193b      	adds	r3, r7, r4
 8006b94:	2203      	movs	r2, #3
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	e019      	b.n	8006bce <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b9a:	4b10      	ldr	r3, [pc, #64]	@ (8006bdc <RTC_ExitInitMode+0x84>)
 8006b9c:	699a      	ldr	r2, [r3, #24]
 8006b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8006bdc <RTC_ExitInitMode+0x84>)
 8006ba0:	2120      	movs	r1, #32
 8006ba2:	438a      	bics	r2, r1
 8006ba4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f7ff ff6d 	bl	8006a88 <HAL_RTC_WaitForSynchro>
 8006bae:	1e03      	subs	r3, r0, #0
 8006bb0:	d007      	beq.n	8006bc2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2229      	movs	r2, #41	@ 0x29
 8006bb6:	2103      	movs	r1, #3
 8006bb8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006bba:	230f      	movs	r3, #15
 8006bbc:	18fb      	adds	r3, r7, r3
 8006bbe:	2203      	movs	r2, #3
 8006bc0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006bc2:	4b06      	ldr	r3, [pc, #24]	@ (8006bdc <RTC_ExitInitMode+0x84>)
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	4b05      	ldr	r3, [pc, #20]	@ (8006bdc <RTC_ExitInitMode+0x84>)
 8006bc8:	2120      	movs	r1, #32
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006bce:	230f      	movs	r3, #15
 8006bd0:	18fb      	adds	r3, r7, r3
 8006bd2:	781b      	ldrb	r3, [r3, #0]
}
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	b005      	add	sp, #20
 8006bda:	bd90      	pop	{r4, r7, pc}
 8006bdc:	40002800 	.word	0x40002800

08006be0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	0002      	movs	r2, r0
 8006be8:	1dfb      	adds	r3, r7, #7
 8006bea:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006bf0:	230b      	movs	r3, #11
 8006bf2:	18fb      	adds	r3, r7, r3
 8006bf4:	1dfa      	adds	r2, r7, #7
 8006bf6:	7812      	ldrb	r2, [r2, #0]
 8006bf8:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8006bfa:	e008      	b.n	8006c0e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006c02:	220b      	movs	r2, #11
 8006c04:	18bb      	adds	r3, r7, r2
 8006c06:	18ba      	adds	r2, r7, r2
 8006c08:	7812      	ldrb	r2, [r2, #0]
 8006c0a:	3a0a      	subs	r2, #10
 8006c0c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8006c0e:	210b      	movs	r1, #11
 8006c10:	187b      	adds	r3, r7, r1
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b09      	cmp	r3, #9
 8006c16:	d8f1      	bhi.n	8006bfc <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	b2da      	uxtb	r2, r3
 8006c20:	187b      	adds	r3, r7, r1
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	b2db      	uxtb	r3, r3
}
 8006c28:	0018      	movs	r0, r3
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	b004      	add	sp, #16
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	0002      	movs	r2, r0
 8006c38:	1dfb      	adds	r3, r7, #7
 8006c3a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006c3c:	1dfb      	adds	r3, r7, #7
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	091b      	lsrs	r3, r3, #4
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	001a      	movs	r2, r3
 8006c46:	0013      	movs	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	189b      	adds	r3, r3, r2
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	1dfb      	adds	r3, r7, #7
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	210f      	movs	r1, #15
 8006c5a:	400b      	ands	r3, r1
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	18d3      	adds	r3, r2, r3
 8006c60:	b2db      	uxtb	r3, r3
}
 8006c62:	0018      	movs	r0, r3
 8006c64:	46bd      	mov	sp, r7
 8006c66:	b004      	add	sp, #16
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b086      	sub	sp, #24
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	60f8      	str	r0, [r7, #12]
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	607a      	str	r2, [r7, #4]
 8006c76:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2228      	movs	r2, #40	@ 0x28
 8006c7c:	5c9b      	ldrb	r3, [r3, r2]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d101      	bne.n	8006c86 <HAL_RTCEx_SetSmoothCalib+0x1c>
 8006c82:	2302      	movs	r3, #2
 8006c84:	e04f      	b.n	8006d26 <HAL_RTCEx_SetSmoothCalib+0xbc>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2228      	movs	r2, #40	@ 0x28
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2229      	movs	r2, #41	@ 0x29
 8006c92:	2102      	movs	r1, #2
 8006c94:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	22ca      	movs	r2, #202	@ 0xca
 8006c9c:	625a      	str	r2, [r3, #36]	@ 0x24
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2253      	movs	r2, #83	@ 0x53
 8006ca4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	2380      	movs	r3, #128	@ 0x80
 8006cae:	025b      	lsls	r3, r3, #9
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	d022      	beq.n	8006cfa <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8006cb4:	f7fc fd68 	bl	8003788 <HAL_GetTick>
 8006cb8:	0003      	movs	r3, r0
 8006cba:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8006cbc:	e016      	b.n	8006cec <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006cbe:	f7fc fd63 	bl	8003788 <HAL_GetTick>
 8006cc2:	0002      	movs	r2, r0
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	1ad2      	subs	r2, r2, r3
 8006cc8:	23fa      	movs	r3, #250	@ 0xfa
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d90d      	bls.n	8006cec <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	22ff      	movs	r2, #255	@ 0xff
 8006cd6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2229      	movs	r2, #41	@ 0x29
 8006cdc:	2103      	movs	r1, #3
 8006cde:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2228      	movs	r2, #40	@ 0x28
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e01c      	b.n	8006d26 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68da      	ldr	r2, [r3, #12]
 8006cf2:	2380      	movs	r3, #128	@ 0x80
 8006cf4:	025b      	lsls	r3, r3, #9
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	d1e1      	bne.n	8006cbe <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	0011      	movs	r1, r2
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	22ff      	movs	r2, #255	@ 0xff
 8006d12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2229      	movs	r2, #41	@ 0x29
 8006d18:	2101      	movs	r1, #1
 8006d1a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2228      	movs	r2, #40	@ 0x28
 8006d20:	2100      	movs	r1, #0
 8006d22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	0018      	movs	r0, r3
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	b006      	add	sp, #24
 8006d2c:	bd80      	pop	{r7, pc}
	...

08006d30 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2228      	movs	r2, #40	@ 0x28
 8006d3e:	5c9b      	ldrb	r3, [r3, r2]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e035      	b.n	8006db4 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2228      	movs	r2, #40	@ 0x28
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2229      	movs	r2, #41	@ 0x29
 8006d54:	2102      	movs	r1, #2
 8006d56:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	22ca      	movs	r2, #202	@ 0xca
 8006d5e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2253      	movs	r2, #83	@ 0x53
 8006d66:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4912      	ldr	r1, [pc, #72]	@ (8006dbc <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8006d74:	400a      	ands	r2, r1
 8006d76:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6999      	ldr	r1, [r3, #24]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	699a      	ldr	r2, [r3, #24]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2180      	movs	r1, #128	@ 0x80
 8006d94:	0409      	lsls	r1, r1, #16
 8006d96:	430a      	orrs	r2, r1
 8006d98:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	22ff      	movs	r2, #255	@ 0xff
 8006da0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2229      	movs	r2, #41	@ 0x29
 8006da6:	2101      	movs	r1, #1
 8006da8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2228      	movs	r2, #40	@ 0x28
 8006dae:	2100      	movs	r1, #0
 8006db0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	0018      	movs	r0, r3
 8006db6:	46bd      	mov	sp, r7
 8006db8:	b002      	add	sp, #8
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	fff7ffff 	.word	0xfff7ffff

08006dc0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006dc8:	46c0      	nop			@ (mov r8, r8)
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	b002      	add	sp, #8
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	001a      	movs	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	18d3      	adds	r3, r2, r3
 8006de8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	3301      	adds	r3, #1
 8006dee:	33ff      	adds	r3, #255	@ 0xff
 8006df0:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	18d3      	adds	r3, r2, r3
 8006dfa:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	601a      	str	r2, [r3, #0]
}
 8006e02:	46c0      	nop			@ (mov r8, r8)
 8006e04:	46bd      	mov	sp, r7
 8006e06:	b006      	add	sp, #24
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	001a      	movs	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	18d3      	adds	r3, r2, r3
 8006e20:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3301      	adds	r3, #1
 8006e26:	33ff      	adds	r3, #255	@ 0xff
 8006e28:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	18d3      	adds	r3, r2, r3
 8006e32:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	681b      	ldr	r3, [r3, #0]
}
 8006e38:	0018      	movs	r0, r3
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	b004      	add	sp, #16
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e0a8      	b.n	8006fa4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d109      	bne.n	8006e6e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	2382      	movs	r3, #130	@ 0x82
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d009      	beq.n	8006e7a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	61da      	str	r2, [r3, #28]
 8006e6c:	e005      	b.n	8006e7a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	225d      	movs	r2, #93	@ 0x5d
 8006e84:	5c9b      	ldrb	r3, [r3, r2]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d107      	bne.n	8006e9c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	225c      	movs	r2, #92	@ 0x5c
 8006e90:	2100      	movs	r1, #0
 8006e92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	0018      	movs	r0, r3
 8006e98:	f7fc fa00 	bl	800329c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	225d      	movs	r2, #93	@ 0x5d
 8006ea0:	2102      	movs	r1, #2
 8006ea2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2140      	movs	r1, #64	@ 0x40
 8006eb0:	438a      	bics	r2, r1
 8006eb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	23e0      	movs	r3, #224	@ 0xe0
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d902      	bls.n	8006ec6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	e002      	b.n	8006ecc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ec6:	2380      	movs	r3, #128	@ 0x80
 8006ec8:	015b      	lsls	r3, r3, #5
 8006eca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68da      	ldr	r2, [r3, #12]
 8006ed0:	23f0      	movs	r3, #240	@ 0xf0
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d008      	beq.n	8006eea <HAL_SPI_Init+0xaa>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	23e0      	movs	r3, #224	@ 0xe0
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d002      	beq.n	8006eea <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	2382      	movs	r3, #130	@ 0x82
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	401a      	ands	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6899      	ldr	r1, [r3, #8]
 8006ef8:	2384      	movs	r3, #132	@ 0x84
 8006efa:	021b      	lsls	r3, r3, #8
 8006efc:	400b      	ands	r3, r1
 8006efe:	431a      	orrs	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	2102      	movs	r1, #2
 8006f06:	400b      	ands	r3, r1
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	2101      	movs	r1, #1
 8006f10:	400b      	ands	r3, r1
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6999      	ldr	r1, [r3, #24]
 8006f18:	2380      	movs	r3, #128	@ 0x80
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	400b      	ands	r3, r1
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	2138      	movs	r1, #56	@ 0x38
 8006f26:	400b      	ands	r3, r1
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	2180      	movs	r1, #128	@ 0x80
 8006f30:	400b      	ands	r3, r1
 8006f32:	431a      	orrs	r2, r3
 8006f34:	0011      	movs	r1, r2
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f3a:	2380      	movs	r3, #128	@ 0x80
 8006f3c:	019b      	lsls	r3, r3, #6
 8006f3e:	401a      	ands	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	0c1b      	lsrs	r3, r3, #16
 8006f4e:	2204      	movs	r2, #4
 8006f50:	401a      	ands	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f56:	2110      	movs	r1, #16
 8006f58:	400b      	ands	r3, r1
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f60:	2108      	movs	r1, #8
 8006f62:	400b      	ands	r3, r1
 8006f64:	431a      	orrs	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68d9      	ldr	r1, [r3, #12]
 8006f6a:	23f0      	movs	r3, #240	@ 0xf0
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	400b      	ands	r3, r1
 8006f70:	431a      	orrs	r2, r3
 8006f72:	0011      	movs	r1, r2
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	2380      	movs	r3, #128	@ 0x80
 8006f78:	015b      	lsls	r3, r3, #5
 8006f7a:	401a      	ands	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	69da      	ldr	r2, [r3, #28]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4907      	ldr	r1, [pc, #28]	@ (8006fac <HAL_SPI_Init+0x16c>)
 8006f90:	400a      	ands	r2, r1
 8006f92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	225d      	movs	r2, #93	@ 0x5d
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	b004      	add	sp, #16
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	fffff7ff 	.word	0xfffff7ff

08006fb0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	1dbb      	adds	r3, r7, #6
 8006fbe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fc0:	231f      	movs	r3, #31
 8006fc2:	18fb      	adds	r3, r7, r3
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	225c      	movs	r2, #92	@ 0x5c
 8006fcc:	5c9b      	ldrb	r3, [r3, r2]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d101      	bne.n	8006fd6 <HAL_SPI_Transmit+0x26>
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	e147      	b.n	8007266 <HAL_SPI_Transmit+0x2b6>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	225c      	movs	r2, #92	@ 0x5c
 8006fda:	2101      	movs	r1, #1
 8006fdc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fde:	f7fc fbd3 	bl	8003788 <HAL_GetTick>
 8006fe2:	0003      	movs	r3, r0
 8006fe4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006fe6:	2316      	movs	r3, #22
 8006fe8:	18fb      	adds	r3, r7, r3
 8006fea:	1dba      	adds	r2, r7, #6
 8006fec:	8812      	ldrh	r2, [r2, #0]
 8006fee:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	225d      	movs	r2, #93	@ 0x5d
 8006ff4:	5c9b      	ldrb	r3, [r3, r2]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d004      	beq.n	8007006 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006ffc:	231f      	movs	r3, #31
 8006ffe:	18fb      	adds	r3, r7, r3
 8007000:	2202      	movs	r2, #2
 8007002:	701a      	strb	r2, [r3, #0]
    goto error;
 8007004:	e128      	b.n	8007258 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <HAL_SPI_Transmit+0x64>
 800700c:	1dbb      	adds	r3, r7, #6
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d104      	bne.n	800701e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007014:	231f      	movs	r3, #31
 8007016:	18fb      	adds	r3, r7, r3
 8007018:	2201      	movs	r2, #1
 800701a:	701a      	strb	r2, [r3, #0]
    goto error;
 800701c:	e11c      	b.n	8007258 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	225d      	movs	r2, #93	@ 0x5d
 8007022:	2103      	movs	r1, #3
 8007024:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	1dba      	adds	r2, r7, #6
 8007036:	8812      	ldrh	r2, [r2, #0]
 8007038:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	1dba      	adds	r2, r7, #6
 800703e:	8812      	ldrh	r2, [r2, #0]
 8007040:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2244      	movs	r2, #68	@ 0x44
 800704c:	2100      	movs	r1, #0
 800704e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2246      	movs	r2, #70	@ 0x46
 8007054:	2100      	movs	r1, #0
 8007056:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	2380      	movs	r3, #128	@ 0x80
 800706a:	021b      	lsls	r3, r3, #8
 800706c:	429a      	cmp	r2, r3
 800706e:	d110      	bne.n	8007092 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2140      	movs	r1, #64	@ 0x40
 800707c:	438a      	bics	r2, r1
 800707e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2180      	movs	r1, #128	@ 0x80
 800708c:	01c9      	lsls	r1, r1, #7
 800708e:	430a      	orrs	r2, r1
 8007090:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2240      	movs	r2, #64	@ 0x40
 800709a:	4013      	ands	r3, r2
 800709c:	2b40      	cmp	r3, #64	@ 0x40
 800709e:	d007      	beq.n	80070b0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2140      	movs	r1, #64	@ 0x40
 80070ac:	430a      	orrs	r2, r1
 80070ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	23e0      	movs	r3, #224	@ 0xe0
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d952      	bls.n	8007162 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d004      	beq.n	80070ce <HAL_SPI_Transmit+0x11e>
 80070c4:	2316      	movs	r3, #22
 80070c6:	18fb      	adds	r3, r7, r3
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d143      	bne.n	8007156 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d2:	881a      	ldrh	r2, [r3, #0]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070de:	1c9a      	adds	r2, r3, #2
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	3b01      	subs	r3, #1
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070f2:	e030      	b.n	8007156 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	2202      	movs	r2, #2
 80070fc:	4013      	ands	r3, r2
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d112      	bne.n	8007128 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007106:	881a      	ldrh	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007112:	1c9a      	adds	r2, r3, #2
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800711c:	b29b      	uxth	r3, r3
 800711e:	3b01      	subs	r3, #1
 8007120:	b29a      	uxth	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007126:	e016      	b.n	8007156 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007128:	f7fc fb2e 	bl	8003788 <HAL_GetTick>
 800712c:	0002      	movs	r2, r0
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	429a      	cmp	r2, r3
 8007136:	d802      	bhi.n	800713e <HAL_SPI_Transmit+0x18e>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	3301      	adds	r3, #1
 800713c:	d102      	bne.n	8007144 <HAL_SPI_Transmit+0x194>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d108      	bne.n	8007156 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8007144:	231f      	movs	r3, #31
 8007146:	18fb      	adds	r3, r7, r3
 8007148:	2203      	movs	r2, #3
 800714a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	225d      	movs	r2, #93	@ 0x5d
 8007150:	2101      	movs	r1, #1
 8007152:	5499      	strb	r1, [r3, r2]
          goto error;
 8007154:	e080      	b.n	8007258 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800715a:	b29b      	uxth	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1c9      	bne.n	80070f4 <HAL_SPI_Transmit+0x144>
 8007160:	e053      	b.n	800720a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d004      	beq.n	8007174 <HAL_SPI_Transmit+0x1c4>
 800716a:	2316      	movs	r3, #22
 800716c:	18fb      	adds	r3, r7, r3
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d145      	bne.n	8007200 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	330c      	adds	r3, #12
 800717e:	7812      	ldrb	r2, [r2, #0]
 8007180:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007186:	1c5a      	adds	r2, r3, #1
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007190:	b29b      	uxth	r3, r3
 8007192:	3b01      	subs	r3, #1
 8007194:	b29a      	uxth	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800719a:	e031      	b.n	8007200 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	2202      	movs	r2, #2
 80071a4:	4013      	ands	r3, r2
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d113      	bne.n	80071d2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	330c      	adds	r3, #12
 80071b4:	7812      	ldrb	r2, [r2, #0]
 80071b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	3b01      	subs	r3, #1
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80071d0:	e016      	b.n	8007200 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071d2:	f7fc fad9 	bl	8003788 <HAL_GetTick>
 80071d6:	0002      	movs	r2, r0
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d802      	bhi.n	80071e8 <HAL_SPI_Transmit+0x238>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	3301      	adds	r3, #1
 80071e6:	d102      	bne.n	80071ee <HAL_SPI_Transmit+0x23e>
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d108      	bne.n	8007200 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80071ee:	231f      	movs	r3, #31
 80071f0:	18fb      	adds	r3, r7, r3
 80071f2:	2203      	movs	r2, #3
 80071f4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	225d      	movs	r2, #93	@ 0x5d
 80071fa:	2101      	movs	r1, #1
 80071fc:	5499      	strb	r1, [r3, r2]
          goto error;
 80071fe:	e02b      	b.n	8007258 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007204:	b29b      	uxth	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1c8      	bne.n	800719c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	0018      	movs	r0, r3
 8007212:	f000 fcef 	bl	8007bf4 <SPI_EndRxTxTransaction>
 8007216:	1e03      	subs	r3, r0, #0
 8007218:	d002      	beq.n	8007220 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2220      	movs	r2, #32
 800721e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007228:	2300      	movs	r3, #0
 800722a:	613b      	str	r3, [r7, #16]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	613b      	str	r3, [r7, #16]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	613b      	str	r3, [r7, #16]
 800723c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007242:	2b00      	cmp	r3, #0
 8007244:	d004      	beq.n	8007250 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8007246:	231f      	movs	r3, #31
 8007248:	18fb      	adds	r3, r7, r3
 800724a:	2201      	movs	r2, #1
 800724c:	701a      	strb	r2, [r3, #0]
 800724e:	e003      	b.n	8007258 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	225d      	movs	r2, #93	@ 0x5d
 8007254:	2101      	movs	r1, #1
 8007256:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	225c      	movs	r2, #92	@ 0x5c
 800725c:	2100      	movs	r1, #0
 800725e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007260:	231f      	movs	r3, #31
 8007262:	18fb      	adds	r3, r7, r3
 8007264:	781b      	ldrb	r3, [r3, #0]
}
 8007266:	0018      	movs	r0, r3
 8007268:	46bd      	mov	sp, r7
 800726a:	b008      	add	sp, #32
 800726c:	bd80      	pop	{r7, pc}
	...

08007270 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007270:	b590      	push	{r4, r7, lr}
 8007272:	b089      	sub	sp, #36	@ 0x24
 8007274:	af02      	add	r7, sp, #8
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	1dbb      	adds	r3, r7, #6
 800727e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007280:	2117      	movs	r1, #23
 8007282:	187b      	adds	r3, r7, r1
 8007284:	2200      	movs	r2, #0
 8007286:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	225d      	movs	r2, #93	@ 0x5d
 800728c:	5c9b      	ldrb	r3, [r3, r2]
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b01      	cmp	r3, #1
 8007292:	d003      	beq.n	800729c <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8007294:	187b      	adds	r3, r7, r1
 8007296:	2202      	movs	r2, #2
 8007298:	701a      	strb	r2, [r3, #0]
    goto error;
 800729a:	e12b      	b.n	80074f4 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	2382      	movs	r3, #130	@ 0x82
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d113      	bne.n	80072d0 <HAL_SPI_Receive+0x60>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10f      	bne.n	80072d0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	225d      	movs	r2, #93	@ 0x5d
 80072b4:	2104      	movs	r1, #4
 80072b6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80072b8:	1dbb      	adds	r3, r7, #6
 80072ba:	881c      	ldrh	r4, [r3, #0]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	68b9      	ldr	r1, [r7, #8]
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	0023      	movs	r3, r4
 80072c8:	f000 f924 	bl	8007514 <HAL_SPI_TransmitReceive>
 80072cc:	0003      	movs	r3, r0
 80072ce:	e118      	b.n	8007502 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	225c      	movs	r2, #92	@ 0x5c
 80072d4:	5c9b      	ldrb	r3, [r3, r2]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <HAL_SPI_Receive+0x6e>
 80072da:	2302      	movs	r3, #2
 80072dc:	e111      	b.n	8007502 <HAL_SPI_Receive+0x292>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	225c      	movs	r2, #92	@ 0x5c
 80072e2:	2101      	movs	r1, #1
 80072e4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072e6:	f7fc fa4f 	bl	8003788 <HAL_GetTick>
 80072ea:	0003      	movs	r3, r0
 80072ec:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <HAL_SPI_Receive+0x8c>
 80072f4:	1dbb      	adds	r3, r7, #6
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d104      	bne.n	8007306 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80072fc:	2317      	movs	r3, #23
 80072fe:	18fb      	adds	r3, r7, r3
 8007300:	2201      	movs	r2, #1
 8007302:	701a      	strb	r2, [r3, #0]
    goto error;
 8007304:	e0f6      	b.n	80074f4 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	225d      	movs	r2, #93	@ 0x5d
 800730a:	2104      	movs	r1, #4
 800730c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	1dba      	adds	r2, r7, #6
 800731e:	2144      	movs	r1, #68	@ 0x44
 8007320:	8812      	ldrh	r2, [r2, #0]
 8007322:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	1dba      	adds	r2, r7, #6
 8007328:	2146      	movs	r1, #70	@ 0x46
 800732a:	8812      	ldrh	r2, [r2, #0]
 800732c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	68da      	ldr	r2, [r3, #12]
 8007350:	23e0      	movs	r3, #224	@ 0xe0
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	429a      	cmp	r2, r3
 8007356:	d908      	bls.n	800736a <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	496a      	ldr	r1, [pc, #424]	@ (800750c <HAL_SPI_Receive+0x29c>)
 8007364:	400a      	ands	r2, r1
 8007366:	605a      	str	r2, [r3, #4]
 8007368:	e008      	b.n	800737c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2180      	movs	r1, #128	@ 0x80
 8007376:	0149      	lsls	r1, r1, #5
 8007378:	430a      	orrs	r2, r1
 800737a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	2380      	movs	r3, #128	@ 0x80
 8007382:	021b      	lsls	r3, r3, #8
 8007384:	429a      	cmp	r2, r3
 8007386:	d10f      	bne.n	80073a8 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2140      	movs	r1, #64	@ 0x40
 8007394:	438a      	bics	r2, r1
 8007396:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	495b      	ldr	r1, [pc, #364]	@ (8007510 <HAL_SPI_Receive+0x2a0>)
 80073a4:	400a      	ands	r2, r1
 80073a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2240      	movs	r2, #64	@ 0x40
 80073b0:	4013      	ands	r3, r2
 80073b2:	2b40      	cmp	r3, #64	@ 0x40
 80073b4:	d007      	beq.n	80073c6 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2140      	movs	r1, #64	@ 0x40
 80073c2:	430a      	orrs	r2, r1
 80073c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	23e0      	movs	r3, #224	@ 0xe0
 80073cc:	00db      	lsls	r3, r3, #3
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d900      	bls.n	80073d4 <HAL_SPI_Receive+0x164>
 80073d2:	e071      	b.n	80074b8 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80073d4:	e035      	b.n	8007442 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	2201      	movs	r2, #1
 80073de:	4013      	ands	r3, r2
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d117      	bne.n	8007414 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	330c      	adds	r3, #12
 80073ea:	001a      	movs	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f0:	7812      	ldrb	r2, [r2, #0]
 80073f2:	b2d2      	uxtb	r2, r2
 80073f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2246      	movs	r2, #70	@ 0x46
 8007404:	5a9b      	ldrh	r3, [r3, r2]
 8007406:	b29b      	uxth	r3, r3
 8007408:	3b01      	subs	r3, #1
 800740a:	b299      	uxth	r1, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2246      	movs	r2, #70	@ 0x46
 8007410:	5299      	strh	r1, [r3, r2]
 8007412:	e016      	b.n	8007442 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007414:	f7fc f9b8 	bl	8003788 <HAL_GetTick>
 8007418:	0002      	movs	r2, r0
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	429a      	cmp	r2, r3
 8007422:	d802      	bhi.n	800742a <HAL_SPI_Receive+0x1ba>
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	3301      	adds	r3, #1
 8007428:	d102      	bne.n	8007430 <HAL_SPI_Receive+0x1c0>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d108      	bne.n	8007442 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8007430:	2317      	movs	r3, #23
 8007432:	18fb      	adds	r3, r7, r3
 8007434:	2203      	movs	r2, #3
 8007436:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	225d      	movs	r2, #93	@ 0x5d
 800743c:	2101      	movs	r1, #1
 800743e:	5499      	strb	r1, [r3, r2]
          goto error;
 8007440:	e058      	b.n	80074f4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2246      	movs	r2, #70	@ 0x46
 8007446:	5a9b      	ldrh	r3, [r3, r2]
 8007448:	b29b      	uxth	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1c3      	bne.n	80073d6 <HAL_SPI_Receive+0x166>
 800744e:	e039      	b.n	80074c4 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	2201      	movs	r2, #1
 8007458:	4013      	ands	r3, r2
 800745a:	2b01      	cmp	r3, #1
 800745c:	d115      	bne.n	800748a <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68da      	ldr	r2, [r3, #12]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007468:	b292      	uxth	r2, r2
 800746a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007470:	1c9a      	adds	r2, r3, #2
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2246      	movs	r2, #70	@ 0x46
 800747a:	5a9b      	ldrh	r3, [r3, r2]
 800747c:	b29b      	uxth	r3, r3
 800747e:	3b01      	subs	r3, #1
 8007480:	b299      	uxth	r1, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2246      	movs	r2, #70	@ 0x46
 8007486:	5299      	strh	r1, [r3, r2]
 8007488:	e016      	b.n	80074b8 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800748a:	f7fc f97d 	bl	8003788 <HAL_GetTick>
 800748e:	0002      	movs	r2, r0
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	429a      	cmp	r2, r3
 8007498:	d802      	bhi.n	80074a0 <HAL_SPI_Receive+0x230>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	3301      	adds	r3, #1
 800749e:	d102      	bne.n	80074a6 <HAL_SPI_Receive+0x236>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d108      	bne.n	80074b8 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80074a6:	2317      	movs	r3, #23
 80074a8:	18fb      	adds	r3, r7, r3
 80074aa:	2203      	movs	r2, #3
 80074ac:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	225d      	movs	r2, #93	@ 0x5d
 80074b2:	2101      	movs	r1, #1
 80074b4:	5499      	strb	r1, [r3, r2]
          goto error;
 80074b6:	e01d      	b.n	80074f4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2246      	movs	r2, #70	@ 0x46
 80074bc:	5a9b      	ldrh	r3, [r3, r2]
 80074be:	b29b      	uxth	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1c5      	bne.n	8007450 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	0018      	movs	r0, r3
 80074cc:	f000 fb34 	bl	8007b38 <SPI_EndRxTransaction>
 80074d0:	1e03      	subs	r3, r0, #0
 80074d2:	d002      	beq.n	80074da <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2220      	movs	r2, #32
 80074d8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d004      	beq.n	80074ec <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80074e2:	2317      	movs	r3, #23
 80074e4:	18fb      	adds	r3, r7, r3
 80074e6:	2201      	movs	r2, #1
 80074e8:	701a      	strb	r2, [r3, #0]
 80074ea:	e003      	b.n	80074f4 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	225d      	movs	r2, #93	@ 0x5d
 80074f0:	2101      	movs	r1, #1
 80074f2:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	225c      	movs	r2, #92	@ 0x5c
 80074f8:	2100      	movs	r1, #0
 80074fa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80074fc:	2317      	movs	r3, #23
 80074fe:	18fb      	adds	r3, r7, r3
 8007500:	781b      	ldrb	r3, [r3, #0]
}
 8007502:	0018      	movs	r0, r3
 8007504:	46bd      	mov	sp, r7
 8007506:	b007      	add	sp, #28
 8007508:	bd90      	pop	{r4, r7, pc}
 800750a:	46c0      	nop			@ (mov r8, r8)
 800750c:	ffffefff 	.word	0xffffefff
 8007510:	ffffbfff 	.word	0xffffbfff

08007514 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08a      	sub	sp, #40	@ 0x28
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	001a      	movs	r2, r3
 8007522:	1cbb      	adds	r3, r7, #2
 8007524:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007526:	2301      	movs	r3, #1
 8007528:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800752a:	2323      	movs	r3, #35	@ 0x23
 800752c:	18fb      	adds	r3, r7, r3
 800752e:	2200      	movs	r2, #0
 8007530:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	225c      	movs	r2, #92	@ 0x5c
 8007536:	5c9b      	ldrb	r3, [r3, r2]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d101      	bne.n	8007540 <HAL_SPI_TransmitReceive+0x2c>
 800753c:	2302      	movs	r3, #2
 800753e:	e1c4      	b.n	80078ca <HAL_SPI_TransmitReceive+0x3b6>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	225c      	movs	r2, #92	@ 0x5c
 8007544:	2101      	movs	r1, #1
 8007546:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007548:	f7fc f91e 	bl	8003788 <HAL_GetTick>
 800754c:	0003      	movs	r3, r0
 800754e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007550:	201b      	movs	r0, #27
 8007552:	183b      	adds	r3, r7, r0
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	215d      	movs	r1, #93	@ 0x5d
 8007558:	5c52      	ldrb	r2, [r2, r1]
 800755a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007562:	2312      	movs	r3, #18
 8007564:	18fb      	adds	r3, r7, r3
 8007566:	1cba      	adds	r2, r7, #2
 8007568:	8812      	ldrh	r2, [r2, #0]
 800756a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800756c:	183b      	adds	r3, r7, r0
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d011      	beq.n	8007598 <HAL_SPI_TransmitReceive+0x84>
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	2382      	movs	r3, #130	@ 0x82
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	429a      	cmp	r2, r3
 800757c:	d107      	bne.n	800758e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d103      	bne.n	800758e <HAL_SPI_TransmitReceive+0x7a>
 8007586:	183b      	adds	r3, r7, r0
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	2b04      	cmp	r3, #4
 800758c:	d004      	beq.n	8007598 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800758e:	2323      	movs	r3, #35	@ 0x23
 8007590:	18fb      	adds	r3, r7, r3
 8007592:	2202      	movs	r2, #2
 8007594:	701a      	strb	r2, [r3, #0]
    goto error;
 8007596:	e191      	b.n	80078bc <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d006      	beq.n	80075ac <HAL_SPI_TransmitReceive+0x98>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <HAL_SPI_TransmitReceive+0x98>
 80075a4:	1cbb      	adds	r3, r7, #2
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d104      	bne.n	80075b6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80075ac:	2323      	movs	r3, #35	@ 0x23
 80075ae:	18fb      	adds	r3, r7, r3
 80075b0:	2201      	movs	r2, #1
 80075b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80075b4:	e182      	b.n	80078bc <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	225d      	movs	r2, #93	@ 0x5d
 80075ba:	5c9b      	ldrb	r3, [r3, r2]
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d003      	beq.n	80075ca <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	225d      	movs	r2, #93	@ 0x5d
 80075c6:	2105      	movs	r1, #5
 80075c8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	1cba      	adds	r2, r7, #2
 80075da:	2146      	movs	r1, #70	@ 0x46
 80075dc:	8812      	ldrh	r2, [r2, #0]
 80075de:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	1cba      	adds	r2, r7, #2
 80075e4:	2144      	movs	r1, #68	@ 0x44
 80075e6:	8812      	ldrh	r2, [r2, #0]
 80075e8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	1cba      	adds	r2, r7, #2
 80075f4:	8812      	ldrh	r2, [r2, #0]
 80075f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	1cba      	adds	r2, r7, #2
 80075fc:	8812      	ldrh	r2, [r2, #0]
 80075fe:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	68da      	ldr	r2, [r3, #12]
 8007610:	23e0      	movs	r3, #224	@ 0xe0
 8007612:	00db      	lsls	r3, r3, #3
 8007614:	429a      	cmp	r2, r3
 8007616:	d908      	bls.n	800762a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	49ac      	ldr	r1, [pc, #688]	@ (80078d4 <HAL_SPI_TransmitReceive+0x3c0>)
 8007624:	400a      	ands	r2, r1
 8007626:	605a      	str	r2, [r3, #4]
 8007628:	e008      	b.n	800763c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2180      	movs	r1, #128	@ 0x80
 8007636:	0149      	lsls	r1, r1, #5
 8007638:	430a      	orrs	r2, r1
 800763a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2240      	movs	r2, #64	@ 0x40
 8007644:	4013      	ands	r3, r2
 8007646:	2b40      	cmp	r3, #64	@ 0x40
 8007648:	d007      	beq.n	800765a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2140      	movs	r1, #64	@ 0x40
 8007656:	430a      	orrs	r2, r1
 8007658:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	68da      	ldr	r2, [r3, #12]
 800765e:	23e0      	movs	r3, #224	@ 0xe0
 8007660:	00db      	lsls	r3, r3, #3
 8007662:	429a      	cmp	r2, r3
 8007664:	d800      	bhi.n	8007668 <HAL_SPI_TransmitReceive+0x154>
 8007666:	e083      	b.n	8007770 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d005      	beq.n	800767c <HAL_SPI_TransmitReceive+0x168>
 8007670:	2312      	movs	r3, #18
 8007672:	18fb      	adds	r3, r7, r3
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d000      	beq.n	800767c <HAL_SPI_TransmitReceive+0x168>
 800767a:	e06d      	b.n	8007758 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007680:	881a      	ldrh	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768c:	1c9a      	adds	r2, r3, #2
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076a0:	e05a      	b.n	8007758 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2202      	movs	r2, #2
 80076aa:	4013      	ands	r3, r2
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d11b      	bne.n	80076e8 <HAL_SPI_TransmitReceive+0x1d4>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d016      	beq.n	80076e8 <HAL_SPI_TransmitReceive+0x1d4>
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d113      	bne.n	80076e8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c4:	881a      	ldrh	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d0:	1c9a      	adds	r2, r3, #2
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076da:	b29b      	uxth	r3, r3
 80076dc:	3b01      	subs	r3, #1
 80076de:	b29a      	uxth	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	2201      	movs	r2, #1
 80076f0:	4013      	ands	r3, r2
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d11c      	bne.n	8007730 <HAL_SPI_TransmitReceive+0x21c>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2246      	movs	r2, #70	@ 0x46
 80076fa:	5a9b      	ldrh	r3, [r3, r2]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d016      	beq.n	8007730 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68da      	ldr	r2, [r3, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800770c:	b292      	uxth	r2, r2
 800770e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007714:	1c9a      	adds	r2, r3, #2
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2246      	movs	r2, #70	@ 0x46
 800771e:	5a9b      	ldrh	r3, [r3, r2]
 8007720:	b29b      	uxth	r3, r3
 8007722:	3b01      	subs	r3, #1
 8007724:	b299      	uxth	r1, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2246      	movs	r2, #70	@ 0x46
 800772a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800772c:	2301      	movs	r3, #1
 800772e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007730:	f7fc f82a 	bl	8003788 <HAL_GetTick>
 8007734:	0002      	movs	r2, r0
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800773c:	429a      	cmp	r2, r3
 800773e:	d80b      	bhi.n	8007758 <HAL_SPI_TransmitReceive+0x244>
 8007740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007742:	3301      	adds	r3, #1
 8007744:	d008      	beq.n	8007758 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8007746:	2323      	movs	r3, #35	@ 0x23
 8007748:	18fb      	adds	r3, r7, r3
 800774a:	2203      	movs	r2, #3
 800774c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	225d      	movs	r2, #93	@ 0x5d
 8007752:	2101      	movs	r1, #1
 8007754:	5499      	strb	r1, [r3, r2]
        goto error;
 8007756:	e0b1      	b.n	80078bc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800775c:	b29b      	uxth	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d19f      	bne.n	80076a2 <HAL_SPI_TransmitReceive+0x18e>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2246      	movs	r2, #70	@ 0x46
 8007766:	5a9b      	ldrh	r3, [r3, r2]
 8007768:	b29b      	uxth	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d199      	bne.n	80076a2 <HAL_SPI_TransmitReceive+0x18e>
 800776e:	e089      	b.n	8007884 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d005      	beq.n	8007784 <HAL_SPI_TransmitReceive+0x270>
 8007778:	2312      	movs	r3, #18
 800777a:	18fb      	adds	r3, r7, r3
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d000      	beq.n	8007784 <HAL_SPI_TransmitReceive+0x270>
 8007782:	e074      	b.n	800786e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	330c      	adds	r3, #12
 800778e:	7812      	ldrb	r2, [r2, #0]
 8007790:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007796:	1c5a      	adds	r2, r3, #1
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	3b01      	subs	r3, #1
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077aa:	e060      	b.n	800786e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	2202      	movs	r2, #2
 80077b4:	4013      	ands	r3, r2
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d11c      	bne.n	80077f4 <HAL_SPI_TransmitReceive+0x2e0>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077be:	b29b      	uxth	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d017      	beq.n	80077f4 <HAL_SPI_TransmitReceive+0x2e0>
 80077c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d114      	bne.n	80077f4 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	330c      	adds	r3, #12
 80077d4:	7812      	ldrb	r2, [r2, #0]
 80077d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077dc:	1c5a      	adds	r2, r3, #1
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	3b01      	subs	r3, #1
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077f0:	2300      	movs	r3, #0
 80077f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	2201      	movs	r2, #1
 80077fc:	4013      	ands	r3, r2
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d11e      	bne.n	8007840 <HAL_SPI_TransmitReceive+0x32c>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2246      	movs	r2, #70	@ 0x46
 8007806:	5a9b      	ldrh	r3, [r3, r2]
 8007808:	b29b      	uxth	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d018      	beq.n	8007840 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	330c      	adds	r3, #12
 8007814:	001a      	movs	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781a:	7812      	ldrb	r2, [r2, #0]
 800781c:	b2d2      	uxtb	r2, r2
 800781e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2246      	movs	r2, #70	@ 0x46
 800782e:	5a9b      	ldrh	r3, [r3, r2]
 8007830:	b29b      	uxth	r3, r3
 8007832:	3b01      	subs	r3, #1
 8007834:	b299      	uxth	r1, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2246      	movs	r2, #70	@ 0x46
 800783a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800783c:	2301      	movs	r3, #1
 800783e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007840:	f7fb ffa2 	bl	8003788 <HAL_GetTick>
 8007844:	0002      	movs	r2, r0
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800784c:	429a      	cmp	r2, r3
 800784e:	d802      	bhi.n	8007856 <HAL_SPI_TransmitReceive+0x342>
 8007850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007852:	3301      	adds	r3, #1
 8007854:	d102      	bne.n	800785c <HAL_SPI_TransmitReceive+0x348>
 8007856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007858:	2b00      	cmp	r3, #0
 800785a:	d108      	bne.n	800786e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800785c:	2323      	movs	r3, #35	@ 0x23
 800785e:	18fb      	adds	r3, r7, r3
 8007860:	2203      	movs	r2, #3
 8007862:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	225d      	movs	r2, #93	@ 0x5d
 8007868:	2101      	movs	r1, #1
 800786a:	5499      	strb	r1, [r3, r2]
        goto error;
 800786c:	e026      	b.n	80078bc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d199      	bne.n	80077ac <HAL_SPI_TransmitReceive+0x298>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2246      	movs	r2, #70	@ 0x46
 800787c:	5a9b      	ldrh	r3, [r3, r2]
 800787e:	b29b      	uxth	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	d193      	bne.n	80077ac <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007884:	69fa      	ldr	r2, [r7, #28]
 8007886:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	0018      	movs	r0, r3
 800788c:	f000 f9b2 	bl	8007bf4 <SPI_EndRxTxTransaction>
 8007890:	1e03      	subs	r3, r0, #0
 8007892:	d006      	beq.n	80078a2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8007894:	2323      	movs	r3, #35	@ 0x23
 8007896:	18fb      	adds	r3, r7, r3
 8007898:	2201      	movs	r2, #1
 800789a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2220      	movs	r2, #32
 80078a0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d004      	beq.n	80078b4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80078aa:	2323      	movs	r3, #35	@ 0x23
 80078ac:	18fb      	adds	r3, r7, r3
 80078ae:	2201      	movs	r2, #1
 80078b0:	701a      	strb	r2, [r3, #0]
 80078b2:	e003      	b.n	80078bc <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	225d      	movs	r2, #93	@ 0x5d
 80078b8:	2101      	movs	r1, #1
 80078ba:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	225c      	movs	r2, #92	@ 0x5c
 80078c0:	2100      	movs	r1, #0
 80078c2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80078c4:	2323      	movs	r3, #35	@ 0x23
 80078c6:	18fb      	adds	r3, r7, r3
 80078c8:	781b      	ldrb	r3, [r3, #0]
}
 80078ca:	0018      	movs	r0, r3
 80078cc:	46bd      	mov	sp, r7
 80078ce:	b00a      	add	sp, #40	@ 0x28
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	46c0      	nop			@ (mov r8, r8)
 80078d4:	ffffefff 	.word	0xffffefff

080078d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b088      	sub	sp, #32
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	1dfb      	adds	r3, r7, #7
 80078e6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80078e8:	f7fb ff4e 	bl	8003788 <HAL_GetTick>
 80078ec:	0002      	movs	r2, r0
 80078ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f0:	1a9b      	subs	r3, r3, r2
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	18d3      	adds	r3, r2, r3
 80078f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80078f8:	f7fb ff46 	bl	8003788 <HAL_GetTick>
 80078fc:	0003      	movs	r3, r0
 80078fe:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007900:	4b3a      	ldr	r3, [pc, #232]	@ (80079ec <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	015b      	lsls	r3, r3, #5
 8007906:	0d1b      	lsrs	r3, r3, #20
 8007908:	69fa      	ldr	r2, [r7, #28]
 800790a:	4353      	muls	r3, r2
 800790c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800790e:	e058      	b.n	80079c2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	3301      	adds	r3, #1
 8007914:	d055      	beq.n	80079c2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007916:	f7fb ff37 	bl	8003788 <HAL_GetTick>
 800791a:	0002      	movs	r2, r0
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	69fa      	ldr	r2, [r7, #28]
 8007922:	429a      	cmp	r2, r3
 8007924:	d902      	bls.n	800792c <SPI_WaitFlagStateUntilTimeout+0x54>
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d142      	bne.n	80079b2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685a      	ldr	r2, [r3, #4]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	21e0      	movs	r1, #224	@ 0xe0
 8007938:	438a      	bics	r2, r1
 800793a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	2382      	movs	r3, #130	@ 0x82
 8007942:	005b      	lsls	r3, r3, #1
 8007944:	429a      	cmp	r2, r3
 8007946:	d113      	bne.n	8007970 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	2380      	movs	r3, #128	@ 0x80
 800794e:	021b      	lsls	r3, r3, #8
 8007950:	429a      	cmp	r2, r3
 8007952:	d005      	beq.n	8007960 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	2380      	movs	r3, #128	@ 0x80
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	429a      	cmp	r2, r3
 800795e:	d107      	bne.n	8007970 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2140      	movs	r1, #64	@ 0x40
 800796c:	438a      	bics	r2, r1
 800796e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007974:	2380      	movs	r3, #128	@ 0x80
 8007976:	019b      	lsls	r3, r3, #6
 8007978:	429a      	cmp	r2, r3
 800797a:	d110      	bne.n	800799e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	491a      	ldr	r1, [pc, #104]	@ (80079f0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007988:	400a      	ands	r2, r1
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2180      	movs	r1, #128	@ 0x80
 8007998:	0189      	lsls	r1, r1, #6
 800799a:	430a      	orrs	r2, r1
 800799c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	225d      	movs	r2, #93	@ 0x5d
 80079a2:	2101      	movs	r1, #1
 80079a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	225c      	movs	r2, #92	@ 0x5c
 80079aa:	2100      	movs	r1, #0
 80079ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e017      	b.n	80079e2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	3b01      	subs	r3, #1
 80079c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	4013      	ands	r3, r2
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	425a      	negs	r2, r3
 80079d2:	4153      	adcs	r3, r2
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	001a      	movs	r2, r3
 80079d8:	1dfb      	adds	r3, r7, #7
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d197      	bne.n	8007910 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	0018      	movs	r0, r3
 80079e4:	46bd      	mov	sp, r7
 80079e6:	b008      	add	sp, #32
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	46c0      	nop			@ (mov r8, r8)
 80079ec:	20000090 	.word	0x20000090
 80079f0:	ffffdfff 	.word	0xffffdfff

080079f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08a      	sub	sp, #40	@ 0x28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007a02:	2317      	movs	r3, #23
 8007a04:	18fb      	adds	r3, r7, r3
 8007a06:	2200      	movs	r2, #0
 8007a08:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007a0a:	f7fb febd 	bl	8003788 <HAL_GetTick>
 8007a0e:	0002      	movs	r2, r0
 8007a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a12:	1a9b      	subs	r3, r3, r2
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	18d3      	adds	r3, r2, r3
 8007a18:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007a1a:	f7fb feb5 	bl	8003788 <HAL_GetTick>
 8007a1e:	0003      	movs	r3, r0
 8007a20:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	330c      	adds	r3, #12
 8007a28:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007a2a:	4b41      	ldr	r3, [pc, #260]	@ (8007b30 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	0013      	movs	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	189b      	adds	r3, r3, r2
 8007a34:	00da      	lsls	r2, r3, #3
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	0d1b      	lsrs	r3, r3, #20
 8007a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a3c:	4353      	muls	r3, r2
 8007a3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007a40:	e068      	b.n	8007b14 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	23c0      	movs	r3, #192	@ 0xc0
 8007a46:	00db      	lsls	r3, r3, #3
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d10a      	bne.n	8007a62 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d107      	bne.n	8007a62 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	2117      	movs	r1, #23
 8007a5a:	187b      	adds	r3, r7, r1
 8007a5c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007a5e:	187b      	adds	r3, r7, r1
 8007a60:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	3301      	adds	r3, #1
 8007a66:	d055      	beq.n	8007b14 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a68:	f7fb fe8e 	bl	8003788 <HAL_GetTick>
 8007a6c:	0002      	movs	r2, r0
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d902      	bls.n	8007a7e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d142      	bne.n	8007b04 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	21e0      	movs	r1, #224	@ 0xe0
 8007a8a:	438a      	bics	r2, r1
 8007a8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	2382      	movs	r3, #130	@ 0x82
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d113      	bne.n	8007ac2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	689a      	ldr	r2, [r3, #8]
 8007a9e:	2380      	movs	r3, #128	@ 0x80
 8007aa0:	021b      	lsls	r3, r3, #8
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d005      	beq.n	8007ab2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	689a      	ldr	r2, [r3, #8]
 8007aaa:	2380      	movs	r3, #128	@ 0x80
 8007aac:	00db      	lsls	r3, r3, #3
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d107      	bne.n	8007ac2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2140      	movs	r1, #64	@ 0x40
 8007abe:	438a      	bics	r2, r1
 8007ac0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ac6:	2380      	movs	r3, #128	@ 0x80
 8007ac8:	019b      	lsls	r3, r3, #6
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d110      	bne.n	8007af0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4916      	ldr	r1, [pc, #88]	@ (8007b34 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007ada:	400a      	ands	r2, r1
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2180      	movs	r1, #128	@ 0x80
 8007aea:	0189      	lsls	r1, r1, #6
 8007aec:	430a      	orrs	r2, r1
 8007aee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	225d      	movs	r2, #93	@ 0x5d
 8007af4:	2101      	movs	r1, #1
 8007af6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	225c      	movs	r2, #92	@ 0x5c
 8007afc:	2100      	movs	r1, #0
 8007afe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e010      	b.n	8007b26 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	3b01      	subs	r3, #1
 8007b12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d18e      	bne.n	8007a42 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	0018      	movs	r0, r3
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	b00a      	add	sp, #40	@ 0x28
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	46c0      	nop			@ (mov r8, r8)
 8007b30:	20000090 	.word	0x20000090
 8007b34:	ffffdfff 	.word	0xffffdfff

08007b38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af02      	add	r7, sp, #8
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	2382      	movs	r3, #130	@ 0x82
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d113      	bne.n	8007b78 <SPI_EndRxTransaction+0x40>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	689a      	ldr	r2, [r3, #8]
 8007b54:	2380      	movs	r3, #128	@ 0x80
 8007b56:	021b      	lsls	r3, r3, #8
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d005      	beq.n	8007b68 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	2380      	movs	r3, #128	@ 0x80
 8007b62:	00db      	lsls	r3, r3, #3
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d107      	bne.n	8007b78 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2140      	movs	r1, #64	@ 0x40
 8007b74:	438a      	bics	r2, r1
 8007b76:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	0013      	movs	r3, r2
 8007b82:	2200      	movs	r2, #0
 8007b84:	2180      	movs	r1, #128	@ 0x80
 8007b86:	f7ff fea7 	bl	80078d8 <SPI_WaitFlagStateUntilTimeout>
 8007b8a:	1e03      	subs	r3, r0, #0
 8007b8c:	d007      	beq.n	8007b9e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b92:	2220      	movs	r2, #32
 8007b94:	431a      	orrs	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e026      	b.n	8007bec <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	2382      	movs	r3, #130	@ 0x82
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d11f      	bne.n	8007bea <SPI_EndRxTransaction+0xb2>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	689a      	ldr	r2, [r3, #8]
 8007bae:	2380      	movs	r3, #128	@ 0x80
 8007bb0:	021b      	lsls	r3, r3, #8
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d005      	beq.n	8007bc2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	689a      	ldr	r2, [r3, #8]
 8007bba:	2380      	movs	r3, #128	@ 0x80
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d113      	bne.n	8007bea <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	23c0      	movs	r3, #192	@ 0xc0
 8007bc6:	00d9      	lsls	r1, r3, #3
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	0013      	movs	r3, r2
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f7ff ff0f 	bl	80079f4 <SPI_WaitFifoStateUntilTimeout>
 8007bd6:	1e03      	subs	r3, r0, #0
 8007bd8:	d007      	beq.n	8007bea <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bde:	2220      	movs	r2, #32
 8007be0:	431a      	orrs	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e000      	b.n	8007bec <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	0018      	movs	r0, r3
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	b004      	add	sp, #16
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af02      	add	r7, sp, #8
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	23c0      	movs	r3, #192	@ 0xc0
 8007c04:	0159      	lsls	r1, r3, #5
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	0013      	movs	r3, r2
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f7ff fef0 	bl	80079f4 <SPI_WaitFifoStateUntilTimeout>
 8007c14:	1e03      	subs	r3, r0, #0
 8007c16:	d007      	beq.n	8007c28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e027      	b.n	8007c78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	0013      	movs	r3, r2
 8007c32:	2200      	movs	r2, #0
 8007c34:	2180      	movs	r1, #128	@ 0x80
 8007c36:	f7ff fe4f 	bl	80078d8 <SPI_WaitFlagStateUntilTimeout>
 8007c3a:	1e03      	subs	r3, r0, #0
 8007c3c:	d007      	beq.n	8007c4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c42:	2220      	movs	r2, #32
 8007c44:	431a      	orrs	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e014      	b.n	8007c78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	23c0      	movs	r3, #192	@ 0xc0
 8007c52:	00d9      	lsls	r1, r3, #3
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	0013      	movs	r3, r2
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f7ff fec9 	bl	80079f4 <SPI_WaitFifoStateUntilTimeout>
 8007c62:	1e03      	subs	r3, r0, #0
 8007c64:	d007      	beq.n	8007c76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c6a:	2220      	movs	r2, #32
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e000      	b.n	8007c78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	0018      	movs	r0, r3
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	b004      	add	sp, #16
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e04a      	b.n	8007d28 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	223d      	movs	r2, #61	@ 0x3d
 8007c96:	5c9b      	ldrb	r3, [r3, r2]
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d107      	bne.n	8007cae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	223c      	movs	r2, #60	@ 0x3c
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	0018      	movs	r0, r3
 8007caa:	f7fb fbcf 	bl	800344c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	223d      	movs	r2, #61	@ 0x3d
 8007cb2:	2102      	movs	r1, #2
 8007cb4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	0019      	movs	r1, r3
 8007cc0:	0010      	movs	r0, r2
 8007cc2:	f000 fc87 	bl	80085d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2248      	movs	r2, #72	@ 0x48
 8007cca:	2101      	movs	r1, #1
 8007ccc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	223e      	movs	r2, #62	@ 0x3e
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	5499      	strb	r1, [r3, r2]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	223f      	movs	r2, #63	@ 0x3f
 8007cda:	2101      	movs	r1, #1
 8007cdc:	5499      	strb	r1, [r3, r2]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2240      	movs	r2, #64	@ 0x40
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	5499      	strb	r1, [r3, r2]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2241      	movs	r2, #65	@ 0x41
 8007cea:	2101      	movs	r1, #1
 8007cec:	5499      	strb	r1, [r3, r2]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2242      	movs	r2, #66	@ 0x42
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	5499      	strb	r1, [r3, r2]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2243      	movs	r2, #67	@ 0x43
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2244      	movs	r2, #68	@ 0x44
 8007d02:	2101      	movs	r1, #1
 8007d04:	5499      	strb	r1, [r3, r2]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2245      	movs	r2, #69	@ 0x45
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	5499      	strb	r1, [r3, r2]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2246      	movs	r2, #70	@ 0x46
 8007d12:	2101      	movs	r1, #1
 8007d14:	5499      	strb	r1, [r3, r2]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2247      	movs	r2, #71	@ 0x47
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	223d      	movs	r2, #61	@ 0x3d
 8007d22:	2101      	movs	r1, #1
 8007d24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	0018      	movs	r0, r3
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	b002      	add	sp, #8
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	223d      	movs	r2, #61	@ 0x3d
 8007d3c:	5c9b      	ldrb	r3, [r3, r2]
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d001      	beq.n	8007d48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e035      	b.n	8007db4 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	223d      	movs	r2, #61	@ 0x3d
 8007d4c:	2102      	movs	r1, #2
 8007d4e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a19      	ldr	r2, [pc, #100]	@ (8007dbc <HAL_TIM_Base_Start+0x8c>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d00a      	beq.n	8007d70 <HAL_TIM_Base_Start+0x40>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	2380      	movs	r3, #128	@ 0x80
 8007d60:	05db      	lsls	r3, r3, #23
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d004      	beq.n	8007d70 <HAL_TIM_Base_Start+0x40>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a15      	ldr	r2, [pc, #84]	@ (8007dc0 <HAL_TIM_Base_Start+0x90>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d116      	bne.n	8007d9e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	4a13      	ldr	r2, [pc, #76]	@ (8007dc4 <HAL_TIM_Base_Start+0x94>)
 8007d78:	4013      	ands	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b06      	cmp	r3, #6
 8007d80:	d016      	beq.n	8007db0 <HAL_TIM_Base_Start+0x80>
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	2380      	movs	r3, #128	@ 0x80
 8007d86:	025b      	lsls	r3, r3, #9
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d011      	beq.n	8007db0 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2101      	movs	r1, #1
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d9c:	e008      	b.n	8007db0 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2101      	movs	r1, #1
 8007daa:	430a      	orrs	r2, r1
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	e000      	b.n	8007db2 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007db0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	0018      	movs	r0, r3
 8007db6:	46bd      	mov	sp, r7
 8007db8:	b004      	add	sp, #16
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	40012c00 	.word	0x40012c00
 8007dc0:	40000400 	.word	0x40000400
 8007dc4:	00010007 	.word	0x00010007

08007dc8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8007e0c <HAL_TIM_Base_Stop+0x44>)
 8007dd8:	4013      	ands	r3, r2
 8007dda:	d10d      	bne.n	8007df8 <HAL_TIM_Base_Stop+0x30>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	4a0b      	ldr	r2, [pc, #44]	@ (8007e10 <HAL_TIM_Base_Stop+0x48>)
 8007de4:	4013      	ands	r3, r2
 8007de6:	d107      	bne.n	8007df8 <HAL_TIM_Base_Stop+0x30>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2101      	movs	r1, #1
 8007df4:	438a      	bics	r2, r1
 8007df6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	223d      	movs	r2, #61	@ 0x3d
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	0018      	movs	r0, r3
 8007e04:	46bd      	mov	sp, r7
 8007e06:	b002      	add	sp, #8
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	46c0      	nop			@ (mov r8, r8)
 8007e0c:	00001111 	.word	0x00001111
 8007e10:	00000444 	.word	0x00000444

08007e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	223d      	movs	r2, #61	@ 0x3d
 8007e20:	5c9b      	ldrb	r3, [r3, r2]
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d001      	beq.n	8007e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e03d      	b.n	8007ea8 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	223d      	movs	r2, #61	@ 0x3d
 8007e30:	2102      	movs	r1, #2
 8007e32:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68da      	ldr	r2, [r3, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2101      	movs	r1, #1
 8007e40:	430a      	orrs	r2, r1
 8007e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a19      	ldr	r2, [pc, #100]	@ (8007eb0 <HAL_TIM_Base_Start_IT+0x9c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d00a      	beq.n	8007e64 <HAL_TIM_Base_Start_IT+0x50>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	2380      	movs	r3, #128	@ 0x80
 8007e54:	05db      	lsls	r3, r3, #23
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d004      	beq.n	8007e64 <HAL_TIM_Base_Start_IT+0x50>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a15      	ldr	r2, [pc, #84]	@ (8007eb4 <HAL_TIM_Base_Start_IT+0xa0>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d116      	bne.n	8007e92 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	4a13      	ldr	r2, [pc, #76]	@ (8007eb8 <HAL_TIM_Base_Start_IT+0xa4>)
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2b06      	cmp	r3, #6
 8007e74:	d016      	beq.n	8007ea4 <HAL_TIM_Base_Start_IT+0x90>
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	2380      	movs	r3, #128	@ 0x80
 8007e7a:	025b      	lsls	r3, r3, #9
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d011      	beq.n	8007ea4 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e90:	e008      	b.n	8007ea4 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	e000      	b.n	8007ea6 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ea4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	0018      	movs	r0, r3
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	b004      	add	sp, #16
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	40012c00 	.word	0x40012c00
 8007eb4:	40000400 	.word	0x40000400
 8007eb8:	00010007 	.word	0x00010007

08007ebc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2101      	movs	r1, #1
 8007ed0:	438a      	bics	r2, r1
 8007ed2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	4a0d      	ldr	r2, [pc, #52]	@ (8007f10 <HAL_TIM_Base_Stop_IT+0x54>)
 8007edc:	4013      	ands	r3, r2
 8007ede:	d10d      	bne.n	8007efc <HAL_TIM_Base_Stop_IT+0x40>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8007f14 <HAL_TIM_Base_Stop_IT+0x58>)
 8007ee8:	4013      	ands	r3, r2
 8007eea:	d107      	bne.n	8007efc <HAL_TIM_Base_Stop_IT+0x40>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	438a      	bics	r2, r1
 8007efa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	223d      	movs	r2, #61	@ 0x3d
 8007f00:	2101      	movs	r1, #1
 8007f02:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	0018      	movs	r0, r3
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	b002      	add	sp, #8
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	46c0      	nop			@ (mov r8, r8)
 8007f10:	00001111 	.word	0x00001111
 8007f14:	00000444 	.word	0x00000444

08007f18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e04a      	b.n	8007fc0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	223d      	movs	r2, #61	@ 0x3d
 8007f2e:	5c9b      	ldrb	r3, [r3, r2]
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d107      	bne.n	8007f46 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	223c      	movs	r2, #60	@ 0x3c
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	0018      	movs	r0, r3
 8007f42:	f7fb fa67 	bl	8003414 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	223d      	movs	r2, #61	@ 0x3d
 8007f4a:	2102      	movs	r1, #2
 8007f4c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	3304      	adds	r3, #4
 8007f56:	0019      	movs	r1, r3
 8007f58:	0010      	movs	r0, r2
 8007f5a:	f000 fb3b 	bl	80085d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2248      	movs	r2, #72	@ 0x48
 8007f62:	2101      	movs	r1, #1
 8007f64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	223e      	movs	r2, #62	@ 0x3e
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	5499      	strb	r1, [r3, r2]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	223f      	movs	r2, #63	@ 0x3f
 8007f72:	2101      	movs	r1, #1
 8007f74:	5499      	strb	r1, [r3, r2]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2240      	movs	r2, #64	@ 0x40
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	5499      	strb	r1, [r3, r2]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2241      	movs	r2, #65	@ 0x41
 8007f82:	2101      	movs	r1, #1
 8007f84:	5499      	strb	r1, [r3, r2]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2242      	movs	r2, #66	@ 0x42
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	5499      	strb	r1, [r3, r2]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2243      	movs	r2, #67	@ 0x43
 8007f92:	2101      	movs	r1, #1
 8007f94:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2244      	movs	r2, #68	@ 0x44
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	5499      	strb	r1, [r3, r2]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2245      	movs	r2, #69	@ 0x45
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	5499      	strb	r1, [r3, r2]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2246      	movs	r2, #70	@ 0x46
 8007faa:	2101      	movs	r1, #1
 8007fac:	5499      	strb	r1, [r3, r2]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2247      	movs	r2, #71	@ 0x47
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	223d      	movs	r2, #61	@ 0x3d
 8007fba:	2101      	movs	r1, #1
 8007fbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	0018      	movs	r0, r3
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	b002      	add	sp, #8
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d108      	bne.n	8007fea <HAL_TIM_PWM_Start+0x22>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	223e      	movs	r2, #62	@ 0x3e
 8007fdc:	5c9b      	ldrb	r3, [r3, r2]
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	1e5a      	subs	r2, r3, #1
 8007fe4:	4193      	sbcs	r3, r2
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	e037      	b.n	800805a <HAL_TIM_PWM_Start+0x92>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b04      	cmp	r3, #4
 8007fee:	d108      	bne.n	8008002 <HAL_TIM_PWM_Start+0x3a>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	223f      	movs	r2, #63	@ 0x3f
 8007ff4:	5c9b      	ldrb	r3, [r3, r2]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	1e5a      	subs	r2, r3, #1
 8007ffc:	4193      	sbcs	r3, r2
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	e02b      	b.n	800805a <HAL_TIM_PWM_Start+0x92>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b08      	cmp	r3, #8
 8008006:	d108      	bne.n	800801a <HAL_TIM_PWM_Start+0x52>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2240      	movs	r2, #64	@ 0x40
 800800c:	5c9b      	ldrb	r3, [r3, r2]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	3b01      	subs	r3, #1
 8008012:	1e5a      	subs	r2, r3, #1
 8008014:	4193      	sbcs	r3, r2
 8008016:	b2db      	uxtb	r3, r3
 8008018:	e01f      	b.n	800805a <HAL_TIM_PWM_Start+0x92>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b0c      	cmp	r3, #12
 800801e:	d108      	bne.n	8008032 <HAL_TIM_PWM_Start+0x6a>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2241      	movs	r2, #65	@ 0x41
 8008024:	5c9b      	ldrb	r3, [r3, r2]
 8008026:	b2db      	uxtb	r3, r3
 8008028:	3b01      	subs	r3, #1
 800802a:	1e5a      	subs	r2, r3, #1
 800802c:	4193      	sbcs	r3, r2
 800802e:	b2db      	uxtb	r3, r3
 8008030:	e013      	b.n	800805a <HAL_TIM_PWM_Start+0x92>
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2b10      	cmp	r3, #16
 8008036:	d108      	bne.n	800804a <HAL_TIM_PWM_Start+0x82>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2242      	movs	r2, #66	@ 0x42
 800803c:	5c9b      	ldrb	r3, [r3, r2]
 800803e:	b2db      	uxtb	r3, r3
 8008040:	3b01      	subs	r3, #1
 8008042:	1e5a      	subs	r2, r3, #1
 8008044:	4193      	sbcs	r3, r2
 8008046:	b2db      	uxtb	r3, r3
 8008048:	e007      	b.n	800805a <HAL_TIM_PWM_Start+0x92>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2243      	movs	r2, #67	@ 0x43
 800804e:	5c9b      	ldrb	r3, [r3, r2]
 8008050:	b2db      	uxtb	r3, r3
 8008052:	3b01      	subs	r3, #1
 8008054:	1e5a      	subs	r2, r3, #1
 8008056:	4193      	sbcs	r3, r2
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e081      	b.n	8008166 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d104      	bne.n	8008072 <HAL_TIM_PWM_Start+0xaa>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	223e      	movs	r2, #62	@ 0x3e
 800806c:	2102      	movs	r1, #2
 800806e:	5499      	strb	r1, [r3, r2]
 8008070:	e023      	b.n	80080ba <HAL_TIM_PWM_Start+0xf2>
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b04      	cmp	r3, #4
 8008076:	d104      	bne.n	8008082 <HAL_TIM_PWM_Start+0xba>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	223f      	movs	r2, #63	@ 0x3f
 800807c:	2102      	movs	r1, #2
 800807e:	5499      	strb	r1, [r3, r2]
 8008080:	e01b      	b.n	80080ba <HAL_TIM_PWM_Start+0xf2>
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b08      	cmp	r3, #8
 8008086:	d104      	bne.n	8008092 <HAL_TIM_PWM_Start+0xca>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2240      	movs	r2, #64	@ 0x40
 800808c:	2102      	movs	r1, #2
 800808e:	5499      	strb	r1, [r3, r2]
 8008090:	e013      	b.n	80080ba <HAL_TIM_PWM_Start+0xf2>
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b0c      	cmp	r3, #12
 8008096:	d104      	bne.n	80080a2 <HAL_TIM_PWM_Start+0xda>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2241      	movs	r2, #65	@ 0x41
 800809c:	2102      	movs	r1, #2
 800809e:	5499      	strb	r1, [r3, r2]
 80080a0:	e00b      	b.n	80080ba <HAL_TIM_PWM_Start+0xf2>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b10      	cmp	r3, #16
 80080a6:	d104      	bne.n	80080b2 <HAL_TIM_PWM_Start+0xea>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2242      	movs	r2, #66	@ 0x42
 80080ac:	2102      	movs	r1, #2
 80080ae:	5499      	strb	r1, [r3, r2]
 80080b0:	e003      	b.n	80080ba <HAL_TIM_PWM_Start+0xf2>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2243      	movs	r2, #67	@ 0x43
 80080b6:	2102      	movs	r1, #2
 80080b8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	2201      	movs	r2, #1
 80080c2:	0018      	movs	r0, r3
 80080c4:	f000 fda6 	bl	8008c14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a28      	ldr	r2, [pc, #160]	@ (8008170 <HAL_TIM_PWM_Start+0x1a8>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d009      	beq.n	80080e6 <HAL_TIM_PWM_Start+0x11e>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a27      	ldr	r2, [pc, #156]	@ (8008174 <HAL_TIM_PWM_Start+0x1ac>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d004      	beq.n	80080e6 <HAL_TIM_PWM_Start+0x11e>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a25      	ldr	r2, [pc, #148]	@ (8008178 <HAL_TIM_PWM_Start+0x1b0>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d101      	bne.n	80080ea <HAL_TIM_PWM_Start+0x122>
 80080e6:	2301      	movs	r3, #1
 80080e8:	e000      	b.n	80080ec <HAL_TIM_PWM_Start+0x124>
 80080ea:	2300      	movs	r3, #0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d008      	beq.n	8008102 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2180      	movs	r1, #128	@ 0x80
 80080fc:	0209      	lsls	r1, r1, #8
 80080fe:	430a      	orrs	r2, r1
 8008100:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a1a      	ldr	r2, [pc, #104]	@ (8008170 <HAL_TIM_PWM_Start+0x1a8>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d00a      	beq.n	8008122 <HAL_TIM_PWM_Start+0x15a>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	2380      	movs	r3, #128	@ 0x80
 8008112:	05db      	lsls	r3, r3, #23
 8008114:	429a      	cmp	r2, r3
 8008116:	d004      	beq.n	8008122 <HAL_TIM_PWM_Start+0x15a>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a17      	ldr	r2, [pc, #92]	@ (800817c <HAL_TIM_PWM_Start+0x1b4>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d116      	bne.n	8008150 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	4a15      	ldr	r2, [pc, #84]	@ (8008180 <HAL_TIM_PWM_Start+0x1b8>)
 800812a:	4013      	ands	r3, r2
 800812c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2b06      	cmp	r3, #6
 8008132:	d016      	beq.n	8008162 <HAL_TIM_PWM_Start+0x19a>
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	2380      	movs	r3, #128	@ 0x80
 8008138:	025b      	lsls	r3, r3, #9
 800813a:	429a      	cmp	r2, r3
 800813c:	d011      	beq.n	8008162 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2101      	movs	r1, #1
 800814a:	430a      	orrs	r2, r1
 800814c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800814e:	e008      	b.n	8008162 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2101      	movs	r1, #1
 800815c:	430a      	orrs	r2, r1
 800815e:	601a      	str	r2, [r3, #0]
 8008160:	e000      	b.n	8008164 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008162:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	0018      	movs	r0, r3
 8008168:	46bd      	mov	sp, r7
 800816a:	b004      	add	sp, #16
 800816c:	bd80      	pop	{r7, pc}
 800816e:	46c0      	nop			@ (mov r8, r8)
 8008170:	40012c00 	.word	0x40012c00
 8008174:	40014400 	.word	0x40014400
 8008178:	40014800 	.word	0x40014800
 800817c:	40000400 	.word	0x40000400
 8008180:	00010007 	.word	0x00010007

08008184 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2202      	movs	r2, #2
 80081a0:	4013      	ands	r3, r2
 80081a2:	d021      	beq.n	80081e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2202      	movs	r2, #2
 80081a8:	4013      	ands	r3, r2
 80081aa:	d01d      	beq.n	80081e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2203      	movs	r2, #3
 80081b2:	4252      	negs	r2, r2
 80081b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	2203      	movs	r2, #3
 80081c4:	4013      	ands	r3, r2
 80081c6:	d004      	beq.n	80081d2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	0018      	movs	r0, r3
 80081cc:	f000 f9ea 	bl	80085a4 <HAL_TIM_IC_CaptureCallback>
 80081d0:	e007      	b.n	80081e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	0018      	movs	r0, r3
 80081d6:	f000 f9dd 	bl	8008594 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	0018      	movs	r0, r3
 80081de:	f000 f9e9 	bl	80085b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2204      	movs	r2, #4
 80081ec:	4013      	ands	r3, r2
 80081ee:	d022      	beq.n	8008236 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2204      	movs	r2, #4
 80081f4:	4013      	ands	r3, r2
 80081f6:	d01e      	beq.n	8008236 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2205      	movs	r2, #5
 80081fe:	4252      	negs	r2, r2
 8008200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2202      	movs	r2, #2
 8008206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	699a      	ldr	r2, [r3, #24]
 800820e:	23c0      	movs	r3, #192	@ 0xc0
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4013      	ands	r3, r2
 8008214:	d004      	beq.n	8008220 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	0018      	movs	r0, r3
 800821a:	f000 f9c3 	bl	80085a4 <HAL_TIM_IC_CaptureCallback>
 800821e:	e007      	b.n	8008230 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	0018      	movs	r0, r3
 8008224:	f000 f9b6 	bl	8008594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	0018      	movs	r0, r3
 800822c:	f000 f9c2 	bl	80085b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2208      	movs	r2, #8
 800823a:	4013      	ands	r3, r2
 800823c:	d021      	beq.n	8008282 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2208      	movs	r2, #8
 8008242:	4013      	ands	r3, r2
 8008244:	d01d      	beq.n	8008282 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2209      	movs	r2, #9
 800824c:	4252      	negs	r2, r2
 800824e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2204      	movs	r2, #4
 8008254:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	2203      	movs	r2, #3
 800825e:	4013      	ands	r3, r2
 8008260:	d004      	beq.n	800826c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	0018      	movs	r0, r3
 8008266:	f000 f99d 	bl	80085a4 <HAL_TIM_IC_CaptureCallback>
 800826a:	e007      	b.n	800827c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	0018      	movs	r0, r3
 8008270:	f000 f990 	bl	8008594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	0018      	movs	r0, r3
 8008278:	f000 f99c 	bl	80085b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2210      	movs	r2, #16
 8008286:	4013      	ands	r3, r2
 8008288:	d022      	beq.n	80082d0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2210      	movs	r2, #16
 800828e:	4013      	ands	r3, r2
 8008290:	d01e      	beq.n	80082d0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2211      	movs	r2, #17
 8008298:	4252      	negs	r2, r2
 800829a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2208      	movs	r2, #8
 80082a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	69da      	ldr	r2, [r3, #28]
 80082a8:	23c0      	movs	r3, #192	@ 0xc0
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4013      	ands	r3, r2
 80082ae:	d004      	beq.n	80082ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	0018      	movs	r0, r3
 80082b4:	f000 f976 	bl	80085a4 <HAL_TIM_IC_CaptureCallback>
 80082b8:	e007      	b.n	80082ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	0018      	movs	r0, r3
 80082be:	f000 f969 	bl	8008594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	0018      	movs	r0, r3
 80082c6:	f000 f975 	bl	80085b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2201      	movs	r2, #1
 80082d4:	4013      	ands	r3, r2
 80082d6:	d00c      	beq.n	80082f2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2201      	movs	r2, #1
 80082dc:	4013      	ands	r3, r2
 80082de:	d008      	beq.n	80082f2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2202      	movs	r2, #2
 80082e6:	4252      	negs	r2, r2
 80082e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	0018      	movs	r0, r3
 80082ee:	f7fa f8b1 	bl	8002454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2280      	movs	r2, #128	@ 0x80
 80082f6:	4013      	ands	r3, r2
 80082f8:	d104      	bne.n	8008304 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	2380      	movs	r3, #128	@ 0x80
 80082fe:	019b      	lsls	r3, r3, #6
 8008300:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008302:	d00b      	beq.n	800831c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2280      	movs	r2, #128	@ 0x80
 8008308:	4013      	ands	r3, r2
 800830a:	d007      	beq.n	800831c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a1e      	ldr	r2, [pc, #120]	@ (800838c <HAL_TIM_IRQHandler+0x208>)
 8008312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	0018      	movs	r0, r3
 8008318:	f000 fd10 	bl	8008d3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	2380      	movs	r3, #128	@ 0x80
 8008320:	005b      	lsls	r3, r3, #1
 8008322:	4013      	ands	r3, r2
 8008324:	d00b      	beq.n	800833e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2280      	movs	r2, #128	@ 0x80
 800832a:	4013      	ands	r3, r2
 800832c:	d007      	beq.n	800833e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a17      	ldr	r2, [pc, #92]	@ (8008390 <HAL_TIM_IRQHandler+0x20c>)
 8008334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	0018      	movs	r0, r3
 800833a:	f000 fd07 	bl	8008d4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	2240      	movs	r2, #64	@ 0x40
 8008342:	4013      	ands	r3, r2
 8008344:	d00c      	beq.n	8008360 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2240      	movs	r2, #64	@ 0x40
 800834a:	4013      	ands	r3, r2
 800834c:	d008      	beq.n	8008360 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2241      	movs	r2, #65	@ 0x41
 8008354:	4252      	negs	r2, r2
 8008356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	0018      	movs	r0, r3
 800835c:	f000 f932 	bl	80085c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	2220      	movs	r2, #32
 8008364:	4013      	ands	r3, r2
 8008366:	d00c      	beq.n	8008382 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2220      	movs	r2, #32
 800836c:	4013      	ands	r3, r2
 800836e:	d008      	beq.n	8008382 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2221      	movs	r2, #33	@ 0x21
 8008376:	4252      	negs	r2, r2
 8008378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	0018      	movs	r0, r3
 800837e:	f000 fcd5 	bl	8008d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008382:	46c0      	nop			@ (mov r8, r8)
 8008384:	46bd      	mov	sp, r7
 8008386:	b004      	add	sp, #16
 8008388:	bd80      	pop	{r7, pc}
 800838a:	46c0      	nop			@ (mov r8, r8)
 800838c:	ffffdf7f 	.word	0xffffdf7f
 8008390:	fffffeff 	.word	0xfffffeff

08008394 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083a0:	2317      	movs	r3, #23
 80083a2:	18fb      	adds	r3, r7, r3
 80083a4:	2200      	movs	r2, #0
 80083a6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	223c      	movs	r2, #60	@ 0x3c
 80083ac:	5c9b      	ldrb	r3, [r3, r2]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d101      	bne.n	80083b6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80083b2:	2302      	movs	r3, #2
 80083b4:	e0e5      	b.n	8008582 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	223c      	movs	r2, #60	@ 0x3c
 80083ba:	2101      	movs	r1, #1
 80083bc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b14      	cmp	r3, #20
 80083c2:	d900      	bls.n	80083c6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80083c4:	e0d1      	b.n	800856a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	009a      	lsls	r2, r3, #2
 80083ca:	4b70      	ldr	r3, [pc, #448]	@ (800858c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80083cc:	18d3      	adds	r3, r2, r3
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	0011      	movs	r1, r2
 80083da:	0018      	movs	r0, r3
 80083dc:	f000 f97e 	bl	80086dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	699a      	ldr	r2, [r3, #24]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2108      	movs	r1, #8
 80083ec:	430a      	orrs	r2, r1
 80083ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	699a      	ldr	r2, [r3, #24]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2104      	movs	r1, #4
 80083fc:	438a      	bics	r2, r1
 80083fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6999      	ldr	r1, [r3, #24]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	691a      	ldr	r2, [r3, #16]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	430a      	orrs	r2, r1
 8008410:	619a      	str	r2, [r3, #24]
      break;
 8008412:	e0af      	b.n	8008574 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	0011      	movs	r1, r2
 800841c:	0018      	movs	r0, r3
 800841e:	f000 f9dd 	bl	80087dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	699a      	ldr	r2, [r3, #24]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2180      	movs	r1, #128	@ 0x80
 800842e:	0109      	lsls	r1, r1, #4
 8008430:	430a      	orrs	r2, r1
 8008432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	699a      	ldr	r2, [r3, #24]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4954      	ldr	r1, [pc, #336]	@ (8008590 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008440:	400a      	ands	r2, r1
 8008442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6999      	ldr	r1, [r3, #24]
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	021a      	lsls	r2, r3, #8
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	430a      	orrs	r2, r1
 8008456:	619a      	str	r2, [r3, #24]
      break;
 8008458:	e08c      	b.n	8008574 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	0011      	movs	r1, r2
 8008462:	0018      	movs	r0, r3
 8008464:	f000 fa38 	bl	80088d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	69da      	ldr	r2, [r3, #28]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2108      	movs	r1, #8
 8008474:	430a      	orrs	r2, r1
 8008476:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	69da      	ldr	r2, [r3, #28]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2104      	movs	r1, #4
 8008484:	438a      	bics	r2, r1
 8008486:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	69d9      	ldr	r1, [r3, #28]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	691a      	ldr	r2, [r3, #16]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	430a      	orrs	r2, r1
 8008498:	61da      	str	r2, [r3, #28]
      break;
 800849a:	e06b      	b.n	8008574 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	0011      	movs	r1, r2
 80084a4:	0018      	movs	r0, r3
 80084a6:	f000 fa99 	bl	80089dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	69da      	ldr	r2, [r3, #28]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2180      	movs	r1, #128	@ 0x80
 80084b6:	0109      	lsls	r1, r1, #4
 80084b8:	430a      	orrs	r2, r1
 80084ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	69da      	ldr	r2, [r3, #28]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4932      	ldr	r1, [pc, #200]	@ (8008590 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80084c8:	400a      	ands	r2, r1
 80084ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	69d9      	ldr	r1, [r3, #28]
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	021a      	lsls	r2, r3, #8
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	61da      	str	r2, [r3, #28]
      break;
 80084e0:	e048      	b.n	8008574 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	0011      	movs	r1, r2
 80084ea:	0018      	movs	r0, r3
 80084ec:	f000 fada 	bl	8008aa4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2108      	movs	r1, #8
 80084fc:	430a      	orrs	r2, r1
 80084fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2104      	movs	r1, #4
 800850c:	438a      	bics	r2, r1
 800850e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	691a      	ldr	r2, [r3, #16]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	430a      	orrs	r2, r1
 8008520:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008522:	e027      	b.n	8008574 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	0011      	movs	r1, r2
 800852c:	0018      	movs	r0, r3
 800852e:	f000 fb13 	bl	8008b58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2180      	movs	r1, #128	@ 0x80
 800853e:	0109      	lsls	r1, r1, #4
 8008540:	430a      	orrs	r2, r1
 8008542:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4910      	ldr	r1, [pc, #64]	@ (8008590 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008550:	400a      	ands	r2, r1
 8008552:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	021a      	lsls	r2, r3, #8
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	430a      	orrs	r2, r1
 8008566:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008568:	e004      	b.n	8008574 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800856a:	2317      	movs	r3, #23
 800856c:	18fb      	adds	r3, r7, r3
 800856e:	2201      	movs	r2, #1
 8008570:	701a      	strb	r2, [r3, #0]
      break;
 8008572:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	223c      	movs	r2, #60	@ 0x3c
 8008578:	2100      	movs	r1, #0
 800857a:	5499      	strb	r1, [r3, r2]

  return status;
 800857c:	2317      	movs	r3, #23
 800857e:	18fb      	adds	r3, r7, r3
 8008580:	781b      	ldrb	r3, [r3, #0]
}
 8008582:	0018      	movs	r0, r3
 8008584:	46bd      	mov	sp, r7
 8008586:	b006      	add	sp, #24
 8008588:	bd80      	pop	{r7, pc}
 800858a:	46c0      	nop			@ (mov r8, r8)
 800858c:	08008e80 	.word	0x08008e80
 8008590:	fffffbff 	.word	0xfffffbff

08008594 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800859c:	46c0      	nop			@ (mov r8, r8)
 800859e:	46bd      	mov	sp, r7
 80085a0:	b002      	add	sp, #8
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085ac:	46c0      	nop			@ (mov r8, r8)
 80085ae:	46bd      	mov	sp, r7
 80085b0:	b002      	add	sp, #8
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085bc:	46c0      	nop			@ (mov r8, r8)
 80085be:	46bd      	mov	sp, r7
 80085c0:	b002      	add	sp, #8
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085cc:	46c0      	nop			@ (mov r8, r8)
 80085ce:	46bd      	mov	sp, r7
 80085d0:	b002      	add	sp, #8
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a37      	ldr	r2, [pc, #220]	@ (80086c4 <TIM_Base_SetConfig+0xf0>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d008      	beq.n	80085fe <TIM_Base_SetConfig+0x2a>
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	2380      	movs	r3, #128	@ 0x80
 80085f0:	05db      	lsls	r3, r3, #23
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d003      	beq.n	80085fe <TIM_Base_SetConfig+0x2a>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a33      	ldr	r2, [pc, #204]	@ (80086c8 <TIM_Base_SetConfig+0xf4>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d108      	bne.n	8008610 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2270      	movs	r2, #112	@ 0x70
 8008602:	4393      	bics	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	4313      	orrs	r3, r2
 800860e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a2c      	ldr	r2, [pc, #176]	@ (80086c4 <TIM_Base_SetConfig+0xf0>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d014      	beq.n	8008642 <TIM_Base_SetConfig+0x6e>
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	2380      	movs	r3, #128	@ 0x80
 800861c:	05db      	lsls	r3, r3, #23
 800861e:	429a      	cmp	r2, r3
 8008620:	d00f      	beq.n	8008642 <TIM_Base_SetConfig+0x6e>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a28      	ldr	r2, [pc, #160]	@ (80086c8 <TIM_Base_SetConfig+0xf4>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d00b      	beq.n	8008642 <TIM_Base_SetConfig+0x6e>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a27      	ldr	r2, [pc, #156]	@ (80086cc <TIM_Base_SetConfig+0xf8>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d007      	beq.n	8008642 <TIM_Base_SetConfig+0x6e>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a26      	ldr	r2, [pc, #152]	@ (80086d0 <TIM_Base_SetConfig+0xfc>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d003      	beq.n	8008642 <TIM_Base_SetConfig+0x6e>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a25      	ldr	r2, [pc, #148]	@ (80086d4 <TIM_Base_SetConfig+0x100>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d108      	bne.n	8008654 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	4a24      	ldr	r2, [pc, #144]	@ (80086d8 <TIM_Base_SetConfig+0x104>)
 8008646:	4013      	ands	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	4313      	orrs	r3, r2
 8008652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2280      	movs	r2, #128	@ 0x80
 8008658:	4393      	bics	r3, r2
 800865a:	001a      	movs	r2, r3
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	4313      	orrs	r3, r2
 8008662:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	689a      	ldr	r2, [r3, #8]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a11      	ldr	r2, [pc, #68]	@ (80086c4 <TIM_Base_SetConfig+0xf0>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d007      	beq.n	8008692 <TIM_Base_SetConfig+0xbe>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a12      	ldr	r2, [pc, #72]	@ (80086d0 <TIM_Base_SetConfig+0xfc>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d003      	beq.n	8008692 <TIM_Base_SetConfig+0xbe>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a11      	ldr	r2, [pc, #68]	@ (80086d4 <TIM_Base_SetConfig+0x100>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d103      	bne.n	800869a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	691a      	ldr	r2, [r3, #16]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	2201      	movs	r2, #1
 80086a6:	4013      	ands	r3, r2
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d106      	bne.n	80086ba <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	2201      	movs	r2, #1
 80086b2:	4393      	bics	r3, r2
 80086b4:	001a      	movs	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	611a      	str	r2, [r3, #16]
  }
}
 80086ba:	46c0      	nop			@ (mov r8, r8)
 80086bc:	46bd      	mov	sp, r7
 80086be:	b004      	add	sp, #16
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	46c0      	nop			@ (mov r8, r8)
 80086c4:	40012c00 	.word	0x40012c00
 80086c8:	40000400 	.word	0x40000400
 80086cc:	40002000 	.word	0x40002000
 80086d0:	40014400 	.word	0x40014400
 80086d4:	40014800 	.word	0x40014800
 80086d8:	fffffcff 	.word	0xfffffcff

080086dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a1b      	ldr	r3, [r3, #32]
 80086f0:	2201      	movs	r2, #1
 80086f2:	4393      	bics	r3, r2
 80086f4:	001a      	movs	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	4a2e      	ldr	r2, [pc, #184]	@ (80087c4 <TIM_OC1_SetConfig+0xe8>)
 800870a:	4013      	ands	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2203      	movs	r2, #3
 8008712:	4393      	bics	r3, r2
 8008714:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	4313      	orrs	r3, r2
 800871e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	2202      	movs	r2, #2
 8008724:	4393      	bics	r3, r2
 8008726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	4313      	orrs	r3, r2
 8008730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a24      	ldr	r2, [pc, #144]	@ (80087c8 <TIM_OC1_SetConfig+0xec>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d007      	beq.n	800874a <TIM_OC1_SetConfig+0x6e>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a23      	ldr	r2, [pc, #140]	@ (80087cc <TIM_OC1_SetConfig+0xf0>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d003      	beq.n	800874a <TIM_OC1_SetConfig+0x6e>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a22      	ldr	r2, [pc, #136]	@ (80087d0 <TIM_OC1_SetConfig+0xf4>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d10c      	bne.n	8008764 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	2208      	movs	r2, #8
 800874e:	4393      	bics	r3, r2
 8008750:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	4313      	orrs	r3, r2
 800875a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	2204      	movs	r2, #4
 8008760:	4393      	bics	r3, r2
 8008762:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a18      	ldr	r2, [pc, #96]	@ (80087c8 <TIM_OC1_SetConfig+0xec>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d007      	beq.n	800877c <TIM_OC1_SetConfig+0xa0>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a17      	ldr	r2, [pc, #92]	@ (80087cc <TIM_OC1_SetConfig+0xf0>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d003      	beq.n	800877c <TIM_OC1_SetConfig+0xa0>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a16      	ldr	r2, [pc, #88]	@ (80087d0 <TIM_OC1_SetConfig+0xf4>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d111      	bne.n	80087a0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	4a15      	ldr	r2, [pc, #84]	@ (80087d4 <TIM_OC1_SetConfig+0xf8>)
 8008780:	4013      	ands	r3, r2
 8008782:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	4a14      	ldr	r2, [pc, #80]	@ (80087d8 <TIM_OC1_SetConfig+0xfc>)
 8008788:	4013      	ands	r3, r2
 800878a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	4313      	orrs	r3, r2
 8008794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	4313      	orrs	r3, r2
 800879e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	685a      	ldr	r2, [r3, #4]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	621a      	str	r2, [r3, #32]
}
 80087ba:	46c0      	nop			@ (mov r8, r8)
 80087bc:	46bd      	mov	sp, r7
 80087be:	b006      	add	sp, #24
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	46c0      	nop			@ (mov r8, r8)
 80087c4:	fffeff8f 	.word	0xfffeff8f
 80087c8:	40012c00 	.word	0x40012c00
 80087cc:	40014400 	.word	0x40014400
 80087d0:	40014800 	.word	0x40014800
 80087d4:	fffffeff 	.word	0xfffffeff
 80087d8:	fffffdff 	.word	0xfffffdff

080087dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	2210      	movs	r2, #16
 80087f2:	4393      	bics	r3, r2
 80087f4:	001a      	movs	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	4a2c      	ldr	r2, [pc, #176]	@ (80088bc <TIM_OC2_SetConfig+0xe0>)
 800880a:	4013      	ands	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	4a2b      	ldr	r2, [pc, #172]	@ (80088c0 <TIM_OC2_SetConfig+0xe4>)
 8008812:	4013      	ands	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	021b      	lsls	r3, r3, #8
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	2220      	movs	r2, #32
 8008826:	4393      	bics	r3, r2
 8008828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	011b      	lsls	r3, r3, #4
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	4313      	orrs	r3, r2
 8008834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a22      	ldr	r2, [pc, #136]	@ (80088c4 <TIM_OC2_SetConfig+0xe8>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d10d      	bne.n	800885a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	2280      	movs	r2, #128	@ 0x80
 8008842:	4393      	bics	r3, r2
 8008844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	011b      	lsls	r3, r3, #4
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	4313      	orrs	r3, r2
 8008850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	2240      	movs	r2, #64	@ 0x40
 8008856:	4393      	bics	r3, r2
 8008858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a19      	ldr	r2, [pc, #100]	@ (80088c4 <TIM_OC2_SetConfig+0xe8>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d007      	beq.n	8008872 <TIM_OC2_SetConfig+0x96>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a18      	ldr	r2, [pc, #96]	@ (80088c8 <TIM_OC2_SetConfig+0xec>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d003      	beq.n	8008872 <TIM_OC2_SetConfig+0x96>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a17      	ldr	r2, [pc, #92]	@ (80088cc <TIM_OC2_SetConfig+0xf0>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d113      	bne.n	800889a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	4a16      	ldr	r2, [pc, #88]	@ (80088d0 <TIM_OC2_SetConfig+0xf4>)
 8008876:	4013      	ands	r3, r2
 8008878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	4a15      	ldr	r2, [pc, #84]	@ (80088d4 <TIM_OC2_SetConfig+0xf8>)
 800887e:	4013      	ands	r3, r2
 8008880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	4313      	orrs	r3, r2
 800888c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	4313      	orrs	r3, r2
 8008898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	685a      	ldr	r2, [r3, #4]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	621a      	str	r2, [r3, #32]
}
 80088b4:	46c0      	nop			@ (mov r8, r8)
 80088b6:	46bd      	mov	sp, r7
 80088b8:	b006      	add	sp, #24
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	feff8fff 	.word	0xfeff8fff
 80088c0:	fffffcff 	.word	0xfffffcff
 80088c4:	40012c00 	.word	0x40012c00
 80088c8:	40014400 	.word	0x40014400
 80088cc:	40014800 	.word	0x40014800
 80088d0:	fffffbff 	.word	0xfffffbff
 80088d4:	fffff7ff 	.word	0xfffff7ff

080088d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a1b      	ldr	r3, [r3, #32]
 80088ec:	4a31      	ldr	r2, [pc, #196]	@ (80089b4 <TIM_OC3_SetConfig+0xdc>)
 80088ee:	401a      	ands	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	4a2d      	ldr	r2, [pc, #180]	@ (80089b8 <TIM_OC3_SetConfig+0xe0>)
 8008904:	4013      	ands	r3, r2
 8008906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2203      	movs	r2, #3
 800890c:	4393      	bics	r3, r2
 800890e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	4313      	orrs	r3, r2
 8008918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	4a27      	ldr	r2, [pc, #156]	@ (80089bc <TIM_OC3_SetConfig+0xe4>)
 800891e:	4013      	ands	r3, r2
 8008920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	021b      	lsls	r3, r3, #8
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	4313      	orrs	r3, r2
 800892c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a23      	ldr	r2, [pc, #140]	@ (80089c0 <TIM_OC3_SetConfig+0xe8>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d10d      	bne.n	8008952 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	4a22      	ldr	r2, [pc, #136]	@ (80089c4 <TIM_OC3_SetConfig+0xec>)
 800893a:	4013      	ands	r3, r2
 800893c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	021b      	lsls	r3, r3, #8
 8008944:	697a      	ldr	r2, [r7, #20]
 8008946:	4313      	orrs	r3, r2
 8008948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	4a1e      	ldr	r2, [pc, #120]	@ (80089c8 <TIM_OC3_SetConfig+0xf0>)
 800894e:	4013      	ands	r3, r2
 8008950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a1a      	ldr	r2, [pc, #104]	@ (80089c0 <TIM_OC3_SetConfig+0xe8>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d007      	beq.n	800896a <TIM_OC3_SetConfig+0x92>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a1b      	ldr	r2, [pc, #108]	@ (80089cc <TIM_OC3_SetConfig+0xf4>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d003      	beq.n	800896a <TIM_OC3_SetConfig+0x92>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a1a      	ldr	r2, [pc, #104]	@ (80089d0 <TIM_OC3_SetConfig+0xf8>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d113      	bne.n	8008992 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	4a19      	ldr	r2, [pc, #100]	@ (80089d4 <TIM_OC3_SetConfig+0xfc>)
 800896e:	4013      	ands	r3, r2
 8008970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	4a18      	ldr	r2, [pc, #96]	@ (80089d8 <TIM_OC3_SetConfig+0x100>)
 8008976:	4013      	ands	r3, r2
 8008978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	011b      	lsls	r3, r3, #4
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	4313      	orrs	r3, r2
 8008984:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	011b      	lsls	r3, r3, #4
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	4313      	orrs	r3, r2
 8008990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	621a      	str	r2, [r3, #32]
}
 80089ac:	46c0      	nop			@ (mov r8, r8)
 80089ae:	46bd      	mov	sp, r7
 80089b0:	b006      	add	sp, #24
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	fffffeff 	.word	0xfffffeff
 80089b8:	fffeff8f 	.word	0xfffeff8f
 80089bc:	fffffdff 	.word	0xfffffdff
 80089c0:	40012c00 	.word	0x40012c00
 80089c4:	fffff7ff 	.word	0xfffff7ff
 80089c8:	fffffbff 	.word	0xfffffbff
 80089cc:	40014400 	.word	0x40014400
 80089d0:	40014800 	.word	0x40014800
 80089d4:	ffffefff 	.word	0xffffefff
 80089d8:	ffffdfff 	.word	0xffffdfff

080089dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	4a24      	ldr	r2, [pc, #144]	@ (8008a84 <TIM_OC4_SetConfig+0xa8>)
 80089f2:	401a      	ands	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	69db      	ldr	r3, [r3, #28]
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	4a20      	ldr	r2, [pc, #128]	@ (8008a88 <TIM_OC4_SetConfig+0xac>)
 8008a08:	4013      	ands	r3, r2
 8008a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8008a8c <TIM_OC4_SetConfig+0xb0>)
 8008a10:	4013      	ands	r3, r2
 8008a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	021b      	lsls	r3, r3, #8
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	4a1b      	ldr	r2, [pc, #108]	@ (8008a90 <TIM_OC4_SetConfig+0xb4>)
 8008a24:	4013      	ands	r3, r2
 8008a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	031b      	lsls	r3, r3, #12
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a17      	ldr	r2, [pc, #92]	@ (8008a94 <TIM_OC4_SetConfig+0xb8>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d007      	beq.n	8008a4c <TIM_OC4_SetConfig+0x70>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a16      	ldr	r2, [pc, #88]	@ (8008a98 <TIM_OC4_SetConfig+0xbc>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d003      	beq.n	8008a4c <TIM_OC4_SetConfig+0x70>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a15      	ldr	r2, [pc, #84]	@ (8008a9c <TIM_OC4_SetConfig+0xc0>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d109      	bne.n	8008a60 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	4a14      	ldr	r2, [pc, #80]	@ (8008aa0 <TIM_OC4_SetConfig+0xc4>)
 8008a50:	4013      	ands	r3, r2
 8008a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	019b      	lsls	r3, r3, #6
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	685a      	ldr	r2, [r3, #4]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	621a      	str	r2, [r3, #32]
}
 8008a7a:	46c0      	nop			@ (mov r8, r8)
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	b006      	add	sp, #24
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	46c0      	nop			@ (mov r8, r8)
 8008a84:	ffffefff 	.word	0xffffefff
 8008a88:	feff8fff 	.word	0xfeff8fff
 8008a8c:	fffffcff 	.word	0xfffffcff
 8008a90:	ffffdfff 	.word	0xffffdfff
 8008a94:	40012c00 	.word	0x40012c00
 8008a98:	40014400 	.word	0x40014400
 8008a9c:	40014800 	.word	0x40014800
 8008aa0:	ffffbfff 	.word	0xffffbfff

08008aa4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a1b      	ldr	r3, [r3, #32]
 8008ab8:	4a21      	ldr	r2, [pc, #132]	@ (8008b40 <TIM_OC5_SetConfig+0x9c>)
 8008aba:	401a      	ands	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	4a1d      	ldr	r2, [pc, #116]	@ (8008b44 <TIM_OC5_SetConfig+0xa0>)
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	4a19      	ldr	r2, [pc, #100]	@ (8008b48 <TIM_OC5_SetConfig+0xa4>)
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	041b      	lsls	r3, r3, #16
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a15      	ldr	r2, [pc, #84]	@ (8008b4c <TIM_OC5_SetConfig+0xa8>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d007      	beq.n	8008b0a <TIM_OC5_SetConfig+0x66>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a14      	ldr	r2, [pc, #80]	@ (8008b50 <TIM_OC5_SetConfig+0xac>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d003      	beq.n	8008b0a <TIM_OC5_SetConfig+0x66>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a13      	ldr	r2, [pc, #76]	@ (8008b54 <TIM_OC5_SetConfig+0xb0>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d109      	bne.n	8008b1e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8008b40 <TIM_OC5_SetConfig+0x9c>)
 8008b0e:	4013      	ands	r3, r2
 8008b10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	021b      	lsls	r3, r3, #8
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	621a      	str	r2, [r3, #32]
}
 8008b38:	46c0      	nop			@ (mov r8, r8)
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	b006      	add	sp, #24
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	fffeffff 	.word	0xfffeffff
 8008b44:	fffeff8f 	.word	0xfffeff8f
 8008b48:	fffdffff 	.word	0xfffdffff
 8008b4c:	40012c00 	.word	0x40012c00
 8008b50:	40014400 	.word	0x40014400
 8008b54:	40014800 	.word	0x40014800

08008b58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	4a22      	ldr	r2, [pc, #136]	@ (8008bf8 <TIM_OC6_SetConfig+0xa0>)
 8008b6e:	401a      	ands	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	4a1e      	ldr	r2, [pc, #120]	@ (8008bfc <TIM_OC6_SetConfig+0xa4>)
 8008b84:	4013      	ands	r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	021b      	lsls	r3, r3, #8
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	4a1a      	ldr	r2, [pc, #104]	@ (8008c00 <TIM_OC6_SetConfig+0xa8>)
 8008b98:	4013      	ands	r3, r2
 8008b9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	051b      	lsls	r3, r3, #20
 8008ba2:	693a      	ldr	r2, [r7, #16]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a16      	ldr	r2, [pc, #88]	@ (8008c04 <TIM_OC6_SetConfig+0xac>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d007      	beq.n	8008bc0 <TIM_OC6_SetConfig+0x68>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a15      	ldr	r2, [pc, #84]	@ (8008c08 <TIM_OC6_SetConfig+0xb0>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d003      	beq.n	8008bc0 <TIM_OC6_SetConfig+0x68>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a14      	ldr	r2, [pc, #80]	@ (8008c0c <TIM_OC6_SetConfig+0xb4>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d109      	bne.n	8008bd4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	4a13      	ldr	r2, [pc, #76]	@ (8008c10 <TIM_OC6_SetConfig+0xb8>)
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	695b      	ldr	r3, [r3, #20]
 8008bcc:	029b      	lsls	r3, r3, #10
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	621a      	str	r2, [r3, #32]
}
 8008bee:	46c0      	nop			@ (mov r8, r8)
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	b006      	add	sp, #24
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	46c0      	nop			@ (mov r8, r8)
 8008bf8:	ffefffff 	.word	0xffefffff
 8008bfc:	feff8fff 	.word	0xfeff8fff
 8008c00:	ffdfffff 	.word	0xffdfffff
 8008c04:	40012c00 	.word	0x40012c00
 8008c08:	40014400 	.word	0x40014400
 8008c0c:	40014800 	.word	0x40014800
 8008c10:	fffbffff 	.word	0xfffbffff

08008c14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	221f      	movs	r2, #31
 8008c24:	4013      	ands	r3, r2
 8008c26:	2201      	movs	r2, #1
 8008c28:	409a      	lsls	r2, r3
 8008c2a:	0013      	movs	r3, r2
 8008c2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	43d2      	mvns	r2, r2
 8008c36:	401a      	ands	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6a1a      	ldr	r2, [r3, #32]
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	211f      	movs	r1, #31
 8008c44:	400b      	ands	r3, r1
 8008c46:	6879      	ldr	r1, [r7, #4]
 8008c48:	4099      	lsls	r1, r3
 8008c4a:	000b      	movs	r3, r1
 8008c4c:	431a      	orrs	r2, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	621a      	str	r2, [r3, #32]
}
 8008c52:	46c0      	nop			@ (mov r8, r8)
 8008c54:	46bd      	mov	sp, r7
 8008c56:	b006      	add	sp, #24
 8008c58:	bd80      	pop	{r7, pc}
	...

08008c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	223c      	movs	r2, #60	@ 0x3c
 8008c6a:	5c9b      	ldrb	r3, [r3, r2]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d101      	bne.n	8008c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c70:	2302      	movs	r3, #2
 8008c72:	e050      	b.n	8008d16 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	223c      	movs	r2, #60	@ 0x3c
 8008c78:	2101      	movs	r1, #1
 8008c7a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	223d      	movs	r2, #61	@ 0x3d
 8008c80:	2102      	movs	r1, #2
 8008c82:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a21      	ldr	r2, [pc, #132]	@ (8008d20 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d108      	bne.n	8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	4a20      	ldr	r2, [pc, #128]	@ (8008d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2270      	movs	r2, #112	@ 0x70
 8008cb4:	4393      	bics	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a14      	ldr	r2, [pc, #80]	@ (8008d20 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d00a      	beq.n	8008cea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	2380      	movs	r3, #128	@ 0x80
 8008cda:	05db      	lsls	r3, r3, #23
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d004      	beq.n	8008cea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a10      	ldr	r2, [pc, #64]	@ (8008d28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d10c      	bne.n	8008d04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	2280      	movs	r2, #128	@ 0x80
 8008cee:	4393      	bics	r3, r2
 8008cf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	223d      	movs	r2, #61	@ 0x3d
 8008d08:	2101      	movs	r1, #1
 8008d0a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	223c      	movs	r2, #60	@ 0x3c
 8008d10:	2100      	movs	r1, #0
 8008d12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	0018      	movs	r0, r3
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	b004      	add	sp, #16
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	46c0      	nop			@ (mov r8, r8)
 8008d20:	40012c00 	.word	0x40012c00
 8008d24:	ff0fffff 	.word	0xff0fffff
 8008d28:	40000400 	.word	0x40000400

08008d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d34:	46c0      	nop			@ (mov r8, r8)
 8008d36:	46bd      	mov	sp, r7
 8008d38:	b002      	add	sp, #8
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d44:	46c0      	nop			@ (mov r8, r8)
 8008d46:	46bd      	mov	sp, r7
 8008d48:	b002      	add	sp, #8
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d54:	46c0      	nop			@ (mov r8, r8)
 8008d56:	46bd      	mov	sp, r7
 8008d58:	b002      	add	sp, #8
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <memset>:
 8008d5c:	0003      	movs	r3, r0
 8008d5e:	1882      	adds	r2, r0, r2
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d100      	bne.n	8008d66 <memset+0xa>
 8008d64:	4770      	bx	lr
 8008d66:	7019      	strb	r1, [r3, #0]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	e7f9      	b.n	8008d60 <memset+0x4>

08008d6c <__libc_init_array>:
 8008d6c:	b570      	push	{r4, r5, r6, lr}
 8008d6e:	2600      	movs	r6, #0
 8008d70:	4c0c      	ldr	r4, [pc, #48]	@ (8008da4 <__libc_init_array+0x38>)
 8008d72:	4d0d      	ldr	r5, [pc, #52]	@ (8008da8 <__libc_init_array+0x3c>)
 8008d74:	1b64      	subs	r4, r4, r5
 8008d76:	10a4      	asrs	r4, r4, #2
 8008d78:	42a6      	cmp	r6, r4
 8008d7a:	d109      	bne.n	8008d90 <__libc_init_array+0x24>
 8008d7c:	2600      	movs	r6, #0
 8008d7e:	f000 f823 	bl	8008dc8 <_init>
 8008d82:	4c0a      	ldr	r4, [pc, #40]	@ (8008dac <__libc_init_array+0x40>)
 8008d84:	4d0a      	ldr	r5, [pc, #40]	@ (8008db0 <__libc_init_array+0x44>)
 8008d86:	1b64      	subs	r4, r4, r5
 8008d88:	10a4      	asrs	r4, r4, #2
 8008d8a:	42a6      	cmp	r6, r4
 8008d8c:	d105      	bne.n	8008d9a <__libc_init_array+0x2e>
 8008d8e:	bd70      	pop	{r4, r5, r6, pc}
 8008d90:	00b3      	lsls	r3, r6, #2
 8008d92:	58eb      	ldr	r3, [r5, r3]
 8008d94:	4798      	blx	r3
 8008d96:	3601      	adds	r6, #1
 8008d98:	e7ee      	b.n	8008d78 <__libc_init_array+0xc>
 8008d9a:	00b3      	lsls	r3, r6, #2
 8008d9c:	58eb      	ldr	r3, [r5, r3]
 8008d9e:	4798      	blx	r3
 8008da0:	3601      	adds	r6, #1
 8008da2:	e7f2      	b.n	8008d8a <__libc_init_array+0x1e>
 8008da4:	08008ed4 	.word	0x08008ed4
 8008da8:	08008ed4 	.word	0x08008ed4
 8008dac:	08008ed8 	.word	0x08008ed8
 8008db0:	08008ed4 	.word	0x08008ed4

08008db4 <memcpy>:
 8008db4:	2300      	movs	r3, #0
 8008db6:	b510      	push	{r4, lr}
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d100      	bne.n	8008dbe <memcpy+0xa>
 8008dbc:	bd10      	pop	{r4, pc}
 8008dbe:	5ccc      	ldrb	r4, [r1, r3]
 8008dc0:	54c4      	strb	r4, [r0, r3]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	e7f8      	b.n	8008db8 <memcpy+0x4>
	...

08008dc8 <_init>:
 8008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dca:	46c0      	nop			@ (mov r8, r8)
 8008dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dce:	bc08      	pop	{r3}
 8008dd0:	469e      	mov	lr, r3
 8008dd2:	4770      	bx	lr

08008dd4 <_fini>:
 8008dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd6:	46c0      	nop			@ (mov r8, r8)
 8008dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dda:	bc08      	pop	{r3}
 8008ddc:	469e      	mov	lr, r3
 8008dde:	4770      	bx	lr
