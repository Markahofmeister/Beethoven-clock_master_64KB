
Beethoven-clock_master_64KB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093b4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08009470  08009470  0000a470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009564  08009564  0000b09c  2**0
                  CONTENTS
  4 .ARM          00000000  08009564  08009564  0000b09c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009564  08009564  0000b09c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009564  08009564  0000a564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009568  08009568  0000a568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  0800956c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c1c  2000009c  08009608  0000b09c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cb8  08009608  0000bcb8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018062  00000000  00000000  0000b0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b0  00000000  00000000  00023126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e0  00000000  00000000  000267d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011d7  00000000  00000000  00027eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194f5  00000000  00000000  0002908f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c652  00000000  00000000  00042584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c698  00000000  00000000  0005ebd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb26e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005330  00000000  00000000  000fb2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001005e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000009c 	.word	0x2000009c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009458 	.word	0x08009458

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a0 	.word	0x200000a0
 8000100:	08009458 	.word	0x08009458

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-low hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2200      	movs	r2, #0
 800025a:	0019      	movs	r1, r3
 800025c:	f004 f847 	bl	80042ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2201      	movs	r2, #1
 800026c:	0019      	movs	r1, r3
 800026e:	f004 f83e 	bl	80042ee <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f008 f8ee 	bl	8008458 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f008 f89d 	bl	80083c0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f004 f851 	bl	8004500 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f004 f965 	bl	8004754 <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	08009470 	.word	0x08009470

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f004 f813 	bl	8004500 <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f003 ffed 	bl	8004500 <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f004 f901 	bl	8004754 <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	08009474 	.word	0x08009474

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f003 ffa9 	bl	8004500 <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f004 f8bd 	bl	8004754 <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	08009478 	.word	0x08009478

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f003 ff59 	bl	8004500 <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f004 f86d 	bl	8004754 <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	0800947c 	.word	0x0800947c
 8000700:	08009484 	.word	0x08009484

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f003 fed7 	bl	8004500 <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f003 ffeb 	bl	8004754 <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f003 fe78 	bl	8004500 <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f003 fe57 	bl	8004500 <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f003 ff6b 	bl	8004754 <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	0800947c 	.word	0x0800947c
 8000894:	08009484 	.word	0x08009484

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f003 fdfd 	bl	8004500 <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f003 fddb 	bl	8004500 <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f003 fef8 	bl	8004754 <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	0800948c 	.word	0x0800948c
 8000978:	0800947c 	.word	0x0800947c

0800097c <NAU8315YG_Init>:

#ifndef NAU8315YG_H_
#include "../Inc/NAU8315YG.h"
#endif

void NAU8315YG_Init(NAU8315YG *nau, I2S_HandleTypeDef *hi2s, GPIO_TypeDef *enablePort, uint32_t enablePin) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	603b      	str	r3, [r7, #0]

	nau->hi2s = hi2s;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	601a      	str	r2, [r3, #0]

	nau->enablePort = enablePort;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	605a      	str	r2, [r3, #4]
	nau->enablePin = enablePin;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	609a      	str	r2, [r3, #8]

	NAU8315YG_AmpDisable(nau);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f818 	bl	80009d4 <NAU8315YG_AmpDisable>

}
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b004      	add	sp, #16
 80009aa:	bd80      	pop	{r7, pc}

080009ac <NAU8315YG_AmpEnable>:

void NAU8315YG_AmpEnable(NAU8315YG *nau) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

	// Set enable pin high
	HAL_GPIO_WritePin(nau->enablePort, nau->enablePin, GPIO_PIN_SET);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6858      	ldr	r0, [r3, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	2201      	movs	r2, #1
 80009c0:	0019      	movs	r1, r3
 80009c2:	f003 fc94 	bl	80042ee <HAL_GPIO_WritePin>

	nau->ampEnableFlag = 1;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2201      	movs	r2, #1
 80009ca:	731a      	strb	r2, [r3, #12]

}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <NAU8315YG_AmpDisable>:


void NAU8315YG_AmpDisable(NAU8315YG *nau) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

	// Set enable pin high
	HAL_GPIO_WritePin(nau->enablePort, nau->enablePin, GPIO_PIN_RESET);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6858      	ldr	r0, [r3, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	2200      	movs	r2, #0
 80009e8:	0019      	movs	r1, r3
 80009ea:	f003 fc80 	bl	80042ee <HAL_GPIO_WritePin>

	nau->ampEnableFlag = 0;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	731a      	strb	r2, [r3, #12]

}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b002      	add	sp, #8
 80009fa:	bd80      	pop	{r7, pc}

080009fc <W25Q_Init>:
#endif


uint8_t W25Q_Init(W25Q *wq, GPIO_TypeDef *nCSPort, GPIO_TypeDef *nWPPort, GPIO_TypeDef *nHOLDPort,
					uint32_t nCSPin, uint32_t nWPPin, uint32_t nHOLDPin, SPI_HandleTypeDef *hspi,
					uint8_t devID, uint8_t isQuadChip, uint8_t driveStrength) {
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
 8000a08:	603b      	str	r3, [r7, #0]

	// Map struct GPIO Ports & Pins to passed parameters
	wq->nCSPort = nCSPort;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	601a      	str	r2, [r3, #0]
	wq->nWPPort = nWPPort;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	605a      	str	r2, [r3, #4]
	wq->nHOLDPort = nHOLDPort;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	609a      	str	r2, [r3, #8]

	wq->nCSPin = nCSPin;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a20:	60da      	str	r2, [r3, #12]
	wq->nWPPin = nWPPin;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a26:	611a      	str	r2, [r3, #16]
	wq->nHOLDPin = nHOLDPin;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a2c:	615a      	str	r2, [r3, #20]

	wq->hspi = hspi;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a32:	619a      	str	r2, [r3, #24]

	wq->quadEnable = isQuadChip;		// Default state depends on PN of chip.
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	223c      	movs	r2, #60	@ 0x3c
 8000a38:	2108      	movs	r1, #8
 8000a3a:	1852      	adds	r2, r2, r1
 8000a3c:	19d2      	adds	r2, r2, r7
 8000a3e:	2125      	movs	r1, #37	@ 0x25
 8000a40:	7812      	ldrb	r2, [r2, #0]
 8000a42:	545a      	strb	r2, [r3, r1]
	wq->writeEnable = 0;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2223      	movs	r2, #35	@ 0x23
 8000a48:	2100      	movs	r1, #0
 8000a4a:	5499      	strb	r1, [r3, r2]

	// Set CS pin high
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	2201      	movs	r2, #1
 8000a58:	0019      	movs	r1, r3
 8000a5a:	f003 fc48 	bl	80042ee <HAL_GPIO_WritePin>

	// Set hold pin high (Disable)
	HAL_GPIO_WritePin(wq->nHOLDPort, wq->nHOLDPin, GPIO_PIN_SET);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6898      	ldr	r0, [r3, #8]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	2201      	movs	r2, #1
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	f003 fc3f 	bl	80042ee <HAL_GPIO_WritePin>

	// Set WP pin high (disable)
	HAL_GPIO_WritePin(wq->nWPPort, wq->nWPPin, GPIO_PIN_SET);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6858      	ldr	r0, [r3, #4]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	f003 fc36 	bl	80042ee <HAL_GPIO_WritePin>

	// HAL status handle used to indicate error messages
	HAL_StatusTypeDef halRet = HAL_OK;
 8000a82:	2116      	movs	r1, #22
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]

	uint8_t returnInc = 1;			// Integer error code return, incremented after successful things.
 8000a8a:	2617      	movs	r6, #23
 8000a8c:	19bb      	adds	r3, r7, r6
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]

	uint8_t errorsEnabled = 1;		// Use for debugging
 8000a92:	2315      	movs	r3, #21
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]

	// Release from power down mode
	halRet = W25Q_ReleasePowerDown(wq);
 8000a9a:	000d      	movs	r5, r1
 8000a9c:	187c      	adds	r4, r7, r1
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f000 f8ea 	bl	8000c7a <W25Q_ReleasePowerDown>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000aaa:	197b      	adds	r3, r7, r5
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d007      	beq.n	8000ac2 <W25Q_Init+0xc6>
 8000ab2:	2315      	movs	r3, #21
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d002      	beq.n	8000ac2 <W25Q_Init+0xc6>
		return returnInc;
 8000abc:	19bb      	adds	r3, r7, r6
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	e0d7      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000ac2:	2517      	movs	r5, #23
 8000ac4:	197b      	adds	r3, r7, r5
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	197b      	adds	r3, r7, r5
 8000aca:	3201      	adds	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]

	// Reset Device
	halRet = W25Q_ChipReset(wq);
 8000ace:	2616      	movs	r6, #22
 8000ad0:	19bc      	adds	r4, r7, r6
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 fc45 	bl	8001364 <W25Q_ChipReset>
 8000ada:	0003      	movs	r3, r0
 8000adc:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000ade:	19bb      	adds	r3, r7, r6
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d007      	beq.n	8000af6 <W25Q_Init+0xfa>
 8000ae6:	2315      	movs	r3, #21
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <W25Q_Init+0xfa>
		return returnInc;
 8000af0:	197b      	adds	r3, r7, r5
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	e0bd      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000af6:	2517      	movs	r5, #23
 8000af8:	197b      	adds	r3, r7, r5
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	197b      	adds	r3, r7, r5
 8000afe:	3201      	adds	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]

	// Read initial Status Registers
	halRet = W25Q_ReadStatusRegs(wq);
 8000b02:	2616      	movs	r6, #22
 8000b04:	19bc      	adds	r4, r7, r6
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 faef 	bl	80010ec <W25Q_ReadStatusRegs>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b12:	19bb      	adds	r3, r7, r6
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d007      	beq.n	8000b2a <W25Q_Init+0x12e>
 8000b1a:	2315      	movs	r3, #21
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <W25Q_Init+0x12e>
		return returnInc;
 8000b24:	197b      	adds	r3, r7, r5
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	e0a3      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000b2a:	2517      	movs	r5, #23
 8000b2c:	197b      	adds	r3, r7, r5
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	197b      	adds	r3, r7, r5
 8000b32:	3201      	adds	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]

	// Increase driver strength?
	halRet = W25Q_SetDriverStrength(wq, driveStrength);
 8000b36:	2616      	movs	r6, #22
 8000b38:	19bc      	adds	r4, r7, r6
 8000b3a:	2340      	movs	r3, #64	@ 0x40
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	189b      	adds	r3, r3, r2
 8000b40:	19db      	adds	r3, r3, r7
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	0011      	movs	r1, r2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 fc75 	bl	8001438 <W25Q_SetDriverStrength>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b52:	19bb      	adds	r3, r7, r6
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d007      	beq.n	8000b6a <W25Q_Init+0x16e>
 8000b5a:	2315      	movs	r3, #21
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d002      	beq.n	8000b6a <W25Q_Init+0x16e>
		return returnInc;
 8000b64:	197b      	adds	r3, r7, r5
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	e083      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000b6a:	2517      	movs	r5, #23
 8000b6c:	197b      	adds	r3, r7, r5
 8000b6e:	781a      	ldrb	r2, [r3, #0]
 8000b70:	197b      	adds	r3, r7, r5
 8000b72:	3201      	adds	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
//			returnInc++;
//	}


	// Get + Store IDs
	halRet = W25Q_GetIDs(wq, devID);
 8000b76:	2616      	movs	r6, #22
 8000b78:	19bc      	adds	r4, r7, r6
 8000b7a:	2338      	movs	r3, #56	@ 0x38
 8000b7c:	2208      	movs	r2, #8
 8000b7e:	189b      	adds	r3, r3, r2
 8000b80:	19db      	adds	r3, r3, r7
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	0011      	movs	r1, r2
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 f8bb 	bl	8000d04 <W25Q_GetIDs>
 8000b8e:	0003      	movs	r3, r0
 8000b90:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b92:	19bb      	adds	r3, r7, r6
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d007      	beq.n	8000baa <W25Q_Init+0x1ae>
 8000b9a:	2315      	movs	r3, #21
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <W25Q_Init+0x1ae>
		return returnInc;
 8000ba4:	197b      	adds	r3, r7, r5
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	e063      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000baa:	2517      	movs	r5, #23
 8000bac:	197b      	adds	r3, r7, r5
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	197b      	adds	r3, r7, r5
 8000bb2:	3201      	adds	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]

	// Get + Store Status Register Contents
	halRet = W25Q_ReadStatusRegs(wq);
 8000bb6:	2616      	movs	r6, #22
 8000bb8:	19bc      	adds	r4, r7, r6
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f000 fa95 	bl	80010ec <W25Q_ReadStatusRegs>
 8000bc2:	0003      	movs	r3, r0
 8000bc4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000bc6:	19bb      	adds	r3, r7, r6
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d007      	beq.n	8000bde <W25Q_Init+0x1e2>
 8000bce:	2315      	movs	r3, #21
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d002      	beq.n	8000bde <W25Q_Init+0x1e2>
		return returnInc;
 8000bd8:	197b      	adds	r3, r7, r5
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	e049      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000bde:	2517      	movs	r5, #23
 8000be0:	197b      	adds	r3, r7, r5
 8000be2:	781a      	ldrb	r2, [r3, #0]
 8000be4:	197b      	adds	r3, r7, r5
 8000be6:	3201      	adds	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]

	// Disable Write Access to Memory
	if(wq->writeEnable != 0) {
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2223      	movs	r2, #35	@ 0x23
 8000bee:	5c9b      	ldrb	r3, [r3, r2]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d019      	beq.n	8000c28 <W25Q_Init+0x22c>
		halRet = W25Q_DisableWrite(wq);
 8000bf4:	2616      	movs	r6, #22
 8000bf6:	19bc      	adds	r4, r7, r6
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 f985 	bl	8000f0a <W25Q_DisableWrite>
 8000c00:	0003      	movs	r3, r0
 8000c02:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK && errorsEnabled)
 8000c04:	19bb      	adds	r3, r7, r6
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d007      	beq.n	8000c1c <W25Q_Init+0x220>
 8000c0c:	2315      	movs	r3, #21
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <W25Q_Init+0x220>
			return returnInc;
 8000c16:	197b      	adds	r3, r7, r5
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	e02a      	b.n	8000c72 <W25Q_Init+0x276>
		else
			returnInc++;
 8000c1c:	2117      	movs	r1, #23
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	3201      	adds	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
	}

	// Get + Store Status Register Contents
	halRet = W25Q_ReadStatusRegs(wq);
 8000c28:	2516      	movs	r5, #22
 8000c2a:	197c      	adds	r4, r7, r5
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 fa5c 	bl	80010ec <W25Q_ReadStatusRegs>
 8000c34:	0003      	movs	r3, r0
 8000c36:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000c38:	197b      	adds	r3, r7, r5
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d008      	beq.n	8000c52 <W25Q_Init+0x256>
 8000c40:	2315      	movs	r3, #21
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <W25Q_Init+0x256>
		return returnInc;
 8000c4a:	2317      	movs	r3, #23
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	e00f      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000c52:	2117      	movs	r1, #23
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	781a      	ldrb	r2, [r3, #0]
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	3201      	adds	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]

	// Set WP pin low (Enable)
	HAL_GPIO_WritePin(wq->nWPPort, wq->nWPPin, GPIO_PIN_RESET);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	6858      	ldr	r0, [r3, #4]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	2200      	movs	r2, #0
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	f003 fb3f 	bl	80042ee <HAL_GPIO_WritePin>

	return 0;
 8000c70:	2300      	movs	r3, #0

}
 8000c72:	0018      	movs	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b007      	add	sp, #28
 8000c78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c7a <W25Q_ReleasePowerDown>:

HAL_StatusTypeDef W25Q_ReleasePowerDown(W25Q *wq) {
 8000c7a:	b590      	push	{r4, r7, lr}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000c82:	240e      	movs	r4, #14
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]

	// TX release power-down instruction
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6818      	ldr	r0, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	2200      	movs	r2, #0
 8000c96:	0019      	movs	r1, r3
 8000c98:	f003 fb29 	bl	80042ee <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_READ_RELEASE_ID}, 1, HAL_MAX_DELAY);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6998      	ldr	r0, [r3, #24]
 8000ca0:	210c      	movs	r1, #12
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	22ab      	movs	r2, #171	@ 0xab
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	193c      	adds	r4, r7, r4
 8000caa:	2301      	movs	r3, #1
 8000cac:	425b      	negs	r3, r3
 8000cae:	1879      	adds	r1, r7, r1
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f006 fcc5 	bl	8007640 <HAL_SPI_Transmit>
 8000cb6:	0003      	movs	r3, r0
 8000cb8:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	0019      	movs	r1, r3
 8000cc8:	f003 fb11 	bl	80042ee <HAL_GPIO_WritePin>

	// Delay for at least 3 us
	for(uint8_t i = 0; i < 15; i++) {
 8000ccc:	230f      	movs	r3, #15
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	e006      	b.n	8000ce4 <W25Q_ReleasePowerDown+0x6a>
		__NOP();
 8000cd6:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < 15; i++) {
 8000cd8:	210f      	movs	r1, #15
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	3201      	adds	r2, #1
 8000ce2:	701a      	strb	r2, [r3, #0]
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b0e      	cmp	r3, #14
 8000cec:	d9f3      	bls.n	8000cd6 <W25Q_ReleasePowerDown+0x5c>
	}

	wq->powerUp = 1; 		// We have now successfully exited power-down state
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2224      	movs	r2, #36	@ 0x24
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	5499      	strb	r1, [r3, r2]

	return halRet;
 8000cf6:	230e      	movs	r3, #14
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	781b      	ldrb	r3, [r3, #0]

}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b005      	add	sp, #20
 8000d02:	bd90      	pop	{r4, r7, pc}

08000d04 <W25Q_GetIDs>:

HAL_StatusTypeDef W25Q_GetIDs(W25Q *wq, uint8_t devID_passed) {
 8000d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d06:	b089      	sub	sp, #36	@ 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	000a      	movs	r2, r1
 8000d0e:	1cfb      	adds	r3, r7, #3
 8000d10:	701a      	strb	r2, [r3, #0]


	HAL_StatusTypeDef halRet = HAL_OK;
 8000d12:	241f      	movs	r4, #31
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]

	/*
	 * Release power down + read device ID
	 */
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6818      	ldr	r0, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	2200      	movs	r2, #0
 8000d26:	0019      	movs	r1, r3
 8000d28:	f003 fae1 	bl	80042ee <HAL_GPIO_WritePin>
		// TX return device ID instruction
		halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[4]){CMD_READ_RELEASE_ID, 0x00, 0x00, 0x00}, 4, HAL_MAX_DELAY);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6998      	ldr	r0, [r3, #24]
 8000d30:	2118      	movs	r1, #24
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	22ab      	movs	r2, #171	@ 0xab
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	705a      	strb	r2, [r3, #1]
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	709a      	strb	r2, [r3, #2]
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	70da      	strb	r2, [r3, #3]
 8000d4a:	0025      	movs	r5, r4
 8000d4c:	193c      	adds	r4, r7, r4
 8000d4e:	2301      	movs	r3, #1
 8000d50:	425b      	negs	r3, r3
 8000d52:	1879      	adds	r1, r7, r1
 8000d54:	2204      	movs	r2, #4
 8000d56:	f006 fc73 	bl	8007640 <HAL_SPI_Transmit>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 8000d5e:	197b      	adds	r3, r7, r5
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00b      	beq.n	8000d7e <W25Q_GetIDs+0x7a>
			HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6818      	ldr	r0, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	2201      	movs	r2, #1
 8000d72:	0019      	movs	r1, r3
 8000d74:	f003 fabb 	bl	80042ee <HAL_GPIO_WritePin>
			return halRet;
 8000d78:	197b      	adds	r3, r7, r5
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	e07c      	b.n	8000e78 <W25Q_GetIDs+0x174>
		}

		// RX device ID into struct variable
		uint8_t devIDRet[1] = {0x00};
 8000d7e:	2514      	movs	r5, #20
 8000d80:	197b      	adds	r3, r7, r5
 8000d82:	4a3f      	ldr	r2, [pc, #252]	@ (8000e80 <W25Q_GetIDs+0x17c>)
 8000d84:	7812      	ldrb	r2, [r2, #0]
 8000d86:	701a      	strb	r2, [r3, #0]
		halRet = HAL_SPI_Receive(wq->hspi, devIDRet, 1, HAL_MAX_DELAY);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6998      	ldr	r0, [r3, #24]
 8000d8c:	261f      	movs	r6, #31
 8000d8e:	19bc      	adds	r4, r7, r6
 8000d90:	2301      	movs	r3, #1
 8000d92:	425b      	negs	r3, r3
 8000d94:	1979      	adds	r1, r7, r5
 8000d96:	2201      	movs	r2, #1
 8000d98:	f006 fdb2 	bl	8007900 <HAL_SPI_Receive>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	2201      	movs	r2, #1
 8000dac:	0019      	movs	r1, r3
 8000dae:	f003 fa9e 	bl	80042ee <HAL_GPIO_WritePin>
		wq->devID = devIDRet[0];
 8000db2:	197b      	adds	r3, r7, r5
 8000db4:	781a      	ldrb	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	775a      	strb	r2, [r3, #29]


		 // Check to ensure that received device ID is equal to that passed by the user in the init function
		if((halRet != HAL_OK) || (wq->devID != devID_passed))
 8000dba:	19bb      	adds	r3, r7, r6
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d105      	bne.n	8000dce <W25Q_GetIDs+0xca>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7f5b      	ldrb	r3, [r3, #29]
 8000dc6:	1cfa      	adds	r2, r7, #3
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d001      	beq.n	8000dd2 <W25Q_GetIDs+0xce>
			return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e052      	b.n	8000e78 <W25Q_GetIDs+0x174>

	/*
	 * Read and check MFR ID
	 */
		// TX read mfr + device ID command
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6818      	ldr	r0, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	0019      	movs	r1, r3
 8000de0:	f003 fa85 	bl	80042ee <HAL_GPIO_WritePin>
		halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[4]){CMD_READ_MFR_ID, 0x00, 0x00, 0x00}, 4, HAL_MAX_DELAY);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6998      	ldr	r0, [r3, #24]
 8000de8:	2110      	movs	r1, #16
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2290      	movs	r2, #144	@ 0x90
 8000dee:	701a      	strb	r2, [r3, #0]
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2200      	movs	r2, #0
 8000df4:	705a      	strb	r2, [r3, #1]
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2200      	movs	r2, #0
 8000dfa:	709a      	strb	r2, [r3, #2]
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2200      	movs	r2, #0
 8000e00:	70da      	strb	r2, [r3, #3]
 8000e02:	251f      	movs	r5, #31
 8000e04:	197c      	adds	r4, r7, r5
 8000e06:	2301      	movs	r3, #1
 8000e08:	425b      	negs	r3, r3
 8000e0a:	1879      	adds	r1, r7, r1
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	f006 fc17 	bl	8007640 <HAL_SPI_Transmit>
 8000e12:	0003      	movs	r3, r0
 8000e14:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000e16:	197b      	adds	r3, r7, r5
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <W25Q_GetIDs+0x120>
			return halRet;
 8000e1e:	197b      	adds	r3, r7, r5
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	e029      	b.n	8000e78 <W25Q_GetIDs+0x174>
		}



		// RX device and mfr ID, store in struct variable
		uint8_t retIDs[2] = {0x00, 0x00};
 8000e24:	250c      	movs	r5, #12
 8000e26:	197b      	adds	r3, r7, r5
 8000e28:	2200      	movs	r2, #0
 8000e2a:	801a      	strh	r2, [r3, #0]
		halRet = HAL_SPI_Receive(wq->hspi, retIDs, 2, HAL_MAX_DELAY);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6998      	ldr	r0, [r3, #24]
 8000e30:	261f      	movs	r6, #31
 8000e32:	19bc      	adds	r4, r7, r6
 8000e34:	2301      	movs	r3, #1
 8000e36:	425b      	negs	r3, r3
 8000e38:	1979      	adds	r1, r7, r5
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	f006 fd60 	bl	8007900 <HAL_SPI_Receive>
 8000e40:	0003      	movs	r3, r0
 8000e42:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	2201      	movs	r2, #1
 8000e50:	0019      	movs	r1, r3
 8000e52:	f003 fa4c 	bl	80042ee <HAL_GPIO_WritePin>
		wq->mfrID = retIDs[0];
 8000e56:	197b      	adds	r3, r7, r5
 8000e58:	781a      	ldrb	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	771a      	strb	r2, [r3, #28]


		// Check to ensure that received mfr ID is correct.
		if((halRet != HAL_OK) || (wq->mfrID != 0xEF))
 8000e5e:	19bb      	adds	r3, r7, r6
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d103      	bne.n	8000e6e <W25Q_GetIDs+0x16a>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7f1b      	ldrb	r3, [r3, #28]
 8000e6a:	2bef      	cmp	r3, #239	@ 0xef
 8000e6c:	d001      	beq.n	8000e72 <W25Q_GetIDs+0x16e>
			return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e002      	b.n	8000e78 <W25Q_GetIDs+0x174>

	/*
	 * Leaving out for now: Read JEDEC ID
	 */

		return halRet;
 8000e72:	231f      	movs	r3, #31
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	781b      	ldrb	r3, [r3, #0]
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b009      	add	sp, #36	@ 0x24
 8000e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e80:	08009494 	.word	0x08009494

08000e84 <W25Q_EnableWrite>:

HAL_StatusTypeDef W25Q_EnableWrite(W25Q *wq) {
 8000e84:	b5b0      	push	{r4, r5, r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000e8c:	250f      	movs	r5, #15
 8000e8e:	197b      	adds	r3, r7, r5
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]

	// TX write enable command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	f003 fa24 	bl	80042ee <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_WRITE_ENABLE}, 1, HAL_MAX_DELAY);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6998      	ldr	r0, [r3, #24]
 8000eaa:	210c      	movs	r1, #12
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2206      	movs	r2, #6
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	197c      	adds	r4, r7, r5
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f006 fbc0 	bl	8007640 <HAL_SPI_Transmit>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	2201      	movs	r2, #1
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	f003 fa0c 	bl	80042ee <HAL_GPIO_WritePin>

	if(halRet != HAL_OK)
 8000ed6:	197b      	adds	r3, r7, r5
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <W25Q_EnableWrite+0x60>
		return halRet;
 8000ede:	197b      	adds	r3, r7, r5
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	e00e      	b.n	8000f02 <W25Q_EnableWrite+0x7e>

	// Read back written value and confirm
	W25Q_ReadStatusReg(wq, 1);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f000 f851 	bl	8000f90 <W25Q_ReadStatusReg>

	// Bit 1 of status register 1 should now be 1
	if(wq->writeEnable != 1)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2223      	movs	r2, #35	@ 0x23
 8000ef2:	5c9b      	ldrb	r3, [r3, r2]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d001      	beq.n	8000efc <W25Q_EnableWrite+0x78>
		return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e002      	b.n	8000f02 <W25Q_EnableWrite+0x7e>

	return halRet;
 8000efc:	230f      	movs	r3, #15
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	781b      	ldrb	r3, [r3, #0]

}
 8000f02:	0018      	movs	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b004      	add	sp, #16
 8000f08:	bdb0      	pop	{r4, r5, r7, pc}

08000f0a <W25Q_DisableWrite>:

HAL_StatusTypeDef W25Q_DisableWrite(W25Q *wq) {
 8000f0a:	b5b0      	push	{r4, r5, r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000f12:	250f      	movs	r5, #15
 8000f14:	197b      	adds	r3, r7, r5
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]

	// TX write disable command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	2200      	movs	r2, #0
 8000f26:	0019      	movs	r1, r3
 8000f28:	f003 f9e1 	bl	80042ee <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_WRITE_DISABLE}, 1, HAL_MAX_DELAY);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6998      	ldr	r0, [r3, #24]
 8000f30:	210c      	movs	r1, #12
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2204      	movs	r2, #4
 8000f36:	701a      	strb	r2, [r3, #0]
 8000f38:	197c      	adds	r4, r7, r5
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	425b      	negs	r3, r3
 8000f3e:	1879      	adds	r1, r7, r1
 8000f40:	2201      	movs	r2, #1
 8000f42:	f006 fb7d 	bl	8007640 <HAL_SPI_Transmit>
 8000f46:	0003      	movs	r3, r0
 8000f48:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	2201      	movs	r2, #1
 8000f56:	0019      	movs	r1, r3
 8000f58:	f003 f9c9 	bl	80042ee <HAL_GPIO_WritePin>

	if(halRet != HAL_OK)
 8000f5c:	197b      	adds	r3, r7, r5
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <W25Q_DisableWrite+0x60>
		return halRet;
 8000f64:	197b      	adds	r3, r7, r5
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	e00e      	b.n	8000f88 <W25Q_DisableWrite+0x7e>

	// Read back written value and confirm
	W25Q_ReadStatusReg(wq, 1);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f000 f80e 	bl	8000f90 <W25Q_ReadStatusReg>

	// Bit 1 of status register 1 should still be 0
	if(wq->writeEnable != 0)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2223      	movs	r2, #35	@ 0x23
 8000f78:	5c9b      	ldrb	r3, [r3, r2]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <W25Q_DisableWrite+0x78>
		return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e002      	b.n	8000f88 <W25Q_DisableWrite+0x7e>

	return halRet;
 8000f82:	230f      	movs	r3, #15
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	781b      	ldrb	r3, [r3, #0]

}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b004      	add	sp, #16
 8000f8e:	bdb0      	pop	{r4, r5, r7, pc}

08000f90 <W25Q_ReadStatusReg>:

HAL_StatusTypeDef W25Q_ReadStatusReg(W25Q *wq, uint8_t regNum) {
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	000a      	movs	r2, r1
 8000f9a:	1cfb      	adds	r3, r7, #3
 8000f9c:	701a      	strb	r2, [r3, #0]

	// Check register number is valid
	if(regNum < 1 || regNum > 3) {
 8000f9e:	1cfb      	adds	r3, r7, #3
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <W25Q_ReadStatusReg+0x1e>
 8000fa6:	1cfb      	adds	r3, r7, #3
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d901      	bls.n	8000fb2 <W25Q_ReadStatusReg+0x22>
		return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e094      	b.n	80010dc <W25Q_ReadStatusReg+0x14c>
	}

	HAL_StatusTypeDef halRet = HAL_OK;
 8000fb2:	2417      	movs	r4, #23
 8000fb4:	193b      	adds	r3, r7, r4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]

	// Array of commands for status registers 1-3
	uint8_t statRegCMDs[3] = {CMD_READ_STAT_1, CMD_READ_STAT_2, CMD_READ_STAT_3};
 8000fba:	2514      	movs	r5, #20
 8000fbc:	197b      	adds	r3, r7, r5
 8000fbe:	4a49      	ldr	r2, [pc, #292]	@ (80010e4 <W25Q_ReadStatusReg+0x154>)
 8000fc0:	8811      	ldrh	r1, [r2, #0]
 8000fc2:	8019      	strh	r1, [r3, #0]
 8000fc4:	7892      	ldrb	r2, [r2, #2]
 8000fc6:	709a      	strb	r2, [r3, #2]

	// TX read status register command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	0019      	movs	r1, r3
 8000fd6:	f003 f98a 	bl	80042ee <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){statRegCMDs[regNum - 1]}, 1, HAL_MAX_DELAY);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6998      	ldr	r0, [r3, #24]
 8000fde:	1cfb      	adds	r3, r7, #3
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	197a      	adds	r2, r7, r5
 8000fe6:	5cd2      	ldrb	r2, [r2, r3]
 8000fe8:	2110      	movs	r1, #16
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	0025      	movs	r5, r4
 8000ff0:	193c      	adds	r4, r7, r4
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	425b      	negs	r3, r3
 8000ff6:	1879      	adds	r1, r7, r1
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f006 fb21 	bl	8007640 <HAL_SPI_Transmit>
 8000ffe:	0003      	movs	r3, r0
 8001000:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8001002:	197b      	adds	r3, r7, r5
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00b      	beq.n	8001022 <W25Q_ReadStatusReg+0x92>
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	b29b      	uxth	r3, r3
 8001014:	2201      	movs	r2, #1
 8001016:	0019      	movs	r1, r3
 8001018:	f003 f969 	bl	80042ee <HAL_GPIO_WritePin>
		return halRet;
 800101c:	197b      	adds	r3, r7, r5
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	e05c      	b.n	80010dc <W25Q_ReadStatusReg+0x14c>
	}

	// RX status register
	uint8_t statRegRet[1] = {0x00};
 8001022:	210c      	movs	r1, #12
 8001024:	187b      	adds	r3, r7, r1
 8001026:	4a30      	ldr	r2, [pc, #192]	@ (80010e8 <W25Q_ReadStatusReg+0x158>)
 8001028:	7812      	ldrb	r2, [r2, #0]
 800102a:	701a      	strb	r2, [r3, #0]
	halRet = HAL_SPI_Receive(wq->hspi, statRegRet, 1, HAL_MAX_DELAY);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6998      	ldr	r0, [r3, #24]
 8001030:	2317      	movs	r3, #23
 8001032:	18fc      	adds	r4, r7, r3
 8001034:	2301      	movs	r3, #1
 8001036:	425b      	negs	r3, r3
 8001038:	1879      	adds	r1, r7, r1
 800103a:	2201      	movs	r2, #1
 800103c:	f006 fc60 	bl	8007900 <HAL_SPI_Receive>
 8001040:	0003      	movs	r3, r0
 8001042:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	b29b      	uxth	r3, r3
 800104e:	2201      	movs	r2, #1
 8001050:	0019      	movs	r1, r3
 8001052:	f003 f94c 	bl	80042ee <HAL_GPIO_WritePin>

	switch(regNum) {
 8001056:	1cfb      	adds	r3, r7, #3
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b03      	cmp	r3, #3
 800105c:	d029      	beq.n	80010b2 <W25Q_ReadStatusReg+0x122>
 800105e:	dc3a      	bgt.n	80010d6 <W25Q_ReadStatusReg+0x146>
 8001060:	2b01      	cmp	r3, #1
 8001062:	d002      	beq.n	800106a <W25Q_ReadStatusReg+0xda>
 8001064:	2b02      	cmp	r3, #2
 8001066:	d012      	beq.n	800108e <W25Q_ReadStatusReg+0xfe>
 8001068:	e035      	b.n	80010d6 <W25Q_ReadStatusReg+0x146>
	case 1:
		wq->statReg1 = statRegRet[0];
 800106a:	230c      	movs	r3, #12
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	7819      	ldrb	r1, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2220      	movs	r2, #32
 8001074:	5499      	strb	r1, [r3, r2]
		wq->writeEnable = (wq->statReg1 & 0b00000010) >> 1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2220      	movs	r2, #32
 800107a:	5c9b      	ldrb	r3, [r3, r2]
 800107c:	105b      	asrs	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2201      	movs	r2, #1
 8001082:	4013      	ands	r3, r2
 8001084:	b2d9      	uxtb	r1, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2223      	movs	r2, #35	@ 0x23
 800108a:	5499      	strb	r1, [r3, r2]
		break;
 800108c:	e023      	b.n	80010d6 <W25Q_ReadStatusReg+0x146>
	case 2:
		wq->statReg2 = statRegRet[0];
 800108e:	230c      	movs	r3, #12
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	7819      	ldrb	r1, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2221      	movs	r2, #33	@ 0x21
 8001098:	5499      	strb	r1, [r3, r2]
		wq->quadEnable = (wq->statReg2 & 0b00000010) >> 1;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2221      	movs	r2, #33	@ 0x21
 800109e:	5c9b      	ldrb	r3, [r3, r2]
 80010a0:	105b      	asrs	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2201      	movs	r2, #1
 80010a6:	4013      	ands	r3, r2
 80010a8:	b2d9      	uxtb	r1, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2225      	movs	r2, #37	@ 0x25
 80010ae:	5499      	strb	r1, [r3, r2]
		break;
 80010b0:	e011      	b.n	80010d6 <W25Q_ReadStatusReg+0x146>
	case 3:
		wq->statReg3 = statRegRet[0];
 80010b2:	230c      	movs	r3, #12
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	7819      	ldrb	r1, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2222      	movs	r2, #34	@ 0x22
 80010bc:	5499      	strb	r1, [r3, r2]
		wq->driverStrength = (wq->statReg3 & 0b01100000) >> 5;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2222      	movs	r2, #34	@ 0x22
 80010c2:	5c9b      	ldrb	r3, [r3, r2]
 80010c4:	115b      	asrs	r3, r3, #5
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2203      	movs	r2, #3
 80010ca:	4013      	ands	r3, r2
 80010cc:	b2d9      	uxtb	r1, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2226      	movs	r2, #38	@ 0x26
 80010d2:	5499      	strb	r1, [r3, r2]
		break;
 80010d4:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 80010d6:	2317      	movs	r3, #23
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	781b      	ldrb	r3, [r3, #0]

}
 80010dc:	0018      	movs	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	b006      	add	sp, #24
 80010e2:	bdb0      	pop	{r4, r5, r7, pc}
 80010e4:	08009498 	.word	0x08009498
 80010e8:	08009494 	.word	0x08009494

080010ec <W25Q_ReadStatusRegs>:

HAL_StatusTypeDef W25Q_ReadStatusRegs(W25Q *wq) {
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80010f4:	230e      	movs	r3, #14
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 1; i <=3; i++) {
 80010fc:	230f      	movs	r3, #15
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	e00d      	b.n	8001122 <W25Q_ReadStatusRegs+0x36>

		W25Q_ReadStatusReg(wq, i);
 8001106:	240f      	movs	r4, #15
 8001108:	193b      	adds	r3, r7, r4
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	0011      	movs	r1, r2
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff ff3d 	bl	8000f90 <W25Q_ReadStatusReg>
	for(uint8_t i = 1; i <=3; i++) {
 8001116:	0021      	movs	r1, r4
 8001118:	187b      	adds	r3, r7, r1
 800111a:	781a      	ldrb	r2, [r3, #0]
 800111c:	187b      	adds	r3, r7, r1
 800111e:	3201      	adds	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	230f      	movs	r3, #15
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b03      	cmp	r3, #3
 800112a:	d9ec      	bls.n	8001106 <W25Q_ReadStatusRegs+0x1a>

	}

	return halRet;
 800112c:	230e      	movs	r3, #14
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	781b      	ldrb	r3, [r3, #0]

}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b005      	add	sp, #20
 8001138:	bd90      	pop	{r4, r7, pc}
	...

0800113c <W25Q_WriteStatusReg>:

HAL_StatusTypeDef W25Q_WriteStatusReg(W25Q *wq, uint8_t regNum, uint8_t regVal) {
 800113c:	b5b0      	push	{r4, r5, r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	0008      	movs	r0, r1
 8001146:	0011      	movs	r1, r2
 8001148:	1cfb      	adds	r3, r7, #3
 800114a:	1c02      	adds	r2, r0, #0
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	1cbb      	adds	r3, r7, #2
 8001150:	1c0a      	adds	r2, r1, #0
 8001152:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8001154:	2513      	movs	r5, #19
 8001156:	197b      	adds	r3, r7, r5
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]

	// Enable Write Access to Memory
	// Write access will disable after status register write
	if(wq->writeEnable != 1) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2223      	movs	r2, #35	@ 0x23
 8001160:	5c9b      	ldrb	r3, [r3, r2]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d00c      	beq.n	8001180 <W25Q_WriteStatusReg+0x44>
		halRet = W25Q_EnableWrite(wq);
 8001166:	197c      	adds	r4, r7, r5
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	0018      	movs	r0, r3
 800116c:	f7ff fe8a 	bl	8000e84 <W25Q_EnableWrite>
 8001170:	0003      	movs	r3, r0
 8001172:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK)
 8001174:	197b      	adds	r3, r7, r5
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <W25Q_WriteStatusReg+0x44>
			return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e08a      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>
	}

	// Array of commands for status registers 1-3
	uint8_t statRegCMDs[3] = {CMD_WRITE_STAT_1, CMD_WRITE_STAT_2, CMD_WRITE_STAT_3};
 8001180:	2410      	movs	r4, #16
 8001182:	193b      	adds	r3, r7, r4
 8001184:	4a46      	ldr	r2, [pc, #280]	@ (80012a0 <W25Q_WriteStatusReg+0x164>)
 8001186:	8811      	ldrh	r1, [r2, #0]
 8001188:	8019      	strh	r1, [r3, #0]
 800118a:	7892      	ldrb	r2, [r2, #2]
 800118c:	709a      	strb	r2, [r3, #2]

	// TX write status reg with value
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	b29b      	uxth	r3, r3
 8001198:	2200      	movs	r2, #0
 800119a:	0019      	movs	r1, r3
 800119c:	f003 f8a7 	bl	80042ee <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[2]){statRegCMDs[regNum - 1], regVal}, 2, HAL_MAX_DELAY);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6998      	ldr	r0, [r3, #24]
 80011a4:	1cfb      	adds	r3, r7, #3
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	193a      	adds	r2, r7, r4
 80011ac:	5cd2      	ldrb	r2, [r2, r3]
 80011ae:	210c      	movs	r1, #12
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	701a      	strb	r2, [r3, #0]
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	1cba      	adds	r2, r7, #2
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	705a      	strb	r2, [r3, #1]
 80011bc:	2513      	movs	r5, #19
 80011be:	197c      	adds	r4, r7, r5
 80011c0:	2301      	movs	r3, #1
 80011c2:	425b      	negs	r3, r3
 80011c4:	1879      	adds	r1, r7, r1
 80011c6:	2202      	movs	r2, #2
 80011c8:	f006 fa3a 	bl	8007640 <HAL_SPI_Transmit>
 80011cc:	0003      	movs	r3, r0
 80011ce:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	2201      	movs	r2, #1
 80011dc:	0019      	movs	r1, r3
 80011de:	f003 f886 	bl	80042ee <HAL_GPIO_WritePin>

	// WEL bit will now be set back to 0
	halRet = W25Q_ReadStatusReg(wq, 1);
 80011e2:	197c      	adds	r4, r7, r5
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2101      	movs	r1, #1
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7ff fed1 	bl	8000f90 <W25Q_ReadStatusReg>
 80011ee:	0003      	movs	r3, r0
 80011f0:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80011f2:	197b      	adds	r3, r7, r5
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d002      	beq.n	8001200 <W25Q_WriteStatusReg+0xc4>
		return halRet;
 80011fa:	197b      	adds	r3, r7, r5
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	e04a      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>

	// Delay maximum status register write time (15ms), as given by chip datasheet.
	// ~235ns per i
	for(uint32_t i = 0; i < 70000; i++) {
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e003      	b.n	800120e <W25Q_WriteStatusReg+0xd2>
		__NOP();
 8001206:	46c0      	nop			@ (mov r8, r8)
	for(uint32_t i = 0; i < 70000; i++) {
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	3301      	adds	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	4a24      	ldr	r2, [pc, #144]	@ (80012a4 <W25Q_WriteStatusReg+0x168>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d9f7      	bls.n	8001206 <W25Q_WriteStatusReg+0xca>
	}

	if(halRet != HAL_OK)
 8001216:	2213      	movs	r2, #19
 8001218:	18bb      	adds	r3, r7, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <W25Q_WriteStatusReg+0xea>
		return halRet;
 8001220:	18bb      	adds	r3, r7, r2
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	e037      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>

	// Read back written value and confirm
	halRet = W25Q_ReadStatusReg(wq, regNum);
 8001226:	2313      	movs	r3, #19
 8001228:	18fc      	adds	r4, r7, r3
 800122a:	1cfb      	adds	r3, r7, #3
 800122c:	781a      	ldrb	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	0011      	movs	r1, r2
 8001232:	0018      	movs	r0, r3
 8001234:	f7ff feac 	bl	8000f90 <W25Q_ReadStatusReg>
 8001238:	0003      	movs	r3, r0
 800123a:	7023      	strb	r3, [r4, #0]
	switch(regNum) {
 800123c:	1cfb      	adds	r3, r7, #3
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b03      	cmp	r3, #3
 8001242:	d017      	beq.n	8001274 <W25Q_WriteStatusReg+0x138>
 8001244:	dc24      	bgt.n	8001290 <W25Q_WriteStatusReg+0x154>
 8001246:	2b01      	cmp	r3, #1
 8001248:	d002      	beq.n	8001250 <W25Q_WriteStatusReg+0x114>
 800124a:	2b02      	cmp	r3, #2
 800124c:	d009      	beq.n	8001262 <W25Q_WriteStatusReg+0x126>
 800124e:	e01f      	b.n	8001290 <W25Q_WriteStatusReg+0x154>
		case 1:
			if(wq->statReg1 != regVal)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2220      	movs	r2, #32
 8001254:	5c9b      	ldrb	r3, [r3, r2]
 8001256:	1cba      	adds	r2, r7, #2
 8001258:	7812      	ldrb	r2, [r2, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d013      	beq.n	8001286 <W25Q_WriteStatusReg+0x14a>
				return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e019      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>
			break;
		case 2:
			if(wq->statReg2 != regVal)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2221      	movs	r2, #33	@ 0x21
 8001266:	5c9b      	ldrb	r3, [r3, r2]
 8001268:	1cba      	adds	r2, r7, #2
 800126a:	7812      	ldrb	r2, [r2, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d00c      	beq.n	800128a <W25Q_WriteStatusReg+0x14e>
				return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e010      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>
			break;
		case 3:
			if(wq->statReg3 != regVal)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2222      	movs	r2, #34	@ 0x22
 8001278:	5c9b      	ldrb	r3, [r3, r2]
 800127a:	1cba      	adds	r2, r7, #2
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d005      	beq.n	800128e <W25Q_WriteStatusReg+0x152>
				return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e007      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>
			break;
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	e002      	b.n	8001290 <W25Q_WriteStatusReg+0x154>
			break;
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	e000      	b.n	8001290 <W25Q_WriteStatusReg+0x154>
			break;
 800128e:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 8001290:	2313      	movs	r3, #19
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	781b      	ldrb	r3, [r3, #0]


}
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b006      	add	sp, #24
 800129c:	bdb0      	pop	{r4, r5, r7, pc}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	0800949c 	.word	0x0800949c
 80012a4:	0001116f 	.word	0x0001116f

080012a8 <W25Q_readData>:

HAL_StatusTypeDef W25Q_readData(W25Q *wq, uint32_t startAddress, uint32_t dataSize, uint8_t *dataLocation) {
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80012b6:	2417      	movs	r4, #23
 80012b8:	193b      	adds	r3, r7, r4
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]

	// Create read data array with start address
	uint8_t readDataArr[4] = {CMD_READ_DATA, ((startAddress >> 16) & 0xFF), ((startAddress >> 8) & 0xFF), ((startAddress) & 0xFF)};
 80012be:	2510      	movs	r5, #16
 80012c0:	197b      	adds	r3, r7, r5
 80012c2:	2203      	movs	r2, #3
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	0c1b      	lsrs	r3, r3, #16
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	197b      	adds	r3, r7, r5
 80012ce:	705a      	strb	r2, [r3, #1]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	0a1b      	lsrs	r3, r3, #8
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	197b      	adds	r3, r7, r5
 80012d8:	709a      	strb	r2, [r3, #2]
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	197b      	adds	r3, r7, r5
 80012e0:	70da      	strb	r2, [r3, #3]

	// TX read data in single-SPI mode command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	2200      	movs	r2, #0
 80012ee:	0019      	movs	r1, r3
 80012f0:	f002 fffd 	bl	80042ee <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, readDataArr, 4, HAL_MAX_DELAY);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6998      	ldr	r0, [r3, #24]
 80012f8:	0026      	movs	r6, r4
 80012fa:	193c      	adds	r4, r7, r4
 80012fc:	2301      	movs	r3, #1
 80012fe:	425b      	negs	r3, r3
 8001300:	1979      	adds	r1, r7, r5
 8001302:	2204      	movs	r2, #4
 8001304:	f006 f99c 	bl	8007640 <HAL_SPI_Transmit>
 8001308:	0003      	movs	r3, r0
 800130a:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 800130c:	19bb      	adds	r3, r7, r6
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00b      	beq.n	800132c <W25Q_readData+0x84>
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	b29b      	uxth	r3, r3
 800131e:	2201      	movs	r2, #1
 8001320:	0019      	movs	r1, r3
 8001322:	f002 ffe4 	bl	80042ee <HAL_GPIO_WritePin>
		return halRet;
 8001326:	19bb      	adds	r3, r7, r6
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	e017      	b.n	800135c <W25Q_readData+0xb4>
	}

	// RX data
	halRet = HAL_SPI_Receive(wq->hspi, dataLocation, dataSize, HAL_MAX_DELAY);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6998      	ldr	r0, [r3, #24]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	b29a      	uxth	r2, r3
 8001334:	2517      	movs	r5, #23
 8001336:	197c      	adds	r4, r7, r5
 8001338:	2301      	movs	r3, #1
 800133a:	425b      	negs	r3, r3
 800133c:	6839      	ldr	r1, [r7, #0]
 800133e:	f006 fadf 	bl	8007900 <HAL_SPI_Receive>
 8001342:	0003      	movs	r3, r0
 8001344:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	b29b      	uxth	r3, r3
 8001350:	2201      	movs	r2, #1
 8001352:	0019      	movs	r1, r3
 8001354:	f002 ffcb 	bl	80042ee <HAL_GPIO_WritePin>


	return halRet;
 8001358:	197b      	adds	r3, r7, r5
 800135a:	781b      	ldrb	r3, [r3, #0]

}
 800135c:	0018      	movs	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	b007      	add	sp, #28
 8001362:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001364 <W25Q_ChipReset>:
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);

	return halRet;
}

HAL_StatusTypeDef W25Q_ChipReset(W25Q *wq) {
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800136c:	250e      	movs	r5, #14
 800136e:	197b      	adds	r3, r7, r5
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]

	/*
	 * Send both enable reset an reset device commands
	 */
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	b29b      	uxth	r3, r3
 800137e:	2200      	movs	r2, #0
 8001380:	0019      	movs	r1, r3
 8001382:	f002 ffb4 	bl	80042ee <HAL_GPIO_WritePin>
	// TX enable reset instruction
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_RESET_ENABLE}, 1, HAL_MAX_DELAY);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6998      	ldr	r0, [r3, #24]
 800138a:	210c      	movs	r1, #12
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2266      	movs	r2, #102	@ 0x66
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	197c      	adds	r4, r7, r5
 8001394:	2301      	movs	r3, #1
 8001396:	425b      	negs	r3, r3
 8001398:	1879      	adds	r1, r7, r1
 800139a:	2201      	movs	r2, #1
 800139c:	f006 f950 	bl	8007640 <HAL_SPI_Transmit>
 80013a0:	0003      	movs	r3, r0
 80013a2:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	2201      	movs	r2, #1
 80013b0:	0019      	movs	r1, r3
 80013b2:	f002 ff9c 	bl	80042ee <HAL_GPIO_WritePin>
	if(halRet != HAL_OK)
 80013b6:	197b      	adds	r3, r7, r5
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <W25Q_ChipReset+0x60>
		return halRet;
 80013be:	197b      	adds	r3, r7, r5
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	e035      	b.n	8001430 <W25Q_ChipReset+0xcc>

	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	2200      	movs	r2, #0
 80013d0:	0019      	movs	r1, r3
 80013d2:	f002 ff8c 	bl	80042ee <HAL_GPIO_WritePin>
	// TX reset device instruction
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_RESET_DEVICE}, 1, HAL_MAX_DELAY);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6998      	ldr	r0, [r3, #24]
 80013da:	2108      	movs	r1, #8
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	2299      	movs	r2, #153	@ 0x99
 80013e0:	701a      	strb	r2, [r3, #0]
 80013e2:	230e      	movs	r3, #14
 80013e4:	18fc      	adds	r4, r7, r3
 80013e6:	2301      	movs	r3, #1
 80013e8:	425b      	negs	r3, r3
 80013ea:	1879      	adds	r1, r7, r1
 80013ec:	2201      	movs	r2, #1
 80013ee:	f006 f927 	bl	8007640 <HAL_SPI_Transmit>
 80013f2:	0003      	movs	r3, r0
 80013f4:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	2201      	movs	r2, #1
 8001402:	0019      	movs	r1, r3
 8001404:	f002 ff73 	bl	80042ee <HAL_GPIO_WritePin>

	// Delay at least 30 us
	for(uint8_t i = 0; i < 180; i++) {
 8001408:	230f      	movs	r3, #15
 800140a:	18fb      	adds	r3, r7, r3
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	e006      	b.n	8001420 <W25Q_ChipReset+0xbc>
		__NOP();
 8001412:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < 180; i++) {
 8001414:	210f      	movs	r1, #15
 8001416:	187b      	adds	r3, r7, r1
 8001418:	781a      	ldrb	r2, [r3, #0]
 800141a:	187b      	adds	r3, r7, r1
 800141c:	3201      	adds	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	230f      	movs	r3, #15
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2bb3      	cmp	r3, #179	@ 0xb3
 8001428:	d9f3      	bls.n	8001412 <W25Q_ChipReset+0xae>
	}


	return halRet;
 800142a:	230e      	movs	r3, #14
 800142c:	18fb      	adds	r3, r7, r3
 800142e:	781b      	ldrb	r3, [r3, #0]

}
 8001430:	0018      	movs	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	b004      	add	sp, #16
 8001436:	bdb0      	pop	{r4, r5, r7, pc}

08001438 <W25Q_SetDriverStrength>:

	return halRet;

}

HAL_StatusTypeDef W25Q_SetDriverStrength(W25Q *wq, uint8_t driverStrength) {
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	000a      	movs	r2, r1
 8001442:	1cfb      	adds	r3, r7, #3
 8001444:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8001446:	230f      	movs	r3, #15
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]

	// Check to ensure passed driver strength value lies in range
	if(driverStrength < 0 || driverStrength > 3)
 800144e:	1cfb      	adds	r3, r7, #3
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d901      	bls.n	800145a <W25Q_SetDriverStrength+0x22>
		return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e041      	b.n	80014de <W25Q_SetDriverStrength+0xa6>

	// Read current value in status register 3
	halRet = W25Q_ReadStatusReg(wq, 3);
 800145a:	250f      	movs	r5, #15
 800145c:	197c      	adds	r4, r7, r5
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2103      	movs	r1, #3
 8001462:	0018      	movs	r0, r3
 8001464:	f7ff fd94 	bl	8000f90 <W25Q_ReadStatusReg>
 8001468:	0003      	movs	r3, r0
 800146a:	7023      	strb	r3, [r4, #0]

	// Isolate bits 5-6 and change value to reflect new driver strength
	uint8_t newRegVal = (wq->statReg3) & (0b10011111);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2222      	movs	r2, #34	@ 0x22
 8001470:	5c9a      	ldrb	r2, [r3, r2]
 8001472:	200e      	movs	r0, #14
 8001474:	183b      	adds	r3, r7, r0
 8001476:	2160      	movs	r1, #96	@ 0x60
 8001478:	438a      	bics	r2, r1
 800147a:	701a      	strb	r2, [r3, #0]
	newRegVal = (newRegVal) | (driverStrength << 5);
 800147c:	1cfb      	adds	r3, r7, #3
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	015b      	lsls	r3, r3, #5
 8001482:	b25a      	sxtb	r2, r3
 8001484:	183b      	adds	r3, r7, r0
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b25b      	sxtb	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b25a      	sxtb	r2, r3
 800148e:	183b      	adds	r3, r7, r0
 8001490:	701a      	strb	r2, [r3, #0]

	// Write status register 3 with new value
	halRet = W25Q_WriteStatusReg(wq, 3, newRegVal);
 8001492:	197c      	adds	r4, r7, r5
 8001494:	183b      	adds	r3, r7, r0
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2103      	movs	r1, #3
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff fe4d 	bl	800113c <W25Q_WriteStatusReg>
 80014a2:	0003      	movs	r3, r0
 80014a4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80014a6:	197b      	adds	r3, r7, r5
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <W25Q_SetDriverStrength+0x7c>
		return halRet;
 80014ae:	197b      	adds	r3, r7, r5
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	e014      	b.n	80014de <W25Q_SetDriverStrength+0xa6>

	// Read back status register 3 and confirm successful write
	halRet = W25Q_ReadStatusReg(wq, 3);
 80014b4:	230f      	movs	r3, #15
 80014b6:	18fc      	adds	r4, r7, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2103      	movs	r1, #3
 80014bc:	0018      	movs	r0, r3
 80014be:	f7ff fd67 	bl	8000f90 <W25Q_ReadStatusReg>
 80014c2:	0003      	movs	r3, r0
 80014c4:	7023      	strb	r3, [r4, #0]
	if(wq->driverStrength != driverStrength)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2226      	movs	r2, #38	@ 0x26
 80014ca:	5c9b      	ldrb	r3, [r3, r2]
 80014cc:	1cfa      	adds	r2, r7, #3
 80014ce:	7812      	ldrb	r2, [r2, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <W25Q_SetDriverStrength+0xa0>
		return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e002      	b.n	80014de <W25Q_SetDriverStrength+0xa6>

	return halRet;
 80014d8:	230f      	movs	r3, #15
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	781b      	ldrb	r3, [r3, #0]

}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b004      	add	sp, #16
 80014e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080014e8 <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b09a      	sub	sp, #104	@ 0x68
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80014f4:	2567      	movs	r5, #103	@ 0x67
 80014f6:	197b      	adds	r3, r7, r5
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 80014fc:	243c      	movs	r4, #60	@ 0x3c
 80014fe:	193b      	adds	r3, r7, r4
 8001500:	0018      	movs	r0, r3
 8001502:	2328      	movs	r3, #40	@ 0x28
 8001504:	001a      	movs	r2, r3
 8001506:	2100      	movs	r1, #0
 8001508:	f007 ff70 	bl	80093ec <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	781a      	ldrb	r2, [r3, #0]
 8001510:	0021      	movs	r1, r4
 8001512:	187b      	adds	r3, r7, r1
 8001514:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	785b      	ldrb	r3, [r3, #1]
 800151a:	3301      	adds	r3, #1
 800151c:	b2da      	uxtb	r2, r3
 800151e:	187b      	adds	r3, r7, r1
 8001520:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	789a      	ldrb	r2, [r3, #2]
 8001526:	187b      	adds	r3, r7, r1
 8001528:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	187b      	adds	r3, r7, r1
 8001530:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	78da      	ldrb	r2, [r3, #3]
 8001536:	187b      	adds	r3, r7, r1
 8001538:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	78da      	ldrb	r2, [r3, #3]
 800153e:	187b      	adds	r3, r7, r1
 8001540:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001542:	0008      	movs	r0, r1
 8001544:	183b      	adds	r3, r7, r0
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800154a:	183b      	adds	r3, r7, r0
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8001550:	183b      	adds	r3, r7, r0
 8001552:	4a19      	ldr	r2, [pc, #100]	@ (80015b8 <initRTCInternalAlarm+0xd0>)
 8001554:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001556:	183b      	adds	r3, r7, r0
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800155c:	183b      	adds	r3, r7, r0
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 8001562:	183b      	adds	r3, r7, r0
 8001564:	2220      	movs	r2, #32
 8001566:	2101      	movs	r1, #1
 8001568:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 800156a:	0001      	movs	r1, r0
 800156c:	187b      	adds	r3, r7, r1
 800156e:	2280      	movs	r2, #128	@ 0x80
 8001570:	0052      	lsls	r2, r2, #1
 8001572:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8001574:	197c      	adds	r4, r7, r5
 8001576:	1879      	adds	r1, r7, r1
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	0018      	movs	r0, r3
 800157e:	f005 fb87 	bl	8006c90 <HAL_RTC_SetAlarm_IT>
 8001582:	0003      	movs	r3, r0
 8001584:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8001586:	197b      	adds	r3, r7, r5
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <initRTCInternalAlarm+0xac>
		return halRet;
 800158e:	197b      	adds	r3, r7, r5
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	e00d      	b.n	80015b0 <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8001594:	2567      	movs	r5, #103	@ 0x67
 8001596:	197c      	adds	r4, r7, r5
 8001598:	2380      	movs	r3, #128	@ 0x80
 800159a:	005a      	lsls	r2, r3, #1
 800159c:	2314      	movs	r3, #20
 800159e:	18f9      	adds	r1, r7, r3
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	2300      	movs	r3, #0
 80015a4:	f005 fcb4 	bl	8006f10 <HAL_RTC_GetAlarm>
 80015a8:	0003      	movs	r3, r0
 80015aa:	7023      	strb	r3, [r4, #0]
	return halRet;
 80015ac:	197b      	adds	r3, r7, r5
 80015ae:	781b      	ldrb	r3, [r3, #0]

}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b01a      	add	sp, #104	@ 0x68
 80015b6:	bdb0      	pop	{r4, r5, r7, pc}
 80015b8:	80800080 	.word	0x80800080

080015bc <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2200      	movs	r2, #0
 80015ce:	0018      	movs	r0, r3
 80015d0:	f005 fab4 	bl	8006b3c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	0018      	movs	r0, r3
 80015dc:	f005 fb0a 	bl	8006bf4 <HAL_RTC_GetDate>

}
 80015e0:	46c0      	nop			@ (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b004      	add	sp, #16
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	46de      	mov	lr, fp
 80015ec:	4657      	mov	r7, sl
 80015ee:	464e      	mov	r6, r9
 80015f0:	4645      	mov	r5, r8
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b08f      	sub	sp, #60	@ 0x3c
 80015f6:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f8:	f002 f8e0 	bl	80037bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015fc:	f000 f9f0 	bl	80019e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001600:	f000 fc4c 	bl	8001e9c <MX_GPIO_Init>
  MX_DMA_Init();
 8001604:	f000 fc24 	bl	8001e50 <MX_DMA_Init>
  MX_RTC_Init();
 8001608:	f000 faba 	bl	8001b80 <MX_RTC_Init>
  MX_I2C1_Init();
 800160c:	f000 fa4e 	bl	8001aac <MX_I2C1_Init>
  MX_I2S1_Init();
 8001610:	f000 fa8c 	bl	8001b2c <MX_I2S1_Init>
  MX_SPI2_Init();
 8001614:	f000 fb2e 	bl	8001c74 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001618:	f000 fb6a 	bl	8001cf0 <MX_TIM2_Init>
  MX_TIM14_Init();
 800161c:	f000 fbc8 	bl	8001db0 <MX_TIM14_Init>
  MX_TIM16_Init();
 8001620:	f000 fbec 	bl	8001dfc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	  // HAL Status handle for error-checking
	  HAL_StatusTypeDef halRet = HAL_OK;
 8001624:	2317      	movs	r3, #23
 8001626:	18fb      	adds	r3, r7, r3
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]

	  // Determine which time format we will be using
	  	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 800162c:	4bc6      	ldr	r3, [pc, #792]	@ (8001948 <main+0x360>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2210      	movs	r2, #16
 8001632:	0011      	movs	r1, r2
 8001634:	0018      	movs	r0, r3
 8001636:	f002 fe3d 	bl	80042b4 <HAL_GPIO_ReadPin>
 800163a:	0003      	movs	r3, r0
 800163c:	001a      	movs	r2, r3
 800163e:	4bc3      	ldr	r3, [pc, #780]	@ (800194c <main+0x364>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d103      	bne.n	800164e <main+0x66>
	  	  userTimeFormat = RTC_HOURFORMAT_12;
 8001646:	4bc2      	ldr	r3, [pc, #776]	@ (8001950 <main+0x368>)
 8001648:	2240      	movs	r2, #64	@ 0x40
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e002      	b.n	8001654 <main+0x6c>
	  	}
	  	else {
	  	  userTimeFormat = RTC_HOURFORMAT_24;
 800164e:	4bc0      	ldr	r3, [pc, #768]	@ (8001950 <main+0x368>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
	  	}

  	  // Set Smooth Calibration Value
	  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8001654:	4bbf      	ldr	r3, [pc, #764]	@ (8001954 <main+0x36c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2517      	movs	r5, #23
 800165a:	197c      	adds	r4, r7, r5
 800165c:	2280      	movs	r2, #128	@ 0x80
 800165e:	01d1      	lsls	r1, r2, #7
 8001660:	48bd      	ldr	r0, [pc, #756]	@ (8001958 <main+0x370>)
 8001662:	2200      	movs	r2, #0
 8001664:	f005 fe49 	bl	80072fa <HAL_RTCEx_SetSmoothCalib>
 8001668:	0003      	movs	r3, r0
 800166a:	7023      	strb	r3, [r4, #0]
									RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
	  if(halRet != HAL_OK) {
 800166c:	197b      	adds	r3, r7, r5
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <main+0x90>
		  // Failure to talk to RTC is a hard failure
		  dispFailure();
 8001674:	f001 f986 	bl	8002984 <dispFailure>
	  }

	  // Init the internal RTC alarm time to track the current time
	  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 8001678:	2517      	movs	r5, #23
 800167a:	197c      	adds	r4, r7, r5
 800167c:	4ab7      	ldr	r2, [pc, #732]	@ (800195c <main+0x374>)
 800167e:	49b8      	ldr	r1, [pc, #736]	@ (8001960 <main+0x378>)
 8001680:	4bb5      	ldr	r3, [pc, #724]	@ (8001958 <main+0x370>)
 8001682:	0018      	movs	r0, r3
 8001684:	f7ff ff30 	bl	80014e8 <initRTCInternalAlarm>
 8001688:	0003      	movs	r3, r0
 800168a:	7023      	strb	r3, [r4, #0]
	  if(halRet != HAL_OK) {
 800168c:	197b      	adds	r3, r7, r5
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <main+0xb0>
		  // Failure to initialize RTC alarm is a hard failure
		  dispFailure();
 8001694:	f001 f976 	bl	8002984 <dispFailure>
		}

	  // Initialize all GPIOs to be used with 7 segment display
		sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	009c      	lsls	r4, r3, #2
 800169c:	2380      	movs	r3, #128	@ 0x80
 800169e:	00dd      	lsls	r5, r3, #3
 80016a0:	2680      	movs	r6, #128	@ 0x80
 80016a2:	2340      	movs	r3, #64	@ 0x40
 80016a4:	469c      	mov	ip, r3
 80016a6:	2380      	movs	r3, #128	@ 0x80
 80016a8:	011a      	lsls	r2, r3, #4
 80016aa:	4bae      	ldr	r3, [pc, #696]	@ (8001964 <main+0x37c>)
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	4bae      	ldr	r3, [pc, #696]	@ (8001968 <main+0x380>)
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	4bae      	ldr	r3, [pc, #696]	@ (800196c <main+0x384>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	9304      	str	r3, [sp, #16]
 80016b8:	9003      	str	r0, [sp, #12]
 80016ba:	9102      	str	r1, [sp, #8]
 80016bc:	4bac      	ldr	r3, [pc, #688]	@ (8001970 <main+0x388>)
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	9200      	str	r2, [sp, #0]
 80016c2:	4663      	mov	r3, ip
 80016c4:	0032      	movs	r2, r6
 80016c6:	0029      	movs	r1, r5
 80016c8:	0020      	movs	r0, r4
 80016ca:	f001 fad1 	bl	8002c70 <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


		halRet = updateAndDisplayTime();
 80016ce:	2517      	movs	r5, #23
 80016d0:	197c      	adds	r4, r7, r5
 80016d2:	f000 fce3 	bl	800209c <updateAndDisplayTime>
 80016d6:	0003      	movs	r3, r0
 80016d8:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 80016da:	197b      	adds	r3, r7, r5
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <main+0xfe>
		  // Failure to display current time is a hard failure
		  dispFailure();
 80016e2:	f001 f94f 	bl	8002984 <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

		// Used to separate return initializations into critical and non-critical errors.
		uint8_t initRet = 0;
 80016e6:	2116      	movs	r1, #22
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]

		initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 80016ee:	4b9d      	ldr	r3, [pc, #628]	@ (8001964 <main+0x37c>)
 80016f0:	681d      	ldr	r5, [r3, #0]
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4a9f      	ldr	r2, [pc, #636]	@ (8001974 <main+0x38c>)
 80016f8:	7812      	ldrb	r2, [r2, #0]
 80016fa:	187c      	adds	r4, r7, r1
 80016fc:	4e9e      	ldr	r6, [pc, #632]	@ (8001978 <main+0x390>)
 80016fe:	499f      	ldr	r1, [pc, #636]	@ (800197c <main+0x394>)
 8001700:	489f      	ldr	r0, [pc, #636]	@ (8001980 <main+0x398>)
 8001702:	9201      	str	r2, [sp, #4]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	0033      	movs	r3, r6
 8001708:	002a      	movs	r2, r5
 800170a:	f7fe fd87 	bl	800021c <capTouch_Init>
 800170e:	0003      	movs	r3, r0
 8001710:	7023      	strb	r3, [r4, #0]
								&capTouchResetPort, capTouchResetPin, capTouchChannels);
		if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 8001712:	2116      	movs	r1, #22
 8001714:	187b      	adds	r3, r7, r1
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d007      	beq.n	800172c <main+0x144>
 800171c:	187b      	adds	r3, r7, r1
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d003      	beq.n	800172c <main+0x144>
 8001724:	187b      	adds	r3, r7, r1
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b04      	cmp	r3, #4
 800172a:	d102      	bne.n	8001732 <main+0x14a>
			/* Critical Errors:
			 * 1 = Failure to read correct device ID
			 * 2 = Failure to read Keys
			 * 3 = Failure to enable keys
			 */
			dispFailure();
 800172c:	f001 f92a 	bl	8002984 <dispFailure>
 8001730:	e00d      	b.n	800174e <main+0x166>
		}
		else if (initRet == 2) {
 8001732:	2316      	movs	r3, #22
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d102      	bne.n	8001742 <main+0x15a>
			/*
			 * Non-critical Errors:
			 * 2 = Failure to Recalibrate
			 */
			dispFault();
 800173c:	f001 f912 	bl	8002964 <dispFault>
 8001740:	e005      	b.n	800174e <main+0x166>
		}
		else if(initRet == 0) {
 8001742:	2316      	movs	r3, #22
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d100      	bne.n	800174e <main+0x166>
			// initRet = 0 = all is well
			__NOP();
 800174c:	46c0      	nop			@ (mov r8, r8)
		}

		// Set averaging factor
		uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 800174e:	4b8d      	ldr	r3, [pc, #564]	@ (8001984 <main+0x39c>)
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	210c      	movs	r1, #12
 8001754:	187b      	adds	r3, r7, r1
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	4b8a      	ldr	r3, [pc, #552]	@ (8001984 <main+0x39c>)
 800175a:	781a      	ldrb	r2, [r3, #0]
 800175c:	187b      	adds	r3, r7, r1
 800175e:	705a      	strb	r2, [r3, #1]
 8001760:	4b88      	ldr	r3, [pc, #544]	@ (8001984 <main+0x39c>)
 8001762:	781a      	ldrb	r2, [r3, #0]
 8001764:	187b      	adds	r3, r7, r1
 8001766:	709a      	strb	r2, [r3, #2]
 8001768:	4b86      	ldr	r3, [pc, #536]	@ (8001984 <main+0x39c>)
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	187b      	adds	r3, r7, r1
 800176e:	70da      	strb	r2, [r3, #3]
 8001770:	187b      	adds	r3, r7, r1
 8001772:	2200      	movs	r2, #0
 8001774:	711a      	strb	r2, [r3, #4]
 8001776:	187b      	adds	r3, r7, r1
 8001778:	2200      	movs	r2, #0
 800177a:	715a      	strb	r2, [r3, #5]
 800177c:	187b      	adds	r3, r7, r1
 800177e:	2200      	movs	r2, #0
 8001780:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8001782:	2517      	movs	r5, #23
 8001784:	197c      	adds	r4, r7, r5
 8001786:	187a      	adds	r2, r7, r1
 8001788:	4b7d      	ldr	r3, [pc, #500]	@ (8001980 <main+0x398>)
 800178a:	0011      	movs	r1, r2
 800178c:	0018      	movs	r0, r3
 800178e:	f7fe ffb9 	bl	8000704 <capTouch_SetAveragingFactor>
 8001792:	0003      	movs	r3, r0
 8001794:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 8001796:	197b      	adds	r3, r7, r5
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <main+0x1ba>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 800179e:	f001 f8e1 	bl	8002964 <dispFault>
		}

		// Set detection integration factors
		uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 80017a2:	4b79      	ldr	r3, [pc, #484]	@ (8001988 <main+0x3a0>)
 80017a4:	781a      	ldrb	r2, [r3, #0]
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	4b77      	ldr	r3, [pc, #476]	@ (8001988 <main+0x3a0>)
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	705a      	strb	r2, [r3, #1]
 80017b2:	4b75      	ldr	r3, [pc, #468]	@ (8001988 <main+0x3a0>)
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	709a      	strb	r2, [r3, #2]
 80017ba:	4b73      	ldr	r3, [pc, #460]	@ (8001988 <main+0x3a0>)
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	70da      	strb	r2, [r3, #3]
 80017c2:	4b71      	ldr	r3, [pc, #452]	@ (8001988 <main+0x3a0>)
 80017c4:	781a      	ldrb	r2, [r3, #0]
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	711a      	strb	r2, [r3, #4]
 80017ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001988 <main+0x3a0>)
 80017cc:	781a      	ldrb	r2, [r3, #0]
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	715a      	strb	r2, [r3, #5]
 80017d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001988 <main+0x3a0>)
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 80017da:	2517      	movs	r5, #23
 80017dc:	197c      	adds	r4, r7, r5
 80017de:	1d3a      	adds	r2, r7, #4
 80017e0:	4b67      	ldr	r3, [pc, #412]	@ (8001980 <main+0x398>)
 80017e2:	0011      	movs	r1, r2
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff f857 	bl	8000898 <capTouch_SetDetectionIntegrator>
 80017ea:	0003      	movs	r3, r0
 80017ec:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 80017ee:	197b      	adds	r3, r7, r5
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <main+0x212>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 80017f6:	f001 f8b5 	bl	8002964 <dispFault>
		}

		userAlarmToggle = false;			//Default to off
 80017fa:	4b64      	ldr	r3, [pc, #400]	@ (800198c <main+0x3a4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

		if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8001800:	4b63      	ldr	r3, [pc, #396]	@ (8001990 <main+0x3a8>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b54      	ldr	r3, [pc, #336]	@ (8001958 <main+0x370>)
 8001806:	0011      	movs	r1, r2
 8001808:	0018      	movs	r0, r3
 800180a:	f005 fe46 	bl	800749a <HAL_RTCEx_BKUPRead>
 800180e:	0003      	movs	r3, r0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d11c      	bne.n	8001850 <main+0x268>

			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8001816:	4b5f      	ldr	r3, [pc, #380]	@ (8001994 <main+0x3ac>)
 8001818:	6819      	ldr	r1, [r3, #0]
 800181a:	4b4f      	ldr	r3, [pc, #316]	@ (8001958 <main+0x370>)
 800181c:	2201      	movs	r2, #1
 800181e:	0018      	movs	r0, r3
 8001820:	f005 fe1e 	bl	8007460 <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8001824:	4b5c      	ldr	r3, [pc, #368]	@ (8001998 <main+0x3b0>)
 8001826:	6819      	ldr	r1, [r3, #0]
 8001828:	4b4b      	ldr	r3, [pc, #300]	@ (8001958 <main+0x370>)
 800182a:	2200      	movs	r2, #0
 800182c:	0018      	movs	r0, r3
 800182e:	f005 fe17 	bl	8007460 <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8001832:	4b5a      	ldr	r3, [pc, #360]	@ (800199c <main+0x3b4>)
 8001834:	6819      	ldr	r1, [r3, #0]
 8001836:	4b48      	ldr	r3, [pc, #288]	@ (8001958 <main+0x370>)
 8001838:	2200      	movs	r2, #0
 800183a:	0018      	movs	r0, r3
 800183c:	f005 fe10 	bl	8007460 <HAL_RTCEx_BKUPWrite>

			// Write backup register with a non-zero value to signify that it has been initialized before
			HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8001840:	4b53      	ldr	r3, [pc, #332]	@ (8001990 <main+0x3a8>)
 8001842:	6819      	ldr	r1, [r3, #0]
 8001844:	2301      	movs	r3, #1
 8001846:	425a      	negs	r2, r3
 8001848:	4b43      	ldr	r3, [pc, #268]	@ (8001958 <main+0x370>)
 800184a:	0018      	movs	r0, r3
 800184c:	f005 fe08 	bl	8007460 <HAL_RTCEx_BKUPWrite>

		}

		userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8001850:	4b50      	ldr	r3, [pc, #320]	@ (8001994 <main+0x3ac>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b40      	ldr	r3, [pc, #256]	@ (8001958 <main+0x370>)
 8001856:	0011      	movs	r1, r2
 8001858:	0018      	movs	r0, r3
 800185a:	f005 fe1e 	bl	800749a <HAL_RTCEx_BKUPRead>
 800185e:	0003      	movs	r3, r0
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b4f      	ldr	r3, [pc, #316]	@ (80019a0 <main+0x3b8>)
 8001864:	701a      	strb	r2, [r3, #0]
		userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8001866:	4b4c      	ldr	r3, [pc, #304]	@ (8001998 <main+0x3b0>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4b3b      	ldr	r3, [pc, #236]	@ (8001958 <main+0x370>)
 800186c:	0011      	movs	r1, r2
 800186e:	0018      	movs	r0, r3
 8001870:	f005 fe13 	bl	800749a <HAL_RTCEx_BKUPRead>
 8001874:	0003      	movs	r3, r0
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b49      	ldr	r3, [pc, #292]	@ (80019a0 <main+0x3b8>)
 800187a:	705a      	strb	r2, [r3, #1]
		userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 800187c:	4b47      	ldr	r3, [pc, #284]	@ (800199c <main+0x3b4>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b35      	ldr	r3, [pc, #212]	@ (8001958 <main+0x370>)
 8001882:	0011      	movs	r1, r2
 8001884:	0018      	movs	r0, r3
 8001886:	f005 fe08 	bl	800749a <HAL_RTCEx_BKUPRead>
 800188a:	0003      	movs	r3, r0
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b44      	ldr	r3, [pc, #272]	@ (80019a0 <main+0x3b8>)
 8001890:	70da      	strb	r2, [r3, #3]


		// Init Memory Chip
		initRet = W25Q_Init(&spiFlash, nCSPort, nWPPort, nHOLDPort,
 8001892:	4b44      	ldr	r3, [pc, #272]	@ (80019a4 <main+0x3bc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4698      	mov	r8, r3
 8001898:	4b43      	ldr	r3, [pc, #268]	@ (80019a8 <main+0x3c0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4699      	mov	r9, r3
 800189e:	4b43      	ldr	r3, [pc, #268]	@ (80019ac <main+0x3c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	469a      	mov	sl, r3
 80018a4:	4b42      	ldr	r3, [pc, #264]	@ (80019b0 <main+0x3c8>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b42      	ldr	r3, [pc, #264]	@ (80019b4 <main+0x3cc>)
 80018aa:	6819      	ldr	r1, [r3, #0]
 80018ac:	4b42      	ldr	r3, [pc, #264]	@ (80019b8 <main+0x3d0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	469b      	mov	fp, r3
 80018b2:	4842      	ldr	r0, [pc, #264]	@ (80019bc <main+0x3d4>)
 80018b4:	7800      	ldrb	r0, [r0, #0]
 80018b6:	4c42      	ldr	r4, [pc, #264]	@ (80019c0 <main+0x3d8>)
 80018b8:	7825      	ldrb	r5, [r4, #0]
 80018ba:	4c42      	ldr	r4, [pc, #264]	@ (80019c4 <main+0x3dc>)
 80018bc:	7826      	ldrb	r6, [r4, #0]
 80018be:	2416      	movs	r4, #22
 80018c0:	193c      	adds	r4, r7, r4
 80018c2:	4b41      	ldr	r3, [pc, #260]	@ (80019c8 <main+0x3e0>)
 80018c4:	469c      	mov	ip, r3
 80018c6:	9606      	str	r6, [sp, #24]
 80018c8:	9505      	str	r5, [sp, #20]
 80018ca:	9004      	str	r0, [sp, #16]
 80018cc:	483f      	ldr	r0, [pc, #252]	@ (80019cc <main+0x3e4>)
 80018ce:	9003      	str	r0, [sp, #12]
 80018d0:	465b      	mov	r3, fp
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	9101      	str	r1, [sp, #4]
 80018d6:	9200      	str	r2, [sp, #0]
 80018d8:	4653      	mov	r3, sl
 80018da:	464a      	mov	r2, r9
 80018dc:	4641      	mov	r1, r8
 80018de:	4660      	mov	r0, ip
 80018e0:	f7ff f88c 	bl	80009fc <W25Q_Init>
 80018e4:	0003      	movs	r3, r0
 80018e6:	7023      	strb	r3, [r4, #0]
	    		 nCSPin, nWPPin, nHOLDPin, &hspi2, spiFlash_devID, spiFlash_isQuadChip, spiFlash_driveStrength);

		// Enter error loop if there's an error in initialization
		if( (initRet == 1) || (initRet == 7) ) {
 80018e8:	2216      	movs	r2, #22
 80018ea:	18bb      	adds	r3, r7, r2
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d003      	beq.n	80018fa <main+0x312>
 80018f2:	18bb      	adds	r3, r7, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b07      	cmp	r3, #7
 80018f8:	d102      	bne.n	8001900 <main+0x318>
			/* Critical Errors:
			* 1 = Failure to release chip from power down
			* 7 = Failure to disable write protection
			*/
			dispFailure();
 80018fa:	f001 f843 	bl	8002984 <dispFailure>
 80018fe:	e016      	b.n	800192e <main+0x346>
		}
		else if ( ((initRet >= 2) && (initRet <= 6)) || (initRet == 8) ) {
 8001900:	2216      	movs	r2, #22
 8001902:	18bb      	adds	r3, r7, r2
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d903      	bls.n	8001912 <main+0x32a>
 800190a:	18bb      	adds	r3, r7, r2
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b06      	cmp	r3, #6
 8001910:	d904      	bls.n	800191c <main+0x334>
 8001912:	2316      	movs	r3, #22
 8001914:	18fb      	adds	r3, r7, r3
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b08      	cmp	r3, #8
 800191a:	d102      	bne.n	8001922 <main+0x33a>
			* 2 = Failure to reset chip
			* 3,6,8 = Failure to read status registers
			* 4 = Failure to set driver strength
			* 5 = Failure to read device ID
			*/
			dispFault();
 800191c:	f001 f822 	bl	8002964 <dispFault>
 8001920:	e005      	b.n	800192e <main+0x346>
		}
		else if(initRet == 0) {
 8001922:	2316      	movs	r3, #22
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d100      	bne.n	800192e <main+0x346>
			// initRet = 0 = all is well
			__NOP();
 800192c:	46c0      	nop			@ (mov r8, r8)
		}


		// Init i2s amplifier
		NAU8315YG_Init(&i2sAmp, &hi2s1, i2sAmp_enablePort, i2sAmp_enablePin);
 800192e:	4b28      	ldr	r3, [pc, #160]	@ (80019d0 <main+0x3e8>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4b28      	ldr	r3, [pc, #160]	@ (80019d4 <main+0x3ec>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4928      	ldr	r1, [pc, #160]	@ (80019d8 <main+0x3f0>)
 8001938:	4828      	ldr	r0, [pc, #160]	@ (80019dc <main+0x3f4>)
 800193a:	f7ff f81f 	bl	800097c <NAU8315YG_Init>

		startAudioStream();
 800193e:	f001 f8c3 	bl	8002ac8 <startAudioStream>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	e7fd      	b.n	8001942 <main+0x35a>
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	20000008 	.word	0x20000008
 800194c:	20000040 	.word	0x20000040
 8001950:	200000ec 	.word	0x200000ec
 8001954:	2000002c 	.word	0x2000002c
 8001958:	200001dc 	.word	0x200001dc
 800195c:	200000d0 	.word	0x200000d0
 8001960:	200000bc 	.word	0x200000bc
 8001964:	2000006c 	.word	0x2000006c
 8001968:	20000068 	.word	0x20000068
 800196c:	20000030 	.word	0x20000030
 8001970:	20000014 	.word	0x20000014
 8001974:	20000010 	.word	0x20000010
 8001978:	2000000c 	.word	0x2000000c
 800197c:	200000f0 	.word	0x200000f0
 8001980:	2000040c 	.word	0x2000040c
 8001984:	20000011 	.word	0x20000011
 8001988:	20000012 	.word	0x20000012
 800198c:	200000b9 	.word	0x200000b9
 8001990:	2000003c 	.word	0x2000003c
 8001994:	200000e8 	.word	0x200000e8
 8001998:	20000034 	.word	0x20000034
 800199c:	20000038 	.word	0x20000038
 80019a0:	200000d4 	.word	0x200000d4
 80019a4:	20000044 	.word	0x20000044
 80019a8:	20000048 	.word	0x20000048
 80019ac:	2000004c 	.word	0x2000004c
 80019b0:	20000050 	.word	0x20000050
 80019b4:	20000054 	.word	0x20000054
 80019b8:	20000058 	.word	0x20000058
 80019bc:	2000005c 	.word	0x2000005c
 80019c0:	2000005d 	.word	0x2000005d
 80019c4:	2000005e 	.word	0x2000005e
 80019c8:	20000420 	.word	0x20000420
 80019cc:	20000208 	.word	0x20000208
 80019d0:	20000060 	.word	0x20000060
 80019d4:	20000064 	.word	0x20000064
 80019d8:	20000144 	.word	0x20000144
 80019dc:	20000448 	.word	0x20000448

080019e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b093      	sub	sp, #76	@ 0x4c
 80019e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e6:	2410      	movs	r4, #16
 80019e8:	193b      	adds	r3, r7, r4
 80019ea:	0018      	movs	r0, r3
 80019ec:	2338      	movs	r3, #56	@ 0x38
 80019ee:	001a      	movs	r2, r3
 80019f0:	2100      	movs	r1, #0
 80019f2:	f007 fcfb 	bl	80093ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f6:	003b      	movs	r3, r7
 80019f8:	0018      	movs	r0, r3
 80019fa:	2310      	movs	r3, #16
 80019fc:	001a      	movs	r2, r3
 80019fe:	2100      	movs	r1, #0
 8001a00:	f007 fcf4 	bl	80093ec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a04:	2380      	movs	r3, #128	@ 0x80
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f003 fe2d 	bl	8005668 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a0e:	f003 fe1d 	bl	800564c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a12:	4b25      	ldr	r3, [pc, #148]	@ (8001aa8 <SystemClock_Config+0xc8>)
 8001a14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a16:	4b24      	ldr	r3, [pc, #144]	@ (8001aa8 <SystemClock_Config+0xc8>)
 8001a18:	2118      	movs	r1, #24
 8001a1a:	438a      	bics	r2, r1
 8001a1c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001a1e:	193b      	adds	r3, r7, r4
 8001a20:	2205      	movs	r2, #5
 8001a22:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a24:	193b      	adds	r3, r7, r4
 8001a26:	2280      	movs	r2, #128	@ 0x80
 8001a28:	0252      	lsls	r2, r2, #9
 8001a2a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a2c:	0021      	movs	r1, r4
 8001a2e:	187b      	adds	r3, r7, r1
 8001a30:	2201      	movs	r2, #1
 8001a32:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a34:	187b      	adds	r3, r7, r1
 8001a36:	2202      	movs	r2, #2
 8001a38:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a3a:	187b      	adds	r3, r7, r1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001a46:	187b      	adds	r3, r7, r1
 8001a48:	2208      	movs	r2, #8
 8001a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	22c0      	movs	r2, #192	@ 0xc0
 8001a50:	02d2      	lsls	r2, r2, #11
 8001a52:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	2280      	movs	r2, #128	@ 0x80
 8001a58:	0492      	lsls	r2, r2, #18
 8001a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a5c:	187b      	adds	r3, r7, r1
 8001a5e:	2280      	movs	r2, #128	@ 0x80
 8001a60:	0592      	lsls	r2, r2, #22
 8001a62:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	0018      	movs	r0, r3
 8001a68:	f003 fe4a 	bl	8005700 <HAL_RCC_OscConfig>
 8001a6c:	1e03      	subs	r3, r0, #0
 8001a6e:	d001      	beq.n	8001a74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a70:	f001 f8f8 	bl	8002c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a74:	003b      	movs	r3, r7
 8001a76:	2207      	movs	r2, #7
 8001a78:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a7a:	003b      	movs	r3, r7
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a80:	003b      	movs	r3, r7
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a86:	003b      	movs	r3, r7
 8001a88:	2200      	movs	r2, #0
 8001a8a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a8c:	003b      	movs	r3, r7
 8001a8e:	2102      	movs	r1, #2
 8001a90:	0018      	movs	r0, r3
 8001a92:	f004 f94f 	bl	8005d34 <HAL_RCC_ClockConfig>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d001      	beq.n	8001a9e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001a9a:	f001 f8e3 	bl	8002c64 <Error_Handler>
  }
}
 8001a9e:	46c0      	nop			@ (mov r8, r8)
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b013      	add	sp, #76	@ 0x4c
 8001aa4:	bd90      	pop	{r4, r7, pc}
 8001aa6:	46c0      	nop			@ (mov r8, r8)
 8001aa8:	40021000 	.word	0x40021000

08001aac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b20 <MX_I2C1_Init+0x74>)
 8001ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8001b24 <MX_I2C1_Init+0x78>)
 8001ab4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12166;
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b20 <MX_I2C1_Init+0x74>)
 8001ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b28 <MX_I2C1_Init+0x7c>)
 8001aba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001abc:	4b18      	ldr	r3, [pc, #96]	@ (8001b20 <MX_I2C1_Init+0x74>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ac2:	4b17      	ldr	r3, [pc, #92]	@ (8001b20 <MX_I2C1_Init+0x74>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac8:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <MX_I2C1_Init+0x74>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ace:	4b14      	ldr	r3, [pc, #80]	@ (8001b20 <MX_I2C1_Init+0x74>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <MX_I2C1_Init+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ada:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <MX_I2C1_Init+0x74>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <MX_I2C1_Init+0x74>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <MX_I2C1_Init+0x74>)
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f002 fc63 	bl	80043b4 <HAL_I2C_Init>
 8001aee:	1e03      	subs	r3, r0, #0
 8001af0:	d001      	beq.n	8001af6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001af2:	f001 f8b7 	bl	8002c64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001af6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <MX_I2C1_Init+0x74>)
 8001af8:	2100      	movs	r1, #0
 8001afa:	0018      	movs	r0, r3
 8001afc:	f003 fa06 	bl	8004f0c <HAL_I2CEx_ConfigAnalogFilter>
 8001b00:	1e03      	subs	r3, r0, #0
 8001b02:	d001      	beq.n	8001b08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b04:	f001 f8ae 	bl	8002c64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b08:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <MX_I2C1_Init+0x74>)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f003 fa49 	bl	8004fa4 <HAL_I2CEx_ConfigDigitalFilter>
 8001b12:	1e03      	subs	r3, r0, #0
 8001b14:	d001      	beq.n	8001b1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b16:	f001 f8a5 	bl	8002c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b1a:	46c0      	nop			@ (mov r8, r8)
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	200000f0 	.word	0x200000f0
 8001b24:	40005400 	.word	0x40005400
 8001b28:	00c12166 	.word	0x00c12166

08001b2c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001b30:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <MX_I2S1_Init+0x48>)
 8001b32:	4a11      	ldr	r2, [pc, #68]	@ (8001b78 <MX_I2S1_Init+0x4c>)
 8001b34:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8001b36:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <MX_I2S1_Init+0x48>)
 8001b38:	2280      	movs	r2, #128	@ 0x80
 8001b3a:	0092      	lsls	r2, r2, #2
 8001b3c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b74 <MX_I2S1_Init+0x48>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <MX_I2S1_Init+0x48>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <MX_I2S1_Init+0x48>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <MX_I2S1_Init+0x48>)
 8001b52:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <MX_I2S1_Init+0x50>)
 8001b54:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8001b56:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <MX_I2S1_Init+0x48>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001b5c:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <MX_I2S1_Init+0x48>)
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f003 fa6c 	bl	800503c <HAL_I2S_Init>
 8001b64:	1e03      	subs	r3, r0, #0
 8001b66:	d001      	beq.n	8001b6c <MX_I2S1_Init+0x40>
  {
    Error_Handler();
 8001b68:	f001 f87c 	bl	8002c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8001b6c:	46c0      	nop			@ (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	46c0      	nop			@ (mov r8, r8)
 8001b74:	20000144 	.word	0x20000144
 8001b78:	40013000 	.word	0x40013000
 8001b7c:	0000ac44 	.word	0x0000ac44

08001b80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	@ 0x28
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 0 */

//  RTC_TimeTypeDef sTime = {0};
//  RTC_DateTypeDef sDate = {0};
  RTC_AlarmTypeDef sAlarm = {0};
 8001b86:	003b      	movs	r3, r7
 8001b88:	0018      	movs	r0, r3
 8001b8a:	2328      	movs	r3, #40	@ 0x28
 8001b8c:	001a      	movs	r2, r3
 8001b8e:	2100      	movs	r1, #0
 8001b90:	f007 fc2c 	bl	80093ec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b94:	4b33      	ldr	r3, [pc, #204]	@ (8001c64 <MX_RTC_Init+0xe4>)
 8001b96:	4a34      	ldr	r2, [pc, #208]	@ (8001c68 <MX_RTC_Init+0xe8>)
 8001b98:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001b9a:	4b32      	ldr	r3, [pc, #200]	@ (8001c64 <MX_RTC_Init+0xe4>)
 8001b9c:	2240      	movs	r2, #64	@ 0x40
 8001b9e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8001ba0:	4b30      	ldr	r3, [pc, #192]	@ (8001c64 <MX_RTC_Init+0xe4>)
 8001ba2:	227f      	movs	r2, #127	@ 0x7f
 8001ba4:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8001ba6:	4b2f      	ldr	r3, [pc, #188]	@ (8001c64 <MX_RTC_Init+0xe4>)
 8001ba8:	22ff      	movs	r2, #255	@ 0xff
 8001baa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bac:	4b2d      	ldr	r3, [pc, #180]	@ (8001c64 <MX_RTC_Init+0xe4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c64 <MX_RTC_Init+0xe4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c64 <MX_RTC_Init+0xe4>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bbe:	4b29      	ldr	r3, [pc, #164]	@ (8001c64 <MX_RTC_Init+0xe4>)
 8001bc0:	2280      	movs	r2, #128	@ 0x80
 8001bc2:	05d2      	lsls	r2, r2, #23
 8001bc4:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001bc6:	4b27      	ldr	r3, [pc, #156]	@ (8001c64 <MX_RTC_Init+0xe4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bcc:	4b25      	ldr	r3, [pc, #148]	@ (8001c64 <MX_RTC_Init+0xe4>)
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f004 fe6a 	bl	80068a8 <HAL_RTC_Init>
 8001bd4:	1e03      	subs	r3, r0, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001bd8:	f001 f844 	bl	8002c64 <Error_Handler>
//    Error_Handler();
//  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8001bdc:	003b      	movs	r3, r7
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001be2:	003b      	movs	r3, r7
 8001be4:	2201      	movs	r2, #1
 8001be6:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001be8:	003b      	movs	r3, r7
 8001bea:	2200      	movs	r2, #0
 8001bec:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001bee:	003b      	movs	r3, r7
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001bf4:	003b      	movs	r3, r7
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bfa:	003b      	movs	r3, r7
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c00:	003b      	movs	r3, r7
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8001c06:	003b      	movs	r3, r7
 8001c08:	4a18      	ldr	r2, [pc, #96]	@ (8001c6c <MX_RTC_Init+0xec>)
 8001c0a:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c0c:	003b      	movs	r3, r7
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c12:	003b      	movs	r3, r7
 8001c14:	2200      	movs	r2, #0
 8001c16:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001c18:	003b      	movs	r3, r7
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c20:	003b      	movs	r3, r7
 8001c22:	2280      	movs	r2, #128	@ 0x80
 8001c24:	0052      	lsls	r2, r2, #1
 8001c26:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c28:	0039      	movs	r1, r7
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c64 <MX_RTC_Init+0xe4>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f005 f82e 	bl	8006c90 <HAL_RTC_SetAlarm_IT>
 8001c34:	1e03      	subs	r3, r0, #0
 8001c36:	d001      	beq.n	8001c3c <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8001c38:	f001 f814 	bl	8002c64 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8001c3c:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <MX_RTC_Init+0xe4>)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	0018      	movs	r0, r3
 8001c42:	f005 fbbd 	bl	80073c0 <HAL_RTCEx_SetCalibrationOutPut>
 8001c46:	1e03      	subs	r3, r0, #0
 8001c48:	d001      	beq.n	8001c4e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001c4a:	f001 f80b 	bl	8002c64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8001c4e:	4908      	ldr	r1, [pc, #32]	@ (8001c70 <MX_RTC_Init+0xf0>)
 8001c50:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <MX_RTC_Init+0xe4>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	0018      	movs	r0, r3
 8001c56:	f004 ff71 	bl	8006b3c <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b00a      	add	sp, #40	@ 0x28
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			@ (mov r8, r8)
 8001c64:	200001dc 	.word	0x200001dc
 8001c68:	40002800 	.word	0x40002800
 8001c6c:	80800080 	.word	0x80800080
 8001c70:	200000bc 	.word	0x200000bc

08001c74 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce8 <MX_SPI2_Init+0x74>)
 8001c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cec <MX_SPI2_Init+0x78>)
 8001c7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <MX_SPI2_Init+0x74>)
 8001c80:	2282      	movs	r2, #130	@ 0x82
 8001c82:	0052      	lsls	r2, r2, #1
 8001c84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c86:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <MX_SPI2_Init+0x74>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ce8 <MX_SPI2_Init+0x74>)
 8001c8e:	22e0      	movs	r2, #224	@ 0xe0
 8001c90:	00d2      	lsls	r2, r2, #3
 8001c92:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c94:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <MX_SPI2_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ce8 <MX_SPI2_Init+0x74>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <MX_SPI2_Init+0x74>)
 8001ca2:	2280      	movs	r2, #128	@ 0x80
 8001ca4:	0092      	lsls	r2, r2, #2
 8001ca6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <MX_SPI2_Init+0x74>)
 8001caa:	2208      	movs	r2, #8
 8001cac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <MX_SPI2_Init+0x74>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <MX_SPI2_Init+0x74>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <MX_SPI2_Init+0x74>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <MX_SPI2_Init+0x74>)
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <MX_SPI2_Init+0x74>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <MX_SPI2_Init+0x74>)
 8001cce:	2208      	movs	r2, #8
 8001cd0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cd2:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <MX_SPI2_Init+0x74>)
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f005 fbfb 	bl	80074d0 <HAL_SPI_Init>
 8001cda:	1e03      	subs	r3, r0, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001cde:	f000 ffc1 	bl	8002c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ce2:	46c0      	nop			@ (mov r8, r8)
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000208 	.word	0x20000208
 8001cec:	40003800 	.word	0x40003800

08001cf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	@ 0x28
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf6:	231c      	movs	r3, #28
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	230c      	movs	r3, #12
 8001cfe:	001a      	movs	r2, r3
 8001d00:	2100      	movs	r1, #0
 8001d02:	f007 fb73 	bl	80093ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d06:	003b      	movs	r3, r7
 8001d08:	0018      	movs	r0, r3
 8001d0a:	231c      	movs	r3, #28
 8001d0c:	001a      	movs	r2, r3
 8001d0e:	2100      	movs	r1, #0
 8001d10:	f007 fb6c 	bl	80093ec <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d14:	4b24      	ldr	r3, [pc, #144]	@ (8001da8 <MX_TIM2_Init+0xb8>)
 8001d16:	2280      	movs	r2, #128	@ 0x80
 8001d18:	05d2      	lsls	r2, r2, #23
 8001d1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8001d1c:	4b22      	ldr	r3, [pc, #136]	@ (8001da8 <MX_TIM2_Init+0xb8>)
 8001d1e:	4a23      	ldr	r2, [pc, #140]	@ (8001dac <MX_TIM2_Init+0xbc>)
 8001d20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d22:	4b21      	ldr	r3, [pc, #132]	@ (8001da8 <MX_TIM2_Init+0xb8>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001d28:	4b1f      	ldr	r3, [pc, #124]	@ (8001da8 <MX_TIM2_Init+0xb8>)
 8001d2a:	2263      	movs	r2, #99	@ 0x63
 8001d2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001da8 <MX_TIM2_Init+0xb8>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d34:	4b1c      	ldr	r3, [pc, #112]	@ (8001da8 <MX_TIM2_Init+0xb8>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001da8 <MX_TIM2_Init+0xb8>)
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f006 fc33 	bl	80085a8 <HAL_TIM_PWM_Init>
 8001d42:	1e03      	subs	r3, r0, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d46:	f000 ff8d 	bl	8002c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4a:	211c      	movs	r1, #28
 8001d4c:	187b      	adds	r3, r7, r1
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d52:	187b      	adds	r3, r7, r1
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d58:	187a      	adds	r2, r7, r1
 8001d5a:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <MX_TIM2_Init+0xb8>)
 8001d5c:	0011      	movs	r1, r2
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f007 fac4 	bl	80092ec <HAL_TIMEx_MasterConfigSynchronization>
 8001d64:	1e03      	subs	r3, r0, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001d68:	f000 ff7c 	bl	8002c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d6c:	003b      	movs	r3, r7
 8001d6e:	2260      	movs	r2, #96	@ 0x60
 8001d70:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001d72:	003b      	movs	r3, r7
 8001d74:	2200      	movs	r2, #0
 8001d76:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d78:	003b      	movs	r3, r7
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d7e:	003b      	movs	r3, r7
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d84:	0039      	movs	r1, r7
 8001d86:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <MX_TIM2_Init+0xb8>)
 8001d88:	2208      	movs	r2, #8
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f006 fe4a 	bl	8008a24 <HAL_TIM_PWM_ConfigChannel>
 8001d90:	1e03      	subs	r3, r0, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001d94:	f000 ff66 	bl	8002c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d98:	4b03      	ldr	r3, [pc, #12]	@ (8001da8 <MX_TIM2_Init+0xb8>)
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f001 fc2a 	bl	80035f4 <HAL_TIM_MspPostInit>

}
 8001da0:	46c0      	nop			@ (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b00a      	add	sp, #40	@ 0x28
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000324 	.word	0x20000324
 8001dac:	0000031f 	.word	0x0000031f

08001db0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001db4:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <MX_TIM14_Init+0x40>)
 8001db6:	4a0f      	ldr	r2, [pc, #60]	@ (8001df4 <MX_TIM14_Init+0x44>)
 8001db8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8001dba:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <MX_TIM14_Init+0x40>)
 8001dbc:	22f4      	movs	r2, #244	@ 0xf4
 8001dbe:	0092      	lsls	r2, r2, #2
 8001dc0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001df0 <MX_TIM14_Init+0x40>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001dc8:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <MX_TIM14_Init+0x40>)
 8001dca:	4a0b      	ldr	r2, [pc, #44]	@ (8001df8 <MX_TIM14_Init+0x48>)
 8001dcc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dce:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <MX_TIM14_Init+0x40>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <MX_TIM14_Init+0x40>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001dda:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <MX_TIM14_Init+0x40>)
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f006 fa97 	bl	8008310 <HAL_TIM_Base_Init>
 8001de2:	1e03      	subs	r3, r0, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001de6:	f000 ff3d 	bl	8002c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000370 	.word	0x20000370
 8001df4:	40002000 	.word	0x40002000
 8001df8:	0000ffff 	.word	0x0000ffff

08001dfc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <MX_TIM16_Init+0x44>)
 8001e02:	4a10      	ldr	r2, [pc, #64]	@ (8001e44 <MX_TIM16_Init+0x48>)
 8001e04:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 58595;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <MX_TIM16_Init+0x44>)
 8001e08:	4a0f      	ldr	r2, [pc, #60]	@ (8001e48 <MX_TIM16_Init+0x4c>)
 8001e0a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <MX_TIM16_Init+0x44>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <MX_TIM16_Init+0x44>)
 8001e14:	4a0d      	ldr	r2, [pc, #52]	@ (8001e4c <MX_TIM16_Init+0x50>)
 8001e16:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e18:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <MX_TIM16_Init+0x44>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 10;
 8001e1e:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <MX_TIM16_Init+0x44>)
 8001e20:	220a      	movs	r2, #10
 8001e22:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e24:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <MX_TIM16_Init+0x44>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e2a:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <MX_TIM16_Init+0x44>)
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f006 fa6f 	bl	8008310 <HAL_TIM_Base_Init>
 8001e32:	1e03      	subs	r3, r0, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001e36:	f000 ff15 	bl	8002c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200003bc 	.word	0x200003bc
 8001e44:	40014400 	.word	0x40014400
 8001e48:	0000e4e3 	.word	0x0000e4e3
 8001e4c:	0000ffff 	.word	0x0000ffff

08001e50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e56:	4b10      	ldr	r3, [pc, #64]	@ (8001e98 <MX_DMA_Init+0x48>)
 8001e58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e98 <MX_DMA_Init+0x48>)
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e62:	4b0d      	ldr	r3, [pc, #52]	@ (8001e98 <MX_DMA_Init+0x48>)
 8001e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e66:	2201      	movs	r2, #1
 8001e68:	4013      	ands	r3, r2
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	2009      	movs	r0, #9
 8001e74:	f001 fdd4 	bl	8003a20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e78:	2009      	movs	r0, #9
 8001e7a:	f001 fde6 	bl	8003a4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	200a      	movs	r0, #10
 8001e84:	f001 fdcc 	bl	8003a20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001e88:	200a      	movs	r0, #10
 8001e8a:	f001 fdde 	bl	8003a4a <HAL_NVIC_EnableIRQ>

}
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b002      	add	sp, #8
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	40021000 	.word	0x40021000

08001e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b08b      	sub	sp, #44	@ 0x2c
 8001ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea2:	2414      	movs	r4, #20
 8001ea4:	193b      	adds	r3, r7, r4
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	2314      	movs	r3, #20
 8001eaa:	001a      	movs	r2, r3
 8001eac:	2100      	movs	r1, #0
 8001eae:	f007 fa9d 	bl	80093ec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb2:	4b74      	ldr	r3, [pc, #464]	@ (8002084 <MX_GPIO_Init+0x1e8>)
 8001eb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eb6:	4b73      	ldr	r3, [pc, #460]	@ (8002084 <MX_GPIO_Init+0x1e8>)
 8001eb8:	2104      	movs	r1, #4
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ebe:	4b71      	ldr	r3, [pc, #452]	@ (8002084 <MX_GPIO_Init+0x1e8>)
 8001ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eca:	4b6e      	ldr	r3, [pc, #440]	@ (8002084 <MX_GPIO_Init+0x1e8>)
 8001ecc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ece:	4b6d      	ldr	r3, [pc, #436]	@ (8002084 <MX_GPIO_Init+0x1e8>)
 8001ed0:	2120      	movs	r1, #32
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ed6:	4b6b      	ldr	r3, [pc, #428]	@ (8002084 <MX_GPIO_Init+0x1e8>)
 8001ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eda:	2220      	movs	r2, #32
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	4b68      	ldr	r3, [pc, #416]	@ (8002084 <MX_GPIO_Init+0x1e8>)
 8001ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ee6:	4b67      	ldr	r3, [pc, #412]	@ (8002084 <MX_GPIO_Init+0x1e8>)
 8001ee8:	2101      	movs	r1, #1
 8001eea:	430a      	orrs	r2, r1
 8001eec:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eee:	4b65      	ldr	r3, [pc, #404]	@ (8002084 <MX_GPIO_Init+0x1e8>)
 8001ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efa:	4b62      	ldr	r3, [pc, #392]	@ (8002084 <MX_GPIO_Init+0x1e8>)
 8001efc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001efe:	4b61      	ldr	r3, [pc, #388]	@ (8002084 <MX_GPIO_Init+0x1e8>)
 8001f00:	2102      	movs	r1, #2
 8001f02:	430a      	orrs	r2, r1
 8001f04:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f06:	4b5f      	ldr	r3, [pc, #380]	@ (8002084 <MX_GPIO_Init+0x1e8>)
 8001f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f12:	4b5c      	ldr	r3, [pc, #368]	@ (8002084 <MX_GPIO_Init+0x1e8>)
 8001f14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f16:	4b5b      	ldr	r3, [pc, #364]	@ (8002084 <MX_GPIO_Init+0x1e8>)
 8001f18:	2108      	movs	r1, #8
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f1e:	4b59      	ldr	r3, [pc, #356]	@ (8002084 <MX_GPIO_Init+0x1e8>)
 8001f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f22:	2208      	movs	r2, #8
 8001f24:	4013      	ands	r3, r2
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_MCLR_Pin, GPIO_PIN_SET);
 8001f2a:	238e      	movs	r3, #142	@ 0x8e
 8001f2c:	0119      	lsls	r1, r3, #4
 8001f2e:	23a0      	movs	r3, #160	@ 0xa0
 8001f30:	05db      	lsls	r3, r3, #23
 8001f32:	2201      	movs	r2, #1
 8001f34:	0018      	movs	r0, r3
 8001f36:	f002 f9da 	bl	80042ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_ENABLE_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001f3a:	4953      	ldr	r1, [pc, #332]	@ (8002088 <MX_GPIO_Init+0x1ec>)
 8001f3c:	4b53      	ldr	r3, [pc, #332]	@ (800208c <MX_GPIO_Init+0x1f0>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	0018      	movs	r0, r3
 8001f42:	f002 f9d4 	bl	80042ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin, GPIO_PIN_RESET);
 8001f46:	23c0      	movs	r3, #192	@ 0xc0
 8001f48:	00d9      	lsls	r1, r3, #3
 8001f4a:	23a0      	movs	r3, #160	@ 0xa0
 8001f4c:	05db      	lsls	r3, r3, #23
 8001f4e:	2200      	movs	r2, #0
 8001f50:	0018      	movs	r0, r3
 8001f52:	f002 f9cc 	bl	80042ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8001f56:	4b4e      	ldr	r3, [pc, #312]	@ (8002090 <MX_GPIO_Init+0x1f4>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2180      	movs	r1, #128	@ 0x80
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f002 f9c6 	bl	80042ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAPTOUCH_RESET_GPIO_Port, CAPTOUCH_RESET_Pin, GPIO_PIN_SET);
 8001f62:	2380      	movs	r3, #128	@ 0x80
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4849      	ldr	r0, [pc, #292]	@ (800208c <MX_GPIO_Init+0x1f0>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	f002 f9bf 	bl	80042ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CHIP_SELECT_Pin MEM_nWP_Pin MEM_nHOLD_Pin SHIFT_DATA_IN_Pin
                           SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_DATA_IN_Pin
 8001f70:	193b      	adds	r3, r7, r4
 8001f72:	22ee      	movs	r2, #238	@ 0xee
 8001f74:	0112      	lsls	r2, r2, #4
 8001f76:	601a      	str	r2, [r3, #0]
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f78:	193b      	adds	r3, r7, r4
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	193b      	adds	r3, r7, r4
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	193b      	adds	r3, r7, r4
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8a:	193a      	adds	r2, r7, r4
 8001f8c:	23a0      	movs	r3, #160	@ 0xa0
 8001f8e:	05db      	lsls	r3, r3, #23
 8001f90:	0011      	movs	r1, r2
 8001f92:	0018      	movs	r0, r3
 8001f94:	f002 f82a 	bl	8003fec <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_ENABLE_Pin DEBUG_LED_Pin CAPTOUCH_RESET_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin;
 8001f98:	193b      	adds	r3, r7, r4
 8001f9a:	4a3e      	ldr	r2, [pc, #248]	@ (8002094 <MX_GPIO_Init+0x1f8>)
 8001f9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9e:	193b      	adds	r3, r7, r4
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	193b      	adds	r3, r7, r4
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	193b      	adds	r3, r7, r4
 8001fac:	2200      	movs	r2, #0
 8001fae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb0:	193b      	adds	r3, r7, r4
 8001fb2:	4a36      	ldr	r2, [pc, #216]	@ (800208c <MX_GPIO_Init+0x1f0>)
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	0010      	movs	r0, r2
 8001fb8:	f002 f818 	bl	8003fec <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8001fbc:	193b      	adds	r3, r7, r4
 8001fbe:	2280      	movs	r2, #128	@ 0x80
 8001fc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc2:	193b      	adds	r3, r7, r4
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	193b      	adds	r3, r7, r4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	193b      	adds	r3, r7, r4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	193b      	adds	r3, r7, r4
 8001fd6:	4a2e      	ldr	r2, [pc, #184]	@ (8002090 <MX_GPIO_Init+0x1f4>)
 8001fd8:	0019      	movs	r1, r3
 8001fda:	0010      	movs	r0, r2
 8001fdc:	f002 f806 	bl	8003fec <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_SET_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = ALARM_SET_BUTTON_EXTI_Pin;
 8001fe0:	193b      	adds	r3, r7, r4
 8001fe2:	2280      	movs	r2, #128	@ 0x80
 8001fe4:	0212      	lsls	r2, r2, #8
 8001fe6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fe8:	193b      	adds	r3, r7, r4
 8001fea:	2284      	movs	r2, #132	@ 0x84
 8001fec:	0392      	lsls	r2, r2, #14
 8001fee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ff0:	193b      	adds	r3, r7, r4
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALARM_SET_BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 8001ff6:	193a      	adds	r2, r7, r4
 8001ff8:	23a0      	movs	r3, #160	@ 0xa0
 8001ffa:	05db      	lsls	r3, r3, #23
 8001ffc:	0011      	movs	r1, r2
 8001ffe:	0018      	movs	r0, r3
 8002000:	f001 fff4 	bl	8003fec <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_EXTI_Pin MINUTE_SET_BUTTON_EXTI_Pin ALARM_EN_BUTTON_EXTI_Pin DISPLAY_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_EXTI_Pin|MINUTE_SET_BUTTON_EXTI_Pin|ALARM_EN_BUTTON_EXTI_Pin|DISPLAY_BUTTON_EXTI_Pin;
 8002004:	0021      	movs	r1, r4
 8002006:	187b      	adds	r3, r7, r1
 8002008:	220f      	movs	r2, #15
 800200a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800200c:	187b      	adds	r3, r7, r1
 800200e:	2284      	movs	r2, #132	@ 0x84
 8002010:	0392      	lsls	r2, r2, #14
 8002012:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002014:	187b      	adds	r3, r7, r1
 8002016:	2201      	movs	r2, #1
 8002018:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800201a:	000c      	movs	r4, r1
 800201c:	187b      	adds	r3, r7, r1
 800201e:	4a1e      	ldr	r2, [pc, #120]	@ (8002098 <MX_GPIO_Init+0x1fc>)
 8002020:	0019      	movs	r1, r3
 8002022:	0010      	movs	r0, r2
 8002024:	f001 ffe2 	bl	8003fec <HAL_GPIO_Init>

  /*Configure GPIO pin : TIME_SWITCH_EXTI_Pin */
  GPIO_InitStruct.Pin = TIME_SWITCH_EXTI_Pin;
 8002028:	0021      	movs	r1, r4
 800202a:	187b      	adds	r3, r7, r1
 800202c:	2210      	movs	r2, #16
 800202e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002030:	187b      	adds	r3, r7, r1
 8002032:	22c4      	movs	r2, #196	@ 0xc4
 8002034:	0392      	lsls	r2, r2, #14
 8002036:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002038:	187b      	adds	r3, r7, r1
 800203a:	2201      	movs	r2, #1
 800203c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TIME_SWITCH_EXTI_GPIO_Port, &GPIO_InitStruct);
 800203e:	187b      	adds	r3, r7, r1
 8002040:	4a12      	ldr	r2, [pc, #72]	@ (800208c <MX_GPIO_Init+0x1f0>)
 8002042:	0019      	movs	r1, r3
 8002044:	0010      	movs	r0, r2
 8002046:	f001 ffd1 	bl	8003fec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	2005      	movs	r0, #5
 8002050:	f001 fce6 	bl	8003a20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002054:	2005      	movs	r0, #5
 8002056:	f001 fcf8 	bl	8003a4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2101      	movs	r1, #1
 800205e:	2006      	movs	r0, #6
 8002060:	f001 fcde 	bl	8003a20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002064:	2006      	movs	r0, #6
 8002066:	f001 fcf0 	bl	8003a4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2101      	movs	r1, #1
 800206e:	2007      	movs	r0, #7
 8002070:	f001 fcd6 	bl	8003a20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002074:	2007      	movs	r0, #7
 8002076:	f001 fce8 	bl	8003a4a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800207a:	46c0      	nop			@ (mov r8, r8)
 800207c:	46bd      	mov	sp, r7
 800207e:	b00b      	add	sp, #44	@ 0x2c
 8002080:	bd90      	pop	{r4, r7, pc}
 8002082:	46c0      	nop			@ (mov r8, r8)
 8002084:	40021000 	.word	0x40021000
 8002088:	00001002 	.word	0x00001002
 800208c:	50000400 	.word	0x50000400
 8002090:	50000800 	.word	0x50000800
 8002094:	00001102 	.word	0x00001102
 8002098:	50000c00 	.word	0x50000c00

0800209c <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80020a2:	2317      	movs	r3, #23
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 80020aa:	4a14      	ldr	r2, [pc, #80]	@ (80020fc <updateAndDisplayTime+0x60>)
 80020ac:	4914      	ldr	r1, [pc, #80]	@ (8002100 <updateAndDisplayTime+0x64>)
 80020ae:	4b15      	ldr	r3, [pc, #84]	@ (8002104 <updateAndDisplayTime+0x68>)
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff fa83 	bl	80015bc <getRTCTime>

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 80020b6:	4b14      	ldr	r3, [pc, #80]	@ (8002108 <updateAndDisplayTime+0x6c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10e      	bne.n	80020dc <updateAndDisplayTime+0x40>

		RTC_TimeTypeDef currTimeMil = conv2Mil(&currTime);
 80020be:	003b      	movs	r3, r7
 80020c0:	4a0f      	ldr	r2, [pc, #60]	@ (8002100 <updateAndDisplayTime+0x64>)
 80020c2:	0011      	movs	r1, r2
 80020c4:	0018      	movs	r0, r3
 80020c6:	f000 fcc9 	bl	8002a5c <conv2Mil>

		sevSeg_updateDigits(&currTimeMil, userAlarmToggle);
 80020ca:	4b10      	ldr	r3, [pc, #64]	@ (800210c <updateAndDisplayTime+0x70>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	001a      	movs	r2, r3
 80020d0:	003b      	movs	r3, r7
 80020d2:	0011      	movs	r1, r2
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 feeb 	bl	8002eb0 <sevSeg_updateDigits>
 80020da:	e007      	b.n	80020ec <updateAndDisplayTime+0x50>

	}
	else {
		sevSeg_updateDigits(&currTime, userAlarmToggle);
 80020dc:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <updateAndDisplayTime+0x70>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	001a      	movs	r2, r3
 80020e2:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <updateAndDisplayTime+0x64>)
 80020e4:	0011      	movs	r1, r2
 80020e6:	0018      	movs	r0, r3
 80020e8:	f000 fee2 	bl	8002eb0 <sevSeg_updateDigits>
	}

	return halRet;
 80020ec:	2317      	movs	r3, #23
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	781b      	ldrb	r3, [r3, #0]

}
 80020f2:	0018      	movs	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b006      	add	sp, #24
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	200000d0 	.word	0x200000d0
 8002100:	200000bc 	.word	0x200000bc
 8002104:	200001dc 	.word	0x200001dc
 8002108:	200000ec 	.word	0x200000ec
 800210c:	200000b9 	.word	0x200000b9

08002110 <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8002116:	2317      	movs	r3, #23
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 800211e:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <updateAndDisplayAlarm+0x54>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10e      	bne.n	8002144 <updateAndDisplayAlarm+0x34>

		RTC_TimeTypeDef userAlarmTimeMil = conv2Mil(&userAlarmTime);
 8002126:	003b      	movs	r3, r7
 8002128:	4a0f      	ldr	r2, [pc, #60]	@ (8002168 <updateAndDisplayAlarm+0x58>)
 800212a:	0011      	movs	r1, r2
 800212c:	0018      	movs	r0, r3
 800212e:	f000 fc95 	bl	8002a5c <conv2Mil>

		sevSeg_updateDigits(&userAlarmTimeMil, userAlarmToggle);
 8002132:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <updateAndDisplayAlarm+0x5c>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	001a      	movs	r2, r3
 8002138:	003b      	movs	r3, r7
 800213a:	0011      	movs	r1, r2
 800213c:	0018      	movs	r0, r3
 800213e:	f000 feb7 	bl	8002eb0 <sevSeg_updateDigits>
 8002142:	e007      	b.n	8002154 <updateAndDisplayAlarm+0x44>

	}
	else {
		sevSeg_updateDigits(&userAlarmTime, userAlarmToggle);
 8002144:	4b09      	ldr	r3, [pc, #36]	@ (800216c <updateAndDisplayAlarm+0x5c>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	001a      	movs	r2, r3
 800214a:	4b07      	ldr	r3, [pc, #28]	@ (8002168 <updateAndDisplayAlarm+0x58>)
 800214c:	0011      	movs	r1, r2
 800214e:	0018      	movs	r0, r3
 8002150:	f000 feae 	bl	8002eb0 <sevSeg_updateDigits>
	}



	return halRet;
 8002154:	2317      	movs	r3, #23
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	781b      	ldrb	r3, [r3, #0]

}
 800215a:	0018      	movs	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	b006      	add	sp, #24
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	200000ec 	.word	0x200000ec
 8002168:	200000d4 	.word	0x200000d4
 800216c:	200000b9 	.word	0x200000b9

08002170 <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b08d      	sub	sp, #52	@ 0x34
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 8002178:	2408      	movs	r4, #8
 800217a:	193b      	adds	r3, r7, r4
 800217c:	0018      	movs	r0, r3
 800217e:	2328      	movs	r3, #40	@ 0x28
 8002180:	001a      	movs	r2, r3
 8002182:	2100      	movs	r1, #0
 8002184:	f007 f932 	bl	80093ec <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8002188:	2380      	movs	r3, #128	@ 0x80
 800218a:	005a      	lsls	r2, r3, #1
 800218c:	1939      	adds	r1, r7, r4
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	2300      	movs	r3, #0
 8002192:	f004 febd 	bl	8006f10 <HAL_RTC_GetAlarm>


	  if(sAlarm.AlarmTime.Minutes>58) {
 8002196:	193b      	adds	r3, r7, r4
 8002198:	785b      	ldrb	r3, [r3, #1]
 800219a:	2b3a      	cmp	r3, #58	@ 0x3a
 800219c:	d903      	bls.n	80021a6 <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 800219e:	193b      	adds	r3, r7, r4
 80021a0:	2200      	movs	r2, #0
 80021a2:	705a      	strb	r2, [r3, #1]
 80021a4:	e006      	b.n	80021b4 <HAL_RTC_AlarmAEventCallback+0x44>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 80021a6:	2108      	movs	r1, #8
 80021a8:	187b      	adds	r3, r7, r1
 80021aa:	785b      	ldrb	r3, [r3, #1]
 80021ac:	3301      	adds	r3, #1
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	187b      	adds	r3, r7, r1
 80021b2:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 80021b4:	46c0      	nop			@ (mov r8, r8)
 80021b6:	2308      	movs	r3, #8
 80021b8:	18f9      	adds	r1, r7, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	0018      	movs	r0, r3
 80021c0:	f004 fd66 	bl	8006c90 <HAL_RTC_SetAlarm_IT>
 80021c4:	1e03      	subs	r3, r0, #0
 80021c6:	d1f6      	bne.n	80021b6 <HAL_RTC_AlarmAEventCallback+0x46>

	  updateAndDisplayTime();
 80021c8:	f7ff ff68 	bl	800209c <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 80021cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <HAL_RTC_AlarmAEventCallback+0x94>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <HAL_RTC_AlarmAEventCallback+0x8c>
 80021d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <HAL_RTC_AlarmAEventCallback+0x98>)
 80021d6:	781a      	ldrb	r2, [r3, #0]
 80021d8:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <HAL_RTC_AlarmAEventCallback+0x9c>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d10d      	bne.n	80021fc <HAL_RTC_AlarmAEventCallback+0x8c>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 80021e0:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <HAL_RTC_AlarmAEventCallback+0x98>)
 80021e2:	785a      	ldrb	r2, [r3, #1]
 80021e4:	4b09      	ldr	r3, [pc, #36]	@ (800220c <HAL_RTC_AlarmAEventCallback+0x9c>)
 80021e6:	785b      	ldrb	r3, [r3, #1]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d107      	bne.n	80021fc <HAL_RTC_AlarmAEventCallback+0x8c>
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <HAL_RTC_AlarmAEventCallback+0x98>)
 80021ee:	78da      	ldrb	r2, [r3, #3]
 80021f0:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_RTC_AlarmAEventCallback+0x9c>)
 80021f2:	78db      	ldrb	r3, [r3, #3]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d101      	bne.n	80021fc <HAL_RTC_AlarmAEventCallback+0x8c>
		  userAlarmBeep();
 80021f8:	f000 f80a 	bl	8002210 <userAlarmBeep>
	  }


}
 80021fc:	46c0      	nop			@ (mov r8, r8)
 80021fe:	46bd      	mov	sp, r7
 8002200:	b00d      	add	sp, #52	@ 0x34
 8002202:	bd90      	pop	{r4, r7, pc}
 8002204:	200000b9 	.word	0x200000b9
 8002208:	200000d4 	.word	0x200000d4
 800220c:	200000bc 	.word	0x200000bc

08002210 <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 8002216:	4b52      	ldr	r3, [pc, #328]	@ (8002360 <userAlarmBeep+0x150>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d02d      	beq.n	800227a <userAlarmBeep+0x6a>

			// Stop the timer and
			HAL_TIM_Base_Stop_IT(timerSnooze);
 800221e:	4b51      	ldr	r3, [pc, #324]	@ (8002364 <userAlarmBeep+0x154>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	0018      	movs	r0, r3
 8002224:	f006 f992 	bl	800854c <HAL_TIM_Base_Stop_IT>

			// Reset count to 0
			// only bits 0 - 15 should be changed.
			timerSnooze->Instance->CNT &= 0xFFFF0000;
 8002228:	4b4e      	ldr	r3, [pc, #312]	@ (8002364 <userAlarmBeep+0x154>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002230:	4b4c      	ldr	r3, [pc, #304]	@ (8002364 <userAlarmBeep+0x154>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0c12      	lsrs	r2, r2, #16
 8002238:	0412      	lsls	r2, r2, #16
 800223a:	625a      	str	r2, [r3, #36]	@ 0x24

			// Reset interrupt status register
			timerSnooze->Instance->SR &= 0xFFFC;
 800223c:	4b49      	ldr	r3, [pc, #292]	@ (8002364 <userAlarmBeep+0x154>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	4b47      	ldr	r3, [pc, #284]	@ (8002364 <userAlarmBeep+0x154>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4947      	ldr	r1, [pc, #284]	@ (8002368 <userAlarmBeep+0x158>)
 800224c:	400a      	ands	r2, r1
 800224e:	611a      	str	r2, [r3, #16]

			// Re-write RCR with 10
			timerSnooze->Instance->RCR &= 0xFF00;
 8002250:	4b44      	ldr	r3, [pc, #272]	@ (8002364 <userAlarmBeep+0x154>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002258:	4b42      	ldr	r3, [pc, #264]	@ (8002364 <userAlarmBeep+0x154>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	22ff      	movs	r2, #255	@ 0xff
 8002260:	0212      	lsls	r2, r2, #8
 8002262:	400a      	ands	r2, r1
 8002264:	631a      	str	r2, [r3, #48]	@ 0x30
			timerSnooze->Instance->RCR |= timerSnooze_RCR;
 8002266:	4b3f      	ldr	r3, [pc, #252]	@ (8002364 <userAlarmBeep+0x154>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800226e:	2164      	movs	r1, #100	@ 0x64
 8002270:	4b3c      	ldr	r3, [pc, #240]	@ (8002364 <userAlarmBeep+0x154>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	631a      	str	r2, [r3, #48]	@ 0x30

		}

	HAL_TIM_Base_Stop(timerDelay);
 800227a:	4b3c      	ldr	r3, [pc, #240]	@ (800236c <userAlarmBeep+0x15c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	0018      	movs	r0, r3
 8002280:	f006 f8ea 	bl	8008458 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8002284:	4b39      	ldr	r3, [pc, #228]	@ (800236c <userAlarmBeep+0x15c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0018      	movs	r0, r3
 800228a:	f006 f899 	bl	80083c0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 800228e:	4b37      	ldr	r3, [pc, #220]	@ (800236c <userAlarmBeep+0x15c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8002298:	1cfb      	adds	r3, r7, #3
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]

	// TODO: Start audio DMA streams
	startAudioStream();
 800229e:	f000 fc13 	bl	8002ac8 <startAudioStream>

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 80022a2:	f7ff fefb 	bl	800209c <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 80022a6:	4b31      	ldr	r3, [pc, #196]	@ (800236c <userAlarmBeep+0x15c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002370 <userAlarmBeep+0x160>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d91a      	bls.n	80022ee <userAlarmBeep+0xde>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 80022b8:	1cfb      	adds	r3, r7, #3
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002374 <userAlarmBeep+0x164>)
 80022be:	5cd3      	ldrb	r3, [r2, r3]
 80022c0:	0018      	movs	r0, r3
 80022c2:	f000 fea9 	bl	8003018 <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80022c6:	4b29      	ldr	r3, [pc, #164]	@ (800236c <userAlarmBeep+0x15c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ce:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80022d0:	1cfb      	adds	r3, r7, #3
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	1e5a      	subs	r2, r3, #1
 80022d6:	4193      	sbcs	r3, r2
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2201      	movs	r2, #1
 80022dc:	4053      	eors	r3, r2
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	001a      	movs	r2, r3
 80022e2:	1cfb      	adds	r3, r7, #3
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	2101      	movs	r1, #1
 80022ea:	400a      	ands	r2, r1
 80022ec:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 80022ee:	4b22      	ldr	r3, [pc, #136]	@ (8002378 <userAlarmBeep+0x168>)
 80022f0:	0018      	movs	r0, r3
 80022f2:	f7fe f93f 	bl	8000574 <capTouch_readChannels>

	} while(capTouch.keyStat == 0x00 &&
 80022f6:	4b20      	ldr	r3, [pc, #128]	@ (8002378 <userAlarmBeep+0x168>)
 80022f8:	7c1b      	ldrb	r3, [r3, #16]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d108      	bne.n	8002310 <userAlarmBeep+0x100>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 80022fe:	4b1f      	ldr	r3, [pc, #124]	@ (800237c <userAlarmBeep+0x16c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2204      	movs	r2, #4
 8002304:	0011      	movs	r1, r2
 8002306:	0018      	movs	r0, r3
 8002308:	f001 ffd4 	bl	80042b4 <HAL_GPIO_ReadPin>
 800230c:	1e03      	subs	r3, r0, #0
	} while(capTouch.keyStat == 0x00 &&
 800230e:	d1c8      	bne.n	80022a2 <userAlarmBeep+0x92>

	/*
	 * Stop blinking, turn off buzzer, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 8002310:	4b16      	ldr	r3, [pc, #88]	@ (800236c <userAlarmBeep+0x15c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0018      	movs	r0, r3
 8002316:	f006 f89f 	bl	8008458 <HAL_TIM_Base_Stop>

	// TODO: Stop audio stream
	stopAudioStream();
 800231a:	f000 fbf3 	bl	8002b04 <stopAudioStream>

	updateAndDisplayTime();				// Update to current time and display
 800231e:	f7ff febd 	bl	800209c <updateAndDisplayTime>
	sevSeg_setIntensity(sevSeg_intensityDuty[1]);	// Set to 50% duty cycle
 8002322:	2332      	movs	r3, #50	@ 0x32
 8002324:	0018      	movs	r0, r3
 8002326:	f000 fe77 	bl	8003018 <sevSeg_setIntensity>
	displayToggle = 2;								// Set to 2 for future display button ISRs
 800232a:	4b15      	ldr	r3, [pc, #84]	@ (8002380 <userAlarmBeep+0x170>)
 800232c:	2202      	movs	r2, #2
 800232e:	701a      	strb	r2, [r3, #0]


	// If this is the first snooze,
	if(!secondSnooze) {
 8002330:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <userAlarmBeep+0x150>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2201      	movs	r2, #1
 8002336:	4053      	eors	r3, r2
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d008      	beq.n	8002350 <userAlarmBeep+0x140>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 800233e:	4b09      	ldr	r3, [pc, #36]	@ (8002364 <userAlarmBeep+0x154>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	0018      	movs	r0, r3
 8002344:	f006 f8ae 	bl	80084a4 <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 8002348:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <userAlarmBeep+0x150>)
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
		 * in the top conditional, the secondSnooze is always true;
		 */
		secondSnooze = false;

	}
}
 800234e:	e002      	b.n	8002356 <userAlarmBeep+0x146>
		secondSnooze = false;
 8002350:	4b03      	ldr	r3, [pc, #12]	@ (8002360 <userAlarmBeep+0x150>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
}
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	46bd      	mov	sp, r7
 800235a:	b002      	add	sp, #8
 800235c:	bd80      	pop	{r7, pc}
 800235e:	46c0      	nop			@ (mov r8, r8)
 8002360:	20000409 	.word	0x20000409
 8002364:	20000070 	.word	0x20000070
 8002368:	0000fffc 	.word	0x0000fffc
 800236c:	2000006c 	.word	0x2000006c
 8002370:	00007ffe 	.word	0x00007ffe
 8002374:	080094a0 	.word	0x080094a0
 8002378:	2000040c 	.word	0x2000040c
 800237c:	20000000 	.word	0x20000000
 8002380:	200000b8 	.word	0x200000b8

08002384 <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	0002      	movs	r2, r0
 800238c:	1dbb      	adds	r3, r7, #6
 800238e:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8002390:	2208      	movs	r2, #8
 8002392:	1dbb      	adds	r3, r7, #6
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	4293      	cmp	r3, r2
 8002398:	d106      	bne.n	80023a8 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 800239a:	230f      	movs	r3, #15
 800239c:	18fc      	adds	r4, r7, r3
 800239e:	f000 f86f 	bl	8002480 <displayButtonISR>
 80023a2:	0003      	movs	r3, r0
 80023a4:	7023      	strb	r3, [r4, #0]

	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 80023a6:	e03d      	b.n	8002424 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 80023a8:	2204      	movs	r2, #4
 80023aa:	1dbb      	adds	r3, r7, #6
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d106      	bne.n	80023c0 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 80023b2:	230f      	movs	r3, #15
 80023b4:	18fc      	adds	r4, r7, r3
 80023b6:	f000 f88b 	bl	80024d0 <alarmEnableISR>
 80023ba:	0003      	movs	r3, r0
 80023bc:	7023      	strb	r3, [r4, #0]
}
 80023be:	e031      	b.n	8002424 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmSetButtonPin) {
 80023c0:	2380      	movs	r3, #128	@ 0x80
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	1dba      	adds	r2, r7, #6
 80023c6:	8812      	ldrh	r2, [r2, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d106      	bne.n	80023da <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 80023cc:	230f      	movs	r3, #15
 80023ce:	18fc      	adds	r4, r7, r3
 80023d0:	f000 f8a8 	bl	8002524 <alarmSetISR>
 80023d4:	0003      	movs	r3, r0
 80023d6:	7023      	strb	r3, [r4, #0]
}
 80023d8:	e024      	b.n	8002424 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == hourSetButtonPin) {
 80023da:	2201      	movs	r2, #1
 80023dc:	1dbb      	adds	r3, r7, #6
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d106      	bne.n	80023f2 <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 80023e4:	230f      	movs	r3, #15
 80023e6:	18fc      	adds	r4, r7, r3
 80023e8:	f000 f95c 	bl	80026a4 <hourSetISR>
 80023ec:	0003      	movs	r3, r0
 80023ee:	7023      	strb	r3, [r4, #0]
}
 80023f0:	e018      	b.n	8002424 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == minuteSetButtonPin) {
 80023f2:	2202      	movs	r2, #2
 80023f4:	1dbb      	adds	r3, r7, #6
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d106      	bne.n	800240a <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 80023fc:	230f      	movs	r3, #15
 80023fe:	18fc      	adds	r4, r7, r3
 8002400:	f000 f97c 	bl	80026fc <minuteSetISR>
 8002404:	0003      	movs	r3, r0
 8002406:	7023      	strb	r3, [r4, #0]
}
 8002408:	e00c      	b.n	8002424 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == timeFormatSwitchPin) {
 800240a:	2210      	movs	r2, #16
 800240c:	1dbb      	adds	r3, r7, #6
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	4293      	cmp	r3, r2
 8002412:	d106      	bne.n	8002422 <HAL_GPIO_EXTI_Falling_Callback+0x9e>
		halRet = timeFormatSwitchISR();
 8002414:	230f      	movs	r3, #15
 8002416:	18fc      	adds	r4, r7, r3
 8002418:	f000 f9c2 	bl	80027a0 <timeFormatSwitchISR>
 800241c:	0003      	movs	r3, r0
 800241e:	7023      	strb	r3, [r4, #0]
}
 8002420:	e000      	b.n	8002424 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
		__NOP();
 8002422:	46c0      	nop			@ (mov r8, r8)
}
 8002424:	46c0      	nop			@ (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b005      	add	sp, #20
 800242a:	bd90      	pop	{r4, r7, pc}

0800242c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	0002      	movs	r2, r0
 8002434:	1dbb      	adds	r3, r7, #6
 8002436:	801a      	strh	r2, [r3, #0]

	if(GPIO_Pin == timeFormatSwitchPin) {
 8002438:	2210      	movs	r2, #16
 800243a:	1dbb      	adds	r3, r7, #6
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_GPIO_EXTI_Rising_Callback+0x1a>

		timeFormatSwitchISR();
 8002442:	f000 f9ad 	bl	80027a0 <timeFormatSwitchISR>

	}

}
 8002446:	46c0      	nop			@ (mov r8, r8)
 8002448:	46bd      	mov	sp, r7
 800244a:	b002      	add	sp, #8
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

	if((htim == timerSnooze) && (secondSnooze == true)) {
 8002458:	4b07      	ldr	r3, [pc, #28]	@ (8002478 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	429a      	cmp	r2, r3
 8002460:	d105      	bne.n	800246e <HAL_TIM_PeriodElapsedCallback+0x1e>
 8002462:	4b06      	ldr	r3, [pc, #24]	@ (800247c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_TIM_PeriodElapsedCallback+0x1e>

		userAlarmBeep();
 800246a:	f7ff fed1 	bl	8002210 <userAlarmBeep>

	}

}
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	b002      	add	sp, #8
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	20000070 	.word	0x20000070
 800247c:	20000409 	.word	0x20000409

08002480 <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8002486:	1dfb      	adds	r3, r7, #7
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 800248c:	f7ff fe06 	bl	800209c <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8002490:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <displayButtonISR+0x48>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	001a      	movs	r2, r3
 8002496:	4b0d      	ldr	r3, [pc, #52]	@ (80024cc <displayButtonISR+0x4c>)
 8002498:	5c9b      	ldrb	r3, [r3, r2]
 800249a:	0018      	movs	r0, r3
 800249c:	f000 fdbc 	bl	8003018 <sevSeg_setIntensity>

	if(displayToggle >= 1) {			// Increment display toggle or reset back down to 0;
 80024a0:	4b09      	ldr	r3, [pc, #36]	@ (80024c8 <displayButtonISR+0x48>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <displayButtonISR+0x30>
		displayToggle = 0;
 80024a8:	4b07      	ldr	r3, [pc, #28]	@ (80024c8 <displayButtonISR+0x48>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	e005      	b.n	80024bc <displayButtonISR+0x3c>
	} else {
		displayToggle++;
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <displayButtonISR+0x48>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	3301      	adds	r3, #1
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	4b03      	ldr	r3, [pc, #12]	@ (80024c8 <displayButtonISR+0x48>)
 80024ba:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 80024bc:	1dfb      	adds	r3, r7, #7
 80024be:	781b      	ldrb	r3, [r3, #0]

}
 80024c0:	0018      	movs	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b002      	add	sp, #8
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	200000b8 	.word	0x200000b8
 80024cc:	080094a0 	.word	0x080094a0

080024d0 <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0



	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80024d6:	1dfb      	adds	r3, r7, #7
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 80024dc:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <alarmEnableISR+0x4c>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2201      	movs	r2, #1
 80024e2:	4053      	eors	r3, r2
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <alarmEnableISR+0x22>

		userAlarmToggle = true;								// Toggle internal flag to true
 80024ea:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <alarmEnableISR+0x4c>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
 80024f0:	e008      	b.n	8002504 <alarmEnableISR+0x34>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 80024f2:	4b0a      	ldr	r3, [pc, #40]	@ (800251c <alarmEnableISR+0x4c>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <alarmEnableISR+0x32>

		userAlarmToggle = false;							// Toggle internal flag to false
 80024fa:	4b08      	ldr	r3, [pc, #32]	@ (800251c <alarmEnableISR+0x4c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	e000      	b.n	8002504 <alarmEnableISR+0x34>
	}
	else {
		__NOP();							//Code should never reach here.
 8002502:	46c0      	nop			@ (mov r8, r8)
	}

	updateAndDisplayTime();				// Update display with correct decimal point
 8002504:	f7ff fdca 	bl	800209c <updateAndDisplayTime>

	// Reset snooze time
	secondSnooze = false;
 8002508:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <alarmEnableISR+0x50>)
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]

	return halRet;
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	781b      	ldrb	r3, [r3, #0]

}
 8002512:	0018      	movs	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	b002      	add	sp, #8
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	200000b9 	.word	0x200000b9
 8002520:	20000409 	.word	0x20000409

08002524 <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 800252a:	1c7b      	adds	r3, r7, #1
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 8002530:	1dfb      	adds	r3, r7, #7
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	e01a      	b.n	800256e <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 8002538:	4b55      	ldr	r3, [pc, #340]	@ (8002690 <alarmSetISR+0x16c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	0018      	movs	r0, r3
 800253e:	f005 ff8b 	bl	8008458 <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 8002542:	4b53      	ldr	r3, [pc, #332]	@ (8002690 <alarmSetISR+0x16c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2200      	movs	r2, #0
 800254a:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 800254c:	4b50      	ldr	r3, [pc, #320]	@ (8002690 <alarmSetISR+0x16c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0018      	movs	r0, r3
 8002552:	f005 ff35 	bl	80083c0 <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 8002556:	4b4e      	ldr	r3, [pc, #312]	@ (8002690 <alarmSetISR+0x16c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	4a4d      	ldr	r2, [pc, #308]	@ (8002694 <alarmSetISR+0x170>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d9f8      	bls.n	8002556 <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 8002564:	1dfb      	adds	r3, r7, #7
 8002566:	781a      	ldrb	r2, [r3, #0]
 8002568:	1dfb      	adds	r3, r7, #7
 800256a:	3201      	adds	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	1dfb      	adds	r3, r7, #7
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d9e0      	bls.n	8002538 <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 8002576:	4b48      	ldr	r3, [pc, #288]	@ (8002698 <alarmSetISR+0x174>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2280      	movs	r2, #128	@ 0x80
 800257c:	0212      	lsls	r2, r2, #8
 800257e:	0011      	movs	r1, r2
 8002580:	0018      	movs	r0, r3
 8002582:	f001 fe97 	bl	80042b4 <HAL_GPIO_ReadPin>
 8002586:	1e03      	subs	r3, r0, #0
 8002588:	d11f      	bne.n	80025ca <alarmSetISR+0xa6>
		alarmSetMode = true;
 800258a:	4b44      	ldr	r3, [pc, #272]	@ (800269c <alarmSetISR+0x178>)
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 8002590:	4b3f      	ldr	r3, [pc, #252]	@ (8002690 <alarmSetISR+0x16c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	0018      	movs	r0, r3
 8002596:	f005 ff5f 	bl	8008458 <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 800259a:	4b3d      	ldr	r3, [pc, #244]	@ (8002690 <alarmSetISR+0x16c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2200      	movs	r2, #0
 80025a2:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80025a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002690 <alarmSetISR+0x16c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	0018      	movs	r0, r3
 80025aa:	f005 ff09 	bl	80083c0 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80025ae:	4b38      	ldr	r3, [pc, #224]	@ (8002690 <alarmSetISR+0x16c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 80025ba:	1cfb      	adds	r3, r7, #3
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 80025c0:	4b36      	ldr	r3, [pc, #216]	@ (800269c <alarmSetISR+0x178>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d059      	beq.n	800267c <alarmSetISR+0x158>
 80025c8:	e002      	b.n	80025d0 <alarmSetISR+0xac>
		return halRet;
 80025ca:	1c7b      	adds	r3, r7, #1
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	e05a      	b.n	8002686 <alarmSetISR+0x162>

		bool displayBlink = false;
 80025d0:	1cbb      	adds	r3, r7, #2
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 80025d6:	4b30      	ldr	r3, [pc, #192]	@ (8002698 <alarmSetISR+0x174>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2280      	movs	r2, #128	@ 0x80
 80025dc:	0212      	lsls	r2, r2, #8
 80025de:	0011      	movs	r1, r2
 80025e0:	0018      	movs	r0, r3
 80025e2:	f001 fe67 	bl	80042b4 <HAL_GPIO_ReadPin>
 80025e6:	0003      	movs	r3, r0
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d102      	bne.n	80025f2 <alarmSetISR+0xce>
				alarmSetButtonReset = true;
 80025ec:	1cfb      	adds	r3, r7, #3
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 80025f2:	f7ff fd8d 	bl	8002110 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 80025f6:	4b26      	ldr	r3, [pc, #152]	@ (8002690 <alarmSetISR+0x16c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	1ad2      	subs	r2, r2, r3
 8002604:	2380      	movs	r3, #128	@ 0x80
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	429a      	cmp	r2, r3
 800260a:	d31b      	bcc.n	8002644 <alarmSetISR+0x120>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 800260c:	1cbb      	adds	r3, r7, #2
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4a23      	ldr	r2, [pc, #140]	@ (80026a0 <alarmSetISR+0x17c>)
 8002612:	5cd3      	ldrb	r3, [r2, r3]
 8002614:	0018      	movs	r0, r3
 8002616:	f000 fcff 	bl	8003018 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 800261a:	4b1d      	ldr	r3, [pc, #116]	@ (8002690 <alarmSetISR+0x16c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 8002626:	1cbb      	adds	r3, r7, #2
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	1e5a      	subs	r2, r3, #1
 800262c:	4193      	sbcs	r3, r2
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2201      	movs	r2, #1
 8002632:	4053      	eors	r3, r2
 8002634:	b2db      	uxtb	r3, r3
 8002636:	001a      	movs	r2, r3
 8002638:	1cbb      	adds	r3, r7, #2
 800263a:	701a      	strb	r2, [r3, #0]
 800263c:	781a      	ldrb	r2, [r3, #0]
 800263e:	2101      	movs	r1, #1
 8002640:	400a      	ands	r2, r1
 8002642:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 8002644:	4b14      	ldr	r3, [pc, #80]	@ (8002698 <alarmSetISR+0x174>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2280      	movs	r2, #128	@ 0x80
 800264a:	0212      	lsls	r2, r2, #8
 800264c:	0011      	movs	r1, r2
 800264e:	0018      	movs	r0, r3
 8002650:	f001 fe30 	bl	80042b4 <HAL_GPIO_ReadPin>
 8002654:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 8002656:	d1be      	bne.n	80025d6 <alarmSetISR+0xb2>
 8002658:	1cfb      	adds	r3, r7, #3
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2201      	movs	r2, #1
 800265e:	4053      	eors	r3, r2
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1b7      	bne.n	80025d6 <alarmSetISR+0xb2>

		sevSeg_setIntensity(sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 8002666:	2332      	movs	r3, #50	@ 0x32
 8002668:	0018      	movs	r0, r3
 800266a:	f000 fcd5 	bl	8003018 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 800266e:	4b08      	ldr	r3, [pc, #32]	@ (8002690 <alarmSetISR+0x16c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	0018      	movs	r0, r3
 8002674:	f005 fef0 	bl	8008458 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8002678:	f7ff fd10 	bl	800209c <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 800267c:	4b07      	ldr	r3, [pc, #28]	@ (800269c <alarmSetISR+0x178>)
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 8002682:	1c7b      	adds	r3, r7, #1
 8002684:	781b      	ldrb	r3, [r3, #0]

}
 8002686:	0018      	movs	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	b002      	add	sp, #8
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			@ (mov r8, r8)
 8002690:	2000006c 	.word	0x2000006c
 8002694:	0000fffe 	.word	0x0000fffe
 8002698:	20000004 	.word	0x20000004
 800269c:	20000408 	.word	0x20000408
 80026a0:	080094a0 	.word	0x080094a0

080026a4 <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 80026aa:	1dfb      	adds	r3, r7, #7
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80026b0:	4b0e      	ldr	r3, [pc, #56]	@ (80026ec <hourSetISR+0x48>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <hourSetISR+0x1a>

		alarmHourInc();
 80026b8:	f000 f89a 	bl	80027f0 <alarmHourInc>
 80026bc:	e00f      	b.n	80026de <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 80026be:	f000 f8c7 	bl	8002850 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80026c2:	490b      	ldr	r1, [pc, #44]	@ (80026f0 <hourSetISR+0x4c>)
 80026c4:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <hourSetISR+0x50>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	0018      	movs	r0, r3
 80026ca:	f004 f98f 	bl	80069ec <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80026ce:	f7ff fce5 	bl	800209c <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80026d2:	4a09      	ldr	r2, [pc, #36]	@ (80026f8 <hourSetISR+0x54>)
 80026d4:	4906      	ldr	r1, [pc, #24]	@ (80026f0 <hourSetISR+0x4c>)
 80026d6:	4b07      	ldr	r3, [pc, #28]	@ (80026f4 <hourSetISR+0x50>)
 80026d8:	0018      	movs	r0, r3
 80026da:	f7fe ff6f 	bl	80015bc <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 80026de:	1dfb      	adds	r3, r7, #7
 80026e0:	781b      	ldrb	r3, [r3, #0]

}
 80026e2:	0018      	movs	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b002      	add	sp, #8
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	20000408 	.word	0x20000408
 80026f0:	200000bc 	.word	0x200000bc
 80026f4:	200001dc 	.word	0x200001dc
 80026f8:	200000d0 	.word	0x200000d0

080026fc <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08c      	sub	sp, #48	@ 0x30
 8002700:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 8002702:	232f      	movs	r3, #47	@ 0x2f
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 800270a:	4b21      	ldr	r3, [pc, #132]	@ (8002790 <minuteSetISR+0x94>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <minuteSetISR+0x1c>

		alarmMinuteInc();
 8002712:	f000 f8dd 	bl	80028d0 <alarmMinuteInc>
 8002716:	e034      	b.n	8002782 <minuteSetISR+0x86>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8002718:	f000 f8f8 	bl	800290c <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 800271c:	491d      	ldr	r1, [pc, #116]	@ (8002794 <minuteSetISR+0x98>)
 800271e:	4b1e      	ldr	r3, [pc, #120]	@ (8002798 <minuteSetISR+0x9c>)
 8002720:	2200      	movs	r2, #0
 8002722:	0018      	movs	r0, r3
 8002724:	f004 f962 	bl	80069ec <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	0018      	movs	r0, r3
 800272c:	2328      	movs	r3, #40	@ 0x28
 800272e:	001a      	movs	r2, r3
 8002730:	2100      	movs	r1, #0
 8002732:	f006 fe5b 	bl	80093ec <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8002736:	2380      	movs	r3, #128	@ 0x80
 8002738:	005a      	lsls	r2, r3, #1
 800273a:	1d39      	adds	r1, r7, #4
 800273c:	4816      	ldr	r0, [pc, #88]	@ (8002798 <minuteSetISR+0x9c>)
 800273e:	2300      	movs	r3, #0
 8002740:	f004 fbe6 	bl	8006f10 <HAL_RTC_GetAlarm>

		if(sAlarm.AlarmTime.Minutes>58) {
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	785b      	ldrb	r3, [r3, #1]
 8002748:	2b3a      	cmp	r3, #58	@ 0x3a
 800274a:	d903      	bls.n	8002754 <minuteSetISR+0x58>
			sAlarm.AlarmTime.Minutes=0;
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	2200      	movs	r2, #0
 8002750:	705a      	strb	r2, [r3, #1]
 8002752:	e005      	b.n	8002760 <minuteSetISR+0x64>
			//printf("Reset alarm time\n\r");
		} else {
			sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	785b      	ldrb	r3, [r3, #1]
 8002758:	3301      	adds	r3, #1
 800275a:	b2da      	uxtb	r2, r3
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8002760:	46c0      	nop			@ (mov r8, r8)
 8002762:	1d39      	adds	r1, r7, #4
 8002764:	4b0c      	ldr	r3, [pc, #48]	@ (8002798 <minuteSetISR+0x9c>)
 8002766:	2200      	movs	r2, #0
 8002768:	0018      	movs	r0, r3
 800276a:	f004 fa91 	bl	8006c90 <HAL_RTC_SetAlarm_IT>
 800276e:	1e03      	subs	r3, r0, #0
 8002770:	d1f7      	bne.n	8002762 <minuteSetISR+0x66>

		updateAndDisplayTime();
 8002772:	f7ff fc93 	bl	800209c <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8002776:	4a09      	ldr	r2, [pc, #36]	@ (800279c <minuteSetISR+0xa0>)
 8002778:	4906      	ldr	r1, [pc, #24]	@ (8002794 <minuteSetISR+0x98>)
 800277a:	4b07      	ldr	r3, [pc, #28]	@ (8002798 <minuteSetISR+0x9c>)
 800277c:	0018      	movs	r0, r3
 800277e:	f7fe ff1d 	bl	80015bc <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 8002782:	232f      	movs	r3, #47	@ 0x2f
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	781b      	ldrb	r3, [r3, #0]
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b00c      	add	sp, #48	@ 0x30
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000408 	.word	0x20000408
 8002794:	200000bc 	.word	0x200000bc
 8002798:	200001dc 	.word	0x200001dc
 800279c:	200000d0 	.word	0x200000d0

080027a0 <timeFormatSwitchISR>:

/*
 * Switch hour format (12 or 24 hr)
 */
HAL_StatusTypeDef timeFormatSwitchISR(void) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80027a6:	1dfb      	adds	r3, r7, #7
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]

	// Determine which time format we will be using
	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 80027ac:	4b0d      	ldr	r3, [pc, #52]	@ (80027e4 <timeFormatSwitchISR+0x44>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2210      	movs	r2, #16
 80027b2:	0011      	movs	r1, r2
 80027b4:	0018      	movs	r0, r3
 80027b6:	f001 fd7d 	bl	80042b4 <HAL_GPIO_ReadPin>
 80027ba:	0003      	movs	r3, r0
 80027bc:	001a      	movs	r2, r3
 80027be:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <timeFormatSwitchISR+0x48>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d103      	bne.n	80027ce <timeFormatSwitchISR+0x2e>
	  userTimeFormat = RTC_HOURFORMAT_12;
 80027c6:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <timeFormatSwitchISR+0x4c>)
 80027c8:	2240      	movs	r2, #64	@ 0x40
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e002      	b.n	80027d4 <timeFormatSwitchISR+0x34>
	}
	else {
	  userTimeFormat = RTC_HOURFORMAT_24;
 80027ce:	4b07      	ldr	r3, [pc, #28]	@ (80027ec <timeFormatSwitchISR+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
	}

	updateAndDisplayTime();
 80027d4:	f7ff fc62 	bl	800209c <updateAndDisplayTime>

	return halRet;
 80027d8:	1dfb      	adds	r3, r7, #7
 80027da:	781b      	ldrb	r3, [r3, #0]

}
 80027dc:	0018      	movs	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000008 	.word	0x20000008
 80027e8:	20000040 	.word	0x20000040
 80027ec:	200000ec 	.word	0x200000ec

080027f0 <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 80027f4:	4b15      	ldr	r3, [pc, #84]	@ (800284c <alarmHourInc+0x5c>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b0b      	cmp	r3, #11
 80027fa:	d903      	bls.n	8002804 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 80027fc:	4b13      	ldr	r3, [pc, #76]	@ (800284c <alarmHourInc+0x5c>)
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	e01e      	b.n	8002842 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8002804:	4b11      	ldr	r3, [pc, #68]	@ (800284c <alarmHourInc+0x5c>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b0b      	cmp	r3, #11
 800280a:	d10e      	bne.n	800282a <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 800280c:	4b0f      	ldr	r3, [pc, #60]	@ (800284c <alarmHourInc+0x5c>)
 800280e:	78db      	ldrb	r3, [r3, #3]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d103      	bne.n	800281c <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8002814:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <alarmHourInc+0x5c>)
 8002816:	2201      	movs	r2, #1
 8002818:	70da      	strb	r2, [r3, #3]
 800281a:	e002      	b.n	8002822 <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800281c:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <alarmHourInc+0x5c>)
 800281e:	2200      	movs	r2, #0
 8002820:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 8002822:	4b0a      	ldr	r3, [pc, #40]	@ (800284c <alarmHourInc+0x5c>)
 8002824:	220c      	movs	r2, #12
 8002826:	701a      	strb	r2, [r3, #0]
 8002828:	e00b      	b.n	8002842 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 800282a:	4b08      	ldr	r3, [pc, #32]	@ (800284c <alarmHourInc+0x5c>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b0a      	cmp	r3, #10
 8002830:	d806      	bhi.n	8002840 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8002832:	4b06      	ldr	r3, [pc, #24]	@ (800284c <alarmHourInc+0x5c>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	3301      	adds	r3, #1
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b04      	ldr	r3, [pc, #16]	@ (800284c <alarmHourInc+0x5c>)
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	e000      	b.n	8002842 <alarmHourInc+0x52>
	}
	else {
		__NOP();
 8002840:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8002842:	f000 f8e1 	bl	8002a08 <updateRTCBackupReg>

}
 8002846:	46c0      	nop			@ (mov r8, r8)
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	200000d4 	.word	0x200000d4

08002850 <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8002854:	4a1a      	ldr	r2, [pc, #104]	@ (80028c0 <currHourInc+0x70>)
 8002856:	491b      	ldr	r1, [pc, #108]	@ (80028c4 <currHourInc+0x74>)
 8002858:	4b1b      	ldr	r3, [pc, #108]	@ (80028c8 <currHourInc+0x78>)
 800285a:	0018      	movs	r0, r3
 800285c:	f7fe feae 	bl	80015bc <getRTCTime>

	if(currTime.Hours >= 12) {
 8002860:	4b18      	ldr	r3, [pc, #96]	@ (80028c4 <currHourInc+0x74>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b0b      	cmp	r3, #11
 8002866:	d903      	bls.n	8002870 <currHourInc+0x20>
		currTime.Hours = 1;
 8002868:	4b16      	ldr	r3, [pc, #88]	@ (80028c4 <currHourInc+0x74>)
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	e01e      	b.n	80028ae <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 8002870:	4b14      	ldr	r3, [pc, #80]	@ (80028c4 <currHourInc+0x74>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b0b      	cmp	r3, #11
 8002876:	d10e      	bne.n	8002896 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8002878:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <currHourInc+0x74>)
 800287a:	78db      	ldrb	r3, [r3, #3]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d103      	bne.n	8002888 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8002880:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <currHourInc+0x74>)
 8002882:	2201      	movs	r2, #1
 8002884:	70da      	strb	r2, [r3, #3]
 8002886:	e002      	b.n	800288e <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002888:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <currHourInc+0x74>)
 800288a:	2200      	movs	r2, #0
 800288c:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 800288e:	4b0d      	ldr	r3, [pc, #52]	@ (80028c4 <currHourInc+0x74>)
 8002890:	220c      	movs	r2, #12
 8002892:	701a      	strb	r2, [r3, #0]
 8002894:	e00b      	b.n	80028ae <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 8002896:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <currHourInc+0x7c>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b0a      	cmp	r3, #10
 800289c:	d806      	bhi.n	80028ac <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 800289e:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <currHourInc+0x74>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	3301      	adds	r3, #1
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <currHourInc+0x74>)
 80028a8:	701a      	strb	r2, [r3, #0]
 80028aa:	e000      	b.n	80028ae <currHourInc+0x5e>
	}
	else {
		__NOP();
 80028ac:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 80028ae:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <currHourInc+0x74>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 80028b4:	4b03      	ldr	r3, [pc, #12]	@ (80028c4 <currHourInc+0x74>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]

}
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	200000d0 	.word	0x200000d0
 80028c4:	200000bc 	.word	0x200000bc
 80028c8:	200001dc 	.word	0x200001dc
 80028cc:	200000d4 	.word	0x200000d4

080028d0 <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 80028d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002908 <alarmMinuteInc+0x38>)
 80028d6:	785b      	ldrb	r3, [r3, #1]
 80028d8:	2b3a      	cmp	r3, #58	@ 0x3a
 80028da:	d903      	bls.n	80028e4 <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 80028dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002908 <alarmMinuteInc+0x38>)
 80028de:	2200      	movs	r2, #0
 80028e0:	705a      	strb	r2, [r3, #1]
 80028e2:	e00b      	b.n	80028fc <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 80028e4:	4b08      	ldr	r3, [pc, #32]	@ (8002908 <alarmMinuteInc+0x38>)
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	2b3a      	cmp	r3, #58	@ 0x3a
 80028ea:	d806      	bhi.n	80028fa <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 80028ec:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <alarmMinuteInc+0x38>)
 80028ee:	785b      	ldrb	r3, [r3, #1]
 80028f0:	3301      	adds	r3, #1
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	4b04      	ldr	r3, [pc, #16]	@ (8002908 <alarmMinuteInc+0x38>)
 80028f6:	705a      	strb	r2, [r3, #1]
 80028f8:	e000      	b.n	80028fc <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 80028fa:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 80028fc:	f000 f884 	bl	8002a08 <updateRTCBackupReg>

}
 8002900:	46c0      	nop			@ (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			@ (mov r8, r8)
 8002908:	200000d4 	.word	0x200000d4

0800290c <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8002910:	4a11      	ldr	r2, [pc, #68]	@ (8002958 <currMinuteInc+0x4c>)
 8002912:	4912      	ldr	r1, [pc, #72]	@ (800295c <currMinuteInc+0x50>)
 8002914:	4b12      	ldr	r3, [pc, #72]	@ (8002960 <currMinuteInc+0x54>)
 8002916:	0018      	movs	r0, r3
 8002918:	f7fe fe50 	bl	80015bc <getRTCTime>

	if(currTime.Minutes >= 59) {
 800291c:	4b0f      	ldr	r3, [pc, #60]	@ (800295c <currMinuteInc+0x50>)
 800291e:	785b      	ldrb	r3, [r3, #1]
 8002920:	2b3a      	cmp	r3, #58	@ 0x3a
 8002922:	d903      	bls.n	800292c <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 8002924:	4b0d      	ldr	r3, [pc, #52]	@ (800295c <currMinuteInc+0x50>)
 8002926:	2200      	movs	r2, #0
 8002928:	705a      	strb	r2, [r3, #1]
 800292a:	e00b      	b.n	8002944 <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 800292c:	4b0b      	ldr	r3, [pc, #44]	@ (800295c <currMinuteInc+0x50>)
 800292e:	785b      	ldrb	r3, [r3, #1]
 8002930:	2b3a      	cmp	r3, #58	@ 0x3a
 8002932:	d806      	bhi.n	8002942 <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 8002934:	4b09      	ldr	r3, [pc, #36]	@ (800295c <currMinuteInc+0x50>)
 8002936:	785b      	ldrb	r3, [r3, #1]
 8002938:	3301      	adds	r3, #1
 800293a:	b2da      	uxtb	r2, r3
 800293c:	4b07      	ldr	r3, [pc, #28]	@ (800295c <currMinuteInc+0x50>)
 800293e:	705a      	strb	r2, [r3, #1]
 8002940:	e000      	b.n	8002944 <currMinuteInc+0x38>
	}
	else {
		__NOP();
 8002942:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8002944:	4b05      	ldr	r3, [pc, #20]	@ (800295c <currMinuteInc+0x50>)
 8002946:	2200      	movs	r2, #0
 8002948:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 800294a:	4b04      	ldr	r3, [pc, #16]	@ (800295c <currMinuteInc+0x50>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]

}
 8002950:	46c0      	nop			@ (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	200000d0 	.word	0x200000d0
 800295c:	200000bc 	.word	0x200000bc
 8002960:	200001dc 	.word	0x200001dc

08002964 <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 8002968:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <dispFault+0x1c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2280      	movs	r2, #128	@ 0x80
 800296e:	0151      	lsls	r1, r2, #5
 8002970:	2201      	movs	r2, #1
 8002972:	0018      	movs	r0, r3
 8002974:	f001 fcbb 	bl	80042ee <HAL_GPIO_WritePin>
}
 8002978:	46c0      	nop			@ (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	20000028 	.word	0x20000028

08002984 <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 800298a:	4b1c      	ldr	r3, [pc, #112]	@ (80029fc <dispFailure+0x78>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	0018      	movs	r0, r3
 8002990:	f005 fd62 	bl	8008458 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8002994:	4b19      	ldr	r3, [pc, #100]	@ (80029fc <dispFailure+0x78>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	0018      	movs	r0, r3
 800299a:	f005 fd11 	bl	80083c0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 800299e:	4b17      	ldr	r3, [pc, #92]	@ (80029fc <dispFailure+0x78>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a6:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80029a8:	1cfb      	adds	r3, r7, #3
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 80029ae:	4b13      	ldr	r3, [pc, #76]	@ (80029fc <dispFailure+0x78>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	4a11      	ldr	r2, [pc, #68]	@ (8002a00 <dispFailure+0x7c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d9f6      	bls.n	80029ae <dispFailure+0x2a>

			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 80029c0:	4b10      	ldr	r3, [pc, #64]	@ (8002a04 <dispFailure+0x80>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2280      	movs	r2, #128	@ 0x80
 80029c6:	0152      	lsls	r2, r2, #5
 80029c8:	0011      	movs	r1, r2
 80029ca:	0018      	movs	r0, r3
 80029cc:	f001 fcac 	bl	8004328 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80029d0:	4b0a      	ldr	r3, [pc, #40]	@ (80029fc <dispFailure+0x78>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d8:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80029da:	1cfb      	adds	r3, r7, #3
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	1e5a      	subs	r2, r3, #1
 80029e0:	4193      	sbcs	r3, r2
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2201      	movs	r2, #1
 80029e6:	4053      	eors	r3, r2
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	001a      	movs	r2, r3
 80029ec:	1cfb      	adds	r3, r7, #3
 80029ee:	701a      	strb	r2, [r3, #0]
 80029f0:	781a      	ldrb	r2, [r3, #0]
 80029f2:	2101      	movs	r1, #1
 80029f4:	400a      	ands	r2, r1
 80029f6:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 80029f8:	e7d9      	b.n	80029ae <dispFailure+0x2a>
 80029fa:	46c0      	nop			@ (mov r8, r8)
 80029fc:	2000006c 	.word	0x2000006c
 8002a00:	00003ffe 	.word	0x00003ffe
 8002a04:	20000028 	.word	0x20000028

08002a08 <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a48 <updateRTCBackupReg+0x40>)
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	4b0e      	ldr	r3, [pc, #56]	@ (8002a4c <updateRTCBackupReg+0x44>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	001a      	movs	r2, r3
 8002a16:	4b0e      	ldr	r3, [pc, #56]	@ (8002a50 <updateRTCBackupReg+0x48>)
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f004 fd21 	bl	8007460 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a54 <updateRTCBackupReg+0x4c>)
 8002a20:	6819      	ldr	r1, [r3, #0]
 8002a22:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <updateRTCBackupReg+0x44>)
 8002a24:	785b      	ldrb	r3, [r3, #1]
 8002a26:	001a      	movs	r2, r3
 8002a28:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <updateRTCBackupReg+0x48>)
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f004 fd18 	bl	8007460 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8002a30:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <updateRTCBackupReg+0x50>)
 8002a32:	6819      	ldr	r1, [r3, #0]
 8002a34:	4b05      	ldr	r3, [pc, #20]	@ (8002a4c <updateRTCBackupReg+0x44>)
 8002a36:	78db      	ldrb	r3, [r3, #3]
 8002a38:	001a      	movs	r2, r3
 8002a3a:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <updateRTCBackupReg+0x48>)
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f004 fd0f 	bl	8007460 <HAL_RTCEx_BKUPWrite>

}
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	200000e8 	.word	0x200000e8
 8002a4c:	200000d4 	.word	0x200000d4
 8002a50:	200001dc 	.word	0x200001dc
 8002a54:	20000034 	.word	0x20000034
 8002a58:	20000038 	.word	0x20000038

08002a5c <conv2Mil>:

/*
 * Converts the time in an AM/PM RTC time to 24-hour time
 * Returns this time in an RTC Time Def object
 */
RTC_TimeTypeDef conv2Mil(RTC_TimeTypeDef *oldTime) {
 8002a5c:	b5b0      	push	{r4, r5, r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]

	RTC_TimeTypeDef convertedTime = *oldTime;
 8002a66:	250c      	movs	r5, #12
 8002a68:	197b      	adds	r3, r7, r5
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a6e:	c313      	stmia	r3!, {r0, r1, r4}
 8002a70:	ca03      	ldmia	r2!, {r0, r1}
 8002a72:	c303      	stmia	r3!, {r0, r1}

	// If we are in PM, increment hours by 12 (but not if it is 12 p.m.)
	if(oldTime->TimeFormat == RTC_HOURFORMAT12_PM && oldTime->Hours != 12) {
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	78db      	ldrb	r3, [r3, #3]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d10a      	bne.n	8002a92 <conv2Mil+0x36>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b0c      	cmp	r3, #12
 8002a82:	d006      	beq.n	8002a92 <conv2Mil+0x36>
		convertedTime.Hours += 12;
 8002a84:	197b      	adds	r3, r7, r5
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	330c      	adds	r3, #12
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	197b      	adds	r3, r7, r5
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e00b      	b.n	8002aaa <conv2Mil+0x4e>
	}
	// If we are in AM and the hours are 12, set hours to 0.
	else if(oldTime->TimeFormat == RTC_HOURFORMAT12_AM && oldTime->Hours == 12) {
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	78db      	ldrb	r3, [r3, #3]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d107      	bne.n	8002aaa <conv2Mil+0x4e>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b0c      	cmp	r3, #12
 8002aa0:	d103      	bne.n	8002aaa <conv2Mil+0x4e>
		convertedTime.Hours = 0;
 8002aa2:	230c      	movs	r3, #12
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
	else { // No change

	}

	// Make the update and display time function think that it is AM always
	convertedTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002aaa:	210c      	movs	r1, #12
 8002aac:	187b      	adds	r3, r7, r1
 8002aae:	2200      	movs	r2, #0
 8002ab0:	70da      	strb	r2, [r3, #3]

	return convertedTime;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	187a      	adds	r2, r7, r1
 8002ab6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ab8:	c313      	stmia	r3!, {r0, r1, r4}
 8002aba:	ca03      	ldmia	r2!, {r0, r1}
 8002abc:	c303      	stmia	r3!, {r0, r1}

}
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b008      	add	sp, #32
 8002ac4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002ac8 <startAudioStream>:

/*
 * Begins DMA streams to pull data from memory, process data, and push to i2s amplifier.
 */
void startAudioStream(void) {
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8002ace:	1dfb      	adds	r3, r7, #7
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]

	// Enable Amplifier
	NAU8315YG_AmpEnable(&i2sAmp);
 8002ad4:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <startAudioStream+0x30>)
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f7fd ff68 	bl	80009ac <NAU8315YG_AmpEnable>
//	}
//
//	__NOP();

	// Start TX DMA stream
	halRet = HAL_I2S_Transmit_DMA(&hi2s1, i2sTxBuff, BUFFER_SIZE);
 8002adc:	1dfc      	adds	r4, r7, #7
 8002ade:	2380      	movs	r3, #128	@ 0x80
 8002ae0:	009a      	lsls	r2, r3, #2
 8002ae2:	4906      	ldr	r1, [pc, #24]	@ (8002afc <startAudioStream+0x34>)
 8002ae4:	4b06      	ldr	r3, [pc, #24]	@ (8002b00 <startAudioStream+0x38>)
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f002 fb9e 	bl	8005228 <HAL_I2S_Transmit_DMA>
 8002aec:	0003      	movs	r3, r0
 8002aee:	7023      	strb	r3, [r4, #0]

}
 8002af0:	46c0      	nop			@ (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b003      	add	sp, #12
 8002af6:	bd90      	pop	{r4, r7, pc}
 8002af8:	20000448 	.word	0x20000448
 8002afc:	20000858 	.word	0x20000858
 8002b00:	20000144 	.word	0x20000144

08002b04 <stopAudioStream>:

/*
 * Halts DMA streams
 */
void stopAudioStream(void) {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0

	// Disable Amplifier
	NAU8315YG_AmpDisable(&i2sAmp);
 8002b08:	4b05      	ldr	r3, [pc, #20]	@ (8002b20 <stopAudioStream+0x1c>)
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f7fd ff62 	bl	80009d4 <NAU8315YG_AmpDisable>

	// Stop DMA Stream
	HAL_I2S_DMAStop(&hi2s1);
 8002b10:	4b04      	ldr	r3, [pc, #16]	@ (8002b24 <stopAudioStream+0x20>)
 8002b12:	0018      	movs	r0, r3
 8002b14:	f002 fc34 	bl	8005380 <HAL_I2S_DMAStop>

}
 8002b18:	46c0      	nop			@ (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	20000448 	.word	0x20000448
 8002b24:	20000144 	.word	0x20000144

08002b28 <HAL_I2S_TxHalfCpltCallback>:

/*
 * DMA completion callbacks
 */

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

	W25Q_readData(&spiFlash, flashReadAddr, BUFFER_SIZE, spiRxBuff1);
 8002b30:	4b22      	ldr	r3, [pc, #136]	@ (8002bbc <HAL_I2S_TxHalfCpltCallback+0x94>)
 8002b32:	6819      	ldr	r1, [r3, #0]
 8002b34:	4b22      	ldr	r3, [pc, #136]	@ (8002bc0 <HAL_I2S_TxHalfCpltCallback+0x98>)
 8002b36:	2280      	movs	r2, #128	@ 0x80
 8002b38:	0092      	lsls	r2, r2, #2
 8002b3a:	4822      	ldr	r0, [pc, #136]	@ (8002bc4 <HAL_I2S_TxHalfCpltCallback+0x9c>)
 8002b3c:	f7fe fbb4 	bl	80012a8 <W25Q_readData>
//	spiRxPtr = &spiRxBuff2[0];
	flashReadAddr += BUFFER_SIZE;
 8002b40:	4b1e      	ldr	r3, [pc, #120]	@ (8002bbc <HAL_I2S_TxHalfCpltCallback+0x94>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2280      	movs	r2, #128	@ 0x80
 8002b46:	0092      	lsls	r2, r2, #2
 8002b48:	189a      	adds	r2, r3, r2
 8002b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bbc <HAL_I2S_TxHalfCpltCallback+0x94>)
 8002b4c:	601a      	str	r2, [r3, #0]

	for(uint16_t i = 0; i < BUFFER_SIZE; i += 2) {
 8002b4e:	230e      	movs	r3, #14
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	2200      	movs	r2, #0
 8002b54:	801a      	strh	r2, [r3, #0]
 8002b56:	e01c      	b.n	8002b92 <HAL_I2S_TxHalfCpltCallback+0x6a>

		i2sTxBuff[(i/2)] = (spiRxBuff1[i + 1] << 8) | spiRxBuff1[i];
 8002b58:	200e      	movs	r0, #14
 8002b5a:	183b      	adds	r3, r7, r0
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	4a17      	ldr	r2, [pc, #92]	@ (8002bc0 <HAL_I2S_TxHalfCpltCallback+0x98>)
 8002b62:	5cd3      	ldrb	r3, [r2, r3]
 8002b64:	021b      	lsls	r3, r3, #8
 8002b66:	b21a      	sxth	r2, r3
 8002b68:	183b      	adds	r3, r7, r0
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	4914      	ldr	r1, [pc, #80]	@ (8002bc0 <HAL_I2S_TxHalfCpltCallback+0x98>)
 8002b6e:	5ccb      	ldrb	r3, [r1, r3]
 8002b70:	b21b      	sxth	r3, r3
 8002b72:	4313      	orrs	r3, r2
 8002b74:	b219      	sxth	r1, r3
 8002b76:	183b      	adds	r3, r7, r0
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	001a      	movs	r2, r3
 8002b80:	b289      	uxth	r1, r1
 8002b82:	4b11      	ldr	r3, [pc, #68]	@ (8002bc8 <HAL_I2S_TxHalfCpltCallback+0xa0>)
 8002b84:	0052      	lsls	r2, r2, #1
 8002b86:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < BUFFER_SIZE; i += 2) {
 8002b88:	183b      	adds	r3, r7, r0
 8002b8a:	183a      	adds	r2, r7, r0
 8002b8c:	8812      	ldrh	r2, [r2, #0]
 8002b8e:	3202      	adds	r2, #2
 8002b90:	801a      	strh	r2, [r3, #0]
 8002b92:	230e      	movs	r3, #14
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	881a      	ldrh	r2, [r3, #0]
 8002b98:	2380      	movs	r3, #128	@ 0x80
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d3db      	bcc.n	8002b58 <HAL_I2S_TxHalfCpltCallback+0x30>

	}

	// If we have reached the end of the audio clip,
	if(flashReadAddr > audioAddr_END) {
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <HAL_I2S_TxHalfCpltCallback+0x94>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a09      	ldr	r2, [pc, #36]	@ (8002bcc <HAL_I2S_TxHalfCpltCallback+0xa4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d902      	bls.n	8002bb0 <HAL_I2S_TxHalfCpltCallback+0x88>
		flashReadAddr = initialMemoryOffset;
 8002baa:	4b04      	ldr	r3, [pc, #16]	@ (8002bbc <HAL_I2S_TxHalfCpltCallback+0x94>)
 8002bac:	222c      	movs	r2, #44	@ 0x2c
 8002bae:	601a      	str	r2, [r3, #0]
	}

	__NOP();
 8002bb0:	46c0      	nop			@ (mov r8, r8)

}
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b004      	add	sp, #16
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			@ (mov r8, r8)
 8002bbc:	20000074 	.word	0x20000074
 8002bc0:	20000458 	.word	0x20000458
 8002bc4:	20000420 	.word	0x20000420
 8002bc8:	20000858 	.word	0x20000858
 8002bcc:	0008139e 	.word	0x0008139e

08002bd0 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

	W25Q_readData(&spiFlash, flashReadAddr, BUFFER_SIZE, spiRxBuff2);
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c54 <HAL_I2S_TxCpltCallback+0x84>)
 8002bda:	6819      	ldr	r1, [r3, #0]
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8002c58 <HAL_I2S_TxCpltCallback+0x88>)
 8002bde:	2280      	movs	r2, #128	@ 0x80
 8002be0:	0092      	lsls	r2, r2, #2
 8002be2:	481e      	ldr	r0, [pc, #120]	@ (8002c5c <HAL_I2S_TxCpltCallback+0x8c>)
 8002be4:	f7fe fb60 	bl	80012a8 <W25Q_readData>
//	spiRxPtr = &spiRxBuff1[0];
	flashReadAddr += BUFFER_SIZE;
 8002be8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c54 <HAL_I2S_TxCpltCallback+0x84>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2280      	movs	r2, #128	@ 0x80
 8002bee:	0092      	lsls	r2, r2, #2
 8002bf0:	189a      	adds	r2, r3, r2
 8002bf2:	4b18      	ldr	r3, [pc, #96]	@ (8002c54 <HAL_I2S_TxCpltCallback+0x84>)
 8002bf4:	601a      	str	r2, [r3, #0]

	for(uint16_t i = 0; i < BUFFER_SIZE; i += 2) {
 8002bf6:	230e      	movs	r3, #14
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	801a      	strh	r2, [r3, #0]
 8002bfe:	e01d      	b.n	8002c3c <HAL_I2S_TxCpltCallback+0x6c>

		i2sTxBuff[(BUFFER_SIZE / 2) + (i/2)] = (spiRxBuff2[i + 1] << 8) | spiRxBuff2[i];
 8002c00:	200e      	movs	r0, #14
 8002c02:	183b      	adds	r3, r7, r0
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	4a13      	ldr	r2, [pc, #76]	@ (8002c58 <HAL_I2S_TxCpltCallback+0x88>)
 8002c0a:	5cd3      	ldrb	r3, [r2, r3]
 8002c0c:	021b      	lsls	r3, r3, #8
 8002c0e:	b21a      	sxth	r2, r3
 8002c10:	183b      	adds	r3, r7, r0
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	4910      	ldr	r1, [pc, #64]	@ (8002c58 <HAL_I2S_TxCpltCallback+0x88>)
 8002c16:	5ccb      	ldrb	r3, [r1, r3]
 8002c18:	b21b      	sxth	r3, r3
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	b219      	sxth	r1, r3
 8002c1e:	183b      	adds	r3, r7, r0
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	085b      	lsrs	r3, r3, #1
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	32ff      	adds	r2, #255	@ 0xff
 8002c2a:	b289      	uxth	r1, r1
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <HAL_I2S_TxCpltCallback+0x90>)
 8002c2e:	0052      	lsls	r2, r2, #1
 8002c30:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < BUFFER_SIZE; i += 2) {
 8002c32:	183b      	adds	r3, r7, r0
 8002c34:	183a      	adds	r2, r7, r0
 8002c36:	8812      	ldrh	r2, [r2, #0]
 8002c38:	3202      	adds	r2, #2
 8002c3a:	801a      	strh	r2, [r3, #0]
 8002c3c:	230e      	movs	r3, #14
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	881a      	ldrh	r2, [r3, #0]
 8002c42:	2380      	movs	r3, #128	@ 0x80
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d3da      	bcc.n	8002c00 <HAL_I2S_TxCpltCallback+0x30>

	}

}
 8002c4a:	46c0      	nop			@ (mov r8, r8)
 8002c4c:	46c0      	nop			@ (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b004      	add	sp, #16
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000074 	.word	0x20000074
 8002c58:	20000658 	.word	0x20000658
 8002c5c:	20000420 	.word	0x20000420
 8002c60:	20000858 	.word	0x20000858

08002c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c68:	b672      	cpsid	i
}
 8002c6a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c6c:	46c0      	nop			@ (mov r8, r8)
 8002c6e:	e7fd      	b.n	8002c6c <Error_Handler+0x8>

08002c70 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8002c70:	b5b0      	push	{r4, r5, r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	0005      	movs	r5, r0
 8002c78:	000c      	movs	r4, r1
 8002c7a:	0010      	movs	r0, r2
 8002c7c:	0019      	movs	r1, r3
 8002c7e:	1dbb      	adds	r3, r7, #6
 8002c80:	1c2a      	adds	r2, r5, #0
 8002c82:	801a      	strh	r2, [r3, #0]
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	1c22      	adds	r2, r4, #0
 8002c88:	801a      	strh	r2, [r3, #0]
 8002c8a:	1cbb      	adds	r3, r7, #2
 8002c8c:	1c02      	adds	r2, r0, #0
 8002c8e:	801a      	strh	r2, [r3, #0]
 8002c90:	003b      	movs	r3, r7
 8002c92:	1c0a      	adds	r2, r1, #0
 8002c94:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8002c96:	4b7c      	ldr	r3, [pc, #496]	@ (8002e88 <sevSeg_Init+0x218>)
 8002c98:	1dba      	adds	r2, r7, #6
 8002c9a:	8812      	ldrh	r2, [r2, #0]
 8002c9c:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8002c9e:	4b7b      	ldr	r3, [pc, #492]	@ (8002e8c <sevSeg_Init+0x21c>)
 8002ca0:	1d3a      	adds	r2, r7, #4
 8002ca2:	8812      	ldrh	r2, [r2, #0]
 8002ca4:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8002ca6:	4b7a      	ldr	r3, [pc, #488]	@ (8002e90 <sevSeg_Init+0x220>)
 8002ca8:	1cba      	adds	r2, r7, #2
 8002caa:	8812      	ldrh	r2, [r2, #0]
 8002cac:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8002cae:	4b79      	ldr	r3, [pc, #484]	@ (8002e94 <sevSeg_Init+0x224>)
 8002cb0:	003a      	movs	r2, r7
 8002cb2:	8812      	ldrh	r2, [r2, #0]
 8002cb4:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8002cb6:	4a78      	ldr	r2, [pc, #480]	@ (8002e98 <sevSeg_Init+0x228>)
 8002cb8:	2330      	movs	r3, #48	@ 0x30
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8002cc0:	4a76      	ldr	r2, [pc, #472]	@ (8002e9c <sevSeg_Init+0x22c>)
 8002cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cc4:	0010      	movs	r0, r2
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	234c      	movs	r3, #76	@ 0x4c
 8002cca:	001a      	movs	r2, r3
 8002ccc:	f006 fbba 	bl	8009444 <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8002cd0:	4b73      	ldr	r3, [pc, #460]	@ (8002ea0 <sevSeg_Init+0x230>)
 8002cd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cd4:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	e00b      	b.n	8002cf4 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ce2:	18d3      	adds	r3, r2, r3
 8002ce4:	6819      	ldr	r1, [r3, #0]
 8002ce6:	4b6f      	ldr	r3, [pc, #444]	@ (8002ea4 <sevSeg_Init+0x234>)
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	0092      	lsls	r2, r2, #2
 8002cec:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	61fb      	str	r3, [r7, #28]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	ddf0      	ble.n	8002cdc <sevSeg_Init+0x6c>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8002cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8002ea4 <sevSeg_Init+0x234>)
 8002cfc:	6918      	ldr	r0, [r3, #16]
 8002cfe:	4b66      	ldr	r3, [pc, #408]	@ (8002e98 <sevSeg_Init+0x228>)
 8002d00:	8819      	ldrh	r1, [r3, #0]
 8002d02:	4b69      	ldr	r3, [pc, #420]	@ (8002ea8 <sevSeg_Init+0x238>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	001a      	movs	r2, r3
 8002d08:	f001 faf1 	bl	80042ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8002d0c:	4b65      	ldr	r3, [pc, #404]	@ (8002ea4 <sevSeg_Init+0x234>)
 8002d0e:	6918      	ldr	r0, [r3, #16]
 8002d10:	4b61      	ldr	r3, [pc, #388]	@ (8002e98 <sevSeg_Init+0x228>)
 8002d12:	8819      	ldrh	r1, [r3, #0]
 8002d14:	4b64      	ldr	r3, [pc, #400]	@ (8002ea8 <sevSeg_Init+0x238>)
 8002d16:	785b      	ldrb	r3, [r3, #1]
 8002d18:	001a      	movs	r2, r3
 8002d1a:	f001 fae8 	bl	80042ee <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002d1e:	4b61      	ldr	r3, [pc, #388]	@ (8002ea4 <sevSeg_Init+0x234>)
 8002d20:	6898      	ldr	r0, [r3, #8]
 8002d22:	4b5b      	ldr	r3, [pc, #364]	@ (8002e90 <sevSeg_Init+0x220>)
 8002d24:	8819      	ldrh	r1, [r3, #0]
 8002d26:	4b60      	ldr	r3, [pc, #384]	@ (8002ea8 <sevSeg_Init+0x238>)
 8002d28:	785b      	ldrb	r3, [r3, #1]
 8002d2a:	001a      	movs	r2, r3
 8002d2c:	f001 fadf 	bl	80042ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002d30:	4b5c      	ldr	r3, [pc, #368]	@ (8002ea4 <sevSeg_Init+0x234>)
 8002d32:	6898      	ldr	r0, [r3, #8]
 8002d34:	4b56      	ldr	r3, [pc, #344]	@ (8002e90 <sevSeg_Init+0x220>)
 8002d36:	8819      	ldrh	r1, [r3, #0]
 8002d38:	4b5b      	ldr	r3, [pc, #364]	@ (8002ea8 <sevSeg_Init+0x238>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	001a      	movs	r2, r3
 8002d3e:	f001 fad6 	bl	80042ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8002d42:	4b58      	ldr	r3, [pc, #352]	@ (8002ea4 <sevSeg_Init+0x234>)
 8002d44:	68d8      	ldr	r0, [r3, #12]
 8002d46:	4b53      	ldr	r3, [pc, #332]	@ (8002e94 <sevSeg_Init+0x224>)
 8002d48:	8819      	ldrh	r1, [r3, #0]
 8002d4a:	4b57      	ldr	r3, [pc, #348]	@ (8002ea8 <sevSeg_Init+0x238>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	001a      	movs	r2, r3
 8002d50:	f001 facd 	bl	80042ee <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(50);
 8002d54:	2032      	movs	r0, #50	@ 0x32
 8002d56:	f000 f95f 	bl	8003018 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	4a53      	ldr	r2, [pc, #332]	@ (8002eac <sevSeg_Init+0x23c>)
 8002d60:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	e038      	b.n	8002dda <sevSeg_Init+0x16a>

		sendByte = hofSymb[i];
 8002d68:	231b      	movs	r3, #27
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	18b9      	adds	r1, r7, r2
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	188a      	adds	r2, r1, r2
 8002d74:	7812      	ldrb	r2, [r2, #0]
 8002d76:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	e027      	b.n	8002dce <sevSeg_Init+0x15e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8002d7e:	4b49      	ldr	r3, [pc, #292]	@ (8002ea4 <sevSeg_Init+0x234>)
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	4b41      	ldr	r3, [pc, #260]	@ (8002e88 <sevSeg_Init+0x218>)
 8002d84:	8819      	ldrh	r1, [r3, #0]
 8002d86:	241b      	movs	r4, #27
 8002d88:	193b      	adds	r3, r7, r4
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4013      	ands	r3, r2
 8002d90:	4a45      	ldr	r2, [pc, #276]	@ (8002ea8 <sevSeg_Init+0x238>)
 8002d92:	5cd3      	ldrb	r3, [r2, r3]
 8002d94:	001a      	movs	r2, r3
 8002d96:	f001 faaa 	bl	80042ee <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8002d9a:	4b42      	ldr	r3, [pc, #264]	@ (8002ea4 <sevSeg_Init+0x234>)
 8002d9c:	6858      	ldr	r0, [r3, #4]
 8002d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e8c <sevSeg_Init+0x21c>)
 8002da0:	8819      	ldrh	r1, [r3, #0]
 8002da2:	4b41      	ldr	r3, [pc, #260]	@ (8002ea8 <sevSeg_Init+0x238>)
 8002da4:	785b      	ldrb	r3, [r3, #1]
 8002da6:	001a      	movs	r2, r3
 8002da8:	f001 faa1 	bl	80042ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8002dac:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea4 <sevSeg_Init+0x234>)
 8002dae:	6858      	ldr	r0, [r3, #4]
 8002db0:	4b36      	ldr	r3, [pc, #216]	@ (8002e8c <sevSeg_Init+0x21c>)
 8002db2:	8819      	ldrh	r1, [r3, #0]
 8002db4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea8 <sevSeg_Init+0x238>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	001a      	movs	r2, r3
 8002dba:	f001 fa98 	bl	80042ee <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8002dbe:	193b      	adds	r3, r7, r4
 8002dc0:	193a      	adds	r2, r7, r4
 8002dc2:	7812      	ldrb	r2, [r2, #0]
 8002dc4:	0852      	lsrs	r2, r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2b07      	cmp	r3, #7
 8002dd2:	ddd4      	ble.n	8002d7e <sevSeg_Init+0x10e>
	for(int i = 0; i <= 3; i++) {
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	ddc3      	ble.n	8002d68 <sevSeg_Init+0xf8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002de0:	4b30      	ldr	r3, [pc, #192]	@ (8002ea4 <sevSeg_Init+0x234>)
 8002de2:	6898      	ldr	r0, [r3, #8]
 8002de4:	4b2a      	ldr	r3, [pc, #168]	@ (8002e90 <sevSeg_Init+0x220>)
 8002de6:	8819      	ldrh	r1, [r3, #0]
 8002de8:	4b2f      	ldr	r3, [pc, #188]	@ (8002ea8 <sevSeg_Init+0x238>)
 8002dea:	785b      	ldrb	r3, [r3, #1]
 8002dec:	001a      	movs	r2, r3
 8002dee:	f001 fa7e 	bl	80042ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002df2:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea4 <sevSeg_Init+0x234>)
 8002df4:	6898      	ldr	r0, [r3, #8]
 8002df6:	4b26      	ldr	r3, [pc, #152]	@ (8002e90 <sevSeg_Init+0x220>)
 8002df8:	8819      	ldrh	r1, [r3, #0]
 8002dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8002ea8 <sevSeg_Init+0x238>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	001a      	movs	r2, r3
 8002e00:	f001 fa75 	bl	80042ee <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8002e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e06:	0018      	movs	r0, r3
 8002e08:	f005 fb26 	bl	8008458 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8002e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f005 fad6 	bl	80083c0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8002e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1a:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8002e1c:	46c0      	nop			@ (mov r8, r8)
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	1ad2      	subs	r2, r2, r3
 8002e28:	2380      	movs	r3, #128	@ 0x80
 8002e2a:	01db      	lsls	r3, r3, #7
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d3f6      	bcc.n	8002e1e <sevSeg_Init+0x1ae>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8002e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e32:	0018      	movs	r0, r3
 8002e34:	f005 fb10 	bl	8008458 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8002e38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea4 <sevSeg_Init+0x234>)
 8002e3a:	6918      	ldr	r0, [r3, #16]
 8002e3c:	4b16      	ldr	r3, [pc, #88]	@ (8002e98 <sevSeg_Init+0x228>)
 8002e3e:	8819      	ldrh	r1, [r3, #0]
 8002e40:	4b19      	ldr	r3, [pc, #100]	@ (8002ea8 <sevSeg_Init+0x238>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	001a      	movs	r2, r3
 8002e46:	f001 fa52 	bl	80042ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8002e4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ea4 <sevSeg_Init+0x234>)
 8002e4c:	6918      	ldr	r0, [r3, #16]
 8002e4e:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <sevSeg_Init+0x228>)
 8002e50:	8819      	ldrh	r1, [r3, #0]
 8002e52:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <sevSeg_Init+0x238>)
 8002e54:	785b      	ldrb	r3, [r3, #1]
 8002e56:	001a      	movs	r2, r3
 8002e58:	f001 fa49 	bl	80042ee <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002e5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ea4 <sevSeg_Init+0x234>)
 8002e5e:	6898      	ldr	r0, [r3, #8]
 8002e60:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <sevSeg_Init+0x220>)
 8002e62:	8819      	ldrh	r1, [r3, #0]
 8002e64:	4b10      	ldr	r3, [pc, #64]	@ (8002ea8 <sevSeg_Init+0x238>)
 8002e66:	785b      	ldrb	r3, [r3, #1]
 8002e68:	001a      	movs	r2, r3
 8002e6a:	f001 fa40 	bl	80042ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea4 <sevSeg_Init+0x234>)
 8002e70:	6898      	ldr	r0, [r3, #8]
 8002e72:	4b07      	ldr	r3, [pc, #28]	@ (8002e90 <sevSeg_Init+0x220>)
 8002e74:	8819      	ldrh	r1, [r3, #0]
 8002e76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea8 <sevSeg_Init+0x238>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	001a      	movs	r2, r3
 8002e7c:	f001 fa37 	bl	80042ee <HAL_GPIO_WritePin>

}
 8002e80:	46c0      	nop			@ (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b008      	add	sp, #32
 8002e86:	bdb0      	pop	{r4, r5, r7, pc}
 8002e88:	20000c58 	.word	0x20000c58
 8002e8c:	20000c5a 	.word	0x20000c5a
 8002e90:	20000c5c 	.word	0x20000c5c
 8002e94:	20000c5e 	.word	0x20000c5e
 8002e98:	20000c60 	.word	0x20000c60
 8002e9c:	20000c64 	.word	0x20000c64
 8002ea0:	20000cb0 	.word	0x20000cb0
 8002ea4:	20000078 	.word	0x20000078
 8002ea8:	2000008c 	.word	0x2000008c
 8002eac:	471d3700 	.word	0x471d3700

08002eb0 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime, uint8_t userAlarmEnable) {
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	000a      	movs	r2, r1
 8002eba:	1cfb      	adds	r3, r7, #3
 8002ebc:	701a      	strb	r2, [r3, #0]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	210a      	movs	r1, #10
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f7fd f91d 	bl	8000104 <__udivsi3>
 8002eca:	0003      	movs	r3, r0
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	2408      	movs	r4, #8
 8002ed0:	193b      	adds	r3, r7, r4
 8002ed2:	701a      	strb	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	210a      	movs	r1, #10
 8002eda:	0018      	movs	r0, r3
 8002edc:	f7fd f998 	bl	8000210 <__aeabi_uidivmod>
 8002ee0:	000b      	movs	r3, r1
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	193b      	adds	r3, r7, r4
 8002ee6:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002eec:	210a      	movs	r1, #10
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f7fd f908 	bl	8000104 <__udivsi3>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	193b      	adds	r3, r7, r4
 8002efa:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002f00:	210a      	movs	r1, #10
 8002f02:	0018      	movs	r0, r3
 8002f04:	f7fd f984 	bl	8000210 <__aeabi_uidivmod>
 8002f08:	000b      	movs	r3, r1
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	193b      	adds	r3, r7, r4
 8002f0e:	70da      	strb	r2, [r3, #3]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 3; i >= 0; i--) {
 8002f10:	2303      	movs	r3, #3
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	e05b      	b.n	8002fce <sevSeg_updateDigits+0x11e>

		sendByte = dispDigits[sendTime[i]];
 8002f16:	2308      	movs	r3, #8
 8002f18:	18fa      	adds	r2, r7, r3
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	18d3      	adds	r3, r2, r3
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	0019      	movs	r1, r3
 8002f22:	2017      	movs	r0, #23
 8002f24:	183b      	adds	r3, r7, r0
 8002f26:	4a36      	ldr	r2, [pc, #216]	@ (8003000 <sevSeg_updateDigits+0x150>)
 8002f28:	5c52      	ldrb	r2, [r2, r1]
 8002f2a:	701a      	strb	r2, [r3, #0]

		// If tenth's place of hour and zero, disable this segment
		if( (i == 0) && (sendByte == dispDigits[0])) {
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d107      	bne.n	8002f42 <sevSeg_updateDigits+0x92>
 8002f32:	2242      	movs	r2, #66	@ 0x42
 8002f34:	183b      	adds	r3, r7, r0
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d102      	bne.n	8002f42 <sevSeg_updateDigits+0x92>
			sendByte = 0xFF;
 8002f3c:	183b      	adds	r3, r7, r0
 8002f3e:	22ff      	movs	r2, #255	@ 0xff
 8002f40:	701a      	strb	r2, [r3, #0]
		}

		// If one's place of hour, set decimal point based on AM/PM.
		// OR
		// If one's place of minute, set decimal place based on user alarm enabled
		if( ((i == 1) && (updateTime->TimeFormat == RTC_HOURFORMAT12_PM)) ||
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d103      	bne.n	8002f50 <sevSeg_updateDigits+0xa0>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	78db      	ldrb	r3, [r3, #3]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d006      	beq.n	8002f5e <sevSeg_updateDigits+0xae>
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d10a      	bne.n	8002f6c <sevSeg_updateDigits+0xbc>
			((i == 3) && userAlarmEnable)	) {
 8002f56:	1cfb      	adds	r3, r7, #3
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d006      	beq.n	8002f6c <sevSeg_updateDigits+0xbc>
			sendByte = (sendByte & 0b11111101);
 8002f5e:	2217      	movs	r2, #23
 8002f60:	18bb      	adds	r3, r7, r2
 8002f62:	18ba      	adds	r2, r7, r2
 8002f64:	7812      	ldrb	r2, [r2, #0]
 8002f66:	2102      	movs	r1, #2
 8002f68:	438a      	bics	r2, r1
 8002f6a:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	e027      	b.n	8002fc2 <sevSeg_updateDigits+0x112>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[(sendByte & 1)]);
 8002f72:	4b24      	ldr	r3, [pc, #144]	@ (8003004 <sevSeg_updateDigits+0x154>)
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	4b24      	ldr	r3, [pc, #144]	@ (8003008 <sevSeg_updateDigits+0x158>)
 8002f78:	8819      	ldrh	r1, [r3, #0]
 8002f7a:	2417      	movs	r4, #23
 8002f7c:	193b      	adds	r3, r7, r4
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2201      	movs	r2, #1
 8002f82:	4013      	ands	r3, r2
 8002f84:	4a21      	ldr	r2, [pc, #132]	@ (800300c <sevSeg_updateDigits+0x15c>)
 8002f86:	5cd3      	ldrb	r3, [r2, r3]
 8002f88:	001a      	movs	r2, r3
 8002f8a:	f001 f9b0 	bl	80042ee <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8002f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003004 <sevSeg_updateDigits+0x154>)
 8002f90:	6858      	ldr	r0, [r3, #4]
 8002f92:	4b1f      	ldr	r3, [pc, #124]	@ (8003010 <sevSeg_updateDigits+0x160>)
 8002f94:	8819      	ldrh	r1, [r3, #0]
 8002f96:	4b1d      	ldr	r3, [pc, #116]	@ (800300c <sevSeg_updateDigits+0x15c>)
 8002f98:	785b      	ldrb	r3, [r3, #1]
 8002f9a:	001a      	movs	r2, r3
 8002f9c:	f001 f9a7 	bl	80042ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8002fa0:	4b18      	ldr	r3, [pc, #96]	@ (8003004 <sevSeg_updateDigits+0x154>)
 8002fa2:	6858      	ldr	r0, [r3, #4]
 8002fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8003010 <sevSeg_updateDigits+0x160>)
 8002fa6:	8819      	ldrh	r1, [r3, #0]
 8002fa8:	4b18      	ldr	r3, [pc, #96]	@ (800300c <sevSeg_updateDigits+0x15c>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	001a      	movs	r2, r3
 8002fae:	f001 f99e 	bl	80042ee <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8002fb2:	193b      	adds	r3, r7, r4
 8002fb4:	193a      	adds	r2, r7, r4
 8002fb6:	7812      	ldrb	r2, [r2, #0]
 8002fb8:	0852      	lsrs	r2, r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b07      	cmp	r3, #7
 8002fc6:	ddd4      	ble.n	8002f72 <sevSeg_updateDigits+0xc2>
	for(int i = 3; i >= 0; i--) {
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	daa0      	bge.n	8002f16 <sevSeg_updateDigits+0x66>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003004 <sevSeg_updateDigits+0x154>)
 8002fd6:	6898      	ldr	r0, [r3, #8]
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003014 <sevSeg_updateDigits+0x164>)
 8002fda:	8819      	ldrh	r1, [r3, #0]
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <sevSeg_updateDigits+0x15c>)
 8002fde:	785b      	ldrb	r3, [r3, #1]
 8002fe0:	001a      	movs	r2, r3
 8002fe2:	f001 f984 	bl	80042ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002fe6:	4b07      	ldr	r3, [pc, #28]	@ (8003004 <sevSeg_updateDigits+0x154>)
 8002fe8:	6898      	ldr	r0, [r3, #8]
 8002fea:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <sevSeg_updateDigits+0x164>)
 8002fec:	8819      	ldrh	r1, [r3, #0]
 8002fee:	4b07      	ldr	r3, [pc, #28]	@ (800300c <sevSeg_updateDigits+0x15c>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	001a      	movs	r2, r3
 8002ff4:	f001 f97b 	bl	80042ee <HAL_GPIO_WritePin>

	return;
 8002ff8:	46c0      	nop			@ (mov r8, r8)

}
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b007      	add	sp, #28
 8002ffe:	bd90      	pop	{r4, r7, pc}
 8003000:	080094a4 	.word	0x080094a4
 8003004:	20000078 	.word	0x20000078
 8003008:	20000c58 	.word	0x20000c58
 800300c:	2000008c 	.word	0x2000008c
 8003010:	20000c5a 	.word	0x20000c5a
 8003014:	20000c5c 	.word	0x20000c5c

08003018 <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	0002      	movs	r2, r0
 8003020:	1dbb      	adds	r3, r7, #6
 8003022:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8003024:	4b20      	ldr	r3, [pc, #128]	@ (80030a8 <sevSeg_setIntensity+0x90>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <sevSeg_setIntensity+0x20>
 800302c:	4b1f      	ldr	r3, [pc, #124]	@ (80030ac <sevSeg_setIntensity+0x94>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	1dba      	adds	r2, r7, #6
 8003032:	8812      	ldrh	r2, [r2, #0]
 8003034:	635a      	str	r2, [r3, #52]	@ 0x34
 8003036:	e02c      	b.n	8003092 <sevSeg_setIntensity+0x7a>
 8003038:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <sevSeg_setIntensity+0x90>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d105      	bne.n	800304c <sevSeg_setIntensity+0x34>
 8003040:	4b1a      	ldr	r3, [pc, #104]	@ (80030ac <sevSeg_setIntensity+0x94>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	1dbb      	adds	r3, r7, #6
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	6393      	str	r3, [r2, #56]	@ 0x38
 800304a:	e022      	b.n	8003092 <sevSeg_setIntensity+0x7a>
 800304c:	4b16      	ldr	r3, [pc, #88]	@ (80030a8 <sevSeg_setIntensity+0x90>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b08      	cmp	r3, #8
 8003052:	d105      	bne.n	8003060 <sevSeg_setIntensity+0x48>
 8003054:	4b15      	ldr	r3, [pc, #84]	@ (80030ac <sevSeg_setIntensity+0x94>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	1dbb      	adds	r3, r7, #6
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800305e:	e018      	b.n	8003092 <sevSeg_setIntensity+0x7a>
 8003060:	4b11      	ldr	r3, [pc, #68]	@ (80030a8 <sevSeg_setIntensity+0x90>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b0c      	cmp	r3, #12
 8003066:	d105      	bne.n	8003074 <sevSeg_setIntensity+0x5c>
 8003068:	4b10      	ldr	r3, [pc, #64]	@ (80030ac <sevSeg_setIntensity+0x94>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	1dbb      	adds	r3, r7, #6
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	6413      	str	r3, [r2, #64]	@ 0x40
 8003072:	e00e      	b.n	8003092 <sevSeg_setIntensity+0x7a>
 8003074:	4b0c      	ldr	r3, [pc, #48]	@ (80030a8 <sevSeg_setIntensity+0x90>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b10      	cmp	r3, #16
 800307a:	d105      	bne.n	8003088 <sevSeg_setIntensity+0x70>
 800307c:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <sevSeg_setIntensity+0x94>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	1dbb      	adds	r3, r7, #6
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	6593      	str	r3, [r2, #88]	@ 0x58
 8003086:	e004      	b.n	8003092 <sevSeg_setIntensity+0x7a>
 8003088:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <sevSeg_setIntensity+0x94>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	1dbb      	adds	r3, r7, #6
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 8003092:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <sevSeg_setIntensity+0x90>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4b05      	ldr	r3, [pc, #20]	@ (80030ac <sevSeg_setIntensity+0x94>)
 8003098:	0011      	movs	r1, r2
 800309a:	0018      	movs	r0, r3
 800309c:	f005 fadc 	bl	8008658 <HAL_TIM_PWM_Start>

}
 80030a0:	46c0      	nop			@ (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20000cb0 	.word	0x20000cb0
 80030ac:	20000c64 	.word	0x20000c64

080030b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b6:	4b13      	ldr	r3, [pc, #76]	@ (8003104 <HAL_MspInit+0x54>)
 80030b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030ba:	4b12      	ldr	r3, [pc, #72]	@ (8003104 <HAL_MspInit+0x54>)
 80030bc:	2101      	movs	r1, #1
 80030be:	430a      	orrs	r2, r1
 80030c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80030c2:	4b10      	ldr	r3, [pc, #64]	@ (8003104 <HAL_MspInit+0x54>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	2201      	movs	r2, #1
 80030c8:	4013      	ands	r3, r2
 80030ca:	607b      	str	r3, [r7, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003104 <HAL_MspInit+0x54>)
 80030d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <HAL_MspInit+0x54>)
 80030d4:	2180      	movs	r1, #128	@ 0x80
 80030d6:	0549      	lsls	r1, r1, #21
 80030d8:	430a      	orrs	r2, r1
 80030da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030dc:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <HAL_MspInit+0x54>)
 80030de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030e0:	2380      	movs	r3, #128	@ 0x80
 80030e2:	055b      	lsls	r3, r3, #21
 80030e4:	4013      	ands	r3, r2
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80030ea:	2200      	movs	r2, #0
 80030ec:	2100      	movs	r1, #0
 80030ee:	2004      	movs	r0, #4
 80030f0:	f000 fc96 	bl	8003a20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80030f4:	2004      	movs	r0, #4
 80030f6:	f000 fca8 	bl	8003a4a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030fa:	46c0      	nop			@ (mov r8, r8)
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b002      	add	sp, #8
 8003100:	bd80      	pop	{r7, pc}
 8003102:	46c0      	nop			@ (mov r8, r8)
 8003104:	40021000 	.word	0x40021000

08003108 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b095      	sub	sp, #84	@ 0x54
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	233c      	movs	r3, #60	@ 0x3c
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	0018      	movs	r0, r3
 8003116:	2314      	movs	r3, #20
 8003118:	001a      	movs	r2, r3
 800311a:	2100      	movs	r1, #0
 800311c:	f006 f966 	bl	80093ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003120:	2414      	movs	r4, #20
 8003122:	193b      	adds	r3, r7, r4
 8003124:	0018      	movs	r0, r3
 8003126:	2328      	movs	r3, #40	@ 0x28
 8003128:	001a      	movs	r2, r3
 800312a:	2100      	movs	r1, #0
 800312c:	f006 f95e 	bl	80093ec <memset>
  if(hi2c->Instance==I2C1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a22      	ldr	r2, [pc, #136]	@ (80031c0 <HAL_I2C_MspInit+0xb8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d13d      	bne.n	80031b6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800313a:	193b      	adds	r3, r7, r4
 800313c:	2220      	movs	r2, #32
 800313e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003140:	193b      	adds	r3, r7, r4
 8003142:	2200      	movs	r2, #0
 8003144:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003146:	193b      	adds	r3, r7, r4
 8003148:	0018      	movs	r0, r3
 800314a:	f002 ff9b 	bl	8006084 <HAL_RCCEx_PeriphCLKConfig>
 800314e:	1e03      	subs	r3, r0, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003152:	f7ff fd87 	bl	8002c64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003156:	4b1b      	ldr	r3, [pc, #108]	@ (80031c4 <HAL_I2C_MspInit+0xbc>)
 8003158:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800315a:	4b1a      	ldr	r3, [pc, #104]	@ (80031c4 <HAL_I2C_MspInit+0xbc>)
 800315c:	2102      	movs	r1, #2
 800315e:	430a      	orrs	r2, r1
 8003160:	635a      	str	r2, [r3, #52]	@ 0x34
 8003162:	4b18      	ldr	r3, [pc, #96]	@ (80031c4 <HAL_I2C_MspInit+0xbc>)
 8003164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003166:	2202      	movs	r2, #2
 8003168:	4013      	ands	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800316e:	213c      	movs	r1, #60	@ 0x3c
 8003170:	187b      	adds	r3, r7, r1
 8003172:	22c0      	movs	r2, #192	@ 0xc0
 8003174:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003176:	187b      	adds	r3, r7, r1
 8003178:	2212      	movs	r2, #18
 800317a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	187b      	adds	r3, r7, r1
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003182:	187b      	adds	r3, r7, r1
 8003184:	2200      	movs	r2, #0
 8003186:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003188:	187b      	adds	r3, r7, r1
 800318a:	2206      	movs	r2, #6
 800318c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800318e:	187b      	adds	r3, r7, r1
 8003190:	4a0d      	ldr	r2, [pc, #52]	@ (80031c8 <HAL_I2C_MspInit+0xc0>)
 8003192:	0019      	movs	r1, r3
 8003194:	0010      	movs	r0, r2
 8003196:	f000 ff29 	bl	8003fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800319a:	4b0a      	ldr	r3, [pc, #40]	@ (80031c4 <HAL_I2C_MspInit+0xbc>)
 800319c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800319e:	4b09      	ldr	r3, [pc, #36]	@ (80031c4 <HAL_I2C_MspInit+0xbc>)
 80031a0:	2180      	movs	r1, #128	@ 0x80
 80031a2:	0389      	lsls	r1, r1, #14
 80031a4:	430a      	orrs	r2, r1
 80031a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80031a8:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <HAL_I2C_MspInit+0xbc>)
 80031aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031ac:	2380      	movs	r3, #128	@ 0x80
 80031ae:	039b      	lsls	r3, r3, #14
 80031b0:	4013      	ands	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b015      	add	sp, #84	@ 0x54
 80031bc:	bd90      	pop	{r4, r7, pc}
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	40005400 	.word	0x40005400
 80031c4:	40021000 	.word	0x40021000
 80031c8:	50000400 	.word	0x50000400

080031cc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b095      	sub	sp, #84	@ 0x54
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d4:	233c      	movs	r3, #60	@ 0x3c
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	0018      	movs	r0, r3
 80031da:	2314      	movs	r3, #20
 80031dc:	001a      	movs	r2, r3
 80031de:	2100      	movs	r1, #0
 80031e0:	f006 f904 	bl	80093ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031e4:	2414      	movs	r4, #20
 80031e6:	193b      	adds	r3, r7, r4
 80031e8:	0018      	movs	r0, r3
 80031ea:	2328      	movs	r3, #40	@ 0x28
 80031ec:	001a      	movs	r2, r3
 80031ee:	2100      	movs	r1, #0
 80031f0:	f006 f8fc 	bl	80093ec <memset>
  if(hi2s->Instance==SPI1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003324 <HAL_I2S_MspInit+0x158>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d000      	beq.n	8003200 <HAL_I2S_MspInit+0x34>
 80031fe:	e08d      	b.n	800331c <HAL_I2S_MspInit+0x150>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8003200:	193b      	adds	r3, r7, r4
 8003202:	2280      	movs	r2, #128	@ 0x80
 8003204:	0112      	lsls	r2, r2, #4
 8003206:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8003208:	193b      	adds	r3, r7, r4
 800320a:	2200      	movs	r2, #0
 800320c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800320e:	193b      	adds	r3, r7, r4
 8003210:	0018      	movs	r0, r3
 8003212:	f002 ff37 	bl	8006084 <HAL_RCCEx_PeriphCLKConfig>
 8003216:	1e03      	subs	r3, r0, #0
 8003218:	d001      	beq.n	800321e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800321a:	f7ff fd23 	bl	8002c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800321e:	4b42      	ldr	r3, [pc, #264]	@ (8003328 <HAL_I2S_MspInit+0x15c>)
 8003220:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003222:	4b41      	ldr	r3, [pc, #260]	@ (8003328 <HAL_I2S_MspInit+0x15c>)
 8003224:	2180      	movs	r1, #128	@ 0x80
 8003226:	0149      	lsls	r1, r1, #5
 8003228:	430a      	orrs	r2, r1
 800322a:	641a      	str	r2, [r3, #64]	@ 0x40
 800322c:	4b3e      	ldr	r3, [pc, #248]	@ (8003328 <HAL_I2S_MspInit+0x15c>)
 800322e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003230:	2380      	movs	r3, #128	@ 0x80
 8003232:	015b      	lsls	r3, r3, #5
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323a:	4b3b      	ldr	r3, [pc, #236]	@ (8003328 <HAL_I2S_MspInit+0x15c>)
 800323c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800323e:	4b3a      	ldr	r3, [pc, #232]	@ (8003328 <HAL_I2S_MspInit+0x15c>)
 8003240:	2101      	movs	r1, #1
 8003242:	430a      	orrs	r2, r1
 8003244:	635a      	str	r2, [r3, #52]	@ 0x34
 8003246:	4b38      	ldr	r3, [pc, #224]	@ (8003328 <HAL_I2S_MspInit+0x15c>)
 8003248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800324a:	2201      	movs	r2, #1
 800324c:	4013      	ands	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003252:	4b35      	ldr	r3, [pc, #212]	@ (8003328 <HAL_I2S_MspInit+0x15c>)
 8003254:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003256:	4b34      	ldr	r3, [pc, #208]	@ (8003328 <HAL_I2S_MspInit+0x15c>)
 8003258:	2102      	movs	r1, #2
 800325a:	430a      	orrs	r2, r1
 800325c:	635a      	str	r2, [r3, #52]	@ 0x34
 800325e:	4b32      	ldr	r3, [pc, #200]	@ (8003328 <HAL_I2S_MspInit+0x15c>)
 8003260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003262:	2202      	movs	r2, #2
 8003264:	4013      	ands	r3, r2
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA1     ------> I2S1_CK
    PA2     ------> I2S1_SD
    PB0     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800326a:	243c      	movs	r4, #60	@ 0x3c
 800326c:	193b      	adds	r3, r7, r4
 800326e:	2206      	movs	r2, #6
 8003270:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003272:	193b      	adds	r3, r7, r4
 8003274:	2202      	movs	r2, #2
 8003276:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	193b      	adds	r3, r7, r4
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327e:	193b      	adds	r3, r7, r4
 8003280:	2200      	movs	r2, #0
 8003282:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003284:	193b      	adds	r3, r7, r4
 8003286:	2200      	movs	r2, #0
 8003288:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328a:	193a      	adds	r2, r7, r4
 800328c:	23a0      	movs	r3, #160	@ 0xa0
 800328e:	05db      	lsls	r3, r3, #23
 8003290:	0011      	movs	r1, r2
 8003292:	0018      	movs	r0, r3
 8003294:	f000 feaa 	bl	8003fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003298:	0021      	movs	r1, r4
 800329a:	187b      	adds	r3, r7, r1
 800329c:	2201      	movs	r2, #1
 800329e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a0:	187b      	adds	r3, r7, r1
 80032a2:	2202      	movs	r2, #2
 80032a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a6:	187b      	adds	r3, r7, r1
 80032a8:	2200      	movs	r2, #0
 80032aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ac:	187b      	adds	r3, r7, r1
 80032ae:	2200      	movs	r2, #0
 80032b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80032b2:	187b      	adds	r3, r7, r1
 80032b4:	2200      	movs	r2, #0
 80032b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b8:	187b      	adds	r3, r7, r1
 80032ba:	4a1c      	ldr	r2, [pc, #112]	@ (800332c <HAL_I2S_MspInit+0x160>)
 80032bc:	0019      	movs	r1, r3
 80032be:	0010      	movs	r0, r2
 80032c0:	f000 fe94 	bl	8003fec <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 80032c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003330 <HAL_I2S_MspInit+0x164>)
 80032c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003334 <HAL_I2S_MspInit+0x168>)
 80032c8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80032ca:	4b19      	ldr	r3, [pc, #100]	@ (8003330 <HAL_I2S_MspInit+0x164>)
 80032cc:	2211      	movs	r2, #17
 80032ce:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032d0:	4b17      	ldr	r3, [pc, #92]	@ (8003330 <HAL_I2S_MspInit+0x164>)
 80032d2:	2210      	movs	r2, #16
 80032d4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032d6:	4b16      	ldr	r3, [pc, #88]	@ (8003330 <HAL_I2S_MspInit+0x164>)
 80032d8:	2200      	movs	r2, #0
 80032da:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032dc:	4b14      	ldr	r3, [pc, #80]	@ (8003330 <HAL_I2S_MspInit+0x164>)
 80032de:	2280      	movs	r2, #128	@ 0x80
 80032e0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032e2:	4b13      	ldr	r3, [pc, #76]	@ (8003330 <HAL_I2S_MspInit+0x164>)
 80032e4:	2280      	movs	r2, #128	@ 0x80
 80032e6:	0052      	lsls	r2, r2, #1
 80032e8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032ea:	4b11      	ldr	r3, [pc, #68]	@ (8003330 <HAL_I2S_MspInit+0x164>)
 80032ec:	2280      	movs	r2, #128	@ 0x80
 80032ee:	00d2      	lsls	r2, r2, #3
 80032f0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80032f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003330 <HAL_I2S_MspInit+0x164>)
 80032f4:	2220      	movs	r2, #32
 80032f6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003330 <HAL_I2S_MspInit+0x164>)
 80032fa:	22c0      	movs	r2, #192	@ 0xc0
 80032fc:	0192      	lsls	r2, r2, #6
 80032fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003300:	4b0b      	ldr	r3, [pc, #44]	@ (8003330 <HAL_I2S_MspInit+0x164>)
 8003302:	0018      	movs	r0, r3
 8003304:	f000 fbbe 	bl	8003a84 <HAL_DMA_Init>
 8003308:	1e03      	subs	r3, r0, #0
 800330a:	d001      	beq.n	8003310 <HAL_I2S_MspInit+0x144>
    {
      Error_Handler();
 800330c:	f7ff fcaa 	bl	8002c64 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a07      	ldr	r2, [pc, #28]	@ (8003330 <HAL_I2S_MspInit+0x164>)
 8003314:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003316:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <HAL_I2S_MspInit+0x164>)
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800331c:	46c0      	nop			@ (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	b015      	add	sp, #84	@ 0x54
 8003322:	bd90      	pop	{r4, r7, pc}
 8003324:	40013000 	.word	0x40013000
 8003328:	40021000 	.word	0x40021000
 800332c:	50000400 	.word	0x50000400
 8003330:	20000180 	.word	0x20000180
 8003334:	40020008 	.word	0x40020008

08003338 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b08f      	sub	sp, #60	@ 0x3c
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003340:	2410      	movs	r4, #16
 8003342:	193b      	adds	r3, r7, r4
 8003344:	0018      	movs	r0, r3
 8003346:	2328      	movs	r3, #40	@ 0x28
 8003348:	001a      	movs	r2, r3
 800334a:	2100      	movs	r1, #0
 800334c:	f006 f84e 	bl	80093ec <memset>
  if(hrtc->Instance==RTC)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a19      	ldr	r2, [pc, #100]	@ (80033bc <HAL_RTC_MspInit+0x84>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d12c      	bne.n	80033b4 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800335a:	193b      	adds	r3, r7, r4
 800335c:	2280      	movs	r2, #128	@ 0x80
 800335e:	0292      	lsls	r2, r2, #10
 8003360:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003362:	193b      	adds	r3, r7, r4
 8003364:	2280      	movs	r2, #128	@ 0x80
 8003366:	0052      	lsls	r2, r2, #1
 8003368:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800336a:	193b      	adds	r3, r7, r4
 800336c:	0018      	movs	r0, r3
 800336e:	f002 fe89 	bl	8006084 <HAL_RCCEx_PeriphCLKConfig>
 8003372:	1e03      	subs	r3, r0, #0
 8003374:	d001      	beq.n	800337a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003376:	f7ff fc75 	bl	8002c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800337a:	4b11      	ldr	r3, [pc, #68]	@ (80033c0 <HAL_RTC_MspInit+0x88>)
 800337c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800337e:	4b10      	ldr	r3, [pc, #64]	@ (80033c0 <HAL_RTC_MspInit+0x88>)
 8003380:	2180      	movs	r1, #128	@ 0x80
 8003382:	0209      	lsls	r1, r1, #8
 8003384:	430a      	orrs	r2, r1
 8003386:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003388:	4b0d      	ldr	r3, [pc, #52]	@ (80033c0 <HAL_RTC_MspInit+0x88>)
 800338a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800338c:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <HAL_RTC_MspInit+0x88>)
 800338e:	2180      	movs	r1, #128	@ 0x80
 8003390:	00c9      	lsls	r1, r1, #3
 8003392:	430a      	orrs	r2, r1
 8003394:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003396:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <HAL_RTC_MspInit+0x88>)
 8003398:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800339a:	2380      	movs	r3, #128	@ 0x80
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4013      	ands	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80033a4:	2200      	movs	r2, #0
 80033a6:	2100      	movs	r1, #0
 80033a8:	2002      	movs	r0, #2
 80033aa:	f000 fb39 	bl	8003a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80033ae:	2002      	movs	r0, #2
 80033b0:	f000 fb4b 	bl	8003a4a <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80033b4:	46c0      	nop			@ (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b00f      	add	sp, #60	@ 0x3c
 80033ba:	bd90      	pop	{r4, r7, pc}
 80033bc:	40002800 	.word	0x40002800
 80033c0:	40021000 	.word	0x40021000

080033c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b08b      	sub	sp, #44	@ 0x2c
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	2414      	movs	r4, #20
 80033ce:	193b      	adds	r3, r7, r4
 80033d0:	0018      	movs	r0, r3
 80033d2:	2314      	movs	r3, #20
 80033d4:	001a      	movs	r2, r3
 80033d6:	2100      	movs	r1, #0
 80033d8:	f006 f808 	bl	80093ec <memset>
  if(hspi->Instance==SPI2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a51      	ldr	r2, [pc, #324]	@ (8003528 <HAL_SPI_MspInit+0x164>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d000      	beq.n	80033e8 <HAL_SPI_MspInit+0x24>
 80033e6:	e09a      	b.n	800351e <HAL_SPI_MspInit+0x15a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033e8:	4b50      	ldr	r3, [pc, #320]	@ (800352c <HAL_SPI_MspInit+0x168>)
 80033ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033ec:	4b4f      	ldr	r3, [pc, #316]	@ (800352c <HAL_SPI_MspInit+0x168>)
 80033ee:	2180      	movs	r1, #128	@ 0x80
 80033f0:	01c9      	lsls	r1, r1, #7
 80033f2:	430a      	orrs	r2, r1
 80033f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033f6:	4b4d      	ldr	r3, [pc, #308]	@ (800352c <HAL_SPI_MspInit+0x168>)
 80033f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033fa:	2380      	movs	r3, #128	@ 0x80
 80033fc:	01db      	lsls	r3, r3, #7
 80033fe:	4013      	ands	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003404:	4b49      	ldr	r3, [pc, #292]	@ (800352c <HAL_SPI_MspInit+0x168>)
 8003406:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003408:	4b48      	ldr	r3, [pc, #288]	@ (800352c <HAL_SPI_MspInit+0x168>)
 800340a:	2101      	movs	r1, #1
 800340c:	430a      	orrs	r2, r1
 800340e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003410:	4b46      	ldr	r3, [pc, #280]	@ (800352c <HAL_SPI_MspInit+0x168>)
 8003412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003414:	2201      	movs	r2, #1
 8003416:	4013      	ands	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800341c:	193b      	adds	r3, r7, r4
 800341e:	2209      	movs	r2, #9
 8003420:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003422:	193b      	adds	r3, r7, r4
 8003424:	2202      	movs	r2, #2
 8003426:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	193b      	adds	r3, r7, r4
 800342a:	2200      	movs	r2, #0
 800342c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342e:	193b      	adds	r3, r7, r4
 8003430:	2200      	movs	r2, #0
 8003432:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003434:	193b      	adds	r3, r7, r4
 8003436:	2200      	movs	r2, #0
 8003438:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343a:	193a      	adds	r2, r7, r4
 800343c:	23a0      	movs	r3, #160	@ 0xa0
 800343e:	05db      	lsls	r3, r3, #23
 8003440:	0011      	movs	r1, r2
 8003442:	0018      	movs	r0, r3
 8003444:	f000 fdd2 	bl	8003fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003448:	0021      	movs	r1, r4
 800344a:	187b      	adds	r3, r7, r1
 800344c:	2210      	movs	r2, #16
 800344e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	187b      	adds	r3, r7, r1
 8003452:	2202      	movs	r2, #2
 8003454:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003456:	187b      	adds	r3, r7, r1
 8003458:	2200      	movs	r2, #0
 800345a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345c:	187b      	adds	r3, r7, r1
 800345e:	2200      	movs	r2, #0
 8003460:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8003462:	187b      	adds	r3, r7, r1
 8003464:	2201      	movs	r2, #1
 8003466:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003468:	187a      	adds	r2, r7, r1
 800346a:	23a0      	movs	r3, #160	@ 0xa0
 800346c:	05db      	lsls	r3, r3, #23
 800346e:	0011      	movs	r1, r2
 8003470:	0018      	movs	r0, r3
 8003472:	f000 fdbb 	bl	8003fec <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel3;
 8003476:	4b2e      	ldr	r3, [pc, #184]	@ (8003530 <HAL_SPI_MspInit+0x16c>)
 8003478:	4a2e      	ldr	r2, [pc, #184]	@ (8003534 <HAL_SPI_MspInit+0x170>)
 800347a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800347c:	4b2c      	ldr	r3, [pc, #176]	@ (8003530 <HAL_SPI_MspInit+0x16c>)
 800347e:	2212      	movs	r2, #18
 8003480:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003482:	4b2b      	ldr	r3, [pc, #172]	@ (8003530 <HAL_SPI_MspInit+0x16c>)
 8003484:	2200      	movs	r2, #0
 8003486:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003488:	4b29      	ldr	r3, [pc, #164]	@ (8003530 <HAL_SPI_MspInit+0x16c>)
 800348a:	2200      	movs	r2, #0
 800348c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800348e:	4b28      	ldr	r3, [pc, #160]	@ (8003530 <HAL_SPI_MspInit+0x16c>)
 8003490:	2280      	movs	r2, #128	@ 0x80
 8003492:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003494:	4b26      	ldr	r3, [pc, #152]	@ (8003530 <HAL_SPI_MspInit+0x16c>)
 8003496:	2200      	movs	r2, #0
 8003498:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800349a:	4b25      	ldr	r3, [pc, #148]	@ (8003530 <HAL_SPI_MspInit+0x16c>)
 800349c:	2200      	movs	r2, #0
 800349e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80034a0:	4b23      	ldr	r3, [pc, #140]	@ (8003530 <HAL_SPI_MspInit+0x16c>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80034a6:	4b22      	ldr	r3, [pc, #136]	@ (8003530 <HAL_SPI_MspInit+0x16c>)
 80034a8:	2280      	movs	r2, #128	@ 0x80
 80034aa:	0192      	lsls	r2, r2, #6
 80034ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80034ae:	4b20      	ldr	r3, [pc, #128]	@ (8003530 <HAL_SPI_MspInit+0x16c>)
 80034b0:	0018      	movs	r0, r3
 80034b2:	f000 fae7 	bl	8003a84 <HAL_DMA_Init>
 80034b6:	1e03      	subs	r3, r0, #0
 80034b8:	d001      	beq.n	80034be <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 80034ba:	f7ff fbd3 	bl	8002c64 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003530 <HAL_SPI_MspInit+0x16c>)
 80034c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80034c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003530 <HAL_SPI_MspInit+0x16c>)
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel2;
 80034ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003538 <HAL_SPI_MspInit+0x174>)
 80034cc:	4a1b      	ldr	r2, [pc, #108]	@ (800353c <HAL_SPI_MspInit+0x178>)
 80034ce:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80034d0:	4b19      	ldr	r3, [pc, #100]	@ (8003538 <HAL_SPI_MspInit+0x174>)
 80034d2:	2213      	movs	r2, #19
 80034d4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034d6:	4b18      	ldr	r3, [pc, #96]	@ (8003538 <HAL_SPI_MspInit+0x174>)
 80034d8:	2210      	movs	r2, #16
 80034da:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034dc:	4b16      	ldr	r3, [pc, #88]	@ (8003538 <HAL_SPI_MspInit+0x174>)
 80034de:	2200      	movs	r2, #0
 80034e0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034e2:	4b15      	ldr	r3, [pc, #84]	@ (8003538 <HAL_SPI_MspInit+0x174>)
 80034e4:	2280      	movs	r2, #128	@ 0x80
 80034e6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034e8:	4b13      	ldr	r3, [pc, #76]	@ (8003538 <HAL_SPI_MspInit+0x174>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034ee:	4b12      	ldr	r3, [pc, #72]	@ (8003538 <HAL_SPI_MspInit+0x174>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80034f4:	4b10      	ldr	r3, [pc, #64]	@ (8003538 <HAL_SPI_MspInit+0x174>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80034fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003538 <HAL_SPI_MspInit+0x174>)
 80034fc:	2280      	movs	r2, #128	@ 0x80
 80034fe:	0192      	lsls	r2, r2, #6
 8003500:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003502:	4b0d      	ldr	r3, [pc, #52]	@ (8003538 <HAL_SPI_MspInit+0x174>)
 8003504:	0018      	movs	r0, r3
 8003506:	f000 fabd 	bl	8003a84 <HAL_DMA_Init>
 800350a:	1e03      	subs	r3, r0, #0
 800350c:	d001      	beq.n	8003512 <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 800350e:	f7ff fba9 	bl	8002c64 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a08      	ldr	r2, [pc, #32]	@ (8003538 <HAL_SPI_MspInit+0x174>)
 8003516:	655a      	str	r2, [r3, #84]	@ 0x54
 8003518:	4b07      	ldr	r3, [pc, #28]	@ (8003538 <HAL_SPI_MspInit+0x174>)
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800351e:	46c0      	nop			@ (mov r8, r8)
 8003520:	46bd      	mov	sp, r7
 8003522:	b00b      	add	sp, #44	@ 0x2c
 8003524:	bd90      	pop	{r4, r7, pc}
 8003526:	46c0      	nop			@ (mov r8, r8)
 8003528:	40003800 	.word	0x40003800
 800352c:	40021000 	.word	0x40021000
 8003530:	2000026c 	.word	0x2000026c
 8003534:	40020030 	.word	0x40020030
 8003538:	200002c8 	.word	0x200002c8
 800353c:	4002001c 	.word	0x4002001c

08003540 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	2380      	movs	r3, #128	@ 0x80
 800354e:	05db      	lsls	r3, r3, #23
 8003550:	429a      	cmp	r2, r3
 8003552:	d10b      	bne.n	800356c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003554:	4b07      	ldr	r3, [pc, #28]	@ (8003574 <HAL_TIM_PWM_MspInit+0x34>)
 8003556:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003558:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <HAL_TIM_PWM_MspInit+0x34>)
 800355a:	2101      	movs	r1, #1
 800355c:	430a      	orrs	r2, r1
 800355e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003560:	4b04      	ldr	r3, [pc, #16]	@ (8003574 <HAL_TIM_PWM_MspInit+0x34>)
 8003562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003564:	2201      	movs	r2, #1
 8003566:	4013      	ands	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800356c:	46c0      	nop			@ (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b004      	add	sp, #16
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000

08003578 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a18      	ldr	r2, [pc, #96]	@ (80035e8 <HAL_TIM_Base_MspInit+0x70>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d10e      	bne.n	80035a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800358a:	4b18      	ldr	r3, [pc, #96]	@ (80035ec <HAL_TIM_Base_MspInit+0x74>)
 800358c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800358e:	4b17      	ldr	r3, [pc, #92]	@ (80035ec <HAL_TIM_Base_MspInit+0x74>)
 8003590:	2180      	movs	r1, #128	@ 0x80
 8003592:	0209      	lsls	r1, r1, #8
 8003594:	430a      	orrs	r2, r1
 8003596:	641a      	str	r2, [r3, #64]	@ 0x40
 8003598:	4b14      	ldr	r3, [pc, #80]	@ (80035ec <HAL_TIM_Base_MspInit+0x74>)
 800359a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800359c:	2380      	movs	r3, #128	@ 0x80
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	4013      	ands	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80035a6:	e01a      	b.n	80035de <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a10      	ldr	r2, [pc, #64]	@ (80035f0 <HAL_TIM_Base_MspInit+0x78>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d115      	bne.n	80035de <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80035b2:	4b0e      	ldr	r3, [pc, #56]	@ (80035ec <HAL_TIM_Base_MspInit+0x74>)
 80035b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035b6:	4b0d      	ldr	r3, [pc, #52]	@ (80035ec <HAL_TIM_Base_MspInit+0x74>)
 80035b8:	2180      	movs	r1, #128	@ 0x80
 80035ba:	0289      	lsls	r1, r1, #10
 80035bc:	430a      	orrs	r2, r1
 80035be:	641a      	str	r2, [r3, #64]	@ 0x40
 80035c0:	4b0a      	ldr	r3, [pc, #40]	@ (80035ec <HAL_TIM_Base_MspInit+0x74>)
 80035c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035c4:	2380      	movs	r3, #128	@ 0x80
 80035c6:	029b      	lsls	r3, r3, #10
 80035c8:	4013      	ands	r3, r2
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80035ce:	2200      	movs	r2, #0
 80035d0:	2100      	movs	r1, #0
 80035d2:	2015      	movs	r0, #21
 80035d4:	f000 fa24 	bl	8003a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80035d8:	2015      	movs	r0, #21
 80035da:	f000 fa36 	bl	8003a4a <HAL_NVIC_EnableIRQ>
}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b004      	add	sp, #16
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			@ (mov r8, r8)
 80035e8:	40002000 	.word	0x40002000
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40014400 	.word	0x40014400

080035f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b089      	sub	sp, #36	@ 0x24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fc:	240c      	movs	r4, #12
 80035fe:	193b      	adds	r3, r7, r4
 8003600:	0018      	movs	r0, r3
 8003602:	2314      	movs	r3, #20
 8003604:	001a      	movs	r2, r3
 8003606:	2100      	movs	r1, #0
 8003608:	f005 fef0 	bl	80093ec <memset>
  if(htim->Instance==TIM2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	2380      	movs	r3, #128	@ 0x80
 8003612:	05db      	lsls	r3, r3, #23
 8003614:	429a      	cmp	r2, r3
 8003616:	d121      	bne.n	800365c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003618:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <HAL_TIM_MspPostInit+0x70>)
 800361a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800361c:	4b11      	ldr	r3, [pc, #68]	@ (8003664 <HAL_TIM_MspPostInit+0x70>)
 800361e:	2104      	movs	r1, #4
 8003620:	430a      	orrs	r2, r1
 8003622:	635a      	str	r2, [r3, #52]	@ 0x34
 8003624:	4b0f      	ldr	r3, [pc, #60]	@ (8003664 <HAL_TIM_MspPostInit+0x70>)
 8003626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003628:	2204      	movs	r2, #4
 800362a:	4013      	ands	r3, r2
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_SHIFT_nOE_Pin;
 8003630:	0021      	movs	r1, r4
 8003632:	187b      	adds	r3, r7, r1
 8003634:	2240      	movs	r2, #64	@ 0x40
 8003636:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003638:	187b      	adds	r3, r7, r1
 800363a:	2202      	movs	r2, #2
 800363c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	187b      	adds	r3, r7, r1
 8003640:	2200      	movs	r2, #0
 8003642:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003644:	187b      	adds	r3, r7, r1
 8003646:	2200      	movs	r2, #0
 8003648:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800364a:	187b      	adds	r3, r7, r1
 800364c:	2202      	movs	r2, #2
 800364e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_SHIFT_nOE_GPIO_Port, &GPIO_InitStruct);
 8003650:	187b      	adds	r3, r7, r1
 8003652:	4a05      	ldr	r2, [pc, #20]	@ (8003668 <HAL_TIM_MspPostInit+0x74>)
 8003654:	0019      	movs	r1, r3
 8003656:	0010      	movs	r0, r2
 8003658:	f000 fcc8 	bl	8003fec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800365c:	46c0      	nop			@ (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	b009      	add	sp, #36	@ 0x24
 8003662:	bd90      	pop	{r4, r7, pc}
 8003664:	40021000 	.word	0x40021000
 8003668:	50000800 	.word	0x50000800

0800366c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003670:	46c0      	nop			@ (mov r8, r8)
 8003672:	e7fd      	b.n	8003670 <NMI_Handler+0x4>

08003674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003678:	46c0      	nop			@ (mov r8, r8)
 800367a:	e7fd      	b.n	8003678 <HardFault_Handler+0x4>

0800367c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003680:	46c0      	nop			@ (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800368a:	46c0      	nop			@ (mov r8, r8)
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003694:	f000 f8fc 	bl	8003890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003698:	46c0      	nop			@ (mov r8, r8)
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80036a4:	4b03      	ldr	r3, [pc, #12]	@ (80036b4 <RTC_TAMP_IRQHandler+0x14>)
 80036a6:	0018      	movs	r0, r3
 80036a8:	f003 fcf8 	bl	800709c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80036ac:	46c0      	nop			@ (mov r8, r8)
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	46c0      	nop			@ (mov r8, r8)
 80036b4:	200001dc 	.word	0x200001dc

080036b8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80036bc:	46c0      	nop			@ (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_EXTI_Pin);
 80036c6:	2001      	movs	r0, #1
 80036c8:	f000 fe4a 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_EXTI_Pin);
 80036cc:	2002      	movs	r0, #2
 80036ce:	f000 fe47 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_EXTI_Pin);
 80036dc:	2004      	movs	r0, #4
 80036de:	f000 fe3f 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_EXTI_Pin);
 80036e2:	2008      	movs	r0, #8
 80036e4:	f000 fe3c 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80036e8:	46c0      	nop			@ (mov r8, r8)
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_SWITCH_EXTI_Pin);
 80036f2:	2010      	movs	r0, #16
 80036f4:	f000 fe34 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_EXTI_Pin);
 80036f8:	2380      	movs	r3, #128	@ 0x80
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	0018      	movs	r0, r3
 80036fe:	f000 fe2f 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800370c:	4b03      	ldr	r3, [pc, #12]	@ (800371c <DMA1_Channel1_IRQHandler+0x14>)
 800370e:	0018      	movs	r0, r3
 8003710:	f000 fb2a 	bl	8003d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003714:	46c0      	nop			@ (mov r8, r8)
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	20000180 	.word	0x20000180

08003720 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003724:	4b05      	ldr	r3, [pc, #20]	@ (800373c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8003726:	0018      	movs	r0, r3
 8003728:	f000 fb1e 	bl	8003d68 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800372c:	4b04      	ldr	r3, [pc, #16]	@ (8003740 <DMA1_Channel2_3_IRQHandler+0x20>)
 800372e:	0018      	movs	r0, r3
 8003730:	f000 fb1a 	bl	8003d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003734:	46c0      	nop			@ (mov r8, r8)
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			@ (mov r8, r8)
 800373c:	200002c8 	.word	0x200002c8
 8003740:	2000026c 	.word	0x2000026c

08003744 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003748:	4b03      	ldr	r3, [pc, #12]	@ (8003758 <TIM16_IRQHandler+0x14>)
 800374a:	0018      	movs	r0, r3
 800374c:	f005 f862 	bl	8008814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003750:	46c0      	nop			@ (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	200003bc 	.word	0x200003bc

0800375c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003760:	46c0      	nop			@ (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003768:	480d      	ldr	r0, [pc, #52]	@ (80037a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800376a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800376c:	f7ff fff6 	bl	800375c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003770:	480c      	ldr	r0, [pc, #48]	@ (80037a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003772:	490d      	ldr	r1, [pc, #52]	@ (80037a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003774:	4a0d      	ldr	r2, [pc, #52]	@ (80037ac <LoopForever+0xe>)
  movs r3, #0
 8003776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003778:	e002      	b.n	8003780 <LoopCopyDataInit>

0800377a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800377a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800377c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800377e:	3304      	adds	r3, #4

08003780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003784:	d3f9      	bcc.n	800377a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003786:	4a0a      	ldr	r2, [pc, #40]	@ (80037b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003788:	4c0a      	ldr	r4, [pc, #40]	@ (80037b4 <LoopForever+0x16>)
  movs r3, #0
 800378a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800378c:	e001      	b.n	8003792 <LoopFillZerobss>

0800378e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800378e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003790:	3204      	adds	r2, #4

08003792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003794:	d3fb      	bcc.n	800378e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003796:	f005 fe31 	bl	80093fc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800379a:	f7fd ff25 	bl	80015e8 <main>

0800379e <LoopForever>:

LoopForever:
  b LoopForever
 800379e:	e7fe      	b.n	800379e <LoopForever>
  ldr   r0, =_estack
 80037a0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80037a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037a8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80037ac:	0800956c 	.word	0x0800956c
  ldr r2, =_sbss
 80037b0:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80037b4:	20000cb8 	.word	0x20000cb8

080037b8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037b8:	e7fe      	b.n	80037b8 <ADC1_IRQHandler>
	...

080037bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037c2:	1dfb      	adds	r3, r7, #7
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037c8:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <HAL_Init+0x3c>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4b0a      	ldr	r3, [pc, #40]	@ (80037f8 <HAL_Init+0x3c>)
 80037ce:	2180      	movs	r1, #128	@ 0x80
 80037d0:	0049      	lsls	r1, r1, #1
 80037d2:	430a      	orrs	r2, r1
 80037d4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037d6:	2003      	movs	r0, #3
 80037d8:	f000 f810 	bl	80037fc <HAL_InitTick>
 80037dc:	1e03      	subs	r3, r0, #0
 80037de:	d003      	beq.n	80037e8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80037e0:	1dfb      	adds	r3, r7, #7
 80037e2:	2201      	movs	r2, #1
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	e001      	b.n	80037ec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80037e8:	f7ff fc62 	bl	80030b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037ec:	1dfb      	adds	r3, r7, #7
 80037ee:	781b      	ldrb	r3, [r3, #0]
}
 80037f0:	0018      	movs	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b002      	add	sp, #8
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40022000 	.word	0x40022000

080037fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037fc:	b590      	push	{r4, r7, lr}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003804:	230f      	movs	r3, #15
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800380c:	4b1d      	ldr	r3, [pc, #116]	@ (8003884 <HAL_InitTick+0x88>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d02b      	beq.n	800386c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003814:	4b1c      	ldr	r3, [pc, #112]	@ (8003888 <HAL_InitTick+0x8c>)
 8003816:	681c      	ldr	r4, [r3, #0]
 8003818:	4b1a      	ldr	r3, [pc, #104]	@ (8003884 <HAL_InitTick+0x88>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	0019      	movs	r1, r3
 800381e:	23fa      	movs	r3, #250	@ 0xfa
 8003820:	0098      	lsls	r0, r3, #2
 8003822:	f7fc fc6f 	bl	8000104 <__udivsi3>
 8003826:	0003      	movs	r3, r0
 8003828:	0019      	movs	r1, r3
 800382a:	0020      	movs	r0, r4
 800382c:	f7fc fc6a 	bl	8000104 <__udivsi3>
 8003830:	0003      	movs	r3, r0
 8003832:	0018      	movs	r0, r3
 8003834:	f000 f919 	bl	8003a6a <HAL_SYSTICK_Config>
 8003838:	1e03      	subs	r3, r0, #0
 800383a:	d112      	bne.n	8003862 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d80a      	bhi.n	8003858 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	2301      	movs	r3, #1
 8003846:	425b      	negs	r3, r3
 8003848:	2200      	movs	r2, #0
 800384a:	0018      	movs	r0, r3
 800384c:	f000 f8e8 	bl	8003a20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003850:	4b0e      	ldr	r3, [pc, #56]	@ (800388c <HAL_InitTick+0x90>)
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e00d      	b.n	8003874 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003858:	230f      	movs	r3, #15
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	e008      	b.n	8003874 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003862:	230f      	movs	r3, #15
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	e003      	b.n	8003874 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800386c:	230f      	movs	r3, #15
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003874:	230f      	movs	r3, #15
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	781b      	ldrb	r3, [r3, #0]
}
 800387a:	0018      	movs	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	b005      	add	sp, #20
 8003880:	bd90      	pop	{r4, r7, pc}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	20000098 	.word	0x20000098
 8003888:	20000090 	.word	0x20000090
 800388c:	20000094 	.word	0x20000094

08003890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003894:	4b05      	ldr	r3, [pc, #20]	@ (80038ac <HAL_IncTick+0x1c>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	001a      	movs	r2, r3
 800389a:	4b05      	ldr	r3, [pc, #20]	@ (80038b0 <HAL_IncTick+0x20>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	18d2      	adds	r2, r2, r3
 80038a0:	4b03      	ldr	r3, [pc, #12]	@ (80038b0 <HAL_IncTick+0x20>)
 80038a2:	601a      	str	r2, [r3, #0]
}
 80038a4:	46c0      	nop			@ (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	46c0      	nop			@ (mov r8, r8)
 80038ac:	20000098 	.word	0x20000098
 80038b0:	20000cb4 	.word	0x20000cb4

080038b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  return uwTick;
 80038b8:	4b02      	ldr	r3, [pc, #8]	@ (80038c4 <HAL_GetTick+0x10>)
 80038ba:	681b      	ldr	r3, [r3, #0]
}
 80038bc:	0018      	movs	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	20000cb4 	.word	0x20000cb4

080038c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	0002      	movs	r2, r0
 80038d0:	1dfb      	adds	r3, r7, #7
 80038d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038d4:	1dfb      	adds	r3, r7, #7
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80038da:	d809      	bhi.n	80038f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038dc:	1dfb      	adds	r3, r7, #7
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	001a      	movs	r2, r3
 80038e2:	231f      	movs	r3, #31
 80038e4:	401a      	ands	r2, r3
 80038e6:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <__NVIC_EnableIRQ+0x30>)
 80038e8:	2101      	movs	r1, #1
 80038ea:	4091      	lsls	r1, r2
 80038ec:	000a      	movs	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80038f0:	46c0      	nop			@ (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b002      	add	sp, #8
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	e000e100 	.word	0xe000e100

080038fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038fc:	b590      	push	{r4, r7, lr}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	0002      	movs	r2, r0
 8003904:	6039      	str	r1, [r7, #0]
 8003906:	1dfb      	adds	r3, r7, #7
 8003908:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800390a:	1dfb      	adds	r3, r7, #7
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003910:	d828      	bhi.n	8003964 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003912:	4a2f      	ldr	r2, [pc, #188]	@ (80039d0 <__NVIC_SetPriority+0xd4>)
 8003914:	1dfb      	adds	r3, r7, #7
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	b25b      	sxtb	r3, r3
 800391a:	089b      	lsrs	r3, r3, #2
 800391c:	33c0      	adds	r3, #192	@ 0xc0
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	589b      	ldr	r3, [r3, r2]
 8003922:	1dfa      	adds	r2, r7, #7
 8003924:	7812      	ldrb	r2, [r2, #0]
 8003926:	0011      	movs	r1, r2
 8003928:	2203      	movs	r2, #3
 800392a:	400a      	ands	r2, r1
 800392c:	00d2      	lsls	r2, r2, #3
 800392e:	21ff      	movs	r1, #255	@ 0xff
 8003930:	4091      	lsls	r1, r2
 8003932:	000a      	movs	r2, r1
 8003934:	43d2      	mvns	r2, r2
 8003936:	401a      	ands	r2, r3
 8003938:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	019b      	lsls	r3, r3, #6
 800393e:	22ff      	movs	r2, #255	@ 0xff
 8003940:	401a      	ands	r2, r3
 8003942:	1dfb      	adds	r3, r7, #7
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	0018      	movs	r0, r3
 8003948:	2303      	movs	r3, #3
 800394a:	4003      	ands	r3, r0
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003950:	481f      	ldr	r0, [pc, #124]	@ (80039d0 <__NVIC_SetPriority+0xd4>)
 8003952:	1dfb      	adds	r3, r7, #7
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b25b      	sxtb	r3, r3
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	430a      	orrs	r2, r1
 800395c:	33c0      	adds	r3, #192	@ 0xc0
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003962:	e031      	b.n	80039c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003964:	4a1b      	ldr	r2, [pc, #108]	@ (80039d4 <__NVIC_SetPriority+0xd8>)
 8003966:	1dfb      	adds	r3, r7, #7
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	0019      	movs	r1, r3
 800396c:	230f      	movs	r3, #15
 800396e:	400b      	ands	r3, r1
 8003970:	3b08      	subs	r3, #8
 8003972:	089b      	lsrs	r3, r3, #2
 8003974:	3306      	adds	r3, #6
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	18d3      	adds	r3, r2, r3
 800397a:	3304      	adds	r3, #4
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	1dfa      	adds	r2, r7, #7
 8003980:	7812      	ldrb	r2, [r2, #0]
 8003982:	0011      	movs	r1, r2
 8003984:	2203      	movs	r2, #3
 8003986:	400a      	ands	r2, r1
 8003988:	00d2      	lsls	r2, r2, #3
 800398a:	21ff      	movs	r1, #255	@ 0xff
 800398c:	4091      	lsls	r1, r2
 800398e:	000a      	movs	r2, r1
 8003990:	43d2      	mvns	r2, r2
 8003992:	401a      	ands	r2, r3
 8003994:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	019b      	lsls	r3, r3, #6
 800399a:	22ff      	movs	r2, #255	@ 0xff
 800399c:	401a      	ands	r2, r3
 800399e:	1dfb      	adds	r3, r7, #7
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	0018      	movs	r0, r3
 80039a4:	2303      	movs	r3, #3
 80039a6:	4003      	ands	r3, r0
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039ac:	4809      	ldr	r0, [pc, #36]	@ (80039d4 <__NVIC_SetPriority+0xd8>)
 80039ae:	1dfb      	adds	r3, r7, #7
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	001c      	movs	r4, r3
 80039b4:	230f      	movs	r3, #15
 80039b6:	4023      	ands	r3, r4
 80039b8:	3b08      	subs	r3, #8
 80039ba:	089b      	lsrs	r3, r3, #2
 80039bc:	430a      	orrs	r2, r1
 80039be:	3306      	adds	r3, #6
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	18c3      	adds	r3, r0, r3
 80039c4:	3304      	adds	r3, #4
 80039c6:	601a      	str	r2, [r3, #0]
}
 80039c8:	46c0      	nop			@ (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b003      	add	sp, #12
 80039ce:	bd90      	pop	{r4, r7, pc}
 80039d0:	e000e100 	.word	0xe000e100
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	1e5a      	subs	r2, r3, #1
 80039e4:	2380      	movs	r3, #128	@ 0x80
 80039e6:	045b      	lsls	r3, r3, #17
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d301      	bcc.n	80039f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ec:	2301      	movs	r3, #1
 80039ee:	e010      	b.n	8003a12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039f0:	4b0a      	ldr	r3, [pc, #40]	@ (8003a1c <SysTick_Config+0x44>)
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	3a01      	subs	r2, #1
 80039f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039f8:	2301      	movs	r3, #1
 80039fa:	425b      	negs	r3, r3
 80039fc:	2103      	movs	r1, #3
 80039fe:	0018      	movs	r0, r3
 8003a00:	f7ff ff7c 	bl	80038fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a04:	4b05      	ldr	r3, [pc, #20]	@ (8003a1c <SysTick_Config+0x44>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a0a:	4b04      	ldr	r3, [pc, #16]	@ (8003a1c <SysTick_Config+0x44>)
 8003a0c:	2207      	movs	r2, #7
 8003a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	0018      	movs	r0, r3
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b002      	add	sp, #8
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	46c0      	nop			@ (mov r8, r8)
 8003a1c:	e000e010 	.word	0xe000e010

08003a20 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]
 8003a2a:	210f      	movs	r1, #15
 8003a2c:	187b      	adds	r3, r7, r1
 8003a2e:	1c02      	adds	r2, r0, #0
 8003a30:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	187b      	adds	r3, r7, r1
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	b25b      	sxtb	r3, r3
 8003a3a:	0011      	movs	r1, r2
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f7ff ff5d 	bl	80038fc <__NVIC_SetPriority>
}
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b004      	add	sp, #16
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	0002      	movs	r2, r0
 8003a52:	1dfb      	adds	r3, r7, #7
 8003a54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a56:	1dfb      	adds	r3, r7, #7
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	b25b      	sxtb	r3, r3
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f7ff ff33 	bl	80038c8 <__NVIC_EnableIRQ>
}
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b002      	add	sp, #8
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	0018      	movs	r0, r3
 8003a76:	f7ff ffaf 	bl	80039d8 <SysTick_Config>
 8003a7a:	0003      	movs	r3, r0
}
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b002      	add	sp, #8
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e077      	b.n	8003b86 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a3d      	ldr	r2, [pc, #244]	@ (8003b90 <HAL_DMA_Init+0x10c>)
 8003a9c:	4694      	mov	ip, r2
 8003a9e:	4463      	add	r3, ip
 8003aa0:	2114      	movs	r1, #20
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f7fc fb2e 	bl	8000104 <__udivsi3>
 8003aa8:	0003      	movs	r3, r0
 8003aaa:	009a      	lsls	r2, r3, #2
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2225      	movs	r2, #37	@ 0x25
 8003ab4:	2102      	movs	r1, #2
 8003ab6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4934      	ldr	r1, [pc, #208]	@ (8003b94 <HAL_DMA_Init+0x110>)
 8003ac4:	400a      	ands	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6819      	ldr	r1, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	0018      	movs	r0, r3
 8003b02:	f000 fa23 	bl	8003f4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	2380      	movs	r3, #128	@ 0x80
 8003b0c:	01db      	lsls	r3, r3, #7
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d102      	bne.n	8003b18 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b20:	213f      	movs	r1, #63	@ 0x3f
 8003b22:	400a      	ands	r2, r1
 8003b24:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003b2e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d011      	beq.n	8003b5c <HAL_DMA_Init+0xd8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d80d      	bhi.n	8003b5c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	0018      	movs	r0, r3
 8003b44:	f000 fa2e 	bl	8003fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003b58:	605a      	str	r2, [r3, #4]
 8003b5a:	e008      	b.n	8003b6e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2225      	movs	r2, #37	@ 0x25
 8003b78:	2101      	movs	r1, #1
 8003b7a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	@ 0x24
 8003b80:	2100      	movs	r1, #0
 8003b82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	0018      	movs	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b002      	add	sp, #8
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	46c0      	nop			@ (mov r8, r8)
 8003b90:	bffdfff8 	.word	0xbffdfff8
 8003b94:	ffff800f 	.word	0xffff800f

08003b98 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba6:	2317      	movs	r3, #23
 8003ba8:	18fb      	adds	r3, r7, r3
 8003baa:	2200      	movs	r2, #0
 8003bac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2224      	movs	r2, #36	@ 0x24
 8003bb2:	5c9b      	ldrb	r3, [r3, r2]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_DMA_Start_IT+0x24>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e06f      	b.n	8003c9c <HAL_DMA_Start_IT+0x104>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2224      	movs	r2, #36	@ 0x24
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2225      	movs	r2, #37	@ 0x25
 8003bc8:	5c9b      	ldrb	r3, [r3, r2]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d157      	bne.n	8003c80 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2225      	movs	r2, #37	@ 0x25
 8003bd4:	2102      	movs	r1, #2
 8003bd6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2101      	movs	r1, #1
 8003bea:	438a      	bics	r2, r1
 8003bec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	68b9      	ldr	r1, [r7, #8]
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 f969 	bl	8003ecc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d008      	beq.n	8003c14 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	210e      	movs	r1, #14
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	e00f      	b.n	8003c34 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2104      	movs	r1, #4
 8003c20:	438a      	bics	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	210a      	movs	r1, #10
 8003c30:	430a      	orrs	r2, r1
 8003c32:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	2380      	movs	r3, #128	@ 0x80
 8003c3c:	025b      	lsls	r3, r3, #9
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d008      	beq.n	8003c54 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4c:	2180      	movs	r1, #128	@ 0x80
 8003c4e:	0049      	lsls	r1, r1, #1
 8003c50:	430a      	orrs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c66:	2180      	movs	r1, #128	@ 0x80
 8003c68:	0049      	lsls	r1, r1, #1
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2101      	movs	r1, #1
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	e00a      	b.n	8003c96 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2280      	movs	r2, #128	@ 0x80
 8003c84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2224      	movs	r2, #36	@ 0x24
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003c8e:	2317      	movs	r3, #23
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	2201      	movs	r2, #1
 8003c94:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003c96:	2317      	movs	r3, #23
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	781b      	ldrb	r3, [r3, #0]
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b006      	add	sp, #24
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e050      	b.n	8003d58 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2225      	movs	r2, #37	@ 0x25
 8003cba:	5c9b      	ldrb	r3, [r3, r2]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d008      	beq.n	8003cd4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2224      	movs	r2, #36	@ 0x24
 8003ccc:	2100      	movs	r1, #0
 8003cce:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e041      	b.n	8003d58 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	210e      	movs	r1, #14
 8003ce0:	438a      	bics	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	491c      	ldr	r1, [pc, #112]	@ (8003d60 <HAL_DMA_Abort+0xbc>)
 8003cf0:	400a      	ands	r2, r1
 8003cf2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2101      	movs	r1, #1
 8003d00:	438a      	bics	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003d04:	4b17      	ldr	r3, [pc, #92]	@ (8003d64 <HAL_DMA_Abort+0xc0>)
 8003d06:	6859      	ldr	r1, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	221c      	movs	r2, #28
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2201      	movs	r2, #1
 8003d12:	409a      	lsls	r2, r3
 8003d14:	4b13      	ldr	r3, [pc, #76]	@ (8003d64 <HAL_DMA_Abort+0xc0>)
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003d22:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00c      	beq.n	8003d46 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d36:	490a      	ldr	r1, [pc, #40]	@ (8003d60 <HAL_DMA_Abort+0xbc>)
 8003d38:	400a      	ands	r2, r1
 8003d3a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003d44:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2225      	movs	r2, #37	@ 0x25
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2224      	movs	r2, #36	@ 0x24
 8003d52:	2100      	movs	r1, #0
 8003d54:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b002      	add	sp, #8
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	fffffeff 	.word	0xfffffeff
 8003d64:	40020000 	.word	0x40020000

08003d68 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003d70:	4b55      	ldr	r3, [pc, #340]	@ (8003ec8 <HAL_DMA_IRQHandler+0x160>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d82:	221c      	movs	r2, #28
 8003d84:	4013      	ands	r3, r2
 8003d86:	2204      	movs	r2, #4
 8003d88:	409a      	lsls	r2, r3
 8003d8a:	0013      	movs	r3, r2
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d027      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x7a>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2204      	movs	r2, #4
 8003d96:	4013      	ands	r3, r2
 8003d98:	d023      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2220      	movs	r2, #32
 8003da2:	4013      	ands	r3, r2
 8003da4:	d107      	bne.n	8003db6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2104      	movs	r1, #4
 8003db2:	438a      	bics	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003db6:	4b44      	ldr	r3, [pc, #272]	@ (8003ec8 <HAL_DMA_IRQHandler+0x160>)
 8003db8:	6859      	ldr	r1, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	221c      	movs	r2, #28
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2204      	movs	r2, #4
 8003dc4:	409a      	lsls	r2, r3
 8003dc6:	4b40      	ldr	r3, [pc, #256]	@ (8003ec8 <HAL_DMA_IRQHandler+0x160>)
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d100      	bne.n	8003dd6 <HAL_DMA_IRQHandler+0x6e>
 8003dd4:	e073      	b.n	8003ebe <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	0010      	movs	r0, r2
 8003dde:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003de0:	e06d      	b.n	8003ebe <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	221c      	movs	r2, #28
 8003de8:	4013      	ands	r3, r2
 8003dea:	2202      	movs	r2, #2
 8003dec:	409a      	lsls	r2, r3
 8003dee:	0013      	movs	r3, r2
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4013      	ands	r3, r2
 8003df4:	d02e      	beq.n	8003e54 <HAL_DMA_IRQHandler+0xec>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d02a      	beq.n	8003e54 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2220      	movs	r2, #32
 8003e06:	4013      	ands	r3, r2
 8003e08:	d10b      	bne.n	8003e22 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	210a      	movs	r1, #10
 8003e16:	438a      	bics	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2225      	movs	r2, #37	@ 0x25
 8003e1e:	2101      	movs	r1, #1
 8003e20:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003e22:	4b29      	ldr	r3, [pc, #164]	@ (8003ec8 <HAL_DMA_IRQHandler+0x160>)
 8003e24:	6859      	ldr	r1, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	221c      	movs	r2, #28
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2202      	movs	r2, #2
 8003e30:	409a      	lsls	r2, r3
 8003e32:	4b25      	ldr	r3, [pc, #148]	@ (8003ec8 <HAL_DMA_IRQHandler+0x160>)
 8003e34:	430a      	orrs	r2, r1
 8003e36:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2224      	movs	r2, #36	@ 0x24
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d03a      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	0010      	movs	r0, r2
 8003e50:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003e52:	e034      	b.n	8003ebe <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e58:	221c      	movs	r2, #28
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2208      	movs	r2, #8
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	0013      	movs	r3, r2
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4013      	ands	r3, r2
 8003e66:	d02b      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x158>
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d027      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	210e      	movs	r1, #14
 8003e7c:	438a      	bics	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003e80:	4b11      	ldr	r3, [pc, #68]	@ (8003ec8 <HAL_DMA_IRQHandler+0x160>)
 8003e82:	6859      	ldr	r1, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	221c      	movs	r2, #28
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec8 <HAL_DMA_IRQHandler+0x160>)
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2225      	movs	r2, #37	@ 0x25
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2224      	movs	r2, #36	@ 0x24
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	0010      	movs	r0, r2
 8003ebc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ebe:	46c0      	nop			@ (mov r8, r8)
 8003ec0:	46c0      	nop			@ (mov r8, r8)
}
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b004      	add	sp, #16
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40020000 	.word	0x40020000

08003ecc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003ee2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d004      	beq.n	8003ef6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003ef4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003ef6:	4b14      	ldr	r3, [pc, #80]	@ (8003f48 <DMA_SetConfig+0x7c>)
 8003ef8:	6859      	ldr	r1, [r3, #4]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	221c      	movs	r2, #28
 8003f00:	4013      	ands	r3, r2
 8003f02:	2201      	movs	r2, #1
 8003f04:	409a      	lsls	r2, r3
 8003f06:	4b10      	ldr	r3, [pc, #64]	@ (8003f48 <DMA_SetConfig+0x7c>)
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b10      	cmp	r3, #16
 8003f1a:	d108      	bne.n	8003f2e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f2c:	e007      	b.n	8003f3e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	60da      	str	r2, [r3, #12]
}
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b004      	add	sp, #16
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	46c0      	nop			@ (mov r8, r8)
 8003f48:	40020000 	.word	0x40020000

08003f4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f58:	089b      	lsrs	r3, r3, #2
 8003f5a:	4a10      	ldr	r2, [pc, #64]	@ (8003f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003f5c:	4694      	mov	ip, r2
 8003f5e:	4463      	add	r3, ip
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	001a      	movs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	001a      	movs	r2, r3
 8003f6e:	23ff      	movs	r3, #255	@ 0xff
 8003f70:	4013      	ands	r3, r2
 8003f72:	3b08      	subs	r3, #8
 8003f74:	2114      	movs	r1, #20
 8003f76:	0018      	movs	r0, r3
 8003f78:	f7fc f8c4 	bl	8000104 <__udivsi3>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a07      	ldr	r2, [pc, #28]	@ (8003fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003f84:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	221f      	movs	r2, #31
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003f94:	46c0      	nop			@ (mov r8, r8)
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b004      	add	sp, #16
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	10008200 	.word	0x10008200
 8003fa0:	40020880 	.word	0x40020880

08003fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	223f      	movs	r2, #63	@ 0x3f
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003fba:	4694      	mov	ip, r2
 8003fbc:	4463      	add	r3, ip
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	001a      	movs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a07      	ldr	r2, [pc, #28]	@ (8003fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003fca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	409a      	lsls	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003fdc:	46c0      	nop			@ (mov r8, r8)
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b004      	add	sp, #16
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	1000823f 	.word	0x1000823f
 8003fe8:	40020940 	.word	0x40020940

08003fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ffa:	e147      	b.n	800428c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2101      	movs	r1, #1
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4091      	lsls	r1, r2
 8004006:	000a      	movs	r2, r1
 8004008:	4013      	ands	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d100      	bne.n	8004014 <HAL_GPIO_Init+0x28>
 8004012:	e138      	b.n	8004286 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2203      	movs	r2, #3
 800401a:	4013      	ands	r3, r2
 800401c:	2b01      	cmp	r3, #1
 800401e:	d005      	beq.n	800402c <HAL_GPIO_Init+0x40>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2203      	movs	r2, #3
 8004026:	4013      	ands	r3, r2
 8004028:	2b02      	cmp	r3, #2
 800402a:	d130      	bne.n	800408e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	2203      	movs	r2, #3
 8004038:	409a      	lsls	r2, r3
 800403a:	0013      	movs	r3, r2
 800403c:	43da      	mvns	r2, r3
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	4013      	ands	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	409a      	lsls	r2, r3
 800404e:	0013      	movs	r3, r2
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004062:	2201      	movs	r2, #1
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	409a      	lsls	r2, r3
 8004068:	0013      	movs	r3, r2
 800406a:	43da      	mvns	r2, r3
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4013      	ands	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	091b      	lsrs	r3, r3, #4
 8004078:	2201      	movs	r2, #1
 800407a:	401a      	ands	r2, r3
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	409a      	lsls	r2, r3
 8004080:	0013      	movs	r3, r2
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2203      	movs	r2, #3
 8004094:	4013      	ands	r3, r2
 8004096:	2b03      	cmp	r3, #3
 8004098:	d017      	beq.n	80040ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	2203      	movs	r2, #3
 80040a6:	409a      	lsls	r2, r3
 80040a8:	0013      	movs	r3, r2
 80040aa:	43da      	mvns	r2, r3
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4013      	ands	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	409a      	lsls	r2, r3
 80040bc:	0013      	movs	r3, r2
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2203      	movs	r2, #3
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d123      	bne.n	800411e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	08da      	lsrs	r2, r3, #3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3208      	adds	r2, #8
 80040de:	0092      	lsls	r2, r2, #2
 80040e0:	58d3      	ldr	r3, [r2, r3]
 80040e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2207      	movs	r2, #7
 80040e8:	4013      	ands	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	220f      	movs	r2, #15
 80040ee:	409a      	lsls	r2, r3
 80040f0:	0013      	movs	r3, r2
 80040f2:	43da      	mvns	r2, r3
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4013      	ands	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2107      	movs	r1, #7
 8004102:	400b      	ands	r3, r1
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	409a      	lsls	r2, r3
 8004108:	0013      	movs	r3, r2
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	08da      	lsrs	r2, r3, #3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3208      	adds	r2, #8
 8004118:	0092      	lsls	r2, r2, #2
 800411a:	6939      	ldr	r1, [r7, #16]
 800411c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	2203      	movs	r2, #3
 800412a:	409a      	lsls	r2, r3
 800412c:	0013      	movs	r3, r2
 800412e:	43da      	mvns	r2, r3
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4013      	ands	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2203      	movs	r2, #3
 800413c:	401a      	ands	r2, r3
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	409a      	lsls	r2, r3
 8004144:	0013      	movs	r3, r2
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	23c0      	movs	r3, #192	@ 0xc0
 8004158:	029b      	lsls	r3, r3, #10
 800415a:	4013      	ands	r3, r2
 800415c:	d100      	bne.n	8004160 <HAL_GPIO_Init+0x174>
 800415e:	e092      	b.n	8004286 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004160:	4a50      	ldr	r2, [pc, #320]	@ (80042a4 <HAL_GPIO_Init+0x2b8>)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	089b      	lsrs	r3, r3, #2
 8004166:	3318      	adds	r3, #24
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	589b      	ldr	r3, [r3, r2]
 800416c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2203      	movs	r2, #3
 8004172:	4013      	ands	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	220f      	movs	r2, #15
 8004178:	409a      	lsls	r2, r3
 800417a:	0013      	movs	r3, r2
 800417c:	43da      	mvns	r2, r3
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4013      	ands	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	23a0      	movs	r3, #160	@ 0xa0
 8004188:	05db      	lsls	r3, r3, #23
 800418a:	429a      	cmp	r2, r3
 800418c:	d013      	beq.n	80041b6 <HAL_GPIO_Init+0x1ca>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a45      	ldr	r2, [pc, #276]	@ (80042a8 <HAL_GPIO_Init+0x2bc>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00d      	beq.n	80041b2 <HAL_GPIO_Init+0x1c6>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a44      	ldr	r2, [pc, #272]	@ (80042ac <HAL_GPIO_Init+0x2c0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d007      	beq.n	80041ae <HAL_GPIO_Init+0x1c2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a43      	ldr	r2, [pc, #268]	@ (80042b0 <HAL_GPIO_Init+0x2c4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d101      	bne.n	80041aa <HAL_GPIO_Init+0x1be>
 80041a6:	2303      	movs	r3, #3
 80041a8:	e006      	b.n	80041b8 <HAL_GPIO_Init+0x1cc>
 80041aa:	2305      	movs	r3, #5
 80041ac:	e004      	b.n	80041b8 <HAL_GPIO_Init+0x1cc>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e002      	b.n	80041b8 <HAL_GPIO_Init+0x1cc>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <HAL_GPIO_Init+0x1cc>
 80041b6:	2300      	movs	r3, #0
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	2103      	movs	r1, #3
 80041bc:	400a      	ands	r2, r1
 80041be:	00d2      	lsls	r2, r2, #3
 80041c0:	4093      	lsls	r3, r2
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80041c8:	4936      	ldr	r1, [pc, #216]	@ (80042a4 <HAL_GPIO_Init+0x2b8>)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	089b      	lsrs	r3, r3, #2
 80041ce:	3318      	adds	r3, #24
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041d6:	4b33      	ldr	r3, [pc, #204]	@ (80042a4 <HAL_GPIO_Init+0x2b8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	43da      	mvns	r2, r3
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4013      	ands	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	2380      	movs	r3, #128	@ 0x80
 80041ec:	035b      	lsls	r3, r3, #13
 80041ee:	4013      	ands	r3, r2
 80041f0:	d003      	beq.n	80041fa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041fa:	4b2a      	ldr	r3, [pc, #168]	@ (80042a4 <HAL_GPIO_Init+0x2b8>)
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004200:	4b28      	ldr	r3, [pc, #160]	@ (80042a4 <HAL_GPIO_Init+0x2b8>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	43da      	mvns	r2, r3
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4013      	ands	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	2380      	movs	r3, #128	@ 0x80
 8004216:	039b      	lsls	r3, r3, #14
 8004218:	4013      	ands	r3, r2
 800421a:	d003      	beq.n	8004224 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004224:	4b1f      	ldr	r3, [pc, #124]	@ (80042a4 <HAL_GPIO_Init+0x2b8>)
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800422a:	4a1e      	ldr	r2, [pc, #120]	@ (80042a4 <HAL_GPIO_Init+0x2b8>)
 800422c:	2384      	movs	r3, #132	@ 0x84
 800422e:	58d3      	ldr	r3, [r2, r3]
 8004230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	43da      	mvns	r2, r3
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	2380      	movs	r3, #128	@ 0x80
 8004242:	029b      	lsls	r3, r3, #10
 8004244:	4013      	ands	r3, r2
 8004246:	d003      	beq.n	8004250 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004250:	4914      	ldr	r1, [pc, #80]	@ (80042a4 <HAL_GPIO_Init+0x2b8>)
 8004252:	2284      	movs	r2, #132	@ 0x84
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004258:	4a12      	ldr	r2, [pc, #72]	@ (80042a4 <HAL_GPIO_Init+0x2b8>)
 800425a:	2380      	movs	r3, #128	@ 0x80
 800425c:	58d3      	ldr	r3, [r2, r3]
 800425e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	43da      	mvns	r2, r3
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	4013      	ands	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	2380      	movs	r3, #128	@ 0x80
 8004270:	025b      	lsls	r3, r3, #9
 8004272:	4013      	ands	r3, r2
 8004274:	d003      	beq.n	800427e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800427e:	4909      	ldr	r1, [pc, #36]	@ (80042a4 <HAL_GPIO_Init+0x2b8>)
 8004280:	2280      	movs	r2, #128	@ 0x80
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	3301      	adds	r3, #1
 800428a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	40da      	lsrs	r2, r3
 8004294:	1e13      	subs	r3, r2, #0
 8004296:	d000      	beq.n	800429a <HAL_GPIO_Init+0x2ae>
 8004298:	e6b0      	b.n	8003ffc <HAL_GPIO_Init+0x10>
  }
}
 800429a:	46c0      	nop			@ (mov r8, r8)
 800429c:	46c0      	nop			@ (mov r8, r8)
 800429e:	46bd      	mov	sp, r7
 80042a0:	b006      	add	sp, #24
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40021800 	.word	0x40021800
 80042a8:	50000400 	.word	0x50000400
 80042ac:	50000800 	.word	0x50000800
 80042b0:	50000c00 	.word	0x50000c00

080042b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	000a      	movs	r2, r1
 80042be:	1cbb      	adds	r3, r7, #2
 80042c0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	1cba      	adds	r2, r7, #2
 80042c8:	8812      	ldrh	r2, [r2, #0]
 80042ca:	4013      	ands	r3, r2
 80042cc:	d004      	beq.n	80042d8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80042ce:	230f      	movs	r3, #15
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	2201      	movs	r2, #1
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	e003      	b.n	80042e0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042d8:	230f      	movs	r3, #15
 80042da:	18fb      	adds	r3, r7, r3
 80042dc:	2200      	movs	r2, #0
 80042de:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80042e0:	230f      	movs	r3, #15
 80042e2:	18fb      	adds	r3, r7, r3
 80042e4:	781b      	ldrb	r3, [r3, #0]
}
 80042e6:	0018      	movs	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b004      	add	sp, #16
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b082      	sub	sp, #8
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	0008      	movs	r0, r1
 80042f8:	0011      	movs	r1, r2
 80042fa:	1cbb      	adds	r3, r7, #2
 80042fc:	1c02      	adds	r2, r0, #0
 80042fe:	801a      	strh	r2, [r3, #0]
 8004300:	1c7b      	adds	r3, r7, #1
 8004302:	1c0a      	adds	r2, r1, #0
 8004304:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004306:	1c7b      	adds	r3, r7, #1
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d004      	beq.n	8004318 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800430e:	1cbb      	adds	r3, r7, #2
 8004310:	881a      	ldrh	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004316:	e003      	b.n	8004320 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004318:	1cbb      	adds	r3, r7, #2
 800431a:	881a      	ldrh	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004320:	46c0      	nop			@ (mov r8, r8)
 8004322:	46bd      	mov	sp, r7
 8004324:	b002      	add	sp, #8
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	000a      	movs	r2, r1
 8004332:	1cbb      	adds	r3, r7, #2
 8004334:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800433c:	1cbb      	adds	r3, r7, #2
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4013      	ands	r3, r2
 8004344:	041a      	lsls	r2, r3, #16
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	43db      	mvns	r3, r3
 800434a:	1cb9      	adds	r1, r7, #2
 800434c:	8809      	ldrh	r1, [r1, #0]
 800434e:	400b      	ands	r3, r1
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	619a      	str	r2, [r3, #24]
}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	46bd      	mov	sp, r7
 800435a:	b004      	add	sp, #16
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	0002      	movs	r2, r0
 8004368:	1dbb      	adds	r3, r7, #6
 800436a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800436c:	4b10      	ldr	r3, [pc, #64]	@ (80043b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	1dba      	adds	r2, r7, #6
 8004372:	8812      	ldrh	r2, [r2, #0]
 8004374:	4013      	ands	r3, r2
 8004376:	d008      	beq.n	800438a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004378:	4b0d      	ldr	r3, [pc, #52]	@ (80043b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800437a:	1dba      	adds	r2, r7, #6
 800437c:	8812      	ldrh	r2, [r2, #0]
 800437e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004380:	1dbb      	adds	r3, r7, #6
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	0018      	movs	r0, r3
 8004386:	f7fe f851 	bl	800242c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800438a:	4b09      	ldr	r3, [pc, #36]	@ (80043b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	1dba      	adds	r2, r7, #6
 8004390:	8812      	ldrh	r2, [r2, #0]
 8004392:	4013      	ands	r3, r2
 8004394:	d008      	beq.n	80043a8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004396:	4b06      	ldr	r3, [pc, #24]	@ (80043b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004398:	1dba      	adds	r2, r7, #6
 800439a:	8812      	ldrh	r2, [r2, #0]
 800439c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800439e:	1dbb      	adds	r3, r7, #6
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	0018      	movs	r0, r3
 80043a4:	f7fd ffee 	bl	8002384 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80043a8:	46c0      	nop			@ (mov r8, r8)
 80043aa:	46bd      	mov	sp, r7
 80043ac:	b002      	add	sp, #8
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40021800 	.word	0x40021800

080043b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e08f      	b.n	80044e6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2241      	movs	r2, #65	@ 0x41
 80043ca:	5c9b      	ldrb	r3, [r3, r2]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d107      	bne.n	80043e2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2240      	movs	r2, #64	@ 0x40
 80043d6:	2100      	movs	r1, #0
 80043d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	0018      	movs	r0, r3
 80043de:	f7fe fe93 	bl	8003108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2241      	movs	r2, #65	@ 0x41
 80043e6:	2124      	movs	r1, #36	@ 0x24
 80043e8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2101      	movs	r1, #1
 80043f6:	438a      	bics	r2, r1
 80043f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	493b      	ldr	r1, [pc, #236]	@ (80044f0 <HAL_I2C_Init+0x13c>)
 8004404:	400a      	ands	r2, r1
 8004406:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4938      	ldr	r1, [pc, #224]	@ (80044f4 <HAL_I2C_Init+0x140>)
 8004414:	400a      	ands	r2, r1
 8004416:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d108      	bne.n	8004432 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2180      	movs	r1, #128	@ 0x80
 800442a:	0209      	lsls	r1, r1, #8
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	e007      	b.n	8004442 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2184      	movs	r1, #132	@ 0x84
 800443c:	0209      	lsls	r1, r1, #8
 800443e:	430a      	orrs	r2, r1
 8004440:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d109      	bne.n	800445e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2180      	movs	r1, #128	@ 0x80
 8004456:	0109      	lsls	r1, r1, #4
 8004458:	430a      	orrs	r2, r1
 800445a:	605a      	str	r2, [r3, #4]
 800445c:	e007      	b.n	800446e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4923      	ldr	r1, [pc, #140]	@ (80044f8 <HAL_I2C_Init+0x144>)
 800446a:	400a      	ands	r2, r1
 800446c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4920      	ldr	r1, [pc, #128]	@ (80044fc <HAL_I2C_Init+0x148>)
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	491a      	ldr	r1, [pc, #104]	@ (80044f4 <HAL_I2C_Init+0x140>)
 800448a:	400a      	ands	r2, r1
 800448c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691a      	ldr	r2, [r3, #16]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	431a      	orrs	r2, r3
 8004498:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69d9      	ldr	r1, [r3, #28]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1a      	ldr	r2, [r3, #32]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2101      	movs	r1, #1
 80044c4:	430a      	orrs	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2241      	movs	r2, #65	@ 0x41
 80044d2:	2120      	movs	r1, #32
 80044d4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2242      	movs	r2, #66	@ 0x42
 80044e0:	2100      	movs	r1, #0
 80044e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	0018      	movs	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	b002      	add	sp, #8
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	46c0      	nop			@ (mov r8, r8)
 80044f0:	f0ffffff 	.word	0xf0ffffff
 80044f4:	ffff7fff 	.word	0xffff7fff
 80044f8:	fffff7ff 	.word	0xfffff7ff
 80044fc:	02008000 	.word	0x02008000

08004500 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004500:	b590      	push	{r4, r7, lr}
 8004502:	b089      	sub	sp, #36	@ 0x24
 8004504:	af02      	add	r7, sp, #8
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	0008      	movs	r0, r1
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	0019      	movs	r1, r3
 800450e:	230a      	movs	r3, #10
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	1c02      	adds	r2, r0, #0
 8004514:	801a      	strh	r2, [r3, #0]
 8004516:	2308      	movs	r3, #8
 8004518:	18fb      	adds	r3, r7, r3
 800451a:	1c0a      	adds	r2, r1, #0
 800451c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2241      	movs	r2, #65	@ 0x41
 8004522:	5c9b      	ldrb	r3, [r3, r2]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b20      	cmp	r3, #32
 8004528:	d000      	beq.n	800452c <HAL_I2C_Master_Transmit+0x2c>
 800452a:	e10a      	b.n	8004742 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2240      	movs	r2, #64	@ 0x40
 8004530:	5c9b      	ldrb	r3, [r3, r2]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_I2C_Master_Transmit+0x3a>
 8004536:	2302      	movs	r3, #2
 8004538:	e104      	b.n	8004744 <HAL_I2C_Master_Transmit+0x244>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2240      	movs	r2, #64	@ 0x40
 800453e:	2101      	movs	r1, #1
 8004540:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004542:	f7ff f9b7 	bl	80038b4 <HAL_GetTick>
 8004546:	0003      	movs	r3, r0
 8004548:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800454a:	2380      	movs	r3, #128	@ 0x80
 800454c:	0219      	lsls	r1, r3, #8
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	2319      	movs	r3, #25
 8004556:	2201      	movs	r2, #1
 8004558:	f000 fa26 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 800455c:	1e03      	subs	r3, r0, #0
 800455e:	d001      	beq.n	8004564 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0ef      	b.n	8004744 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2241      	movs	r2, #65	@ 0x41
 8004568:	2121      	movs	r1, #33	@ 0x21
 800456a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2242      	movs	r2, #66	@ 0x42
 8004570:	2110      	movs	r1, #16
 8004572:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2208      	movs	r2, #8
 8004584:	18ba      	adds	r2, r7, r2
 8004586:	8812      	ldrh	r2, [r2, #0]
 8004588:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	2bff      	cmp	r3, #255	@ 0xff
 8004598:	d906      	bls.n	80045a8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	22ff      	movs	r2, #255	@ 0xff
 800459e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80045a0:	2380      	movs	r3, #128	@ 0x80
 80045a2:	045b      	lsls	r3, r3, #17
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	e007      	b.n	80045b8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80045b2:	2380      	movs	r3, #128	@ 0x80
 80045b4:	049b      	lsls	r3, r3, #18
 80045b6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d027      	beq.n	8004610 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	781a      	ldrb	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	3301      	adds	r3, #1
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	697c      	ldr	r4, [r7, #20]
 80045fc:	230a      	movs	r3, #10
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	8819      	ldrh	r1, [r3, #0]
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	4b51      	ldr	r3, [pc, #324]	@ (800474c <HAL_I2C_Master_Transmit+0x24c>)
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	0023      	movs	r3, r4
 800460a:	f000 fc45 	bl	8004e98 <I2C_TransferConfig>
 800460e:	e06f      	b.n	80046f0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004614:	b2da      	uxtb	r2, r3
 8004616:	697c      	ldr	r4, [r7, #20]
 8004618:	230a      	movs	r3, #10
 800461a:	18fb      	adds	r3, r7, r3
 800461c:	8819      	ldrh	r1, [r3, #0]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	4b4a      	ldr	r3, [pc, #296]	@ (800474c <HAL_I2C_Master_Transmit+0x24c>)
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	0023      	movs	r3, r4
 8004626:	f000 fc37 	bl	8004e98 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800462a:	e061      	b.n	80046f0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	0018      	movs	r0, r3
 8004634:	f000 fa10 	bl	8004a58 <I2C_WaitOnTXISFlagUntilTimeout>
 8004638:	1e03      	subs	r3, r0, #0
 800463a:	d001      	beq.n	8004640 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e081      	b.n	8004744 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d03a      	beq.n	80046f0 <HAL_I2C_Master_Transmit+0x1f0>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467e:	2b00      	cmp	r3, #0
 8004680:	d136      	bne.n	80046f0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004682:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	0013      	movs	r3, r2
 800468c:	2200      	movs	r2, #0
 800468e:	2180      	movs	r1, #128	@ 0x80
 8004690:	f000 f98a 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 8004694:	1e03      	subs	r3, r0, #0
 8004696:	d001      	beq.n	800469c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e053      	b.n	8004744 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2bff      	cmp	r3, #255	@ 0xff
 80046a4:	d911      	bls.n	80046ca <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	22ff      	movs	r2, #255	@ 0xff
 80046aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	2380      	movs	r3, #128	@ 0x80
 80046b4:	045c      	lsls	r4, r3, #17
 80046b6:	230a      	movs	r3, #10
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	8819      	ldrh	r1, [r3, #0]
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	2300      	movs	r3, #0
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	0023      	movs	r3, r4
 80046c4:	f000 fbe8 	bl	8004e98 <I2C_TransferConfig>
 80046c8:	e012      	b.n	80046f0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	2380      	movs	r3, #128	@ 0x80
 80046dc:	049c      	lsls	r4, r3, #18
 80046de:	230a      	movs	r3, #10
 80046e0:	18fb      	adds	r3, r7, r3
 80046e2:	8819      	ldrh	r1, [r3, #0]
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	2300      	movs	r3, #0
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	0023      	movs	r3, r4
 80046ec:	f000 fbd4 	bl	8004e98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d198      	bne.n	800462c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	0018      	movs	r0, r3
 8004702:	f000 f9ef 	bl	8004ae4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004706:	1e03      	subs	r3, r0, #0
 8004708:	d001      	beq.n	800470e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e01a      	b.n	8004744 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2220      	movs	r2, #32
 8004714:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	490b      	ldr	r1, [pc, #44]	@ (8004750 <HAL_I2C_Master_Transmit+0x250>)
 8004722:	400a      	ands	r2, r1
 8004724:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2241      	movs	r2, #65	@ 0x41
 800472a:	2120      	movs	r1, #32
 800472c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2242      	movs	r2, #66	@ 0x42
 8004732:	2100      	movs	r1, #0
 8004734:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2240      	movs	r2, #64	@ 0x40
 800473a:	2100      	movs	r1, #0
 800473c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	e000      	b.n	8004744 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8004742:	2302      	movs	r3, #2
  }
}
 8004744:	0018      	movs	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	b007      	add	sp, #28
 800474a:	bd90      	pop	{r4, r7, pc}
 800474c:	80002000 	.word	0x80002000
 8004750:	fe00e800 	.word	0xfe00e800

08004754 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004754:	b590      	push	{r4, r7, lr}
 8004756:	b089      	sub	sp, #36	@ 0x24
 8004758:	af02      	add	r7, sp, #8
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	0008      	movs	r0, r1
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	0019      	movs	r1, r3
 8004762:	230a      	movs	r3, #10
 8004764:	18fb      	adds	r3, r7, r3
 8004766:	1c02      	adds	r2, r0, #0
 8004768:	801a      	strh	r2, [r3, #0]
 800476a:	2308      	movs	r3, #8
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	1c0a      	adds	r2, r1, #0
 8004770:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2241      	movs	r2, #65	@ 0x41
 8004776:	5c9b      	ldrb	r3, [r3, r2]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b20      	cmp	r3, #32
 800477c:	d000      	beq.n	8004780 <HAL_I2C_Master_Receive+0x2c>
 800477e:	e0e8      	b.n	8004952 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2240      	movs	r2, #64	@ 0x40
 8004784:	5c9b      	ldrb	r3, [r3, r2]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <HAL_I2C_Master_Receive+0x3a>
 800478a:	2302      	movs	r3, #2
 800478c:	e0e2      	b.n	8004954 <HAL_I2C_Master_Receive+0x200>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2240      	movs	r2, #64	@ 0x40
 8004792:	2101      	movs	r1, #1
 8004794:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004796:	f7ff f88d 	bl	80038b4 <HAL_GetTick>
 800479a:	0003      	movs	r3, r0
 800479c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800479e:	2380      	movs	r3, #128	@ 0x80
 80047a0:	0219      	lsls	r1, r3, #8
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	2319      	movs	r3, #25
 80047aa:	2201      	movs	r2, #1
 80047ac:	f000 f8fc 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 80047b0:	1e03      	subs	r3, r0, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0cd      	b.n	8004954 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2241      	movs	r2, #65	@ 0x41
 80047bc:	2122      	movs	r1, #34	@ 0x22
 80047be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2242      	movs	r2, #66	@ 0x42
 80047c4:	2110      	movs	r1, #16
 80047c6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2208      	movs	r2, #8
 80047d8:	18ba      	adds	r2, r7, r2
 80047da:	8812      	ldrh	r2, [r2, #0]
 80047dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2bff      	cmp	r3, #255	@ 0xff
 80047ec:	d911      	bls.n	8004812 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	22ff      	movs	r2, #255	@ 0xff
 80047f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	2380      	movs	r3, #128	@ 0x80
 80047fc:	045c      	lsls	r4, r3, #17
 80047fe:	230a      	movs	r3, #10
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	8819      	ldrh	r1, [r3, #0]
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	4b55      	ldr	r3, [pc, #340]	@ (800495c <HAL_I2C_Master_Receive+0x208>)
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	0023      	movs	r3, r4
 800480c:	f000 fb44 	bl	8004e98 <I2C_TransferConfig>
 8004810:	e076      	b.n	8004900 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004820:	b2da      	uxtb	r2, r3
 8004822:	2380      	movs	r3, #128	@ 0x80
 8004824:	049c      	lsls	r4, r3, #18
 8004826:	230a      	movs	r3, #10
 8004828:	18fb      	adds	r3, r7, r3
 800482a:	8819      	ldrh	r1, [r3, #0]
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	4b4b      	ldr	r3, [pc, #300]	@ (800495c <HAL_I2C_Master_Receive+0x208>)
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	0023      	movs	r3, r4
 8004834:	f000 fb30 	bl	8004e98 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004838:	e062      	b.n	8004900 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	0018      	movs	r0, r3
 8004842:	f000 f993 	bl	8004b6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004846:	1e03      	subs	r3, r0, #0
 8004848:	d001      	beq.n	800484e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e082      	b.n	8004954 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d03a      	beq.n	8004900 <HAL_I2C_Master_Receive+0x1ac>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800488e:	2b00      	cmp	r3, #0
 8004890:	d136      	bne.n	8004900 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004892:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	0013      	movs	r3, r2
 800489c:	2200      	movs	r2, #0
 800489e:	2180      	movs	r1, #128	@ 0x80
 80048a0:	f000 f882 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 80048a4:	1e03      	subs	r3, r0, #0
 80048a6:	d001      	beq.n	80048ac <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e053      	b.n	8004954 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2bff      	cmp	r3, #255	@ 0xff
 80048b4:	d911      	bls.n	80048da <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	22ff      	movs	r2, #255	@ 0xff
 80048ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	2380      	movs	r3, #128	@ 0x80
 80048c4:	045c      	lsls	r4, r3, #17
 80048c6:	230a      	movs	r3, #10
 80048c8:	18fb      	adds	r3, r7, r3
 80048ca:	8819      	ldrh	r1, [r3, #0]
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	2300      	movs	r3, #0
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	0023      	movs	r3, r4
 80048d4:	f000 fae0 	bl	8004e98 <I2C_TransferConfig>
 80048d8:	e012      	b.n	8004900 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	2380      	movs	r3, #128	@ 0x80
 80048ec:	049c      	lsls	r4, r3, #18
 80048ee:	230a      	movs	r3, #10
 80048f0:	18fb      	adds	r3, r7, r3
 80048f2:	8819      	ldrh	r1, [r3, #0]
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	2300      	movs	r3, #0
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	0023      	movs	r3, r4
 80048fc:	f000 facc 	bl	8004e98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d197      	bne.n	800483a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	0018      	movs	r0, r3
 8004912:	f000 f8e7 	bl	8004ae4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004916:	1e03      	subs	r3, r0, #0
 8004918:	d001      	beq.n	800491e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e01a      	b.n	8004954 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2220      	movs	r2, #32
 8004924:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	490b      	ldr	r1, [pc, #44]	@ (8004960 <HAL_I2C_Master_Receive+0x20c>)
 8004932:	400a      	ands	r2, r1
 8004934:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2241      	movs	r2, #65	@ 0x41
 800493a:	2120      	movs	r1, #32
 800493c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2242      	movs	r2, #66	@ 0x42
 8004942:	2100      	movs	r1, #0
 8004944:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2240      	movs	r2, #64	@ 0x40
 800494a:	2100      	movs	r1, #0
 800494c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	e000      	b.n	8004954 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004952:	2302      	movs	r3, #2
  }
}
 8004954:	0018      	movs	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	b007      	add	sp, #28
 800495a:	bd90      	pop	{r4, r7, pc}
 800495c:	80002400 	.word	0x80002400
 8004960:	fe00e800 	.word	0xfe00e800

08004964 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	2202      	movs	r2, #2
 8004974:	4013      	ands	r3, r2
 8004976:	2b02      	cmp	r3, #2
 8004978:	d103      	bne.n	8004982 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2200      	movs	r2, #0
 8004980:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	2201      	movs	r2, #1
 800498a:	4013      	ands	r3, r2
 800498c:	2b01      	cmp	r3, #1
 800498e:	d007      	beq.n	80049a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2101      	movs	r1, #1
 800499c:	430a      	orrs	r2, r1
 800499e:	619a      	str	r2, [r3, #24]
  }
}
 80049a0:	46c0      	nop			@ (mov r8, r8)
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b002      	add	sp, #8
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	1dfb      	adds	r3, r7, #7
 80049b6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049b8:	e03a      	b.n	8004a30 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	6839      	ldr	r1, [r7, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	0018      	movs	r0, r3
 80049c2:	f000 f971 	bl	8004ca8 <I2C_IsErrorOccurred>
 80049c6:	1e03      	subs	r3, r0, #0
 80049c8:	d001      	beq.n	80049ce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e040      	b.n	8004a50 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	3301      	adds	r3, #1
 80049d2:	d02d      	beq.n	8004a30 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d4:	f7fe ff6e 	bl	80038b4 <HAL_GetTick>
 80049d8:	0002      	movs	r2, r0
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d302      	bcc.n	80049ea <I2C_WaitOnFlagUntilTimeout+0x42>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d122      	bne.n	8004a30 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	4013      	ands	r3, r2
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	425a      	negs	r2, r3
 80049fa:	4153      	adcs	r3, r2
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	001a      	movs	r2, r3
 8004a00:	1dfb      	adds	r3, r7, #7
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d113      	bne.n	8004a30 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2241      	movs	r2, #65	@ 0x41
 8004a18:	2120      	movs	r1, #32
 8004a1a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2242      	movs	r2, #66	@ 0x42
 8004a20:	2100      	movs	r1, #0
 8004a22:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2240      	movs	r2, #64	@ 0x40
 8004a28:	2100      	movs	r1, #0
 8004a2a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e00f      	b.n	8004a50 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	425a      	negs	r2, r3
 8004a40:	4153      	adcs	r3, r2
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	001a      	movs	r2, r3
 8004a46:	1dfb      	adds	r3, r7, #7
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d0b5      	beq.n	80049ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	0018      	movs	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	b004      	add	sp, #16
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a64:	e032      	b.n	8004acc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f000 f91b 	bl	8004ca8 <I2C_IsErrorOccurred>
 8004a72:	1e03      	subs	r3, r0, #0
 8004a74:	d001      	beq.n	8004a7a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e030      	b.n	8004adc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	d025      	beq.n	8004acc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a80:	f7fe ff18 	bl	80038b4 <HAL_GetTick>
 8004a84:	0002      	movs	r2, r0
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d302      	bcc.n	8004a96 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d11a      	bne.n	8004acc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d013      	beq.n	8004acc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2241      	movs	r2, #65	@ 0x41
 8004ab4:	2120      	movs	r1, #32
 8004ab6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2242      	movs	r2, #66	@ 0x42
 8004abc:	2100      	movs	r1, #0
 8004abe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2240      	movs	r2, #64	@ 0x40
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e007      	b.n	8004adc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d1c5      	bne.n	8004a66 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	0018      	movs	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b004      	add	sp, #16
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004af0:	e02f      	b.n	8004b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	0018      	movs	r0, r3
 8004afa:	f000 f8d5 	bl	8004ca8 <I2C_IsErrorOccurred>
 8004afe:	1e03      	subs	r3, r0, #0
 8004b00:	d001      	beq.n	8004b06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e02d      	b.n	8004b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b06:	f7fe fed5 	bl	80038b4 <HAL_GetTick>
 8004b0a:	0002      	movs	r2, r0
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d302      	bcc.n	8004b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d11a      	bne.n	8004b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	2220      	movs	r2, #32
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	d013      	beq.n	8004b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2e:	2220      	movs	r2, #32
 8004b30:	431a      	orrs	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2241      	movs	r2, #65	@ 0x41
 8004b3a:	2120      	movs	r1, #32
 8004b3c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2242      	movs	r2, #66	@ 0x42
 8004b42:	2100      	movs	r1, #0
 8004b44:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2240      	movs	r2, #64	@ 0x40
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e007      	b.n	8004b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d1c8      	bne.n	8004af2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	0018      	movs	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b004      	add	sp, #16
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b78:	2317      	movs	r3, #23
 8004b7a:	18fb      	adds	r3, r7, r3
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004b80:	e07b      	b.n	8004c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	68b9      	ldr	r1, [r7, #8]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f000 f88d 	bl	8004ca8 <I2C_IsErrorOccurred>
 8004b8e:	1e03      	subs	r3, r0, #0
 8004b90:	d003      	beq.n	8004b9a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004b92:	2317      	movs	r3, #23
 8004b94:	18fb      	adds	r3, r7, r3
 8004b96:	2201      	movs	r2, #1
 8004b98:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d140      	bne.n	8004c2a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004ba8:	2117      	movs	r1, #23
 8004baa:	187b      	adds	r3, r7, r1
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d13b      	bne.n	8004c2a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	2204      	movs	r2, #4
 8004bba:	4013      	ands	r3, r2
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d106      	bne.n	8004bce <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004bc8:	187b      	adds	r3, r7, r1
 8004bca:	2200      	movs	r2, #0
 8004bcc:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	2210      	movs	r2, #16
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d123      	bne.n	8004c24 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2210      	movs	r2, #16
 8004be2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2204      	movs	r2, #4
 8004be8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4929      	ldr	r1, [pc, #164]	@ (8004ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004bfe:	400a      	ands	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2241      	movs	r2, #65	@ 0x41
 8004c06:	2120      	movs	r1, #32
 8004c08:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2242      	movs	r2, #66	@ 0x42
 8004c0e:	2100      	movs	r1, #0
 8004c10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2240      	movs	r2, #64	@ 0x40
 8004c16:	2100      	movs	r1, #0
 8004c18:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004c1a:	2317      	movs	r3, #23
 8004c1c:	18fb      	adds	r3, r7, r3
 8004c1e:	2201      	movs	r2, #1
 8004c20:	701a      	strb	r2, [r3, #0]
 8004c22:	e002      	b.n	8004c2a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004c2a:	f7fe fe43 	bl	80038b4 <HAL_GetTick>
 8004c2e:	0002      	movs	r2, r0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d302      	bcc.n	8004c40 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d11c      	bne.n	8004c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004c40:	2017      	movs	r0, #23
 8004c42:	183b      	adds	r3, r7, r0
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d117      	bne.n	8004c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	2204      	movs	r2, #4
 8004c52:	4013      	ands	r3, r2
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d010      	beq.n	8004c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2241      	movs	r2, #65	@ 0x41
 8004c68:	2120      	movs	r1, #32
 8004c6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2240      	movs	r2, #64	@ 0x40
 8004c70:	2100      	movs	r1, #0
 8004c72:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004c74:	183b      	adds	r3, r7, r0
 8004c76:	2201      	movs	r2, #1
 8004c78:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	2204      	movs	r2, #4
 8004c82:	4013      	ands	r3, r2
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d005      	beq.n	8004c94 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004c88:	2317      	movs	r3, #23
 8004c8a:	18fb      	adds	r3, r7, r3
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d100      	bne.n	8004c94 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004c92:	e776      	b.n	8004b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004c94:	2317      	movs	r3, #23
 8004c96:	18fb      	adds	r3, r7, r3
 8004c98:	781b      	ldrb	r3, [r3, #0]
}
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	b006      	add	sp, #24
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	46c0      	nop			@ (mov r8, r8)
 8004ca4:	fe00e800 	.word	0xfe00e800

08004ca8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	@ 0x28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb4:	2327      	movs	r3, #39	@ 0x27
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	2200      	movs	r2, #0
 8004cba:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	2210      	movs	r2, #16
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d100      	bne.n	8004cd6 <I2C_IsErrorOccurred+0x2e>
 8004cd4:	e079      	b.n	8004dca <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2210      	movs	r2, #16
 8004cdc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004cde:	e057      	b.n	8004d90 <I2C_IsErrorOccurred+0xe8>
 8004ce0:	2227      	movs	r2, #39	@ 0x27
 8004ce2:	18bb      	adds	r3, r7, r2
 8004ce4:	18ba      	adds	r2, r7, r2
 8004ce6:	7812      	ldrb	r2, [r2, #0]
 8004ce8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	3301      	adds	r3, #1
 8004cee:	d04f      	beq.n	8004d90 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004cf0:	f7fe fde0 	bl	80038b4 <HAL_GetTick>
 8004cf4:	0002      	movs	r2, r0
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d302      	bcc.n	8004d06 <I2C_IsErrorOccurred+0x5e>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d144      	bne.n	8004d90 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	2380      	movs	r3, #128	@ 0x80
 8004d0e:	01db      	lsls	r3, r3, #7
 8004d10:	4013      	ands	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004d14:	2013      	movs	r0, #19
 8004d16:	183b      	adds	r3, r7, r0
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	2142      	movs	r1, #66	@ 0x42
 8004d1c:	5c52      	ldrb	r2, [r2, r1]
 8004d1e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	2380      	movs	r3, #128	@ 0x80
 8004d28:	021b      	lsls	r3, r3, #8
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	2380      	movs	r3, #128	@ 0x80
 8004d2e:	021b      	lsls	r3, r3, #8
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d126      	bne.n	8004d82 <I2C_IsErrorOccurred+0xda>
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	2380      	movs	r3, #128	@ 0x80
 8004d38:	01db      	lsls	r3, r3, #7
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d021      	beq.n	8004d82 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004d3e:	183b      	adds	r3, r7, r0
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d01d      	beq.n	8004d82 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2180      	movs	r1, #128	@ 0x80
 8004d52:	01c9      	lsls	r1, r1, #7
 8004d54:	430a      	orrs	r2, r1
 8004d56:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d58:	f7fe fdac 	bl	80038b4 <HAL_GetTick>
 8004d5c:	0003      	movs	r3, r0
 8004d5e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d60:	e00f      	b.n	8004d82 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d62:	f7fe fda7 	bl	80038b4 <HAL_GetTick>
 8004d66:	0002      	movs	r2, r0
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b19      	cmp	r3, #25
 8004d6e:	d908      	bls.n	8004d82 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	2220      	movs	r2, #32
 8004d74:	4313      	orrs	r3, r2
 8004d76:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004d78:	2327      	movs	r3, #39	@ 0x27
 8004d7a:	18fb      	adds	r3, r7, r3
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	701a      	strb	r2, [r3, #0]

              break;
 8004d80:	e006      	b.n	8004d90 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d1e8      	bne.n	8004d62 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2220      	movs	r2, #32
 8004d98:	4013      	ands	r3, r2
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	d004      	beq.n	8004da8 <I2C_IsErrorOccurred+0x100>
 8004d9e:	2327      	movs	r3, #39	@ 0x27
 8004da0:	18fb      	adds	r3, r7, r3
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d09b      	beq.n	8004ce0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004da8:	2327      	movs	r3, #39	@ 0x27
 8004daa:	18fb      	adds	r3, r7, r3
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2220      	movs	r2, #32
 8004db8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004dc2:	2327      	movs	r3, #39	@ 0x27
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	2380      	movs	r3, #128	@ 0x80
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d00c      	beq.n	8004df6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	2201      	movs	r2, #1
 8004de0:	4313      	orrs	r3, r2
 8004de2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2280      	movs	r2, #128	@ 0x80
 8004dea:	0052      	lsls	r2, r2, #1
 8004dec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dee:	2327      	movs	r3, #39	@ 0x27
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	2201      	movs	r2, #1
 8004df4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	2380      	movs	r3, #128	@ 0x80
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	d00c      	beq.n	8004e1a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	2208      	movs	r2, #8
 8004e04:	4313      	orrs	r3, r2
 8004e06:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2280      	movs	r2, #128	@ 0x80
 8004e0e:	00d2      	lsls	r2, r2, #3
 8004e10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e12:	2327      	movs	r3, #39	@ 0x27
 8004e14:	18fb      	adds	r3, r7, r3
 8004e16:	2201      	movs	r2, #1
 8004e18:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	2380      	movs	r3, #128	@ 0x80
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4013      	ands	r3, r2
 8004e22:	d00c      	beq.n	8004e3e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	2202      	movs	r2, #2
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2280      	movs	r2, #128	@ 0x80
 8004e32:	0092      	lsls	r2, r2, #2
 8004e34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e36:	2327      	movs	r3, #39	@ 0x27
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004e3e:	2327      	movs	r3, #39	@ 0x27
 8004e40:	18fb      	adds	r3, r7, r3
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01d      	beq.n	8004e84 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	f7ff fd8a 	bl	8004964 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	490e      	ldr	r1, [pc, #56]	@ (8004e94 <I2C_IsErrorOccurred+0x1ec>)
 8004e5c:	400a      	ands	r2, r1
 8004e5e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2241      	movs	r2, #65	@ 0x41
 8004e70:	2120      	movs	r1, #32
 8004e72:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2242      	movs	r2, #66	@ 0x42
 8004e78:	2100      	movs	r1, #0
 8004e7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2240      	movs	r2, #64	@ 0x40
 8004e80:	2100      	movs	r1, #0
 8004e82:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004e84:	2327      	movs	r3, #39	@ 0x27
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	781b      	ldrb	r3, [r3, #0]
}
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b00a      	add	sp, #40	@ 0x28
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	46c0      	nop			@ (mov r8, r8)
 8004e94:	fe00e800 	.word	0xfe00e800

08004e98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e98:	b590      	push	{r4, r7, lr}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	0008      	movs	r0, r1
 8004ea2:	0011      	movs	r1, r2
 8004ea4:	607b      	str	r3, [r7, #4]
 8004ea6:	240a      	movs	r4, #10
 8004ea8:	193b      	adds	r3, r7, r4
 8004eaa:	1c02      	adds	r2, r0, #0
 8004eac:	801a      	strh	r2, [r3, #0]
 8004eae:	2009      	movs	r0, #9
 8004eb0:	183b      	adds	r3, r7, r0
 8004eb2:	1c0a      	adds	r2, r1, #0
 8004eb4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004eb6:	193b      	adds	r3, r7, r4
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	059b      	lsls	r3, r3, #22
 8004ebc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ebe:	183b      	adds	r3, r7, r0
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	0419      	lsls	r1, r3, #16
 8004ec4:	23ff      	movs	r3, #255	@ 0xff
 8004ec6:	041b      	lsls	r3, r3, #16
 8004ec8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004eca:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ee2:	0d51      	lsrs	r1, r2, #21
 8004ee4:	2280      	movs	r2, #128	@ 0x80
 8004ee6:	00d2      	lsls	r2, r2, #3
 8004ee8:	400a      	ands	r2, r1
 8004eea:	4907      	ldr	r1, [pc, #28]	@ (8004f08 <I2C_TransferConfig+0x70>)
 8004eec:	430a      	orrs	r2, r1
 8004eee:	43d2      	mvns	r2, r2
 8004ef0:	401a      	ands	r2, r3
 8004ef2:	0011      	movs	r1, r2
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004efe:	46c0      	nop			@ (mov r8, r8)
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b007      	add	sp, #28
 8004f04:	bd90      	pop	{r4, r7, pc}
 8004f06:	46c0      	nop			@ (mov r8, r8)
 8004f08:	03ff63ff 	.word	0x03ff63ff

08004f0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2241      	movs	r2, #65	@ 0x41
 8004f1a:	5c9b      	ldrb	r3, [r3, r2]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b20      	cmp	r3, #32
 8004f20:	d138      	bne.n	8004f94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2240      	movs	r2, #64	@ 0x40
 8004f26:	5c9b      	ldrb	r3, [r3, r2]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e032      	b.n	8004f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2240      	movs	r2, #64	@ 0x40
 8004f34:	2101      	movs	r1, #1
 8004f36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2241      	movs	r2, #65	@ 0x41
 8004f3c:	2124      	movs	r1, #36	@ 0x24
 8004f3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	438a      	bics	r2, r1
 8004f4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4911      	ldr	r1, [pc, #68]	@ (8004fa0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004f5c:	400a      	ands	r2, r1
 8004f5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6819      	ldr	r1, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2241      	movs	r2, #65	@ 0x41
 8004f84:	2120      	movs	r1, #32
 8004f86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2240      	movs	r2, #64	@ 0x40
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	e000      	b.n	8004f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f94:	2302      	movs	r3, #2
  }
}
 8004f96:	0018      	movs	r0, r3
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	b002      	add	sp, #8
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	46c0      	nop			@ (mov r8, r8)
 8004fa0:	ffffefff 	.word	0xffffefff

08004fa4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2241      	movs	r2, #65	@ 0x41
 8004fb2:	5c9b      	ldrb	r3, [r3, r2]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d139      	bne.n	800502e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2240      	movs	r2, #64	@ 0x40
 8004fbe:	5c9b      	ldrb	r3, [r3, r2]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e033      	b.n	8005030 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2240      	movs	r2, #64	@ 0x40
 8004fcc:	2101      	movs	r1, #1
 8004fce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2241      	movs	r2, #65	@ 0x41
 8004fd4:	2124      	movs	r1, #36	@ 0x24
 8004fd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	438a      	bics	r2, r1
 8004fe6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4a11      	ldr	r2, [pc, #68]	@ (8005038 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2101      	movs	r1, #1
 8005016:	430a      	orrs	r2, r1
 8005018:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2241      	movs	r2, #65	@ 0x41
 800501e:	2120      	movs	r1, #32
 8005020:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2240      	movs	r2, #64	@ 0x40
 8005026:	2100      	movs	r1, #0
 8005028:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	e000      	b.n	8005030 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800502e:	2302      	movs	r3, #2
  }
}
 8005030:	0018      	movs	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	b004      	add	sp, #16
 8005036:	bd80      	pop	{r7, pc}
 8005038:	fffff0ff 	.word	0xfffff0ff

0800503c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e0e5      	b.n	800521a <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2235      	movs	r2, #53	@ 0x35
 8005052:	5c9b      	ldrb	r3, [r3, r2]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d107      	bne.n	800506a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2234      	movs	r2, #52	@ 0x34
 800505e:	2100      	movs	r1, #0
 8005060:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	0018      	movs	r0, r3
 8005066:	f7fe f8b1 	bl	80031cc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2235      	movs	r2, #53	@ 0x35
 800506e:	2102      	movs	r1, #2
 8005070:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69da      	ldr	r2, [r3, #28]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4969      	ldr	r1, [pc, #420]	@ (8005224 <HAL_I2S_Init+0x1e8>)
 800507e:	400a      	ands	r2, r1
 8005080:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2202      	movs	r2, #2
 8005088:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d100      	bne.n	8005094 <HAL_I2S_Init+0x58>
 8005092:	e076      	b.n	8005182 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800509c:	2310      	movs	r3, #16
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	e001      	b.n	80050a6 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80050a2:	2320      	movs	r3, #32
 80050a4:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	d802      	bhi.n	80050b4 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 80050b4:	2380      	movs	r3, #128	@ 0x80
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	0018      	movs	r0, r3
 80050ba:	f001 f95d 	bl	8006378 <HAL_RCCEx_GetPeriphCLKFreq>
 80050be:	0003      	movs	r3, r0
 80050c0:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	2380      	movs	r3, #128	@ 0x80
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d131      	bne.n	8005132 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d016      	beq.n	8005104 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	0019      	movs	r1, r3
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f7fb f811 	bl	8000104 <__udivsi3>
 80050e2:	0003      	movs	r3, r0
 80050e4:	001a      	movs	r2, r3
 80050e6:	0013      	movs	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	189b      	adds	r3, r3, r2
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	001a      	movs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	0019      	movs	r1, r3
 80050f6:	0010      	movs	r0, r2
 80050f8:	f7fb f804 	bl	8000104 <__udivsi3>
 80050fc:	0003      	movs	r3, r0
 80050fe:	3305      	adds	r3, #5
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	e02a      	b.n	800515a <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	0019      	movs	r1, r3
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f7fa fffa 	bl	8000104 <__udivsi3>
 8005110:	0003      	movs	r3, r0
 8005112:	001a      	movs	r2, r3
 8005114:	0013      	movs	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	189b      	adds	r3, r3, r2
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	001a      	movs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	0019      	movs	r1, r3
 8005124:	0010      	movs	r0, r2
 8005126:	f7fa ffed 	bl	8000104 <__udivsi3>
 800512a:	0003      	movs	r3, r0
 800512c:	3305      	adds	r3, #5
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	e013      	b.n	800515a <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005132:	6979      	ldr	r1, [r7, #20]
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7fa ffe5 	bl	8000104 <__udivsi3>
 800513a:	0003      	movs	r3, r0
 800513c:	001a      	movs	r2, r3
 800513e:	0013      	movs	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	189b      	adds	r3, r3, r2
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	001a      	movs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	0019      	movs	r1, r3
 800514e:	0010      	movs	r0, r2
 8005150:	f7fa ffd8 	bl	8000104 <__udivsi3>
 8005154:	0003      	movs	r3, r0
 8005156:	3305      	adds	r3, #5
 8005158:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	210a      	movs	r1, #10
 800515e:	0018      	movs	r0, r3
 8005160:	f7fa ffd0 	bl	8000104 <__udivsi3>
 8005164:	0003      	movs	r3, r0
 8005166:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	2201      	movs	r2, #1
 800516c:	4013      	ands	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	085b      	lsrs	r3, r3, #1
 8005178:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	021b      	lsls	r3, r3, #8
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	e003      	b.n	800518a <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005182:	2302      	movs	r3, #2
 8005184:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d902      	bls.n	8005196 <HAL_I2S_Init+0x15a>
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	2bff      	cmp	r3, #255	@ 0xff
 8005194:	d907      	bls.n	80051a6 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800519a:	2210      	movs	r2, #16
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e039      	b.n	800521a <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691a      	ldr	r2, [r3, #16]
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	431a      	orrs	r2, r3
 80051ae:	0011      	movs	r1, r2
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	4a18      	ldr	r2, [pc, #96]	@ (8005224 <HAL_I2S_Init+0x1e8>)
 80051c2:	401a      	ands	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6859      	ldr	r1, [r3, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	4319      	orrs	r1, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	4319      	orrs	r1, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	430b      	orrs	r3, r1
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2180      	movs	r1, #128	@ 0x80
 80051e2:	0109      	lsls	r1, r1, #4
 80051e4:	430a      	orrs	r2, r1
 80051e6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2b30      	cmp	r3, #48	@ 0x30
 80051ee:	d003      	beq.n	80051f8 <HAL_I2S_Init+0x1bc>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2bb0      	cmp	r3, #176	@ 0xb0
 80051f6:	d108      	bne.n	800520a <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69da      	ldr	r2, [r3, #28]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2180      	movs	r1, #128	@ 0x80
 8005204:	0149      	lsls	r1, r1, #5
 8005206:	430a      	orrs	r2, r1
 8005208:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2235      	movs	r2, #53	@ 0x35
 8005214:	2101      	movs	r1, #1
 8005216:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	0018      	movs	r0, r3
 800521c:	46bd      	mov	sp, r7
 800521e:	b008      	add	sp, #32
 8005220:	bd80      	pop	{r7, pc}
 8005222:	46c0      	nop			@ (mov r8, r8)
 8005224:	fffff040 	.word	0xfffff040

08005228 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	1dbb      	adds	r3, r7, #6
 8005234:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <HAL_I2S_Transmit_DMA+0x1c>
 800523c:	1dbb      	adds	r3, r7, #6
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e091      	b.n	800536c <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2234      	movs	r2, #52	@ 0x34
 800524c:	5c9b      	ldrb	r3, [r3, r2]
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_I2S_Transmit_DMA+0x30>
 8005254:	2302      	movs	r3, #2
 8005256:	e089      	b.n	800536c <HAL_I2S_Transmit_DMA+0x144>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2234      	movs	r2, #52	@ 0x34
 800525c:	2101      	movs	r1, #1
 800525e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2235      	movs	r2, #53	@ 0x35
 8005264:	5c9b      	ldrb	r3, [r3, r2]
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	d005      	beq.n	8005278 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2234      	movs	r2, #52	@ 0x34
 8005270:	2100      	movs	r1, #0
 8005272:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8005274:	2302      	movs	r3, #2
 8005276:	e079      	b.n	800536c <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2235      	movs	r2, #53	@ 0x35
 800527c:	2103      	movs	r1, #3
 800527e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	2207      	movs	r2, #7
 8005294:	4013      	ands	r3, r2
 8005296:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2b03      	cmp	r3, #3
 800529c:	d002      	beq.n	80052a4 <HAL_I2S_Transmit_DMA+0x7c>
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b05      	cmp	r3, #5
 80052a2:	d10c      	bne.n	80052be <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 80052a4:	1dbb      	adds	r3, r7, #6
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	18db      	adds	r3, r3, r3
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 80052b0:	1dbb      	adds	r3, r7, #6
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	18db      	adds	r3, r3, r3
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	845a      	strh	r2, [r3, #34]	@ 0x22
 80052bc:	e007      	b.n	80052ce <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1dba      	adds	r2, r7, #6
 80052c2:	8812      	ldrh	r2, [r2, #0]
 80052c4:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	1dba      	adds	r2, r7, #6
 80052ca:	8812      	ldrh	r2, [r2, #0]
 80052cc:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d2:	4a28      	ldr	r2, [pc, #160]	@ (8005374 <HAL_I2S_Transmit_DMA+0x14c>)
 80052d4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052da:	4a27      	ldr	r2, [pc, #156]	@ (8005378 <HAL_I2S_Transmit_DMA+0x150>)
 80052dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e2:	4a26      	ldr	r2, [pc, #152]	@ (800537c <HAL_I2S_Transmit_DMA+0x154>)
 80052e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80052ee:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80052f6:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8c1b      	ldrh	r3, [r3, #32]
 80052fc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80052fe:	f7fe fc4b 	bl	8003b98 <HAL_DMA_Start_IT>
 8005302:	1e03      	subs	r3, r0, #0
 8005304:	d00f      	beq.n	8005326 <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530a:	2208      	movs	r2, #8
 800530c:	431a      	orrs	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2235      	movs	r2, #53	@ 0x35
 8005316:	2101      	movs	r1, #1
 8005318:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2234      	movs	r2, #52	@ 0x34
 800531e:	2100      	movs	r1, #0
 8005320:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e022      	b.n	800536c <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69da      	ldr	r2, [r3, #28]
 800532c:	2380      	movs	r3, #128	@ 0x80
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	4013      	ands	r3, r2
 8005332:	d108      	bne.n	8005346 <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	69da      	ldr	r2, [r3, #28]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2180      	movs	r1, #128	@ 0x80
 8005340:	00c9      	lsls	r1, r1, #3
 8005342:	430a      	orrs	r2, r1
 8005344:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2202      	movs	r2, #2
 800534e:	4013      	ands	r3, r2
 8005350:	d107      	bne.n	8005362 <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2102      	movs	r1, #2
 800535e:	430a      	orrs	r2, r1
 8005360:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2234      	movs	r2, #52	@ 0x34
 8005366:	2100      	movs	r1, #0
 8005368:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	0018      	movs	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	b006      	add	sp, #24
 8005372:	bd80      	pop	{r7, pc}
 8005374:	0800556d 	.word	0x0800556d
 8005378:	08005529 	.word	0x08005529
 800537c:	0800558b 	.word	0x0800558b

08005380 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005388:	2317      	movs	r3, #23
 800538a:	18fb      	adds	r3, r7, r3
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	2380      	movs	r3, #128	@ 0x80
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	429a      	cmp	r2, r3
 800539a:	d003      	beq.n	80053a4 <HAL_I2S_DMAStop+0x24>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d158      	bne.n	8005456 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d010      	beq.n	80053ce <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b0:	0018      	movs	r0, r3
 80053b2:	f7fe fc77 	bl	8003ca4 <HAL_DMA_Abort>
 80053b6:	1e03      	subs	r3, r0, #0
 80053b8:	d009      	beq.n	80053ce <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053be:	2208      	movs	r2, #8
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80053c6:	2317      	movs	r3, #23
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	2201      	movs	r2, #1
 80053cc:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	2364      	movs	r3, #100	@ 0x64
 80053d2:	2201      	movs	r2, #1
 80053d4:	2102      	movs	r1, #2
 80053d6:	f000 f8ff 	bl	80055d8 <I2S_WaitFlagStateUntilTimeout>
 80053da:	1e03      	subs	r3, r0, #0
 80053dc:	d00d      	beq.n	80053fa <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e2:	2201      	movs	r2, #1
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2235      	movs	r2, #53	@ 0x35
 80053ee:	2101      	movs	r1, #1
 80053f0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80053f2:	2317      	movs	r3, #23
 80053f4:	18fb      	adds	r3, r7, r3
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	2364      	movs	r3, #100	@ 0x64
 80053fe:	2200      	movs	r2, #0
 8005400:	2180      	movs	r1, #128	@ 0x80
 8005402:	f000 f8e9 	bl	80055d8 <I2S_WaitFlagStateUntilTimeout>
 8005406:	1e03      	subs	r3, r0, #0
 8005408:	d00d      	beq.n	8005426 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540e:	2201      	movs	r2, #1
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2235      	movs	r2, #53	@ 0x35
 800541a:	2101      	movs	r1, #1
 800541c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800541e:	2317      	movs	r3, #23
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	2201      	movs	r2, #1
 8005424:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4938      	ldr	r1, [pc, #224]	@ (8005514 <HAL_I2S_DMAStop+0x194>)
 8005432:	400a      	ands	r2, r1
 8005434:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005436:	2300      	movs	r3, #0
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2102      	movs	r1, #2
 8005450:	438a      	bics	r2, r1
 8005452:	605a      	str	r2, [r3, #4]
 8005454:	e053      	b.n	80054fe <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	23c0      	movs	r3, #192	@ 0xc0
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	429a      	cmp	r2, r3
 8005460:	d005      	beq.n	800546e <HAL_I2S_DMAStop+0xee>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	2380      	movs	r3, #128	@ 0x80
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	429a      	cmp	r2, r3
 800546c:	d147      	bne.n	80054fe <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005472:	2b00      	cmp	r3, #0
 8005474:	d010      	beq.n	8005498 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547a:	0018      	movs	r0, r3
 800547c:	f7fe fc12 	bl	8003ca4 <HAL_DMA_Abort>
 8005480:	1e03      	subs	r3, r0, #0
 8005482:	d009      	beq.n	8005498 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005488:	2208      	movs	r2, #8
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8005490:	2317      	movs	r3, #23
 8005492:	18fb      	adds	r3, r7, r3
 8005494:	2201      	movs	r2, #1
 8005496:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69da      	ldr	r2, [r3, #28]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	491c      	ldr	r1, [pc, #112]	@ (8005514 <HAL_I2S_DMAStop+0x194>)
 80054a4:	400a      	ands	r2, r1
 80054a6:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80054a8:	2300      	movs	r3, #0
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2101      	movs	r1, #1
 80054ca:	438a      	bics	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	2380      	movs	r3, #128	@ 0x80
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d10e      	bne.n	80054f8 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054de:	2240      	movs	r2, #64	@ 0x40
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2235      	movs	r2, #53	@ 0x35
 80054ea:	2101      	movs	r1, #1
 80054ec:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80054ee:	2317      	movs	r3, #23
 80054f0:	18fb      	adds	r3, r7, r3
 80054f2:	2201      	movs	r2, #1
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	e002      	b.n	80054fe <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2235      	movs	r2, #53	@ 0x35
 8005502:	2101      	movs	r1, #1
 8005504:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8005506:	2317      	movs	r3, #23
 8005508:	18fb      	adds	r3, r7, r3
 800550a:	781b      	ldrb	r3, [r3, #0]
}
 800550c:	0018      	movs	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	b006      	add	sp, #24
 8005512:	bd80      	pop	{r7, pc}
 8005514:	fffffbff 	.word	0xfffffbff

08005518 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005520:	46c0      	nop			@ (mov r8, r8)
 8005522:	46bd      	mov	sp, r7
 8005524:	b002      	add	sp, #8
 8005526:	bd80      	pop	{r7, pc}

08005528 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005534:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10e      	bne.n	800555c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2102      	movs	r1, #2
 800554a:	438a      	bics	r2, r1
 800554c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	845a      	strh	r2, [r3, #34]	@ 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2235      	movs	r2, #53	@ 0x35
 8005558:	2101      	movs	r1, #1
 800555a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	0018      	movs	r0, r3
 8005560:	f7fd fb36 	bl	8002bd0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005564:	46c0      	nop			@ (mov r8, r8)
 8005566:	46bd      	mov	sp, r7
 8005568:	b004      	add	sp, #16
 800556a:	bd80      	pop	{r7, pc}

0800556c <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005578:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	0018      	movs	r0, r3
 800557e:	f7fd fad3 	bl	8002b28 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005582:	46c0      	nop			@ (mov r8, r8)
 8005584:	46bd      	mov	sp, r7
 8005586:	b004      	add	sp, #16
 8005588:	bd80      	pop	{r7, pc}

0800558a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005596:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2103      	movs	r1, #3
 80055a4:	438a      	bics	r2, r1
 80055a6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2235      	movs	r2, #53	@ 0x35
 80055b8:	2101      	movs	r1, #1
 80055ba:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c0:	2208      	movs	r2, #8
 80055c2:	431a      	orrs	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	0018      	movs	r0, r3
 80055cc:	f7ff ffa4 	bl	8005518 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80055d0:	46c0      	nop			@ (mov r8, r8)
 80055d2:	46bd      	mov	sp, r7
 80055d4:	b004      	add	sp, #16
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	1dfb      	adds	r3, r7, #7
 80055e6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80055e8:	f7fe f964 	bl	80038b4 <HAL_GetTick>
 80055ec:	0003      	movs	r3, r0
 80055ee:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80055f0:	e017      	b.n	8005622 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	3301      	adds	r3, #1
 80055f6:	d014      	beq.n	8005622 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80055f8:	f7fe f95c 	bl	80038b4 <HAL_GetTick>
 80055fc:	0002      	movs	r2, r0
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d902      	bls.n	800560e <I2S_WaitFlagStateUntilTimeout+0x36>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2235      	movs	r2, #53	@ 0x35
 8005612:	2101      	movs	r1, #1
 8005614:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2234      	movs	r2, #52	@ 0x34
 800561a:	2100      	movs	r1, #0
 800561c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e00f      	b.n	8005642 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	4013      	ands	r3, r2
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	425a      	negs	r2, r3
 8005632:	4153      	adcs	r3, r2
 8005634:	b2db      	uxtb	r3, r3
 8005636:	001a      	movs	r2, r3
 8005638:	1dfb      	adds	r3, r7, #7
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d1d8      	bne.n	80055f2 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	0018      	movs	r0, r3
 8005644:	46bd      	mov	sp, r7
 8005646:	b006      	add	sp, #24
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005650:	4b04      	ldr	r3, [pc, #16]	@ (8005664 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	4b03      	ldr	r3, [pc, #12]	@ (8005664 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005656:	2180      	movs	r1, #128	@ 0x80
 8005658:	0049      	lsls	r1, r1, #1
 800565a:	430a      	orrs	r2, r1
 800565c:	601a      	str	r2, [r3, #0]
}
 800565e:	46c0      	nop			@ (mov r8, r8)
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40007000 	.word	0x40007000

08005668 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005670:	4b19      	ldr	r3, [pc, #100]	@ (80056d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a19      	ldr	r2, [pc, #100]	@ (80056dc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005676:	4013      	ands	r3, r2
 8005678:	0019      	movs	r1, r3
 800567a:	4b17      	ldr	r3, [pc, #92]	@ (80056d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	430a      	orrs	r2, r1
 8005680:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	2380      	movs	r3, #128	@ 0x80
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	429a      	cmp	r2, r3
 800568a:	d11f      	bne.n	80056cc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800568c:	4b14      	ldr	r3, [pc, #80]	@ (80056e0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	0013      	movs	r3, r2
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	189b      	adds	r3, r3, r2
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	4912      	ldr	r1, [pc, #72]	@ (80056e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800569a:	0018      	movs	r0, r3
 800569c:	f7fa fd32 	bl	8000104 <__udivsi3>
 80056a0:	0003      	movs	r3, r0
 80056a2:	3301      	adds	r3, #1
 80056a4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056a6:	e008      	b.n	80056ba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	e001      	b.n	80056ba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e009      	b.n	80056ce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056ba:	4b07      	ldr	r3, [pc, #28]	@ (80056d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	2380      	movs	r3, #128	@ 0x80
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	401a      	ands	r2, r3
 80056c4:	2380      	movs	r3, #128	@ 0x80
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d0ed      	beq.n	80056a8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	0018      	movs	r0, r3
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b004      	add	sp, #16
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	46c0      	nop			@ (mov r8, r8)
 80056d8:	40007000 	.word	0x40007000
 80056dc:	fffff9ff 	.word	0xfffff9ff
 80056e0:	20000090 	.word	0x20000090
 80056e4:	000f4240 	.word	0x000f4240

080056e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80056ec:	4b03      	ldr	r3, [pc, #12]	@ (80056fc <LL_RCC_GetAPB1Prescaler+0x14>)
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	23e0      	movs	r3, #224	@ 0xe0
 80056f2:	01db      	lsls	r3, r3, #7
 80056f4:	4013      	ands	r3, r2
}
 80056f6:	0018      	movs	r0, r3
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40021000 	.word	0x40021000

08005700 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e2fe      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2201      	movs	r2, #1
 8005718:	4013      	ands	r3, r2
 800571a:	d100      	bne.n	800571e <HAL_RCC_OscConfig+0x1e>
 800571c:	e07c      	b.n	8005818 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800571e:	4bc3      	ldr	r3, [pc, #780]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	2238      	movs	r2, #56	@ 0x38
 8005724:	4013      	ands	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005728:	4bc0      	ldr	r3, [pc, #768]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	2203      	movs	r2, #3
 800572e:	4013      	ands	r3, r2
 8005730:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	2b10      	cmp	r3, #16
 8005736:	d102      	bne.n	800573e <HAL_RCC_OscConfig+0x3e>
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2b03      	cmp	r3, #3
 800573c:	d002      	beq.n	8005744 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	2b08      	cmp	r3, #8
 8005742:	d10b      	bne.n	800575c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005744:	4bb9      	ldr	r3, [pc, #740]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	2380      	movs	r3, #128	@ 0x80
 800574a:	029b      	lsls	r3, r3, #10
 800574c:	4013      	ands	r3, r2
 800574e:	d062      	beq.n	8005816 <HAL_RCC_OscConfig+0x116>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d15e      	bne.n	8005816 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e2d9      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	2380      	movs	r3, #128	@ 0x80
 8005762:	025b      	lsls	r3, r3, #9
 8005764:	429a      	cmp	r2, r3
 8005766:	d107      	bne.n	8005778 <HAL_RCC_OscConfig+0x78>
 8005768:	4bb0      	ldr	r3, [pc, #704]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	4baf      	ldr	r3, [pc, #700]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 800576e:	2180      	movs	r1, #128	@ 0x80
 8005770:	0249      	lsls	r1, r1, #9
 8005772:	430a      	orrs	r2, r1
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	e020      	b.n	80057ba <HAL_RCC_OscConfig+0xba>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	23a0      	movs	r3, #160	@ 0xa0
 800577e:	02db      	lsls	r3, r3, #11
 8005780:	429a      	cmp	r2, r3
 8005782:	d10e      	bne.n	80057a2 <HAL_RCC_OscConfig+0xa2>
 8005784:	4ba9      	ldr	r3, [pc, #676]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	4ba8      	ldr	r3, [pc, #672]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 800578a:	2180      	movs	r1, #128	@ 0x80
 800578c:	02c9      	lsls	r1, r1, #11
 800578e:	430a      	orrs	r2, r1
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	4ba6      	ldr	r3, [pc, #664]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	4ba5      	ldr	r3, [pc, #660]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 8005798:	2180      	movs	r1, #128	@ 0x80
 800579a:	0249      	lsls	r1, r1, #9
 800579c:	430a      	orrs	r2, r1
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	e00b      	b.n	80057ba <HAL_RCC_OscConfig+0xba>
 80057a2:	4ba2      	ldr	r3, [pc, #648]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	4ba1      	ldr	r3, [pc, #644]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 80057a8:	49a1      	ldr	r1, [pc, #644]	@ (8005a30 <HAL_RCC_OscConfig+0x330>)
 80057aa:	400a      	ands	r2, r1
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	4b9f      	ldr	r3, [pc, #636]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4b9e      	ldr	r3, [pc, #632]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 80057b4:	499f      	ldr	r1, [pc, #636]	@ (8005a34 <HAL_RCC_OscConfig+0x334>)
 80057b6:	400a      	ands	r2, r1
 80057b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d014      	beq.n	80057ec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c2:	f7fe f877 	bl	80038b4 <HAL_GetTick>
 80057c6:	0003      	movs	r3, r0
 80057c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057cc:	f7fe f872 	bl	80038b4 <HAL_GetTick>
 80057d0:	0002      	movs	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b64      	cmp	r3, #100	@ 0x64
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e298      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057de:	4b93      	ldr	r3, [pc, #588]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	2380      	movs	r3, #128	@ 0x80
 80057e4:	029b      	lsls	r3, r3, #10
 80057e6:	4013      	ands	r3, r2
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0xcc>
 80057ea:	e015      	b.n	8005818 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ec:	f7fe f862 	bl	80038b4 <HAL_GetTick>
 80057f0:	0003      	movs	r3, r0
 80057f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057f6:	f7fe f85d 	bl	80038b4 <HAL_GetTick>
 80057fa:	0002      	movs	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b64      	cmp	r3, #100	@ 0x64
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e283      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005808:	4b88      	ldr	r3, [pc, #544]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	2380      	movs	r3, #128	@ 0x80
 800580e:	029b      	lsls	r3, r3, #10
 8005810:	4013      	ands	r3, r2
 8005812:	d1f0      	bne.n	80057f6 <HAL_RCC_OscConfig+0xf6>
 8005814:	e000      	b.n	8005818 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005816:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2202      	movs	r2, #2
 800581e:	4013      	ands	r3, r2
 8005820:	d100      	bne.n	8005824 <HAL_RCC_OscConfig+0x124>
 8005822:	e099      	b.n	8005958 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005824:	4b81      	ldr	r3, [pc, #516]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	2238      	movs	r2, #56	@ 0x38
 800582a:	4013      	ands	r3, r2
 800582c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800582e:	4b7f      	ldr	r3, [pc, #508]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	2203      	movs	r2, #3
 8005834:	4013      	ands	r3, r2
 8005836:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	2b10      	cmp	r3, #16
 800583c:	d102      	bne.n	8005844 <HAL_RCC_OscConfig+0x144>
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b02      	cmp	r3, #2
 8005842:	d002      	beq.n	800584a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d135      	bne.n	80058b6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800584a:	4b78      	ldr	r3, [pc, #480]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	2380      	movs	r3, #128	@ 0x80
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	4013      	ands	r3, r2
 8005854:	d005      	beq.n	8005862 <HAL_RCC_OscConfig+0x162>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e256      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005862:	4b72      	ldr	r3, [pc, #456]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	4a74      	ldr	r2, [pc, #464]	@ (8005a38 <HAL_RCC_OscConfig+0x338>)
 8005868:	4013      	ands	r3, r2
 800586a:	0019      	movs	r1, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	021a      	lsls	r2, r3, #8
 8005872:	4b6e      	ldr	r3, [pc, #440]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 8005874:	430a      	orrs	r2, r1
 8005876:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d112      	bne.n	80058a4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800587e:	4b6b      	ldr	r3, [pc, #428]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a6e      	ldr	r2, [pc, #440]	@ (8005a3c <HAL_RCC_OscConfig+0x33c>)
 8005884:	4013      	ands	r3, r2
 8005886:	0019      	movs	r1, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	4b67      	ldr	r3, [pc, #412]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 800588e:	430a      	orrs	r2, r1
 8005890:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005892:	4b66      	ldr	r3, [pc, #408]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	0adb      	lsrs	r3, r3, #11
 8005898:	2207      	movs	r2, #7
 800589a:	4013      	ands	r3, r2
 800589c:	4a68      	ldr	r2, [pc, #416]	@ (8005a40 <HAL_RCC_OscConfig+0x340>)
 800589e:	40da      	lsrs	r2, r3
 80058a0:	4b68      	ldr	r3, [pc, #416]	@ (8005a44 <HAL_RCC_OscConfig+0x344>)
 80058a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80058a4:	4b68      	ldr	r3, [pc, #416]	@ (8005a48 <HAL_RCC_OscConfig+0x348>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	0018      	movs	r0, r3
 80058aa:	f7fd ffa7 	bl	80037fc <HAL_InitTick>
 80058ae:	1e03      	subs	r3, r0, #0
 80058b0:	d051      	beq.n	8005956 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e22c      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d030      	beq.n	8005920 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80058be:	4b5b      	ldr	r3, [pc, #364]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a5e      	ldr	r2, [pc, #376]	@ (8005a3c <HAL_RCC_OscConfig+0x33c>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	0019      	movs	r1, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	4b57      	ldr	r3, [pc, #348]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 80058ce:	430a      	orrs	r2, r1
 80058d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80058d2:	4b56      	ldr	r3, [pc, #344]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	4b55      	ldr	r3, [pc, #340]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 80058d8:	2180      	movs	r1, #128	@ 0x80
 80058da:	0049      	lsls	r1, r1, #1
 80058dc:	430a      	orrs	r2, r1
 80058de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e0:	f7fd ffe8 	bl	80038b4 <HAL_GetTick>
 80058e4:	0003      	movs	r3, r0
 80058e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058e8:	e008      	b.n	80058fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ea:	f7fd ffe3 	bl	80038b4 <HAL_GetTick>
 80058ee:	0002      	movs	r2, r0
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e209      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058fc:	4b4b      	ldr	r3, [pc, #300]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	2380      	movs	r3, #128	@ 0x80
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	4013      	ands	r3, r2
 8005906:	d0f0      	beq.n	80058ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005908:	4b48      	ldr	r3, [pc, #288]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	4a4a      	ldr	r2, [pc, #296]	@ (8005a38 <HAL_RCC_OscConfig+0x338>)
 800590e:	4013      	ands	r3, r2
 8005910:	0019      	movs	r1, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	021a      	lsls	r2, r3, #8
 8005918:	4b44      	ldr	r3, [pc, #272]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
 800591e:	e01b      	b.n	8005958 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005920:	4b42      	ldr	r3, [pc, #264]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	4b41      	ldr	r3, [pc, #260]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 8005926:	4949      	ldr	r1, [pc, #292]	@ (8005a4c <HAL_RCC_OscConfig+0x34c>)
 8005928:	400a      	ands	r2, r1
 800592a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592c:	f7fd ffc2 	bl	80038b4 <HAL_GetTick>
 8005930:	0003      	movs	r3, r0
 8005932:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005934:	e008      	b.n	8005948 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005936:	f7fd ffbd 	bl	80038b4 <HAL_GetTick>
 800593a:	0002      	movs	r2, r0
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e1e3      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005948:	4b38      	ldr	r3, [pc, #224]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	2380      	movs	r3, #128	@ 0x80
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	4013      	ands	r3, r2
 8005952:	d1f0      	bne.n	8005936 <HAL_RCC_OscConfig+0x236>
 8005954:	e000      	b.n	8005958 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005956:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2208      	movs	r2, #8
 800595e:	4013      	ands	r3, r2
 8005960:	d047      	beq.n	80059f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005962:	4b32      	ldr	r3, [pc, #200]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2238      	movs	r2, #56	@ 0x38
 8005968:	4013      	ands	r3, r2
 800596a:	2b18      	cmp	r3, #24
 800596c:	d10a      	bne.n	8005984 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800596e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 8005970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005972:	2202      	movs	r2, #2
 8005974:	4013      	ands	r3, r2
 8005976:	d03c      	beq.n	80059f2 <HAL_RCC_OscConfig+0x2f2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d138      	bne.n	80059f2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e1c5      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d019      	beq.n	80059c0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800598c:	4b27      	ldr	r3, [pc, #156]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 800598e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005990:	4b26      	ldr	r3, [pc, #152]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 8005992:	2101      	movs	r1, #1
 8005994:	430a      	orrs	r2, r1
 8005996:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005998:	f7fd ff8c 	bl	80038b4 <HAL_GetTick>
 800599c:	0003      	movs	r3, r0
 800599e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059a0:	e008      	b.n	80059b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059a2:	f7fd ff87 	bl	80038b4 <HAL_GetTick>
 80059a6:	0002      	movs	r2, r0
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d901      	bls.n	80059b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e1ad      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059b4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 80059b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059b8:	2202      	movs	r2, #2
 80059ba:	4013      	ands	r3, r2
 80059bc:	d0f1      	beq.n	80059a2 <HAL_RCC_OscConfig+0x2a2>
 80059be:	e018      	b.n	80059f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80059c0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 80059c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80059c4:	4b19      	ldr	r3, [pc, #100]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 80059c6:	2101      	movs	r1, #1
 80059c8:	438a      	bics	r2, r1
 80059ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059cc:	f7fd ff72 	bl	80038b4 <HAL_GetTick>
 80059d0:	0003      	movs	r3, r0
 80059d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059d6:	f7fd ff6d 	bl	80038b4 <HAL_GetTick>
 80059da:	0002      	movs	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e193      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059e8:	4b10      	ldr	r3, [pc, #64]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 80059ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ec:	2202      	movs	r2, #2
 80059ee:	4013      	ands	r3, r2
 80059f0:	d1f1      	bne.n	80059d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2204      	movs	r2, #4
 80059f8:	4013      	ands	r3, r2
 80059fa:	d100      	bne.n	80059fe <HAL_RCC_OscConfig+0x2fe>
 80059fc:	e0c6      	b.n	8005b8c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059fe:	231f      	movs	r3, #31
 8005a00:	18fb      	adds	r3, r7, r3
 8005a02:	2200      	movs	r2, #0
 8005a04:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005a06:	4b09      	ldr	r3, [pc, #36]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	2238      	movs	r2, #56	@ 0x38
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	2b20      	cmp	r3, #32
 8005a10:	d11e      	bne.n	8005a50 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005a12:	4b06      	ldr	r3, [pc, #24]	@ (8005a2c <HAL_RCC_OscConfig+0x32c>)
 8005a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a16:	2202      	movs	r2, #2
 8005a18:	4013      	ands	r3, r2
 8005a1a:	d100      	bne.n	8005a1e <HAL_RCC_OscConfig+0x31e>
 8005a1c:	e0b6      	b.n	8005b8c <HAL_RCC_OscConfig+0x48c>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d000      	beq.n	8005a28 <HAL_RCC_OscConfig+0x328>
 8005a26:	e0b1      	b.n	8005b8c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e171      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	fffeffff 	.word	0xfffeffff
 8005a34:	fffbffff 	.word	0xfffbffff
 8005a38:	ffff80ff 	.word	0xffff80ff
 8005a3c:	ffffc7ff 	.word	0xffffc7ff
 8005a40:	00f42400 	.word	0x00f42400
 8005a44:	20000090 	.word	0x20000090
 8005a48:	20000094 	.word	0x20000094
 8005a4c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a50:	4bb1      	ldr	r3, [pc, #708]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005a52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a54:	2380      	movs	r3, #128	@ 0x80
 8005a56:	055b      	lsls	r3, r3, #21
 8005a58:	4013      	ands	r3, r2
 8005a5a:	d101      	bne.n	8005a60 <HAL_RCC_OscConfig+0x360>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e000      	b.n	8005a62 <HAL_RCC_OscConfig+0x362>
 8005a60:	2300      	movs	r3, #0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d011      	beq.n	8005a8a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005a66:	4bac      	ldr	r3, [pc, #688]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005a68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a6a:	4bab      	ldr	r3, [pc, #684]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005a6c:	2180      	movs	r1, #128	@ 0x80
 8005a6e:	0549      	lsls	r1, r1, #21
 8005a70:	430a      	orrs	r2, r1
 8005a72:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a74:	4ba8      	ldr	r3, [pc, #672]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005a76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a78:	2380      	movs	r3, #128	@ 0x80
 8005a7a:	055b      	lsls	r3, r3, #21
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005a82:	231f      	movs	r3, #31
 8005a84:	18fb      	adds	r3, r7, r3
 8005a86:	2201      	movs	r2, #1
 8005a88:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a8a:	4ba4      	ldr	r3, [pc, #656]	@ (8005d1c <HAL_RCC_OscConfig+0x61c>)
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	2380      	movs	r3, #128	@ 0x80
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	4013      	ands	r3, r2
 8005a94:	d11a      	bne.n	8005acc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a96:	4ba1      	ldr	r3, [pc, #644]	@ (8005d1c <HAL_RCC_OscConfig+0x61c>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	4ba0      	ldr	r3, [pc, #640]	@ (8005d1c <HAL_RCC_OscConfig+0x61c>)
 8005a9c:	2180      	movs	r1, #128	@ 0x80
 8005a9e:	0049      	lsls	r1, r1, #1
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005aa4:	f7fd ff06 	bl	80038b4 <HAL_GetTick>
 8005aa8:	0003      	movs	r3, r0
 8005aaa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aac:	e008      	b.n	8005ac0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aae:	f7fd ff01 	bl	80038b4 <HAL_GetTick>
 8005ab2:	0002      	movs	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e127      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ac0:	4b96      	ldr	r3, [pc, #600]	@ (8005d1c <HAL_RCC_OscConfig+0x61c>)
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	2380      	movs	r3, #128	@ 0x80
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	4013      	ands	r3, r2
 8005aca:	d0f0      	beq.n	8005aae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d106      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x3e2>
 8005ad4:	4b90      	ldr	r3, [pc, #576]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005ad6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ad8:	4b8f      	ldr	r3, [pc, #572]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005ada:	2101      	movs	r1, #1
 8005adc:	430a      	orrs	r2, r1
 8005ade:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ae0:	e01c      	b.n	8005b1c <HAL_RCC_OscConfig+0x41c>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b05      	cmp	r3, #5
 8005ae8:	d10c      	bne.n	8005b04 <HAL_RCC_OscConfig+0x404>
 8005aea:	4b8b      	ldr	r3, [pc, #556]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005aec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005aee:	4b8a      	ldr	r3, [pc, #552]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005af0:	2104      	movs	r1, #4
 8005af2:	430a      	orrs	r2, r1
 8005af4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005af6:	4b88      	ldr	r3, [pc, #544]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005af8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005afa:	4b87      	ldr	r3, [pc, #540]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005afc:	2101      	movs	r1, #1
 8005afe:	430a      	orrs	r2, r1
 8005b00:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b02:	e00b      	b.n	8005b1c <HAL_RCC_OscConfig+0x41c>
 8005b04:	4b84      	ldr	r3, [pc, #528]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005b06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b08:	4b83      	ldr	r3, [pc, #524]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	438a      	bics	r2, r1
 8005b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b10:	4b81      	ldr	r3, [pc, #516]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005b12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b14:	4b80      	ldr	r3, [pc, #512]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005b16:	2104      	movs	r1, #4
 8005b18:	438a      	bics	r2, r1
 8005b1a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d014      	beq.n	8005b4e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b24:	f7fd fec6 	bl	80038b4 <HAL_GetTick>
 8005b28:	0003      	movs	r3, r0
 8005b2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b2c:	e009      	b.n	8005b42 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b2e:	f7fd fec1 	bl	80038b4 <HAL_GetTick>
 8005b32:	0002      	movs	r2, r0
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	4a79      	ldr	r2, [pc, #484]	@ (8005d20 <HAL_RCC_OscConfig+0x620>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e0e6      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b42:	4b75      	ldr	r3, [pc, #468]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b46:	2202      	movs	r2, #2
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d0f0      	beq.n	8005b2e <HAL_RCC_OscConfig+0x42e>
 8005b4c:	e013      	b.n	8005b76 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4e:	f7fd feb1 	bl	80038b4 <HAL_GetTick>
 8005b52:	0003      	movs	r3, r0
 8005b54:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b56:	e009      	b.n	8005b6c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b58:	f7fd feac 	bl	80038b4 <HAL_GetTick>
 8005b5c:	0002      	movs	r2, r0
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	4a6f      	ldr	r2, [pc, #444]	@ (8005d20 <HAL_RCC_OscConfig+0x620>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e0d1      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b6c:	4b6a      	ldr	r3, [pc, #424]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b70:	2202      	movs	r2, #2
 8005b72:	4013      	ands	r3, r2
 8005b74:	d1f0      	bne.n	8005b58 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005b76:	231f      	movs	r3, #31
 8005b78:	18fb      	adds	r3, r7, r3
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d105      	bne.n	8005b8c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005b80:	4b65      	ldr	r3, [pc, #404]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005b82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b84:	4b64      	ldr	r3, [pc, #400]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005b86:	4967      	ldr	r1, [pc, #412]	@ (8005d24 <HAL_RCC_OscConfig+0x624>)
 8005b88:	400a      	ands	r2, r1
 8005b8a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d100      	bne.n	8005b96 <HAL_RCC_OscConfig+0x496>
 8005b94:	e0bb      	b.n	8005d0e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b96:	4b60      	ldr	r3, [pc, #384]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	2238      	movs	r2, #56	@ 0x38
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	2b10      	cmp	r3, #16
 8005ba0:	d100      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x4a4>
 8005ba2:	e07b      	b.n	8005c9c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d156      	bne.n	8005c5a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bac:	4b5a      	ldr	r3, [pc, #360]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	4b59      	ldr	r3, [pc, #356]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005bb2:	495d      	ldr	r1, [pc, #372]	@ (8005d28 <HAL_RCC_OscConfig+0x628>)
 8005bb4:	400a      	ands	r2, r1
 8005bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb8:	f7fd fe7c 	bl	80038b4 <HAL_GetTick>
 8005bbc:	0003      	movs	r3, r0
 8005bbe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bc0:	e008      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc2:	f7fd fe77 	bl	80038b4 <HAL_GetTick>
 8005bc6:	0002      	movs	r2, r0
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d901      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e09d      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bd4:	4b50      	ldr	r3, [pc, #320]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	2380      	movs	r3, #128	@ 0x80
 8005bda:	049b      	lsls	r3, r3, #18
 8005bdc:	4013      	ands	r3, r2
 8005bde:	d1f0      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005be0:	4b4d      	ldr	r3, [pc, #308]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	4a51      	ldr	r2, [pc, #324]	@ (8005d2c <HAL_RCC_OscConfig+0x62c>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	0019      	movs	r1, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1a      	ldr	r2, [r3, #32]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf8:	021b      	lsls	r3, r3, #8
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c06:	431a      	orrs	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	4b42      	ldr	r3, [pc, #264]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005c10:	430a      	orrs	r2, r1
 8005c12:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c14:	4b40      	ldr	r3, [pc, #256]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	4b3f      	ldr	r3, [pc, #252]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005c1a:	2180      	movs	r1, #128	@ 0x80
 8005c1c:	0449      	lsls	r1, r1, #17
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005c22:	4b3d      	ldr	r3, [pc, #244]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	4b3c      	ldr	r3, [pc, #240]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005c28:	2180      	movs	r1, #128	@ 0x80
 8005c2a:	0549      	lsls	r1, r1, #21
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c30:	f7fd fe40 	bl	80038b4 <HAL_GetTick>
 8005c34:	0003      	movs	r3, r0
 8005c36:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c38:	e008      	b.n	8005c4c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c3a:	f7fd fe3b 	bl	80038b4 <HAL_GetTick>
 8005c3e:	0002      	movs	r2, r0
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e061      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c4c:	4b32      	ldr	r3, [pc, #200]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	2380      	movs	r3, #128	@ 0x80
 8005c52:	049b      	lsls	r3, r3, #18
 8005c54:	4013      	ands	r3, r2
 8005c56:	d0f0      	beq.n	8005c3a <HAL_RCC_OscConfig+0x53a>
 8005c58:	e059      	b.n	8005d0e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005c60:	4931      	ldr	r1, [pc, #196]	@ (8005d28 <HAL_RCC_OscConfig+0x628>)
 8005c62:	400a      	ands	r2, r1
 8005c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c66:	f7fd fe25 	bl	80038b4 <HAL_GetTick>
 8005c6a:	0003      	movs	r3, r0
 8005c6c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c70:	f7fd fe20 	bl	80038b4 <HAL_GetTick>
 8005c74:	0002      	movs	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e046      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c82:	4b25      	ldr	r3, [pc, #148]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	2380      	movs	r3, #128	@ 0x80
 8005c88:	049b      	lsls	r3, r3, #18
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	d1f0      	bne.n	8005c70 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005c8e:	4b22      	ldr	r3, [pc, #136]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	4b21      	ldr	r3, [pc, #132]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005c94:	4926      	ldr	r1, [pc, #152]	@ (8005d30 <HAL_RCC_OscConfig+0x630>)
 8005c96:	400a      	ands	r2, r1
 8005c98:	60da      	str	r2, [r3, #12]
 8005c9a:	e038      	b.n	8005d0e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e033      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8005d18 <HAL_RCC_OscConfig+0x618>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2203      	movs	r2, #3
 8005cb2:	401a      	ands	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d126      	bne.n	8005d0a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2270      	movs	r2, #112	@ 0x70
 8005cc0:	401a      	ands	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d11f      	bne.n	8005d0a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	23fe      	movs	r3, #254	@ 0xfe
 8005cce:	01db      	lsls	r3, r3, #7
 8005cd0:	401a      	ands	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d116      	bne.n	8005d0a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	23f8      	movs	r3, #248	@ 0xf8
 8005ce0:	039b      	lsls	r3, r3, #14
 8005ce2:	401a      	ands	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d10e      	bne.n	8005d0a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	23e0      	movs	r3, #224	@ 0xe0
 8005cf0:	051b      	lsls	r3, r3, #20
 8005cf2:	401a      	ands	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d106      	bne.n	8005d0a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	0f5b      	lsrs	r3, r3, #29
 8005d00:	075a      	lsls	r2, r3, #29
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d001      	beq.n	8005d0e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	0018      	movs	r0, r3
 8005d12:	46bd      	mov	sp, r7
 8005d14:	b008      	add	sp, #32
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	40007000 	.word	0x40007000
 8005d20:	00001388 	.word	0x00001388
 8005d24:	efffffff 	.word	0xefffffff
 8005d28:	feffffff 	.word	0xfeffffff
 8005d2c:	11c1808c 	.word	0x11c1808c
 8005d30:	eefefffc 	.word	0xeefefffc

08005d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e0e9      	b.n	8005f1c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d48:	4b76      	ldr	r3, [pc, #472]	@ (8005f24 <HAL_RCC_ClockConfig+0x1f0>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2207      	movs	r2, #7
 8005d4e:	4013      	ands	r3, r2
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d91e      	bls.n	8005d94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d56:	4b73      	ldr	r3, [pc, #460]	@ (8005f24 <HAL_RCC_ClockConfig+0x1f0>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2207      	movs	r2, #7
 8005d5c:	4393      	bics	r3, r2
 8005d5e:	0019      	movs	r1, r3
 8005d60:	4b70      	ldr	r3, [pc, #448]	@ (8005f24 <HAL_RCC_ClockConfig+0x1f0>)
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d68:	f7fd fda4 	bl	80038b4 <HAL_GetTick>
 8005d6c:	0003      	movs	r3, r0
 8005d6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d70:	e009      	b.n	8005d86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d72:	f7fd fd9f 	bl	80038b4 <HAL_GetTick>
 8005d76:	0002      	movs	r2, r0
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	4a6a      	ldr	r2, [pc, #424]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f4>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e0ca      	b.n	8005f1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d86:	4b67      	ldr	r3, [pc, #412]	@ (8005f24 <HAL_RCC_ClockConfig+0x1f0>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2207      	movs	r2, #7
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d1ee      	bne.n	8005d72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	d015      	beq.n	8005dca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2204      	movs	r2, #4
 8005da4:	4013      	ands	r3, r2
 8005da6:	d006      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005da8:	4b60      	ldr	r3, [pc, #384]	@ (8005f2c <HAL_RCC_ClockConfig+0x1f8>)
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	4b5f      	ldr	r3, [pc, #380]	@ (8005f2c <HAL_RCC_ClockConfig+0x1f8>)
 8005dae:	21e0      	movs	r1, #224	@ 0xe0
 8005db0:	01c9      	lsls	r1, r1, #7
 8005db2:	430a      	orrs	r2, r1
 8005db4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db6:	4b5d      	ldr	r3, [pc, #372]	@ (8005f2c <HAL_RCC_ClockConfig+0x1f8>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	4a5d      	ldr	r2, [pc, #372]	@ (8005f30 <HAL_RCC_ClockConfig+0x1fc>)
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	0019      	movs	r1, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	4b59      	ldr	r3, [pc, #356]	@ (8005f2c <HAL_RCC_ClockConfig+0x1f8>)
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	d057      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d107      	bne.n	8005dec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ddc:	4b53      	ldr	r3, [pc, #332]	@ (8005f2c <HAL_RCC_ClockConfig+0x1f8>)
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	2380      	movs	r3, #128	@ 0x80
 8005de2:	029b      	lsls	r3, r3, #10
 8005de4:	4013      	ands	r3, r2
 8005de6:	d12b      	bne.n	8005e40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e097      	b.n	8005f1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d107      	bne.n	8005e04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005df4:	4b4d      	ldr	r3, [pc, #308]	@ (8005f2c <HAL_RCC_ClockConfig+0x1f8>)
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	2380      	movs	r3, #128	@ 0x80
 8005dfa:	049b      	lsls	r3, r3, #18
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	d11f      	bne.n	8005e40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e08b      	b.n	8005f1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d107      	bne.n	8005e1c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e0c:	4b47      	ldr	r3, [pc, #284]	@ (8005f2c <HAL_RCC_ClockConfig+0x1f8>)
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	2380      	movs	r3, #128	@ 0x80
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	4013      	ands	r3, r2
 8005e16:	d113      	bne.n	8005e40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e07f      	b.n	8005f1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d106      	bne.n	8005e32 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e24:	4b41      	ldr	r3, [pc, #260]	@ (8005f2c <HAL_RCC_ClockConfig+0x1f8>)
 8005e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e28:	2202      	movs	r2, #2
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d108      	bne.n	8005e40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e074      	b.n	8005f1c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e32:	4b3e      	ldr	r3, [pc, #248]	@ (8005f2c <HAL_RCC_ClockConfig+0x1f8>)
 8005e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e36:	2202      	movs	r2, #2
 8005e38:	4013      	ands	r3, r2
 8005e3a:	d101      	bne.n	8005e40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e06d      	b.n	8005f1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e40:	4b3a      	ldr	r3, [pc, #232]	@ (8005f2c <HAL_RCC_ClockConfig+0x1f8>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	2207      	movs	r2, #7
 8005e46:	4393      	bics	r3, r2
 8005e48:	0019      	movs	r1, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	4b37      	ldr	r3, [pc, #220]	@ (8005f2c <HAL_RCC_ClockConfig+0x1f8>)
 8005e50:	430a      	orrs	r2, r1
 8005e52:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e54:	f7fd fd2e 	bl	80038b4 <HAL_GetTick>
 8005e58:	0003      	movs	r3, r0
 8005e5a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5c:	e009      	b.n	8005e72 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e5e:	f7fd fd29 	bl	80038b4 <HAL_GetTick>
 8005e62:	0002      	movs	r2, r0
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	4a2f      	ldr	r2, [pc, #188]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e054      	b.n	8005f1c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e72:	4b2e      	ldr	r3, [pc, #184]	@ (8005f2c <HAL_RCC_ClockConfig+0x1f8>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	2238      	movs	r2, #56	@ 0x38
 8005e78:	401a      	ands	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d1ec      	bne.n	8005e5e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e84:	4b27      	ldr	r3, [pc, #156]	@ (8005f24 <HAL_RCC_ClockConfig+0x1f0>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2207      	movs	r2, #7
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d21e      	bcs.n	8005ed0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e92:	4b24      	ldr	r3, [pc, #144]	@ (8005f24 <HAL_RCC_ClockConfig+0x1f0>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2207      	movs	r2, #7
 8005e98:	4393      	bics	r3, r2
 8005e9a:	0019      	movs	r1, r3
 8005e9c:	4b21      	ldr	r3, [pc, #132]	@ (8005f24 <HAL_RCC_ClockConfig+0x1f0>)
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ea4:	f7fd fd06 	bl	80038b4 <HAL_GetTick>
 8005ea8:	0003      	movs	r3, r0
 8005eaa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005eac:	e009      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eae:	f7fd fd01 	bl	80038b4 <HAL_GetTick>
 8005eb2:	0002      	movs	r2, r0
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e02c      	b.n	8005f1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ec2:	4b18      	ldr	r3, [pc, #96]	@ (8005f24 <HAL_RCC_ClockConfig+0x1f0>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2207      	movs	r2, #7
 8005ec8:	4013      	ands	r3, r2
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d1ee      	bne.n	8005eae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2204      	movs	r2, #4
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	d009      	beq.n	8005eee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005eda:	4b14      	ldr	r3, [pc, #80]	@ (8005f2c <HAL_RCC_ClockConfig+0x1f8>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	4a15      	ldr	r2, [pc, #84]	@ (8005f34 <HAL_RCC_ClockConfig+0x200>)
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	0019      	movs	r1, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	4b10      	ldr	r3, [pc, #64]	@ (8005f2c <HAL_RCC_ClockConfig+0x1f8>)
 8005eea:	430a      	orrs	r2, r1
 8005eec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005eee:	f000 f829 	bl	8005f44 <HAL_RCC_GetSysClockFreq>
 8005ef2:	0001      	movs	r1, r0
 8005ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8005f2c <HAL_RCC_ClockConfig+0x1f8>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	0a1b      	lsrs	r3, r3, #8
 8005efa:	220f      	movs	r2, #15
 8005efc:	401a      	ands	r2, r3
 8005efe:	4b0e      	ldr	r3, [pc, #56]	@ (8005f38 <HAL_RCC_ClockConfig+0x204>)
 8005f00:	0092      	lsls	r2, r2, #2
 8005f02:	58d3      	ldr	r3, [r2, r3]
 8005f04:	221f      	movs	r2, #31
 8005f06:	4013      	ands	r3, r2
 8005f08:	000a      	movs	r2, r1
 8005f0a:	40da      	lsrs	r2, r3
 8005f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f3c <HAL_RCC_ClockConfig+0x208>)
 8005f0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005f10:	4b0b      	ldr	r3, [pc, #44]	@ (8005f40 <HAL_RCC_ClockConfig+0x20c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	0018      	movs	r0, r3
 8005f16:	f7fd fc71 	bl	80037fc <HAL_InitTick>
 8005f1a:	0003      	movs	r3, r0
}
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	b004      	add	sp, #16
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40022000 	.word	0x40022000
 8005f28:	00001388 	.word	0x00001388
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	fffff0ff 	.word	0xfffff0ff
 8005f34:	ffff8fff 	.word	0xffff8fff
 8005f38:	080094b0 	.word	0x080094b0
 8005f3c:	20000090 	.word	0x20000090
 8005f40:	20000094 	.word	0x20000094

08005f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f4a:	4b3c      	ldr	r3, [pc, #240]	@ (800603c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	2238      	movs	r2, #56	@ 0x38
 8005f50:	4013      	ands	r3, r2
 8005f52:	d10f      	bne.n	8005f74 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005f54:	4b39      	ldr	r3, [pc, #228]	@ (800603c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	0adb      	lsrs	r3, r3, #11
 8005f5a:	2207      	movs	r2, #7
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	2201      	movs	r2, #1
 8005f60:	409a      	lsls	r2, r3
 8005f62:	0013      	movs	r3, r2
 8005f64:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005f66:	6839      	ldr	r1, [r7, #0]
 8005f68:	4835      	ldr	r0, [pc, #212]	@ (8006040 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f6a:	f7fa f8cb 	bl	8000104 <__udivsi3>
 8005f6e:	0003      	movs	r3, r0
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	e05d      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f74:	4b31      	ldr	r3, [pc, #196]	@ (800603c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	2238      	movs	r2, #56	@ 0x38
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d102      	bne.n	8005f86 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f80:	4b2f      	ldr	r3, [pc, #188]	@ (8006040 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f82:	613b      	str	r3, [r7, #16]
 8005f84:	e054      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f86:	4b2d      	ldr	r3, [pc, #180]	@ (800603c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	2238      	movs	r2, #56	@ 0x38
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	2b10      	cmp	r3, #16
 8005f90:	d138      	bne.n	8006004 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005f92:	4b2a      	ldr	r3, [pc, #168]	@ (800603c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	2203      	movs	r2, #3
 8005f98:	4013      	ands	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f9c:	4b27      	ldr	r3, [pc, #156]	@ (800603c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	091b      	lsrs	r3, r3, #4
 8005fa2:	2207      	movs	r2, #7
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d10d      	bne.n	8005fcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fb0:	68b9      	ldr	r1, [r7, #8]
 8005fb2:	4823      	ldr	r0, [pc, #140]	@ (8006040 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005fb4:	f7fa f8a6 	bl	8000104 <__udivsi3>
 8005fb8:	0003      	movs	r3, r0
 8005fba:	0019      	movs	r1, r3
 8005fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800603c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	0a1b      	lsrs	r3, r3, #8
 8005fc2:	227f      	movs	r2, #127	@ 0x7f
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	434b      	muls	r3, r1
 8005fc8:	617b      	str	r3, [r7, #20]
        break;
 8005fca:	e00d      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005fcc:	68b9      	ldr	r1, [r7, #8]
 8005fce:	481c      	ldr	r0, [pc, #112]	@ (8006040 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005fd0:	f7fa f898 	bl	8000104 <__udivsi3>
 8005fd4:	0003      	movs	r3, r0
 8005fd6:	0019      	movs	r1, r3
 8005fd8:	4b18      	ldr	r3, [pc, #96]	@ (800603c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	0a1b      	lsrs	r3, r3, #8
 8005fde:	227f      	movs	r2, #127	@ 0x7f
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	434b      	muls	r3, r1
 8005fe4:	617b      	str	r3, [r7, #20]
        break;
 8005fe6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005fe8:	4b14      	ldr	r3, [pc, #80]	@ (800603c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	0f5b      	lsrs	r3, r3, #29
 8005fee:	2207      	movs	r2, #7
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	6978      	ldr	r0, [r7, #20]
 8005ffa:	f7fa f883 	bl	8000104 <__udivsi3>
 8005ffe:	0003      	movs	r3, r0
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	e015      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006004:	4b0d      	ldr	r3, [pc, #52]	@ (800603c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	2238      	movs	r2, #56	@ 0x38
 800600a:	4013      	ands	r3, r2
 800600c:	2b20      	cmp	r3, #32
 800600e:	d103      	bne.n	8006018 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006010:	2380      	movs	r3, #128	@ 0x80
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	e00b      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006018:	4b08      	ldr	r3, [pc, #32]	@ (800603c <HAL_RCC_GetSysClockFreq+0xf8>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	2238      	movs	r2, #56	@ 0x38
 800601e:	4013      	ands	r3, r2
 8006020:	2b18      	cmp	r3, #24
 8006022:	d103      	bne.n	800602c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006024:	23fa      	movs	r3, #250	@ 0xfa
 8006026:	01db      	lsls	r3, r3, #7
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	e001      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006030:	693b      	ldr	r3, [r7, #16]
}
 8006032:	0018      	movs	r0, r3
 8006034:	46bd      	mov	sp, r7
 8006036:	b006      	add	sp, #24
 8006038:	bd80      	pop	{r7, pc}
 800603a:	46c0      	nop			@ (mov r8, r8)
 800603c:	40021000 	.word	0x40021000
 8006040:	00f42400 	.word	0x00f42400

08006044 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006048:	4b02      	ldr	r3, [pc, #8]	@ (8006054 <HAL_RCC_GetHCLKFreq+0x10>)
 800604a:	681b      	ldr	r3, [r3, #0]
}
 800604c:	0018      	movs	r0, r3
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	46c0      	nop			@ (mov r8, r8)
 8006054:	20000090 	.word	0x20000090

08006058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006058:	b5b0      	push	{r4, r5, r7, lr}
 800605a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800605c:	f7ff fff2 	bl	8006044 <HAL_RCC_GetHCLKFreq>
 8006060:	0004      	movs	r4, r0
 8006062:	f7ff fb41 	bl	80056e8 <LL_RCC_GetAPB1Prescaler>
 8006066:	0003      	movs	r3, r0
 8006068:	0b1a      	lsrs	r2, r3, #12
 800606a:	4b05      	ldr	r3, [pc, #20]	@ (8006080 <HAL_RCC_GetPCLK1Freq+0x28>)
 800606c:	0092      	lsls	r2, r2, #2
 800606e:	58d3      	ldr	r3, [r2, r3]
 8006070:	221f      	movs	r2, #31
 8006072:	4013      	ands	r3, r2
 8006074:	40dc      	lsrs	r4, r3
 8006076:	0023      	movs	r3, r4
}
 8006078:	0018      	movs	r0, r3
 800607a:	46bd      	mov	sp, r7
 800607c:	bdb0      	pop	{r4, r5, r7, pc}
 800607e:	46c0      	nop			@ (mov r8, r8)
 8006080:	080094f0 	.word	0x080094f0

08006084 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800608c:	2313      	movs	r3, #19
 800608e:	18fb      	adds	r3, r7, r3
 8006090:	2200      	movs	r2, #0
 8006092:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006094:	2312      	movs	r3, #18
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	2200      	movs	r2, #0
 800609a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	2380      	movs	r3, #128	@ 0x80
 80060a2:	029b      	lsls	r3, r3, #10
 80060a4:	4013      	ands	r3, r2
 80060a6:	d100      	bne.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80060a8:	e0a3      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060aa:	2011      	movs	r0, #17
 80060ac:	183b      	adds	r3, r7, r0
 80060ae:	2200      	movs	r2, #0
 80060b0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060b2:	4ba5      	ldr	r3, [pc, #660]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060b6:	2380      	movs	r3, #128	@ 0x80
 80060b8:	055b      	lsls	r3, r3, #21
 80060ba:	4013      	ands	r3, r2
 80060bc:	d110      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060be:	4ba2      	ldr	r3, [pc, #648]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060c2:	4ba1      	ldr	r3, [pc, #644]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060c4:	2180      	movs	r1, #128	@ 0x80
 80060c6:	0549      	lsls	r1, r1, #21
 80060c8:	430a      	orrs	r2, r1
 80060ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80060cc:	4b9e      	ldr	r3, [pc, #632]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060d0:	2380      	movs	r3, #128	@ 0x80
 80060d2:	055b      	lsls	r3, r3, #21
 80060d4:	4013      	ands	r3, r2
 80060d6:	60bb      	str	r3, [r7, #8]
 80060d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060da:	183b      	adds	r3, r7, r0
 80060dc:	2201      	movs	r2, #1
 80060de:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060e0:	4b9a      	ldr	r3, [pc, #616]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	4b99      	ldr	r3, [pc, #612]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80060e6:	2180      	movs	r1, #128	@ 0x80
 80060e8:	0049      	lsls	r1, r1, #1
 80060ea:	430a      	orrs	r2, r1
 80060ec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060ee:	f7fd fbe1 	bl	80038b4 <HAL_GetTick>
 80060f2:	0003      	movs	r3, r0
 80060f4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060f6:	e00b      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060f8:	f7fd fbdc 	bl	80038b4 <HAL_GetTick>
 80060fc:	0002      	movs	r2, r0
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d904      	bls.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006106:	2313      	movs	r3, #19
 8006108:	18fb      	adds	r3, r7, r3
 800610a:	2203      	movs	r2, #3
 800610c:	701a      	strb	r2, [r3, #0]
        break;
 800610e:	e005      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006110:	4b8e      	ldr	r3, [pc, #568]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	2380      	movs	r3, #128	@ 0x80
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	4013      	ands	r3, r2
 800611a:	d0ed      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800611c:	2313      	movs	r3, #19
 800611e:	18fb      	adds	r3, r7, r3
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d154      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006126:	4b88      	ldr	r3, [pc, #544]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006128:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800612a:	23c0      	movs	r3, #192	@ 0xc0
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4013      	ands	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d019      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	429a      	cmp	r2, r3
 8006140:	d014      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006142:	4b81      	ldr	r3, [pc, #516]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006146:	4a82      	ldr	r2, [pc, #520]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006148:	4013      	ands	r3, r2
 800614a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800614c:	4b7e      	ldr	r3, [pc, #504]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800614e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006150:	4b7d      	ldr	r3, [pc, #500]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006152:	2180      	movs	r1, #128	@ 0x80
 8006154:	0249      	lsls	r1, r1, #9
 8006156:	430a      	orrs	r2, r1
 8006158:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800615a:	4b7b      	ldr	r3, [pc, #492]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800615c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800615e:	4b7a      	ldr	r3, [pc, #488]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006160:	497c      	ldr	r1, [pc, #496]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8006162:	400a      	ands	r2, r1
 8006164:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006166:	4b78      	ldr	r3, [pc, #480]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	2201      	movs	r2, #1
 8006170:	4013      	ands	r3, r2
 8006172:	d016      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006174:	f7fd fb9e 	bl	80038b4 <HAL_GetTick>
 8006178:	0003      	movs	r3, r0
 800617a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800617c:	e00c      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800617e:	f7fd fb99 	bl	80038b4 <HAL_GetTick>
 8006182:	0002      	movs	r2, r0
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	4a73      	ldr	r2, [pc, #460]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d904      	bls.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800618e:	2313      	movs	r3, #19
 8006190:	18fb      	adds	r3, r7, r3
 8006192:	2203      	movs	r2, #3
 8006194:	701a      	strb	r2, [r3, #0]
            break;
 8006196:	e004      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006198:	4b6b      	ldr	r3, [pc, #428]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800619a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800619c:	2202      	movs	r2, #2
 800619e:	4013      	ands	r3, r2
 80061a0:	d0ed      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80061a2:	2313      	movs	r3, #19
 80061a4:	18fb      	adds	r3, r7, r3
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10a      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061ac:	4b66      	ldr	r3, [pc, #408]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b0:	4a67      	ldr	r2, [pc, #412]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80061b2:	4013      	ands	r3, r2
 80061b4:	0019      	movs	r1, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061ba:	4b63      	ldr	r3, [pc, #396]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061bc:	430a      	orrs	r2, r1
 80061be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80061c0:	e00c      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061c2:	2312      	movs	r3, #18
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	2213      	movs	r2, #19
 80061c8:	18ba      	adds	r2, r7, r2
 80061ca:	7812      	ldrb	r2, [r2, #0]
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	e005      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d0:	2312      	movs	r3, #18
 80061d2:	18fb      	adds	r3, r7, r3
 80061d4:	2213      	movs	r2, #19
 80061d6:	18ba      	adds	r2, r7, r2
 80061d8:	7812      	ldrb	r2, [r2, #0]
 80061da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061dc:	2311      	movs	r3, #17
 80061de:	18fb      	adds	r3, r7, r3
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d105      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061e6:	4b58      	ldr	r3, [pc, #352]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061ea:	4b57      	ldr	r3, [pc, #348]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061ec:	495b      	ldr	r1, [pc, #364]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80061ee:	400a      	ands	r2, r1
 80061f0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2201      	movs	r2, #1
 80061f8:	4013      	ands	r3, r2
 80061fa:	d009      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061fc:	4b52      	ldr	r3, [pc, #328]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006200:	2203      	movs	r2, #3
 8006202:	4393      	bics	r3, r2
 8006204:	0019      	movs	r1, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	4b4f      	ldr	r3, [pc, #316]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800620c:	430a      	orrs	r2, r1
 800620e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2210      	movs	r2, #16
 8006216:	4013      	ands	r3, r2
 8006218:	d009      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800621a:	4b4b      	ldr	r3, [pc, #300]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800621c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621e:	4a50      	ldr	r2, [pc, #320]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006220:	4013      	ands	r3, r2
 8006222:	0019      	movs	r1, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	4b47      	ldr	r3, [pc, #284]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800622a:	430a      	orrs	r2, r1
 800622c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	2380      	movs	r3, #128	@ 0x80
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4013      	ands	r3, r2
 8006238:	d009      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800623a:	4b43      	ldr	r3, [pc, #268]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800623c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623e:	4a49      	ldr	r2, [pc, #292]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006240:	4013      	ands	r3, r2
 8006242:	0019      	movs	r1, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	695a      	ldr	r2, [r3, #20]
 8006248:	4b3f      	ldr	r3, [pc, #252]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800624a:	430a      	orrs	r2, r1
 800624c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	2380      	movs	r3, #128	@ 0x80
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	4013      	ands	r3, r2
 8006258:	d009      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800625a:	4b3b      	ldr	r3, [pc, #236]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800625c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625e:	4a42      	ldr	r2, [pc, #264]	@ (8006368 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006260:	4013      	ands	r3, r2
 8006262:	0019      	movs	r1, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	699a      	ldr	r2, [r3, #24]
 8006268:	4b37      	ldr	r3, [pc, #220]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800626a:	430a      	orrs	r2, r1
 800626c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2220      	movs	r2, #32
 8006274:	4013      	ands	r3, r2
 8006276:	d009      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006278:	4b33      	ldr	r3, [pc, #204]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800627a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800627c:	4a3b      	ldr	r2, [pc, #236]	@ (800636c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800627e:	4013      	ands	r3, r2
 8006280:	0019      	movs	r1, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	4b30      	ldr	r3, [pc, #192]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006288:	430a      	orrs	r2, r1
 800628a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	2380      	movs	r3, #128	@ 0x80
 8006292:	01db      	lsls	r3, r3, #7
 8006294:	4013      	ands	r3, r2
 8006296:	d015      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006298:	4b2b      	ldr	r3, [pc, #172]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800629a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	0899      	lsrs	r1, r3, #2
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	69da      	ldr	r2, [r3, #28]
 80062a4:	4b28      	ldr	r3, [pc, #160]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062a6:	430a      	orrs	r2, r1
 80062a8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69da      	ldr	r2, [r3, #28]
 80062ae:	2380      	movs	r3, #128	@ 0x80
 80062b0:	05db      	lsls	r3, r3, #23
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d106      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80062b6:	4b24      	ldr	r3, [pc, #144]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	4b23      	ldr	r3, [pc, #140]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062bc:	2180      	movs	r1, #128	@ 0x80
 80062be:	0249      	lsls	r1, r1, #9
 80062c0:	430a      	orrs	r2, r1
 80062c2:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	2380      	movs	r3, #128	@ 0x80
 80062ca:	039b      	lsls	r3, r3, #14
 80062cc:	4013      	ands	r3, r2
 80062ce:	d016      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80062d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d4:	4a26      	ldr	r2, [pc, #152]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	0019      	movs	r1, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1a      	ldr	r2, [r3, #32]
 80062de:	4b1a      	ldr	r3, [pc, #104]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062e0:	430a      	orrs	r2, r1
 80062e2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1a      	ldr	r2, [r3, #32]
 80062e8:	2380      	movs	r3, #128	@ 0x80
 80062ea:	03db      	lsls	r3, r3, #15
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d106      	bne.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80062f0:	4b15      	ldr	r3, [pc, #84]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	4b14      	ldr	r3, [pc, #80]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062f6:	2180      	movs	r1, #128	@ 0x80
 80062f8:	0449      	lsls	r1, r1, #17
 80062fa:	430a      	orrs	r2, r1
 80062fc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	2380      	movs	r3, #128	@ 0x80
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	4013      	ands	r3, r2
 8006308:	d016      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800630a:	4b0f      	ldr	r3, [pc, #60]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800630c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630e:	4a19      	ldr	r2, [pc, #100]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006310:	4013      	ands	r3, r2
 8006312:	0019      	movs	r1, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	4b0b      	ldr	r3, [pc, #44]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800631a:	430a      	orrs	r2, r1
 800631c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691a      	ldr	r2, [r3, #16]
 8006322:	2380      	movs	r3, #128	@ 0x80
 8006324:	01db      	lsls	r3, r3, #7
 8006326:	429a      	cmp	r2, r3
 8006328:	d106      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800632a:	4b07      	ldr	r3, [pc, #28]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	4b06      	ldr	r3, [pc, #24]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006330:	2180      	movs	r1, #128	@ 0x80
 8006332:	0249      	lsls	r1, r1, #9
 8006334:	430a      	orrs	r2, r1
 8006336:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006338:	2312      	movs	r3, #18
 800633a:	18fb      	adds	r3, r7, r3
 800633c:	781b      	ldrb	r3, [r3, #0]
}
 800633e:	0018      	movs	r0, r3
 8006340:	46bd      	mov	sp, r7
 8006342:	b006      	add	sp, #24
 8006344:	bd80      	pop	{r7, pc}
 8006346:	46c0      	nop			@ (mov r8, r8)
 8006348:	40021000 	.word	0x40021000
 800634c:	40007000 	.word	0x40007000
 8006350:	fffffcff 	.word	0xfffffcff
 8006354:	fffeffff 	.word	0xfffeffff
 8006358:	00001388 	.word	0x00001388
 800635c:	efffffff 	.word	0xefffffff
 8006360:	fffff3ff 	.word	0xfffff3ff
 8006364:	fff3ffff 	.word	0xfff3ffff
 8006368:	ffcfffff 	.word	0xffcfffff
 800636c:	ffffcfff 	.word	0xffffcfff
 8006370:	ffbfffff 	.word	0xffbfffff
 8006374:	ffff3fff 	.word	0xffff3fff

08006378 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	2380      	movs	r3, #128	@ 0x80
 8006388:	029b      	lsls	r3, r3, #10
 800638a:	429a      	cmp	r2, r3
 800638c:	d136      	bne.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800638e:	4bcd      	ldr	r3, [pc, #820]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006390:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006392:	23c0      	movs	r3, #192	@ 0xc0
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4013      	ands	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800639a:	4bca      	ldr	r3, [pc, #808]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800639c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800639e:	2202      	movs	r2, #2
 80063a0:	4013      	ands	r3, r2
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d108      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	2380      	movs	r3, #128	@ 0x80
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d103      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 80063b0:	2380      	movs	r3, #128	@ 0x80
 80063b2:	021b      	lsls	r3, r3, #8
 80063b4:	617b      	str	r3, [r7, #20]
 80063b6:	e26b      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80063b8:	4bc2      	ldr	r3, [pc, #776]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80063ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063bc:	2202      	movs	r2, #2
 80063be:	4013      	ands	r3, r2
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d108      	bne.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	2380      	movs	r3, #128	@ 0x80
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d103      	bne.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 80063ce:	23fa      	movs	r3, #250	@ 0xfa
 80063d0:	01db      	lsls	r3, r3, #7
 80063d2:	617b      	str	r3, [r7, #20]
 80063d4:	e25c      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80063d6:	4bbb      	ldr	r3, [pc, #748]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	2380      	movs	r3, #128	@ 0x80
 80063dc:	029b      	lsls	r3, r3, #10
 80063de:	401a      	ands	r2, r3
 80063e0:	2380      	movs	r3, #128	@ 0x80
 80063e2:	029b      	lsls	r3, r3, #10
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d000      	beq.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80063e8:	e252      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	23c0      	movs	r3, #192	@ 0xc0
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d000      	beq.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 80063f4:	e24c      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    {
      frequency = HSE_VALUE / 32U;
 80063f6:	4bb4      	ldr	r3, [pc, #720]	@ (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80063f8:	617b      	str	r3, [r7, #20]
 80063fa:	e249      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 80063fc:	4bb1      	ldr	r3, [pc, #708]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	2203      	movs	r2, #3
 8006402:	4013      	ands	r3, r2
 8006404:	2b02      	cmp	r3, #2
 8006406:	d102      	bne.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8006408:	4bb0      	ldr	r3, [pc, #704]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800640a:	613b      	str	r3, [r7, #16]
 800640c:	e00a      	b.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 800640e:	4bad      	ldr	r3, [pc, #692]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	2203      	movs	r2, #3
 8006414:	4013      	ands	r3, r2
 8006416:	2b03      	cmp	r3, #3
 8006418:	d102      	bne.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 800641a:	4bac      	ldr	r3, [pc, #688]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	e001      	b.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006424:	4ba7      	ldr	r3, [pc, #668]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	091b      	lsrs	r3, r3, #4
 800642a:	2207      	movs	r2, #7
 800642c:	4013      	ands	r3, r2
 800642e:	3301      	adds	r3, #1
 8006430:	0019      	movs	r1, r3
 8006432:	6938      	ldr	r0, [r7, #16]
 8006434:	f7f9 fe66 	bl	8000104 <__udivsi3>
 8006438:	0003      	movs	r3, r0
 800643a:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	2380      	movs	r3, #128	@ 0x80
 8006440:	039b      	lsls	r3, r3, #14
 8006442:	429a      	cmp	r2, r3
 8006444:	d100      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8006446:	e1e3      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	2380      	movs	r3, #128	@ 0x80
 800644c:	039b      	lsls	r3, r3, #14
 800644e:	429a      	cmp	r2, r3
 8006450:	d900      	bls.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006452:	e20c      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	2380      	movs	r3, #128	@ 0x80
 8006458:	01db      	lsls	r3, r3, #7
 800645a:	429a      	cmp	r2, r3
 800645c:	d100      	bne.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800645e:	e0a5      	b.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	2380      	movs	r3, #128	@ 0x80
 8006464:	01db      	lsls	r3, r3, #7
 8006466:	429a      	cmp	r2, r3
 8006468:	d900      	bls.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800646a:	e200      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	2380      	movs	r3, #128	@ 0x80
 8006470:	011b      	lsls	r3, r3, #4
 8006472:	429a      	cmp	r2, r3
 8006474:	d100      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006476:	e0fc      	b.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	2380      	movs	r3, #128	@ 0x80
 800647c:	011b      	lsls	r3, r3, #4
 800647e:	429a      	cmp	r2, r3
 8006480:	d900      	bls.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8006482:	e1f4      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	2380      	movs	r3, #128	@ 0x80
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	429a      	cmp	r2, r3
 800648c:	d100      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 800648e:	e181      	b.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	2380      	movs	r3, #128	@ 0x80
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	429a      	cmp	r2, r3
 8006498:	d900      	bls.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800649a:	e1e8      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	2380      	movs	r3, #128	@ 0x80
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d100      	bne.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80064a6:	e135      	b.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	2380      	movs	r3, #128	@ 0x80
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d900      	bls.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80064b2:	e1dc      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d100      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80064ba:	e0af      	b.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d900      	bls.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80064c2:	e1d4      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d003      	beq.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d033      	beq.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 80064d0:	e1cd      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80064d2:	4b7c      	ldr	r3, [pc, #496]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80064d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d6:	2203      	movs	r2, #3
 80064d8:	4013      	ands	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d104      	bne.n	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x174>
          frequency = HAL_RCC_GetPCLK1Freq();
 80064e2:	f7ff fdb9 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 80064e6:	0003      	movs	r3, r0
 80064e8:	617b      	str	r3, [r7, #20]
        break;
 80064ea:	e1c2      	b.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d104      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          frequency = HAL_RCC_GetSysClockFreq();
 80064f2:	f7ff fd27 	bl	8005f44 <HAL_RCC_GetSysClockFreq>
 80064f6:	0003      	movs	r3, r0
 80064f8:	617b      	str	r3, [r7, #20]
        break;
 80064fa:	e1ba      	b.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80064fc:	4b71      	ldr	r3, [pc, #452]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	2380      	movs	r3, #128	@ 0x80
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	401a      	ands	r2, r3
 8006506:	2380      	movs	r3, #128	@ 0x80
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	429a      	cmp	r2, r3
 800650c:	d105      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2b02      	cmp	r3, #2
 8006512:	d102      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = HSI_VALUE;
 8006514:	4b6d      	ldr	r3, [pc, #436]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006516:	617b      	str	r3, [r7, #20]
        break;
 8006518:	e1ab      	b.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800651a:	4b6a      	ldr	r3, [pc, #424]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800651c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800651e:	2202      	movs	r2, #2
 8006520:	4013      	ands	r3, r2
 8006522:	2b02      	cmp	r3, #2
 8006524:	d000      	beq.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8006526:	e1a4      	b.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b03      	cmp	r3, #3
 800652c:	d000      	beq.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 800652e:	e1a0      	b.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          frequency = LSE_VALUE;
 8006530:	2380      	movs	r3, #128	@ 0x80
 8006532:	021b      	lsls	r3, r3, #8
 8006534:	617b      	str	r3, [r7, #20]
        break;
 8006536:	e19c      	b.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006538:	4b62      	ldr	r3, [pc, #392]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800653a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800653c:	23c0      	movs	r3, #192	@ 0xc0
 800653e:	011b      	lsls	r3, r3, #4
 8006540:	4013      	ands	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d104      	bne.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800654a:	f7ff fd85 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 800654e:	0003      	movs	r3, r0
 8006550:	617b      	str	r3, [r7, #20]
        break;
 8006552:	e190      	b.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	2380      	movs	r3, #128	@ 0x80
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	429a      	cmp	r2, r3
 800655c:	d104      	bne.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800655e:	f7ff fcf1 	bl	8005f44 <HAL_RCC_GetSysClockFreq>
 8006562:	0003      	movs	r3, r0
 8006564:	617b      	str	r3, [r7, #20]
        break;
 8006566:	e186      	b.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006568:	4b56      	ldr	r3, [pc, #344]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	2380      	movs	r3, #128	@ 0x80
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	401a      	ands	r2, r3
 8006572:	2380      	movs	r3, #128	@ 0x80
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	429a      	cmp	r2, r3
 8006578:	d107      	bne.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	2380      	movs	r3, #128	@ 0x80
 800657e:	011b      	lsls	r3, r3, #4
 8006580:	429a      	cmp	r2, r3
 8006582:	d102      	bne.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = HSI_VALUE;
 8006584:	4b51      	ldr	r3, [pc, #324]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006586:	617b      	str	r3, [r7, #20]
        break;
 8006588:	e175      	b.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800658a:	4b4e      	ldr	r3, [pc, #312]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800658c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800658e:	2202      	movs	r2, #2
 8006590:	4013      	ands	r3, r2
 8006592:	2b02      	cmp	r3, #2
 8006594:	d000      	beq.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 8006596:	e16e      	b.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	23c0      	movs	r3, #192	@ 0xc0
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	429a      	cmp	r2, r3
 80065a0:	d000      	beq.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80065a2:	e168      	b.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          frequency = LSE_VALUE;
 80065a4:	2380      	movs	r3, #128	@ 0x80
 80065a6:	021b      	lsls	r3, r3, #8
 80065a8:	617b      	str	r3, [r7, #20]
        break;
 80065aa:	e164      	b.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80065ac:	4b45      	ldr	r3, [pc, #276]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80065ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b0:	0f9b      	lsrs	r3, r3, #30
 80065b2:	079b      	lsls	r3, r3, #30
 80065b4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d104      	bne.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          frequency = HAL_RCC_GetSysClockFreq();
 80065bc:	f7ff fcc2 	bl	8005f44 <HAL_RCC_GetSysClockFreq>
 80065c0:	0003      	movs	r3, r0
 80065c2:	617b      	str	r3, [r7, #20]
        break;
 80065c4:	e159      	b.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	2380      	movs	r3, #128	@ 0x80
 80065ca:	061b      	lsls	r3, r3, #24
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d102      	bne.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          frequency = HSI_VALUE;
 80065d0:	4b3e      	ldr	r3, [pc, #248]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80065d2:	617b      	str	r3, [r7, #20]
        break;
 80065d4:	e151      	b.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	2380      	movs	r3, #128	@ 0x80
 80065da:	05db      	lsls	r3, r3, #23
 80065dc:	429a      	cmp	r2, r3
 80065de:	d000      	beq.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80065e0:	e14b      	b.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80065e2:	4b38      	ldr	r3, [pc, #224]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	2380      	movs	r3, #128	@ 0x80
 80065e8:	025b      	lsls	r3, r3, #9
 80065ea:	4013      	ands	r3, r2
 80065ec:	d100      	bne.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 80065ee:	e144      	b.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80065f0:	4b34      	ldr	r3, [pc, #208]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	0a1b      	lsrs	r3, r3, #8
 80065f6:	227f      	movs	r2, #127	@ 0x7f
 80065f8:	4013      	ands	r3, r2
 80065fa:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	435a      	muls	r2, r3
 8006602:	4b30      	ldr	r3, [pc, #192]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	0c5b      	lsrs	r3, r3, #17
 8006608:	211f      	movs	r1, #31
 800660a:	400b      	ands	r3, r1
 800660c:	3301      	adds	r3, #1
 800660e:	0019      	movs	r1, r3
 8006610:	0010      	movs	r0, r2
 8006612:	f7f9 fd77 	bl	8000104 <__udivsi3>
 8006616:	0003      	movs	r3, r0
 8006618:	617b      	str	r3, [r7, #20]
        break;
 800661a:	e12e      	b.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800661c:	4b29      	ldr	r3, [pc, #164]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800661e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006620:	23c0      	movs	r3, #192	@ 0xc0
 8006622:	019b      	lsls	r3, r3, #6
 8006624:	4013      	ands	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d104      	bne.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 800662e:	f7ff fd13 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 8006632:	0003      	movs	r3, r0
 8006634:	617b      	str	r3, [r7, #20]
        break;
 8006636:	e122      	b.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	2380      	movs	r3, #128	@ 0x80
 800663c:	015b      	lsls	r3, r3, #5
 800663e:	429a      	cmp	r2, r3
 8006640:	d104      	bne.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006642:	f7ff fc7f 	bl	8005f44 <HAL_RCC_GetSysClockFreq>
 8006646:	0003      	movs	r3, r0
 8006648:	617b      	str	r3, [r7, #20]
        break;
 800664a:	e118      	b.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800664c:	4b1d      	ldr	r3, [pc, #116]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	2380      	movs	r3, #128	@ 0x80
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	401a      	ands	r2, r3
 8006656:	2380      	movs	r3, #128	@ 0x80
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	429a      	cmp	r2, r3
 800665c:	d000      	beq.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800665e:	e10e      	b.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	2380      	movs	r3, #128	@ 0x80
 8006664:	019b      	lsls	r3, r3, #6
 8006666:	429a      	cmp	r2, r3
 8006668:	d000      	beq.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800666a:	e108      	b.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          frequency = HSI_VALUE;
 800666c:	4b17      	ldr	r3, [pc, #92]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800666e:	617b      	str	r3, [r7, #20]
        break;
 8006670:	e105      	b.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8006672:	4b14      	ldr	r3, [pc, #80]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006674:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006676:	23c0      	movs	r3, #192	@ 0xc0
 8006678:	021b      	lsls	r3, r3, #8
 800667a:	4013      	ands	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	2380      	movs	r3, #128	@ 0x80
 8006682:	01db      	lsls	r3, r3, #7
 8006684:	429a      	cmp	r2, r3
 8006686:	d123      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8006688:	4b0e      	ldr	r3, [pc, #56]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	2380      	movs	r3, #128	@ 0x80
 800668e:	025b      	lsls	r3, r3, #9
 8006690:	4013      	ands	r3, r2
 8006692:	d100      	bne.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006694:	e0f5      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006696:	4b0b      	ldr	r3, [pc, #44]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	0a1b      	lsrs	r3, r3, #8
 800669c:	227f      	movs	r2, #127	@ 0x7f
 800669e:	4013      	ands	r3, r2
 80066a0:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	435a      	muls	r2, r3
 80066a8:	4b06      	ldr	r3, [pc, #24]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	0c5b      	lsrs	r3, r3, #17
 80066ae:	211f      	movs	r1, #31
 80066b0:	400b      	ands	r3, r1
 80066b2:	3301      	adds	r3, #1
 80066b4:	0019      	movs	r1, r3
 80066b6:	0010      	movs	r0, r2
 80066b8:	f7f9 fd24 	bl	8000104 <__udivsi3>
 80066bc:	0003      	movs	r3, r0
 80066be:	617b      	str	r3, [r7, #20]
        break;
 80066c0:	e0df      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80066c2:	46c0      	nop			@ (mov r8, r8)
 80066c4:	40021000 	.word	0x40021000
 80066c8:	0007a120 	.word	0x0007a120
 80066cc:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d104      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          frequency = HAL_RCC_GetSysClockFreq();
 80066d6:	f7ff fc35 	bl	8005f44 <HAL_RCC_GetSysClockFreq>
 80066da:	0003      	movs	r3, r0
 80066dc:	617b      	str	r3, [r7, #20]
        break;
 80066de:	e0d0      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 80066e0:	4b6e      	ldr	r3, [pc, #440]	@ (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	2380      	movs	r3, #128	@ 0x80
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	401a      	ands	r2, r3
 80066ea:	2380      	movs	r3, #128	@ 0x80
 80066ec:	00db      	lsls	r3, r3, #3
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d107      	bne.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	2380      	movs	r3, #128	@ 0x80
 80066f6:	021b      	lsls	r3, r3, #8
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d102      	bne.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
          frequency = HSI_VALUE;
 80066fc:	4b68      	ldr	r3, [pc, #416]	@ (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80066fe:	617b      	str	r3, [r7, #20]
        break;
 8006700:	e0bf      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	23c0      	movs	r3, #192	@ 0xc0
 8006706:	021b      	lsls	r3, r3, #8
 8006708:	429a      	cmp	r2, r3
 800670a:	d000      	beq.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800670c:	e0b9      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 800670e:	4b65      	ldr	r3, [pc, #404]	@ (80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006710:	617b      	str	r3, [r7, #20]
        break;
 8006712:	e0b6      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006714:	4b61      	ldr	r3, [pc, #388]	@ (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006716:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006718:	23c0      	movs	r3, #192	@ 0xc0
 800671a:	031b      	lsls	r3, r3, #12
 800671c:	4013      	ands	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d104      	bne.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006726:	f7ff fc97 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 800672a:	0003      	movs	r3, r0
 800672c:	617b      	str	r3, [r7, #20]
        break;
 800672e:	e0aa      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006730:	4b5a      	ldr	r3, [pc, #360]	@ (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006734:	2202      	movs	r2, #2
 8006736:	4013      	ands	r3, r2
 8006738:	2b02      	cmp	r3, #2
 800673a:	d108      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	2380      	movs	r3, #128	@ 0x80
 8006740:	02db      	lsls	r3, r3, #11
 8006742:	429a      	cmp	r2, r3
 8006744:	d103      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = LSI_VALUE;
 8006746:	23fa      	movs	r3, #250	@ 0xfa
 8006748:	01db      	lsls	r3, r3, #7
 800674a:	617b      	str	r3, [r7, #20]
 800674c:	e021      	b.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800674e:	4b53      	ldr	r3, [pc, #332]	@ (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	2380      	movs	r3, #128	@ 0x80
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	401a      	ands	r2, r3
 8006758:	2380      	movs	r3, #128	@ 0x80
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	429a      	cmp	r2, r3
 800675e:	d107      	bne.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	2380      	movs	r3, #128	@ 0x80
 8006764:	031b      	lsls	r3, r3, #12
 8006766:	429a      	cmp	r2, r3
 8006768:	d102      	bne.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          frequency = HSI_VALUE;
 800676a:	4b4d      	ldr	r3, [pc, #308]	@ (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800676c:	617b      	str	r3, [r7, #20]
 800676e:	e010      	b.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006770:	4b4a      	ldr	r3, [pc, #296]	@ (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006774:	2202      	movs	r2, #2
 8006776:	4013      	ands	r3, r2
 8006778:	2b02      	cmp	r3, #2
 800677a:	d000      	beq.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 800677c:	e083      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	23c0      	movs	r3, #192	@ 0xc0
 8006782:	031b      	lsls	r3, r3, #12
 8006784:	429a      	cmp	r2, r3
 8006786:	d000      	beq.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8006788:	e07d      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
          frequency = LSE_VALUE;
 800678a:	2380      	movs	r3, #128	@ 0x80
 800678c:	021b      	lsls	r3, r3, #8
 800678e:	617b      	str	r3, [r7, #20]
        break;
 8006790:	e079      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006792:	e078      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006794:	4b41      	ldr	r3, [pc, #260]	@ (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006796:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006798:	23c0      	movs	r3, #192	@ 0xc0
 800679a:	039b      	lsls	r3, r3, #14
 800679c:	4013      	ands	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d104      	bne.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067a6:	f7ff fc57 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 80067aa:	0003      	movs	r3, r0
 80067ac:	617b      	str	r3, [r7, #20]
        break;
 80067ae:	e06c      	b.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80067b0:	4b3a      	ldr	r3, [pc, #232]	@ (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067b4:	2202      	movs	r2, #2
 80067b6:	4013      	ands	r3, r2
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d108      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	2380      	movs	r3, #128	@ 0x80
 80067c0:	035b      	lsls	r3, r3, #13
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d103      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          frequency = LSI_VALUE;
 80067c6:	23fa      	movs	r3, #250	@ 0xfa
 80067c8:	01db      	lsls	r3, r3, #7
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	e01f      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80067ce:	4b33      	ldr	r3, [pc, #204]	@ (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	2380      	movs	r3, #128	@ 0x80
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	401a      	ands	r2, r3
 80067d8:	2380      	movs	r3, #128	@ 0x80
 80067da:	00db      	lsls	r3, r3, #3
 80067dc:	429a      	cmp	r2, r3
 80067de:	d107      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	2380      	movs	r3, #128	@ 0x80
 80067e4:	039b      	lsls	r3, r3, #14
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d102      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HSI_VALUE;
 80067ea:	4b2d      	ldr	r3, [pc, #180]	@ (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	e00e      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80067f0:	4b2a      	ldr	r3, [pc, #168]	@ (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067f4:	2202      	movs	r2, #2
 80067f6:	4013      	ands	r3, r2
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d146      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	23c0      	movs	r3, #192	@ 0xc0
 8006800:	039b      	lsls	r3, r3, #14
 8006802:	429a      	cmp	r2, r3
 8006804:	d141      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          frequency = LSE_VALUE;
 8006806:	2380      	movs	r3, #128	@ 0x80
 8006808:	021b      	lsls	r3, r3, #8
 800680a:	617b      	str	r3, [r7, #20]
        break;
 800680c:	e03d      	b.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 800680e:	e03c      	b.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8006810:	4b22      	ldr	r3, [pc, #136]	@ (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006812:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006814:	2380      	movs	r3, #128	@ 0x80
 8006816:	03db      	lsls	r3, r3, #15
 8006818:	4013      	ands	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	2380      	movs	r3, #128	@ 0x80
 8006820:	03db      	lsls	r3, r3, #15
 8006822:	429a      	cmp	r2, r3
 8006824:	d11b      	bne.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8006826:	4b1d      	ldr	r3, [pc, #116]	@ (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	2380      	movs	r3, #128	@ 0x80
 800682c:	045b      	lsls	r3, r3, #17
 800682e:	4013      	ands	r3, r2
 8006830:	d02d      	beq.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006832:	4b1a      	ldr	r3, [pc, #104]	@ (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	0a1b      	lsrs	r3, r3, #8
 8006838:	227f      	movs	r2, #127	@ 0x7f
 800683a:	4013      	ands	r3, r2
 800683c:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	435a      	muls	r2, r3
 8006844:	4b15      	ldr	r3, [pc, #84]	@ (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	0e5b      	lsrs	r3, r3, #25
 800684a:	2107      	movs	r1, #7
 800684c:	400b      	ands	r3, r1
 800684e:	3301      	adds	r3, #1
 8006850:	0019      	movs	r1, r3
 8006852:	0010      	movs	r0, r2
 8006854:	f7f9 fc56 	bl	8000104 <__udivsi3>
 8006858:	0003      	movs	r3, r0
 800685a:	617b      	str	r3, [r7, #20]
        break;
 800685c:	e017      	b.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d114      	bne.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006864:	f7ff fbf8 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 8006868:	0003      	movs	r3, r0
 800686a:	617b      	str	r3, [r7, #20]
        break;
 800686c:	e00f      	b.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        break;
 800686e:	46c0      	nop			@ (mov r8, r8)
 8006870:	e00e      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006872:	46c0      	nop			@ (mov r8, r8)
 8006874:	e00c      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006876:	46c0      	nop			@ (mov r8, r8)
 8006878:	e00a      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800687a:	46c0      	nop			@ (mov r8, r8)
 800687c:	e008      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800687e:	46c0      	nop			@ (mov r8, r8)
 8006880:	e006      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006882:	46c0      	nop			@ (mov r8, r8)
 8006884:	e004      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006886:	46c0      	nop			@ (mov r8, r8)
 8006888:	e002      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800688a:	46c0      	nop			@ (mov r8, r8)
 800688c:	e000      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800688e:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return (frequency);
 8006890:	697b      	ldr	r3, [r7, #20]
}
 8006892:	0018      	movs	r0, r3
 8006894:	46bd      	mov	sp, r7
 8006896:	b006      	add	sp, #24
 8006898:	bd80      	pop	{r7, pc}
 800689a:	46c0      	nop			@ (mov r8, r8)
 800689c:	40021000 	.word	0x40021000
 80068a0:	00f42400 	.word	0x00f42400
 80068a4:	00bb8000 	.word	0x00bb8000

080068a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80068a8:	b5b0      	push	{r4, r5, r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80068b0:	230f      	movs	r3, #15
 80068b2:	18fb      	adds	r3, r7, r3
 80068b4:	2201      	movs	r2, #1
 80068b6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d100      	bne.n	80068c0 <HAL_RTC_Init+0x18>
 80068be:	e08c      	b.n	80069da <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2229      	movs	r2, #41	@ 0x29
 80068c4:	5c9b      	ldrb	r3, [r3, r2]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2228      	movs	r2, #40	@ 0x28
 80068d0:	2100      	movs	r1, #0
 80068d2:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2288      	movs	r2, #136	@ 0x88
 80068d8:	0212      	lsls	r2, r2, #8
 80068da:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	0018      	movs	r0, r3
 80068e0:	f7fc fd2a 	bl	8003338 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2229      	movs	r2, #41	@ 0x29
 80068e8:	2102      	movs	r1, #2
 80068ea:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	2210      	movs	r2, #16
 80068f4:	4013      	ands	r3, r2
 80068f6:	2b10      	cmp	r3, #16
 80068f8:	d062      	beq.n	80069c0 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	22ca      	movs	r2, #202	@ 0xca
 8006900:	625a      	str	r2, [r3, #36]	@ 0x24
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2253      	movs	r2, #83	@ 0x53
 8006908:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800690a:	250f      	movs	r5, #15
 800690c:	197c      	adds	r4, r7, r5
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	0018      	movs	r0, r3
 8006912:	f000 fc27 	bl	8007164 <RTC_EnterInitMode>
 8006916:	0003      	movs	r3, r0
 8006918:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800691a:	0028      	movs	r0, r5
 800691c:	183b      	adds	r3, r7, r0
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d12c      	bne.n	800697e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699a      	ldr	r2, [r3, #24]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	492e      	ldr	r1, [pc, #184]	@ (80069e8 <HAL_RTC_Init+0x140>)
 8006930:	400a      	ands	r2, r1
 8006932:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6999      	ldr	r1, [r3, #24]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	689a      	ldr	r2, [r3, #8]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	431a      	orrs	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	431a      	orrs	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6912      	ldr	r2, [r2, #16]
 800695a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6919      	ldr	r1, [r3, #16]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	041a      	lsls	r2, r3, #16
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006970:	183c      	adds	r4, r7, r0
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	0018      	movs	r0, r3
 8006976:	f000 fc37 	bl	80071e8 <RTC_ExitInitMode>
 800697a:	0003      	movs	r3, r0
 800697c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800697e:	230f      	movs	r3, #15
 8006980:	18fb      	adds	r3, r7, r3
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d116      	bne.n	80069b6 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699a      	ldr	r2, [r3, #24]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	00d2      	lsls	r2, r2, #3
 8006994:	08d2      	lsrs	r2, r2, #3
 8006996:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6999      	ldr	r1, [r3, #24]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	431a      	orrs	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	22ff      	movs	r2, #255	@ 0xff
 80069bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80069be:	e003      	b.n	80069c8 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80069c0:	230f      	movs	r3, #15
 80069c2:	18fb      	adds	r3, r7, r3
 80069c4:	2200      	movs	r2, #0
 80069c6:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80069c8:	230f      	movs	r3, #15
 80069ca:	18fb      	adds	r3, r7, r3
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d103      	bne.n	80069da <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2229      	movs	r2, #41	@ 0x29
 80069d6:	2101      	movs	r1, #1
 80069d8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80069da:	230f      	movs	r3, #15
 80069dc:	18fb      	adds	r3, r7, r3
 80069de:	781b      	ldrb	r3, [r3, #0]
}
 80069e0:	0018      	movs	r0, r3
 80069e2:	46bd      	mov	sp, r7
 80069e4:	b004      	add	sp, #16
 80069e6:	bdb0      	pop	{r4, r5, r7, pc}
 80069e8:	fb8fffbf 	.word	0xfb8fffbf

080069ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80069ec:	b5b0      	push	{r4, r5, r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2228      	movs	r2, #40	@ 0x28
 80069fc:	5c9b      	ldrb	r3, [r3, r2]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_RTC_SetTime+0x1a>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e092      	b.n	8006b2c <HAL_RTC_SetTime+0x140>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2228      	movs	r2, #40	@ 0x28
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2229      	movs	r2, #41	@ 0x29
 8006a12:	2102      	movs	r1, #2
 8006a14:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	22ca      	movs	r2, #202	@ 0xca
 8006a1c:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2253      	movs	r2, #83	@ 0x53
 8006a24:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a26:	2513      	movs	r5, #19
 8006a28:	197c      	adds	r4, r7, r5
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	f000 fb99 	bl	8007164 <RTC_EnterInitMode>
 8006a32:	0003      	movs	r3, r0
 8006a34:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8006a36:	197b      	adds	r3, r7, r5
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d162      	bne.n	8006b04 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d125      	bne.n	8006a90 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	2240      	movs	r2, #64	@ 0x40
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	d102      	bne.n	8006a56 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2200      	movs	r2, #0
 8006a54:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f000 fc08 	bl	8007270 <RTC_ByteToBcd2>
 8006a60:	0003      	movs	r3, r0
 8006a62:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	785b      	ldrb	r3, [r3, #1]
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f000 fc01 	bl	8007270 <RTC_ByteToBcd2>
 8006a6e:	0003      	movs	r3, r0
 8006a70:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a72:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	789b      	ldrb	r3, [r3, #2]
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f000 fbf9 	bl	8007270 <RTC_ByteToBcd2>
 8006a7e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a80:	0022      	movs	r2, r4
 8006a82:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	78db      	ldrb	r3, [r3, #3]
 8006a88:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	617b      	str	r3, [r7, #20]
 8006a8e:	e017      	b.n	8006ac0 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	2240      	movs	r2, #64	@ 0x40
 8006a98:	4013      	ands	r3, r2
 8006a9a:	d102      	bne.n	8006aa2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	785b      	ldrb	r3, [r3, #1]
 8006aac:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006aae:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ab4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	78db      	ldrb	r3, [r3, #3]
 8006aba:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006abc:	4313      	orrs	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	491b      	ldr	r1, [pc, #108]	@ (8006b34 <HAL_RTC_SetTime+0x148>)
 8006ac8:	400a      	ands	r2, r1
 8006aca:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699a      	ldr	r2, [r3, #24]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4918      	ldr	r1, [pc, #96]	@ (8006b38 <HAL_RTC_SetTime+0x14c>)
 8006ad8:	400a      	ands	r2, r1
 8006ada:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6999      	ldr	r1, [r3, #24]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	431a      	orrs	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006af4:	2313      	movs	r3, #19
 8006af6:	18fc      	adds	r4, r7, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	0018      	movs	r0, r3
 8006afc:	f000 fb74 	bl	80071e8 <RTC_ExitInitMode>
 8006b00:	0003      	movs	r3, r0
 8006b02:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	22ff      	movs	r2, #255	@ 0xff
 8006b0a:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8006b0c:	2313      	movs	r3, #19
 8006b0e:	18fb      	adds	r3, r7, r3
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d103      	bne.n	8006b1e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2229      	movs	r2, #41	@ 0x29
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2228      	movs	r2, #40	@ 0x28
 8006b22:	2100      	movs	r1, #0
 8006b24:	5499      	strb	r1, [r3, r2]

  return status;
 8006b26:	2313      	movs	r3, #19
 8006b28:	18fb      	adds	r3, r7, r3
 8006b2a:	781b      	ldrb	r3, [r3, #0]
}
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	b006      	add	sp, #24
 8006b32:	bdb0      	pop	{r4, r5, r7, pc}
 8006b34:	007f7f7f 	.word	0x007f7f7f
 8006b38:	fffbffff 	.word	0xfffbffff

08006b3c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689a      	ldr	r2, [r3, #8]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	045b      	lsls	r3, r3, #17
 8006b5a:	0c5a      	lsrs	r2, r3, #17
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a22      	ldr	r2, [pc, #136]	@ (8006bf0 <HAL_RTC_GetTime+0xb4>)
 8006b68:	4013      	ands	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	0c1b      	lsrs	r3, r3, #16
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	223f      	movs	r2, #63	@ 0x3f
 8006b74:	4013      	ands	r3, r2
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	0a1b      	lsrs	r3, r3, #8
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	227f      	movs	r2, #127	@ 0x7f
 8006b84:	4013      	ands	r3, r2
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	227f      	movs	r2, #127	@ 0x7f
 8006b92:	4013      	ands	r3, r2
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	0d9b      	lsrs	r3, r3, #22
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d11a      	bne.n	8006be6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	f000 fb83 	bl	80072c0 <RTC_Bcd2ToByte>
 8006bba:	0003      	movs	r3, r0
 8006bbc:	001a      	movs	r2, r3
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	785b      	ldrb	r3, [r3, #1]
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	f000 fb7a 	bl	80072c0 <RTC_Bcd2ToByte>
 8006bcc:	0003      	movs	r3, r0
 8006bce:	001a      	movs	r2, r3
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	789b      	ldrb	r3, [r3, #2]
 8006bd8:	0018      	movs	r0, r3
 8006bda:	f000 fb71 	bl	80072c0 <RTC_Bcd2ToByte>
 8006bde:	0003      	movs	r3, r0
 8006be0:	001a      	movs	r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	0018      	movs	r0, r3
 8006bea:	46bd      	mov	sp, r7
 8006bec:	b006      	add	sp, #24
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	007f7f7f 	.word	0x007f7f7f

08006bf4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	4a21      	ldr	r2, [pc, #132]	@ (8006c8c <HAL_RTC_GetDate+0x98>)
 8006c08:	4013      	ands	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	0c1b      	lsrs	r3, r3, #16
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	0a1b      	lsrs	r3, r3, #8
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	221f      	movs	r2, #31
 8006c1e:	4013      	ands	r3, r2
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	223f      	movs	r2, #63	@ 0x3f
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	0b5b      	lsrs	r3, r3, #13
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2207      	movs	r2, #7
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d11a      	bne.n	8006c80 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	78db      	ldrb	r3, [r3, #3]
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f000 fb36 	bl	80072c0 <RTC_Bcd2ToByte>
 8006c54:	0003      	movs	r3, r0
 8006c56:	001a      	movs	r2, r3
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	0018      	movs	r0, r3
 8006c62:	f000 fb2d 	bl	80072c0 <RTC_Bcd2ToByte>
 8006c66:	0003      	movs	r3, r0
 8006c68:	001a      	movs	r2, r3
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	789b      	ldrb	r3, [r3, #2]
 8006c72:	0018      	movs	r0, r3
 8006c74:	f000 fb24 	bl	80072c0 <RTC_Bcd2ToByte>
 8006c78:	0003      	movs	r3, r0
 8006c7a:	001a      	movs	r2, r3
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	0018      	movs	r0, r3
 8006c84:	46bd      	mov	sp, r7
 8006c86:	b006      	add	sp, #24
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	46c0      	nop			@ (mov r8, r8)
 8006c8c:	00ffff3f 	.word	0x00ffff3f

08006c90 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006c90:	b590      	push	{r4, r7, lr}
 8006c92:	b089      	sub	sp, #36	@ 0x24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2228      	movs	r2, #40	@ 0x28
 8006ca0:	5c9b      	ldrb	r3, [r3, r2]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d101      	bne.n	8006caa <HAL_RTC_SetAlarm_IT+0x1a>
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	e127      	b.n	8006efa <HAL_RTC_SetAlarm_IT+0x26a>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2228      	movs	r2, #40	@ 0x28
 8006cae:	2101      	movs	r1, #1
 8006cb0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2229      	movs	r2, #41	@ 0x29
 8006cb6:	2102      	movs	r1, #2
 8006cb8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d136      	bne.n	8006d2e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	2240      	movs	r2, #64	@ 0x40
 8006cc8:	4013      	ands	r3, r2
 8006cca:	d102      	bne.n	8006cd2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	f000 faca 	bl	8007270 <RTC_ByteToBcd2>
 8006cdc:	0003      	movs	r3, r0
 8006cde:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	785b      	ldrb	r3, [r3, #1]
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	f000 fac3 	bl	8007270 <RTC_ByteToBcd2>
 8006cea:	0003      	movs	r3, r0
 8006cec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006cee:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	789b      	ldrb	r3, [r3, #2]
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	f000 fabb 	bl	8007270 <RTC_ByteToBcd2>
 8006cfa:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006cfc:	0022      	movs	r2, r4
 8006cfe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	78db      	ldrb	r3, [r3, #3]
 8006d04:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006d06:	431a      	orrs	r2, r3
 8006d08:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	5c9b      	ldrb	r3, [r3, r2]
 8006d10:	0018      	movs	r0, r3
 8006d12:	f000 faad 	bl	8007270 <RTC_ByteToBcd2>
 8006d16:	0003      	movs	r3, r0
 8006d18:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d1a:	0022      	movs	r2, r4
 8006d1c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d22:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	61fb      	str	r3, [r7, #28]
 8006d2c:	e022      	b.n	8006d74 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	2240      	movs	r2, #64	@ 0x40
 8006d36:	4013      	ands	r3, r2
 8006d38:	d102      	bne.n	8006d40 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	785b      	ldrb	r3, [r3, #1]
 8006d4a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d4c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006d52:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	78db      	ldrb	r3, [r3, #3]
 8006d58:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006d5a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2120      	movs	r1, #32
 8006d60:	5c5b      	ldrb	r3, [r3, r1]
 8006d62:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d64:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d6a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d70:	4313      	orrs	r3, r2
 8006d72:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	22ca      	movs	r2, #202	@ 0xca
 8006d86:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2253      	movs	r2, #83	@ 0x53
 8006d8e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d94:	2380      	movs	r3, #128	@ 0x80
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d14c      	bne.n	8006e36 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4957      	ldr	r1, [pc, #348]	@ (8006f04 <HAL_RTC_SetAlarm_IT+0x274>)
 8006da8:	400a      	ands	r2, r1
 8006daa:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2101      	movs	r1, #1
 8006db8:	430a      	orrs	r2, r1
 8006dba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8006dbc:	f7fc fd7a 	bl	80038b4 <HAL_GetTick>
 8006dc0:	0003      	movs	r3, r0
 8006dc2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006dc4:	e016      	b.n	8006df4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006dc6:	f7fc fd75 	bl	80038b4 <HAL_GetTick>
 8006dca:	0002      	movs	r2, r0
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	1ad2      	subs	r2, r2, r3
 8006dd0:	23fa      	movs	r3, #250	@ 0xfa
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d90d      	bls.n	8006df4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	22ff      	movs	r2, #255	@ 0xff
 8006dde:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2229      	movs	r2, #41	@ 0x29
 8006de4:	2103      	movs	r1, #3
 8006de6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2228      	movs	r2, #40	@ 0x28
 8006dec:	2100      	movs	r1, #0
 8006dee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e082      	b.n	8006efa <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d0e2      	beq.n	8006dc6 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	69fa      	ldr	r2, [r7, #28]
 8006e06:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2180      	movs	r1, #128	@ 0x80
 8006e1c:	0049      	lsls	r1, r1, #1
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	699a      	ldr	r2, [r3, #24]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2180      	movs	r1, #128	@ 0x80
 8006e2e:	0149      	lsls	r1, r1, #5
 8006e30:	430a      	orrs	r2, r1
 8006e32:	619a      	str	r2, [r3, #24]
 8006e34:	e04b      	b.n	8006ece <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	699a      	ldr	r2, [r3, #24]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4931      	ldr	r1, [pc, #196]	@ (8006f08 <HAL_RTC_SetAlarm_IT+0x278>)
 8006e42:	400a      	ands	r2, r1
 8006e44:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2102      	movs	r1, #2
 8006e52:	430a      	orrs	r2, r1
 8006e54:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8006e56:	f7fc fd2d 	bl	80038b4 <HAL_GetTick>
 8006e5a:	0003      	movs	r3, r0
 8006e5c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006e5e:	e016      	b.n	8006e8e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006e60:	f7fc fd28 	bl	80038b4 <HAL_GetTick>
 8006e64:	0002      	movs	r2, r0
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	1ad2      	subs	r2, r2, r3
 8006e6a:	23fa      	movs	r3, #250	@ 0xfa
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d90d      	bls.n	8006e8e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	22ff      	movs	r2, #255	@ 0xff
 8006e78:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2229      	movs	r2, #41	@ 0x29
 8006e7e:	2103      	movs	r1, #3
 8006e80:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2228      	movs	r2, #40	@ 0x28
 8006e86:	2100      	movs	r1, #0
 8006e88:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e035      	b.n	8006efa <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	2202      	movs	r2, #2
 8006e96:	4013      	ands	r3, r2
 8006e98:	d0e2      	beq.n	8006e60 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	699a      	ldr	r2, [r3, #24]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2180      	movs	r1, #128	@ 0x80
 8006eb6:	0089      	lsls	r1, r1, #2
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699a      	ldr	r2, [r3, #24]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2180      	movs	r1, #128	@ 0x80
 8006ec8:	0189      	lsls	r1, r1, #6
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006ece:	4a0f      	ldr	r2, [pc, #60]	@ (8006f0c <HAL_RTC_SetAlarm_IT+0x27c>)
 8006ed0:	2380      	movs	r3, #128	@ 0x80
 8006ed2:	58d3      	ldr	r3, [r2, r3]
 8006ed4:	490d      	ldr	r1, [pc, #52]	@ (8006f0c <HAL_RTC_SetAlarm_IT+0x27c>)
 8006ed6:	2280      	movs	r2, #128	@ 0x80
 8006ed8:	0312      	lsls	r2, r2, #12
 8006eda:	4313      	orrs	r3, r2
 8006edc:	2280      	movs	r2, #128	@ 0x80
 8006ede:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	22ff      	movs	r2, #255	@ 0xff
 8006ee6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2229      	movs	r2, #41	@ 0x29
 8006eec:	2101      	movs	r1, #1
 8006eee:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2228      	movs	r2, #40	@ 0x28
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	0018      	movs	r0, r3
 8006efc:	46bd      	mov	sp, r7
 8006efe:	b009      	add	sp, #36	@ 0x24
 8006f00:	bd90      	pop	{r4, r7, pc}
 8006f02:	46c0      	nop			@ (mov r8, r8)
 8006f04:	fffffeff 	.word	0xfffffeff
 8006f08:	fffffdff 	.word	0xfffffdff
 8006f0c:	40021800 	.word	0x40021800

08006f10 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	2380      	movs	r3, #128	@ 0x80
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d144      	bne.n	8006fb2 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2280      	movs	r2, #128	@ 0x80
 8006f2c:	0052      	lsls	r2, r2, #1
 8006f2e:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f36:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f3e:	045b      	lsls	r3, r3, #17
 8006f40:	0c5b      	lsrs	r3, r3, #17
 8006f42:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	0c1b      	lsrs	r3, r3, #16
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	223f      	movs	r2, #63	@ 0x3f
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	0a1b      	lsrs	r3, r3, #8
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	227f      	movs	r2, #127	@ 0x7f
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	227f      	movs	r2, #127	@ 0x7f
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	0d9b      	lsrs	r3, r3, #22
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2201      	movs	r2, #1
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	0e1b      	lsrs	r3, r3, #24
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	223f      	movs	r2, #63	@ 0x3f
 8006f90:	4013      	ands	r3, r2
 8006f92:	b2d9      	uxtb	r1, r3
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2220      	movs	r2, #32
 8006f98:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	2380      	movs	r3, #128	@ 0x80
 8006f9e:	05db      	lsls	r3, r3, #23
 8006fa0:	401a      	ands	r2, r3
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	4a3b      	ldr	r2, [pc, #236]	@ (8007098 <HAL_RTC_GetAlarm+0x188>)
 8006faa:	401a      	ands	r2, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	615a      	str	r2, [r3, #20]
 8006fb0:	e043      	b.n	800703a <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2280      	movs	r2, #128	@ 0x80
 8006fb6:	0092      	lsls	r2, r2, #2
 8006fb8:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fc0:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fc8:	045b      	lsls	r3, r3, #17
 8006fca:	0c5b      	lsrs	r3, r3, #17
 8006fcc:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	0c1b      	lsrs	r3, r3, #16
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	223f      	movs	r2, #63	@ 0x3f
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	0a1b      	lsrs	r3, r3, #8
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	227f      	movs	r2, #127	@ 0x7f
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	227f      	movs	r2, #127	@ 0x7f
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	0d9b      	lsrs	r3, r3, #22
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2201      	movs	r2, #1
 8007004:	4013      	ands	r3, r2
 8007006:	b2da      	uxtb	r2, r3
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	0e1b      	lsrs	r3, r3, #24
 8007016:	b2db      	uxtb	r3, r3
 8007018:	223f      	movs	r2, #63	@ 0x3f
 800701a:	4013      	ands	r3, r2
 800701c:	b2d9      	uxtb	r1, r3
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2220      	movs	r2, #32
 8007022:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	2380      	movs	r3, #128	@ 0x80
 8007028:	05db      	lsls	r3, r3, #23
 800702a:	401a      	ands	r2, r3
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	4a19      	ldr	r2, [pc, #100]	@ (8007098 <HAL_RTC_GetAlarm+0x188>)
 8007034:	401a      	ands	r2, r3
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d125      	bne.n	800708c <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	0018      	movs	r0, r3
 8007046:	f000 f93b 	bl	80072c0 <RTC_Bcd2ToByte>
 800704a:	0003      	movs	r3, r0
 800704c:	001a      	movs	r2, r3
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	785b      	ldrb	r3, [r3, #1]
 8007056:	0018      	movs	r0, r3
 8007058:	f000 f932 	bl	80072c0 <RTC_Bcd2ToByte>
 800705c:	0003      	movs	r3, r0
 800705e:	001a      	movs	r2, r3
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	789b      	ldrb	r3, [r3, #2]
 8007068:	0018      	movs	r0, r3
 800706a:	f000 f929 	bl	80072c0 <RTC_Bcd2ToByte>
 800706e:	0003      	movs	r3, r0
 8007070:	001a      	movs	r2, r3
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2220      	movs	r2, #32
 800707a:	5c9b      	ldrb	r3, [r3, r2]
 800707c:	0018      	movs	r0, r3
 800707e:	f000 f91f 	bl	80072c0 <RTC_Bcd2ToByte>
 8007082:	0003      	movs	r3, r0
 8007084:	0019      	movs	r1, r3
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2220      	movs	r2, #32
 800708a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	0018      	movs	r0, r3
 8007090:	46bd      	mov	sp, r7
 8007092:	b006      	add	sp, #24
 8007094:	bd80      	pop	{r7, pc}
 8007096:	46c0      	nop			@ (mov r8, r8)
 8007098:	80808080 	.word	0x80808080

0800709c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699a      	ldr	r2, [r3, #24]
 80070aa:	2380      	movs	r3, #128	@ 0x80
 80070ac:	015b      	lsls	r3, r3, #5
 80070ae:	4013      	ands	r3, r2
 80070b0:	d011      	beq.n	80070d6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070b8:	2201      	movs	r2, #1
 80070ba:	4013      	ands	r3, r2
 80070bc:	d00b      	beq.n	80070d6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2101      	movs	r1, #1
 80070ca:	430a      	orrs	r2, r1
 80070cc:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	0018      	movs	r0, r3
 80070d2:	f7fb f84d 	bl	8002170 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	699a      	ldr	r2, [r3, #24]
 80070dc:	2380      	movs	r3, #128	@ 0x80
 80070de:	019b      	lsls	r3, r3, #6
 80070e0:	4013      	ands	r3, r2
 80070e2:	d011      	beq.n	8007108 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ea:	2202      	movs	r2, #2
 80070ec:	4013      	ands	r3, r2
 80070ee:	d00b      	beq.n	8007108 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2102      	movs	r1, #2
 80070fc:	430a      	orrs	r2, r1
 80070fe:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	0018      	movs	r0, r3
 8007104:	f000 f9a4 	bl	8007450 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2229      	movs	r2, #41	@ 0x29
 800710c:	2101      	movs	r1, #1
 800710e:	5499      	strb	r1, [r3, r2]
}
 8007110:	46c0      	nop			@ (mov r8, r8)
 8007112:	46bd      	mov	sp, r7
 8007114:	b002      	add	sp, #8
 8007116:	bd80      	pop	{r7, pc}

08007118 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a0e      	ldr	r2, [pc, #56]	@ (8007160 <HAL_RTC_WaitForSynchro+0x48>)
 8007126:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007128:	f7fc fbc4 	bl	80038b4 <HAL_GetTick>
 800712c:	0003      	movs	r3, r0
 800712e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8007130:	e00a      	b.n	8007148 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007132:	f7fc fbbf 	bl	80038b4 <HAL_GetTick>
 8007136:	0002      	movs	r2, r0
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	1ad2      	subs	r2, r2, r3
 800713c:	23fa      	movs	r3, #250	@ 0xfa
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	429a      	cmp	r2, r3
 8007142:	d901      	bls.n	8007148 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e006      	b.n	8007156 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	2220      	movs	r2, #32
 8007150:	4013      	ands	r3, r2
 8007152:	d0ee      	beq.n	8007132 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	0018      	movs	r0, r3
 8007158:	46bd      	mov	sp, r7
 800715a:	b004      	add	sp, #16
 800715c:	bd80      	pop	{r7, pc}
 800715e:	46c0      	nop			@ (mov r8, r8)
 8007160:	0001005f 	.word	0x0001005f

08007164 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800716c:	230f      	movs	r3, #15
 800716e:	18fb      	adds	r3, r7, r3
 8007170:	2200      	movs	r2, #0
 8007172:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	2240      	movs	r2, #64	@ 0x40
 800717c:	4013      	ands	r3, r2
 800717e:	d12c      	bne.n	80071da <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2180      	movs	r1, #128	@ 0x80
 800718c:	430a      	orrs	r2, r1
 800718e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007190:	f7fc fb90 	bl	80038b4 <HAL_GetTick>
 8007194:	0003      	movs	r3, r0
 8007196:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007198:	e014      	b.n	80071c4 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800719a:	f7fc fb8b 	bl	80038b4 <HAL_GetTick>
 800719e:	0002      	movs	r2, r0
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	1ad2      	subs	r2, r2, r3
 80071a4:	200f      	movs	r0, #15
 80071a6:	183b      	adds	r3, r7, r0
 80071a8:	1839      	adds	r1, r7, r0
 80071aa:	7809      	ldrb	r1, [r1, #0]
 80071ac:	7019      	strb	r1, [r3, #0]
 80071ae:	23fa      	movs	r3, #250	@ 0xfa
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d906      	bls.n	80071c4 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80071b6:	183b      	adds	r3, r7, r0
 80071b8:	2203      	movs	r2, #3
 80071ba:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2229      	movs	r2, #41	@ 0x29
 80071c0:	2103      	movs	r1, #3
 80071c2:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	2240      	movs	r2, #64	@ 0x40
 80071cc:	4013      	ands	r3, r2
 80071ce:	d104      	bne.n	80071da <RTC_EnterInitMode+0x76>
 80071d0:	230f      	movs	r3, #15
 80071d2:	18fb      	adds	r3, r7, r3
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d1df      	bne.n	800719a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80071da:	230f      	movs	r3, #15
 80071dc:	18fb      	adds	r3, r7, r3
 80071de:	781b      	ldrb	r3, [r3, #0]
}
 80071e0:	0018      	movs	r0, r3
 80071e2:	46bd      	mov	sp, r7
 80071e4:	b004      	add	sp, #16
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80071e8:	b590      	push	{r4, r7, lr}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071f0:	240f      	movs	r4, #15
 80071f2:	193b      	adds	r3, r7, r4
 80071f4:	2200      	movs	r2, #0
 80071f6:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80071f8:	4b1c      	ldr	r3, [pc, #112]	@ (800726c <RTC_ExitInitMode+0x84>)
 80071fa:	68da      	ldr	r2, [r3, #12]
 80071fc:	4b1b      	ldr	r3, [pc, #108]	@ (800726c <RTC_ExitInitMode+0x84>)
 80071fe:	2180      	movs	r1, #128	@ 0x80
 8007200:	438a      	bics	r2, r1
 8007202:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007204:	4b19      	ldr	r3, [pc, #100]	@ (800726c <RTC_ExitInitMode+0x84>)
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	2220      	movs	r2, #32
 800720a:	4013      	ands	r3, r2
 800720c:	d10d      	bne.n	800722a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	0018      	movs	r0, r3
 8007212:	f7ff ff81 	bl	8007118 <HAL_RTC_WaitForSynchro>
 8007216:	1e03      	subs	r3, r0, #0
 8007218:	d021      	beq.n	800725e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2229      	movs	r2, #41	@ 0x29
 800721e:	2103      	movs	r1, #3
 8007220:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8007222:	193b      	adds	r3, r7, r4
 8007224:	2203      	movs	r2, #3
 8007226:	701a      	strb	r2, [r3, #0]
 8007228:	e019      	b.n	800725e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800722a:	4b10      	ldr	r3, [pc, #64]	@ (800726c <RTC_ExitInitMode+0x84>)
 800722c:	699a      	ldr	r2, [r3, #24]
 800722e:	4b0f      	ldr	r3, [pc, #60]	@ (800726c <RTC_ExitInitMode+0x84>)
 8007230:	2120      	movs	r1, #32
 8007232:	438a      	bics	r2, r1
 8007234:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	0018      	movs	r0, r3
 800723a:	f7ff ff6d 	bl	8007118 <HAL_RTC_WaitForSynchro>
 800723e:	1e03      	subs	r3, r0, #0
 8007240:	d007      	beq.n	8007252 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2229      	movs	r2, #41	@ 0x29
 8007246:	2103      	movs	r1, #3
 8007248:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800724a:	230f      	movs	r3, #15
 800724c:	18fb      	adds	r3, r7, r3
 800724e:	2203      	movs	r2, #3
 8007250:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007252:	4b06      	ldr	r3, [pc, #24]	@ (800726c <RTC_ExitInitMode+0x84>)
 8007254:	699a      	ldr	r2, [r3, #24]
 8007256:	4b05      	ldr	r3, [pc, #20]	@ (800726c <RTC_ExitInitMode+0x84>)
 8007258:	2120      	movs	r1, #32
 800725a:	430a      	orrs	r2, r1
 800725c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800725e:	230f      	movs	r3, #15
 8007260:	18fb      	adds	r3, r7, r3
 8007262:	781b      	ldrb	r3, [r3, #0]
}
 8007264:	0018      	movs	r0, r3
 8007266:	46bd      	mov	sp, r7
 8007268:	b005      	add	sp, #20
 800726a:	bd90      	pop	{r4, r7, pc}
 800726c:	40002800 	.word	0x40002800

08007270 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	0002      	movs	r2, r0
 8007278:	1dfb      	adds	r3, r7, #7
 800727a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8007280:	230b      	movs	r3, #11
 8007282:	18fb      	adds	r3, r7, r3
 8007284:	1dfa      	adds	r2, r7, #7
 8007286:	7812      	ldrb	r2, [r2, #0]
 8007288:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800728a:	e008      	b.n	800729e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3301      	adds	r3, #1
 8007290:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8007292:	220b      	movs	r2, #11
 8007294:	18bb      	adds	r3, r7, r2
 8007296:	18ba      	adds	r2, r7, r2
 8007298:	7812      	ldrb	r2, [r2, #0]
 800729a:	3a0a      	subs	r2, #10
 800729c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800729e:	210b      	movs	r1, #11
 80072a0:	187b      	adds	r3, r7, r1
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2b09      	cmp	r3, #9
 80072a6:	d8f1      	bhi.n	800728c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	011b      	lsls	r3, r3, #4
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	187b      	adds	r3, r7, r1
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	b2db      	uxtb	r3, r3
}
 80072b8:	0018      	movs	r0, r3
 80072ba:	46bd      	mov	sp, r7
 80072bc:	b004      	add	sp, #16
 80072be:	bd80      	pop	{r7, pc}

080072c0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	0002      	movs	r2, r0
 80072c8:	1dfb      	adds	r3, r7, #7
 80072ca:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80072cc:	1dfb      	adds	r3, r7, #7
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	091b      	lsrs	r3, r3, #4
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	001a      	movs	r2, r3
 80072d6:	0013      	movs	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	189b      	adds	r3, r3, r2
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	1dfb      	adds	r3, r7, #7
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	210f      	movs	r1, #15
 80072ea:	400b      	ands	r3, r1
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	18d3      	adds	r3, r2, r3
 80072f0:	b2db      	uxtb	r3, r3
}
 80072f2:	0018      	movs	r0, r3
 80072f4:	46bd      	mov	sp, r7
 80072f6:	b004      	add	sp, #16
 80072f8:	bd80      	pop	{r7, pc}

080072fa <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b086      	sub	sp, #24
 80072fe:	af00      	add	r7, sp, #0
 8007300:	60f8      	str	r0, [r7, #12]
 8007302:	60b9      	str	r1, [r7, #8]
 8007304:	607a      	str	r2, [r7, #4]
 8007306:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2228      	movs	r2, #40	@ 0x28
 800730c:	5c9b      	ldrb	r3, [r3, r2]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d101      	bne.n	8007316 <HAL_RTCEx_SetSmoothCalib+0x1c>
 8007312:	2302      	movs	r3, #2
 8007314:	e04f      	b.n	80073b6 <HAL_RTCEx_SetSmoothCalib+0xbc>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2228      	movs	r2, #40	@ 0x28
 800731a:	2101      	movs	r1, #1
 800731c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2229      	movs	r2, #41	@ 0x29
 8007322:	2102      	movs	r1, #2
 8007324:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	22ca      	movs	r2, #202	@ 0xca
 800732c:	625a      	str	r2, [r3, #36]	@ 0x24
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2253      	movs	r2, #83	@ 0x53
 8007334:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68da      	ldr	r2, [r3, #12]
 800733c:	2380      	movs	r3, #128	@ 0x80
 800733e:	025b      	lsls	r3, r3, #9
 8007340:	4013      	ands	r3, r2
 8007342:	d022      	beq.n	800738a <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8007344:	f7fc fab6 	bl	80038b4 <HAL_GetTick>
 8007348:	0003      	movs	r3, r0
 800734a:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 800734c:	e016      	b.n	800737c <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800734e:	f7fc fab1 	bl	80038b4 <HAL_GetTick>
 8007352:	0002      	movs	r2, r0
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	1ad2      	subs	r2, r2, r3
 8007358:	23fa      	movs	r3, #250	@ 0xfa
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	429a      	cmp	r2, r3
 800735e:	d90d      	bls.n	800737c <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	22ff      	movs	r2, #255	@ 0xff
 8007366:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2229      	movs	r2, #41	@ 0x29
 800736c:	2103      	movs	r1, #3
 800736e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2228      	movs	r2, #40	@ 0x28
 8007374:	2100      	movs	r1, #0
 8007376:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e01c      	b.n	80073b6 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	2380      	movs	r3, #128	@ 0x80
 8007384:	025b      	lsls	r3, r3, #9
 8007386:	4013      	ands	r3, r2
 8007388:	d1e1      	bne.n	800734e <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	431a      	orrs	r2, r3
 8007390:	0011      	movs	r1, r2
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	22ff      	movs	r2, #255	@ 0xff
 80073a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2229      	movs	r2, #41	@ 0x29
 80073a8:	2101      	movs	r1, #1
 80073aa:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2228      	movs	r2, #40	@ 0x28
 80073b0:	2100      	movs	r1, #0
 80073b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	0018      	movs	r0, r3
 80073b8:	46bd      	mov	sp, r7
 80073ba:	b006      	add	sp, #24
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2228      	movs	r2, #40	@ 0x28
 80073ce:	5c9b      	ldrb	r3, [r3, r2]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d101      	bne.n	80073d8 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80073d4:	2302      	movs	r3, #2
 80073d6:	e035      	b.n	8007444 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2228      	movs	r2, #40	@ 0x28
 80073dc:	2101      	movs	r1, #1
 80073de:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2229      	movs	r2, #41	@ 0x29
 80073e4:	2102      	movs	r1, #2
 80073e6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	22ca      	movs	r2, #202	@ 0xca
 80073ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2253      	movs	r2, #83	@ 0x53
 80073f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	699a      	ldr	r2, [r3, #24]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4912      	ldr	r1, [pc, #72]	@ (800744c <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8007404:	400a      	ands	r2, r1
 8007406:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6999      	ldr	r1, [r3, #24]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699a      	ldr	r2, [r3, #24]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2180      	movs	r1, #128	@ 0x80
 8007424:	0409      	lsls	r1, r1, #16
 8007426:	430a      	orrs	r2, r1
 8007428:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	22ff      	movs	r2, #255	@ 0xff
 8007430:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2229      	movs	r2, #41	@ 0x29
 8007436:	2101      	movs	r1, #1
 8007438:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2228      	movs	r2, #40	@ 0x28
 800743e:	2100      	movs	r1, #0
 8007440:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	0018      	movs	r0, r3
 8007446:	46bd      	mov	sp, r7
 8007448:	b002      	add	sp, #8
 800744a:	bd80      	pop	{r7, pc}
 800744c:	fff7ffff 	.word	0xfff7ffff

08007450 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007458:	46c0      	nop			@ (mov r8, r8)
 800745a:	46bd      	mov	sp, r7
 800745c:	b002      	add	sp, #8
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	001a      	movs	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	18d3      	adds	r3, r2, r3
 8007478:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	3301      	adds	r3, #1
 800747e:	33ff      	adds	r3, #255	@ 0xff
 8007480:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	18d3      	adds	r3, r2, r3
 800748a:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	601a      	str	r2, [r3, #0]
}
 8007492:	46c0      	nop			@ (mov r8, r8)
 8007494:	46bd      	mov	sp, r7
 8007496:	b006      	add	sp, #24
 8007498:	bd80      	pop	{r7, pc}

0800749a <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	001a      	movs	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	18d3      	adds	r3, r2, r3
 80074b0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3301      	adds	r3, #1
 80074b6:	33ff      	adds	r3, #255	@ 0xff
 80074b8:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	18d3      	adds	r3, r2, r3
 80074c2:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	681b      	ldr	r3, [r3, #0]
}
 80074c8:	0018      	movs	r0, r3
 80074ca:	46bd      	mov	sp, r7
 80074cc:	b004      	add	sp, #16
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e0a8      	b.n	8007634 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d109      	bne.n	80074fe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	2382      	movs	r3, #130	@ 0x82
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d009      	beq.n	800750a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	61da      	str	r2, [r3, #28]
 80074fc:	e005      	b.n	800750a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	225d      	movs	r2, #93	@ 0x5d
 8007514:	5c9b      	ldrb	r3, [r3, r2]
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	d107      	bne.n	800752c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	225c      	movs	r2, #92	@ 0x5c
 8007520:	2100      	movs	r1, #0
 8007522:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	0018      	movs	r0, r3
 8007528:	f7fb ff4c 	bl	80033c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	225d      	movs	r2, #93	@ 0x5d
 8007530:	2102      	movs	r1, #2
 8007532:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2140      	movs	r1, #64	@ 0x40
 8007540:	438a      	bics	r2, r1
 8007542:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68da      	ldr	r2, [r3, #12]
 8007548:	23e0      	movs	r3, #224	@ 0xe0
 800754a:	00db      	lsls	r3, r3, #3
 800754c:	429a      	cmp	r2, r3
 800754e:	d902      	bls.n	8007556 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007550:	2300      	movs	r3, #0
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	e002      	b.n	800755c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007556:	2380      	movs	r3, #128	@ 0x80
 8007558:	015b      	lsls	r3, r3, #5
 800755a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68da      	ldr	r2, [r3, #12]
 8007560:	23f0      	movs	r3, #240	@ 0xf0
 8007562:	011b      	lsls	r3, r3, #4
 8007564:	429a      	cmp	r2, r3
 8007566:	d008      	beq.n	800757a <HAL_SPI_Init+0xaa>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68da      	ldr	r2, [r3, #12]
 800756c:	23e0      	movs	r3, #224	@ 0xe0
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	429a      	cmp	r2, r3
 8007572:	d002      	beq.n	800757a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	2382      	movs	r3, #130	@ 0x82
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	401a      	ands	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6899      	ldr	r1, [r3, #8]
 8007588:	2384      	movs	r3, #132	@ 0x84
 800758a:	021b      	lsls	r3, r3, #8
 800758c:	400b      	ands	r3, r1
 800758e:	431a      	orrs	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	2102      	movs	r1, #2
 8007596:	400b      	ands	r3, r1
 8007598:	431a      	orrs	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	2101      	movs	r1, #1
 80075a0:	400b      	ands	r3, r1
 80075a2:	431a      	orrs	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6999      	ldr	r1, [r3, #24]
 80075a8:	2380      	movs	r3, #128	@ 0x80
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	400b      	ands	r3, r1
 80075ae:	431a      	orrs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	2138      	movs	r1, #56	@ 0x38
 80075b6:	400b      	ands	r3, r1
 80075b8:	431a      	orrs	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	2180      	movs	r1, #128	@ 0x80
 80075c0:	400b      	ands	r3, r1
 80075c2:	431a      	orrs	r2, r3
 80075c4:	0011      	movs	r1, r2
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075ca:	2380      	movs	r3, #128	@ 0x80
 80075cc:	019b      	lsls	r3, r3, #6
 80075ce:	401a      	ands	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	0c1b      	lsrs	r3, r3, #16
 80075de:	2204      	movs	r2, #4
 80075e0:	401a      	ands	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e6:	2110      	movs	r1, #16
 80075e8:	400b      	ands	r3, r1
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075f0:	2108      	movs	r1, #8
 80075f2:	400b      	ands	r3, r1
 80075f4:	431a      	orrs	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68d9      	ldr	r1, [r3, #12]
 80075fa:	23f0      	movs	r3, #240	@ 0xf0
 80075fc:	011b      	lsls	r3, r3, #4
 80075fe:	400b      	ands	r3, r1
 8007600:	431a      	orrs	r2, r3
 8007602:	0011      	movs	r1, r2
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	2380      	movs	r3, #128	@ 0x80
 8007608:	015b      	lsls	r3, r3, #5
 800760a:	401a      	ands	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	69da      	ldr	r2, [r3, #28]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4907      	ldr	r1, [pc, #28]	@ (800763c <HAL_SPI_Init+0x16c>)
 8007620:	400a      	ands	r2, r1
 8007622:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	225d      	movs	r2, #93	@ 0x5d
 800762e:	2101      	movs	r1, #1
 8007630:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	0018      	movs	r0, r3
 8007636:	46bd      	mov	sp, r7
 8007638:	b004      	add	sp, #16
 800763a:	bd80      	pop	{r7, pc}
 800763c:	fffff7ff 	.word	0xfffff7ff

08007640 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	603b      	str	r3, [r7, #0]
 800764c:	1dbb      	adds	r3, r7, #6
 800764e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007650:	231f      	movs	r3, #31
 8007652:	18fb      	adds	r3, r7, r3
 8007654:	2200      	movs	r2, #0
 8007656:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	225c      	movs	r2, #92	@ 0x5c
 800765c:	5c9b      	ldrb	r3, [r3, r2]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d101      	bne.n	8007666 <HAL_SPI_Transmit+0x26>
 8007662:	2302      	movs	r3, #2
 8007664:	e147      	b.n	80078f6 <HAL_SPI_Transmit+0x2b6>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	225c      	movs	r2, #92	@ 0x5c
 800766a:	2101      	movs	r1, #1
 800766c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800766e:	f7fc f921 	bl	80038b4 <HAL_GetTick>
 8007672:	0003      	movs	r3, r0
 8007674:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007676:	2316      	movs	r3, #22
 8007678:	18fb      	adds	r3, r7, r3
 800767a:	1dba      	adds	r2, r7, #6
 800767c:	8812      	ldrh	r2, [r2, #0]
 800767e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	225d      	movs	r2, #93	@ 0x5d
 8007684:	5c9b      	ldrb	r3, [r3, r2]
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b01      	cmp	r3, #1
 800768a:	d004      	beq.n	8007696 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800768c:	231f      	movs	r3, #31
 800768e:	18fb      	adds	r3, r7, r3
 8007690:	2202      	movs	r2, #2
 8007692:	701a      	strb	r2, [r3, #0]
    goto error;
 8007694:	e128      	b.n	80078e8 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d003      	beq.n	80076a4 <HAL_SPI_Transmit+0x64>
 800769c:	1dbb      	adds	r3, r7, #6
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d104      	bne.n	80076ae <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80076a4:	231f      	movs	r3, #31
 80076a6:	18fb      	adds	r3, r7, r3
 80076a8:	2201      	movs	r2, #1
 80076aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80076ac:	e11c      	b.n	80078e8 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	225d      	movs	r2, #93	@ 0x5d
 80076b2:	2103      	movs	r1, #3
 80076b4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	1dba      	adds	r2, r7, #6
 80076c6:	8812      	ldrh	r2, [r2, #0]
 80076c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	1dba      	adds	r2, r7, #6
 80076ce:	8812      	ldrh	r2, [r2, #0]
 80076d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2244      	movs	r2, #68	@ 0x44
 80076dc:	2100      	movs	r1, #0
 80076de:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2246      	movs	r2, #70	@ 0x46
 80076e4:	2100      	movs	r1, #0
 80076e6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	2380      	movs	r3, #128	@ 0x80
 80076fa:	021b      	lsls	r3, r3, #8
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d110      	bne.n	8007722 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2140      	movs	r1, #64	@ 0x40
 800770c:	438a      	bics	r2, r1
 800770e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2180      	movs	r1, #128	@ 0x80
 800771c:	01c9      	lsls	r1, r1, #7
 800771e:	430a      	orrs	r2, r1
 8007720:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2240      	movs	r2, #64	@ 0x40
 800772a:	4013      	ands	r3, r2
 800772c:	2b40      	cmp	r3, #64	@ 0x40
 800772e:	d007      	beq.n	8007740 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2140      	movs	r1, #64	@ 0x40
 800773c:	430a      	orrs	r2, r1
 800773e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	23e0      	movs	r3, #224	@ 0xe0
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	429a      	cmp	r2, r3
 800774a:	d952      	bls.n	80077f2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d004      	beq.n	800775e <HAL_SPI_Transmit+0x11e>
 8007754:	2316      	movs	r3, #22
 8007756:	18fb      	adds	r3, r7, r3
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d143      	bne.n	80077e6 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007762:	881a      	ldrh	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776e:	1c9a      	adds	r2, r3, #2
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	b29a      	uxth	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007782:	e030      	b.n	80077e6 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	2202      	movs	r2, #2
 800778c:	4013      	ands	r3, r2
 800778e:	2b02      	cmp	r3, #2
 8007790:	d112      	bne.n	80077b8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007796:	881a      	ldrh	r2, [r3, #0]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a2:	1c9a      	adds	r2, r3, #2
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	3b01      	subs	r3, #1
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80077b6:	e016      	b.n	80077e6 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077b8:	f7fc f87c 	bl	80038b4 <HAL_GetTick>
 80077bc:	0002      	movs	r2, r0
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d802      	bhi.n	80077ce <HAL_SPI_Transmit+0x18e>
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	3301      	adds	r3, #1
 80077cc:	d102      	bne.n	80077d4 <HAL_SPI_Transmit+0x194>
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d108      	bne.n	80077e6 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80077d4:	231f      	movs	r3, #31
 80077d6:	18fb      	adds	r3, r7, r3
 80077d8:	2203      	movs	r2, #3
 80077da:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	225d      	movs	r2, #93	@ 0x5d
 80077e0:	2101      	movs	r1, #1
 80077e2:	5499      	strb	r1, [r3, r2]
          goto error;
 80077e4:	e080      	b.n	80078e8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1c9      	bne.n	8007784 <HAL_SPI_Transmit+0x144>
 80077f0:	e053      	b.n	800789a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d004      	beq.n	8007804 <HAL_SPI_Transmit+0x1c4>
 80077fa:	2316      	movs	r3, #22
 80077fc:	18fb      	adds	r3, r7, r3
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d145      	bne.n	8007890 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	330c      	adds	r3, #12
 800780e:	7812      	ldrb	r2, [r2, #0]
 8007810:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007820:	b29b      	uxth	r3, r3
 8007822:	3b01      	subs	r3, #1
 8007824:	b29a      	uxth	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800782a:	e031      	b.n	8007890 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	2202      	movs	r2, #2
 8007834:	4013      	ands	r3, r2
 8007836:	2b02      	cmp	r3, #2
 8007838:	d113      	bne.n	8007862 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	330c      	adds	r3, #12
 8007844:	7812      	ldrb	r2, [r2, #0]
 8007846:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007856:	b29b      	uxth	r3, r3
 8007858:	3b01      	subs	r3, #1
 800785a:	b29a      	uxth	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007860:	e016      	b.n	8007890 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007862:	f7fc f827 	bl	80038b4 <HAL_GetTick>
 8007866:	0002      	movs	r2, r0
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	683a      	ldr	r2, [r7, #0]
 800786e:	429a      	cmp	r2, r3
 8007870:	d802      	bhi.n	8007878 <HAL_SPI_Transmit+0x238>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	3301      	adds	r3, #1
 8007876:	d102      	bne.n	800787e <HAL_SPI_Transmit+0x23e>
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d108      	bne.n	8007890 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800787e:	231f      	movs	r3, #31
 8007880:	18fb      	adds	r3, r7, r3
 8007882:	2203      	movs	r2, #3
 8007884:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	225d      	movs	r2, #93	@ 0x5d
 800788a:	2101      	movs	r1, #1
 800788c:	5499      	strb	r1, [r3, r2]
          goto error;
 800788e:	e02b      	b.n	80078e8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007894:	b29b      	uxth	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1c8      	bne.n	800782c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	0018      	movs	r0, r3
 80078a2:	f000 fcef 	bl	8008284 <SPI_EndRxTxTransaction>
 80078a6:	1e03      	subs	r3, r0, #0
 80078a8:	d002      	beq.n	80078b0 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2220      	movs	r2, #32
 80078ae:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10a      	bne.n	80078ce <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078b8:	2300      	movs	r3, #0
 80078ba:	613b      	str	r3, [r7, #16]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	613b      	str	r3, [r7, #16]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	613b      	str	r3, [r7, #16]
 80078cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d004      	beq.n	80078e0 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80078d6:	231f      	movs	r3, #31
 80078d8:	18fb      	adds	r3, r7, r3
 80078da:	2201      	movs	r2, #1
 80078dc:	701a      	strb	r2, [r3, #0]
 80078de:	e003      	b.n	80078e8 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	225d      	movs	r2, #93	@ 0x5d
 80078e4:	2101      	movs	r1, #1
 80078e6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	225c      	movs	r2, #92	@ 0x5c
 80078ec:	2100      	movs	r1, #0
 80078ee:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80078f0:	231f      	movs	r3, #31
 80078f2:	18fb      	adds	r3, r7, r3
 80078f4:	781b      	ldrb	r3, [r3, #0]
}
 80078f6:	0018      	movs	r0, r3
 80078f8:	46bd      	mov	sp, r7
 80078fa:	b008      	add	sp, #32
 80078fc:	bd80      	pop	{r7, pc}
	...

08007900 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007900:	b590      	push	{r4, r7, lr}
 8007902:	b089      	sub	sp, #36	@ 0x24
 8007904:	af02      	add	r7, sp, #8
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	603b      	str	r3, [r7, #0]
 800790c:	1dbb      	adds	r3, r7, #6
 800790e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007910:	2117      	movs	r1, #23
 8007912:	187b      	adds	r3, r7, r1
 8007914:	2200      	movs	r2, #0
 8007916:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	225d      	movs	r2, #93	@ 0x5d
 800791c:	5c9b      	ldrb	r3, [r3, r2]
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b01      	cmp	r3, #1
 8007922:	d003      	beq.n	800792c <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8007924:	187b      	adds	r3, r7, r1
 8007926:	2202      	movs	r2, #2
 8007928:	701a      	strb	r2, [r3, #0]
    goto error;
 800792a:	e12b      	b.n	8007b84 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	2382      	movs	r3, #130	@ 0x82
 8007932:	005b      	lsls	r3, r3, #1
 8007934:	429a      	cmp	r2, r3
 8007936:	d113      	bne.n	8007960 <HAL_SPI_Receive+0x60>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10f      	bne.n	8007960 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	225d      	movs	r2, #93	@ 0x5d
 8007944:	2104      	movs	r1, #4
 8007946:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007948:	1dbb      	adds	r3, r7, #6
 800794a:	881c      	ldrh	r4, [r3, #0]
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	68b9      	ldr	r1, [r7, #8]
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	0023      	movs	r3, r4
 8007958:	f000 f924 	bl	8007ba4 <HAL_SPI_TransmitReceive>
 800795c:	0003      	movs	r3, r0
 800795e:	e118      	b.n	8007b92 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	225c      	movs	r2, #92	@ 0x5c
 8007964:	5c9b      	ldrb	r3, [r3, r2]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d101      	bne.n	800796e <HAL_SPI_Receive+0x6e>
 800796a:	2302      	movs	r3, #2
 800796c:	e111      	b.n	8007b92 <HAL_SPI_Receive+0x292>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	225c      	movs	r2, #92	@ 0x5c
 8007972:	2101      	movs	r1, #1
 8007974:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007976:	f7fb ff9d 	bl	80038b4 <HAL_GetTick>
 800797a:	0003      	movs	r3, r0
 800797c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <HAL_SPI_Receive+0x8c>
 8007984:	1dbb      	adds	r3, r7, #6
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d104      	bne.n	8007996 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800798c:	2317      	movs	r3, #23
 800798e:	18fb      	adds	r3, r7, r3
 8007990:	2201      	movs	r2, #1
 8007992:	701a      	strb	r2, [r3, #0]
    goto error;
 8007994:	e0f6      	b.n	8007b84 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	225d      	movs	r2, #93	@ 0x5d
 800799a:	2104      	movs	r1, #4
 800799c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	1dba      	adds	r2, r7, #6
 80079ae:	2144      	movs	r1, #68	@ 0x44
 80079b0:	8812      	ldrh	r2, [r2, #0]
 80079b2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	1dba      	adds	r2, r7, #6
 80079b8:	2146      	movs	r1, #70	@ 0x46
 80079ba:	8812      	ldrh	r2, [r2, #0]
 80079bc:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	68da      	ldr	r2, [r3, #12]
 80079e0:	23e0      	movs	r3, #224	@ 0xe0
 80079e2:	00db      	lsls	r3, r3, #3
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d908      	bls.n	80079fa <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	496a      	ldr	r1, [pc, #424]	@ (8007b9c <HAL_SPI_Receive+0x29c>)
 80079f4:	400a      	ands	r2, r1
 80079f6:	605a      	str	r2, [r3, #4]
 80079f8:	e008      	b.n	8007a0c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2180      	movs	r1, #128	@ 0x80
 8007a06:	0149      	lsls	r1, r1, #5
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	689a      	ldr	r2, [r3, #8]
 8007a10:	2380      	movs	r3, #128	@ 0x80
 8007a12:	021b      	lsls	r3, r3, #8
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d10f      	bne.n	8007a38 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2140      	movs	r1, #64	@ 0x40
 8007a24:	438a      	bics	r2, r1
 8007a26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	495b      	ldr	r1, [pc, #364]	@ (8007ba0 <HAL_SPI_Receive+0x2a0>)
 8007a34:	400a      	ands	r2, r1
 8007a36:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2240      	movs	r2, #64	@ 0x40
 8007a40:	4013      	ands	r3, r2
 8007a42:	2b40      	cmp	r3, #64	@ 0x40
 8007a44:	d007      	beq.n	8007a56 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2140      	movs	r1, #64	@ 0x40
 8007a52:	430a      	orrs	r2, r1
 8007a54:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	23e0      	movs	r3, #224	@ 0xe0
 8007a5c:	00db      	lsls	r3, r3, #3
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d900      	bls.n	8007a64 <HAL_SPI_Receive+0x164>
 8007a62:	e071      	b.n	8007b48 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007a64:	e035      	b.n	8007ad2 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	4013      	ands	r3, r2
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d117      	bne.n	8007aa4 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	330c      	adds	r3, #12
 8007a7a:	001a      	movs	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a80:	7812      	ldrb	r2, [r2, #0]
 8007a82:	b2d2      	uxtb	r2, r2
 8007a84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2246      	movs	r2, #70	@ 0x46
 8007a94:	5a9b      	ldrh	r3, [r3, r2]
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b299      	uxth	r1, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2246      	movs	r2, #70	@ 0x46
 8007aa0:	5299      	strh	r1, [r3, r2]
 8007aa2:	e016      	b.n	8007ad2 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aa4:	f7fb ff06 	bl	80038b4 <HAL_GetTick>
 8007aa8:	0002      	movs	r2, r0
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d802      	bhi.n	8007aba <HAL_SPI_Receive+0x1ba>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	d102      	bne.n	8007ac0 <HAL_SPI_Receive+0x1c0>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d108      	bne.n	8007ad2 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8007ac0:	2317      	movs	r3, #23
 8007ac2:	18fb      	adds	r3, r7, r3
 8007ac4:	2203      	movs	r2, #3
 8007ac6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	225d      	movs	r2, #93	@ 0x5d
 8007acc:	2101      	movs	r1, #1
 8007ace:	5499      	strb	r1, [r3, r2]
          goto error;
 8007ad0:	e058      	b.n	8007b84 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2246      	movs	r2, #70	@ 0x46
 8007ad6:	5a9b      	ldrh	r3, [r3, r2]
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1c3      	bne.n	8007a66 <HAL_SPI_Receive+0x166>
 8007ade:	e039      	b.n	8007b54 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	4013      	ands	r3, r2
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d115      	bne.n	8007b1a <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68da      	ldr	r2, [r3, #12]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af8:	b292      	uxth	r2, r2
 8007afa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b00:	1c9a      	adds	r2, r3, #2
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2246      	movs	r2, #70	@ 0x46
 8007b0a:	5a9b      	ldrh	r3, [r3, r2]
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	b299      	uxth	r1, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2246      	movs	r2, #70	@ 0x46
 8007b16:	5299      	strh	r1, [r3, r2]
 8007b18:	e016      	b.n	8007b48 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b1a:	f7fb fecb 	bl	80038b4 <HAL_GetTick>
 8007b1e:	0002      	movs	r2, r0
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d802      	bhi.n	8007b30 <HAL_SPI_Receive+0x230>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	d102      	bne.n	8007b36 <HAL_SPI_Receive+0x236>
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d108      	bne.n	8007b48 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8007b36:	2317      	movs	r3, #23
 8007b38:	18fb      	adds	r3, r7, r3
 8007b3a:	2203      	movs	r2, #3
 8007b3c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	225d      	movs	r2, #93	@ 0x5d
 8007b42:	2101      	movs	r1, #1
 8007b44:	5499      	strb	r1, [r3, r2]
          goto error;
 8007b46:	e01d      	b.n	8007b84 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2246      	movs	r2, #70	@ 0x46
 8007b4c:	5a9b      	ldrh	r3, [r3, r2]
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1c5      	bne.n	8007ae0 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	f000 fb34 	bl	80081c8 <SPI_EndRxTransaction>
 8007b60:	1e03      	subs	r3, r0, #0
 8007b62:	d002      	beq.n	8007b6a <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2220      	movs	r2, #32
 8007b68:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d004      	beq.n	8007b7c <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8007b72:	2317      	movs	r3, #23
 8007b74:	18fb      	adds	r3, r7, r3
 8007b76:	2201      	movs	r2, #1
 8007b78:	701a      	strb	r2, [r3, #0]
 8007b7a:	e003      	b.n	8007b84 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	225d      	movs	r2, #93	@ 0x5d
 8007b80:	2101      	movs	r1, #1
 8007b82:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	225c      	movs	r2, #92	@ 0x5c
 8007b88:	2100      	movs	r1, #0
 8007b8a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007b8c:	2317      	movs	r3, #23
 8007b8e:	18fb      	adds	r3, r7, r3
 8007b90:	781b      	ldrb	r3, [r3, #0]
}
 8007b92:	0018      	movs	r0, r3
 8007b94:	46bd      	mov	sp, r7
 8007b96:	b007      	add	sp, #28
 8007b98:	bd90      	pop	{r4, r7, pc}
 8007b9a:	46c0      	nop			@ (mov r8, r8)
 8007b9c:	ffffefff 	.word	0xffffefff
 8007ba0:	ffffbfff 	.word	0xffffbfff

08007ba4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08a      	sub	sp, #40	@ 0x28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
 8007bb0:	001a      	movs	r2, r3
 8007bb2:	1cbb      	adds	r3, r7, #2
 8007bb4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007bba:	2323      	movs	r3, #35	@ 0x23
 8007bbc:	18fb      	adds	r3, r7, r3
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	225c      	movs	r2, #92	@ 0x5c
 8007bc6:	5c9b      	ldrb	r3, [r3, r2]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d101      	bne.n	8007bd0 <HAL_SPI_TransmitReceive+0x2c>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e1c4      	b.n	8007f5a <HAL_SPI_TransmitReceive+0x3b6>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	225c      	movs	r2, #92	@ 0x5c
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bd8:	f7fb fe6c 	bl	80038b4 <HAL_GetTick>
 8007bdc:	0003      	movs	r3, r0
 8007bde:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007be0:	201b      	movs	r0, #27
 8007be2:	183b      	adds	r3, r7, r0
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	215d      	movs	r1, #93	@ 0x5d
 8007be8:	5c52      	ldrb	r2, [r2, r1]
 8007bea:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007bf2:	2312      	movs	r3, #18
 8007bf4:	18fb      	adds	r3, r7, r3
 8007bf6:	1cba      	adds	r2, r7, #2
 8007bf8:	8812      	ldrh	r2, [r2, #0]
 8007bfa:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007bfc:	183b      	adds	r3, r7, r0
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d011      	beq.n	8007c28 <HAL_SPI_TransmitReceive+0x84>
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	2382      	movs	r3, #130	@ 0x82
 8007c08:	005b      	lsls	r3, r3, #1
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d107      	bne.n	8007c1e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d103      	bne.n	8007c1e <HAL_SPI_TransmitReceive+0x7a>
 8007c16:	183b      	adds	r3, r7, r0
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	2b04      	cmp	r3, #4
 8007c1c:	d004      	beq.n	8007c28 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8007c1e:	2323      	movs	r3, #35	@ 0x23
 8007c20:	18fb      	adds	r3, r7, r3
 8007c22:	2202      	movs	r2, #2
 8007c24:	701a      	strb	r2, [r3, #0]
    goto error;
 8007c26:	e191      	b.n	8007f4c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d006      	beq.n	8007c3c <HAL_SPI_TransmitReceive+0x98>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <HAL_SPI_TransmitReceive+0x98>
 8007c34:	1cbb      	adds	r3, r7, #2
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d104      	bne.n	8007c46 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007c3c:	2323      	movs	r3, #35	@ 0x23
 8007c3e:	18fb      	adds	r3, r7, r3
 8007c40:	2201      	movs	r2, #1
 8007c42:	701a      	strb	r2, [r3, #0]
    goto error;
 8007c44:	e182      	b.n	8007f4c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	225d      	movs	r2, #93	@ 0x5d
 8007c4a:	5c9b      	ldrb	r3, [r3, r2]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	d003      	beq.n	8007c5a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	225d      	movs	r2, #93	@ 0x5d
 8007c56:	2105      	movs	r1, #5
 8007c58:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	1cba      	adds	r2, r7, #2
 8007c6a:	2146      	movs	r1, #70	@ 0x46
 8007c6c:	8812      	ldrh	r2, [r2, #0]
 8007c6e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	1cba      	adds	r2, r7, #2
 8007c74:	2144      	movs	r1, #68	@ 0x44
 8007c76:	8812      	ldrh	r2, [r2, #0]
 8007c78:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	1cba      	adds	r2, r7, #2
 8007c84:	8812      	ldrh	r2, [r2, #0]
 8007c86:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	1cba      	adds	r2, r7, #2
 8007c8c:	8812      	ldrh	r2, [r2, #0]
 8007c8e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	23e0      	movs	r3, #224	@ 0xe0
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d908      	bls.n	8007cba <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	49ac      	ldr	r1, [pc, #688]	@ (8007f64 <HAL_SPI_TransmitReceive+0x3c0>)
 8007cb4:	400a      	ands	r2, r1
 8007cb6:	605a      	str	r2, [r3, #4]
 8007cb8:	e008      	b.n	8007ccc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685a      	ldr	r2, [r3, #4]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2180      	movs	r1, #128	@ 0x80
 8007cc6:	0149      	lsls	r1, r1, #5
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2240      	movs	r2, #64	@ 0x40
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	2b40      	cmp	r3, #64	@ 0x40
 8007cd8:	d007      	beq.n	8007cea <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2140      	movs	r1, #64	@ 0x40
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	68da      	ldr	r2, [r3, #12]
 8007cee:	23e0      	movs	r3, #224	@ 0xe0
 8007cf0:	00db      	lsls	r3, r3, #3
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d800      	bhi.n	8007cf8 <HAL_SPI_TransmitReceive+0x154>
 8007cf6:	e083      	b.n	8007e00 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d005      	beq.n	8007d0c <HAL_SPI_TransmitReceive+0x168>
 8007d00:	2312      	movs	r3, #18
 8007d02:	18fb      	adds	r3, r7, r3
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d000      	beq.n	8007d0c <HAL_SPI_TransmitReceive+0x168>
 8007d0a:	e06d      	b.n	8007de8 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d10:	881a      	ldrh	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d1c:	1c9a      	adds	r2, r3, #2
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d30:	e05a      	b.n	8007de8 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	2202      	movs	r2, #2
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d11b      	bne.n	8007d78 <HAL_SPI_TransmitReceive+0x1d4>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d016      	beq.n	8007d78 <HAL_SPI_TransmitReceive+0x1d4>
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d113      	bne.n	8007d78 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d54:	881a      	ldrh	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d60:	1c9a      	adds	r2, r3, #2
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	4013      	ands	r3, r2
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d11c      	bne.n	8007dc0 <HAL_SPI_TransmitReceive+0x21c>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2246      	movs	r2, #70	@ 0x46
 8007d8a:	5a9b      	ldrh	r3, [r3, r2]
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d016      	beq.n	8007dc0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68da      	ldr	r2, [r3, #12]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d9c:	b292      	uxth	r2, r2
 8007d9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da4:	1c9a      	adds	r2, r3, #2
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2246      	movs	r2, #70	@ 0x46
 8007dae:	5a9b      	ldrh	r3, [r3, r2]
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	3b01      	subs	r3, #1
 8007db4:	b299      	uxth	r1, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2246      	movs	r2, #70	@ 0x46
 8007dba:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007dc0:	f7fb fd78 	bl	80038b4 <HAL_GetTick>
 8007dc4:	0002      	movs	r2, r0
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d80b      	bhi.n	8007de8 <HAL_SPI_TransmitReceive+0x244>
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	d008      	beq.n	8007de8 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8007dd6:	2323      	movs	r3, #35	@ 0x23
 8007dd8:	18fb      	adds	r3, r7, r3
 8007dda:	2203      	movs	r2, #3
 8007ddc:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	225d      	movs	r2, #93	@ 0x5d
 8007de2:	2101      	movs	r1, #1
 8007de4:	5499      	strb	r1, [r3, r2]
        goto error;
 8007de6:	e0b1      	b.n	8007f4c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d19f      	bne.n	8007d32 <HAL_SPI_TransmitReceive+0x18e>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2246      	movs	r2, #70	@ 0x46
 8007df6:	5a9b      	ldrh	r3, [r3, r2]
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d199      	bne.n	8007d32 <HAL_SPI_TransmitReceive+0x18e>
 8007dfe:	e089      	b.n	8007f14 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d005      	beq.n	8007e14 <HAL_SPI_TransmitReceive+0x270>
 8007e08:	2312      	movs	r3, #18
 8007e0a:	18fb      	adds	r3, r7, r3
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d000      	beq.n	8007e14 <HAL_SPI_TransmitReceive+0x270>
 8007e12:	e074      	b.n	8007efe <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	330c      	adds	r3, #12
 8007e1e:	7812      	ldrb	r2, [r2, #0]
 8007e20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	3b01      	subs	r3, #1
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e3a:	e060      	b.n	8007efe <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	2202      	movs	r2, #2
 8007e44:	4013      	ands	r3, r2
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d11c      	bne.n	8007e84 <HAL_SPI_TransmitReceive+0x2e0>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d017      	beq.n	8007e84 <HAL_SPI_TransmitReceive+0x2e0>
 8007e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d114      	bne.n	8007e84 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	330c      	adds	r3, #12
 8007e64:	7812      	ldrb	r2, [r2, #0]
 8007e66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d11e      	bne.n	8007ed0 <HAL_SPI_TransmitReceive+0x32c>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2246      	movs	r2, #70	@ 0x46
 8007e96:	5a9b      	ldrh	r3, [r3, r2]
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d018      	beq.n	8007ed0 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	330c      	adds	r3, #12
 8007ea4:	001a      	movs	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eaa:	7812      	ldrb	r2, [r2, #0]
 8007eac:	b2d2      	uxtb	r2, r2
 8007eae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2246      	movs	r2, #70	@ 0x46
 8007ebe:	5a9b      	ldrh	r3, [r3, r2]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	b299      	uxth	r1, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2246      	movs	r2, #70	@ 0x46
 8007eca:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ed0:	f7fb fcf0 	bl	80038b4 <HAL_GetTick>
 8007ed4:	0002      	movs	r2, r0
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d802      	bhi.n	8007ee6 <HAL_SPI_TransmitReceive+0x342>
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	d102      	bne.n	8007eec <HAL_SPI_TransmitReceive+0x348>
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d108      	bne.n	8007efe <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8007eec:	2323      	movs	r3, #35	@ 0x23
 8007eee:	18fb      	adds	r3, r7, r3
 8007ef0:	2203      	movs	r2, #3
 8007ef2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	225d      	movs	r2, #93	@ 0x5d
 8007ef8:	2101      	movs	r1, #1
 8007efa:	5499      	strb	r1, [r3, r2]
        goto error;
 8007efc:	e026      	b.n	8007f4c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d199      	bne.n	8007e3c <HAL_SPI_TransmitReceive+0x298>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2246      	movs	r2, #70	@ 0x46
 8007f0c:	5a9b      	ldrh	r3, [r3, r2]
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d193      	bne.n	8007e3c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f14:	69fa      	ldr	r2, [r7, #28]
 8007f16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	0018      	movs	r0, r3
 8007f1c:	f000 f9b2 	bl	8008284 <SPI_EndRxTxTransaction>
 8007f20:	1e03      	subs	r3, r0, #0
 8007f22:	d006      	beq.n	8007f32 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8007f24:	2323      	movs	r3, #35	@ 0x23
 8007f26:	18fb      	adds	r3, r7, r3
 8007f28:	2201      	movs	r2, #1
 8007f2a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d004      	beq.n	8007f44 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8007f3a:	2323      	movs	r3, #35	@ 0x23
 8007f3c:	18fb      	adds	r3, r7, r3
 8007f3e:	2201      	movs	r2, #1
 8007f40:	701a      	strb	r2, [r3, #0]
 8007f42:	e003      	b.n	8007f4c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	225d      	movs	r2, #93	@ 0x5d
 8007f48:	2101      	movs	r1, #1
 8007f4a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	225c      	movs	r2, #92	@ 0x5c
 8007f50:	2100      	movs	r1, #0
 8007f52:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007f54:	2323      	movs	r3, #35	@ 0x23
 8007f56:	18fb      	adds	r3, r7, r3
 8007f58:	781b      	ldrb	r3, [r3, #0]
}
 8007f5a:	0018      	movs	r0, r3
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	b00a      	add	sp, #40	@ 0x28
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	46c0      	nop			@ (mov r8, r8)
 8007f64:	ffffefff 	.word	0xffffefff

08007f68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	603b      	str	r3, [r7, #0]
 8007f74:	1dfb      	adds	r3, r7, #7
 8007f76:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f78:	f7fb fc9c 	bl	80038b4 <HAL_GetTick>
 8007f7c:	0002      	movs	r2, r0
 8007f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f80:	1a9b      	subs	r3, r3, r2
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	18d3      	adds	r3, r2, r3
 8007f86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f88:	f7fb fc94 	bl	80038b4 <HAL_GetTick>
 8007f8c:	0003      	movs	r3, r0
 8007f8e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f90:	4b3a      	ldr	r3, [pc, #232]	@ (800807c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	015b      	lsls	r3, r3, #5
 8007f96:	0d1b      	lsrs	r3, r3, #20
 8007f98:	69fa      	ldr	r2, [r7, #28]
 8007f9a:	4353      	muls	r3, r2
 8007f9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f9e:	e058      	b.n	8008052 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	d055      	beq.n	8008052 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fa6:	f7fb fc85 	bl	80038b4 <HAL_GetTick>
 8007faa:	0002      	movs	r2, r0
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d902      	bls.n	8007fbc <SPI_WaitFlagStateUntilTimeout+0x54>
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d142      	bne.n	8008042 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	21e0      	movs	r1, #224	@ 0xe0
 8007fc8:	438a      	bics	r2, r1
 8007fca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	2382      	movs	r3, #130	@ 0x82
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d113      	bne.n	8008000 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	689a      	ldr	r2, [r3, #8]
 8007fdc:	2380      	movs	r3, #128	@ 0x80
 8007fde:	021b      	lsls	r3, r3, #8
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d005      	beq.n	8007ff0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	689a      	ldr	r2, [r3, #8]
 8007fe8:	2380      	movs	r3, #128	@ 0x80
 8007fea:	00db      	lsls	r3, r3, #3
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d107      	bne.n	8008000 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2140      	movs	r1, #64	@ 0x40
 8007ffc:	438a      	bics	r2, r1
 8007ffe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008004:	2380      	movs	r3, #128	@ 0x80
 8008006:	019b      	lsls	r3, r3, #6
 8008008:	429a      	cmp	r2, r3
 800800a:	d110      	bne.n	800802e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	491a      	ldr	r1, [pc, #104]	@ (8008080 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008018:	400a      	ands	r2, r1
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2180      	movs	r1, #128	@ 0x80
 8008028:	0189      	lsls	r1, r1, #6
 800802a:	430a      	orrs	r2, r1
 800802c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	225d      	movs	r2, #93	@ 0x5d
 8008032:	2101      	movs	r1, #1
 8008034:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	225c      	movs	r2, #92	@ 0x5c
 800803a:	2100      	movs	r1, #0
 800803c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e017      	b.n	8008072 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008048:	2300      	movs	r3, #0
 800804a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	3b01      	subs	r3, #1
 8008050:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	4013      	ands	r3, r2
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	425a      	negs	r2, r3
 8008062:	4153      	adcs	r3, r2
 8008064:	b2db      	uxtb	r3, r3
 8008066:	001a      	movs	r2, r3
 8008068:	1dfb      	adds	r3, r7, #7
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	429a      	cmp	r2, r3
 800806e:	d197      	bne.n	8007fa0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	0018      	movs	r0, r3
 8008074:	46bd      	mov	sp, r7
 8008076:	b008      	add	sp, #32
 8008078:	bd80      	pop	{r7, pc}
 800807a:	46c0      	nop			@ (mov r8, r8)
 800807c:	20000090 	.word	0x20000090
 8008080:	ffffdfff 	.word	0xffffdfff

08008084 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b08a      	sub	sp, #40	@ 0x28
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
 8008090:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008092:	2317      	movs	r3, #23
 8008094:	18fb      	adds	r3, r7, r3
 8008096:	2200      	movs	r2, #0
 8008098:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800809a:	f7fb fc0b 	bl	80038b4 <HAL_GetTick>
 800809e:	0002      	movs	r2, r0
 80080a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a2:	1a9b      	subs	r3, r3, r2
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	18d3      	adds	r3, r2, r3
 80080a8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80080aa:	f7fb fc03 	bl	80038b4 <HAL_GetTick>
 80080ae:	0003      	movs	r3, r0
 80080b0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	330c      	adds	r3, #12
 80080b8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80080ba:	4b41      	ldr	r3, [pc, #260]	@ (80081c0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	0013      	movs	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	189b      	adds	r3, r3, r2
 80080c4:	00da      	lsls	r2, r3, #3
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	0d1b      	lsrs	r3, r3, #20
 80080ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080cc:	4353      	muls	r3, r2
 80080ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80080d0:	e068      	b.n	80081a4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	23c0      	movs	r3, #192	@ 0xc0
 80080d6:	00db      	lsls	r3, r3, #3
 80080d8:	429a      	cmp	r2, r3
 80080da:	d10a      	bne.n	80080f2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d107      	bne.n	80080f2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	2117      	movs	r1, #23
 80080ea:	187b      	adds	r3, r7, r1
 80080ec:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80080ee:	187b      	adds	r3, r7, r1
 80080f0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	3301      	adds	r3, #1
 80080f6:	d055      	beq.n	80081a4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080f8:	f7fb fbdc 	bl	80038b4 <HAL_GetTick>
 80080fc:	0002      	movs	r2, r0
 80080fe:	6a3b      	ldr	r3, [r7, #32]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008104:	429a      	cmp	r2, r3
 8008106:	d902      	bls.n	800810e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810a:	2b00      	cmp	r3, #0
 800810c:	d142      	bne.n	8008194 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	21e0      	movs	r1, #224	@ 0xe0
 800811a:	438a      	bics	r2, r1
 800811c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	2382      	movs	r3, #130	@ 0x82
 8008124:	005b      	lsls	r3, r3, #1
 8008126:	429a      	cmp	r2, r3
 8008128:	d113      	bne.n	8008152 <SPI_WaitFifoStateUntilTimeout+0xce>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	689a      	ldr	r2, [r3, #8]
 800812e:	2380      	movs	r3, #128	@ 0x80
 8008130:	021b      	lsls	r3, r3, #8
 8008132:	429a      	cmp	r2, r3
 8008134:	d005      	beq.n	8008142 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	689a      	ldr	r2, [r3, #8]
 800813a:	2380      	movs	r3, #128	@ 0x80
 800813c:	00db      	lsls	r3, r3, #3
 800813e:	429a      	cmp	r2, r3
 8008140:	d107      	bne.n	8008152 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2140      	movs	r1, #64	@ 0x40
 800814e:	438a      	bics	r2, r1
 8008150:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008156:	2380      	movs	r3, #128	@ 0x80
 8008158:	019b      	lsls	r3, r3, #6
 800815a:	429a      	cmp	r2, r3
 800815c:	d110      	bne.n	8008180 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4916      	ldr	r1, [pc, #88]	@ (80081c4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800816a:	400a      	ands	r2, r1
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2180      	movs	r1, #128	@ 0x80
 800817a:	0189      	lsls	r1, r1, #6
 800817c:	430a      	orrs	r2, r1
 800817e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	225d      	movs	r2, #93	@ 0x5d
 8008184:	2101      	movs	r1, #1
 8008186:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	225c      	movs	r2, #92	@ 0x5c
 800818c:	2100      	movs	r1, #0
 800818e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e010      	b.n	80081b6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	4013      	ands	r3, r2
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d18e      	bne.n	80080d2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	0018      	movs	r0, r3
 80081b8:	46bd      	mov	sp, r7
 80081ba:	b00a      	add	sp, #40	@ 0x28
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	46c0      	nop			@ (mov r8, r8)
 80081c0:	20000090 	.word	0x20000090
 80081c4:	ffffdfff 	.word	0xffffdfff

080081c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af02      	add	r7, sp, #8
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	2382      	movs	r3, #130	@ 0x82
 80081da:	005b      	lsls	r3, r3, #1
 80081dc:	429a      	cmp	r2, r3
 80081de:	d113      	bne.n	8008208 <SPI_EndRxTransaction+0x40>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	689a      	ldr	r2, [r3, #8]
 80081e4:	2380      	movs	r3, #128	@ 0x80
 80081e6:	021b      	lsls	r3, r3, #8
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d005      	beq.n	80081f8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	2380      	movs	r3, #128	@ 0x80
 80081f2:	00db      	lsls	r3, r3, #3
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d107      	bne.n	8008208 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2140      	movs	r1, #64	@ 0x40
 8008204:	438a      	bics	r2, r1
 8008206:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	0013      	movs	r3, r2
 8008212:	2200      	movs	r2, #0
 8008214:	2180      	movs	r1, #128	@ 0x80
 8008216:	f7ff fea7 	bl	8007f68 <SPI_WaitFlagStateUntilTimeout>
 800821a:	1e03      	subs	r3, r0, #0
 800821c:	d007      	beq.n	800822e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008222:	2220      	movs	r2, #32
 8008224:	431a      	orrs	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e026      	b.n	800827c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	2382      	movs	r3, #130	@ 0x82
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	429a      	cmp	r2, r3
 8008238:	d11f      	bne.n	800827a <SPI_EndRxTransaction+0xb2>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	689a      	ldr	r2, [r3, #8]
 800823e:	2380      	movs	r3, #128	@ 0x80
 8008240:	021b      	lsls	r3, r3, #8
 8008242:	429a      	cmp	r2, r3
 8008244:	d005      	beq.n	8008252 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	689a      	ldr	r2, [r3, #8]
 800824a:	2380      	movs	r3, #128	@ 0x80
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	429a      	cmp	r2, r3
 8008250:	d113      	bne.n	800827a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	23c0      	movs	r3, #192	@ 0xc0
 8008256:	00d9      	lsls	r1, r3, #3
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	0013      	movs	r3, r2
 8008260:	2200      	movs	r2, #0
 8008262:	f7ff ff0f 	bl	8008084 <SPI_WaitFifoStateUntilTimeout>
 8008266:	1e03      	subs	r3, r0, #0
 8008268:	d007      	beq.n	800827a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800826e:	2220      	movs	r2, #32
 8008270:	431a      	orrs	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e000      	b.n	800827c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	0018      	movs	r0, r3
 800827e:	46bd      	mov	sp, r7
 8008280:	b004      	add	sp, #16
 8008282:	bd80      	pop	{r7, pc}

08008284 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af02      	add	r7, sp, #8
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	23c0      	movs	r3, #192	@ 0xc0
 8008294:	0159      	lsls	r1, r3, #5
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	0013      	movs	r3, r2
 800829e:	2200      	movs	r2, #0
 80082a0:	f7ff fef0 	bl	8008084 <SPI_WaitFifoStateUntilTimeout>
 80082a4:	1e03      	subs	r3, r0, #0
 80082a6:	d007      	beq.n	80082b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082ac:	2220      	movs	r2, #32
 80082ae:	431a      	orrs	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e027      	b.n	8008308 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	0013      	movs	r3, r2
 80082c2:	2200      	movs	r2, #0
 80082c4:	2180      	movs	r1, #128	@ 0x80
 80082c6:	f7ff fe4f 	bl	8007f68 <SPI_WaitFlagStateUntilTimeout>
 80082ca:	1e03      	subs	r3, r0, #0
 80082cc:	d007      	beq.n	80082de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082d2:	2220      	movs	r2, #32
 80082d4:	431a      	orrs	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80082da:	2303      	movs	r3, #3
 80082dc:	e014      	b.n	8008308 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	23c0      	movs	r3, #192	@ 0xc0
 80082e2:	00d9      	lsls	r1, r3, #3
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	0013      	movs	r3, r2
 80082ec:	2200      	movs	r2, #0
 80082ee:	f7ff fec9 	bl	8008084 <SPI_WaitFifoStateUntilTimeout>
 80082f2:	1e03      	subs	r3, r0, #0
 80082f4:	d007      	beq.n	8008306 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082fa:	2220      	movs	r2, #32
 80082fc:	431a      	orrs	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e000      	b.n	8008308 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	0018      	movs	r0, r3
 800830a:	46bd      	mov	sp, r7
 800830c:	b004      	add	sp, #16
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e04a      	b.n	80083b8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	223d      	movs	r2, #61	@ 0x3d
 8008326:	5c9b      	ldrb	r3, [r3, r2]
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d107      	bne.n	800833e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	223c      	movs	r2, #60	@ 0x3c
 8008332:	2100      	movs	r1, #0
 8008334:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	0018      	movs	r0, r3
 800833a:	f7fb f91d 	bl	8003578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	223d      	movs	r2, #61	@ 0x3d
 8008342:	2102      	movs	r1, #2
 8008344:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	3304      	adds	r3, #4
 800834e:	0019      	movs	r1, r3
 8008350:	0010      	movs	r0, r2
 8008352:	f000 fc87 	bl	8008c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2248      	movs	r2, #72	@ 0x48
 800835a:	2101      	movs	r1, #1
 800835c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	223e      	movs	r2, #62	@ 0x3e
 8008362:	2101      	movs	r1, #1
 8008364:	5499      	strb	r1, [r3, r2]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	223f      	movs	r2, #63	@ 0x3f
 800836a:	2101      	movs	r1, #1
 800836c:	5499      	strb	r1, [r3, r2]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2240      	movs	r2, #64	@ 0x40
 8008372:	2101      	movs	r1, #1
 8008374:	5499      	strb	r1, [r3, r2]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2241      	movs	r2, #65	@ 0x41
 800837a:	2101      	movs	r1, #1
 800837c:	5499      	strb	r1, [r3, r2]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2242      	movs	r2, #66	@ 0x42
 8008382:	2101      	movs	r1, #1
 8008384:	5499      	strb	r1, [r3, r2]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2243      	movs	r2, #67	@ 0x43
 800838a:	2101      	movs	r1, #1
 800838c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2244      	movs	r2, #68	@ 0x44
 8008392:	2101      	movs	r1, #1
 8008394:	5499      	strb	r1, [r3, r2]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2245      	movs	r2, #69	@ 0x45
 800839a:	2101      	movs	r1, #1
 800839c:	5499      	strb	r1, [r3, r2]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2246      	movs	r2, #70	@ 0x46
 80083a2:	2101      	movs	r1, #1
 80083a4:	5499      	strb	r1, [r3, r2]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2247      	movs	r2, #71	@ 0x47
 80083aa:	2101      	movs	r1, #1
 80083ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	223d      	movs	r2, #61	@ 0x3d
 80083b2:	2101      	movs	r1, #1
 80083b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	0018      	movs	r0, r3
 80083ba:	46bd      	mov	sp, r7
 80083bc:	b002      	add	sp, #8
 80083be:	bd80      	pop	{r7, pc}

080083c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	223d      	movs	r2, #61	@ 0x3d
 80083cc:	5c9b      	ldrb	r3, [r3, r2]
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d001      	beq.n	80083d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e035      	b.n	8008444 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	223d      	movs	r2, #61	@ 0x3d
 80083dc:	2102      	movs	r1, #2
 80083de:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a19      	ldr	r2, [pc, #100]	@ (800844c <HAL_TIM_Base_Start+0x8c>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d00a      	beq.n	8008400 <HAL_TIM_Base_Start+0x40>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	2380      	movs	r3, #128	@ 0x80
 80083f0:	05db      	lsls	r3, r3, #23
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d004      	beq.n	8008400 <HAL_TIM_Base_Start+0x40>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a15      	ldr	r2, [pc, #84]	@ (8008450 <HAL_TIM_Base_Start+0x90>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d116      	bne.n	800842e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	4a13      	ldr	r2, [pc, #76]	@ (8008454 <HAL_TIM_Base_Start+0x94>)
 8008408:	4013      	ands	r3, r2
 800840a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2b06      	cmp	r3, #6
 8008410:	d016      	beq.n	8008440 <HAL_TIM_Base_Start+0x80>
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	2380      	movs	r3, #128	@ 0x80
 8008416:	025b      	lsls	r3, r3, #9
 8008418:	429a      	cmp	r2, r3
 800841a:	d011      	beq.n	8008440 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2101      	movs	r1, #1
 8008428:	430a      	orrs	r2, r1
 800842a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800842c:	e008      	b.n	8008440 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2101      	movs	r1, #1
 800843a:	430a      	orrs	r2, r1
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	e000      	b.n	8008442 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008440:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	0018      	movs	r0, r3
 8008446:	46bd      	mov	sp, r7
 8008448:	b004      	add	sp, #16
 800844a:	bd80      	pop	{r7, pc}
 800844c:	40012c00 	.word	0x40012c00
 8008450:	40000400 	.word	0x40000400
 8008454:	00010007 	.word	0x00010007

08008458 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	4a0d      	ldr	r2, [pc, #52]	@ (800849c <HAL_TIM_Base_Stop+0x44>)
 8008468:	4013      	ands	r3, r2
 800846a:	d10d      	bne.n	8008488 <HAL_TIM_Base_Stop+0x30>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6a1b      	ldr	r3, [r3, #32]
 8008472:	4a0b      	ldr	r2, [pc, #44]	@ (80084a0 <HAL_TIM_Base_Stop+0x48>)
 8008474:	4013      	ands	r3, r2
 8008476:	d107      	bne.n	8008488 <HAL_TIM_Base_Stop+0x30>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2101      	movs	r1, #1
 8008484:	438a      	bics	r2, r1
 8008486:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	223d      	movs	r2, #61	@ 0x3d
 800848c:	2101      	movs	r1, #1
 800848e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	0018      	movs	r0, r3
 8008494:	46bd      	mov	sp, r7
 8008496:	b002      	add	sp, #8
 8008498:	bd80      	pop	{r7, pc}
 800849a:	46c0      	nop			@ (mov r8, r8)
 800849c:	00001111 	.word	0x00001111
 80084a0:	00000444 	.word	0x00000444

080084a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	223d      	movs	r2, #61	@ 0x3d
 80084b0:	5c9b      	ldrb	r3, [r3, r2]
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d001      	beq.n	80084bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e03d      	b.n	8008538 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	223d      	movs	r2, #61	@ 0x3d
 80084c0:	2102      	movs	r1, #2
 80084c2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68da      	ldr	r2, [r3, #12]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2101      	movs	r1, #1
 80084d0:	430a      	orrs	r2, r1
 80084d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a19      	ldr	r2, [pc, #100]	@ (8008540 <HAL_TIM_Base_Start_IT+0x9c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d00a      	beq.n	80084f4 <HAL_TIM_Base_Start_IT+0x50>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	2380      	movs	r3, #128	@ 0x80
 80084e4:	05db      	lsls	r3, r3, #23
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d004      	beq.n	80084f4 <HAL_TIM_Base_Start_IT+0x50>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a15      	ldr	r2, [pc, #84]	@ (8008544 <HAL_TIM_Base_Start_IT+0xa0>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d116      	bne.n	8008522 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	4a13      	ldr	r2, [pc, #76]	@ (8008548 <HAL_TIM_Base_Start_IT+0xa4>)
 80084fc:	4013      	ands	r3, r2
 80084fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b06      	cmp	r3, #6
 8008504:	d016      	beq.n	8008534 <HAL_TIM_Base_Start_IT+0x90>
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	2380      	movs	r3, #128	@ 0x80
 800850a:	025b      	lsls	r3, r3, #9
 800850c:	429a      	cmp	r2, r3
 800850e:	d011      	beq.n	8008534 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2101      	movs	r1, #1
 800851c:	430a      	orrs	r2, r1
 800851e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008520:	e008      	b.n	8008534 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2101      	movs	r1, #1
 800852e:	430a      	orrs	r2, r1
 8008530:	601a      	str	r2, [r3, #0]
 8008532:	e000      	b.n	8008536 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008534:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	0018      	movs	r0, r3
 800853a:	46bd      	mov	sp, r7
 800853c:	b004      	add	sp, #16
 800853e:	bd80      	pop	{r7, pc}
 8008540:	40012c00 	.word	0x40012c00
 8008544:	40000400 	.word	0x40000400
 8008548:	00010007 	.word	0x00010007

0800854c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68da      	ldr	r2, [r3, #12]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2101      	movs	r1, #1
 8008560:	438a      	bics	r2, r1
 8008562:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	4a0d      	ldr	r2, [pc, #52]	@ (80085a0 <HAL_TIM_Base_Stop_IT+0x54>)
 800856c:	4013      	ands	r3, r2
 800856e:	d10d      	bne.n	800858c <HAL_TIM_Base_Stop_IT+0x40>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6a1b      	ldr	r3, [r3, #32]
 8008576:	4a0b      	ldr	r2, [pc, #44]	@ (80085a4 <HAL_TIM_Base_Stop_IT+0x58>)
 8008578:	4013      	ands	r3, r2
 800857a:	d107      	bne.n	800858c <HAL_TIM_Base_Stop_IT+0x40>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2101      	movs	r1, #1
 8008588:	438a      	bics	r2, r1
 800858a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	223d      	movs	r2, #61	@ 0x3d
 8008590:	2101      	movs	r1, #1
 8008592:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	0018      	movs	r0, r3
 8008598:	46bd      	mov	sp, r7
 800859a:	b002      	add	sp, #8
 800859c:	bd80      	pop	{r7, pc}
 800859e:	46c0      	nop			@ (mov r8, r8)
 80085a0:	00001111 	.word	0x00001111
 80085a4:	00000444 	.word	0x00000444

080085a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d101      	bne.n	80085ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e04a      	b.n	8008650 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	223d      	movs	r2, #61	@ 0x3d
 80085be:	5c9b      	ldrb	r3, [r3, r2]
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d107      	bne.n	80085d6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	223c      	movs	r2, #60	@ 0x3c
 80085ca:	2100      	movs	r1, #0
 80085cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	0018      	movs	r0, r3
 80085d2:	f7fa ffb5 	bl	8003540 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	223d      	movs	r2, #61	@ 0x3d
 80085da:	2102      	movs	r1, #2
 80085dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	3304      	adds	r3, #4
 80085e6:	0019      	movs	r1, r3
 80085e8:	0010      	movs	r0, r2
 80085ea:	f000 fb3b 	bl	8008c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2248      	movs	r2, #72	@ 0x48
 80085f2:	2101      	movs	r1, #1
 80085f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	223e      	movs	r2, #62	@ 0x3e
 80085fa:	2101      	movs	r1, #1
 80085fc:	5499      	strb	r1, [r3, r2]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	223f      	movs	r2, #63	@ 0x3f
 8008602:	2101      	movs	r1, #1
 8008604:	5499      	strb	r1, [r3, r2]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2240      	movs	r2, #64	@ 0x40
 800860a:	2101      	movs	r1, #1
 800860c:	5499      	strb	r1, [r3, r2]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2241      	movs	r2, #65	@ 0x41
 8008612:	2101      	movs	r1, #1
 8008614:	5499      	strb	r1, [r3, r2]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2242      	movs	r2, #66	@ 0x42
 800861a:	2101      	movs	r1, #1
 800861c:	5499      	strb	r1, [r3, r2]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2243      	movs	r2, #67	@ 0x43
 8008622:	2101      	movs	r1, #1
 8008624:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2244      	movs	r2, #68	@ 0x44
 800862a:	2101      	movs	r1, #1
 800862c:	5499      	strb	r1, [r3, r2]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2245      	movs	r2, #69	@ 0x45
 8008632:	2101      	movs	r1, #1
 8008634:	5499      	strb	r1, [r3, r2]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2246      	movs	r2, #70	@ 0x46
 800863a:	2101      	movs	r1, #1
 800863c:	5499      	strb	r1, [r3, r2]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2247      	movs	r2, #71	@ 0x47
 8008642:	2101      	movs	r1, #1
 8008644:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	223d      	movs	r2, #61	@ 0x3d
 800864a:	2101      	movs	r1, #1
 800864c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	0018      	movs	r0, r3
 8008652:	46bd      	mov	sp, r7
 8008654:	b002      	add	sp, #8
 8008656:	bd80      	pop	{r7, pc}

08008658 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d108      	bne.n	800867a <HAL_TIM_PWM_Start+0x22>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	223e      	movs	r2, #62	@ 0x3e
 800866c:	5c9b      	ldrb	r3, [r3, r2]
 800866e:	b2db      	uxtb	r3, r3
 8008670:	3b01      	subs	r3, #1
 8008672:	1e5a      	subs	r2, r3, #1
 8008674:	4193      	sbcs	r3, r2
 8008676:	b2db      	uxtb	r3, r3
 8008678:	e037      	b.n	80086ea <HAL_TIM_PWM_Start+0x92>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b04      	cmp	r3, #4
 800867e:	d108      	bne.n	8008692 <HAL_TIM_PWM_Start+0x3a>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	223f      	movs	r2, #63	@ 0x3f
 8008684:	5c9b      	ldrb	r3, [r3, r2]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	3b01      	subs	r3, #1
 800868a:	1e5a      	subs	r2, r3, #1
 800868c:	4193      	sbcs	r3, r2
 800868e:	b2db      	uxtb	r3, r3
 8008690:	e02b      	b.n	80086ea <HAL_TIM_PWM_Start+0x92>
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b08      	cmp	r3, #8
 8008696:	d108      	bne.n	80086aa <HAL_TIM_PWM_Start+0x52>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2240      	movs	r2, #64	@ 0x40
 800869c:	5c9b      	ldrb	r3, [r3, r2]
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	3b01      	subs	r3, #1
 80086a2:	1e5a      	subs	r2, r3, #1
 80086a4:	4193      	sbcs	r3, r2
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	e01f      	b.n	80086ea <HAL_TIM_PWM_Start+0x92>
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2b0c      	cmp	r3, #12
 80086ae:	d108      	bne.n	80086c2 <HAL_TIM_PWM_Start+0x6a>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2241      	movs	r2, #65	@ 0x41
 80086b4:	5c9b      	ldrb	r3, [r3, r2]
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	3b01      	subs	r3, #1
 80086ba:	1e5a      	subs	r2, r3, #1
 80086bc:	4193      	sbcs	r3, r2
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	e013      	b.n	80086ea <HAL_TIM_PWM_Start+0x92>
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	2b10      	cmp	r3, #16
 80086c6:	d108      	bne.n	80086da <HAL_TIM_PWM_Start+0x82>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2242      	movs	r2, #66	@ 0x42
 80086cc:	5c9b      	ldrb	r3, [r3, r2]
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	3b01      	subs	r3, #1
 80086d2:	1e5a      	subs	r2, r3, #1
 80086d4:	4193      	sbcs	r3, r2
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	e007      	b.n	80086ea <HAL_TIM_PWM_Start+0x92>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2243      	movs	r2, #67	@ 0x43
 80086de:	5c9b      	ldrb	r3, [r3, r2]
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	3b01      	subs	r3, #1
 80086e4:	1e5a      	subs	r2, r3, #1
 80086e6:	4193      	sbcs	r3, r2
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d001      	beq.n	80086f2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e081      	b.n	80087f6 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d104      	bne.n	8008702 <HAL_TIM_PWM_Start+0xaa>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	223e      	movs	r2, #62	@ 0x3e
 80086fc:	2102      	movs	r1, #2
 80086fe:	5499      	strb	r1, [r3, r2]
 8008700:	e023      	b.n	800874a <HAL_TIM_PWM_Start+0xf2>
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	2b04      	cmp	r3, #4
 8008706:	d104      	bne.n	8008712 <HAL_TIM_PWM_Start+0xba>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	223f      	movs	r2, #63	@ 0x3f
 800870c:	2102      	movs	r1, #2
 800870e:	5499      	strb	r1, [r3, r2]
 8008710:	e01b      	b.n	800874a <HAL_TIM_PWM_Start+0xf2>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b08      	cmp	r3, #8
 8008716:	d104      	bne.n	8008722 <HAL_TIM_PWM_Start+0xca>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2240      	movs	r2, #64	@ 0x40
 800871c:	2102      	movs	r1, #2
 800871e:	5499      	strb	r1, [r3, r2]
 8008720:	e013      	b.n	800874a <HAL_TIM_PWM_Start+0xf2>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2b0c      	cmp	r3, #12
 8008726:	d104      	bne.n	8008732 <HAL_TIM_PWM_Start+0xda>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2241      	movs	r2, #65	@ 0x41
 800872c:	2102      	movs	r1, #2
 800872e:	5499      	strb	r1, [r3, r2]
 8008730:	e00b      	b.n	800874a <HAL_TIM_PWM_Start+0xf2>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b10      	cmp	r3, #16
 8008736:	d104      	bne.n	8008742 <HAL_TIM_PWM_Start+0xea>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2242      	movs	r2, #66	@ 0x42
 800873c:	2102      	movs	r1, #2
 800873e:	5499      	strb	r1, [r3, r2]
 8008740:	e003      	b.n	800874a <HAL_TIM_PWM_Start+0xf2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2243      	movs	r2, #67	@ 0x43
 8008746:	2102      	movs	r1, #2
 8008748:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	2201      	movs	r2, #1
 8008752:	0018      	movs	r0, r3
 8008754:	f000 fda6 	bl	80092a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a28      	ldr	r2, [pc, #160]	@ (8008800 <HAL_TIM_PWM_Start+0x1a8>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d009      	beq.n	8008776 <HAL_TIM_PWM_Start+0x11e>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a27      	ldr	r2, [pc, #156]	@ (8008804 <HAL_TIM_PWM_Start+0x1ac>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d004      	beq.n	8008776 <HAL_TIM_PWM_Start+0x11e>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a25      	ldr	r2, [pc, #148]	@ (8008808 <HAL_TIM_PWM_Start+0x1b0>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d101      	bne.n	800877a <HAL_TIM_PWM_Start+0x122>
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <HAL_TIM_PWM_Start+0x124>
 800877a:	2300      	movs	r3, #0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d008      	beq.n	8008792 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2180      	movs	r1, #128	@ 0x80
 800878c:	0209      	lsls	r1, r1, #8
 800878e:	430a      	orrs	r2, r1
 8008790:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a1a      	ldr	r2, [pc, #104]	@ (8008800 <HAL_TIM_PWM_Start+0x1a8>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d00a      	beq.n	80087b2 <HAL_TIM_PWM_Start+0x15a>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	2380      	movs	r3, #128	@ 0x80
 80087a2:	05db      	lsls	r3, r3, #23
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d004      	beq.n	80087b2 <HAL_TIM_PWM_Start+0x15a>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a17      	ldr	r2, [pc, #92]	@ (800880c <HAL_TIM_PWM_Start+0x1b4>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d116      	bne.n	80087e0 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	4a15      	ldr	r2, [pc, #84]	@ (8008810 <HAL_TIM_PWM_Start+0x1b8>)
 80087ba:	4013      	ands	r3, r2
 80087bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2b06      	cmp	r3, #6
 80087c2:	d016      	beq.n	80087f2 <HAL_TIM_PWM_Start+0x19a>
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	2380      	movs	r3, #128	@ 0x80
 80087c8:	025b      	lsls	r3, r3, #9
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d011      	beq.n	80087f2 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2101      	movs	r1, #1
 80087da:	430a      	orrs	r2, r1
 80087dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087de:	e008      	b.n	80087f2 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2101      	movs	r1, #1
 80087ec:	430a      	orrs	r2, r1
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	e000      	b.n	80087f4 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	0018      	movs	r0, r3
 80087f8:	46bd      	mov	sp, r7
 80087fa:	b004      	add	sp, #16
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	46c0      	nop			@ (mov r8, r8)
 8008800:	40012c00 	.word	0x40012c00
 8008804:	40014400 	.word	0x40014400
 8008808:	40014800 	.word	0x40014800
 800880c:	40000400 	.word	0x40000400
 8008810:	00010007 	.word	0x00010007

08008814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2202      	movs	r2, #2
 8008830:	4013      	ands	r3, r2
 8008832:	d021      	beq.n	8008878 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2202      	movs	r2, #2
 8008838:	4013      	ands	r3, r2
 800883a:	d01d      	beq.n	8008878 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2203      	movs	r2, #3
 8008842:	4252      	negs	r2, r2
 8008844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	2203      	movs	r2, #3
 8008854:	4013      	ands	r3, r2
 8008856:	d004      	beq.n	8008862 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	0018      	movs	r0, r3
 800885c:	f000 f9ea 	bl	8008c34 <HAL_TIM_IC_CaptureCallback>
 8008860:	e007      	b.n	8008872 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	0018      	movs	r0, r3
 8008866:	f000 f9dd 	bl	8008c24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	0018      	movs	r0, r3
 800886e:	f000 f9e9 	bl	8008c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2204      	movs	r2, #4
 800887c:	4013      	ands	r3, r2
 800887e:	d022      	beq.n	80088c6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2204      	movs	r2, #4
 8008884:	4013      	ands	r3, r2
 8008886:	d01e      	beq.n	80088c6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2205      	movs	r2, #5
 800888e:	4252      	negs	r2, r2
 8008890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2202      	movs	r2, #2
 8008896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	699a      	ldr	r2, [r3, #24]
 800889e:	23c0      	movs	r3, #192	@ 0xc0
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4013      	ands	r3, r2
 80088a4:	d004      	beq.n	80088b0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	0018      	movs	r0, r3
 80088aa:	f000 f9c3 	bl	8008c34 <HAL_TIM_IC_CaptureCallback>
 80088ae:	e007      	b.n	80088c0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	0018      	movs	r0, r3
 80088b4:	f000 f9b6 	bl	8008c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	0018      	movs	r0, r3
 80088bc:	f000 f9c2 	bl	8008c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2208      	movs	r2, #8
 80088ca:	4013      	ands	r3, r2
 80088cc:	d021      	beq.n	8008912 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2208      	movs	r2, #8
 80088d2:	4013      	ands	r3, r2
 80088d4:	d01d      	beq.n	8008912 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2209      	movs	r2, #9
 80088dc:	4252      	negs	r2, r2
 80088de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2204      	movs	r2, #4
 80088e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	69db      	ldr	r3, [r3, #28]
 80088ec:	2203      	movs	r2, #3
 80088ee:	4013      	ands	r3, r2
 80088f0:	d004      	beq.n	80088fc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	0018      	movs	r0, r3
 80088f6:	f000 f99d 	bl	8008c34 <HAL_TIM_IC_CaptureCallback>
 80088fa:	e007      	b.n	800890c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	0018      	movs	r0, r3
 8008900:	f000 f990 	bl	8008c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	0018      	movs	r0, r3
 8008908:	f000 f99c 	bl	8008c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	2210      	movs	r2, #16
 8008916:	4013      	ands	r3, r2
 8008918:	d022      	beq.n	8008960 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2210      	movs	r2, #16
 800891e:	4013      	ands	r3, r2
 8008920:	d01e      	beq.n	8008960 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2211      	movs	r2, #17
 8008928:	4252      	negs	r2, r2
 800892a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2208      	movs	r2, #8
 8008930:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	69da      	ldr	r2, [r3, #28]
 8008938:	23c0      	movs	r3, #192	@ 0xc0
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4013      	ands	r3, r2
 800893e:	d004      	beq.n	800894a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	0018      	movs	r0, r3
 8008944:	f000 f976 	bl	8008c34 <HAL_TIM_IC_CaptureCallback>
 8008948:	e007      	b.n	800895a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	0018      	movs	r0, r3
 800894e:	f000 f969 	bl	8008c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	0018      	movs	r0, r3
 8008956:	f000 f975 	bl	8008c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2201      	movs	r2, #1
 8008964:	4013      	ands	r3, r2
 8008966:	d00c      	beq.n	8008982 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2201      	movs	r2, #1
 800896c:	4013      	ands	r3, r2
 800896e:	d008      	beq.n	8008982 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2202      	movs	r2, #2
 8008976:	4252      	negs	r2, r2
 8008978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	0018      	movs	r0, r3
 800897e:	f7f9 fd67 	bl	8002450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2280      	movs	r2, #128	@ 0x80
 8008986:	4013      	ands	r3, r2
 8008988:	d104      	bne.n	8008994 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	2380      	movs	r3, #128	@ 0x80
 800898e:	019b      	lsls	r3, r3, #6
 8008990:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008992:	d00b      	beq.n	80089ac <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2280      	movs	r2, #128	@ 0x80
 8008998:	4013      	ands	r3, r2
 800899a:	d007      	beq.n	80089ac <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a1e      	ldr	r2, [pc, #120]	@ (8008a1c <HAL_TIM_IRQHandler+0x208>)
 80089a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	0018      	movs	r0, r3
 80089a8:	f000 fd10 	bl	80093cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	2380      	movs	r3, #128	@ 0x80
 80089b0:	005b      	lsls	r3, r3, #1
 80089b2:	4013      	ands	r3, r2
 80089b4:	d00b      	beq.n	80089ce <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2280      	movs	r2, #128	@ 0x80
 80089ba:	4013      	ands	r3, r2
 80089bc:	d007      	beq.n	80089ce <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a17      	ldr	r2, [pc, #92]	@ (8008a20 <HAL_TIM_IRQHandler+0x20c>)
 80089c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	0018      	movs	r0, r3
 80089ca:	f000 fd07 	bl	80093dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	2240      	movs	r2, #64	@ 0x40
 80089d2:	4013      	ands	r3, r2
 80089d4:	d00c      	beq.n	80089f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2240      	movs	r2, #64	@ 0x40
 80089da:	4013      	ands	r3, r2
 80089dc:	d008      	beq.n	80089f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2241      	movs	r2, #65	@ 0x41
 80089e4:	4252      	negs	r2, r2
 80089e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	0018      	movs	r0, r3
 80089ec:	f000 f932 	bl	8008c54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2220      	movs	r2, #32
 80089f4:	4013      	ands	r3, r2
 80089f6:	d00c      	beq.n	8008a12 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2220      	movs	r2, #32
 80089fc:	4013      	ands	r3, r2
 80089fe:	d008      	beq.n	8008a12 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2221      	movs	r2, #33	@ 0x21
 8008a06:	4252      	negs	r2, r2
 8008a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	f000 fcd5 	bl	80093bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a12:	46c0      	nop			@ (mov r8, r8)
 8008a14:	46bd      	mov	sp, r7
 8008a16:	b004      	add	sp, #16
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	46c0      	nop			@ (mov r8, r8)
 8008a1c:	ffffdf7f 	.word	0xffffdf7f
 8008a20:	fffffeff 	.word	0xfffffeff

08008a24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a30:	2317      	movs	r3, #23
 8008a32:	18fb      	adds	r3, r7, r3
 8008a34:	2200      	movs	r2, #0
 8008a36:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	223c      	movs	r2, #60	@ 0x3c
 8008a3c:	5c9b      	ldrb	r3, [r3, r2]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d101      	bne.n	8008a46 <HAL_TIM_PWM_ConfigChannel+0x22>
 8008a42:	2302      	movs	r3, #2
 8008a44:	e0e5      	b.n	8008c12 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	223c      	movs	r2, #60	@ 0x3c
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b14      	cmp	r3, #20
 8008a52:	d900      	bls.n	8008a56 <HAL_TIM_PWM_ConfigChannel+0x32>
 8008a54:	e0d1      	b.n	8008bfa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	009a      	lsls	r2, r3, #2
 8008a5a:	4b70      	ldr	r3, [pc, #448]	@ (8008c1c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8008a5c:	18d3      	adds	r3, r2, r3
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	0011      	movs	r1, r2
 8008a6a:	0018      	movs	r0, r3
 8008a6c:	f000 f97e 	bl	8008d6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	699a      	ldr	r2, [r3, #24]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2108      	movs	r1, #8
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	699a      	ldr	r2, [r3, #24]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2104      	movs	r1, #4
 8008a8c:	438a      	bics	r2, r1
 8008a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6999      	ldr	r1, [r3, #24]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	691a      	ldr	r2, [r3, #16]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	619a      	str	r2, [r3, #24]
      break;
 8008aa2:	e0af      	b.n	8008c04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	0011      	movs	r1, r2
 8008aac:	0018      	movs	r0, r3
 8008aae:	f000 f9dd 	bl	8008e6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	699a      	ldr	r2, [r3, #24]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2180      	movs	r1, #128	@ 0x80
 8008abe:	0109      	lsls	r1, r1, #4
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	699a      	ldr	r2, [r3, #24]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4954      	ldr	r1, [pc, #336]	@ (8008c20 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008ad0:	400a      	ands	r2, r1
 8008ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6999      	ldr	r1, [r3, #24]
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	021a      	lsls	r2, r3, #8
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	619a      	str	r2, [r3, #24]
      break;
 8008ae8:	e08c      	b.n	8008c04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	0011      	movs	r1, r2
 8008af2:	0018      	movs	r0, r3
 8008af4:	f000 fa38 	bl	8008f68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	69da      	ldr	r2, [r3, #28]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2108      	movs	r1, #8
 8008b04:	430a      	orrs	r2, r1
 8008b06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	69da      	ldr	r2, [r3, #28]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2104      	movs	r1, #4
 8008b14:	438a      	bics	r2, r1
 8008b16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	69d9      	ldr	r1, [r3, #28]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	691a      	ldr	r2, [r3, #16]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	430a      	orrs	r2, r1
 8008b28:	61da      	str	r2, [r3, #28]
      break;
 8008b2a:	e06b      	b.n	8008c04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68ba      	ldr	r2, [r7, #8]
 8008b32:	0011      	movs	r1, r2
 8008b34:	0018      	movs	r0, r3
 8008b36:	f000 fa99 	bl	800906c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	69da      	ldr	r2, [r3, #28]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2180      	movs	r1, #128	@ 0x80
 8008b46:	0109      	lsls	r1, r1, #4
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	69da      	ldr	r2, [r3, #28]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4932      	ldr	r1, [pc, #200]	@ (8008c20 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008b58:	400a      	ands	r2, r1
 8008b5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	69d9      	ldr	r1, [r3, #28]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	021a      	lsls	r2, r3, #8
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	430a      	orrs	r2, r1
 8008b6e:	61da      	str	r2, [r3, #28]
      break;
 8008b70:	e048      	b.n	8008c04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	0011      	movs	r1, r2
 8008b7a:	0018      	movs	r0, r3
 8008b7c:	f000 fada 	bl	8009134 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2108      	movs	r1, #8
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2104      	movs	r1, #4
 8008b9c:	438a      	bics	r2, r1
 8008b9e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	691a      	ldr	r2, [r3, #16]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008bb2:	e027      	b.n	8008c04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	0011      	movs	r1, r2
 8008bbc:	0018      	movs	r0, r3
 8008bbe:	f000 fb13 	bl	80091e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2180      	movs	r1, #128	@ 0x80
 8008bce:	0109      	lsls	r1, r1, #4
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4910      	ldr	r1, [pc, #64]	@ (8008c20 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008be0:	400a      	ands	r2, r1
 8008be2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	021a      	lsls	r2, r3, #8
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	430a      	orrs	r2, r1
 8008bf6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008bf8:	e004      	b.n	8008c04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8008bfa:	2317      	movs	r3, #23
 8008bfc:	18fb      	adds	r3, r7, r3
 8008bfe:	2201      	movs	r2, #1
 8008c00:	701a      	strb	r2, [r3, #0]
      break;
 8008c02:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	223c      	movs	r2, #60	@ 0x3c
 8008c08:	2100      	movs	r1, #0
 8008c0a:	5499      	strb	r1, [r3, r2]

  return status;
 8008c0c:	2317      	movs	r3, #23
 8008c0e:	18fb      	adds	r3, r7, r3
 8008c10:	781b      	ldrb	r3, [r3, #0]
}
 8008c12:	0018      	movs	r0, r3
 8008c14:	46bd      	mov	sp, r7
 8008c16:	b006      	add	sp, #24
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	46c0      	nop			@ (mov r8, r8)
 8008c1c:	08009510 	.word	0x08009510
 8008c20:	fffffbff 	.word	0xfffffbff

08008c24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c2c:	46c0      	nop			@ (mov r8, r8)
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	b002      	add	sp, #8
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c3c:	46c0      	nop			@ (mov r8, r8)
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	b002      	add	sp, #8
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c4c:	46c0      	nop			@ (mov r8, r8)
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	b002      	add	sp, #8
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c5c:	46c0      	nop			@ (mov r8, r8)
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	b002      	add	sp, #8
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a37      	ldr	r2, [pc, #220]	@ (8008d54 <TIM_Base_SetConfig+0xf0>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d008      	beq.n	8008c8e <TIM_Base_SetConfig+0x2a>
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	2380      	movs	r3, #128	@ 0x80
 8008c80:	05db      	lsls	r3, r3, #23
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d003      	beq.n	8008c8e <TIM_Base_SetConfig+0x2a>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a33      	ldr	r2, [pc, #204]	@ (8008d58 <TIM_Base_SetConfig+0xf4>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d108      	bne.n	8008ca0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2270      	movs	r2, #112	@ 0x70
 8008c92:	4393      	bics	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8008d54 <TIM_Base_SetConfig+0xf0>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d014      	beq.n	8008cd2 <TIM_Base_SetConfig+0x6e>
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	2380      	movs	r3, #128	@ 0x80
 8008cac:	05db      	lsls	r3, r3, #23
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d00f      	beq.n	8008cd2 <TIM_Base_SetConfig+0x6e>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a28      	ldr	r2, [pc, #160]	@ (8008d58 <TIM_Base_SetConfig+0xf4>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d00b      	beq.n	8008cd2 <TIM_Base_SetConfig+0x6e>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a27      	ldr	r2, [pc, #156]	@ (8008d5c <TIM_Base_SetConfig+0xf8>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d007      	beq.n	8008cd2 <TIM_Base_SetConfig+0x6e>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a26      	ldr	r2, [pc, #152]	@ (8008d60 <TIM_Base_SetConfig+0xfc>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d003      	beq.n	8008cd2 <TIM_Base_SetConfig+0x6e>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a25      	ldr	r2, [pc, #148]	@ (8008d64 <TIM_Base_SetConfig+0x100>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d108      	bne.n	8008ce4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	4a24      	ldr	r2, [pc, #144]	@ (8008d68 <TIM_Base_SetConfig+0x104>)
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2280      	movs	r2, #128	@ 0x80
 8008ce8:	4393      	bics	r3, r2
 8008cea:	001a      	movs	r2, r3
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	695b      	ldr	r3, [r3, #20]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	689a      	ldr	r2, [r3, #8]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a11      	ldr	r2, [pc, #68]	@ (8008d54 <TIM_Base_SetConfig+0xf0>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d007      	beq.n	8008d22 <TIM_Base_SetConfig+0xbe>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a12      	ldr	r2, [pc, #72]	@ (8008d60 <TIM_Base_SetConfig+0xfc>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d003      	beq.n	8008d22 <TIM_Base_SetConfig+0xbe>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a11      	ldr	r2, [pc, #68]	@ (8008d64 <TIM_Base_SetConfig+0x100>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d103      	bne.n	8008d2a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	691a      	ldr	r2, [r3, #16]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	2201      	movs	r2, #1
 8008d36:	4013      	ands	r3, r2
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d106      	bne.n	8008d4a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	2201      	movs	r2, #1
 8008d42:	4393      	bics	r3, r2
 8008d44:	001a      	movs	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	611a      	str	r2, [r3, #16]
  }
}
 8008d4a:	46c0      	nop			@ (mov r8, r8)
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	b004      	add	sp, #16
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	46c0      	nop			@ (mov r8, r8)
 8008d54:	40012c00 	.word	0x40012c00
 8008d58:	40000400 	.word	0x40000400
 8008d5c:	40002000 	.word	0x40002000
 8008d60:	40014400 	.word	0x40014400
 8008d64:	40014800 	.word	0x40014800
 8008d68:	fffffcff 	.word	0xfffffcff

08008d6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a1b      	ldr	r3, [r3, #32]
 8008d80:	2201      	movs	r2, #1
 8008d82:	4393      	bics	r3, r2
 8008d84:	001a      	movs	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	4a2e      	ldr	r2, [pc, #184]	@ (8008e54 <TIM_OC1_SetConfig+0xe8>)
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2203      	movs	r2, #3
 8008da2:	4393      	bics	r3, r2
 8008da4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	2202      	movs	r2, #2
 8008db4:	4393      	bics	r3, r2
 8008db6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a24      	ldr	r2, [pc, #144]	@ (8008e58 <TIM_OC1_SetConfig+0xec>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d007      	beq.n	8008dda <TIM_OC1_SetConfig+0x6e>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a23      	ldr	r2, [pc, #140]	@ (8008e5c <TIM_OC1_SetConfig+0xf0>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d003      	beq.n	8008dda <TIM_OC1_SetConfig+0x6e>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a22      	ldr	r2, [pc, #136]	@ (8008e60 <TIM_OC1_SetConfig+0xf4>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d10c      	bne.n	8008df4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2208      	movs	r2, #8
 8008dde:	4393      	bics	r3, r2
 8008de0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	2204      	movs	r2, #4
 8008df0:	4393      	bics	r3, r2
 8008df2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a18      	ldr	r2, [pc, #96]	@ (8008e58 <TIM_OC1_SetConfig+0xec>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d007      	beq.n	8008e0c <TIM_OC1_SetConfig+0xa0>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a17      	ldr	r2, [pc, #92]	@ (8008e5c <TIM_OC1_SetConfig+0xf0>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d003      	beq.n	8008e0c <TIM_OC1_SetConfig+0xa0>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a16      	ldr	r2, [pc, #88]	@ (8008e60 <TIM_OC1_SetConfig+0xf4>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d111      	bne.n	8008e30 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	4a15      	ldr	r2, [pc, #84]	@ (8008e64 <TIM_OC1_SetConfig+0xf8>)
 8008e10:	4013      	ands	r3, r2
 8008e12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	4a14      	ldr	r2, [pc, #80]	@ (8008e68 <TIM_OC1_SetConfig+0xfc>)
 8008e18:	4013      	ands	r3, r2
 8008e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	621a      	str	r2, [r3, #32]
}
 8008e4a:	46c0      	nop			@ (mov r8, r8)
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	b006      	add	sp, #24
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	46c0      	nop			@ (mov r8, r8)
 8008e54:	fffeff8f 	.word	0xfffeff8f
 8008e58:	40012c00 	.word	0x40012c00
 8008e5c:	40014400 	.word	0x40014400
 8008e60:	40014800 	.word	0x40014800
 8008e64:	fffffeff 	.word	0xfffffeff
 8008e68:	fffffdff 	.word	0xfffffdff

08008e6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b086      	sub	sp, #24
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a1b      	ldr	r3, [r3, #32]
 8008e80:	2210      	movs	r2, #16
 8008e82:	4393      	bics	r3, r2
 8008e84:	001a      	movs	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	4a2c      	ldr	r2, [pc, #176]	@ (8008f4c <TIM_OC2_SetConfig+0xe0>)
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8008f50 <TIM_OC2_SetConfig+0xe4>)
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	021b      	lsls	r3, r3, #8
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	2220      	movs	r2, #32
 8008eb6:	4393      	bics	r3, r2
 8008eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	011b      	lsls	r3, r3, #4
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a22      	ldr	r2, [pc, #136]	@ (8008f54 <TIM_OC2_SetConfig+0xe8>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d10d      	bne.n	8008eea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2280      	movs	r2, #128	@ 0x80
 8008ed2:	4393      	bics	r3, r2
 8008ed4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	011b      	lsls	r3, r3, #4
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2240      	movs	r2, #64	@ 0x40
 8008ee6:	4393      	bics	r3, r2
 8008ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a19      	ldr	r2, [pc, #100]	@ (8008f54 <TIM_OC2_SetConfig+0xe8>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d007      	beq.n	8008f02 <TIM_OC2_SetConfig+0x96>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a18      	ldr	r2, [pc, #96]	@ (8008f58 <TIM_OC2_SetConfig+0xec>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d003      	beq.n	8008f02 <TIM_OC2_SetConfig+0x96>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a17      	ldr	r2, [pc, #92]	@ (8008f5c <TIM_OC2_SetConfig+0xf0>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d113      	bne.n	8008f2a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	4a16      	ldr	r2, [pc, #88]	@ (8008f60 <TIM_OC2_SetConfig+0xf4>)
 8008f06:	4013      	ands	r3, r2
 8008f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	4a15      	ldr	r2, [pc, #84]	@ (8008f64 <TIM_OC2_SetConfig+0xf8>)
 8008f0e:	4013      	ands	r3, r2
 8008f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	693a      	ldr	r2, [r7, #16]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	621a      	str	r2, [r3, #32]
}
 8008f44:	46c0      	nop			@ (mov r8, r8)
 8008f46:	46bd      	mov	sp, r7
 8008f48:	b006      	add	sp, #24
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	feff8fff 	.word	0xfeff8fff
 8008f50:	fffffcff 	.word	0xfffffcff
 8008f54:	40012c00 	.word	0x40012c00
 8008f58:	40014400 	.word	0x40014400
 8008f5c:	40014800 	.word	0x40014800
 8008f60:	fffffbff 	.word	0xfffffbff
 8008f64:	fffff7ff 	.word	0xfffff7ff

08008f68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a1b      	ldr	r3, [r3, #32]
 8008f76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a1b      	ldr	r3, [r3, #32]
 8008f7c:	4a31      	ldr	r2, [pc, #196]	@ (8009044 <TIM_OC3_SetConfig+0xdc>)
 8008f7e:	401a      	ands	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	4a2d      	ldr	r2, [pc, #180]	@ (8009048 <TIM_OC3_SetConfig+0xe0>)
 8008f94:	4013      	ands	r3, r2
 8008f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2203      	movs	r2, #3
 8008f9c:	4393      	bics	r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	4a27      	ldr	r2, [pc, #156]	@ (800904c <TIM_OC3_SetConfig+0xe4>)
 8008fae:	4013      	ands	r3, r2
 8008fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	021b      	lsls	r3, r3, #8
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a23      	ldr	r2, [pc, #140]	@ (8009050 <TIM_OC3_SetConfig+0xe8>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d10d      	bne.n	8008fe2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	4a22      	ldr	r2, [pc, #136]	@ (8009054 <TIM_OC3_SetConfig+0xec>)
 8008fca:	4013      	ands	r3, r2
 8008fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	021b      	lsls	r3, r3, #8
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8009058 <TIM_OC3_SetConfig+0xf0>)
 8008fde:	4013      	ands	r3, r2
 8008fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a1a      	ldr	r2, [pc, #104]	@ (8009050 <TIM_OC3_SetConfig+0xe8>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d007      	beq.n	8008ffa <TIM_OC3_SetConfig+0x92>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a1b      	ldr	r2, [pc, #108]	@ (800905c <TIM_OC3_SetConfig+0xf4>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d003      	beq.n	8008ffa <TIM_OC3_SetConfig+0x92>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a1a      	ldr	r2, [pc, #104]	@ (8009060 <TIM_OC3_SetConfig+0xf8>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d113      	bne.n	8009022 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	4a19      	ldr	r2, [pc, #100]	@ (8009064 <TIM_OC3_SetConfig+0xfc>)
 8008ffe:	4013      	ands	r3, r2
 8009000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	4a18      	ldr	r2, [pc, #96]	@ (8009068 <TIM_OC3_SetConfig+0x100>)
 8009006:	4013      	ands	r3, r2
 8009008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	011b      	lsls	r3, r3, #4
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	4313      	orrs	r3, r2
 8009014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	011b      	lsls	r3, r3, #4
 800901c:	693a      	ldr	r2, [r7, #16]
 800901e:	4313      	orrs	r3, r2
 8009020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	685a      	ldr	r2, [r3, #4]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	621a      	str	r2, [r3, #32]
}
 800903c:	46c0      	nop			@ (mov r8, r8)
 800903e:	46bd      	mov	sp, r7
 8009040:	b006      	add	sp, #24
 8009042:	bd80      	pop	{r7, pc}
 8009044:	fffffeff 	.word	0xfffffeff
 8009048:	fffeff8f 	.word	0xfffeff8f
 800904c:	fffffdff 	.word	0xfffffdff
 8009050:	40012c00 	.word	0x40012c00
 8009054:	fffff7ff 	.word	0xfffff7ff
 8009058:	fffffbff 	.word	0xfffffbff
 800905c:	40014400 	.word	0x40014400
 8009060:	40014800 	.word	0x40014800
 8009064:	ffffefff 	.word	0xffffefff
 8009068:	ffffdfff 	.word	0xffffdfff

0800906c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a1b      	ldr	r3, [r3, #32]
 800907a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a1b      	ldr	r3, [r3, #32]
 8009080:	4a24      	ldr	r2, [pc, #144]	@ (8009114 <TIM_OC4_SetConfig+0xa8>)
 8009082:	401a      	ands	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	69db      	ldr	r3, [r3, #28]
 8009092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	4a20      	ldr	r2, [pc, #128]	@ (8009118 <TIM_OC4_SetConfig+0xac>)
 8009098:	4013      	ands	r3, r2
 800909a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	4a1f      	ldr	r2, [pc, #124]	@ (800911c <TIM_OC4_SetConfig+0xb0>)
 80090a0:	4013      	ands	r3, r2
 80090a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	021b      	lsls	r3, r3, #8
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	4a1b      	ldr	r2, [pc, #108]	@ (8009120 <TIM_OC4_SetConfig+0xb4>)
 80090b4:	4013      	ands	r3, r2
 80090b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	031b      	lsls	r3, r3, #12
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a17      	ldr	r2, [pc, #92]	@ (8009124 <TIM_OC4_SetConfig+0xb8>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d007      	beq.n	80090dc <TIM_OC4_SetConfig+0x70>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a16      	ldr	r2, [pc, #88]	@ (8009128 <TIM_OC4_SetConfig+0xbc>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d003      	beq.n	80090dc <TIM_OC4_SetConfig+0x70>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a15      	ldr	r2, [pc, #84]	@ (800912c <TIM_OC4_SetConfig+0xc0>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d109      	bne.n	80090f0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	4a14      	ldr	r2, [pc, #80]	@ (8009130 <TIM_OC4_SetConfig+0xc4>)
 80090e0:	4013      	ands	r3, r2
 80090e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	019b      	lsls	r3, r3, #6
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	693a      	ldr	r2, [r7, #16]
 8009108:	621a      	str	r2, [r3, #32]
}
 800910a:	46c0      	nop			@ (mov r8, r8)
 800910c:	46bd      	mov	sp, r7
 800910e:	b006      	add	sp, #24
 8009110:	bd80      	pop	{r7, pc}
 8009112:	46c0      	nop			@ (mov r8, r8)
 8009114:	ffffefff 	.word	0xffffefff
 8009118:	feff8fff 	.word	0xfeff8fff
 800911c:	fffffcff 	.word	0xfffffcff
 8009120:	ffffdfff 	.word	0xffffdfff
 8009124:	40012c00 	.word	0x40012c00
 8009128:	40014400 	.word	0x40014400
 800912c:	40014800 	.word	0x40014800
 8009130:	ffffbfff 	.word	0xffffbfff

08009134 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6a1b      	ldr	r3, [r3, #32]
 8009148:	4a21      	ldr	r2, [pc, #132]	@ (80091d0 <TIM_OC5_SetConfig+0x9c>)
 800914a:	401a      	ands	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800915a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4a1d      	ldr	r2, [pc, #116]	@ (80091d4 <TIM_OC5_SetConfig+0xa0>)
 8009160:	4013      	ands	r3, r2
 8009162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	4313      	orrs	r3, r2
 800916c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	4a19      	ldr	r2, [pc, #100]	@ (80091d8 <TIM_OC5_SetConfig+0xa4>)
 8009172:	4013      	ands	r3, r2
 8009174:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	041b      	lsls	r3, r3, #16
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	4313      	orrs	r3, r2
 8009180:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a15      	ldr	r2, [pc, #84]	@ (80091dc <TIM_OC5_SetConfig+0xa8>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d007      	beq.n	800919a <TIM_OC5_SetConfig+0x66>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a14      	ldr	r2, [pc, #80]	@ (80091e0 <TIM_OC5_SetConfig+0xac>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d003      	beq.n	800919a <TIM_OC5_SetConfig+0x66>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a13      	ldr	r2, [pc, #76]	@ (80091e4 <TIM_OC5_SetConfig+0xb0>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d109      	bne.n	80091ae <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	4a0c      	ldr	r2, [pc, #48]	@ (80091d0 <TIM_OC5_SetConfig+0x9c>)
 800919e:	4013      	ands	r3, r2
 80091a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	021b      	lsls	r3, r3, #8
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	697a      	ldr	r2, [r7, #20]
 80091b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	621a      	str	r2, [r3, #32]
}
 80091c8:	46c0      	nop			@ (mov r8, r8)
 80091ca:	46bd      	mov	sp, r7
 80091cc:	b006      	add	sp, #24
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	fffeffff 	.word	0xfffeffff
 80091d4:	fffeff8f 	.word	0xfffeff8f
 80091d8:	fffdffff 	.word	0xfffdffff
 80091dc:	40012c00 	.word	0x40012c00
 80091e0:	40014400 	.word	0x40014400
 80091e4:	40014800 	.word	0x40014800

080091e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b086      	sub	sp, #24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a1b      	ldr	r3, [r3, #32]
 80091fc:	4a22      	ldr	r2, [pc, #136]	@ (8009288 <TIM_OC6_SetConfig+0xa0>)
 80091fe:	401a      	ands	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800920e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	4a1e      	ldr	r2, [pc, #120]	@ (800928c <TIM_OC6_SetConfig+0xa4>)
 8009214:	4013      	ands	r3, r2
 8009216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	021b      	lsls	r3, r3, #8
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	4313      	orrs	r3, r2
 8009222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	4a1a      	ldr	r2, [pc, #104]	@ (8009290 <TIM_OC6_SetConfig+0xa8>)
 8009228:	4013      	ands	r3, r2
 800922a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	051b      	lsls	r3, r3, #20
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	4313      	orrs	r3, r2
 8009236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a16      	ldr	r2, [pc, #88]	@ (8009294 <TIM_OC6_SetConfig+0xac>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d007      	beq.n	8009250 <TIM_OC6_SetConfig+0x68>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a15      	ldr	r2, [pc, #84]	@ (8009298 <TIM_OC6_SetConfig+0xb0>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d003      	beq.n	8009250 <TIM_OC6_SetConfig+0x68>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a14      	ldr	r2, [pc, #80]	@ (800929c <TIM_OC6_SetConfig+0xb4>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d109      	bne.n	8009264 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	4a13      	ldr	r2, [pc, #76]	@ (80092a0 <TIM_OC6_SetConfig+0xb8>)
 8009254:	4013      	ands	r3, r2
 8009256:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	029b      	lsls	r3, r3, #10
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	4313      	orrs	r3, r2
 8009262:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	685a      	ldr	r2, [r3, #4]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	621a      	str	r2, [r3, #32]
}
 800927e:	46c0      	nop			@ (mov r8, r8)
 8009280:	46bd      	mov	sp, r7
 8009282:	b006      	add	sp, #24
 8009284:	bd80      	pop	{r7, pc}
 8009286:	46c0      	nop			@ (mov r8, r8)
 8009288:	ffefffff 	.word	0xffefffff
 800928c:	feff8fff 	.word	0xfeff8fff
 8009290:	ffdfffff 	.word	0xffdfffff
 8009294:	40012c00 	.word	0x40012c00
 8009298:	40014400 	.word	0x40014400
 800929c:	40014800 	.word	0x40014800
 80092a0:	fffbffff 	.word	0xfffbffff

080092a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	221f      	movs	r2, #31
 80092b4:	4013      	ands	r3, r2
 80092b6:	2201      	movs	r2, #1
 80092b8:	409a      	lsls	r2, r3
 80092ba:	0013      	movs	r3, r2
 80092bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	697a      	ldr	r2, [r7, #20]
 80092c4:	43d2      	mvns	r2, r2
 80092c6:	401a      	ands	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6a1a      	ldr	r2, [r3, #32]
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	211f      	movs	r1, #31
 80092d4:	400b      	ands	r3, r1
 80092d6:	6879      	ldr	r1, [r7, #4]
 80092d8:	4099      	lsls	r1, r3
 80092da:	000b      	movs	r3, r1
 80092dc:	431a      	orrs	r2, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	621a      	str	r2, [r3, #32]
}
 80092e2:	46c0      	nop			@ (mov r8, r8)
 80092e4:	46bd      	mov	sp, r7
 80092e6:	b006      	add	sp, #24
 80092e8:	bd80      	pop	{r7, pc}
	...

080092ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	223c      	movs	r2, #60	@ 0x3c
 80092fa:	5c9b      	ldrb	r3, [r3, r2]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d101      	bne.n	8009304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009300:	2302      	movs	r3, #2
 8009302:	e050      	b.n	80093a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	223c      	movs	r2, #60	@ 0x3c
 8009308:	2101      	movs	r1, #1
 800930a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	223d      	movs	r2, #61	@ 0x3d
 8009310:	2102      	movs	r1, #2
 8009312:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a21      	ldr	r2, [pc, #132]	@ (80093b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d108      	bne.n	8009340 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	4a20      	ldr	r2, [pc, #128]	@ (80093b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009332:	4013      	ands	r3, r2
 8009334:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	4313      	orrs	r3, r2
 800933e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2270      	movs	r2, #112	@ 0x70
 8009344:	4393      	bics	r3, r2
 8009346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	4313      	orrs	r3, r2
 8009350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a14      	ldr	r2, [pc, #80]	@ (80093b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d00a      	beq.n	800937a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	2380      	movs	r3, #128	@ 0x80
 800936a:	05db      	lsls	r3, r3, #23
 800936c:	429a      	cmp	r2, r3
 800936e:	d004      	beq.n	800937a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a10      	ldr	r2, [pc, #64]	@ (80093b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d10c      	bne.n	8009394 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	2280      	movs	r2, #128	@ 0x80
 800937e:	4393      	bics	r3, r2
 8009380:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	4313      	orrs	r3, r2
 800938a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	223d      	movs	r2, #61	@ 0x3d
 8009398:	2101      	movs	r1, #1
 800939a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	223c      	movs	r2, #60	@ 0x3c
 80093a0:	2100      	movs	r1, #0
 80093a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	0018      	movs	r0, r3
 80093a8:	46bd      	mov	sp, r7
 80093aa:	b004      	add	sp, #16
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	46c0      	nop			@ (mov r8, r8)
 80093b0:	40012c00 	.word	0x40012c00
 80093b4:	ff0fffff 	.word	0xff0fffff
 80093b8:	40000400 	.word	0x40000400

080093bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093c4:	46c0      	nop			@ (mov r8, r8)
 80093c6:	46bd      	mov	sp, r7
 80093c8:	b002      	add	sp, #8
 80093ca:	bd80      	pop	{r7, pc}

080093cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093d4:	46c0      	nop			@ (mov r8, r8)
 80093d6:	46bd      	mov	sp, r7
 80093d8:	b002      	add	sp, #8
 80093da:	bd80      	pop	{r7, pc}

080093dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80093e4:	46c0      	nop			@ (mov r8, r8)
 80093e6:	46bd      	mov	sp, r7
 80093e8:	b002      	add	sp, #8
 80093ea:	bd80      	pop	{r7, pc}

080093ec <memset>:
 80093ec:	0003      	movs	r3, r0
 80093ee:	1882      	adds	r2, r0, r2
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d100      	bne.n	80093f6 <memset+0xa>
 80093f4:	4770      	bx	lr
 80093f6:	7019      	strb	r1, [r3, #0]
 80093f8:	3301      	adds	r3, #1
 80093fa:	e7f9      	b.n	80093f0 <memset+0x4>

080093fc <__libc_init_array>:
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	2600      	movs	r6, #0
 8009400:	4c0c      	ldr	r4, [pc, #48]	@ (8009434 <__libc_init_array+0x38>)
 8009402:	4d0d      	ldr	r5, [pc, #52]	@ (8009438 <__libc_init_array+0x3c>)
 8009404:	1b64      	subs	r4, r4, r5
 8009406:	10a4      	asrs	r4, r4, #2
 8009408:	42a6      	cmp	r6, r4
 800940a:	d109      	bne.n	8009420 <__libc_init_array+0x24>
 800940c:	2600      	movs	r6, #0
 800940e:	f000 f823 	bl	8009458 <_init>
 8009412:	4c0a      	ldr	r4, [pc, #40]	@ (800943c <__libc_init_array+0x40>)
 8009414:	4d0a      	ldr	r5, [pc, #40]	@ (8009440 <__libc_init_array+0x44>)
 8009416:	1b64      	subs	r4, r4, r5
 8009418:	10a4      	asrs	r4, r4, #2
 800941a:	42a6      	cmp	r6, r4
 800941c:	d105      	bne.n	800942a <__libc_init_array+0x2e>
 800941e:	bd70      	pop	{r4, r5, r6, pc}
 8009420:	00b3      	lsls	r3, r6, #2
 8009422:	58eb      	ldr	r3, [r5, r3]
 8009424:	4798      	blx	r3
 8009426:	3601      	adds	r6, #1
 8009428:	e7ee      	b.n	8009408 <__libc_init_array+0xc>
 800942a:	00b3      	lsls	r3, r6, #2
 800942c:	58eb      	ldr	r3, [r5, r3]
 800942e:	4798      	blx	r3
 8009430:	3601      	adds	r6, #1
 8009432:	e7f2      	b.n	800941a <__libc_init_array+0x1e>
 8009434:	08009564 	.word	0x08009564
 8009438:	08009564 	.word	0x08009564
 800943c:	08009568 	.word	0x08009568
 8009440:	08009564 	.word	0x08009564

08009444 <memcpy>:
 8009444:	2300      	movs	r3, #0
 8009446:	b510      	push	{r4, lr}
 8009448:	429a      	cmp	r2, r3
 800944a:	d100      	bne.n	800944e <memcpy+0xa>
 800944c:	bd10      	pop	{r4, pc}
 800944e:	5ccc      	ldrb	r4, [r1, r3]
 8009450:	54c4      	strb	r4, [r0, r3]
 8009452:	3301      	adds	r3, #1
 8009454:	e7f8      	b.n	8009448 <memcpy+0x4>
	...

08009458 <_init>:
 8009458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945a:	46c0      	nop			@ (mov r8, r8)
 800945c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945e:	bc08      	pop	{r3}
 8009460:	469e      	mov	lr, r3
 8009462:	4770      	bx	lr

08009464 <_fini>:
 8009464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009466:	46c0      	nop			@ (mov r8, r8)
 8009468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946a:	bc08      	pop	{r3}
 800946c:	469e      	mov	lr, r3
 800946e:	4770      	bx	lr
