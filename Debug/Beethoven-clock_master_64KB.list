
Beethoven-clock_master_64KB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092c4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08009380  08009380  0000a380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009474  08009474  0000b098  2**0
                  CONTENTS
  4 .ARM          00000000  08009474  08009474  0000b098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009474  08009474  0000b098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009474  08009474  0000a474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009478  08009478  0000a478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800947c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  20000098  08009514  0000b098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  08009514  0000b5f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fe8  00000000  00000000  0000b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a7  00000000  00000000  000230a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00026750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e2  00000000  00000000  00027e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194f5  00000000  00000000  00029022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c61d  00000000  00000000  00042517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c63d  00000000  00000000  0005eb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb171  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000536c  00000000  00000000  000fb1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00100520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000098 	.word	0x20000098
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009368 	.word	0x08009368

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000009c 	.word	0x2000009c
 8000100:	08009368 	.word	0x08009368

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-low hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2200      	movs	r2, #0
 800025a:	0019      	movs	r1, r3
 800025c:	f004 f81f 	bl	800429e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2201      	movs	r2, #1
 800026c:	0019      	movs	r1, r3
 800026e:	f004 f816 	bl	800429e <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f008 f876 	bl	8008368 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f008 f825 	bl	80082d0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f004 f829 	bl	80044b0 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f004 f93d 	bl	8004704 <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	08009380 	.word	0x08009380

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f003 ffeb 	bl	80044b0 <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f003 ffc5 	bl	80044b0 <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f004 f8d9 	bl	8004704 <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	08009384 	.word	0x08009384

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f003 ff81 	bl	80044b0 <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f004 f895 	bl	8004704 <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	08009388 	.word	0x08009388

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f003 ff31 	bl	80044b0 <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f004 f845 	bl	8004704 <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	0800938c 	.word	0x0800938c
 8000700:	08009394 	.word	0x08009394

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f003 feaf 	bl	80044b0 <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f003 ffc3 	bl	8004704 <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f003 fe50 	bl	80044b0 <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f003 fe2f 	bl	80044b0 <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f003 ff43 	bl	8004704 <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	0800938c 	.word	0x0800938c
 8000894:	08009394 	.word	0x08009394

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f003 fdd5 	bl	80044b0 <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f003 fdb3 	bl	80044b0 <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f003 fed0 	bl	8004704 <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	0800939c 	.word	0x0800939c
 8000978:	0800938c 	.word	0x0800938c

0800097c <NAU8315YG_Init>:

#ifndef NAU8315YG_H_
#include "../Inc/NAU8315YG.h"
#endif

void NAU8315YG_Init(NAU8315YG *nau, I2S_HandleTypeDef *hi2s, GPIO_TypeDef *enablePort, uint32_t enablePin) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	603b      	str	r3, [r7, #0]

	nau->hi2s = hi2s;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	601a      	str	r2, [r3, #0]

	nau->enablePort = enablePort;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	605a      	str	r2, [r3, #4]
	nau->enablePin = enablePin;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	609a      	str	r2, [r3, #8]

	NAU8315YG_AmpDisable(nau);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f818 	bl	80009d4 <NAU8315YG_AmpDisable>

}
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b004      	add	sp, #16
 80009aa:	bd80      	pop	{r7, pc}

080009ac <NAU8315YG_AmpEnable>:

void NAU8315YG_AmpEnable(NAU8315YG *nau) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

	// Set enable pin high
	HAL_GPIO_WritePin(nau->enablePort, nau->enablePin, GPIO_PIN_SET);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6858      	ldr	r0, [r3, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	2201      	movs	r2, #1
 80009c0:	0019      	movs	r1, r3
 80009c2:	f003 fc6c 	bl	800429e <HAL_GPIO_WritePin>

	nau->ampEnableFlag = 1;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2201      	movs	r2, #1
 80009ca:	731a      	strb	r2, [r3, #12]

}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <NAU8315YG_AmpDisable>:


void NAU8315YG_AmpDisable(NAU8315YG *nau) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

	// Set enable pin high
	HAL_GPIO_WritePin(nau->enablePort, nau->enablePin, GPIO_PIN_RESET);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6858      	ldr	r0, [r3, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	2200      	movs	r2, #0
 80009e8:	0019      	movs	r1, r3
 80009ea:	f003 fc58 	bl	800429e <HAL_GPIO_WritePin>

	nau->ampEnableFlag = 0;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	731a      	strb	r2, [r3, #12]

}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b002      	add	sp, #8
 80009fa:	bd80      	pop	{r7, pc}

080009fc <W25Q_Init>:
#endif


uint8_t W25Q_Init(W25Q *wq, GPIO_TypeDef *nCSPort, GPIO_TypeDef *nWPPort, GPIO_TypeDef *nHOLDPort,
					uint32_t nCSPin, uint32_t nWPPin, uint32_t nHOLDPin, SPI_HandleTypeDef *hspi,
					uint8_t devID, uint8_t isQuadChip, uint8_t driveStrength) {
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
 8000a08:	603b      	str	r3, [r7, #0]

	// Map struct GPIO Ports & Pins to passed parameters
	wq->nCSPort = nCSPort;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	601a      	str	r2, [r3, #0]
	wq->nWPPort = nWPPort;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	605a      	str	r2, [r3, #4]
	wq->nHOLDPort = nHOLDPort;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	609a      	str	r2, [r3, #8]

	wq->nCSPin = nCSPin;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a20:	60da      	str	r2, [r3, #12]
	wq->nWPPin = nWPPin;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a26:	611a      	str	r2, [r3, #16]
	wq->nHOLDPin = nHOLDPin;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a2c:	615a      	str	r2, [r3, #20]

	wq->hspi = hspi;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a32:	619a      	str	r2, [r3, #24]

	wq->quadEnable = isQuadChip;		// Default state depends on PN of chip.
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	223c      	movs	r2, #60	@ 0x3c
 8000a38:	2108      	movs	r1, #8
 8000a3a:	1852      	adds	r2, r2, r1
 8000a3c:	19d2      	adds	r2, r2, r7
 8000a3e:	2125      	movs	r1, #37	@ 0x25
 8000a40:	7812      	ldrb	r2, [r2, #0]
 8000a42:	545a      	strb	r2, [r3, r1]
	wq->writeEnable = 0;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2223      	movs	r2, #35	@ 0x23
 8000a48:	2100      	movs	r1, #0
 8000a4a:	5499      	strb	r1, [r3, r2]

	// Set CS pin high
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	2201      	movs	r2, #1
 8000a58:	0019      	movs	r1, r3
 8000a5a:	f003 fc20 	bl	800429e <HAL_GPIO_WritePin>

	// Set hold pin high (Disable)
	HAL_GPIO_WritePin(wq->nHOLDPort, wq->nHOLDPin, GPIO_PIN_SET);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6898      	ldr	r0, [r3, #8]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	2201      	movs	r2, #1
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	f003 fc17 	bl	800429e <HAL_GPIO_WritePin>

	// Set WP pin high (disable)
	HAL_GPIO_WritePin(wq->nWPPort, wq->nWPPin, GPIO_PIN_SET);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6858      	ldr	r0, [r3, #4]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	f003 fc0e 	bl	800429e <HAL_GPIO_WritePin>

	// HAL status handle used to indicate error messages
	HAL_StatusTypeDef halRet = HAL_OK;
 8000a82:	2116      	movs	r1, #22
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]

	uint8_t returnInc = 1;			// Integer error code return, incremented after successful things.
 8000a8a:	2617      	movs	r6, #23
 8000a8c:	19bb      	adds	r3, r7, r6
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]

	uint8_t errorsEnabled = 1;		// Use for debugging
 8000a92:	2315      	movs	r3, #21
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]

	// Release from power down mode
	halRet = W25Q_ReleasePowerDown(wq);
 8000a9a:	000d      	movs	r5, r1
 8000a9c:	187c      	adds	r4, r7, r1
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f000 f8ea 	bl	8000c7a <W25Q_ReleasePowerDown>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000aaa:	197b      	adds	r3, r7, r5
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d007      	beq.n	8000ac2 <W25Q_Init+0xc6>
 8000ab2:	2315      	movs	r3, #21
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d002      	beq.n	8000ac2 <W25Q_Init+0xc6>
		return returnInc;
 8000abc:	19bb      	adds	r3, r7, r6
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	e0d7      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000ac2:	2517      	movs	r5, #23
 8000ac4:	197b      	adds	r3, r7, r5
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	197b      	adds	r3, r7, r5
 8000aca:	3201      	adds	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]

	// Reset Device
	halRet = W25Q_ChipReset(wq);
 8000ace:	2616      	movs	r6, #22
 8000ad0:	19bc      	adds	r4, r7, r6
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 fc45 	bl	8001364 <W25Q_ChipReset>
 8000ada:	0003      	movs	r3, r0
 8000adc:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000ade:	19bb      	adds	r3, r7, r6
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d007      	beq.n	8000af6 <W25Q_Init+0xfa>
 8000ae6:	2315      	movs	r3, #21
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <W25Q_Init+0xfa>
		return returnInc;
 8000af0:	197b      	adds	r3, r7, r5
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	e0bd      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000af6:	2517      	movs	r5, #23
 8000af8:	197b      	adds	r3, r7, r5
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	197b      	adds	r3, r7, r5
 8000afe:	3201      	adds	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]

	// Read initial Status Registers
	halRet = W25Q_ReadStatusRegs(wq);
 8000b02:	2616      	movs	r6, #22
 8000b04:	19bc      	adds	r4, r7, r6
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 faef 	bl	80010ec <W25Q_ReadStatusRegs>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b12:	19bb      	adds	r3, r7, r6
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d007      	beq.n	8000b2a <W25Q_Init+0x12e>
 8000b1a:	2315      	movs	r3, #21
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <W25Q_Init+0x12e>
		return returnInc;
 8000b24:	197b      	adds	r3, r7, r5
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	e0a3      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000b2a:	2517      	movs	r5, #23
 8000b2c:	197b      	adds	r3, r7, r5
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	197b      	adds	r3, r7, r5
 8000b32:	3201      	adds	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]

	// Increase driver strength?
	halRet = W25Q_SetDriverStrength(wq, driveStrength);
 8000b36:	2616      	movs	r6, #22
 8000b38:	19bc      	adds	r4, r7, r6
 8000b3a:	2340      	movs	r3, #64	@ 0x40
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	189b      	adds	r3, r3, r2
 8000b40:	19db      	adds	r3, r3, r7
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	0011      	movs	r1, r2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 fc75 	bl	8001438 <W25Q_SetDriverStrength>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b52:	19bb      	adds	r3, r7, r6
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d007      	beq.n	8000b6a <W25Q_Init+0x16e>
 8000b5a:	2315      	movs	r3, #21
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d002      	beq.n	8000b6a <W25Q_Init+0x16e>
		return returnInc;
 8000b64:	197b      	adds	r3, r7, r5
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	e083      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000b6a:	2517      	movs	r5, #23
 8000b6c:	197b      	adds	r3, r7, r5
 8000b6e:	781a      	ldrb	r2, [r3, #0]
 8000b70:	197b      	adds	r3, r7, r5
 8000b72:	3201      	adds	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
//			returnInc++;
//	}


	// Get + Store IDs
	halRet = W25Q_GetIDs(wq, devID);
 8000b76:	2616      	movs	r6, #22
 8000b78:	19bc      	adds	r4, r7, r6
 8000b7a:	2338      	movs	r3, #56	@ 0x38
 8000b7c:	2208      	movs	r2, #8
 8000b7e:	189b      	adds	r3, r3, r2
 8000b80:	19db      	adds	r3, r3, r7
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	0011      	movs	r1, r2
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 f8bb 	bl	8000d04 <W25Q_GetIDs>
 8000b8e:	0003      	movs	r3, r0
 8000b90:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000b92:	19bb      	adds	r3, r7, r6
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d007      	beq.n	8000baa <W25Q_Init+0x1ae>
 8000b9a:	2315      	movs	r3, #21
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <W25Q_Init+0x1ae>
		return returnInc;
 8000ba4:	197b      	adds	r3, r7, r5
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	e063      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000baa:	2517      	movs	r5, #23
 8000bac:	197b      	adds	r3, r7, r5
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	197b      	adds	r3, r7, r5
 8000bb2:	3201      	adds	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]

	// Get + Store Status Register Contents
	halRet = W25Q_ReadStatusRegs(wq);
 8000bb6:	2616      	movs	r6, #22
 8000bb8:	19bc      	adds	r4, r7, r6
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f000 fa95 	bl	80010ec <W25Q_ReadStatusRegs>
 8000bc2:	0003      	movs	r3, r0
 8000bc4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000bc6:	19bb      	adds	r3, r7, r6
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d007      	beq.n	8000bde <W25Q_Init+0x1e2>
 8000bce:	2315      	movs	r3, #21
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d002      	beq.n	8000bde <W25Q_Init+0x1e2>
		return returnInc;
 8000bd8:	197b      	adds	r3, r7, r5
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	e049      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000bde:	2517      	movs	r5, #23
 8000be0:	197b      	adds	r3, r7, r5
 8000be2:	781a      	ldrb	r2, [r3, #0]
 8000be4:	197b      	adds	r3, r7, r5
 8000be6:	3201      	adds	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]

	// Disable Write Access to Memory
	if(wq->writeEnable != 0) {
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2223      	movs	r2, #35	@ 0x23
 8000bee:	5c9b      	ldrb	r3, [r3, r2]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d019      	beq.n	8000c28 <W25Q_Init+0x22c>
		halRet = W25Q_DisableWrite(wq);
 8000bf4:	2616      	movs	r6, #22
 8000bf6:	19bc      	adds	r4, r7, r6
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 f985 	bl	8000f0a <W25Q_DisableWrite>
 8000c00:	0003      	movs	r3, r0
 8000c02:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK && errorsEnabled)
 8000c04:	19bb      	adds	r3, r7, r6
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d007      	beq.n	8000c1c <W25Q_Init+0x220>
 8000c0c:	2315      	movs	r3, #21
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <W25Q_Init+0x220>
			return returnInc;
 8000c16:	197b      	adds	r3, r7, r5
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	e02a      	b.n	8000c72 <W25Q_Init+0x276>
		else
			returnInc++;
 8000c1c:	2117      	movs	r1, #23
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	3201      	adds	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
	}

	// Get + Store Status Register Contents
	halRet = W25Q_ReadStatusRegs(wq);
 8000c28:	2516      	movs	r5, #22
 8000c2a:	197c      	adds	r4, r7, r5
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 fa5c 	bl	80010ec <W25Q_ReadStatusRegs>
 8000c34:	0003      	movs	r3, r0
 8000c36:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000c38:	197b      	adds	r3, r7, r5
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d008      	beq.n	8000c52 <W25Q_Init+0x256>
 8000c40:	2315      	movs	r3, #21
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <W25Q_Init+0x256>
		return returnInc;
 8000c4a:	2317      	movs	r3, #23
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	e00f      	b.n	8000c72 <W25Q_Init+0x276>
	else
		returnInc++;
 8000c52:	2117      	movs	r1, #23
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	781a      	ldrb	r2, [r3, #0]
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	3201      	adds	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]

	// Set WP pin low (Enable)
	HAL_GPIO_WritePin(wq->nWPPort, wq->nWPPin, GPIO_PIN_RESET);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	6858      	ldr	r0, [r3, #4]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	2200      	movs	r2, #0
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	f003 fb17 	bl	800429e <HAL_GPIO_WritePin>

	return 0;
 8000c70:	2300      	movs	r3, #0

}
 8000c72:	0018      	movs	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b007      	add	sp, #28
 8000c78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c7a <W25Q_ReleasePowerDown>:

HAL_StatusTypeDef W25Q_ReleasePowerDown(W25Q *wq) {
 8000c7a:	b590      	push	{r4, r7, lr}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000c82:	240e      	movs	r4, #14
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]

	// TX release power-down instruction
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6818      	ldr	r0, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	2200      	movs	r2, #0
 8000c96:	0019      	movs	r1, r3
 8000c98:	f003 fb01 	bl	800429e <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_READ_RELEASE_ID}, 1, HAL_MAX_DELAY);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6998      	ldr	r0, [r3, #24]
 8000ca0:	210c      	movs	r1, #12
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	22ab      	movs	r2, #171	@ 0xab
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	193c      	adds	r4, r7, r4
 8000caa:	2301      	movs	r3, #1
 8000cac:	425b      	negs	r3, r3
 8000cae:	1879      	adds	r1, r7, r1
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f006 fc4d 	bl	8007550 <HAL_SPI_Transmit>
 8000cb6:	0003      	movs	r3, r0
 8000cb8:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	0019      	movs	r1, r3
 8000cc8:	f003 fae9 	bl	800429e <HAL_GPIO_WritePin>

	// Delay for at least 3 us
	for(uint8_t i = 0; i < 15; i++) {
 8000ccc:	230f      	movs	r3, #15
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	e006      	b.n	8000ce4 <W25Q_ReleasePowerDown+0x6a>
		__NOP();
 8000cd6:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < 15; i++) {
 8000cd8:	210f      	movs	r1, #15
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	3201      	adds	r2, #1
 8000ce2:	701a      	strb	r2, [r3, #0]
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b0e      	cmp	r3, #14
 8000cec:	d9f3      	bls.n	8000cd6 <W25Q_ReleasePowerDown+0x5c>
	}

	wq->powerUp = 1; 		// We have now successfully exited power-down state
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2224      	movs	r2, #36	@ 0x24
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	5499      	strb	r1, [r3, r2]

	return halRet;
 8000cf6:	230e      	movs	r3, #14
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	781b      	ldrb	r3, [r3, #0]

}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b005      	add	sp, #20
 8000d02:	bd90      	pop	{r4, r7, pc}

08000d04 <W25Q_GetIDs>:

HAL_StatusTypeDef W25Q_GetIDs(W25Q *wq, uint8_t devID_passed) {
 8000d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d06:	b089      	sub	sp, #36	@ 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	000a      	movs	r2, r1
 8000d0e:	1cfb      	adds	r3, r7, #3
 8000d10:	701a      	strb	r2, [r3, #0]


	HAL_StatusTypeDef halRet = HAL_OK;
 8000d12:	241f      	movs	r4, #31
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]

	/*
	 * Release power down + read device ID
	 */
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6818      	ldr	r0, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	2200      	movs	r2, #0
 8000d26:	0019      	movs	r1, r3
 8000d28:	f003 fab9 	bl	800429e <HAL_GPIO_WritePin>
		// TX return device ID instruction
		halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[4]){CMD_READ_RELEASE_ID, 0x00, 0x00, 0x00}, 4, HAL_MAX_DELAY);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6998      	ldr	r0, [r3, #24]
 8000d30:	2118      	movs	r1, #24
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	22ab      	movs	r2, #171	@ 0xab
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	705a      	strb	r2, [r3, #1]
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	709a      	strb	r2, [r3, #2]
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	70da      	strb	r2, [r3, #3]
 8000d4a:	0025      	movs	r5, r4
 8000d4c:	193c      	adds	r4, r7, r4
 8000d4e:	2301      	movs	r3, #1
 8000d50:	425b      	negs	r3, r3
 8000d52:	1879      	adds	r1, r7, r1
 8000d54:	2204      	movs	r2, #4
 8000d56:	f006 fbfb 	bl	8007550 <HAL_SPI_Transmit>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 8000d5e:	197b      	adds	r3, r7, r5
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00b      	beq.n	8000d7e <W25Q_GetIDs+0x7a>
			HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6818      	ldr	r0, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	2201      	movs	r2, #1
 8000d72:	0019      	movs	r1, r3
 8000d74:	f003 fa93 	bl	800429e <HAL_GPIO_WritePin>
			return halRet;
 8000d78:	197b      	adds	r3, r7, r5
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	e07c      	b.n	8000e78 <W25Q_GetIDs+0x174>
		}

		// RX device ID into struct variable
		uint8_t devIDRet[1] = {0x00};
 8000d7e:	2514      	movs	r5, #20
 8000d80:	197b      	adds	r3, r7, r5
 8000d82:	4a3f      	ldr	r2, [pc, #252]	@ (8000e80 <W25Q_GetIDs+0x17c>)
 8000d84:	7812      	ldrb	r2, [r2, #0]
 8000d86:	701a      	strb	r2, [r3, #0]
		halRet = HAL_SPI_Receive(wq->hspi, devIDRet, 1, HAL_MAX_DELAY);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6998      	ldr	r0, [r3, #24]
 8000d8c:	261f      	movs	r6, #31
 8000d8e:	19bc      	adds	r4, r7, r6
 8000d90:	2301      	movs	r3, #1
 8000d92:	425b      	negs	r3, r3
 8000d94:	1979      	adds	r1, r7, r5
 8000d96:	2201      	movs	r2, #1
 8000d98:	f006 fd3a 	bl	8007810 <HAL_SPI_Receive>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	2201      	movs	r2, #1
 8000dac:	0019      	movs	r1, r3
 8000dae:	f003 fa76 	bl	800429e <HAL_GPIO_WritePin>
		wq->devID = devIDRet[0];
 8000db2:	197b      	adds	r3, r7, r5
 8000db4:	781a      	ldrb	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	775a      	strb	r2, [r3, #29]


		 // Check to ensure that received device ID is equal to that passed by the user in the init function
		if((halRet != HAL_OK) || (wq->devID != devID_passed))
 8000dba:	19bb      	adds	r3, r7, r6
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d105      	bne.n	8000dce <W25Q_GetIDs+0xca>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7f5b      	ldrb	r3, [r3, #29]
 8000dc6:	1cfa      	adds	r2, r7, #3
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d001      	beq.n	8000dd2 <W25Q_GetIDs+0xce>
			return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e052      	b.n	8000e78 <W25Q_GetIDs+0x174>

	/*
	 * Read and check MFR ID
	 */
		// TX read mfr + device ID command
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6818      	ldr	r0, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	0019      	movs	r1, r3
 8000de0:	f003 fa5d 	bl	800429e <HAL_GPIO_WritePin>
		halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[4]){CMD_READ_MFR_ID, 0x00, 0x00, 0x00}, 4, HAL_MAX_DELAY);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6998      	ldr	r0, [r3, #24]
 8000de8:	2110      	movs	r1, #16
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2290      	movs	r2, #144	@ 0x90
 8000dee:	701a      	strb	r2, [r3, #0]
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2200      	movs	r2, #0
 8000df4:	705a      	strb	r2, [r3, #1]
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2200      	movs	r2, #0
 8000dfa:	709a      	strb	r2, [r3, #2]
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2200      	movs	r2, #0
 8000e00:	70da      	strb	r2, [r3, #3]
 8000e02:	251f      	movs	r5, #31
 8000e04:	197c      	adds	r4, r7, r5
 8000e06:	2301      	movs	r3, #1
 8000e08:	425b      	negs	r3, r3
 8000e0a:	1879      	adds	r1, r7, r1
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	f006 fb9f 	bl	8007550 <HAL_SPI_Transmit>
 8000e12:	0003      	movs	r3, r0
 8000e14:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000e16:	197b      	adds	r3, r7, r5
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <W25Q_GetIDs+0x120>
			return halRet;
 8000e1e:	197b      	adds	r3, r7, r5
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	e029      	b.n	8000e78 <W25Q_GetIDs+0x174>
		}



		// RX device and mfr ID, store in struct variable
		uint8_t retIDs[2] = {0x00, 0x00};
 8000e24:	250c      	movs	r5, #12
 8000e26:	197b      	adds	r3, r7, r5
 8000e28:	2200      	movs	r2, #0
 8000e2a:	801a      	strh	r2, [r3, #0]
		halRet = HAL_SPI_Receive(wq->hspi, retIDs, 2, HAL_MAX_DELAY);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6998      	ldr	r0, [r3, #24]
 8000e30:	261f      	movs	r6, #31
 8000e32:	19bc      	adds	r4, r7, r6
 8000e34:	2301      	movs	r3, #1
 8000e36:	425b      	negs	r3, r3
 8000e38:	1979      	adds	r1, r7, r5
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	f006 fce8 	bl	8007810 <HAL_SPI_Receive>
 8000e40:	0003      	movs	r3, r0
 8000e42:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	2201      	movs	r2, #1
 8000e50:	0019      	movs	r1, r3
 8000e52:	f003 fa24 	bl	800429e <HAL_GPIO_WritePin>
		wq->mfrID = retIDs[0];
 8000e56:	197b      	adds	r3, r7, r5
 8000e58:	781a      	ldrb	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	771a      	strb	r2, [r3, #28]


		// Check to ensure that received mfr ID is correct.
		if((halRet != HAL_OK) || (wq->mfrID != 0xEF))
 8000e5e:	19bb      	adds	r3, r7, r6
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d103      	bne.n	8000e6e <W25Q_GetIDs+0x16a>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7f1b      	ldrb	r3, [r3, #28]
 8000e6a:	2bef      	cmp	r3, #239	@ 0xef
 8000e6c:	d001      	beq.n	8000e72 <W25Q_GetIDs+0x16e>
			return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e002      	b.n	8000e78 <W25Q_GetIDs+0x174>

	/*
	 * Leaving out for now: Read JEDEC ID
	 */

		return halRet;
 8000e72:	231f      	movs	r3, #31
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	781b      	ldrb	r3, [r3, #0]
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b009      	add	sp, #36	@ 0x24
 8000e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e80:	080093a4 	.word	0x080093a4

08000e84 <W25Q_EnableWrite>:

HAL_StatusTypeDef W25Q_EnableWrite(W25Q *wq) {
 8000e84:	b5b0      	push	{r4, r5, r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000e8c:	250f      	movs	r5, #15
 8000e8e:	197b      	adds	r3, r7, r5
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]

	// TX write enable command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	f003 f9fc 	bl	800429e <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_WRITE_ENABLE}, 1, HAL_MAX_DELAY);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6998      	ldr	r0, [r3, #24]
 8000eaa:	210c      	movs	r1, #12
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2206      	movs	r2, #6
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	197c      	adds	r4, r7, r5
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f006 fb48 	bl	8007550 <HAL_SPI_Transmit>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	2201      	movs	r2, #1
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	f003 f9e4 	bl	800429e <HAL_GPIO_WritePin>

	if(halRet != HAL_OK)
 8000ed6:	197b      	adds	r3, r7, r5
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <W25Q_EnableWrite+0x60>
		return halRet;
 8000ede:	197b      	adds	r3, r7, r5
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	e00e      	b.n	8000f02 <W25Q_EnableWrite+0x7e>

	// Read back written value and confirm
	W25Q_ReadStatusReg(wq, 1);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f000 f851 	bl	8000f90 <W25Q_ReadStatusReg>

	// Bit 1 of status register 1 should now be 1
	if(wq->writeEnable != 1)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2223      	movs	r2, #35	@ 0x23
 8000ef2:	5c9b      	ldrb	r3, [r3, r2]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d001      	beq.n	8000efc <W25Q_EnableWrite+0x78>
		return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e002      	b.n	8000f02 <W25Q_EnableWrite+0x7e>

	return halRet;
 8000efc:	230f      	movs	r3, #15
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	781b      	ldrb	r3, [r3, #0]

}
 8000f02:	0018      	movs	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b004      	add	sp, #16
 8000f08:	bdb0      	pop	{r4, r5, r7, pc}

08000f0a <W25Q_DisableWrite>:

HAL_StatusTypeDef W25Q_DisableWrite(W25Q *wq) {
 8000f0a:	b5b0      	push	{r4, r5, r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000f12:	250f      	movs	r5, #15
 8000f14:	197b      	adds	r3, r7, r5
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]

	// TX write disable command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	2200      	movs	r2, #0
 8000f26:	0019      	movs	r1, r3
 8000f28:	f003 f9b9 	bl	800429e <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_WRITE_DISABLE}, 1, HAL_MAX_DELAY);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6998      	ldr	r0, [r3, #24]
 8000f30:	210c      	movs	r1, #12
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2204      	movs	r2, #4
 8000f36:	701a      	strb	r2, [r3, #0]
 8000f38:	197c      	adds	r4, r7, r5
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	425b      	negs	r3, r3
 8000f3e:	1879      	adds	r1, r7, r1
 8000f40:	2201      	movs	r2, #1
 8000f42:	f006 fb05 	bl	8007550 <HAL_SPI_Transmit>
 8000f46:	0003      	movs	r3, r0
 8000f48:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	2201      	movs	r2, #1
 8000f56:	0019      	movs	r1, r3
 8000f58:	f003 f9a1 	bl	800429e <HAL_GPIO_WritePin>

	if(halRet != HAL_OK)
 8000f5c:	197b      	adds	r3, r7, r5
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <W25Q_DisableWrite+0x60>
		return halRet;
 8000f64:	197b      	adds	r3, r7, r5
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	e00e      	b.n	8000f88 <W25Q_DisableWrite+0x7e>

	// Read back written value and confirm
	W25Q_ReadStatusReg(wq, 1);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f000 f80e 	bl	8000f90 <W25Q_ReadStatusReg>

	// Bit 1 of status register 1 should still be 0
	if(wq->writeEnable != 0)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2223      	movs	r2, #35	@ 0x23
 8000f78:	5c9b      	ldrb	r3, [r3, r2]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <W25Q_DisableWrite+0x78>
		return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e002      	b.n	8000f88 <W25Q_DisableWrite+0x7e>

	return halRet;
 8000f82:	230f      	movs	r3, #15
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	781b      	ldrb	r3, [r3, #0]

}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b004      	add	sp, #16
 8000f8e:	bdb0      	pop	{r4, r5, r7, pc}

08000f90 <W25Q_ReadStatusReg>:

HAL_StatusTypeDef W25Q_ReadStatusReg(W25Q *wq, uint8_t regNum) {
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	000a      	movs	r2, r1
 8000f9a:	1cfb      	adds	r3, r7, #3
 8000f9c:	701a      	strb	r2, [r3, #0]

	// Check register number is valid
	if(regNum < 1 || regNum > 3) {
 8000f9e:	1cfb      	adds	r3, r7, #3
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <W25Q_ReadStatusReg+0x1e>
 8000fa6:	1cfb      	adds	r3, r7, #3
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d901      	bls.n	8000fb2 <W25Q_ReadStatusReg+0x22>
		return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e094      	b.n	80010dc <W25Q_ReadStatusReg+0x14c>
	}

	HAL_StatusTypeDef halRet = HAL_OK;
 8000fb2:	2417      	movs	r4, #23
 8000fb4:	193b      	adds	r3, r7, r4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]

	// Array of commands for status registers 1-3
	uint8_t statRegCMDs[3] = {CMD_READ_STAT_1, CMD_READ_STAT_2, CMD_READ_STAT_3};
 8000fba:	2514      	movs	r5, #20
 8000fbc:	197b      	adds	r3, r7, r5
 8000fbe:	4a49      	ldr	r2, [pc, #292]	@ (80010e4 <W25Q_ReadStatusReg+0x154>)
 8000fc0:	8811      	ldrh	r1, [r2, #0]
 8000fc2:	8019      	strh	r1, [r3, #0]
 8000fc4:	7892      	ldrb	r2, [r2, #2]
 8000fc6:	709a      	strb	r2, [r3, #2]

	// TX read status register command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	0019      	movs	r1, r3
 8000fd6:	f003 f962 	bl	800429e <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){statRegCMDs[regNum - 1]}, 1, HAL_MAX_DELAY);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6998      	ldr	r0, [r3, #24]
 8000fde:	1cfb      	adds	r3, r7, #3
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	197a      	adds	r2, r7, r5
 8000fe6:	5cd2      	ldrb	r2, [r2, r3]
 8000fe8:	2110      	movs	r1, #16
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	0025      	movs	r5, r4
 8000ff0:	193c      	adds	r4, r7, r4
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	425b      	negs	r3, r3
 8000ff6:	1879      	adds	r1, r7, r1
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f006 faa9 	bl	8007550 <HAL_SPI_Transmit>
 8000ffe:	0003      	movs	r3, r0
 8001000:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8001002:	197b      	adds	r3, r7, r5
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00b      	beq.n	8001022 <W25Q_ReadStatusReg+0x92>
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	b29b      	uxth	r3, r3
 8001014:	2201      	movs	r2, #1
 8001016:	0019      	movs	r1, r3
 8001018:	f003 f941 	bl	800429e <HAL_GPIO_WritePin>
		return halRet;
 800101c:	197b      	adds	r3, r7, r5
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	e05c      	b.n	80010dc <W25Q_ReadStatusReg+0x14c>
	}

	// RX status register
	uint8_t statRegRet[1] = {0x00};
 8001022:	210c      	movs	r1, #12
 8001024:	187b      	adds	r3, r7, r1
 8001026:	4a30      	ldr	r2, [pc, #192]	@ (80010e8 <W25Q_ReadStatusReg+0x158>)
 8001028:	7812      	ldrb	r2, [r2, #0]
 800102a:	701a      	strb	r2, [r3, #0]
	halRet = HAL_SPI_Receive(wq->hspi, statRegRet, 1, HAL_MAX_DELAY);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6998      	ldr	r0, [r3, #24]
 8001030:	2317      	movs	r3, #23
 8001032:	18fc      	adds	r4, r7, r3
 8001034:	2301      	movs	r3, #1
 8001036:	425b      	negs	r3, r3
 8001038:	1879      	adds	r1, r7, r1
 800103a:	2201      	movs	r2, #1
 800103c:	f006 fbe8 	bl	8007810 <HAL_SPI_Receive>
 8001040:	0003      	movs	r3, r0
 8001042:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	b29b      	uxth	r3, r3
 800104e:	2201      	movs	r2, #1
 8001050:	0019      	movs	r1, r3
 8001052:	f003 f924 	bl	800429e <HAL_GPIO_WritePin>

	switch(regNum) {
 8001056:	1cfb      	adds	r3, r7, #3
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b03      	cmp	r3, #3
 800105c:	d029      	beq.n	80010b2 <W25Q_ReadStatusReg+0x122>
 800105e:	dc3a      	bgt.n	80010d6 <W25Q_ReadStatusReg+0x146>
 8001060:	2b01      	cmp	r3, #1
 8001062:	d002      	beq.n	800106a <W25Q_ReadStatusReg+0xda>
 8001064:	2b02      	cmp	r3, #2
 8001066:	d012      	beq.n	800108e <W25Q_ReadStatusReg+0xfe>
 8001068:	e035      	b.n	80010d6 <W25Q_ReadStatusReg+0x146>
	case 1:
		wq->statReg1 = statRegRet[0];
 800106a:	230c      	movs	r3, #12
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	7819      	ldrb	r1, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2220      	movs	r2, #32
 8001074:	5499      	strb	r1, [r3, r2]
		wq->writeEnable = (wq->statReg1 & 0b00000010) >> 1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2220      	movs	r2, #32
 800107a:	5c9b      	ldrb	r3, [r3, r2]
 800107c:	105b      	asrs	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2201      	movs	r2, #1
 8001082:	4013      	ands	r3, r2
 8001084:	b2d9      	uxtb	r1, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2223      	movs	r2, #35	@ 0x23
 800108a:	5499      	strb	r1, [r3, r2]
		break;
 800108c:	e023      	b.n	80010d6 <W25Q_ReadStatusReg+0x146>
	case 2:
		wq->statReg2 = statRegRet[0];
 800108e:	230c      	movs	r3, #12
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	7819      	ldrb	r1, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2221      	movs	r2, #33	@ 0x21
 8001098:	5499      	strb	r1, [r3, r2]
		wq->quadEnable = (wq->statReg2 & 0b00000010) >> 1;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2221      	movs	r2, #33	@ 0x21
 800109e:	5c9b      	ldrb	r3, [r3, r2]
 80010a0:	105b      	asrs	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2201      	movs	r2, #1
 80010a6:	4013      	ands	r3, r2
 80010a8:	b2d9      	uxtb	r1, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2225      	movs	r2, #37	@ 0x25
 80010ae:	5499      	strb	r1, [r3, r2]
		break;
 80010b0:	e011      	b.n	80010d6 <W25Q_ReadStatusReg+0x146>
	case 3:
		wq->statReg3 = statRegRet[0];
 80010b2:	230c      	movs	r3, #12
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	7819      	ldrb	r1, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2222      	movs	r2, #34	@ 0x22
 80010bc:	5499      	strb	r1, [r3, r2]
		wq->driverStrength = (wq->statReg3 & 0b01100000) >> 5;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2222      	movs	r2, #34	@ 0x22
 80010c2:	5c9b      	ldrb	r3, [r3, r2]
 80010c4:	115b      	asrs	r3, r3, #5
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2203      	movs	r2, #3
 80010ca:	4013      	ands	r3, r2
 80010cc:	b2d9      	uxtb	r1, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2226      	movs	r2, #38	@ 0x26
 80010d2:	5499      	strb	r1, [r3, r2]
		break;
 80010d4:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 80010d6:	2317      	movs	r3, #23
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	781b      	ldrb	r3, [r3, #0]

}
 80010dc:	0018      	movs	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	b006      	add	sp, #24
 80010e2:	bdb0      	pop	{r4, r5, r7, pc}
 80010e4:	080093a8 	.word	0x080093a8
 80010e8:	080093a4 	.word	0x080093a4

080010ec <W25Q_ReadStatusRegs>:

HAL_StatusTypeDef W25Q_ReadStatusRegs(W25Q *wq) {
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80010f4:	230e      	movs	r3, #14
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 1; i <=3; i++) {
 80010fc:	230f      	movs	r3, #15
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	e00d      	b.n	8001122 <W25Q_ReadStatusRegs+0x36>

		W25Q_ReadStatusReg(wq, i);
 8001106:	240f      	movs	r4, #15
 8001108:	193b      	adds	r3, r7, r4
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	0011      	movs	r1, r2
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff ff3d 	bl	8000f90 <W25Q_ReadStatusReg>
	for(uint8_t i = 1; i <=3; i++) {
 8001116:	0021      	movs	r1, r4
 8001118:	187b      	adds	r3, r7, r1
 800111a:	781a      	ldrb	r2, [r3, #0]
 800111c:	187b      	adds	r3, r7, r1
 800111e:	3201      	adds	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	230f      	movs	r3, #15
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b03      	cmp	r3, #3
 800112a:	d9ec      	bls.n	8001106 <W25Q_ReadStatusRegs+0x1a>

	}

	return halRet;
 800112c:	230e      	movs	r3, #14
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	781b      	ldrb	r3, [r3, #0]

}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b005      	add	sp, #20
 8001138:	bd90      	pop	{r4, r7, pc}
	...

0800113c <W25Q_WriteStatusReg>:

HAL_StatusTypeDef W25Q_WriteStatusReg(W25Q *wq, uint8_t regNum, uint8_t regVal) {
 800113c:	b5b0      	push	{r4, r5, r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	0008      	movs	r0, r1
 8001146:	0011      	movs	r1, r2
 8001148:	1cfb      	adds	r3, r7, #3
 800114a:	1c02      	adds	r2, r0, #0
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	1cbb      	adds	r3, r7, #2
 8001150:	1c0a      	adds	r2, r1, #0
 8001152:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8001154:	2513      	movs	r5, #19
 8001156:	197b      	adds	r3, r7, r5
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]

	// Enable Write Access to Memory
	// Write access will disable after status register write
	if(wq->writeEnable != 1) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2223      	movs	r2, #35	@ 0x23
 8001160:	5c9b      	ldrb	r3, [r3, r2]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d00c      	beq.n	8001180 <W25Q_WriteStatusReg+0x44>
		halRet = W25Q_EnableWrite(wq);
 8001166:	197c      	adds	r4, r7, r5
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	0018      	movs	r0, r3
 800116c:	f7ff fe8a 	bl	8000e84 <W25Q_EnableWrite>
 8001170:	0003      	movs	r3, r0
 8001172:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK)
 8001174:	197b      	adds	r3, r7, r5
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <W25Q_WriteStatusReg+0x44>
			return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e08a      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>
	}

	// Array of commands for status registers 1-3
	uint8_t statRegCMDs[3] = {CMD_WRITE_STAT_1, CMD_WRITE_STAT_2, CMD_WRITE_STAT_3};
 8001180:	2410      	movs	r4, #16
 8001182:	193b      	adds	r3, r7, r4
 8001184:	4a46      	ldr	r2, [pc, #280]	@ (80012a0 <W25Q_WriteStatusReg+0x164>)
 8001186:	8811      	ldrh	r1, [r2, #0]
 8001188:	8019      	strh	r1, [r3, #0]
 800118a:	7892      	ldrb	r2, [r2, #2]
 800118c:	709a      	strb	r2, [r3, #2]

	// TX write status reg with value
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	b29b      	uxth	r3, r3
 8001198:	2200      	movs	r2, #0
 800119a:	0019      	movs	r1, r3
 800119c:	f003 f87f 	bl	800429e <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[2]){statRegCMDs[regNum - 1], regVal}, 2, HAL_MAX_DELAY);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6998      	ldr	r0, [r3, #24]
 80011a4:	1cfb      	adds	r3, r7, #3
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	193a      	adds	r2, r7, r4
 80011ac:	5cd2      	ldrb	r2, [r2, r3]
 80011ae:	210c      	movs	r1, #12
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	701a      	strb	r2, [r3, #0]
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	1cba      	adds	r2, r7, #2
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	705a      	strb	r2, [r3, #1]
 80011bc:	2513      	movs	r5, #19
 80011be:	197c      	adds	r4, r7, r5
 80011c0:	2301      	movs	r3, #1
 80011c2:	425b      	negs	r3, r3
 80011c4:	1879      	adds	r1, r7, r1
 80011c6:	2202      	movs	r2, #2
 80011c8:	f006 f9c2 	bl	8007550 <HAL_SPI_Transmit>
 80011cc:	0003      	movs	r3, r0
 80011ce:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	2201      	movs	r2, #1
 80011dc:	0019      	movs	r1, r3
 80011de:	f003 f85e 	bl	800429e <HAL_GPIO_WritePin>

	// WEL bit will now be set back to 0
	halRet = W25Q_ReadStatusReg(wq, 1);
 80011e2:	197c      	adds	r4, r7, r5
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2101      	movs	r1, #1
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7ff fed1 	bl	8000f90 <W25Q_ReadStatusReg>
 80011ee:	0003      	movs	r3, r0
 80011f0:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80011f2:	197b      	adds	r3, r7, r5
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d002      	beq.n	8001200 <W25Q_WriteStatusReg+0xc4>
		return halRet;
 80011fa:	197b      	adds	r3, r7, r5
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	e04a      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>

	// Delay maximum status register write time (15ms), as given by chip datasheet.
	// ~235ns per i
	for(uint32_t i = 0; i < 70000; i++) {
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e003      	b.n	800120e <W25Q_WriteStatusReg+0xd2>
		__NOP();
 8001206:	46c0      	nop			@ (mov r8, r8)
	for(uint32_t i = 0; i < 70000; i++) {
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	3301      	adds	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	4a24      	ldr	r2, [pc, #144]	@ (80012a4 <W25Q_WriteStatusReg+0x168>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d9f7      	bls.n	8001206 <W25Q_WriteStatusReg+0xca>
	}

	if(halRet != HAL_OK)
 8001216:	2213      	movs	r2, #19
 8001218:	18bb      	adds	r3, r7, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <W25Q_WriteStatusReg+0xea>
		return halRet;
 8001220:	18bb      	adds	r3, r7, r2
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	e037      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>

	// Read back written value and confirm
	halRet = W25Q_ReadStatusReg(wq, regNum);
 8001226:	2313      	movs	r3, #19
 8001228:	18fc      	adds	r4, r7, r3
 800122a:	1cfb      	adds	r3, r7, #3
 800122c:	781a      	ldrb	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	0011      	movs	r1, r2
 8001232:	0018      	movs	r0, r3
 8001234:	f7ff feac 	bl	8000f90 <W25Q_ReadStatusReg>
 8001238:	0003      	movs	r3, r0
 800123a:	7023      	strb	r3, [r4, #0]
	switch(regNum) {
 800123c:	1cfb      	adds	r3, r7, #3
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b03      	cmp	r3, #3
 8001242:	d017      	beq.n	8001274 <W25Q_WriteStatusReg+0x138>
 8001244:	dc24      	bgt.n	8001290 <W25Q_WriteStatusReg+0x154>
 8001246:	2b01      	cmp	r3, #1
 8001248:	d002      	beq.n	8001250 <W25Q_WriteStatusReg+0x114>
 800124a:	2b02      	cmp	r3, #2
 800124c:	d009      	beq.n	8001262 <W25Q_WriteStatusReg+0x126>
 800124e:	e01f      	b.n	8001290 <W25Q_WriteStatusReg+0x154>
		case 1:
			if(wq->statReg1 != regVal)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2220      	movs	r2, #32
 8001254:	5c9b      	ldrb	r3, [r3, r2]
 8001256:	1cba      	adds	r2, r7, #2
 8001258:	7812      	ldrb	r2, [r2, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d013      	beq.n	8001286 <W25Q_WriteStatusReg+0x14a>
				return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e019      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>
			break;
		case 2:
			if(wq->statReg2 != regVal)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2221      	movs	r2, #33	@ 0x21
 8001266:	5c9b      	ldrb	r3, [r3, r2]
 8001268:	1cba      	adds	r2, r7, #2
 800126a:	7812      	ldrb	r2, [r2, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d00c      	beq.n	800128a <W25Q_WriteStatusReg+0x14e>
				return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e010      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>
			break;
		case 3:
			if(wq->statReg3 != regVal)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2222      	movs	r2, #34	@ 0x22
 8001278:	5c9b      	ldrb	r3, [r3, r2]
 800127a:	1cba      	adds	r2, r7, #2
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d005      	beq.n	800128e <W25Q_WriteStatusReg+0x152>
				return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e007      	b.n	8001296 <W25Q_WriteStatusReg+0x15a>
			break;
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	e002      	b.n	8001290 <W25Q_WriteStatusReg+0x154>
			break;
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	e000      	b.n	8001290 <W25Q_WriteStatusReg+0x154>
			break;
 800128e:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 8001290:	2313      	movs	r3, #19
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	781b      	ldrb	r3, [r3, #0]


}
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b006      	add	sp, #24
 800129c:	bdb0      	pop	{r4, r5, r7, pc}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	080093ac 	.word	0x080093ac
 80012a4:	0001116f 	.word	0x0001116f

080012a8 <W25Q_readData>:

HAL_StatusTypeDef W25Q_readData(W25Q *wq, uint32_t startAddress, uint32_t dataSize, uint8_t *dataLocation) {
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80012b6:	2417      	movs	r4, #23
 80012b8:	193b      	adds	r3, r7, r4
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]

	// Create read data array with start address
	uint8_t readDataArr[4] = {CMD_READ_DATA, ((startAddress >> 16) & 0xFF), ((startAddress >> 8) & 0xFF), ((startAddress) & 0xFF)};
 80012be:	2510      	movs	r5, #16
 80012c0:	197b      	adds	r3, r7, r5
 80012c2:	2203      	movs	r2, #3
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	0c1b      	lsrs	r3, r3, #16
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	197b      	adds	r3, r7, r5
 80012ce:	705a      	strb	r2, [r3, #1]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	0a1b      	lsrs	r3, r3, #8
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	197b      	adds	r3, r7, r5
 80012d8:	709a      	strb	r2, [r3, #2]
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	197b      	adds	r3, r7, r5
 80012e0:	70da      	strb	r2, [r3, #3]

	// TX read data in single-SPI mode command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	2200      	movs	r2, #0
 80012ee:	0019      	movs	r1, r3
 80012f0:	f002 ffd5 	bl	800429e <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, readDataArr, 4, HAL_MAX_DELAY);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6998      	ldr	r0, [r3, #24]
 80012f8:	0026      	movs	r6, r4
 80012fa:	193c      	adds	r4, r7, r4
 80012fc:	2301      	movs	r3, #1
 80012fe:	425b      	negs	r3, r3
 8001300:	1979      	adds	r1, r7, r5
 8001302:	2204      	movs	r2, #4
 8001304:	f006 f924 	bl	8007550 <HAL_SPI_Transmit>
 8001308:	0003      	movs	r3, r0
 800130a:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 800130c:	19bb      	adds	r3, r7, r6
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00b      	beq.n	800132c <W25Q_readData+0x84>
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	b29b      	uxth	r3, r3
 800131e:	2201      	movs	r2, #1
 8001320:	0019      	movs	r1, r3
 8001322:	f002 ffbc 	bl	800429e <HAL_GPIO_WritePin>
		return halRet;
 8001326:	19bb      	adds	r3, r7, r6
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	e017      	b.n	800135c <W25Q_readData+0xb4>
	}

	// RX data
	halRet = HAL_SPI_Receive(wq->hspi, dataLocation, dataSize, HAL_MAX_DELAY);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6998      	ldr	r0, [r3, #24]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	b29a      	uxth	r2, r3
 8001334:	2517      	movs	r5, #23
 8001336:	197c      	adds	r4, r7, r5
 8001338:	2301      	movs	r3, #1
 800133a:	425b      	negs	r3, r3
 800133c:	6839      	ldr	r1, [r7, #0]
 800133e:	f006 fa67 	bl	8007810 <HAL_SPI_Receive>
 8001342:	0003      	movs	r3, r0
 8001344:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	b29b      	uxth	r3, r3
 8001350:	2201      	movs	r2, #1
 8001352:	0019      	movs	r1, r3
 8001354:	f002 ffa3 	bl	800429e <HAL_GPIO_WritePin>


	return halRet;
 8001358:	197b      	adds	r3, r7, r5
 800135a:	781b      	ldrb	r3, [r3, #0]

}
 800135c:	0018      	movs	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	b007      	add	sp, #28
 8001362:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001364 <W25Q_ChipReset>:
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);

	return halRet;
}

HAL_StatusTypeDef W25Q_ChipReset(W25Q *wq) {
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800136c:	250e      	movs	r5, #14
 800136e:	197b      	adds	r3, r7, r5
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]

	/*
	 * Send both enable reset an reset device commands
	 */
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	b29b      	uxth	r3, r3
 800137e:	2200      	movs	r2, #0
 8001380:	0019      	movs	r1, r3
 8001382:	f002 ff8c 	bl	800429e <HAL_GPIO_WritePin>
	// TX enable reset instruction
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_RESET_ENABLE}, 1, HAL_MAX_DELAY);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6998      	ldr	r0, [r3, #24]
 800138a:	210c      	movs	r1, #12
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2266      	movs	r2, #102	@ 0x66
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	197c      	adds	r4, r7, r5
 8001394:	2301      	movs	r3, #1
 8001396:	425b      	negs	r3, r3
 8001398:	1879      	adds	r1, r7, r1
 800139a:	2201      	movs	r2, #1
 800139c:	f006 f8d8 	bl	8007550 <HAL_SPI_Transmit>
 80013a0:	0003      	movs	r3, r0
 80013a2:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	2201      	movs	r2, #1
 80013b0:	0019      	movs	r1, r3
 80013b2:	f002 ff74 	bl	800429e <HAL_GPIO_WritePin>
	if(halRet != HAL_OK)
 80013b6:	197b      	adds	r3, r7, r5
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <W25Q_ChipReset+0x60>
		return halRet;
 80013be:	197b      	adds	r3, r7, r5
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	e035      	b.n	8001430 <W25Q_ChipReset+0xcc>

	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	2200      	movs	r2, #0
 80013d0:	0019      	movs	r1, r3
 80013d2:	f002 ff64 	bl	800429e <HAL_GPIO_WritePin>
	// TX reset device instruction
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_RESET_DEVICE}, 1, HAL_MAX_DELAY);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6998      	ldr	r0, [r3, #24]
 80013da:	2108      	movs	r1, #8
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	2299      	movs	r2, #153	@ 0x99
 80013e0:	701a      	strb	r2, [r3, #0]
 80013e2:	230e      	movs	r3, #14
 80013e4:	18fc      	adds	r4, r7, r3
 80013e6:	2301      	movs	r3, #1
 80013e8:	425b      	negs	r3, r3
 80013ea:	1879      	adds	r1, r7, r1
 80013ec:	2201      	movs	r2, #1
 80013ee:	f006 f8af 	bl	8007550 <HAL_SPI_Transmit>
 80013f2:	0003      	movs	r3, r0
 80013f4:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	2201      	movs	r2, #1
 8001402:	0019      	movs	r1, r3
 8001404:	f002 ff4b 	bl	800429e <HAL_GPIO_WritePin>

	// Delay at least 30 us
	for(uint8_t i = 0; i < 180; i++) {
 8001408:	230f      	movs	r3, #15
 800140a:	18fb      	adds	r3, r7, r3
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	e006      	b.n	8001420 <W25Q_ChipReset+0xbc>
		__NOP();
 8001412:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < 180; i++) {
 8001414:	210f      	movs	r1, #15
 8001416:	187b      	adds	r3, r7, r1
 8001418:	781a      	ldrb	r2, [r3, #0]
 800141a:	187b      	adds	r3, r7, r1
 800141c:	3201      	adds	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	230f      	movs	r3, #15
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2bb3      	cmp	r3, #179	@ 0xb3
 8001428:	d9f3      	bls.n	8001412 <W25Q_ChipReset+0xae>
	}


	return halRet;
 800142a:	230e      	movs	r3, #14
 800142c:	18fb      	adds	r3, r7, r3
 800142e:	781b      	ldrb	r3, [r3, #0]

}
 8001430:	0018      	movs	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	b004      	add	sp, #16
 8001436:	bdb0      	pop	{r4, r5, r7, pc}

08001438 <W25Q_SetDriverStrength>:

	return halRet;

}

HAL_StatusTypeDef W25Q_SetDriverStrength(W25Q *wq, uint8_t driverStrength) {
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	000a      	movs	r2, r1
 8001442:	1cfb      	adds	r3, r7, #3
 8001444:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8001446:	230f      	movs	r3, #15
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]

	// Check to ensure passed driver strength value lies in range
	if(driverStrength < 0 || driverStrength > 3)
 800144e:	1cfb      	adds	r3, r7, #3
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d901      	bls.n	800145a <W25Q_SetDriverStrength+0x22>
		return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e041      	b.n	80014de <W25Q_SetDriverStrength+0xa6>

	// Read current value in status register 3
	halRet = W25Q_ReadStatusReg(wq, 3);
 800145a:	250f      	movs	r5, #15
 800145c:	197c      	adds	r4, r7, r5
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2103      	movs	r1, #3
 8001462:	0018      	movs	r0, r3
 8001464:	f7ff fd94 	bl	8000f90 <W25Q_ReadStatusReg>
 8001468:	0003      	movs	r3, r0
 800146a:	7023      	strb	r3, [r4, #0]

	// Isolate bits 5-6 and change value to reflect new driver strength
	uint8_t newRegVal = (wq->statReg3) & (0b10011111);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2222      	movs	r2, #34	@ 0x22
 8001470:	5c9a      	ldrb	r2, [r3, r2]
 8001472:	200e      	movs	r0, #14
 8001474:	183b      	adds	r3, r7, r0
 8001476:	2160      	movs	r1, #96	@ 0x60
 8001478:	438a      	bics	r2, r1
 800147a:	701a      	strb	r2, [r3, #0]
	newRegVal = (newRegVal) | (driverStrength << 5);
 800147c:	1cfb      	adds	r3, r7, #3
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	015b      	lsls	r3, r3, #5
 8001482:	b25a      	sxtb	r2, r3
 8001484:	183b      	adds	r3, r7, r0
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b25b      	sxtb	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b25a      	sxtb	r2, r3
 800148e:	183b      	adds	r3, r7, r0
 8001490:	701a      	strb	r2, [r3, #0]

	// Write status register 3 with new value
	halRet = W25Q_WriteStatusReg(wq, 3, newRegVal);
 8001492:	197c      	adds	r4, r7, r5
 8001494:	183b      	adds	r3, r7, r0
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2103      	movs	r1, #3
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff fe4d 	bl	800113c <W25Q_WriteStatusReg>
 80014a2:	0003      	movs	r3, r0
 80014a4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 80014a6:	197b      	adds	r3, r7, r5
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <W25Q_SetDriverStrength+0x7c>
		return halRet;
 80014ae:	197b      	adds	r3, r7, r5
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	e014      	b.n	80014de <W25Q_SetDriverStrength+0xa6>

	// Read back status register 3 and confirm successful write
	halRet = W25Q_ReadStatusReg(wq, 3);
 80014b4:	230f      	movs	r3, #15
 80014b6:	18fc      	adds	r4, r7, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2103      	movs	r1, #3
 80014bc:	0018      	movs	r0, r3
 80014be:	f7ff fd67 	bl	8000f90 <W25Q_ReadStatusReg>
 80014c2:	0003      	movs	r3, r0
 80014c4:	7023      	strb	r3, [r4, #0]
	if(wq->driverStrength != driverStrength)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2226      	movs	r2, #38	@ 0x26
 80014ca:	5c9b      	ldrb	r3, [r3, r2]
 80014cc:	1cfa      	adds	r2, r7, #3
 80014ce:	7812      	ldrb	r2, [r2, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <W25Q_SetDriverStrength+0xa0>
		return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e002      	b.n	80014de <W25Q_SetDriverStrength+0xa6>

	return halRet;
 80014d8:	230f      	movs	r3, #15
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	781b      	ldrb	r3, [r3, #0]

}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b004      	add	sp, #16
 80014e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080014e8 <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b09a      	sub	sp, #104	@ 0x68
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80014f4:	2567      	movs	r5, #103	@ 0x67
 80014f6:	197b      	adds	r3, r7, r5
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 80014fc:	243c      	movs	r4, #60	@ 0x3c
 80014fe:	193b      	adds	r3, r7, r4
 8001500:	0018      	movs	r0, r3
 8001502:	2328      	movs	r3, #40	@ 0x28
 8001504:	001a      	movs	r2, r3
 8001506:	2100      	movs	r1, #0
 8001508:	f007 fef8 	bl	80092fc <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	781a      	ldrb	r2, [r3, #0]
 8001510:	0021      	movs	r1, r4
 8001512:	187b      	adds	r3, r7, r1
 8001514:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	785b      	ldrb	r3, [r3, #1]
 800151a:	3301      	adds	r3, #1
 800151c:	b2da      	uxtb	r2, r3
 800151e:	187b      	adds	r3, r7, r1
 8001520:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	789a      	ldrb	r2, [r3, #2]
 8001526:	187b      	adds	r3, r7, r1
 8001528:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	187b      	adds	r3, r7, r1
 8001530:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	78da      	ldrb	r2, [r3, #3]
 8001536:	187b      	adds	r3, r7, r1
 8001538:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	78da      	ldrb	r2, [r3, #3]
 800153e:	187b      	adds	r3, r7, r1
 8001540:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001542:	0008      	movs	r0, r1
 8001544:	183b      	adds	r3, r7, r0
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800154a:	183b      	adds	r3, r7, r0
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8001550:	183b      	adds	r3, r7, r0
 8001552:	4a19      	ldr	r2, [pc, #100]	@ (80015b8 <initRTCInternalAlarm+0xd0>)
 8001554:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001556:	183b      	adds	r3, r7, r0
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800155c:	183b      	adds	r3, r7, r0
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 8001562:	183b      	adds	r3, r7, r0
 8001564:	2220      	movs	r2, #32
 8001566:	2101      	movs	r1, #1
 8001568:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 800156a:	0001      	movs	r1, r0
 800156c:	187b      	adds	r3, r7, r1
 800156e:	2280      	movs	r2, #128	@ 0x80
 8001570:	0052      	lsls	r2, r2, #1
 8001572:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8001574:	197c      	adds	r4, r7, r5
 8001576:	1879      	adds	r1, r7, r1
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	0018      	movs	r0, r3
 800157e:	f005 fb57 	bl	8006c30 <HAL_RTC_SetAlarm_IT>
 8001582:	0003      	movs	r3, r0
 8001584:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8001586:	197b      	adds	r3, r7, r5
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <initRTCInternalAlarm+0xac>
		return halRet;
 800158e:	197b      	adds	r3, r7, r5
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	e00d      	b.n	80015b0 <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8001594:	2567      	movs	r5, #103	@ 0x67
 8001596:	197c      	adds	r4, r7, r5
 8001598:	2380      	movs	r3, #128	@ 0x80
 800159a:	005a      	lsls	r2, r3, #1
 800159c:	2314      	movs	r3, #20
 800159e:	18f9      	adds	r1, r7, r3
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	2300      	movs	r3, #0
 80015a4:	f005 fc84 	bl	8006eb0 <HAL_RTC_GetAlarm>
 80015a8:	0003      	movs	r3, r0
 80015aa:	7023      	strb	r3, [r4, #0]
	return halRet;
 80015ac:	197b      	adds	r3, r7, r5
 80015ae:	781b      	ldrb	r3, [r3, #0]

}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b01a      	add	sp, #104	@ 0x68
 80015b6:	bdb0      	pop	{r4, r5, r7, pc}
 80015b8:	80800080 	.word	0x80800080

080015bc <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2200      	movs	r2, #0
 80015ce:	0018      	movs	r0, r3
 80015d0:	f005 fa84 	bl	8006adc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	0018      	movs	r0, r3
 80015dc:	f005 fada 	bl	8006b94 <HAL_RTC_GetDate>

}
 80015e0:	46c0      	nop			@ (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b004      	add	sp, #16
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	46de      	mov	lr, fp
 80015ec:	4657      	mov	r7, sl
 80015ee:	464e      	mov	r6, r9
 80015f0:	4645      	mov	r5, r8
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b08f      	sub	sp, #60	@ 0x3c
 80015f6:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015f8:	f002 f8b8 	bl	800376c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015fc:	f000 f9f4 	bl	80019e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001600:	f000 fc46 	bl	8001e90 <MX_GPIO_Init>
  MX_DMA_Init();
 8001604:	f000 fc1e 	bl	8001e44 <MX_DMA_Init>
  MX_RTC_Init();
 8001608:	f000 fabe 	bl	8001b88 <MX_RTC_Init>
  MX_I2C1_Init();
 800160c:	f000 fa52 	bl	8001ab4 <MX_I2C1_Init>
  MX_I2S1_Init();
 8001610:	f000 fa90 	bl	8001b34 <MX_I2S1_Init>
  MX_SPI2_Init();
 8001614:	f000 fb28 	bl	8001c68 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001618:	f000 fb64 	bl	8001ce4 <MX_TIM2_Init>
  MX_TIM14_Init();
 800161c:	f000 fbc2 	bl	8001da4 <MX_TIM14_Init>
  MX_TIM16_Init();
 8001620:	f000 fbe6 	bl	8001df0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	  // HAL Status handle for error-checking
	  HAL_StatusTypeDef halRet = HAL_OK;
 8001624:	2317      	movs	r3, #23
 8001626:	18fb      	adds	r3, r7, r3
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]

	  // Determine which time format we will be using
	  	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 800162c:	4bc7      	ldr	r3, [pc, #796]	@ (800194c <main+0x364>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2210      	movs	r2, #16
 8001632:	0011      	movs	r1, r2
 8001634:	0018      	movs	r0, r3
 8001636:	f002 fe15 	bl	8004264 <HAL_GPIO_ReadPin>
 800163a:	0003      	movs	r3, r0
 800163c:	001a      	movs	r2, r3
 800163e:	4bc4      	ldr	r3, [pc, #784]	@ (8001950 <main+0x368>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d103      	bne.n	800164e <main+0x66>
	  	  userTimeFormat = RTC_HOURFORMAT_12;
 8001646:	4bc3      	ldr	r3, [pc, #780]	@ (8001954 <main+0x36c>)
 8001648:	2240      	movs	r2, #64	@ 0x40
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e002      	b.n	8001654 <main+0x6c>
	  	}
	  	else {
	  	  userTimeFormat = RTC_HOURFORMAT_24;
 800164e:	4bc1      	ldr	r3, [pc, #772]	@ (8001954 <main+0x36c>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
	  	}

  	  // Set Smooth Calibration Value
	  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8001654:	4bc0      	ldr	r3, [pc, #768]	@ (8001958 <main+0x370>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2517      	movs	r5, #23
 800165a:	197c      	adds	r4, r7, r5
 800165c:	2280      	movs	r2, #128	@ 0x80
 800165e:	01d1      	lsls	r1, r2, #7
 8001660:	48be      	ldr	r0, [pc, #760]	@ (800195c <main+0x374>)
 8001662:	2200      	movs	r2, #0
 8001664:	f005 fe19 	bl	800729a <HAL_RTCEx_SetSmoothCalib>
 8001668:	0003      	movs	r3, r0
 800166a:	7023      	strb	r3, [r4, #0]
									RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
	  if(halRet != HAL_OK) {
 800166c:	197b      	adds	r3, r7, r5
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <main+0x90>
		  // Failure to talk to RTC is a hard failure
		  dispFailure();
 8001674:	f001 f98c 	bl	8002990 <dispFailure>
	  }

	  // Init the internal RTC alarm time to track the current time
	  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 8001678:	2517      	movs	r5, #23
 800167a:	197c      	adds	r4, r7, r5
 800167c:	4ab8      	ldr	r2, [pc, #736]	@ (8001960 <main+0x378>)
 800167e:	49b9      	ldr	r1, [pc, #740]	@ (8001964 <main+0x37c>)
 8001680:	4bb6      	ldr	r3, [pc, #728]	@ (800195c <main+0x374>)
 8001682:	0018      	movs	r0, r3
 8001684:	f7ff ff30 	bl	80014e8 <initRTCInternalAlarm>
 8001688:	0003      	movs	r3, r0
 800168a:	7023      	strb	r3, [r4, #0]
	  if(halRet != HAL_OK) {
 800168c:	197b      	adds	r3, r7, r5
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <main+0xb0>
		  // Failure to initialize RTC alarm is a hard failure
		  dispFailure();
 8001694:	f001 f97c 	bl	8002990 <dispFailure>
		}

	  // Initialize all GPIOs to be used with 7 segment display
		sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	009c      	lsls	r4, r3, #2
 800169c:	2380      	movs	r3, #128	@ 0x80
 800169e:	00dd      	lsls	r5, r3, #3
 80016a0:	2680      	movs	r6, #128	@ 0x80
 80016a2:	2340      	movs	r3, #64	@ 0x40
 80016a4:	469c      	mov	ip, r3
 80016a6:	2380      	movs	r3, #128	@ 0x80
 80016a8:	011a      	lsls	r2, r3, #4
 80016aa:	4baf      	ldr	r3, [pc, #700]	@ (8001968 <main+0x380>)
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	4baf      	ldr	r3, [pc, #700]	@ (800196c <main+0x384>)
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	4baf      	ldr	r3, [pc, #700]	@ (8001970 <main+0x388>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	9304      	str	r3, [sp, #16]
 80016b8:	9003      	str	r0, [sp, #12]
 80016ba:	9102      	str	r1, [sp, #8]
 80016bc:	4bad      	ldr	r3, [pc, #692]	@ (8001974 <main+0x38c>)
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	9200      	str	r2, [sp, #0]
 80016c2:	4663      	mov	r3, ip
 80016c4:	0032      	movs	r2, r6
 80016c6:	0029      	movs	r1, r5
 80016c8:	0020      	movs	r0, r4
 80016ca:	f001 faa9 	bl	8002c20 <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


		halRet = updateAndDisplayTime();
 80016ce:	2517      	movs	r5, #23
 80016d0:	197c      	adds	r4, r7, r5
 80016d2:	f000 fce1 	bl	8002098 <updateAndDisplayTime>
 80016d6:	0003      	movs	r3, r0
 80016d8:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 80016da:	197b      	adds	r3, r7, r5
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <main+0xfe>
		  // Failure to display current time is a hard failure
		  dispFailure();
 80016e2:	f001 f955 	bl	8002990 <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

		// Used to separate return initializations into critical and non-critical errors.
		uint8_t initRet = 0;
 80016e6:	2116      	movs	r1, #22
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]

		initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 80016ee:	4b9e      	ldr	r3, [pc, #632]	@ (8001968 <main+0x380>)
 80016f0:	681d      	ldr	r5, [r3, #0]
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4aa0      	ldr	r2, [pc, #640]	@ (8001978 <main+0x390>)
 80016f8:	7812      	ldrb	r2, [r2, #0]
 80016fa:	187c      	adds	r4, r7, r1
 80016fc:	4e9f      	ldr	r6, [pc, #636]	@ (800197c <main+0x394>)
 80016fe:	49a0      	ldr	r1, [pc, #640]	@ (8001980 <main+0x398>)
 8001700:	48a0      	ldr	r0, [pc, #640]	@ (8001984 <main+0x39c>)
 8001702:	9201      	str	r2, [sp, #4]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	0033      	movs	r3, r6
 8001708:	002a      	movs	r2, r5
 800170a:	f7fe fd87 	bl	800021c <capTouch_Init>
 800170e:	0003      	movs	r3, r0
 8001710:	7023      	strb	r3, [r4, #0]
								&capTouchResetPort, capTouchResetPin, capTouchChannels);
		if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 8001712:	2116      	movs	r1, #22
 8001714:	187b      	adds	r3, r7, r1
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d007      	beq.n	800172c <main+0x144>
 800171c:	187b      	adds	r3, r7, r1
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d003      	beq.n	800172c <main+0x144>
 8001724:	187b      	adds	r3, r7, r1
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b04      	cmp	r3, #4
 800172a:	d102      	bne.n	8001732 <main+0x14a>
			/* Critical Errors:
			 * 1 = Failure to read correct device ID
			 * 2 = Failure to read Keys
			 * 3 = Failure to enable keys
			 */
			dispFailure();
 800172c:	f001 f930 	bl	8002990 <dispFailure>
 8001730:	e00d      	b.n	800174e <main+0x166>
		}
		else if (initRet == 2) {
 8001732:	2316      	movs	r3, #22
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d102      	bne.n	8001742 <main+0x15a>
			/*
			 * Non-critical Errors:
			 * 2 = Failure to Recalibrate
			 */
			dispFault();
 800173c:	f001 f918 	bl	8002970 <dispFault>
 8001740:	e005      	b.n	800174e <main+0x166>
		}
		else if(initRet == 0) {
 8001742:	2316      	movs	r3, #22
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d100      	bne.n	800174e <main+0x166>
			// initRet = 0 = all is well
			__NOP();
 800174c:	46c0      	nop			@ (mov r8, r8)
		}

		// Set averaging factor
		uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 800174e:	4b8e      	ldr	r3, [pc, #568]	@ (8001988 <main+0x3a0>)
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	210c      	movs	r1, #12
 8001754:	187b      	adds	r3, r7, r1
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	4b8b      	ldr	r3, [pc, #556]	@ (8001988 <main+0x3a0>)
 800175a:	781a      	ldrb	r2, [r3, #0]
 800175c:	187b      	adds	r3, r7, r1
 800175e:	705a      	strb	r2, [r3, #1]
 8001760:	4b89      	ldr	r3, [pc, #548]	@ (8001988 <main+0x3a0>)
 8001762:	781a      	ldrb	r2, [r3, #0]
 8001764:	187b      	adds	r3, r7, r1
 8001766:	709a      	strb	r2, [r3, #2]
 8001768:	4b87      	ldr	r3, [pc, #540]	@ (8001988 <main+0x3a0>)
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	187b      	adds	r3, r7, r1
 800176e:	70da      	strb	r2, [r3, #3]
 8001770:	187b      	adds	r3, r7, r1
 8001772:	2200      	movs	r2, #0
 8001774:	711a      	strb	r2, [r3, #4]
 8001776:	187b      	adds	r3, r7, r1
 8001778:	2200      	movs	r2, #0
 800177a:	715a      	strb	r2, [r3, #5]
 800177c:	187b      	adds	r3, r7, r1
 800177e:	2200      	movs	r2, #0
 8001780:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8001782:	2517      	movs	r5, #23
 8001784:	197c      	adds	r4, r7, r5
 8001786:	187a      	adds	r2, r7, r1
 8001788:	4b7e      	ldr	r3, [pc, #504]	@ (8001984 <main+0x39c>)
 800178a:	0011      	movs	r1, r2
 800178c:	0018      	movs	r0, r3
 800178e:	f7fe ffb9 	bl	8000704 <capTouch_SetAveragingFactor>
 8001792:	0003      	movs	r3, r0
 8001794:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 8001796:	197b      	adds	r3, r7, r5
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <main+0x1ba>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 800179e:	f001 f8e7 	bl	8002970 <dispFault>
		}

		// Set detection integration factors
		uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 80017a2:	4b7a      	ldr	r3, [pc, #488]	@ (800198c <main+0x3a4>)
 80017a4:	781a      	ldrb	r2, [r3, #0]
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	4b78      	ldr	r3, [pc, #480]	@ (800198c <main+0x3a4>)
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	705a      	strb	r2, [r3, #1]
 80017b2:	4b76      	ldr	r3, [pc, #472]	@ (800198c <main+0x3a4>)
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	709a      	strb	r2, [r3, #2]
 80017ba:	4b74      	ldr	r3, [pc, #464]	@ (800198c <main+0x3a4>)
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	70da      	strb	r2, [r3, #3]
 80017c2:	4b72      	ldr	r3, [pc, #456]	@ (800198c <main+0x3a4>)
 80017c4:	781a      	ldrb	r2, [r3, #0]
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	711a      	strb	r2, [r3, #4]
 80017ca:	4b70      	ldr	r3, [pc, #448]	@ (800198c <main+0x3a4>)
 80017cc:	781a      	ldrb	r2, [r3, #0]
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	715a      	strb	r2, [r3, #5]
 80017d2:	4b6e      	ldr	r3, [pc, #440]	@ (800198c <main+0x3a4>)
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 80017da:	2517      	movs	r5, #23
 80017dc:	197c      	adds	r4, r7, r5
 80017de:	1d3a      	adds	r2, r7, #4
 80017e0:	4b68      	ldr	r3, [pc, #416]	@ (8001984 <main+0x39c>)
 80017e2:	0011      	movs	r1, r2
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff f857 	bl	8000898 <capTouch_SetDetectionIntegrator>
 80017ea:	0003      	movs	r3, r0
 80017ec:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 80017ee:	197b      	adds	r3, r7, r5
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <main+0x212>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 80017f6:	f001 f8bb 	bl	8002970 <dispFault>
		}

		userAlarmToggle = false;			//Default to off
 80017fa:	4b65      	ldr	r3, [pc, #404]	@ (8001990 <main+0x3a8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

		if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8001800:	4b64      	ldr	r3, [pc, #400]	@ (8001994 <main+0x3ac>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b55      	ldr	r3, [pc, #340]	@ (800195c <main+0x374>)
 8001806:	0011      	movs	r1, r2
 8001808:	0018      	movs	r0, r3
 800180a:	f005 fdcd 	bl	80073a8 <HAL_RTCEx_BKUPRead>
 800180e:	0003      	movs	r3, r0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d11c      	bne.n	8001850 <main+0x268>

			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8001816:	4b60      	ldr	r3, [pc, #384]	@ (8001998 <main+0x3b0>)
 8001818:	6819      	ldr	r1, [r3, #0]
 800181a:	4b50      	ldr	r3, [pc, #320]	@ (800195c <main+0x374>)
 800181c:	2201      	movs	r2, #1
 800181e:	0018      	movs	r0, r3
 8001820:	f005 fda5 	bl	800736e <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8001824:	4b5d      	ldr	r3, [pc, #372]	@ (800199c <main+0x3b4>)
 8001826:	6819      	ldr	r1, [r3, #0]
 8001828:	4b4c      	ldr	r3, [pc, #304]	@ (800195c <main+0x374>)
 800182a:	2200      	movs	r2, #0
 800182c:	0018      	movs	r0, r3
 800182e:	f005 fd9e 	bl	800736e <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8001832:	4b5b      	ldr	r3, [pc, #364]	@ (80019a0 <main+0x3b8>)
 8001834:	6819      	ldr	r1, [r3, #0]
 8001836:	4b49      	ldr	r3, [pc, #292]	@ (800195c <main+0x374>)
 8001838:	2200      	movs	r2, #0
 800183a:	0018      	movs	r0, r3
 800183c:	f005 fd97 	bl	800736e <HAL_RTCEx_BKUPWrite>

			// Write backup register with a non-zero value to signify that it has been initialized before
			HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8001840:	4b54      	ldr	r3, [pc, #336]	@ (8001994 <main+0x3ac>)
 8001842:	6819      	ldr	r1, [r3, #0]
 8001844:	2301      	movs	r3, #1
 8001846:	425a      	negs	r2, r3
 8001848:	4b44      	ldr	r3, [pc, #272]	@ (800195c <main+0x374>)
 800184a:	0018      	movs	r0, r3
 800184c:	f005 fd8f 	bl	800736e <HAL_RTCEx_BKUPWrite>

		}

		userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8001850:	4b51      	ldr	r3, [pc, #324]	@ (8001998 <main+0x3b0>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b41      	ldr	r3, [pc, #260]	@ (800195c <main+0x374>)
 8001856:	0011      	movs	r1, r2
 8001858:	0018      	movs	r0, r3
 800185a:	f005 fda5 	bl	80073a8 <HAL_RTCEx_BKUPRead>
 800185e:	0003      	movs	r3, r0
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b50      	ldr	r3, [pc, #320]	@ (80019a4 <main+0x3bc>)
 8001864:	701a      	strb	r2, [r3, #0]
		userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8001866:	4b4d      	ldr	r3, [pc, #308]	@ (800199c <main+0x3b4>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4b3c      	ldr	r3, [pc, #240]	@ (800195c <main+0x374>)
 800186c:	0011      	movs	r1, r2
 800186e:	0018      	movs	r0, r3
 8001870:	f005 fd9a 	bl	80073a8 <HAL_RTCEx_BKUPRead>
 8001874:	0003      	movs	r3, r0
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b4a      	ldr	r3, [pc, #296]	@ (80019a4 <main+0x3bc>)
 800187a:	705a      	strb	r2, [r3, #1]
		userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 800187c:	4b48      	ldr	r3, [pc, #288]	@ (80019a0 <main+0x3b8>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b36      	ldr	r3, [pc, #216]	@ (800195c <main+0x374>)
 8001882:	0011      	movs	r1, r2
 8001884:	0018      	movs	r0, r3
 8001886:	f005 fd8f 	bl	80073a8 <HAL_RTCEx_BKUPRead>
 800188a:	0003      	movs	r3, r0
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b45      	ldr	r3, [pc, #276]	@ (80019a4 <main+0x3bc>)
 8001890:	70da      	strb	r2, [r3, #3]


		// Init Memory Chip
		initRet = W25Q_Init(&spiFlash, nCSPort, nWPPort, nHOLDPort,
 8001892:	4b45      	ldr	r3, [pc, #276]	@ (80019a8 <main+0x3c0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4698      	mov	r8, r3
 8001898:	4b44      	ldr	r3, [pc, #272]	@ (80019ac <main+0x3c4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4699      	mov	r9, r3
 800189e:	4b44      	ldr	r3, [pc, #272]	@ (80019b0 <main+0x3c8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	469a      	mov	sl, r3
 80018a4:	4b43      	ldr	r3, [pc, #268]	@ (80019b4 <main+0x3cc>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b43      	ldr	r3, [pc, #268]	@ (80019b8 <main+0x3d0>)
 80018aa:	6819      	ldr	r1, [r3, #0]
 80018ac:	4b43      	ldr	r3, [pc, #268]	@ (80019bc <main+0x3d4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	469b      	mov	fp, r3
 80018b2:	4843      	ldr	r0, [pc, #268]	@ (80019c0 <main+0x3d8>)
 80018b4:	7800      	ldrb	r0, [r0, #0]
 80018b6:	4c43      	ldr	r4, [pc, #268]	@ (80019c4 <main+0x3dc>)
 80018b8:	7825      	ldrb	r5, [r4, #0]
 80018ba:	4c43      	ldr	r4, [pc, #268]	@ (80019c8 <main+0x3e0>)
 80018bc:	7826      	ldrb	r6, [r4, #0]
 80018be:	2416      	movs	r4, #22
 80018c0:	193c      	adds	r4, r7, r4
 80018c2:	4b42      	ldr	r3, [pc, #264]	@ (80019cc <main+0x3e4>)
 80018c4:	469c      	mov	ip, r3
 80018c6:	9606      	str	r6, [sp, #24]
 80018c8:	9505      	str	r5, [sp, #20]
 80018ca:	9004      	str	r0, [sp, #16]
 80018cc:	4840      	ldr	r0, [pc, #256]	@ (80019d0 <main+0x3e8>)
 80018ce:	9003      	str	r0, [sp, #12]
 80018d0:	465b      	mov	r3, fp
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	9101      	str	r1, [sp, #4]
 80018d6:	9200      	str	r2, [sp, #0]
 80018d8:	4653      	mov	r3, sl
 80018da:	464a      	mov	r2, r9
 80018dc:	4641      	mov	r1, r8
 80018de:	4660      	mov	r0, ip
 80018e0:	f7ff f88c 	bl	80009fc <W25Q_Init>
 80018e4:	0003      	movs	r3, r0
 80018e6:	7023      	strb	r3, [r4, #0]
	    		 nCSPin, nWPPin, nHOLDPin, &hspi2, spiFlash_devID, spiFlash_isQuadChip, spiFlash_driveStrength);

		// Enter error loop if there's an error in initialization
		if( (initRet == 1) || (initRet == 7) ) {
 80018e8:	2216      	movs	r2, #22
 80018ea:	18bb      	adds	r3, r7, r2
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d003      	beq.n	80018fa <main+0x312>
 80018f2:	18bb      	adds	r3, r7, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b07      	cmp	r3, #7
 80018f8:	d102      	bne.n	8001900 <main+0x318>
			/* Critical Errors:
			* 1 = Failure to release chip from power down
			* 7 = Failure to disable write protection
			*/
			dispFailure();
 80018fa:	f001 f849 	bl	8002990 <dispFailure>
 80018fe:	e016      	b.n	800192e <main+0x346>
		}
		else if ( ((initRet >= 2) && (initRet <= 6)) || (initRet == 8) ) {
 8001900:	2216      	movs	r2, #22
 8001902:	18bb      	adds	r3, r7, r2
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d903      	bls.n	8001912 <main+0x32a>
 800190a:	18bb      	adds	r3, r7, r2
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b06      	cmp	r3, #6
 8001910:	d904      	bls.n	800191c <main+0x334>
 8001912:	2316      	movs	r3, #22
 8001914:	18fb      	adds	r3, r7, r3
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b08      	cmp	r3, #8
 800191a:	d102      	bne.n	8001922 <main+0x33a>
			* 2 = Failure to reset chip
			* 3,6,8 = Failure to read status registers
			* 4 = Failure to set driver strength
			* 5 = Failure to read device ID
			*/
			dispFault();
 800191c:	f001 f828 	bl	8002970 <dispFault>
 8001920:	e005      	b.n	800192e <main+0x346>
		}
		else if(initRet == 0) {
 8001922:	2316      	movs	r3, #22
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d100      	bne.n	800192e <main+0x346>
			// initRet = 0 = all is well
			__NOP();
 800192c:	46c0      	nop			@ (mov r8, r8)
		}


		// Init i2s amplifier
		NAU8315YG_Init(&i2sAmp, &hi2s1, i2sAmp_enablePort, i2sAmp_enablePin);
 800192e:	4b29      	ldr	r3, [pc, #164]	@ (80019d4 <main+0x3ec>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4b29      	ldr	r3, [pc, #164]	@ (80019d8 <main+0x3f0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4929      	ldr	r1, [pc, #164]	@ (80019dc <main+0x3f4>)
 8001938:	4829      	ldr	r0, [pc, #164]	@ (80019e0 <main+0x3f8>)
 800193a:	f7ff f81f 	bl	800097c <NAU8315YG_Init>


  while (1)
  {
    /* USER CODE END WHILE */
	  if(beepMode) {
 800193e:	4b29      	ldr	r3, [pc, #164]	@ (80019e4 <main+0x3fc>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0fb      	beq.n	800193e <main+0x356>
		  userAlarmBeep();
 8001946:	f000 fc65 	bl	8002214 <userAlarmBeep>
	  if(beepMode) {
 800194a:	e7f8      	b.n	800193e <main+0x356>
 800194c:	20000008 	.word	0x20000008
 8001950:	20000040 	.word	0x20000040
 8001954:	200000e8 	.word	0x200000e8
 8001958:	2000002c 	.word	0x2000002c
 800195c:	200001d8 	.word	0x200001d8
 8001960:	200000cc 	.word	0x200000cc
 8001964:	200000b8 	.word	0x200000b8
 8001968:	2000006c 	.word	0x2000006c
 800196c:	20000068 	.word	0x20000068
 8001970:	20000030 	.word	0x20000030
 8001974:	20000014 	.word	0x20000014
 8001978:	20000010 	.word	0x20000010
 800197c:	2000000c 	.word	0x2000000c
 8001980:	200000ec 	.word	0x200000ec
 8001984:	20000408 	.word	0x20000408
 8001988:	20000011 	.word	0x20000011
 800198c:	20000012 	.word	0x20000012
 8001990:	200000b5 	.word	0x200000b5
 8001994:	2000003c 	.word	0x2000003c
 8001998:	200000e4 	.word	0x200000e4
 800199c:	20000034 	.word	0x20000034
 80019a0:	20000038 	.word	0x20000038
 80019a4:	200000d0 	.word	0x200000d0
 80019a8:	20000044 	.word	0x20000044
 80019ac:	20000048 	.word	0x20000048
 80019b0:	2000004c 	.word	0x2000004c
 80019b4:	20000050 	.word	0x20000050
 80019b8:	20000054 	.word	0x20000054
 80019bc:	20000058 	.word	0x20000058
 80019c0:	2000005c 	.word	0x2000005c
 80019c4:	2000005d 	.word	0x2000005d
 80019c8:	2000005e 	.word	0x2000005e
 80019cc:	2000041c 	.word	0x2000041c
 80019d0:	20000204 	.word	0x20000204
 80019d4:	20000060 	.word	0x20000060
 80019d8:	20000064 	.word	0x20000064
 80019dc:	20000140 	.word	0x20000140
 80019e0:	20000444 	.word	0x20000444
 80019e4:	20000406 	.word	0x20000406

080019e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b093      	sub	sp, #76	@ 0x4c
 80019ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ee:	2410      	movs	r4, #16
 80019f0:	193b      	adds	r3, r7, r4
 80019f2:	0018      	movs	r0, r3
 80019f4:	2338      	movs	r3, #56	@ 0x38
 80019f6:	001a      	movs	r2, r3
 80019f8:	2100      	movs	r1, #0
 80019fa:	f007 fc7f 	bl	80092fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019fe:	003b      	movs	r3, r7
 8001a00:	0018      	movs	r0, r3
 8001a02:	2310      	movs	r3, #16
 8001a04:	001a      	movs	r2, r3
 8001a06:	2100      	movs	r1, #0
 8001a08:	f007 fc78 	bl	80092fc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a0c:	2380      	movs	r3, #128	@ 0x80
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	0018      	movs	r0, r3
 8001a12:	f003 fdf9 	bl	8005608 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a16:	f003 fde9 	bl	80055ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a1a:	4b25      	ldr	r3, [pc, #148]	@ (8001ab0 <SystemClock_Config+0xc8>)
 8001a1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a1e:	4b24      	ldr	r3, [pc, #144]	@ (8001ab0 <SystemClock_Config+0xc8>)
 8001a20:	2118      	movs	r1, #24
 8001a22:	438a      	bics	r2, r1
 8001a24:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001a26:	193b      	adds	r3, r7, r4
 8001a28:	2205      	movs	r2, #5
 8001a2a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a2c:	193b      	adds	r3, r7, r4
 8001a2e:	2280      	movs	r2, #128	@ 0x80
 8001a30:	0252      	lsls	r2, r2, #9
 8001a32:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a34:	0021      	movs	r1, r4
 8001a36:	187b      	adds	r3, r7, r1
 8001a38:	2201      	movs	r2, #1
 8001a3a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a3c:	187b      	adds	r3, r7, r1
 8001a3e:	2202      	movs	r2, #2
 8001a40:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a42:	187b      	adds	r3, r7, r1
 8001a44:	2203      	movs	r2, #3
 8001a46:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001a48:	187b      	adds	r3, r7, r1
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001a4e:	187b      	adds	r3, r7, r1
 8001a50:	2208      	movs	r2, #8
 8001a52:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	22c0      	movs	r2, #192	@ 0xc0
 8001a58:	02d2      	lsls	r2, r2, #11
 8001a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a5c:	187b      	adds	r3, r7, r1
 8001a5e:	2280      	movs	r2, #128	@ 0x80
 8001a60:	0492      	lsls	r2, r2, #18
 8001a62:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	2280      	movs	r2, #128	@ 0x80
 8001a68:	0592      	lsls	r2, r2, #22
 8001a6a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6c:	187b      	adds	r3, r7, r1
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f003 fe16 	bl	80056a0 <HAL_RCC_OscConfig>
 8001a74:	1e03      	subs	r3, r0, #0
 8001a76:	d001      	beq.n	8001a7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a78:	f001 f8cb 	bl	8002c12 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7c:	003b      	movs	r3, r7
 8001a7e:	2207      	movs	r2, #7
 8001a80:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a82:	003b      	movs	r3, r7
 8001a84:	2202      	movs	r2, #2
 8001a86:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a88:	003b      	movs	r3, r7
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a8e:	003b      	movs	r3, r7
 8001a90:	2200      	movs	r2, #0
 8001a92:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a94:	003b      	movs	r3, r7
 8001a96:	2102      	movs	r1, #2
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f004 f91b 	bl	8005cd4 <HAL_RCC_ClockConfig>
 8001a9e:	1e03      	subs	r3, r0, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001aa2:	f001 f8b6 	bl	8002c12 <Error_Handler>
  }
}
 8001aa6:	46c0      	nop			@ (mov r8, r8)
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b013      	add	sp, #76	@ 0x4c
 8001aac:	bd90      	pop	{r4, r7, pc}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001aba:	4a1c      	ldr	r2, [pc, #112]	@ (8001b2c <MX_I2C1_Init+0x78>)
 8001abc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12166;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b30 <MX_I2C1_Init+0x7c>)
 8001ac2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aca:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad0:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aee:	4b0e      	ldr	r3, [pc, #56]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001af0:	0018      	movs	r0, r3
 8001af2:	f002 fc37 	bl	8004364 <HAL_I2C_Init>
 8001af6:	1e03      	subs	r3, r0, #0
 8001af8:	d001      	beq.n	8001afe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001afa:	f001 f88a 	bl	8002c12 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001afe:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001b00:	2100      	movs	r1, #0
 8001b02:	0018      	movs	r0, r3
 8001b04:	f003 f9da 	bl	8004ebc <HAL_I2CEx_ConfigAnalogFilter>
 8001b08:	1e03      	subs	r3, r0, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b0c:	f001 f881 	bl	8002c12 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b10:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001b12:	2100      	movs	r1, #0
 8001b14:	0018      	movs	r0, r3
 8001b16:	f003 fa1d 	bl	8004f54 <HAL_I2CEx_ConfigDigitalFilter>
 8001b1a:	1e03      	subs	r3, r0, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b1e:	f001 f878 	bl	8002c12 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b22:	46c0      	nop			@ (mov r8, r8)
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200000ec 	.word	0x200000ec
 8001b2c:	40005400 	.word	0x40005400
 8001b30:	00c12166 	.word	0x00c12166

08001b34 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001b38:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <MX_I2S1_Init+0x48>)
 8001b3a:	4a11      	ldr	r2, [pc, #68]	@ (8001b80 <MX_I2S1_Init+0x4c>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <MX_I2S1_Init+0x48>)
 8001b40:	2280      	movs	r2, #128	@ 0x80
 8001b42:	0092      	lsls	r2, r2, #2
 8001b44:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001b46:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <MX_I2S1_Init+0x48>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <MX_I2S1_Init+0x48>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001b52:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <MX_I2S1_Init+0x48>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001b58:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <MX_I2S1_Init+0x48>)
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b84 <MX_I2S1_Init+0x50>)
 8001b5c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8001b5e:	4b07      	ldr	r3, [pc, #28]	@ (8001b7c <MX_I2S1_Init+0x48>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <MX_I2S1_Init+0x48>)
 8001b66:	0018      	movs	r0, r3
 8001b68:	f003 fa40 	bl	8004fec <HAL_I2S_Init>
 8001b6c:	1e03      	subs	r3, r0, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_I2S1_Init+0x40>
  {
    Error_Handler();
 8001b70:	f001 f84f 	bl	8002c12 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8001b74:	46c0      	nop			@ (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			@ (mov r8, r8)
 8001b7c:	20000140 	.word	0x20000140
 8001b80:	40013000 	.word	0x40013000
 8001b84:	0000ac44 	.word	0x0000ac44

08001b88 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	@ 0x28
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 0 */

//  RTC_TimeTypeDef sTime = {0};
//  RTC_DateTypeDef sDate = {0};
  RTC_AlarmTypeDef sAlarm = {0};
 8001b8e:	003b      	movs	r3, r7
 8001b90:	0018      	movs	r0, r3
 8001b92:	2328      	movs	r3, #40	@ 0x28
 8001b94:	001a      	movs	r2, r3
 8001b96:	2100      	movs	r1, #0
 8001b98:	f007 fbb0 	bl	80092fc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c58 <MX_RTC_Init+0xd0>)
 8001b9e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c5c <MX_RTC_Init+0xd4>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c58 <MX_RTC_Init+0xd0>)
 8001ba4:	2240      	movs	r2, #64	@ 0x40
 8001ba6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c58 <MX_RTC_Init+0xd0>)
 8001baa:	227f      	movs	r2, #127	@ 0x7f
 8001bac:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8001bae:	4b2a      	ldr	r3, [pc, #168]	@ (8001c58 <MX_RTC_Init+0xd0>)
 8001bb0:	22ff      	movs	r2, #255	@ 0xff
 8001bb2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bb4:	4b28      	ldr	r3, [pc, #160]	@ (8001c58 <MX_RTC_Init+0xd0>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bba:	4b27      	ldr	r3, [pc, #156]	@ (8001c58 <MX_RTC_Init+0xd0>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bc0:	4b25      	ldr	r3, [pc, #148]	@ (8001c58 <MX_RTC_Init+0xd0>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bc6:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <MX_RTC_Init+0xd0>)
 8001bc8:	2280      	movs	r2, #128	@ 0x80
 8001bca:	05d2      	lsls	r2, r2, #23
 8001bcc:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001bce:	4b22      	ldr	r3, [pc, #136]	@ (8001c58 <MX_RTC_Init+0xd0>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bd4:	4b20      	ldr	r3, [pc, #128]	@ (8001c58 <MX_RTC_Init+0xd0>)
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f004 fe36 	bl	8006848 <HAL_RTC_Init>
 8001bdc:	1e03      	subs	r3, r0, #0
 8001bde:	d001      	beq.n	8001be4 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001be0:	f001 f817 	bl	8002c12 <Error_Handler>
//    Error_Handler();
//  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8001be4:	003b      	movs	r3, r7
 8001be6:	2201      	movs	r2, #1
 8001be8:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001bea:	003b      	movs	r3, r7
 8001bec:	2201      	movs	r2, #1
 8001bee:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001bf0:	003b      	movs	r3, r7
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001bf6:	003b      	movs	r3, r7
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001bfc:	003b      	movs	r3, r7
 8001bfe:	2200      	movs	r2, #0
 8001c00:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c02:	003b      	movs	r3, r7
 8001c04:	2200      	movs	r2, #0
 8001c06:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c08:	003b      	movs	r3, r7
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8001c0e:	003b      	movs	r3, r7
 8001c10:	4a13      	ldr	r2, [pc, #76]	@ (8001c60 <MX_RTC_Init+0xd8>)
 8001c12:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c14:	003b      	movs	r3, r7
 8001c16:	2200      	movs	r2, #0
 8001c18:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c1a:	003b      	movs	r3, r7
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001c20:	003b      	movs	r3, r7
 8001c22:	2220      	movs	r2, #32
 8001c24:	2101      	movs	r1, #1
 8001c26:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c28:	003b      	movs	r3, r7
 8001c2a:	2280      	movs	r2, #128	@ 0x80
 8001c2c:	0052      	lsls	r2, r2, #1
 8001c2e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c30:	0039      	movs	r1, r7
 8001c32:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <MX_RTC_Init+0xd0>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	0018      	movs	r0, r3
 8001c38:	f004 fffa 	bl	8006c30 <HAL_RTC_SetAlarm_IT>
 8001c3c:	1e03      	subs	r3, r0, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8001c40:	f000 ffe7 	bl	8002c12 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8001c44:	4907      	ldr	r1, [pc, #28]	@ (8001c64 <MX_RTC_Init+0xdc>)
 8001c46:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <MX_RTC_Init+0xd0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f004 ff46 	bl	8006adc <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8001c50:	46c0      	nop			@ (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b00a      	add	sp, #40	@ 0x28
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200001d8 	.word	0x200001d8
 8001c5c:	40002800 	.word	0x40002800
 8001c60:	80800080 	.word	0x80800080
 8001c64:	200000b8 	.word	0x200000b8

08001c68 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cdc <MX_SPI2_Init+0x74>)
 8001c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ce0 <MX_SPI2_Init+0x78>)
 8001c70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c72:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <MX_SPI2_Init+0x74>)
 8001c74:	2282      	movs	r2, #130	@ 0x82
 8001c76:	0052      	lsls	r2, r2, #1
 8001c78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c7a:	4b18      	ldr	r3, [pc, #96]	@ (8001cdc <MX_SPI2_Init+0x74>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c80:	4b16      	ldr	r3, [pc, #88]	@ (8001cdc <MX_SPI2_Init+0x74>)
 8001c82:	22e0      	movs	r2, #224	@ 0xe0
 8001c84:	00d2      	lsls	r2, r2, #3
 8001c86:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c88:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <MX_SPI2_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <MX_SPI2_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c94:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <MX_SPI2_Init+0x74>)
 8001c96:	2280      	movs	r2, #128	@ 0x80
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <MX_SPI2_Init+0x74>)
 8001c9e:	2208      	movs	r2, #8
 8001ca0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <MX_SPI2_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <MX_SPI2_Init+0x74>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <MX_SPI2_Init+0x74>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001cb4:	4b09      	ldr	r3, [pc, #36]	@ (8001cdc <MX_SPI2_Init+0x74>)
 8001cb6:	2207      	movs	r2, #7
 8001cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cba:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <MX_SPI2_Init+0x74>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <MX_SPI2_Init+0x74>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cc6:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <MX_SPI2_Init+0x74>)
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f005 fb89 	bl	80073e0 <HAL_SPI_Init>
 8001cce:	1e03      	subs	r3, r0, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001cd2:	f000 ff9e 	bl	8002c12 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000204 	.word	0x20000204
 8001ce0:	40003800 	.word	0x40003800

08001ce4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	@ 0x28
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cea:	231c      	movs	r3, #28
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	0018      	movs	r0, r3
 8001cf0:	230c      	movs	r3, #12
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	f007 fb01 	bl	80092fc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cfa:	003b      	movs	r3, r7
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	231c      	movs	r3, #28
 8001d00:	001a      	movs	r2, r3
 8001d02:	2100      	movs	r1, #0
 8001d04:	f007 fafa 	bl	80092fc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d08:	4b24      	ldr	r3, [pc, #144]	@ (8001d9c <MX_TIM2_Init+0xb8>)
 8001d0a:	2280      	movs	r2, #128	@ 0x80
 8001d0c:	05d2      	lsls	r2, r2, #23
 8001d0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8001d10:	4b22      	ldr	r3, [pc, #136]	@ (8001d9c <MX_TIM2_Init+0xb8>)
 8001d12:	4a23      	ldr	r2, [pc, #140]	@ (8001da0 <MX_TIM2_Init+0xbc>)
 8001d14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d16:	4b21      	ldr	r3, [pc, #132]	@ (8001d9c <MX_TIM2_Init+0xb8>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d9c <MX_TIM2_Init+0xb8>)
 8001d1e:	2263      	movs	r2, #99	@ 0x63
 8001d20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d22:	4b1e      	ldr	r3, [pc, #120]	@ (8001d9c <MX_TIM2_Init+0xb8>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d28:	4b1c      	ldr	r3, [pc, #112]	@ (8001d9c <MX_TIM2_Init+0xb8>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <MX_TIM2_Init+0xb8>)
 8001d30:	0018      	movs	r0, r3
 8001d32:	f006 fbc1 	bl	80084b8 <HAL_TIM_PWM_Init>
 8001d36:	1e03      	subs	r3, r0, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d3a:	f000 ff6a 	bl	8002c12 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3e:	211c      	movs	r1, #28
 8001d40:	187b      	adds	r3, r7, r1
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d46:	187b      	adds	r3, r7, r1
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d4c:	187a      	adds	r2, r7, r1
 8001d4e:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <MX_TIM2_Init+0xb8>)
 8001d50:	0011      	movs	r1, r2
 8001d52:	0018      	movs	r0, r3
 8001d54:	f007 fa52 	bl	80091fc <HAL_TIMEx_MasterConfigSynchronization>
 8001d58:	1e03      	subs	r3, r0, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001d5c:	f000 ff59 	bl	8002c12 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d60:	003b      	movs	r3, r7
 8001d62:	2260      	movs	r2, #96	@ 0x60
 8001d64:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001d66:	003b      	movs	r3, r7
 8001d68:	2200      	movs	r2, #0
 8001d6a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d6c:	003b      	movs	r3, r7
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d72:	003b      	movs	r3, r7
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d78:	0039      	movs	r1, r7
 8001d7a:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <MX_TIM2_Init+0xb8>)
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f006 fdd8 	bl	8008934 <HAL_TIM_PWM_ConfigChannel>
 8001d84:	1e03      	subs	r3, r0, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001d88:	f000 ff43 	bl	8002c12 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d8c:	4b03      	ldr	r3, [pc, #12]	@ (8001d9c <MX_TIM2_Init+0xb8>)
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f001 fc08 	bl	80035a4 <HAL_TIM_MspPostInit>

}
 8001d94:	46c0      	nop			@ (mov r8, r8)
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b00a      	add	sp, #40	@ 0x28
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000320 	.word	0x20000320
 8001da0:	0000031f 	.word	0x0000031f

08001da4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001da8:	4b0e      	ldr	r3, [pc, #56]	@ (8001de4 <MX_TIM14_Init+0x40>)
 8001daa:	4a0f      	ldr	r2, [pc, #60]	@ (8001de8 <MX_TIM14_Init+0x44>)
 8001dac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8001dae:	4b0d      	ldr	r3, [pc, #52]	@ (8001de4 <MX_TIM14_Init+0x40>)
 8001db0:	22f4      	movs	r2, #244	@ 0xf4
 8001db2:	0092      	lsls	r2, r2, #2
 8001db4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db6:	4b0b      	ldr	r3, [pc, #44]	@ (8001de4 <MX_TIM14_Init+0x40>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001dbc:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <MX_TIM14_Init+0x40>)
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8001dec <MX_TIM14_Init+0x48>)
 8001dc0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc2:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <MX_TIM14_Init+0x40>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <MX_TIM14_Init+0x40>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001dce:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <MX_TIM14_Init+0x40>)
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f006 fa25 	bl	8008220 <HAL_TIM_Base_Init>
 8001dd6:	1e03      	subs	r3, r0, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001dda:	f000 ff1a 	bl	8002c12 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001dde:	46c0      	nop			@ (mov r8, r8)
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	2000036c 	.word	0x2000036c
 8001de8:	40002000 	.word	0x40002000
 8001dec:	0000ffff 	.word	0x0000ffff

08001df0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e34 <MX_TIM16_Init+0x44>)
 8001df6:	4a10      	ldr	r2, [pc, #64]	@ (8001e38 <MX_TIM16_Init+0x48>)
 8001df8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 58595;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <MX_TIM16_Init+0x44>)
 8001dfc:	4a0f      	ldr	r2, [pc, #60]	@ (8001e3c <MX_TIM16_Init+0x4c>)
 8001dfe:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <MX_TIM16_Init+0x44>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <MX_TIM16_Init+0x44>)
 8001e08:	4a0d      	ldr	r2, [pc, #52]	@ (8001e40 <MX_TIM16_Init+0x50>)
 8001e0a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <MX_TIM16_Init+0x44>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 10;
 8001e12:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <MX_TIM16_Init+0x44>)
 8001e14:	220a      	movs	r2, #10
 8001e16:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <MX_TIM16_Init+0x44>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e1e:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <MX_TIM16_Init+0x44>)
 8001e20:	0018      	movs	r0, r3
 8001e22:	f006 f9fd 	bl	8008220 <HAL_TIM_Base_Init>
 8001e26:	1e03      	subs	r3, r0, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001e2a:	f000 fef2 	bl	8002c12 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001e2e:	46c0      	nop			@ (mov r8, r8)
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200003b8 	.word	0x200003b8
 8001e38:	40014400 	.word	0x40014400
 8001e3c:	0000e4e3 	.word	0x0000e4e3
 8001e40:	0000ffff 	.word	0x0000ffff

08001e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e4a:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <MX_DMA_Init+0x48>)
 8001e4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <MX_DMA_Init+0x48>)
 8001e50:	2101      	movs	r1, #1
 8001e52:	430a      	orrs	r2, r1
 8001e54:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e56:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <MX_DMA_Init+0x48>)
 8001e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2100      	movs	r1, #0
 8001e66:	2009      	movs	r0, #9
 8001e68:	f001 fdb2 	bl	80039d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e6c:	2009      	movs	r0, #9
 8001e6e:	f001 fdc4 	bl	80039fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	200a      	movs	r0, #10
 8001e78:	f001 fdaa 	bl	80039d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001e7c:	200a      	movs	r0, #10
 8001e7e:	f001 fdbc 	bl	80039fa <HAL_NVIC_EnableIRQ>

}
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b002      	add	sp, #8
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			@ (mov r8, r8)
 8001e8c:	40021000 	.word	0x40021000

08001e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b08b      	sub	sp, #44	@ 0x2c
 8001e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e96:	2414      	movs	r4, #20
 8001e98:	193b      	adds	r3, r7, r4
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	2314      	movs	r3, #20
 8001e9e:	001a      	movs	r2, r3
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	f007 fa2b 	bl	80092fc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea6:	4b76      	ldr	r3, [pc, #472]	@ (8002080 <MX_GPIO_Init+0x1f0>)
 8001ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eaa:	4b75      	ldr	r3, [pc, #468]	@ (8002080 <MX_GPIO_Init+0x1f0>)
 8001eac:	2104      	movs	r1, #4
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eb2:	4b73      	ldr	r3, [pc, #460]	@ (8002080 <MX_GPIO_Init+0x1f0>)
 8001eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ebe:	4b70      	ldr	r3, [pc, #448]	@ (8002080 <MX_GPIO_Init+0x1f0>)
 8001ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ec2:	4b6f      	ldr	r3, [pc, #444]	@ (8002080 <MX_GPIO_Init+0x1f0>)
 8001ec4:	2120      	movs	r1, #32
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eca:	4b6d      	ldr	r3, [pc, #436]	@ (8002080 <MX_GPIO_Init+0x1f0>)
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ece:	2220      	movs	r2, #32
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	4b6a      	ldr	r3, [pc, #424]	@ (8002080 <MX_GPIO_Init+0x1f0>)
 8001ed8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eda:	4b69      	ldr	r3, [pc, #420]	@ (8002080 <MX_GPIO_Init+0x1f0>)
 8001edc:	2101      	movs	r1, #1
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ee2:	4b67      	ldr	r3, [pc, #412]	@ (8002080 <MX_GPIO_Init+0x1f0>)
 8001ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eee:	4b64      	ldr	r3, [pc, #400]	@ (8002080 <MX_GPIO_Init+0x1f0>)
 8001ef0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ef2:	4b63      	ldr	r3, [pc, #396]	@ (8002080 <MX_GPIO_Init+0x1f0>)
 8001ef4:	2102      	movs	r1, #2
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001efa:	4b61      	ldr	r3, [pc, #388]	@ (8002080 <MX_GPIO_Init+0x1f0>)
 8001efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001efe:	2202      	movs	r2, #2
 8001f00:	4013      	ands	r3, r2
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f06:	4b5e      	ldr	r3, [pc, #376]	@ (8002080 <MX_GPIO_Init+0x1f0>)
 8001f08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002080 <MX_GPIO_Init+0x1f0>)
 8001f0c:	2108      	movs	r1, #8
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f12:	4b5b      	ldr	r3, [pc, #364]	@ (8002080 <MX_GPIO_Init+0x1f0>)
 8001f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f16:	2208      	movs	r2, #8
 8001f18:	4013      	ands	r3, r2
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8001f1e:	2382      	movs	r3, #130	@ 0x82
 8001f20:	019b      	lsls	r3, r3, #6
 8001f22:	4858      	ldr	r0, [pc, #352]	@ (8002084 <MX_GPIO_Init+0x1f4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	0019      	movs	r1, r3
 8001f28:	f002 f9b9 	bl	800429e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_MCLR_Pin, GPIO_PIN_SET);
 8001f2c:	238e      	movs	r3, #142	@ 0x8e
 8001f2e:	0119      	lsls	r1, r3, #4
 8001f30:	23a0      	movs	r3, #160	@ 0xa0
 8001f32:	05db      	lsls	r3, r3, #23
 8001f34:	2201      	movs	r2, #1
 8001f36:	0018      	movs	r0, r3
 8001f38:	f002 f9b1 	bl	800429e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_ENABLE_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001f3c:	4952      	ldr	r1, [pc, #328]	@ (8002088 <MX_GPIO_Init+0x1f8>)
 8001f3e:	4b53      	ldr	r3, [pc, #332]	@ (800208c <MX_GPIO_Init+0x1fc>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	0018      	movs	r0, r3
 8001f44:	f002 f9ab 	bl	800429e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin, GPIO_PIN_RESET);
 8001f48:	23c0      	movs	r3, #192	@ 0xc0
 8001f4a:	00d9      	lsls	r1, r3, #3
 8001f4c:	23a0      	movs	r3, #160	@ 0xa0
 8001f4e:	05db      	lsls	r3, r3, #23
 8001f50:	2200      	movs	r2, #0
 8001f52:	0018      	movs	r0, r3
 8001f54:	f002 f9a3 	bl	800429e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAPTOUCH_RESET_GPIO_Port, CAPTOUCH_RESET_Pin, GPIO_PIN_SET);
 8001f58:	2380      	movs	r3, #128	@ 0x80
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	484b      	ldr	r0, [pc, #300]	@ (800208c <MX_GPIO_Init+0x1fc>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	0019      	movs	r1, r3
 8001f62:	f002 f99c 	bl	800429e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|SHIFT_STORE_CLK_Pin;
 8001f66:	193b      	adds	r3, r7, r4
 8001f68:	2282      	movs	r2, #130	@ 0x82
 8001f6a:	0192      	lsls	r2, r2, #6
 8001f6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6e:	193b      	adds	r3, r7, r4
 8001f70:	2201      	movs	r2, #1
 8001f72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	193b      	adds	r3, r7, r4
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	193b      	adds	r3, r7, r4
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f80:	193b      	adds	r3, r7, r4
 8001f82:	4a40      	ldr	r2, [pc, #256]	@ (8002084 <MX_GPIO_Init+0x1f4>)
 8001f84:	0019      	movs	r1, r3
 8001f86:	0010      	movs	r0, r2
 8001f88:	f002 f808 	bl	8003f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CHIP_SELECT_Pin MEM_nWP_Pin MEM_nHOLD_Pin SHIFT_DATA_IN_Pin
                           SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_DATA_IN_Pin
 8001f8c:	0021      	movs	r1, r4
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	22ee      	movs	r2, #238	@ 0xee
 8001f92:	0112      	lsls	r2, r2, #4
 8001f94:	601a      	str	r2, [r3, #0]
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f96:	000c      	movs	r4, r1
 8001f98:	193b      	adds	r3, r7, r4
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	193b      	adds	r3, r7, r4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa4:	193b      	adds	r3, r7, r4
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001faa:	193a      	adds	r2, r7, r4
 8001fac:	23a0      	movs	r3, #160	@ 0xa0
 8001fae:	05db      	lsls	r3, r3, #23
 8001fb0:	0011      	movs	r1, r2
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f001 fff2 	bl	8003f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_ENABLE_Pin DEBUG_LED_Pin CAPTOUCH_RESET_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin;
 8001fb8:	193b      	adds	r3, r7, r4
 8001fba:	4a35      	ldr	r2, [pc, #212]	@ (8002090 <MX_GPIO_Init+0x200>)
 8001fbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbe:	193b      	adds	r3, r7, r4
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	193b      	adds	r3, r7, r4
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	193b      	adds	r3, r7, r4
 8001fcc:	2200      	movs	r2, #0
 8001fce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd0:	193b      	adds	r3, r7, r4
 8001fd2:	4a2e      	ldr	r2, [pc, #184]	@ (800208c <MX_GPIO_Init+0x1fc>)
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	0010      	movs	r0, r2
 8001fd8:	f001 ffe0 	bl	8003f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_SET_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = ALARM_SET_BUTTON_EXTI_Pin;
 8001fdc:	193b      	adds	r3, r7, r4
 8001fde:	2280      	movs	r2, #128	@ 0x80
 8001fe0:	0212      	lsls	r2, r2, #8
 8001fe2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fe4:	193b      	adds	r3, r7, r4
 8001fe6:	2284      	movs	r2, #132	@ 0x84
 8001fe8:	0392      	lsls	r2, r2, #14
 8001fea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fec:	193b      	adds	r3, r7, r4
 8001fee:	2201      	movs	r2, #1
 8001ff0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALARM_SET_BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	193a      	adds	r2, r7, r4
 8001ff4:	23a0      	movs	r3, #160	@ 0xa0
 8001ff6:	05db      	lsls	r3, r3, #23
 8001ff8:	0011      	movs	r1, r2
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f001 ffce 	bl	8003f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_EXTI_Pin MINUTE_SET_BUTTON_EXTI_Pin ALARM_EN_BUTTON_EXTI_Pin DISPLAY_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_EXTI_Pin|MINUTE_SET_BUTTON_EXTI_Pin|ALARM_EN_BUTTON_EXTI_Pin|DISPLAY_BUTTON_EXTI_Pin;
 8002000:	0021      	movs	r1, r4
 8002002:	187b      	adds	r3, r7, r1
 8002004:	220f      	movs	r2, #15
 8002006:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002008:	187b      	adds	r3, r7, r1
 800200a:	2284      	movs	r2, #132	@ 0x84
 800200c:	0392      	lsls	r2, r2, #14
 800200e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002010:	187b      	adds	r3, r7, r1
 8002012:	2201      	movs	r2, #1
 8002014:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002016:	000c      	movs	r4, r1
 8002018:	187b      	adds	r3, r7, r1
 800201a:	4a1e      	ldr	r2, [pc, #120]	@ (8002094 <MX_GPIO_Init+0x204>)
 800201c:	0019      	movs	r1, r3
 800201e:	0010      	movs	r0, r2
 8002020:	f001 ffbc 	bl	8003f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : TIME_SWITCH_EXTI_Pin */
  GPIO_InitStruct.Pin = TIME_SWITCH_EXTI_Pin;
 8002024:	0021      	movs	r1, r4
 8002026:	187b      	adds	r3, r7, r1
 8002028:	2210      	movs	r2, #16
 800202a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800202c:	187b      	adds	r3, r7, r1
 800202e:	22c4      	movs	r2, #196	@ 0xc4
 8002030:	0392      	lsls	r2, r2, #14
 8002032:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002034:	187b      	adds	r3, r7, r1
 8002036:	2201      	movs	r2, #1
 8002038:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TIME_SWITCH_EXTI_GPIO_Port, &GPIO_InitStruct);
 800203a:	187b      	adds	r3, r7, r1
 800203c:	4a13      	ldr	r2, [pc, #76]	@ (800208c <MX_GPIO_Init+0x1fc>)
 800203e:	0019      	movs	r1, r3
 8002040:	0010      	movs	r0, r2
 8002042:	f001 ffab 	bl	8003f9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2101      	movs	r1, #1
 800204a:	2005      	movs	r0, #5
 800204c:	f001 fcc0 	bl	80039d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002050:	2005      	movs	r0, #5
 8002052:	f001 fcd2 	bl	80039fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2102      	movs	r1, #2
 800205a:	2006      	movs	r0, #6
 800205c:	f001 fcb8 	bl	80039d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002060:	2006      	movs	r0, #6
 8002062:	f001 fcca 	bl	80039fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2102      	movs	r1, #2
 800206a:	2007      	movs	r0, #7
 800206c:	f001 fcb0 	bl	80039d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002070:	2007      	movs	r0, #7
 8002072:	f001 fcc2 	bl	80039fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	b00b      	add	sp, #44	@ 0x2c
 800207c:	bd90      	pop	{r4, r7, pc}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	40021000 	.word	0x40021000
 8002084:	50000800 	.word	0x50000800
 8002088:	00001002 	.word	0x00001002
 800208c:	50000400 	.word	0x50000400
 8002090:	00001102 	.word	0x00001102
 8002094:	50000c00 	.word	0x50000c00

08002098 <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800209e:	2317      	movs	r3, #23
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 80020a6:	4a14      	ldr	r2, [pc, #80]	@ (80020f8 <updateAndDisplayTime+0x60>)
 80020a8:	4914      	ldr	r1, [pc, #80]	@ (80020fc <updateAndDisplayTime+0x64>)
 80020aa:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <updateAndDisplayTime+0x68>)
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7ff fa85 	bl	80015bc <getRTCTime>

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 80020b2:	4b14      	ldr	r3, [pc, #80]	@ (8002104 <updateAndDisplayTime+0x6c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10e      	bne.n	80020d8 <updateAndDisplayTime+0x40>

		RTC_TimeTypeDef currTimeMil = conv2Mil(&currTime);
 80020ba:	003b      	movs	r3, r7
 80020bc:	4a0f      	ldr	r2, [pc, #60]	@ (80020fc <updateAndDisplayTime+0x64>)
 80020be:	0011      	movs	r1, r2
 80020c0:	0018      	movs	r0, r3
 80020c2:	f000 fcd1 	bl	8002a68 <conv2Mil>

		sevSeg_updateDigits(&currTimeMil, userAlarmToggle);
 80020c6:	4b10      	ldr	r3, [pc, #64]	@ (8002108 <updateAndDisplayTime+0x70>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	001a      	movs	r2, r3
 80020cc:	003b      	movs	r3, r7
 80020ce:	0011      	movs	r1, r2
 80020d0:	0018      	movs	r0, r3
 80020d2:	f000 fec5 	bl	8002e60 <sevSeg_updateDigits>
 80020d6:	e007      	b.n	80020e8 <updateAndDisplayTime+0x50>

	}
	else {
		sevSeg_updateDigits(&currTime, userAlarmToggle);
 80020d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002108 <updateAndDisplayTime+0x70>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	001a      	movs	r2, r3
 80020de:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <updateAndDisplayTime+0x64>)
 80020e0:	0011      	movs	r1, r2
 80020e2:	0018      	movs	r0, r3
 80020e4:	f000 febc 	bl	8002e60 <sevSeg_updateDigits>
	}

	return halRet;
 80020e8:	2317      	movs	r3, #23
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	781b      	ldrb	r3, [r3, #0]

}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b006      	add	sp, #24
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	200000cc 	.word	0x200000cc
 80020fc:	200000b8 	.word	0x200000b8
 8002100:	200001d8 	.word	0x200001d8
 8002104:	200000e8 	.word	0x200000e8
 8002108:	200000b5 	.word	0x200000b5

0800210c <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8002112:	2317      	movs	r3, #23
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 800211a:	4b11      	ldr	r3, [pc, #68]	@ (8002160 <updateAndDisplayAlarm+0x54>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10e      	bne.n	8002140 <updateAndDisplayAlarm+0x34>

		RTC_TimeTypeDef userAlarmTimeMil = conv2Mil(&userAlarmTime);
 8002122:	003b      	movs	r3, r7
 8002124:	4a0f      	ldr	r2, [pc, #60]	@ (8002164 <updateAndDisplayAlarm+0x58>)
 8002126:	0011      	movs	r1, r2
 8002128:	0018      	movs	r0, r3
 800212a:	f000 fc9d 	bl	8002a68 <conv2Mil>

		sevSeg_updateDigits(&userAlarmTimeMil, userAlarmToggle);
 800212e:	4b0e      	ldr	r3, [pc, #56]	@ (8002168 <updateAndDisplayAlarm+0x5c>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	001a      	movs	r2, r3
 8002134:	003b      	movs	r3, r7
 8002136:	0011      	movs	r1, r2
 8002138:	0018      	movs	r0, r3
 800213a:	f000 fe91 	bl	8002e60 <sevSeg_updateDigits>
 800213e:	e007      	b.n	8002150 <updateAndDisplayAlarm+0x44>

	}
	else {
		sevSeg_updateDigits(&userAlarmTime, userAlarmToggle);
 8002140:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <updateAndDisplayAlarm+0x5c>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	001a      	movs	r2, r3
 8002146:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <updateAndDisplayAlarm+0x58>)
 8002148:	0011      	movs	r1, r2
 800214a:	0018      	movs	r0, r3
 800214c:	f000 fe88 	bl	8002e60 <sevSeg_updateDigits>
	}



	return halRet;
 8002150:	2317      	movs	r3, #23
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	781b      	ldrb	r3, [r3, #0]

}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b006      	add	sp, #24
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			@ (mov r8, r8)
 8002160:	200000e8 	.word	0x200000e8
 8002164:	200000d0 	.word	0x200000d0
 8002168:	200000b5 	.word	0x200000b5

0800216c <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b08d      	sub	sp, #52	@ 0x34
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 8002174:	2408      	movs	r4, #8
 8002176:	193b      	adds	r3, r7, r4
 8002178:	0018      	movs	r0, r3
 800217a:	2328      	movs	r3, #40	@ 0x28
 800217c:	001a      	movs	r2, r3
 800217e:	2100      	movs	r1, #0
 8002180:	f007 f8bc 	bl	80092fc <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8002184:	2380      	movs	r3, #128	@ 0x80
 8002186:	005a      	lsls	r2, r3, #1
 8002188:	1939      	adds	r1, r7, r4
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	2300      	movs	r3, #0
 800218e:	f004 fe8f 	bl	8006eb0 <HAL_RTC_GetAlarm>


	  if(sAlarm.AlarmTime.Minutes>58) {
 8002192:	193b      	adds	r3, r7, r4
 8002194:	785b      	ldrb	r3, [r3, #1]
 8002196:	2b3a      	cmp	r3, #58	@ 0x3a
 8002198:	d903      	bls.n	80021a2 <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 800219a:	193b      	adds	r3, r7, r4
 800219c:	2200      	movs	r2, #0
 800219e:	705a      	strb	r2, [r3, #1]
 80021a0:	e006      	b.n	80021b0 <HAL_RTC_AlarmAEventCallback+0x44>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 80021a2:	2108      	movs	r1, #8
 80021a4:	187b      	adds	r3, r7, r1
 80021a6:	785b      	ldrb	r3, [r3, #1]
 80021a8:	3301      	adds	r3, #1
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	187b      	adds	r3, r7, r1
 80021ae:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 80021b0:	46c0      	nop			@ (mov r8, r8)
 80021b2:	2308      	movs	r3, #8
 80021b4:	18f9      	adds	r1, r7, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	0018      	movs	r0, r3
 80021bc:	f004 fd38 	bl	8006c30 <HAL_RTC_SetAlarm_IT>
 80021c0:	1e03      	subs	r3, r0, #0
 80021c2:	d1f6      	bne.n	80021b2 <HAL_RTC_AlarmAEventCallback+0x46>

	  updateAndDisplayTime();
 80021c4:	f7ff ff68 	bl	8002098 <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 80021c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002204 <HAL_RTC_AlarmAEventCallback+0x98>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d014      	beq.n	80021fa <HAL_RTC_AlarmAEventCallback+0x8e>
 80021d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002208 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80021d2:	781a      	ldrb	r2, [r3, #0]
 80021d4:	4b0d      	ldr	r3, [pc, #52]	@ (800220c <HAL_RTC_AlarmAEventCallback+0xa0>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d10e      	bne.n	80021fa <HAL_RTC_AlarmAEventCallback+0x8e>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 80021dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002208 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80021de:	785a      	ldrb	r2, [r3, #1]
 80021e0:	4b0a      	ldr	r3, [pc, #40]	@ (800220c <HAL_RTC_AlarmAEventCallback+0xa0>)
 80021e2:	785b      	ldrb	r3, [r3, #1]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d108      	bne.n	80021fa <HAL_RTC_AlarmAEventCallback+0x8e>
 80021e8:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80021ea:	78da      	ldrb	r2, [r3, #3]
 80021ec:	4b07      	ldr	r3, [pc, #28]	@ (800220c <HAL_RTC_AlarmAEventCallback+0xa0>)
 80021ee:	78db      	ldrb	r3, [r3, #3]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d102      	bne.n	80021fa <HAL_RTC_AlarmAEventCallback+0x8e>
		  beepMode = true;
 80021f4:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_RTC_AlarmAEventCallback+0xa4>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
	  }


}
 80021fa:	46c0      	nop			@ (mov r8, r8)
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b00d      	add	sp, #52	@ 0x34
 8002200:	bd90      	pop	{r4, r7, pc}
 8002202:	46c0      	nop			@ (mov r8, r8)
 8002204:	200000b5 	.word	0x200000b5
 8002208:	200000d0 	.word	0x200000d0
 800220c:	200000b8 	.word	0x200000b8
 8002210:	20000406 	.word	0x20000406

08002214 <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 800221a:	4b53      	ldr	r3, [pc, #332]	@ (8002368 <userAlarmBeep+0x154>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d02d      	beq.n	800227e <userAlarmBeep+0x6a>

		// Stop the timer and
		HAL_TIM_Base_Stop_IT(timerSnooze);
 8002222:	4b52      	ldr	r3, [pc, #328]	@ (800236c <userAlarmBeep+0x158>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	0018      	movs	r0, r3
 8002228:	f006 f918 	bl	800845c <HAL_TIM_Base_Stop_IT>

		// Reset count to 0
		// only bits 0 - 15 should be changed.
		timerSnooze->Instance->CNT &= 0xFFFF0000;
 800222c:	4b4f      	ldr	r3, [pc, #316]	@ (800236c <userAlarmBeep+0x158>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002234:	4b4d      	ldr	r3, [pc, #308]	@ (800236c <userAlarmBeep+0x158>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	0c12      	lsrs	r2, r2, #16
 800223c:	0412      	lsls	r2, r2, #16
 800223e:	625a      	str	r2, [r3, #36]	@ 0x24

		// Reset interrupt status register
		timerSnooze->Instance->SR &= 0xFFFC;
 8002240:	4b4a      	ldr	r3, [pc, #296]	@ (800236c <userAlarmBeep+0x158>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	4b48      	ldr	r3, [pc, #288]	@ (800236c <userAlarmBeep+0x158>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4948      	ldr	r1, [pc, #288]	@ (8002370 <userAlarmBeep+0x15c>)
 8002250:	400a      	ands	r2, r1
 8002252:	611a      	str	r2, [r3, #16]

		// Re-write RCR with 10
		timerSnooze->Instance->RCR &= 0xFF00;
 8002254:	4b45      	ldr	r3, [pc, #276]	@ (800236c <userAlarmBeep+0x158>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800225c:	4b43      	ldr	r3, [pc, #268]	@ (800236c <userAlarmBeep+0x158>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	22ff      	movs	r2, #255	@ 0xff
 8002264:	0212      	lsls	r2, r2, #8
 8002266:	400a      	ands	r2, r1
 8002268:	631a      	str	r2, [r3, #48]	@ 0x30
		timerSnooze->Instance->RCR |= timerSnooze_RCR;
 800226a:	4b40      	ldr	r3, [pc, #256]	@ (800236c <userAlarmBeep+0x158>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002272:	2164      	movs	r1, #100	@ 0x64
 8002274:	4b3d      	ldr	r3, [pc, #244]	@ (800236c <userAlarmBeep+0x158>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	631a      	str	r2, [r3, #48]	@ 0x30

	}

	HAL_TIM_Base_Stop(timerDelay);
 800227e:	4b3d      	ldr	r3, [pc, #244]	@ (8002374 <userAlarmBeep+0x160>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	0018      	movs	r0, r3
 8002284:	f006 f870 	bl	8008368 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8002288:	4b3a      	ldr	r3, [pc, #232]	@ (8002374 <userAlarmBeep+0x160>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0018      	movs	r0, r3
 800228e:	f006 f81f 	bl	80082d0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8002292:	4b38      	ldr	r3, [pc, #224]	@ (8002374 <userAlarmBeep+0x160>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 800229c:	1cfb      	adds	r3, r7, #3
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]

	// Start audio DMA streams
	startAudioStream();
 80022a2:	f000 fc17 	bl	8002ad4 <startAudioStream>

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 80022a6:	f7ff fef7 	bl	8002098 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 80022aa:	4b32      	ldr	r3, [pc, #200]	@ (8002374 <userAlarmBeep+0x160>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	4a30      	ldr	r2, [pc, #192]	@ (8002378 <userAlarmBeep+0x164>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d91a      	bls.n	80022f2 <userAlarmBeep+0xde>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 80022bc:	1cfb      	adds	r3, r7, #3
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4a2e      	ldr	r2, [pc, #184]	@ (800237c <userAlarmBeep+0x168>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f000 fe7f 	bl	8002fc8 <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80022ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002374 <userAlarmBeep+0x160>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80022d4:	1cfb      	adds	r3, r7, #3
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	1e5a      	subs	r2, r3, #1
 80022da:	4193      	sbcs	r3, r2
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2201      	movs	r2, #1
 80022e0:	4053      	eors	r3, r2
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	001a      	movs	r2, r3
 80022e6:	1cfb      	adds	r3, r7, #3
 80022e8:	701a      	strb	r2, [r3, #0]
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	2101      	movs	r1, #1
 80022ee:	400a      	ands	r2, r1
 80022f0:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 80022f2:	4b23      	ldr	r3, [pc, #140]	@ (8002380 <userAlarmBeep+0x16c>)
 80022f4:	0018      	movs	r0, r3
 80022f6:	f7fe f93d 	bl	8000574 <capTouch_readChannels>

	} while(capTouch.keyStat == 0x00 &&
 80022fa:	4b21      	ldr	r3, [pc, #132]	@ (8002380 <userAlarmBeep+0x16c>)
 80022fc:	7c1b      	ldrb	r3, [r3, #16]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d108      	bne.n	8002314 <userAlarmBeep+0x100>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 8002302:	4b20      	ldr	r3, [pc, #128]	@ (8002384 <userAlarmBeep+0x170>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2204      	movs	r2, #4
 8002308:	0011      	movs	r1, r2
 800230a:	0018      	movs	r0, r3
 800230c:	f001 ffaa 	bl	8004264 <HAL_GPIO_ReadPin>
 8002310:	1e03      	subs	r3, r0, #0
	} while(capTouch.keyStat == 0x00 &&
 8002312:	d1c8      	bne.n	80022a6 <userAlarmBeep+0x92>

	/*
	 * Stop blinking, turn off audio, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 8002314:	4b17      	ldr	r3, [pc, #92]	@ (8002374 <userAlarmBeep+0x160>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	0018      	movs	r0, r3
 800231a:	f006 f825 	bl	8008368 <HAL_TIM_Base_Stop>

	// Stop audio stream
	stopAudioStream();
 800231e:	f000 fbf5 	bl	8002b0c <stopAudioStream>

	updateAndDisplayTime();				// Update to current time and display
 8002322:	f7ff feb9 	bl	8002098 <updateAndDisplayTime>
	sevSeg_setIntensity(sevSeg_intensityDuty[1]);	// Set to 50% duty cycle
 8002326:	2332      	movs	r3, #50	@ 0x32
 8002328:	0018      	movs	r0, r3
 800232a:	f000 fe4d 	bl	8002fc8 <sevSeg_setIntensity>
	displayToggle = 2;								// Set to 2 for future display button ISRs
 800232e:	4b16      	ldr	r3, [pc, #88]	@ (8002388 <userAlarmBeep+0x174>)
 8002330:	2202      	movs	r2, #2
 8002332:	701a      	strb	r2, [r3, #0]


	// If this is the first snooze,
	if(!secondSnooze) {
 8002334:	4b0c      	ldr	r3, [pc, #48]	@ (8002368 <userAlarmBeep+0x154>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2201      	movs	r2, #1
 800233a:	4053      	eors	r3, r2
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <userAlarmBeep+0x140>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 8002342:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <userAlarmBeep+0x158>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	0018      	movs	r0, r3
 8002348:	f006 f834 	bl	80083b4 <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 800234c:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <userAlarmBeep+0x154>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	e002      	b.n	800235a <userAlarmBeep+0x146>
		// Reset flag
		/*
		 * This must be done here because if it's done
		 * in the top conditional, the secondSnooze is always true;
		 */
		secondSnooze = false;
 8002354:	4b04      	ldr	r3, [pc, #16]	@ (8002368 <userAlarmBeep+0x154>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]

	}

	// Reset beepMode bool
	beepMode = false;
 800235a:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <userAlarmBeep+0x178>)
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]

}
 8002360:	46c0      	nop			@ (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b002      	add	sp, #8
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000405 	.word	0x20000405
 800236c:	20000070 	.word	0x20000070
 8002370:	0000fffc 	.word	0x0000fffc
 8002374:	2000006c 	.word	0x2000006c
 8002378:	00007ffe 	.word	0x00007ffe
 800237c:	080093b0 	.word	0x080093b0
 8002380:	20000408 	.word	0x20000408
 8002384:	20000000 	.word	0x20000000
 8002388:	200000b4 	.word	0x200000b4
 800238c:	20000406 	.word	0x20000406

08002390 <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	0002      	movs	r2, r0
 8002398:	1dbb      	adds	r3, r7, #6
 800239a:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 800239c:	2208      	movs	r2, #8
 800239e:	1dbb      	adds	r3, r7, #6
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d106      	bne.n	80023b4 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 80023a6:	230f      	movs	r3, #15
 80023a8:	18fc      	adds	r4, r7, r3
 80023aa:	f000 f86f 	bl	800248c <displayButtonISR>
 80023ae:	0003      	movs	r3, r0
 80023b0:	7023      	strb	r3, [r4, #0]

	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 80023b2:	e03d      	b.n	8002430 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 80023b4:	2204      	movs	r2, #4
 80023b6:	1dbb      	adds	r3, r7, #6
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d106      	bne.n	80023cc <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 80023be:	230f      	movs	r3, #15
 80023c0:	18fc      	adds	r4, r7, r3
 80023c2:	f000 f88b 	bl	80024dc <alarmEnableISR>
 80023c6:	0003      	movs	r3, r0
 80023c8:	7023      	strb	r3, [r4, #0]
}
 80023ca:	e031      	b.n	8002430 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmSetButtonPin) {
 80023cc:	2380      	movs	r3, #128	@ 0x80
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	1dba      	adds	r2, r7, #6
 80023d2:	8812      	ldrh	r2, [r2, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d106      	bne.n	80023e6 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 80023d8:	230f      	movs	r3, #15
 80023da:	18fc      	adds	r4, r7, r3
 80023dc:	f000 f8a8 	bl	8002530 <alarmSetISR>
 80023e0:	0003      	movs	r3, r0
 80023e2:	7023      	strb	r3, [r4, #0]
}
 80023e4:	e024      	b.n	8002430 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == hourSetButtonPin) {
 80023e6:	2201      	movs	r2, #1
 80023e8:	1dbb      	adds	r3, r7, #6
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d106      	bne.n	80023fe <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 80023f0:	230f      	movs	r3, #15
 80023f2:	18fc      	adds	r4, r7, r3
 80023f4:	f000 f95c 	bl	80026b0 <hourSetISR>
 80023f8:	0003      	movs	r3, r0
 80023fa:	7023      	strb	r3, [r4, #0]
}
 80023fc:	e018      	b.n	8002430 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == minuteSetButtonPin) {
 80023fe:	2202      	movs	r2, #2
 8002400:	1dbb      	adds	r3, r7, #6
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	4293      	cmp	r3, r2
 8002406:	d106      	bne.n	8002416 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 8002408:	230f      	movs	r3, #15
 800240a:	18fc      	adds	r4, r7, r3
 800240c:	f000 f97c 	bl	8002708 <minuteSetISR>
 8002410:	0003      	movs	r3, r0
 8002412:	7023      	strb	r3, [r4, #0]
}
 8002414:	e00c      	b.n	8002430 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == timeFormatSwitchPin) {
 8002416:	2210      	movs	r2, #16
 8002418:	1dbb      	adds	r3, r7, #6
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	4293      	cmp	r3, r2
 800241e:	d106      	bne.n	800242e <HAL_GPIO_EXTI_Falling_Callback+0x9e>
		halRet = timeFormatSwitchISR();
 8002420:	230f      	movs	r3, #15
 8002422:	18fc      	adds	r4, r7, r3
 8002424:	f000 f9c2 	bl	80027ac <timeFormatSwitchISR>
 8002428:	0003      	movs	r3, r0
 800242a:	7023      	strb	r3, [r4, #0]
}
 800242c:	e000      	b.n	8002430 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
		__NOP();
 800242e:	46c0      	nop			@ (mov r8, r8)
}
 8002430:	46c0      	nop			@ (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	b005      	add	sp, #20
 8002436:	bd90      	pop	{r4, r7, pc}

08002438 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	0002      	movs	r2, r0
 8002440:	1dbb      	adds	r3, r7, #6
 8002442:	801a      	strh	r2, [r3, #0]

	if(GPIO_Pin == timeFormatSwitchPin) {
 8002444:	2210      	movs	r2, #16
 8002446:	1dbb      	adds	r3, r7, #6
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	4293      	cmp	r3, r2
 800244c:	d101      	bne.n	8002452 <HAL_GPIO_EXTI_Rising_Callback+0x1a>

		timeFormatSwitchISR();
 800244e:	f000 f9ad 	bl	80027ac <timeFormatSwitchISR>

	}

}
 8002452:	46c0      	nop			@ (mov r8, r8)
 8002454:	46bd      	mov	sp, r7
 8002456:	b002      	add	sp, #8
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

	if((htim == timerSnooze) && (secondSnooze == true)) {
 8002464:	4b07      	ldr	r3, [pc, #28]	@ (8002484 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	d105      	bne.n	800247a <HAL_TIM_PeriodElapsedCallback+0x1e>
 800246e:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_TIM_PeriodElapsedCallback+0x1e>

		userAlarmBeep();
 8002476:	f7ff fecd 	bl	8002214 <userAlarmBeep>

	}

}
 800247a:	46c0      	nop			@ (mov r8, r8)
 800247c:	46bd      	mov	sp, r7
 800247e:	b002      	add	sp, #8
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	20000070 	.word	0x20000070
 8002488:	20000405 	.word	0x20000405

0800248c <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8002492:	1dfb      	adds	r3, r7, #7
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 8002498:	f7ff fdfe 	bl	8002098 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 800249c:	4b0d      	ldr	r3, [pc, #52]	@ (80024d4 <displayButtonISR+0x48>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	001a      	movs	r2, r3
 80024a2:	4b0d      	ldr	r3, [pc, #52]	@ (80024d8 <displayButtonISR+0x4c>)
 80024a4:	5c9b      	ldrb	r3, [r3, r2]
 80024a6:	0018      	movs	r0, r3
 80024a8:	f000 fd8e 	bl	8002fc8 <sevSeg_setIntensity>

	if(displayToggle >= 1) {			// Increment display toggle or reset back down to 0;
 80024ac:	4b09      	ldr	r3, [pc, #36]	@ (80024d4 <displayButtonISR+0x48>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <displayButtonISR+0x30>
		displayToggle = 0;
 80024b4:	4b07      	ldr	r3, [pc, #28]	@ (80024d4 <displayButtonISR+0x48>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e005      	b.n	80024c8 <displayButtonISR+0x3c>
	} else {
		displayToggle++;
 80024bc:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <displayButtonISR+0x48>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	3301      	adds	r3, #1
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	4b03      	ldr	r3, [pc, #12]	@ (80024d4 <displayButtonISR+0x48>)
 80024c6:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 80024c8:	1dfb      	adds	r3, r7, #7
 80024ca:	781b      	ldrb	r3, [r3, #0]

}
 80024cc:	0018      	movs	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b002      	add	sp, #8
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	200000b4 	.word	0x200000b4
 80024d8:	080093b0 	.word	0x080093b0

080024dc <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0



	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80024e2:	1dfb      	adds	r3, r7, #7
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 80024e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002528 <alarmEnableISR+0x4c>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2201      	movs	r2, #1
 80024ee:	4053      	eors	r3, r2
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <alarmEnableISR+0x22>

		userAlarmToggle = true;								// Toggle internal flag to true
 80024f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002528 <alarmEnableISR+0x4c>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	e008      	b.n	8002510 <alarmEnableISR+0x34>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 80024fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <alarmEnableISR+0x4c>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <alarmEnableISR+0x32>

		userAlarmToggle = false;							// Toggle internal flag to false
 8002506:	4b08      	ldr	r3, [pc, #32]	@ (8002528 <alarmEnableISR+0x4c>)
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e000      	b.n	8002510 <alarmEnableISR+0x34>
	}
	else {
		__NOP();							//Code should never reach here.
 800250e:	46c0      	nop			@ (mov r8, r8)
	}

	updateAndDisplayTime();				// Update display with correct decimal point
 8002510:	f7ff fdc2 	bl	8002098 <updateAndDisplayTime>

	// Reset snooze time
	secondSnooze = false;
 8002514:	4b05      	ldr	r3, [pc, #20]	@ (800252c <alarmEnableISR+0x50>)
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]

	return halRet;
 800251a:	1dfb      	adds	r3, r7, #7
 800251c:	781b      	ldrb	r3, [r3, #0]

}
 800251e:	0018      	movs	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	b002      	add	sp, #8
 8002524:	bd80      	pop	{r7, pc}
 8002526:	46c0      	nop			@ (mov r8, r8)
 8002528:	200000b5 	.word	0x200000b5
 800252c:	20000405 	.word	0x20000405

08002530 <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 8002536:	1c7b      	adds	r3, r7, #1
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 800253c:	1dfb      	adds	r3, r7, #7
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e01a      	b.n	800257a <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 8002544:	4b55      	ldr	r3, [pc, #340]	@ (800269c <alarmSetISR+0x16c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0018      	movs	r0, r3
 800254a:	f005 ff0d 	bl	8008368 <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 800254e:	4b53      	ldr	r3, [pc, #332]	@ (800269c <alarmSetISR+0x16c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2200      	movs	r2, #0
 8002556:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8002558:	4b50      	ldr	r3, [pc, #320]	@ (800269c <alarmSetISR+0x16c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0018      	movs	r0, r3
 800255e:	f005 feb7 	bl	80082d0 <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 8002562:	4b4e      	ldr	r3, [pc, #312]	@ (800269c <alarmSetISR+0x16c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	4a4d      	ldr	r2, [pc, #308]	@ (80026a0 <alarmSetISR+0x170>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d9f8      	bls.n	8002562 <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 8002570:	1dfb      	adds	r3, r7, #7
 8002572:	781a      	ldrb	r2, [r3, #0]
 8002574:	1dfb      	adds	r3, r7, #7
 8002576:	3201      	adds	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	1dfb      	adds	r3, r7, #7
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d9e0      	bls.n	8002544 <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 8002582:	4b48      	ldr	r3, [pc, #288]	@ (80026a4 <alarmSetISR+0x174>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2280      	movs	r2, #128	@ 0x80
 8002588:	0212      	lsls	r2, r2, #8
 800258a:	0011      	movs	r1, r2
 800258c:	0018      	movs	r0, r3
 800258e:	f001 fe69 	bl	8004264 <HAL_GPIO_ReadPin>
 8002592:	1e03      	subs	r3, r0, #0
 8002594:	d11f      	bne.n	80025d6 <alarmSetISR+0xa6>
		alarmSetMode = true;
 8002596:	4b44      	ldr	r3, [pc, #272]	@ (80026a8 <alarmSetISR+0x178>)
 8002598:	2201      	movs	r2, #1
 800259a:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 800259c:	4b3f      	ldr	r3, [pc, #252]	@ (800269c <alarmSetISR+0x16c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f005 fee1 	bl	8008368 <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 80025a6:	4b3d      	ldr	r3, [pc, #244]	@ (800269c <alarmSetISR+0x16c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2200      	movs	r2, #0
 80025ae:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80025b0:	4b3a      	ldr	r3, [pc, #232]	@ (800269c <alarmSetISR+0x16c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f005 fe8b 	bl	80082d0 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80025ba:	4b38      	ldr	r3, [pc, #224]	@ (800269c <alarmSetISR+0x16c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 80025c6:	1cfb      	adds	r3, r7, #3
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 80025cc:	4b36      	ldr	r3, [pc, #216]	@ (80026a8 <alarmSetISR+0x178>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d059      	beq.n	8002688 <alarmSetISR+0x158>
 80025d4:	e002      	b.n	80025dc <alarmSetISR+0xac>
		return halRet;
 80025d6:	1c7b      	adds	r3, r7, #1
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	e05a      	b.n	8002692 <alarmSetISR+0x162>

		bool displayBlink = false;
 80025dc:	1cbb      	adds	r3, r7, #2
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 80025e2:	4b30      	ldr	r3, [pc, #192]	@ (80026a4 <alarmSetISR+0x174>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2280      	movs	r2, #128	@ 0x80
 80025e8:	0212      	lsls	r2, r2, #8
 80025ea:	0011      	movs	r1, r2
 80025ec:	0018      	movs	r0, r3
 80025ee:	f001 fe39 	bl	8004264 <HAL_GPIO_ReadPin>
 80025f2:	0003      	movs	r3, r0
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d102      	bne.n	80025fe <alarmSetISR+0xce>
				alarmSetButtonReset = true;
 80025f8:	1cfb      	adds	r3, r7, #3
 80025fa:	2201      	movs	r2, #1
 80025fc:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 80025fe:	f7ff fd85 	bl	800210c <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 8002602:	4b26      	ldr	r3, [pc, #152]	@ (800269c <alarmSetISR+0x16c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	1ad2      	subs	r2, r2, r3
 8002610:	2380      	movs	r3, #128	@ 0x80
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	429a      	cmp	r2, r3
 8002616:	d31b      	bcc.n	8002650 <alarmSetISR+0x120>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8002618:	1cbb      	adds	r3, r7, #2
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	4a23      	ldr	r2, [pc, #140]	@ (80026ac <alarmSetISR+0x17c>)
 800261e:	5cd3      	ldrb	r3, [r2, r3]
 8002620:	0018      	movs	r0, r3
 8002622:	f000 fcd1 	bl	8002fc8 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 8002626:	4b1d      	ldr	r3, [pc, #116]	@ (800269c <alarmSetISR+0x16c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 8002632:	1cbb      	adds	r3, r7, #2
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	1e5a      	subs	r2, r3, #1
 8002638:	4193      	sbcs	r3, r2
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2201      	movs	r2, #1
 800263e:	4053      	eors	r3, r2
 8002640:	b2db      	uxtb	r3, r3
 8002642:	001a      	movs	r2, r3
 8002644:	1cbb      	adds	r3, r7, #2
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	2101      	movs	r1, #1
 800264c:	400a      	ands	r2, r1
 800264e:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 8002650:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <alarmSetISR+0x174>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2280      	movs	r2, #128	@ 0x80
 8002656:	0212      	lsls	r2, r2, #8
 8002658:	0011      	movs	r1, r2
 800265a:	0018      	movs	r0, r3
 800265c:	f001 fe02 	bl	8004264 <HAL_GPIO_ReadPin>
 8002660:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 8002662:	d1be      	bne.n	80025e2 <alarmSetISR+0xb2>
 8002664:	1cfb      	adds	r3, r7, #3
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2201      	movs	r2, #1
 800266a:	4053      	eors	r3, r2
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1b7      	bne.n	80025e2 <alarmSetISR+0xb2>

		sevSeg_setIntensity(sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 8002672:	2332      	movs	r3, #50	@ 0x32
 8002674:	0018      	movs	r0, r3
 8002676:	f000 fca7 	bl	8002fc8 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 800267a:	4b08      	ldr	r3, [pc, #32]	@ (800269c <alarmSetISR+0x16c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	0018      	movs	r0, r3
 8002680:	f005 fe72 	bl	8008368 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8002684:	f7ff fd08 	bl	8002098 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8002688:	4b07      	ldr	r3, [pc, #28]	@ (80026a8 <alarmSetISR+0x178>)
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 800268e:	1c7b      	adds	r3, r7, #1
 8002690:	781b      	ldrb	r3, [r3, #0]

}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	b002      	add	sp, #8
 8002698:	bd80      	pop	{r7, pc}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	2000006c 	.word	0x2000006c
 80026a0:	0000fffe 	.word	0x0000fffe
 80026a4:	20000004 	.word	0x20000004
 80026a8:	20000404 	.word	0x20000404
 80026ac:	080093b0 	.word	0x080093b0

080026b0 <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 80026b6:	1dfb      	adds	r3, r7, #7
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80026bc:	4b0e      	ldr	r3, [pc, #56]	@ (80026f8 <hourSetISR+0x48>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <hourSetISR+0x1a>

		alarmHourInc();
 80026c4:	f000 f89a 	bl	80027fc <alarmHourInc>
 80026c8:	e00f      	b.n	80026ea <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 80026ca:	f000 f8c7 	bl	800285c <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80026ce:	490b      	ldr	r1, [pc, #44]	@ (80026fc <hourSetISR+0x4c>)
 80026d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <hourSetISR+0x50>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	0018      	movs	r0, r3
 80026d6:	f004 f959 	bl	800698c <HAL_RTC_SetTime>

		updateAndDisplayTime();
 80026da:	f7ff fcdd 	bl	8002098 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 80026de:	4a09      	ldr	r2, [pc, #36]	@ (8002704 <hourSetISR+0x54>)
 80026e0:	4906      	ldr	r1, [pc, #24]	@ (80026fc <hourSetISR+0x4c>)
 80026e2:	4b07      	ldr	r3, [pc, #28]	@ (8002700 <hourSetISR+0x50>)
 80026e4:	0018      	movs	r0, r3
 80026e6:	f7fe ff69 	bl	80015bc <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 80026ea:	1dfb      	adds	r3, r7, #7
 80026ec:	781b      	ldrb	r3, [r3, #0]

}
 80026ee:	0018      	movs	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b002      	add	sp, #8
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			@ (mov r8, r8)
 80026f8:	20000404 	.word	0x20000404
 80026fc:	200000b8 	.word	0x200000b8
 8002700:	200001d8 	.word	0x200001d8
 8002704:	200000cc 	.word	0x200000cc

08002708 <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b08c      	sub	sp, #48	@ 0x30
 800270c:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 800270e:	232f      	movs	r3, #47	@ 0x2f
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8002716:	4b21      	ldr	r3, [pc, #132]	@ (800279c <minuteSetISR+0x94>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <minuteSetISR+0x1c>

		alarmMinuteInc();
 800271e:	f000 f8dd 	bl	80028dc <alarmMinuteInc>
 8002722:	e034      	b.n	800278e <minuteSetISR+0x86>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8002724:	f000 f8f8 	bl	8002918 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8002728:	491d      	ldr	r1, [pc, #116]	@ (80027a0 <minuteSetISR+0x98>)
 800272a:	4b1e      	ldr	r3, [pc, #120]	@ (80027a4 <minuteSetISR+0x9c>)
 800272c:	2200      	movs	r2, #0
 800272e:	0018      	movs	r0, r3
 8002730:	f004 f92c 	bl	800698c <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 8002734:	1d3b      	adds	r3, r7, #4
 8002736:	0018      	movs	r0, r3
 8002738:	2328      	movs	r3, #40	@ 0x28
 800273a:	001a      	movs	r2, r3
 800273c:	2100      	movs	r1, #0
 800273e:	f006 fddd 	bl	80092fc <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8002742:	2380      	movs	r3, #128	@ 0x80
 8002744:	005a      	lsls	r2, r3, #1
 8002746:	1d39      	adds	r1, r7, #4
 8002748:	4816      	ldr	r0, [pc, #88]	@ (80027a4 <minuteSetISR+0x9c>)
 800274a:	2300      	movs	r3, #0
 800274c:	f004 fbb0 	bl	8006eb0 <HAL_RTC_GetAlarm>

		if(sAlarm.AlarmTime.Minutes>58) {
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	785b      	ldrb	r3, [r3, #1]
 8002754:	2b3a      	cmp	r3, #58	@ 0x3a
 8002756:	d903      	bls.n	8002760 <minuteSetISR+0x58>
			sAlarm.AlarmTime.Minutes=0;
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	2200      	movs	r2, #0
 800275c:	705a      	strb	r2, [r3, #1]
 800275e:	e005      	b.n	800276c <minuteSetISR+0x64>
			//printf("Reset alarm time\n\r");
		} else {
			sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	785b      	ldrb	r3, [r3, #1]
 8002764:	3301      	adds	r3, #1
 8002766:	b2da      	uxtb	r2, r3
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 800276c:	46c0      	nop			@ (mov r8, r8)
 800276e:	1d39      	adds	r1, r7, #4
 8002770:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <minuteSetISR+0x9c>)
 8002772:	2200      	movs	r2, #0
 8002774:	0018      	movs	r0, r3
 8002776:	f004 fa5b 	bl	8006c30 <HAL_RTC_SetAlarm_IT>
 800277a:	1e03      	subs	r3, r0, #0
 800277c:	d1f7      	bne.n	800276e <minuteSetISR+0x66>

		updateAndDisplayTime();
 800277e:	f7ff fc8b 	bl	8002098 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8002782:	4a09      	ldr	r2, [pc, #36]	@ (80027a8 <minuteSetISR+0xa0>)
 8002784:	4906      	ldr	r1, [pc, #24]	@ (80027a0 <minuteSetISR+0x98>)
 8002786:	4b07      	ldr	r3, [pc, #28]	@ (80027a4 <minuteSetISR+0x9c>)
 8002788:	0018      	movs	r0, r3
 800278a:	f7fe ff17 	bl	80015bc <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 800278e:	232f      	movs	r3, #47	@ 0x2f
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	781b      	ldrb	r3, [r3, #0]
}
 8002794:	0018      	movs	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	b00c      	add	sp, #48	@ 0x30
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000404 	.word	0x20000404
 80027a0:	200000b8 	.word	0x200000b8
 80027a4:	200001d8 	.word	0x200001d8
 80027a8:	200000cc 	.word	0x200000cc

080027ac <timeFormatSwitchISR>:

/*
 * Switch hour format (12 or 24 hr)
 */
HAL_StatusTypeDef timeFormatSwitchISR(void) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80027b2:	1dfb      	adds	r3, r7, #7
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]

	// Determine which time format we will be using
	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 80027b8:	4b0d      	ldr	r3, [pc, #52]	@ (80027f0 <timeFormatSwitchISR+0x44>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2210      	movs	r2, #16
 80027be:	0011      	movs	r1, r2
 80027c0:	0018      	movs	r0, r3
 80027c2:	f001 fd4f 	bl	8004264 <HAL_GPIO_ReadPin>
 80027c6:	0003      	movs	r3, r0
 80027c8:	001a      	movs	r2, r3
 80027ca:	4b0a      	ldr	r3, [pc, #40]	@ (80027f4 <timeFormatSwitchISR+0x48>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d103      	bne.n	80027da <timeFormatSwitchISR+0x2e>
	  userTimeFormat = RTC_HOURFORMAT_12;
 80027d2:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <timeFormatSwitchISR+0x4c>)
 80027d4:	2240      	movs	r2, #64	@ 0x40
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	e002      	b.n	80027e0 <timeFormatSwitchISR+0x34>
	}
	else {
	  userTimeFormat = RTC_HOURFORMAT_24;
 80027da:	4b07      	ldr	r3, [pc, #28]	@ (80027f8 <timeFormatSwitchISR+0x4c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
	}

	updateAndDisplayTime();
 80027e0:	f7ff fc5a 	bl	8002098 <updateAndDisplayTime>

	return halRet;
 80027e4:	1dfb      	adds	r3, r7, #7
 80027e6:	781b      	ldrb	r3, [r3, #0]

}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b002      	add	sp, #8
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000008 	.word	0x20000008
 80027f4:	20000040 	.word	0x20000040
 80027f8:	200000e8 	.word	0x200000e8

080027fc <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8002800:	4b15      	ldr	r3, [pc, #84]	@ (8002858 <alarmHourInc+0x5c>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b0b      	cmp	r3, #11
 8002806:	d903      	bls.n	8002810 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8002808:	4b13      	ldr	r3, [pc, #76]	@ (8002858 <alarmHourInc+0x5c>)
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	e01e      	b.n	800284e <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8002810:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <alarmHourInc+0x5c>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b0b      	cmp	r3, #11
 8002816:	d10e      	bne.n	8002836 <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8002818:	4b0f      	ldr	r3, [pc, #60]	@ (8002858 <alarmHourInc+0x5c>)
 800281a:	78db      	ldrb	r3, [r3, #3]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d103      	bne.n	8002828 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8002820:	4b0d      	ldr	r3, [pc, #52]	@ (8002858 <alarmHourInc+0x5c>)
 8002822:	2201      	movs	r2, #1
 8002824:	70da      	strb	r2, [r3, #3]
 8002826:	e002      	b.n	800282e <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002828:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <alarmHourInc+0x5c>)
 800282a:	2200      	movs	r2, #0
 800282c:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 800282e:	4b0a      	ldr	r3, [pc, #40]	@ (8002858 <alarmHourInc+0x5c>)
 8002830:	220c      	movs	r2, #12
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	e00b      	b.n	800284e <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 8002836:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <alarmHourInc+0x5c>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b0a      	cmp	r3, #10
 800283c:	d806      	bhi.n	800284c <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 800283e:	4b06      	ldr	r3, [pc, #24]	@ (8002858 <alarmHourInc+0x5c>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	3301      	adds	r3, #1
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4b04      	ldr	r3, [pc, #16]	@ (8002858 <alarmHourInc+0x5c>)
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	e000      	b.n	800284e <alarmHourInc+0x52>
	}
	else {
		__NOP();
 800284c:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 800284e:	f000 f8e1 	bl	8002a14 <updateRTCBackupReg>

}
 8002852:	46c0      	nop			@ (mov r8, r8)
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	200000d0 	.word	0x200000d0

0800285c <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8002860:	4a1a      	ldr	r2, [pc, #104]	@ (80028cc <currHourInc+0x70>)
 8002862:	491b      	ldr	r1, [pc, #108]	@ (80028d0 <currHourInc+0x74>)
 8002864:	4b1b      	ldr	r3, [pc, #108]	@ (80028d4 <currHourInc+0x78>)
 8002866:	0018      	movs	r0, r3
 8002868:	f7fe fea8 	bl	80015bc <getRTCTime>

	if(currTime.Hours >= 12) {
 800286c:	4b18      	ldr	r3, [pc, #96]	@ (80028d0 <currHourInc+0x74>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b0b      	cmp	r3, #11
 8002872:	d903      	bls.n	800287c <currHourInc+0x20>
		currTime.Hours = 1;
 8002874:	4b16      	ldr	r3, [pc, #88]	@ (80028d0 <currHourInc+0x74>)
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	e01e      	b.n	80028ba <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 800287c:	4b14      	ldr	r3, [pc, #80]	@ (80028d0 <currHourInc+0x74>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b0b      	cmp	r3, #11
 8002882:	d10e      	bne.n	80028a2 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8002884:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <currHourInc+0x74>)
 8002886:	78db      	ldrb	r3, [r3, #3]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d103      	bne.n	8002894 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800288c:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <currHourInc+0x74>)
 800288e:	2201      	movs	r2, #1
 8002890:	70da      	strb	r2, [r3, #3]
 8002892:	e002      	b.n	800289a <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002894:	4b0e      	ldr	r3, [pc, #56]	@ (80028d0 <currHourInc+0x74>)
 8002896:	2200      	movs	r2, #0
 8002898:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 800289a:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <currHourInc+0x74>)
 800289c:	220c      	movs	r2, #12
 800289e:	701a      	strb	r2, [r3, #0]
 80028a0:	e00b      	b.n	80028ba <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 80028a2:	4b0d      	ldr	r3, [pc, #52]	@ (80028d8 <currHourInc+0x7c>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b0a      	cmp	r3, #10
 80028a8:	d806      	bhi.n	80028b8 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 80028aa:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <currHourInc+0x74>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	3301      	adds	r3, #1
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4b07      	ldr	r3, [pc, #28]	@ (80028d0 <currHourInc+0x74>)
 80028b4:	701a      	strb	r2, [r3, #0]
 80028b6:	e000      	b.n	80028ba <currHourInc+0x5e>
	}
	else {
		__NOP();
 80028b8:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 80028ba:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <currHourInc+0x74>)
 80028bc:	2200      	movs	r2, #0
 80028be:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 80028c0:	4b03      	ldr	r3, [pc, #12]	@ (80028d0 <currHourInc+0x74>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]

}
 80028c6:	46c0      	nop			@ (mov r8, r8)
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	200000cc 	.word	0x200000cc
 80028d0:	200000b8 	.word	0x200000b8
 80028d4:	200001d8 	.word	0x200001d8
 80028d8:	200000d0 	.word	0x200000d0

080028dc <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 80028e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002914 <alarmMinuteInc+0x38>)
 80028e2:	785b      	ldrb	r3, [r3, #1]
 80028e4:	2b3a      	cmp	r3, #58	@ 0x3a
 80028e6:	d903      	bls.n	80028f0 <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 80028e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002914 <alarmMinuteInc+0x38>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	705a      	strb	r2, [r3, #1]
 80028ee:	e00b      	b.n	8002908 <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 80028f0:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <alarmMinuteInc+0x38>)
 80028f2:	785b      	ldrb	r3, [r3, #1]
 80028f4:	2b3a      	cmp	r3, #58	@ 0x3a
 80028f6:	d806      	bhi.n	8002906 <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 80028f8:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <alarmMinuteInc+0x38>)
 80028fa:	785b      	ldrb	r3, [r3, #1]
 80028fc:	3301      	adds	r3, #1
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	4b04      	ldr	r3, [pc, #16]	@ (8002914 <alarmMinuteInc+0x38>)
 8002902:	705a      	strb	r2, [r3, #1]
 8002904:	e000      	b.n	8002908 <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 8002906:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8002908:	f000 f884 	bl	8002a14 <updateRTCBackupReg>

}
 800290c:	46c0      	nop			@ (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	200000d0 	.word	0x200000d0

08002918 <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 800291c:	4a11      	ldr	r2, [pc, #68]	@ (8002964 <currMinuteInc+0x4c>)
 800291e:	4912      	ldr	r1, [pc, #72]	@ (8002968 <currMinuteInc+0x50>)
 8002920:	4b12      	ldr	r3, [pc, #72]	@ (800296c <currMinuteInc+0x54>)
 8002922:	0018      	movs	r0, r3
 8002924:	f7fe fe4a 	bl	80015bc <getRTCTime>

	if(currTime.Minutes >= 59) {
 8002928:	4b0f      	ldr	r3, [pc, #60]	@ (8002968 <currMinuteInc+0x50>)
 800292a:	785b      	ldrb	r3, [r3, #1]
 800292c:	2b3a      	cmp	r3, #58	@ 0x3a
 800292e:	d903      	bls.n	8002938 <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 8002930:	4b0d      	ldr	r3, [pc, #52]	@ (8002968 <currMinuteInc+0x50>)
 8002932:	2200      	movs	r2, #0
 8002934:	705a      	strb	r2, [r3, #1]
 8002936:	e00b      	b.n	8002950 <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 8002938:	4b0b      	ldr	r3, [pc, #44]	@ (8002968 <currMinuteInc+0x50>)
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	2b3a      	cmp	r3, #58	@ 0x3a
 800293e:	d806      	bhi.n	800294e <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 8002940:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <currMinuteInc+0x50>)
 8002942:	785b      	ldrb	r3, [r3, #1]
 8002944:	3301      	adds	r3, #1
 8002946:	b2da      	uxtb	r2, r3
 8002948:	4b07      	ldr	r3, [pc, #28]	@ (8002968 <currMinuteInc+0x50>)
 800294a:	705a      	strb	r2, [r3, #1]
 800294c:	e000      	b.n	8002950 <currMinuteInc+0x38>
	}
	else {
		__NOP();
 800294e:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8002950:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <currMinuteInc+0x50>)
 8002952:	2200      	movs	r2, #0
 8002954:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8002956:	4b04      	ldr	r3, [pc, #16]	@ (8002968 <currMinuteInc+0x50>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]

}
 800295c:	46c0      	nop			@ (mov r8, r8)
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	200000cc 	.word	0x200000cc
 8002968:	200000b8 	.word	0x200000b8
 800296c:	200001d8 	.word	0x200001d8

08002970 <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 8002974:	4b05      	ldr	r3, [pc, #20]	@ (800298c <dispFault+0x1c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2280      	movs	r2, #128	@ 0x80
 800297a:	0151      	lsls	r1, r2, #5
 800297c:	2201      	movs	r2, #1
 800297e:	0018      	movs	r0, r3
 8002980:	f001 fc8d 	bl	800429e <HAL_GPIO_WritePin>
}
 8002984:	46c0      	nop			@ (mov r8, r8)
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	20000028 	.word	0x20000028

08002990 <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8002996:	4b1c      	ldr	r3, [pc, #112]	@ (8002a08 <dispFailure+0x78>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	0018      	movs	r0, r3
 800299c:	f005 fce4 	bl	8008368 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 80029a0:	4b19      	ldr	r3, [pc, #100]	@ (8002a08 <dispFailure+0x78>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0018      	movs	r0, r3
 80029a6:	f005 fc93 	bl	80082d0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80029aa:	4b17      	ldr	r3, [pc, #92]	@ (8002a08 <dispFailure+0x78>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b2:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80029b4:	1cfb      	adds	r3, r7, #3
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 80029ba:	4b13      	ldr	r3, [pc, #76]	@ (8002a08 <dispFailure+0x78>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	4a11      	ldr	r2, [pc, #68]	@ (8002a0c <dispFailure+0x7c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d9f6      	bls.n	80029ba <dispFailure+0x2a>

			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 80029cc:	4b10      	ldr	r3, [pc, #64]	@ (8002a10 <dispFailure+0x80>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2280      	movs	r2, #128	@ 0x80
 80029d2:	0152      	lsls	r2, r2, #5
 80029d4:	0011      	movs	r1, r2
 80029d6:	0018      	movs	r0, r3
 80029d8:	f001 fc7e 	bl	80042d8 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80029dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a08 <dispFailure+0x78>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e4:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80029e6:	1cfb      	adds	r3, r7, #3
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	1e5a      	subs	r2, r3, #1
 80029ec:	4193      	sbcs	r3, r2
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2201      	movs	r2, #1
 80029f2:	4053      	eors	r3, r2
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	001a      	movs	r2, r3
 80029f8:	1cfb      	adds	r3, r7, #3
 80029fa:	701a      	strb	r2, [r3, #0]
 80029fc:	781a      	ldrb	r2, [r3, #0]
 80029fe:	2101      	movs	r1, #1
 8002a00:	400a      	ands	r2, r1
 8002a02:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8002a04:	e7d9      	b.n	80029ba <dispFailure+0x2a>
 8002a06:	46c0      	nop			@ (mov r8, r8)
 8002a08:	2000006c 	.word	0x2000006c
 8002a0c:	00003ffe 	.word	0x00003ffe
 8002a10:	20000028 	.word	0x20000028

08002a14 <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8002a18:	4b0e      	ldr	r3, [pc, #56]	@ (8002a54 <updateRTCBackupReg+0x40>)
 8002a1a:	6819      	ldr	r1, [r3, #0]
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <updateRTCBackupReg+0x44>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	001a      	movs	r2, r3
 8002a22:	4b0e      	ldr	r3, [pc, #56]	@ (8002a5c <updateRTCBackupReg+0x48>)
 8002a24:	0018      	movs	r0, r3
 8002a26:	f004 fca2 	bl	800736e <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a60 <updateRTCBackupReg+0x4c>)
 8002a2c:	6819      	ldr	r1, [r3, #0]
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a58 <updateRTCBackupReg+0x44>)
 8002a30:	785b      	ldrb	r3, [r3, #1]
 8002a32:	001a      	movs	r2, r3
 8002a34:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <updateRTCBackupReg+0x48>)
 8002a36:	0018      	movs	r0, r3
 8002a38:	f004 fc99 	bl	800736e <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8002a3c:	4b09      	ldr	r3, [pc, #36]	@ (8002a64 <updateRTCBackupReg+0x50>)
 8002a3e:	6819      	ldr	r1, [r3, #0]
 8002a40:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <updateRTCBackupReg+0x44>)
 8002a42:	78db      	ldrb	r3, [r3, #3]
 8002a44:	001a      	movs	r2, r3
 8002a46:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <updateRTCBackupReg+0x48>)
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f004 fc90 	bl	800736e <HAL_RTCEx_BKUPWrite>

}
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	200000e4 	.word	0x200000e4
 8002a58:	200000d0 	.word	0x200000d0
 8002a5c:	200001d8 	.word	0x200001d8
 8002a60:	20000034 	.word	0x20000034
 8002a64:	20000038 	.word	0x20000038

08002a68 <conv2Mil>:

/*
 * Converts the time in an AM/PM RTC time to 24-hour time
 * Returns this time in an RTC Time Def object
 */
RTC_TimeTypeDef conv2Mil(RTC_TimeTypeDef *oldTime) {
 8002a68:	b5b0      	push	{r4, r5, r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]

	RTC_TimeTypeDef convertedTime = *oldTime;
 8002a72:	250c      	movs	r5, #12
 8002a74:	197b      	adds	r3, r7, r5
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a7a:	c313      	stmia	r3!, {r0, r1, r4}
 8002a7c:	ca03      	ldmia	r2!, {r0, r1}
 8002a7e:	c303      	stmia	r3!, {r0, r1}

	// If we are in PM, increment hours by 12 (but not if it is 12 p.m.)
	if(oldTime->TimeFormat == RTC_HOURFORMAT12_PM && oldTime->Hours != 12) {
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	78db      	ldrb	r3, [r3, #3]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d10a      	bne.n	8002a9e <conv2Mil+0x36>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b0c      	cmp	r3, #12
 8002a8e:	d006      	beq.n	8002a9e <conv2Mil+0x36>
		convertedTime.Hours += 12;
 8002a90:	197b      	adds	r3, r7, r5
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	330c      	adds	r3, #12
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	197b      	adds	r3, r7, r5
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	e00b      	b.n	8002ab6 <conv2Mil+0x4e>
	}
	// If we are in AM and the hours are 12, set hours to 0.
	else if(oldTime->TimeFormat == RTC_HOURFORMAT12_AM && oldTime->Hours == 12) {
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	78db      	ldrb	r3, [r3, #3]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d107      	bne.n	8002ab6 <conv2Mil+0x4e>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	d103      	bne.n	8002ab6 <conv2Mil+0x4e>
		convertedTime.Hours = 0;
 8002aae:	230c      	movs	r3, #12
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
	else { // No change

	}

	// Make the update and display time function think that it is AM always
	convertedTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002ab6:	210c      	movs	r1, #12
 8002ab8:	187b      	adds	r3, r7, r1
 8002aba:	2200      	movs	r2, #0
 8002abc:	70da      	strb	r2, [r3, #3]

	return convertedTime;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	187a      	adds	r2, r7, r1
 8002ac2:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ac4:	c313      	stmia	r3!, {r0, r1, r4}
 8002ac6:	ca03      	ldmia	r2!, {r0, r1}
 8002ac8:	c303      	stmia	r3!, {r0, r1}

}
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b008      	add	sp, #32
 8002ad0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002ad4 <startAudioStream>:

/*
 * Begins DMA streams to pull data from memory, process data, and push to i2s amplifier.
 */
void startAudioStream(void) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0

	// Pre-fill TX buffer
	fillTxBuffer(0);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f000 f83f 	bl	8002b5c <fillTxBuffer>
	fillTxBuffer(BUFFER_SIZE);
 8002ade:	2040      	movs	r0, #64	@ 0x40
 8002ae0:	f000 f83c 	bl	8002b5c <fillTxBuffer>

	// Start TX DMA stream
	HAL_I2S_Transmit_DMA(&hi2s1, i2sTxBuff, BUFFER_SIZE * 2);
 8002ae4:	4906      	ldr	r1, [pc, #24]	@ (8002b00 <startAudioStream+0x2c>)
 8002ae6:	4b07      	ldr	r3, [pc, #28]	@ (8002b04 <startAudioStream+0x30>)
 8002ae8:	2280      	movs	r2, #128	@ 0x80
 8002aea:	0018      	movs	r0, r3
 8002aec:	f002 fb74 	bl	80051d8 <HAL_I2S_Transmit_DMA>

	// Enable Amplifier
	NAU8315YG_AmpEnable(&i2sAmp);
 8002af0:	4b05      	ldr	r3, [pc, #20]	@ (8002b08 <startAudioStream+0x34>)
 8002af2:	0018      	movs	r0, r3
 8002af4:	f7fd ff5a 	bl	80009ac <NAU8315YG_AmpEnable>

	// Interrupts will take care of the rest.

}
 8002af8:	46c0      	nop			@ (mov r8, r8)
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			@ (mov r8, r8)
 8002b00:	20000494 	.word	0x20000494
 8002b04:	20000140 	.word	0x20000140
 8002b08:	20000444 	.word	0x20000444

08002b0c <stopAudioStream>:

/*
 * Halts DMA streams
 */
void stopAudioStream(void) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0

	// Disable Amplifier
	NAU8315YG_AmpDisable(&i2sAmp);
 8002b10:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <stopAudioStream+0x1c>)
 8002b12:	0018      	movs	r0, r3
 8002b14:	f7fd ff5e 	bl	80009d4 <NAU8315YG_AmpDisable>

	// Stop DMA Stream
	HAL_I2S_DMAStop(&hi2s1);
 8002b18:	4b04      	ldr	r3, [pc, #16]	@ (8002b2c <stopAudioStream+0x20>)
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f002 fc08 	bl	8005330 <HAL_I2S_DMAStop>

}
 8002b20:	46c0      	nop			@ (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			@ (mov r8, r8)
 8002b28:	20000444 	.word	0x20000444
 8002b2c:	20000140 	.word	0x20000140

08002b30 <HAL_I2S_TxHalfCpltCallback>:

/*
 * DMA completion callbacks
 */

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

	// Fill first half of i2s TX buffer
	fillTxBuffer(0);
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f000 f80f 	bl	8002b5c <fillTxBuffer>


}
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b002      	add	sp, #8
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]

	// Fill second half of i2s transmit buffer
	fillTxBuffer(BUFFER_SIZE);
 8002b4e:	2040      	movs	r0, #64	@ 0x40
 8002b50:	f000 f804 	bl	8002b5c <fillTxBuffer>


}
 8002b54:	46c0      	nop			@ (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b002      	add	sp, #8
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <fillTxBuffer>:

void fillTxBuffer(uint16_t offset) {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	0002      	movs	r2, r0
 8002b64:	1dbb      	adds	r3, r7, #6
 8002b66:	801a      	strh	r2, [r3, #0]

	// Read next chunk of audio data, increment flash read address
	W25Q_readData(&spiFlash, flashReadAddr, BUFFER_SIZE, spiRxBuff);
 8002b68:	4b20      	ldr	r3, [pc, #128]	@ (8002bec <fillTxBuffer+0x90>)
 8002b6a:	6819      	ldr	r1, [r3, #0]
 8002b6c:	4b20      	ldr	r3, [pc, #128]	@ (8002bf0 <fillTxBuffer+0x94>)
 8002b6e:	4821      	ldr	r0, [pc, #132]	@ (8002bf4 <fillTxBuffer+0x98>)
 8002b70:	2240      	movs	r2, #64	@ 0x40
 8002b72:	f7fe fb99 	bl	80012a8 <W25Q_readData>
	flashReadAddr += BUFFER_SIZE;
 8002b76:	4b1d      	ldr	r3, [pc, #116]	@ (8002bec <fillTxBuffer+0x90>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3340      	adds	r3, #64	@ 0x40
 8002b7c:	001a      	movs	r2, r3
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bec <fillTxBuffer+0x90>)
 8002b80:	601a      	str	r2, [r3, #0]

	// Playing all of a mono file canS-mono-reduced
	 for(uint16_t i = 0; i < BUFFER_SIZE; i += 2) {
 8002b82:	230e      	movs	r3, #14
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	2200      	movs	r2, #0
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	e01d      	b.n	8002bc8 <fillTxBuffer+0x6c>

		 i2sTxBuff[offset + (i) + 1] = (spiRxBuff[i + 1] << 8) | spiRxBuff[i];
 8002b8c:	200e      	movs	r0, #14
 8002b8e:	183b      	adds	r3, r7, r0
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	3301      	adds	r3, #1
 8002b94:	4a16      	ldr	r2, [pc, #88]	@ (8002bf0 <fillTxBuffer+0x94>)
 8002b96:	5cd3      	ldrb	r3, [r2, r3]
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	b21a      	sxth	r2, r3
 8002b9c:	183b      	adds	r3, r7, r0
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	4913      	ldr	r1, [pc, #76]	@ (8002bf0 <fillTxBuffer+0x94>)
 8002ba2:	5ccb      	ldrb	r3, [r1, r3]
 8002ba4:	b21b      	sxth	r3, r3
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	b219      	sxth	r1, r3
 8002baa:	1dbb      	adds	r3, r7, #6
 8002bac:	881a      	ldrh	r2, [r3, #0]
 8002bae:	183b      	adds	r3, r7, r0
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	18d3      	adds	r3, r2, r3
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	b289      	uxth	r1, r1
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf8 <fillTxBuffer+0x9c>)
 8002bba:	0052      	lsls	r2, r2, #1
 8002bbc:	52d1      	strh	r1, [r2, r3]
	 for(uint16_t i = 0; i < BUFFER_SIZE; i += 2) {
 8002bbe:	183b      	adds	r3, r7, r0
 8002bc0:	183a      	adds	r2, r7, r0
 8002bc2:	8812      	ldrh	r2, [r2, #0]
 8002bc4:	3202      	adds	r2, #2
 8002bc6:	801a      	strh	r2, [r3, #0]
 8002bc8:	230e      	movs	r3, #14
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bd0:	d9dc      	bls.n	8002b8c <fillTxBuffer+0x30>

	 }


	// If we have reached the end of the audio clip, reset flash read address
	if(flashReadAddr > audioAddr_END) {
 8002bd2:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <fillTxBuffer+0x90>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a09      	ldr	r2, [pc, #36]	@ (8002bfc <fillTxBuffer+0xa0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d902      	bls.n	8002be2 <fillTxBuffer+0x86>
		flashReadAddr = initialMemoryOffset;
 8002bdc:	4b03      	ldr	r3, [pc, #12]	@ (8002bec <fillTxBuffer+0x90>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
	}


}
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b004      	add	sp, #16
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			@ (mov r8, r8)
 8002bec:	20000594 	.word	0x20000594
 8002bf0:	20000454 	.word	0x20000454
 8002bf4:	2000041c 	.word	0x2000041c
 8002bf8:	20000494 	.word	0x20000494
 8002bfc:	00890e0e 	.word	0x00890e0e

08002c00 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

	//TEST?
	__NOP();
 8002c08:	46c0      	nop			@ (mov r8, r8)


}
 8002c0a:	46c0      	nop			@ (mov r8, r8)
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b002      	add	sp, #8
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c16:	b672      	cpsid	i
}
 8002c18:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c1a:	46c0      	nop			@ (mov r8, r8)
 8002c1c:	e7fd      	b.n	8002c1a <Error_Handler+0x8>
	...

08002c20 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	0005      	movs	r5, r0
 8002c28:	000c      	movs	r4, r1
 8002c2a:	0010      	movs	r0, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	1dbb      	adds	r3, r7, #6
 8002c30:	1c2a      	adds	r2, r5, #0
 8002c32:	801a      	strh	r2, [r3, #0]
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	1c22      	adds	r2, r4, #0
 8002c38:	801a      	strh	r2, [r3, #0]
 8002c3a:	1cbb      	adds	r3, r7, #2
 8002c3c:	1c02      	adds	r2, r0, #0
 8002c3e:	801a      	strh	r2, [r3, #0]
 8002c40:	003b      	movs	r3, r7
 8002c42:	1c0a      	adds	r2, r1, #0
 8002c44:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8002c46:	4b7c      	ldr	r3, [pc, #496]	@ (8002e38 <sevSeg_Init+0x218>)
 8002c48:	1dba      	adds	r2, r7, #6
 8002c4a:	8812      	ldrh	r2, [r2, #0]
 8002c4c:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8002c4e:	4b7b      	ldr	r3, [pc, #492]	@ (8002e3c <sevSeg_Init+0x21c>)
 8002c50:	1d3a      	adds	r2, r7, #4
 8002c52:	8812      	ldrh	r2, [r2, #0]
 8002c54:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8002c56:	4b7a      	ldr	r3, [pc, #488]	@ (8002e40 <sevSeg_Init+0x220>)
 8002c58:	1cba      	adds	r2, r7, #2
 8002c5a:	8812      	ldrh	r2, [r2, #0]
 8002c5c:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8002c5e:	4b79      	ldr	r3, [pc, #484]	@ (8002e44 <sevSeg_Init+0x224>)
 8002c60:	003a      	movs	r2, r7
 8002c62:	8812      	ldrh	r2, [r2, #0]
 8002c64:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8002c66:	4a78      	ldr	r2, [pc, #480]	@ (8002e48 <sevSeg_Init+0x228>)
 8002c68:	2330      	movs	r3, #48	@ 0x30
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8002c70:	4a76      	ldr	r2, [pc, #472]	@ (8002e4c <sevSeg_Init+0x22c>)
 8002c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c74:	0010      	movs	r0, r2
 8002c76:	0019      	movs	r1, r3
 8002c78:	234c      	movs	r3, #76	@ 0x4c
 8002c7a:	001a      	movs	r2, r3
 8002c7c:	f006 fb6a 	bl	8009354 <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8002c80:	4b73      	ldr	r3, [pc, #460]	@ (8002e50 <sevSeg_Init+0x230>)
 8002c82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c84:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	e00b      	b.n	8002ca4 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c92:	18d3      	adds	r3, r2, r3
 8002c94:	6819      	ldr	r1, [r3, #0]
 8002c96:	4b6f      	ldr	r3, [pc, #444]	@ (8002e54 <sevSeg_Init+0x234>)
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	0092      	lsls	r2, r2, #2
 8002c9c:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	ddf0      	ble.n	8002c8c <sevSeg_Init+0x6c>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8002caa:	4b6a      	ldr	r3, [pc, #424]	@ (8002e54 <sevSeg_Init+0x234>)
 8002cac:	6918      	ldr	r0, [r3, #16]
 8002cae:	4b66      	ldr	r3, [pc, #408]	@ (8002e48 <sevSeg_Init+0x228>)
 8002cb0:	8819      	ldrh	r1, [r3, #0]
 8002cb2:	4b69      	ldr	r3, [pc, #420]	@ (8002e58 <sevSeg_Init+0x238>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	001a      	movs	r2, r3
 8002cb8:	f001 faf1 	bl	800429e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8002cbc:	4b65      	ldr	r3, [pc, #404]	@ (8002e54 <sevSeg_Init+0x234>)
 8002cbe:	6918      	ldr	r0, [r3, #16]
 8002cc0:	4b61      	ldr	r3, [pc, #388]	@ (8002e48 <sevSeg_Init+0x228>)
 8002cc2:	8819      	ldrh	r1, [r3, #0]
 8002cc4:	4b64      	ldr	r3, [pc, #400]	@ (8002e58 <sevSeg_Init+0x238>)
 8002cc6:	785b      	ldrb	r3, [r3, #1]
 8002cc8:	001a      	movs	r2, r3
 8002cca:	f001 fae8 	bl	800429e <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002cce:	4b61      	ldr	r3, [pc, #388]	@ (8002e54 <sevSeg_Init+0x234>)
 8002cd0:	6898      	ldr	r0, [r3, #8]
 8002cd2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e40 <sevSeg_Init+0x220>)
 8002cd4:	8819      	ldrh	r1, [r3, #0]
 8002cd6:	4b60      	ldr	r3, [pc, #384]	@ (8002e58 <sevSeg_Init+0x238>)
 8002cd8:	785b      	ldrb	r3, [r3, #1]
 8002cda:	001a      	movs	r2, r3
 8002cdc:	f001 fadf 	bl	800429e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002ce0:	4b5c      	ldr	r3, [pc, #368]	@ (8002e54 <sevSeg_Init+0x234>)
 8002ce2:	6898      	ldr	r0, [r3, #8]
 8002ce4:	4b56      	ldr	r3, [pc, #344]	@ (8002e40 <sevSeg_Init+0x220>)
 8002ce6:	8819      	ldrh	r1, [r3, #0]
 8002ce8:	4b5b      	ldr	r3, [pc, #364]	@ (8002e58 <sevSeg_Init+0x238>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	001a      	movs	r2, r3
 8002cee:	f001 fad6 	bl	800429e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8002cf2:	4b58      	ldr	r3, [pc, #352]	@ (8002e54 <sevSeg_Init+0x234>)
 8002cf4:	68d8      	ldr	r0, [r3, #12]
 8002cf6:	4b53      	ldr	r3, [pc, #332]	@ (8002e44 <sevSeg_Init+0x224>)
 8002cf8:	8819      	ldrh	r1, [r3, #0]
 8002cfa:	4b57      	ldr	r3, [pc, #348]	@ (8002e58 <sevSeg_Init+0x238>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	001a      	movs	r2, r3
 8002d00:	f001 facd 	bl	800429e <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(50);
 8002d04:	2032      	movs	r0, #50	@ 0x32
 8002d06:	f000 f95f 	bl	8002fc8 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	4a53      	ldr	r2, [pc, #332]	@ (8002e5c <sevSeg_Init+0x23c>)
 8002d10:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	e038      	b.n	8002d8a <sevSeg_Init+0x16a>

		sendByte = hofSymb[i];
 8002d18:	231b      	movs	r3, #27
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	18b9      	adds	r1, r7, r2
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	188a      	adds	r2, r1, r2
 8002d24:	7812      	ldrb	r2, [r2, #0]
 8002d26:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	e027      	b.n	8002d7e <sevSeg_Init+0x15e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8002d2e:	4b49      	ldr	r3, [pc, #292]	@ (8002e54 <sevSeg_Init+0x234>)
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	4b41      	ldr	r3, [pc, #260]	@ (8002e38 <sevSeg_Init+0x218>)
 8002d34:	8819      	ldrh	r1, [r3, #0]
 8002d36:	241b      	movs	r4, #27
 8002d38:	193b      	adds	r3, r7, r4
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	4013      	ands	r3, r2
 8002d40:	4a45      	ldr	r2, [pc, #276]	@ (8002e58 <sevSeg_Init+0x238>)
 8002d42:	5cd3      	ldrb	r3, [r2, r3]
 8002d44:	001a      	movs	r2, r3
 8002d46:	f001 faaa 	bl	800429e <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8002d4a:	4b42      	ldr	r3, [pc, #264]	@ (8002e54 <sevSeg_Init+0x234>)
 8002d4c:	6858      	ldr	r0, [r3, #4]
 8002d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e3c <sevSeg_Init+0x21c>)
 8002d50:	8819      	ldrh	r1, [r3, #0]
 8002d52:	4b41      	ldr	r3, [pc, #260]	@ (8002e58 <sevSeg_Init+0x238>)
 8002d54:	785b      	ldrb	r3, [r3, #1]
 8002d56:	001a      	movs	r2, r3
 8002d58:	f001 faa1 	bl	800429e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8002d5c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e54 <sevSeg_Init+0x234>)
 8002d5e:	6858      	ldr	r0, [r3, #4]
 8002d60:	4b36      	ldr	r3, [pc, #216]	@ (8002e3c <sevSeg_Init+0x21c>)
 8002d62:	8819      	ldrh	r1, [r3, #0]
 8002d64:	4b3c      	ldr	r3, [pc, #240]	@ (8002e58 <sevSeg_Init+0x238>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	001a      	movs	r2, r3
 8002d6a:	f001 fa98 	bl	800429e <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	193a      	adds	r2, r7, r4
 8002d72:	7812      	ldrb	r2, [r2, #0]
 8002d74:	0852      	lsrs	r2, r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	2b07      	cmp	r3, #7
 8002d82:	ddd4      	ble.n	8002d2e <sevSeg_Init+0x10e>
	for(int i = 0; i <= 3; i++) {
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	3301      	adds	r3, #1
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	ddc3      	ble.n	8002d18 <sevSeg_Init+0xf8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002d90:	4b30      	ldr	r3, [pc, #192]	@ (8002e54 <sevSeg_Init+0x234>)
 8002d92:	6898      	ldr	r0, [r3, #8]
 8002d94:	4b2a      	ldr	r3, [pc, #168]	@ (8002e40 <sevSeg_Init+0x220>)
 8002d96:	8819      	ldrh	r1, [r3, #0]
 8002d98:	4b2f      	ldr	r3, [pc, #188]	@ (8002e58 <sevSeg_Init+0x238>)
 8002d9a:	785b      	ldrb	r3, [r3, #1]
 8002d9c:	001a      	movs	r2, r3
 8002d9e:	f001 fa7e 	bl	800429e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002da2:	4b2c      	ldr	r3, [pc, #176]	@ (8002e54 <sevSeg_Init+0x234>)
 8002da4:	6898      	ldr	r0, [r3, #8]
 8002da6:	4b26      	ldr	r3, [pc, #152]	@ (8002e40 <sevSeg_Init+0x220>)
 8002da8:	8819      	ldrh	r1, [r3, #0]
 8002daa:	4b2b      	ldr	r3, [pc, #172]	@ (8002e58 <sevSeg_Init+0x238>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	001a      	movs	r2, r3
 8002db0:	f001 fa75 	bl	800429e <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8002db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db6:	0018      	movs	r0, r3
 8002db8:	f005 fad6 	bl	8008368 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f005 fa86 	bl	80082d0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dca:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8002dcc:	46c0      	nop			@ (mov r8, r8)
 8002dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1ad2      	subs	r2, r2, r3
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	01db      	lsls	r3, r3, #7
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d3f6      	bcc.n	8002dce <sevSeg_Init+0x1ae>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8002de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de2:	0018      	movs	r0, r3
 8002de4:	f005 fac0 	bl	8008368 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8002de8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e54 <sevSeg_Init+0x234>)
 8002dea:	6918      	ldr	r0, [r3, #16]
 8002dec:	4b16      	ldr	r3, [pc, #88]	@ (8002e48 <sevSeg_Init+0x228>)
 8002dee:	8819      	ldrh	r1, [r3, #0]
 8002df0:	4b19      	ldr	r3, [pc, #100]	@ (8002e58 <sevSeg_Init+0x238>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	001a      	movs	r2, r3
 8002df6:	f001 fa52 	bl	800429e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8002dfa:	4b16      	ldr	r3, [pc, #88]	@ (8002e54 <sevSeg_Init+0x234>)
 8002dfc:	6918      	ldr	r0, [r3, #16]
 8002dfe:	4b12      	ldr	r3, [pc, #72]	@ (8002e48 <sevSeg_Init+0x228>)
 8002e00:	8819      	ldrh	r1, [r3, #0]
 8002e02:	4b15      	ldr	r3, [pc, #84]	@ (8002e58 <sevSeg_Init+0x238>)
 8002e04:	785b      	ldrb	r3, [r3, #1]
 8002e06:	001a      	movs	r2, r3
 8002e08:	f001 fa49 	bl	800429e <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002e0c:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <sevSeg_Init+0x234>)
 8002e0e:	6898      	ldr	r0, [r3, #8]
 8002e10:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <sevSeg_Init+0x220>)
 8002e12:	8819      	ldrh	r1, [r3, #0]
 8002e14:	4b10      	ldr	r3, [pc, #64]	@ (8002e58 <sevSeg_Init+0x238>)
 8002e16:	785b      	ldrb	r3, [r3, #1]
 8002e18:	001a      	movs	r2, r3
 8002e1a:	f001 fa40 	bl	800429e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e54 <sevSeg_Init+0x234>)
 8002e20:	6898      	ldr	r0, [r3, #8]
 8002e22:	4b07      	ldr	r3, [pc, #28]	@ (8002e40 <sevSeg_Init+0x220>)
 8002e24:	8819      	ldrh	r1, [r3, #0]
 8002e26:	4b0c      	ldr	r3, [pc, #48]	@ (8002e58 <sevSeg_Init+0x238>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	001a      	movs	r2, r3
 8002e2c:	f001 fa37 	bl	800429e <HAL_GPIO_WritePin>

}
 8002e30:	46c0      	nop			@ (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b008      	add	sp, #32
 8002e36:	bdb0      	pop	{r4, r5, r7, pc}
 8002e38:	20000598 	.word	0x20000598
 8002e3c:	2000059a 	.word	0x2000059a
 8002e40:	2000059c 	.word	0x2000059c
 8002e44:	2000059e 	.word	0x2000059e
 8002e48:	200005a0 	.word	0x200005a0
 8002e4c:	200005a4 	.word	0x200005a4
 8002e50:	200005f0 	.word	0x200005f0
 8002e54:	20000074 	.word	0x20000074
 8002e58:	20000088 	.word	0x20000088
 8002e5c:	471d3700 	.word	0x471d3700

08002e60 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime, uint8_t userAlarmEnable) {
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	000a      	movs	r2, r1
 8002e6a:	1cfb      	adds	r3, r7, #3
 8002e6c:	701a      	strb	r2, [r3, #0]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	210a      	movs	r1, #10
 8002e74:	0018      	movs	r0, r3
 8002e76:	f7fd f945 	bl	8000104 <__udivsi3>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	2408      	movs	r4, #8
 8002e80:	193b      	adds	r3, r7, r4
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	210a      	movs	r1, #10
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f7fd f9c0 	bl	8000210 <__aeabi_uidivmod>
 8002e90:	000b      	movs	r3, r1
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	193b      	adds	r3, r7, r4
 8002e96:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002e9c:	210a      	movs	r1, #10
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f7fd f930 	bl	8000104 <__udivsi3>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	193b      	adds	r3, r7, r4
 8002eaa:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002eb0:	210a      	movs	r1, #10
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f7fd f9ac 	bl	8000210 <__aeabi_uidivmod>
 8002eb8:	000b      	movs	r3, r1
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	193b      	adds	r3, r7, r4
 8002ebe:	70da      	strb	r2, [r3, #3]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 3; i >= 0; i--) {
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	e05b      	b.n	8002f7e <sevSeg_updateDigits+0x11e>

		sendByte = dispDigits[sendTime[i]];
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	18fa      	adds	r2, r7, r3
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	18d3      	adds	r3, r2, r3
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	2017      	movs	r0, #23
 8002ed4:	183b      	adds	r3, r7, r0
 8002ed6:	4a36      	ldr	r2, [pc, #216]	@ (8002fb0 <sevSeg_updateDigits+0x150>)
 8002ed8:	5c52      	ldrb	r2, [r2, r1]
 8002eda:	701a      	strb	r2, [r3, #0]

		// If tenth's place of hour and zero, disable this segment
		if( (i == 0) && (sendByte == dispDigits[0])) {
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d107      	bne.n	8002ef2 <sevSeg_updateDigits+0x92>
 8002ee2:	2242      	movs	r2, #66	@ 0x42
 8002ee4:	183b      	adds	r3, r7, r0
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d102      	bne.n	8002ef2 <sevSeg_updateDigits+0x92>
			sendByte = 0xFF;
 8002eec:	183b      	adds	r3, r7, r0
 8002eee:	22ff      	movs	r2, #255	@ 0xff
 8002ef0:	701a      	strb	r2, [r3, #0]
		}

		// If one's place of hour, set decimal point based on AM/PM.
		// OR
		// If one's place of minute, set decimal place based on user alarm enabled
		if( ((i == 1) && (updateTime->TimeFormat == RTC_HOURFORMAT12_PM)) ||
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d103      	bne.n	8002f00 <sevSeg_updateDigits+0xa0>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	78db      	ldrb	r3, [r3, #3]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d006      	beq.n	8002f0e <sevSeg_updateDigits+0xae>
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d10a      	bne.n	8002f1c <sevSeg_updateDigits+0xbc>
			((i == 3) && userAlarmEnable)	) {
 8002f06:	1cfb      	adds	r3, r7, #3
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d006      	beq.n	8002f1c <sevSeg_updateDigits+0xbc>
			sendByte = (sendByte & 0b11111101);
 8002f0e:	2217      	movs	r2, #23
 8002f10:	18bb      	adds	r3, r7, r2
 8002f12:	18ba      	adds	r2, r7, r2
 8002f14:	7812      	ldrb	r2, [r2, #0]
 8002f16:	2102      	movs	r1, #2
 8002f18:	438a      	bics	r2, r1
 8002f1a:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	e027      	b.n	8002f72 <sevSeg_updateDigits+0x112>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[(sendByte & 1)]);
 8002f22:	4b24      	ldr	r3, [pc, #144]	@ (8002fb4 <sevSeg_updateDigits+0x154>)
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	4b24      	ldr	r3, [pc, #144]	@ (8002fb8 <sevSeg_updateDigits+0x158>)
 8002f28:	8819      	ldrh	r1, [r3, #0]
 8002f2a:	2417      	movs	r4, #23
 8002f2c:	193b      	adds	r3, r7, r4
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2201      	movs	r2, #1
 8002f32:	4013      	ands	r3, r2
 8002f34:	4a21      	ldr	r2, [pc, #132]	@ (8002fbc <sevSeg_updateDigits+0x15c>)
 8002f36:	5cd3      	ldrb	r3, [r2, r3]
 8002f38:	001a      	movs	r2, r3
 8002f3a:	f001 f9b0 	bl	800429e <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb4 <sevSeg_updateDigits+0x154>)
 8002f40:	6858      	ldr	r0, [r3, #4]
 8002f42:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc0 <sevSeg_updateDigits+0x160>)
 8002f44:	8819      	ldrh	r1, [r3, #0]
 8002f46:	4b1d      	ldr	r3, [pc, #116]	@ (8002fbc <sevSeg_updateDigits+0x15c>)
 8002f48:	785b      	ldrb	r3, [r3, #1]
 8002f4a:	001a      	movs	r2, r3
 8002f4c:	f001 f9a7 	bl	800429e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8002f50:	4b18      	ldr	r3, [pc, #96]	@ (8002fb4 <sevSeg_updateDigits+0x154>)
 8002f52:	6858      	ldr	r0, [r3, #4]
 8002f54:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc0 <sevSeg_updateDigits+0x160>)
 8002f56:	8819      	ldrh	r1, [r3, #0]
 8002f58:	4b18      	ldr	r3, [pc, #96]	@ (8002fbc <sevSeg_updateDigits+0x15c>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	001a      	movs	r2, r3
 8002f5e:	f001 f99e 	bl	800429e <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8002f62:	193b      	adds	r3, r7, r4
 8002f64:	193a      	adds	r2, r7, r4
 8002f66:	7812      	ldrb	r2, [r2, #0]
 8002f68:	0852      	lsrs	r2, r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b07      	cmp	r3, #7
 8002f76:	ddd4      	ble.n	8002f22 <sevSeg_updateDigits+0xc2>
	for(int i = 3; i >= 0; i--) {
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	daa0      	bge.n	8002ec6 <sevSeg_updateDigits+0x66>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002f84:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb4 <sevSeg_updateDigits+0x154>)
 8002f86:	6898      	ldr	r0, [r3, #8]
 8002f88:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc4 <sevSeg_updateDigits+0x164>)
 8002f8a:	8819      	ldrh	r1, [r3, #0]
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fbc <sevSeg_updateDigits+0x15c>)
 8002f8e:	785b      	ldrb	r3, [r3, #1]
 8002f90:	001a      	movs	r2, r3
 8002f92:	f001 f984 	bl	800429e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002f96:	4b07      	ldr	r3, [pc, #28]	@ (8002fb4 <sevSeg_updateDigits+0x154>)
 8002f98:	6898      	ldr	r0, [r3, #8]
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc4 <sevSeg_updateDigits+0x164>)
 8002f9c:	8819      	ldrh	r1, [r3, #0]
 8002f9e:	4b07      	ldr	r3, [pc, #28]	@ (8002fbc <sevSeg_updateDigits+0x15c>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	001a      	movs	r2, r3
 8002fa4:	f001 f97b 	bl	800429e <HAL_GPIO_WritePin>

	return;
 8002fa8:	46c0      	nop			@ (mov r8, r8)

}
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b007      	add	sp, #28
 8002fae:	bd90      	pop	{r4, r7, pc}
 8002fb0:	080093b4 	.word	0x080093b4
 8002fb4:	20000074 	.word	0x20000074
 8002fb8:	20000598 	.word	0x20000598
 8002fbc:	20000088 	.word	0x20000088
 8002fc0:	2000059a 	.word	0x2000059a
 8002fc4:	2000059c 	.word	0x2000059c

08002fc8 <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	0002      	movs	r2, r0
 8002fd0:	1dbb      	adds	r3, r7, #6
 8002fd2:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8002fd4:	4b20      	ldr	r3, [pc, #128]	@ (8003058 <sevSeg_setIntensity+0x90>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d105      	bne.n	8002fe8 <sevSeg_setIntensity+0x20>
 8002fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800305c <sevSeg_setIntensity+0x94>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	1dba      	adds	r2, r7, #6
 8002fe2:	8812      	ldrh	r2, [r2, #0]
 8002fe4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fe6:	e02c      	b.n	8003042 <sevSeg_setIntensity+0x7a>
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8003058 <sevSeg_setIntensity+0x90>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d105      	bne.n	8002ffc <sevSeg_setIntensity+0x34>
 8002ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800305c <sevSeg_setIntensity+0x94>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	1dbb      	adds	r3, r7, #6
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	6393      	str	r3, [r2, #56]	@ 0x38
 8002ffa:	e022      	b.n	8003042 <sevSeg_setIntensity+0x7a>
 8002ffc:	4b16      	ldr	r3, [pc, #88]	@ (8003058 <sevSeg_setIntensity+0x90>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b08      	cmp	r3, #8
 8003002:	d105      	bne.n	8003010 <sevSeg_setIntensity+0x48>
 8003004:	4b15      	ldr	r3, [pc, #84]	@ (800305c <sevSeg_setIntensity+0x94>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	1dbb      	adds	r3, r7, #6
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800300e:	e018      	b.n	8003042 <sevSeg_setIntensity+0x7a>
 8003010:	4b11      	ldr	r3, [pc, #68]	@ (8003058 <sevSeg_setIntensity+0x90>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b0c      	cmp	r3, #12
 8003016:	d105      	bne.n	8003024 <sevSeg_setIntensity+0x5c>
 8003018:	4b10      	ldr	r3, [pc, #64]	@ (800305c <sevSeg_setIntensity+0x94>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	1dbb      	adds	r3, r7, #6
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	6413      	str	r3, [r2, #64]	@ 0x40
 8003022:	e00e      	b.n	8003042 <sevSeg_setIntensity+0x7a>
 8003024:	4b0c      	ldr	r3, [pc, #48]	@ (8003058 <sevSeg_setIntensity+0x90>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b10      	cmp	r3, #16
 800302a:	d105      	bne.n	8003038 <sevSeg_setIntensity+0x70>
 800302c:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <sevSeg_setIntensity+0x94>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	1dbb      	adds	r3, r7, #6
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	6593      	str	r3, [r2, #88]	@ 0x58
 8003036:	e004      	b.n	8003042 <sevSeg_setIntensity+0x7a>
 8003038:	4b08      	ldr	r3, [pc, #32]	@ (800305c <sevSeg_setIntensity+0x94>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	1dbb      	adds	r3, r7, #6
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 8003042:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <sevSeg_setIntensity+0x90>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4b05      	ldr	r3, [pc, #20]	@ (800305c <sevSeg_setIntensity+0x94>)
 8003048:	0011      	movs	r1, r2
 800304a:	0018      	movs	r0, r3
 800304c:	f005 fa8c 	bl	8008568 <HAL_TIM_PWM_Start>

}
 8003050:	46c0      	nop			@ (mov r8, r8)
 8003052:	46bd      	mov	sp, r7
 8003054:	b002      	add	sp, #8
 8003056:	bd80      	pop	{r7, pc}
 8003058:	200005f0 	.word	0x200005f0
 800305c:	200005a4 	.word	0x200005a4

08003060 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003066:	4b13      	ldr	r3, [pc, #76]	@ (80030b4 <HAL_MspInit+0x54>)
 8003068:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800306a:	4b12      	ldr	r3, [pc, #72]	@ (80030b4 <HAL_MspInit+0x54>)
 800306c:	2101      	movs	r1, #1
 800306e:	430a      	orrs	r2, r1
 8003070:	641a      	str	r2, [r3, #64]	@ 0x40
 8003072:	4b10      	ldr	r3, [pc, #64]	@ (80030b4 <HAL_MspInit+0x54>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	2201      	movs	r2, #1
 8003078:	4013      	ands	r3, r2
 800307a:	607b      	str	r3, [r7, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800307e:	4b0d      	ldr	r3, [pc, #52]	@ (80030b4 <HAL_MspInit+0x54>)
 8003080:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003082:	4b0c      	ldr	r3, [pc, #48]	@ (80030b4 <HAL_MspInit+0x54>)
 8003084:	2180      	movs	r1, #128	@ 0x80
 8003086:	0549      	lsls	r1, r1, #21
 8003088:	430a      	orrs	r2, r1
 800308a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800308c:	4b09      	ldr	r3, [pc, #36]	@ (80030b4 <HAL_MspInit+0x54>)
 800308e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003090:	2380      	movs	r3, #128	@ 0x80
 8003092:	055b      	lsls	r3, r3, #21
 8003094:	4013      	ands	r3, r2
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800309a:	2200      	movs	r2, #0
 800309c:	2100      	movs	r1, #0
 800309e:	2004      	movs	r0, #4
 80030a0:	f000 fc96 	bl	80039d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80030a4:	2004      	movs	r0, #4
 80030a6:	f000 fca8 	bl	80039fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b002      	add	sp, #8
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	46c0      	nop			@ (mov r8, r8)
 80030b4:	40021000 	.word	0x40021000

080030b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030b8:	b590      	push	{r4, r7, lr}
 80030ba:	b095      	sub	sp, #84	@ 0x54
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c0:	233c      	movs	r3, #60	@ 0x3c
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	0018      	movs	r0, r3
 80030c6:	2314      	movs	r3, #20
 80030c8:	001a      	movs	r2, r3
 80030ca:	2100      	movs	r1, #0
 80030cc:	f006 f916 	bl	80092fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030d0:	2414      	movs	r4, #20
 80030d2:	193b      	adds	r3, r7, r4
 80030d4:	0018      	movs	r0, r3
 80030d6:	2328      	movs	r3, #40	@ 0x28
 80030d8:	001a      	movs	r2, r3
 80030da:	2100      	movs	r1, #0
 80030dc:	f006 f90e 	bl	80092fc <memset>
  if(hi2c->Instance==I2C1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a22      	ldr	r2, [pc, #136]	@ (8003170 <HAL_I2C_MspInit+0xb8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d13d      	bne.n	8003166 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030ea:	193b      	adds	r3, r7, r4
 80030ec:	2220      	movs	r2, #32
 80030ee:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80030f0:	193b      	adds	r3, r7, r4
 80030f2:	2200      	movs	r2, #0
 80030f4:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030f6:	193b      	adds	r3, r7, r4
 80030f8:	0018      	movs	r0, r3
 80030fa:	f002 ff93 	bl	8006024 <HAL_RCCEx_PeriphCLKConfig>
 80030fe:	1e03      	subs	r3, r0, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003102:	f7ff fd86 	bl	8002c12 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003106:	4b1b      	ldr	r3, [pc, #108]	@ (8003174 <HAL_I2C_MspInit+0xbc>)
 8003108:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800310a:	4b1a      	ldr	r3, [pc, #104]	@ (8003174 <HAL_I2C_MspInit+0xbc>)
 800310c:	2102      	movs	r1, #2
 800310e:	430a      	orrs	r2, r1
 8003110:	635a      	str	r2, [r3, #52]	@ 0x34
 8003112:	4b18      	ldr	r3, [pc, #96]	@ (8003174 <HAL_I2C_MspInit+0xbc>)
 8003114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003116:	2202      	movs	r2, #2
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800311e:	213c      	movs	r1, #60	@ 0x3c
 8003120:	187b      	adds	r3, r7, r1
 8003122:	22c0      	movs	r2, #192	@ 0xc0
 8003124:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003126:	187b      	adds	r3, r7, r1
 8003128:	2212      	movs	r2, #18
 800312a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312c:	187b      	adds	r3, r7, r1
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003132:	187b      	adds	r3, r7, r1
 8003134:	2200      	movs	r2, #0
 8003136:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003138:	187b      	adds	r3, r7, r1
 800313a:	2206      	movs	r2, #6
 800313c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800313e:	187b      	adds	r3, r7, r1
 8003140:	4a0d      	ldr	r2, [pc, #52]	@ (8003178 <HAL_I2C_MspInit+0xc0>)
 8003142:	0019      	movs	r1, r3
 8003144:	0010      	movs	r0, r2
 8003146:	f000 ff29 	bl	8003f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800314a:	4b0a      	ldr	r3, [pc, #40]	@ (8003174 <HAL_I2C_MspInit+0xbc>)
 800314c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800314e:	4b09      	ldr	r3, [pc, #36]	@ (8003174 <HAL_I2C_MspInit+0xbc>)
 8003150:	2180      	movs	r1, #128	@ 0x80
 8003152:	0389      	lsls	r1, r1, #14
 8003154:	430a      	orrs	r2, r1
 8003156:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003158:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <HAL_I2C_MspInit+0xbc>)
 800315a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800315c:	2380      	movs	r3, #128	@ 0x80
 800315e:	039b      	lsls	r3, r3, #14
 8003160:	4013      	ands	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003166:	46c0      	nop			@ (mov r8, r8)
 8003168:	46bd      	mov	sp, r7
 800316a:	b015      	add	sp, #84	@ 0x54
 800316c:	bd90      	pop	{r4, r7, pc}
 800316e:	46c0      	nop			@ (mov r8, r8)
 8003170:	40005400 	.word	0x40005400
 8003174:	40021000 	.word	0x40021000
 8003178:	50000400 	.word	0x50000400

0800317c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800317c:	b590      	push	{r4, r7, lr}
 800317e:	b095      	sub	sp, #84	@ 0x54
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003184:	233c      	movs	r3, #60	@ 0x3c
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	0018      	movs	r0, r3
 800318a:	2314      	movs	r3, #20
 800318c:	001a      	movs	r2, r3
 800318e:	2100      	movs	r1, #0
 8003190:	f006 f8b4 	bl	80092fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003194:	2414      	movs	r4, #20
 8003196:	193b      	adds	r3, r7, r4
 8003198:	0018      	movs	r0, r3
 800319a:	2328      	movs	r3, #40	@ 0x28
 800319c:	001a      	movs	r2, r3
 800319e:	2100      	movs	r1, #0
 80031a0:	f006 f8ac 	bl	80092fc <memset>
  if(hi2s->Instance==SPI1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a4a      	ldr	r2, [pc, #296]	@ (80032d4 <HAL_I2S_MspInit+0x158>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d000      	beq.n	80031b0 <HAL_I2S_MspInit+0x34>
 80031ae:	e08d      	b.n	80032cc <HAL_I2S_MspInit+0x150>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80031b0:	193b      	adds	r3, r7, r4
 80031b2:	2280      	movs	r2, #128	@ 0x80
 80031b4:	0112      	lsls	r2, r2, #4
 80031b6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80031b8:	193b      	adds	r3, r7, r4
 80031ba:	2200      	movs	r2, #0
 80031bc:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031be:	193b      	adds	r3, r7, r4
 80031c0:	0018      	movs	r0, r3
 80031c2:	f002 ff2f 	bl	8006024 <HAL_RCCEx_PeriphCLKConfig>
 80031c6:	1e03      	subs	r3, r0, #0
 80031c8:	d001      	beq.n	80031ce <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80031ca:	f7ff fd22 	bl	8002c12 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031ce:	4b42      	ldr	r3, [pc, #264]	@ (80032d8 <HAL_I2S_MspInit+0x15c>)
 80031d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031d2:	4b41      	ldr	r3, [pc, #260]	@ (80032d8 <HAL_I2S_MspInit+0x15c>)
 80031d4:	2180      	movs	r1, #128	@ 0x80
 80031d6:	0149      	lsls	r1, r1, #5
 80031d8:	430a      	orrs	r2, r1
 80031da:	641a      	str	r2, [r3, #64]	@ 0x40
 80031dc:	4b3e      	ldr	r3, [pc, #248]	@ (80032d8 <HAL_I2S_MspInit+0x15c>)
 80031de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031e0:	2380      	movs	r3, #128	@ 0x80
 80031e2:	015b      	lsls	r3, r3, #5
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ea:	4b3b      	ldr	r3, [pc, #236]	@ (80032d8 <HAL_I2S_MspInit+0x15c>)
 80031ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ee:	4b3a      	ldr	r3, [pc, #232]	@ (80032d8 <HAL_I2S_MspInit+0x15c>)
 80031f0:	2101      	movs	r1, #1
 80031f2:	430a      	orrs	r2, r1
 80031f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80031f6:	4b38      	ldr	r3, [pc, #224]	@ (80032d8 <HAL_I2S_MspInit+0x15c>)
 80031f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fa:	2201      	movs	r2, #1
 80031fc:	4013      	ands	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003202:	4b35      	ldr	r3, [pc, #212]	@ (80032d8 <HAL_I2S_MspInit+0x15c>)
 8003204:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003206:	4b34      	ldr	r3, [pc, #208]	@ (80032d8 <HAL_I2S_MspInit+0x15c>)
 8003208:	2102      	movs	r1, #2
 800320a:	430a      	orrs	r2, r1
 800320c:	635a      	str	r2, [r3, #52]	@ 0x34
 800320e:	4b32      	ldr	r3, [pc, #200]	@ (80032d8 <HAL_I2S_MspInit+0x15c>)
 8003210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003212:	2202      	movs	r2, #2
 8003214:	4013      	ands	r3, r2
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA1     ------> I2S1_CK
    PA2     ------> I2S1_SD
    PB0     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800321a:	243c      	movs	r4, #60	@ 0x3c
 800321c:	193b      	adds	r3, r7, r4
 800321e:	2206      	movs	r2, #6
 8003220:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003222:	193b      	adds	r3, r7, r4
 8003224:	2202      	movs	r2, #2
 8003226:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	193b      	adds	r3, r7, r4
 800322a:	2200      	movs	r2, #0
 800322c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322e:	193b      	adds	r3, r7, r4
 8003230:	2200      	movs	r2, #0
 8003232:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003234:	193b      	adds	r3, r7, r4
 8003236:	2200      	movs	r2, #0
 8003238:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800323a:	193a      	adds	r2, r7, r4
 800323c:	23a0      	movs	r3, #160	@ 0xa0
 800323e:	05db      	lsls	r3, r3, #23
 8003240:	0011      	movs	r1, r2
 8003242:	0018      	movs	r0, r3
 8003244:	f000 feaa 	bl	8003f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003248:	0021      	movs	r1, r4
 800324a:	187b      	adds	r3, r7, r1
 800324c:	2201      	movs	r2, #1
 800324e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003250:	187b      	adds	r3, r7, r1
 8003252:	2202      	movs	r2, #2
 8003254:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003256:	187b      	adds	r3, r7, r1
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325c:	187b      	adds	r3, r7, r1
 800325e:	2200      	movs	r2, #0
 8003260:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003262:	187b      	adds	r3, r7, r1
 8003264:	2200      	movs	r2, #0
 8003266:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003268:	187b      	adds	r3, r7, r1
 800326a:	4a1c      	ldr	r2, [pc, #112]	@ (80032dc <HAL_I2S_MspInit+0x160>)
 800326c:	0019      	movs	r1, r3
 800326e:	0010      	movs	r0, r2
 8003270:	f000 fe94 	bl	8003f9c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8003274:	4b1a      	ldr	r3, [pc, #104]	@ (80032e0 <HAL_I2S_MspInit+0x164>)
 8003276:	4a1b      	ldr	r2, [pc, #108]	@ (80032e4 <HAL_I2S_MspInit+0x168>)
 8003278:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800327a:	4b19      	ldr	r3, [pc, #100]	@ (80032e0 <HAL_I2S_MspInit+0x164>)
 800327c:	2211      	movs	r2, #17
 800327e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003280:	4b17      	ldr	r3, [pc, #92]	@ (80032e0 <HAL_I2S_MspInit+0x164>)
 8003282:	2210      	movs	r2, #16
 8003284:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003286:	4b16      	ldr	r3, [pc, #88]	@ (80032e0 <HAL_I2S_MspInit+0x164>)
 8003288:	2200      	movs	r2, #0
 800328a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800328c:	4b14      	ldr	r3, [pc, #80]	@ (80032e0 <HAL_I2S_MspInit+0x164>)
 800328e:	2280      	movs	r2, #128	@ 0x80
 8003290:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003292:	4b13      	ldr	r3, [pc, #76]	@ (80032e0 <HAL_I2S_MspInit+0x164>)
 8003294:	2280      	movs	r2, #128	@ 0x80
 8003296:	0052      	lsls	r2, r2, #1
 8003298:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800329a:	4b11      	ldr	r3, [pc, #68]	@ (80032e0 <HAL_I2S_MspInit+0x164>)
 800329c:	2280      	movs	r2, #128	@ 0x80
 800329e:	00d2      	lsls	r2, r2, #3
 80032a0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80032a2:	4b0f      	ldr	r3, [pc, #60]	@ (80032e0 <HAL_I2S_MspInit+0x164>)
 80032a4:	2220      	movs	r2, #32
 80032a6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032a8:	4b0d      	ldr	r3, [pc, #52]	@ (80032e0 <HAL_I2S_MspInit+0x164>)
 80032aa:	22c0      	movs	r2, #192	@ 0xc0
 80032ac:	0192      	lsls	r2, r2, #6
 80032ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80032b0:	4b0b      	ldr	r3, [pc, #44]	@ (80032e0 <HAL_I2S_MspInit+0x164>)
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 fbbe 	bl	8003a34 <HAL_DMA_Init>
 80032b8:	1e03      	subs	r3, r0, #0
 80032ba:	d001      	beq.n	80032c0 <HAL_I2S_MspInit+0x144>
    {
      Error_Handler();
 80032bc:	f7ff fca9 	bl	8002c12 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a07      	ldr	r2, [pc, #28]	@ (80032e0 <HAL_I2S_MspInit+0x164>)
 80032c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80032c6:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_I2S_MspInit+0x164>)
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80032cc:	46c0      	nop			@ (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b015      	add	sp, #84	@ 0x54
 80032d2:	bd90      	pop	{r4, r7, pc}
 80032d4:	40013000 	.word	0x40013000
 80032d8:	40021000 	.word	0x40021000
 80032dc:	50000400 	.word	0x50000400
 80032e0:	2000017c 	.word	0x2000017c
 80032e4:	40020008 	.word	0x40020008

080032e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80032e8:	b590      	push	{r4, r7, lr}
 80032ea:	b08f      	sub	sp, #60	@ 0x3c
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032f0:	2410      	movs	r4, #16
 80032f2:	193b      	adds	r3, r7, r4
 80032f4:	0018      	movs	r0, r3
 80032f6:	2328      	movs	r3, #40	@ 0x28
 80032f8:	001a      	movs	r2, r3
 80032fa:	2100      	movs	r1, #0
 80032fc:	f005 fffe 	bl	80092fc <memset>
  if(hrtc->Instance==RTC)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a19      	ldr	r2, [pc, #100]	@ (800336c <HAL_RTC_MspInit+0x84>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d12c      	bne.n	8003364 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800330a:	193b      	adds	r3, r7, r4
 800330c:	2280      	movs	r2, #128	@ 0x80
 800330e:	0292      	lsls	r2, r2, #10
 8003310:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003312:	193b      	adds	r3, r7, r4
 8003314:	2280      	movs	r2, #128	@ 0x80
 8003316:	0052      	lsls	r2, r2, #1
 8003318:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800331a:	193b      	adds	r3, r7, r4
 800331c:	0018      	movs	r0, r3
 800331e:	f002 fe81 	bl	8006024 <HAL_RCCEx_PeriphCLKConfig>
 8003322:	1e03      	subs	r3, r0, #0
 8003324:	d001      	beq.n	800332a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003326:	f7ff fc74 	bl	8002c12 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800332a:	4b11      	ldr	r3, [pc, #68]	@ (8003370 <HAL_RTC_MspInit+0x88>)
 800332c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800332e:	4b10      	ldr	r3, [pc, #64]	@ (8003370 <HAL_RTC_MspInit+0x88>)
 8003330:	2180      	movs	r1, #128	@ 0x80
 8003332:	0209      	lsls	r1, r1, #8
 8003334:	430a      	orrs	r2, r1
 8003336:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003338:	4b0d      	ldr	r3, [pc, #52]	@ (8003370 <HAL_RTC_MspInit+0x88>)
 800333a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800333c:	4b0c      	ldr	r3, [pc, #48]	@ (8003370 <HAL_RTC_MspInit+0x88>)
 800333e:	2180      	movs	r1, #128	@ 0x80
 8003340:	00c9      	lsls	r1, r1, #3
 8003342:	430a      	orrs	r2, r1
 8003344:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003346:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <HAL_RTC_MspInit+0x88>)
 8003348:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800334a:	2380      	movs	r3, #128	@ 0x80
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4013      	ands	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8003354:	2200      	movs	r2, #0
 8003356:	2100      	movs	r1, #0
 8003358:	2002      	movs	r0, #2
 800335a:	f000 fb39 	bl	80039d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800335e:	2002      	movs	r0, #2
 8003360:	f000 fb4b 	bl	80039fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8003364:	46c0      	nop			@ (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b00f      	add	sp, #60	@ 0x3c
 800336a:	bd90      	pop	{r4, r7, pc}
 800336c:	40002800 	.word	0x40002800
 8003370:	40021000 	.word	0x40021000

08003374 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003374:	b590      	push	{r4, r7, lr}
 8003376:	b08b      	sub	sp, #44	@ 0x2c
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	2414      	movs	r4, #20
 800337e:	193b      	adds	r3, r7, r4
 8003380:	0018      	movs	r0, r3
 8003382:	2314      	movs	r3, #20
 8003384:	001a      	movs	r2, r3
 8003386:	2100      	movs	r1, #0
 8003388:	f005 ffb8 	bl	80092fc <memset>
  if(hspi->Instance==SPI2)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a51      	ldr	r2, [pc, #324]	@ (80034d8 <HAL_SPI_MspInit+0x164>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d000      	beq.n	8003398 <HAL_SPI_MspInit+0x24>
 8003396:	e09a      	b.n	80034ce <HAL_SPI_MspInit+0x15a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003398:	4b50      	ldr	r3, [pc, #320]	@ (80034dc <HAL_SPI_MspInit+0x168>)
 800339a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800339c:	4b4f      	ldr	r3, [pc, #316]	@ (80034dc <HAL_SPI_MspInit+0x168>)
 800339e:	2180      	movs	r1, #128	@ 0x80
 80033a0:	01c9      	lsls	r1, r1, #7
 80033a2:	430a      	orrs	r2, r1
 80033a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033a6:	4b4d      	ldr	r3, [pc, #308]	@ (80034dc <HAL_SPI_MspInit+0x168>)
 80033a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033aa:	2380      	movs	r3, #128	@ 0x80
 80033ac:	01db      	lsls	r3, r3, #7
 80033ae:	4013      	ands	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b4:	4b49      	ldr	r3, [pc, #292]	@ (80034dc <HAL_SPI_MspInit+0x168>)
 80033b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033b8:	4b48      	ldr	r3, [pc, #288]	@ (80034dc <HAL_SPI_MspInit+0x168>)
 80033ba:	2101      	movs	r1, #1
 80033bc:	430a      	orrs	r2, r1
 80033be:	635a      	str	r2, [r3, #52]	@ 0x34
 80033c0:	4b46      	ldr	r3, [pc, #280]	@ (80034dc <HAL_SPI_MspInit+0x168>)
 80033c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c4:	2201      	movs	r2, #1
 80033c6:	4013      	ands	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80033cc:	193b      	adds	r3, r7, r4
 80033ce:	2209      	movs	r2, #9
 80033d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d2:	193b      	adds	r3, r7, r4
 80033d4:	2202      	movs	r2, #2
 80033d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	193b      	adds	r3, r7, r4
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033de:	193b      	adds	r3, r7, r4
 80033e0:	2200      	movs	r2, #0
 80033e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80033e4:	193b      	adds	r3, r7, r4
 80033e6:	2200      	movs	r2, #0
 80033e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ea:	193a      	adds	r2, r7, r4
 80033ec:	23a0      	movs	r3, #160	@ 0xa0
 80033ee:	05db      	lsls	r3, r3, #23
 80033f0:	0011      	movs	r1, r2
 80033f2:	0018      	movs	r0, r3
 80033f4:	f000 fdd2 	bl	8003f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033f8:	0021      	movs	r1, r4
 80033fa:	187b      	adds	r3, r7, r1
 80033fc:	2210      	movs	r2, #16
 80033fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003400:	187b      	adds	r3, r7, r1
 8003402:	2202      	movs	r2, #2
 8003404:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003406:	187b      	adds	r3, r7, r1
 8003408:	2200      	movs	r2, #0
 800340a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340c:	187b      	adds	r3, r7, r1
 800340e:	2200      	movs	r2, #0
 8003410:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8003412:	187b      	adds	r3, r7, r1
 8003414:	2201      	movs	r2, #1
 8003416:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003418:	187a      	adds	r2, r7, r1
 800341a:	23a0      	movs	r3, #160	@ 0xa0
 800341c:	05db      	lsls	r3, r3, #23
 800341e:	0011      	movs	r1, r2
 8003420:	0018      	movs	r0, r3
 8003422:	f000 fdbb 	bl	8003f9c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel3;
 8003426:	4b2e      	ldr	r3, [pc, #184]	@ (80034e0 <HAL_SPI_MspInit+0x16c>)
 8003428:	4a2e      	ldr	r2, [pc, #184]	@ (80034e4 <HAL_SPI_MspInit+0x170>)
 800342a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800342c:	4b2c      	ldr	r3, [pc, #176]	@ (80034e0 <HAL_SPI_MspInit+0x16c>)
 800342e:	2212      	movs	r2, #18
 8003430:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003432:	4b2b      	ldr	r3, [pc, #172]	@ (80034e0 <HAL_SPI_MspInit+0x16c>)
 8003434:	2200      	movs	r2, #0
 8003436:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003438:	4b29      	ldr	r3, [pc, #164]	@ (80034e0 <HAL_SPI_MspInit+0x16c>)
 800343a:	2200      	movs	r2, #0
 800343c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800343e:	4b28      	ldr	r3, [pc, #160]	@ (80034e0 <HAL_SPI_MspInit+0x16c>)
 8003440:	2280      	movs	r2, #128	@ 0x80
 8003442:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003444:	4b26      	ldr	r3, [pc, #152]	@ (80034e0 <HAL_SPI_MspInit+0x16c>)
 8003446:	2200      	movs	r2, #0
 8003448:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800344a:	4b25      	ldr	r3, [pc, #148]	@ (80034e0 <HAL_SPI_MspInit+0x16c>)
 800344c:	2200      	movs	r2, #0
 800344e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003450:	4b23      	ldr	r3, [pc, #140]	@ (80034e0 <HAL_SPI_MspInit+0x16c>)
 8003452:	2200      	movs	r2, #0
 8003454:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003456:	4b22      	ldr	r3, [pc, #136]	@ (80034e0 <HAL_SPI_MspInit+0x16c>)
 8003458:	2280      	movs	r2, #128	@ 0x80
 800345a:	0192      	lsls	r2, r2, #6
 800345c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800345e:	4b20      	ldr	r3, [pc, #128]	@ (80034e0 <HAL_SPI_MspInit+0x16c>)
 8003460:	0018      	movs	r0, r3
 8003462:	f000 fae7 	bl	8003a34 <HAL_DMA_Init>
 8003466:	1e03      	subs	r3, r0, #0
 8003468:	d001      	beq.n	800346e <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 800346a:	f7ff fbd2 	bl	8002c12 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a1b      	ldr	r2, [pc, #108]	@ (80034e0 <HAL_SPI_MspInit+0x16c>)
 8003472:	659a      	str	r2, [r3, #88]	@ 0x58
 8003474:	4b1a      	ldr	r3, [pc, #104]	@ (80034e0 <HAL_SPI_MspInit+0x16c>)
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel2;
 800347a:	4b1b      	ldr	r3, [pc, #108]	@ (80034e8 <HAL_SPI_MspInit+0x174>)
 800347c:	4a1b      	ldr	r2, [pc, #108]	@ (80034ec <HAL_SPI_MspInit+0x178>)
 800347e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8003480:	4b19      	ldr	r3, [pc, #100]	@ (80034e8 <HAL_SPI_MspInit+0x174>)
 8003482:	2213      	movs	r2, #19
 8003484:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003486:	4b18      	ldr	r3, [pc, #96]	@ (80034e8 <HAL_SPI_MspInit+0x174>)
 8003488:	2210      	movs	r2, #16
 800348a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800348c:	4b16      	ldr	r3, [pc, #88]	@ (80034e8 <HAL_SPI_MspInit+0x174>)
 800348e:	2200      	movs	r2, #0
 8003490:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003492:	4b15      	ldr	r3, [pc, #84]	@ (80034e8 <HAL_SPI_MspInit+0x174>)
 8003494:	2280      	movs	r2, #128	@ 0x80
 8003496:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003498:	4b13      	ldr	r3, [pc, #76]	@ (80034e8 <HAL_SPI_MspInit+0x174>)
 800349a:	2200      	movs	r2, #0
 800349c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800349e:	4b12      	ldr	r3, [pc, #72]	@ (80034e8 <HAL_SPI_MspInit+0x174>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80034a4:	4b10      	ldr	r3, [pc, #64]	@ (80034e8 <HAL_SPI_MspInit+0x174>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80034aa:	4b0f      	ldr	r3, [pc, #60]	@ (80034e8 <HAL_SPI_MspInit+0x174>)
 80034ac:	2280      	movs	r2, #128	@ 0x80
 80034ae:	0192      	lsls	r2, r2, #6
 80034b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80034b2:	4b0d      	ldr	r3, [pc, #52]	@ (80034e8 <HAL_SPI_MspInit+0x174>)
 80034b4:	0018      	movs	r0, r3
 80034b6:	f000 fabd 	bl	8003a34 <HAL_DMA_Init>
 80034ba:	1e03      	subs	r3, r0, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 80034be:	f7ff fba8 	bl	8002c12 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a08      	ldr	r2, [pc, #32]	@ (80034e8 <HAL_SPI_MspInit+0x174>)
 80034c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80034c8:	4b07      	ldr	r3, [pc, #28]	@ (80034e8 <HAL_SPI_MspInit+0x174>)
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80034ce:	46c0      	nop			@ (mov r8, r8)
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b00b      	add	sp, #44	@ 0x2c
 80034d4:	bd90      	pop	{r4, r7, pc}
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	40003800 	.word	0x40003800
 80034dc:	40021000 	.word	0x40021000
 80034e0:	20000268 	.word	0x20000268
 80034e4:	40020030 	.word	0x40020030
 80034e8:	200002c4 	.word	0x200002c4
 80034ec:	4002001c 	.word	0x4002001c

080034f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	2380      	movs	r3, #128	@ 0x80
 80034fe:	05db      	lsls	r3, r3, #23
 8003500:	429a      	cmp	r2, r3
 8003502:	d10b      	bne.n	800351c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003504:	4b07      	ldr	r3, [pc, #28]	@ (8003524 <HAL_TIM_PWM_MspInit+0x34>)
 8003506:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003508:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <HAL_TIM_PWM_MspInit+0x34>)
 800350a:	2101      	movs	r1, #1
 800350c:	430a      	orrs	r2, r1
 800350e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003510:	4b04      	ldr	r3, [pc, #16]	@ (8003524 <HAL_TIM_PWM_MspInit+0x34>)
 8003512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003514:	2201      	movs	r2, #1
 8003516:	4013      	ands	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800351c:	46c0      	nop			@ (mov r8, r8)
 800351e:	46bd      	mov	sp, r7
 8003520:	b004      	add	sp, #16
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000

08003528 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a18      	ldr	r2, [pc, #96]	@ (8003598 <HAL_TIM_Base_MspInit+0x70>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d10e      	bne.n	8003558 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800353a:	4b18      	ldr	r3, [pc, #96]	@ (800359c <HAL_TIM_Base_MspInit+0x74>)
 800353c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800353e:	4b17      	ldr	r3, [pc, #92]	@ (800359c <HAL_TIM_Base_MspInit+0x74>)
 8003540:	2180      	movs	r1, #128	@ 0x80
 8003542:	0209      	lsls	r1, r1, #8
 8003544:	430a      	orrs	r2, r1
 8003546:	641a      	str	r2, [r3, #64]	@ 0x40
 8003548:	4b14      	ldr	r3, [pc, #80]	@ (800359c <HAL_TIM_Base_MspInit+0x74>)
 800354a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800354c:	2380      	movs	r3, #128	@ 0x80
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	4013      	ands	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003556:	e01a      	b.n	800358e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a10      	ldr	r2, [pc, #64]	@ (80035a0 <HAL_TIM_Base_MspInit+0x78>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d115      	bne.n	800358e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003562:	4b0e      	ldr	r3, [pc, #56]	@ (800359c <HAL_TIM_Base_MspInit+0x74>)
 8003564:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003566:	4b0d      	ldr	r3, [pc, #52]	@ (800359c <HAL_TIM_Base_MspInit+0x74>)
 8003568:	2180      	movs	r1, #128	@ 0x80
 800356a:	0289      	lsls	r1, r1, #10
 800356c:	430a      	orrs	r2, r1
 800356e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003570:	4b0a      	ldr	r3, [pc, #40]	@ (800359c <HAL_TIM_Base_MspInit+0x74>)
 8003572:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003574:	2380      	movs	r3, #128	@ 0x80
 8003576:	029b      	lsls	r3, r3, #10
 8003578:	4013      	ands	r3, r2
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 800357e:	2200      	movs	r2, #0
 8003580:	2101      	movs	r1, #1
 8003582:	2015      	movs	r0, #21
 8003584:	f000 fa24 	bl	80039d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003588:	2015      	movs	r0, #21
 800358a:	f000 fa36 	bl	80039fa <HAL_NVIC_EnableIRQ>
}
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	46bd      	mov	sp, r7
 8003592:	b004      	add	sp, #16
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			@ (mov r8, r8)
 8003598:	40002000 	.word	0x40002000
 800359c:	40021000 	.word	0x40021000
 80035a0:	40014400 	.word	0x40014400

080035a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b089      	sub	sp, #36	@ 0x24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ac:	240c      	movs	r4, #12
 80035ae:	193b      	adds	r3, r7, r4
 80035b0:	0018      	movs	r0, r3
 80035b2:	2314      	movs	r3, #20
 80035b4:	001a      	movs	r2, r3
 80035b6:	2100      	movs	r1, #0
 80035b8:	f005 fea0 	bl	80092fc <memset>
  if(htim->Instance==TIM2)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	2380      	movs	r3, #128	@ 0x80
 80035c2:	05db      	lsls	r3, r3, #23
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d121      	bne.n	800360c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035c8:	4b12      	ldr	r3, [pc, #72]	@ (8003614 <HAL_TIM_MspPostInit+0x70>)
 80035ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035cc:	4b11      	ldr	r3, [pc, #68]	@ (8003614 <HAL_TIM_MspPostInit+0x70>)
 80035ce:	2104      	movs	r1, #4
 80035d0:	430a      	orrs	r2, r1
 80035d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80035d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003614 <HAL_TIM_MspPostInit+0x70>)
 80035d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035d8:	2204      	movs	r2, #4
 80035da:	4013      	ands	r3, r2
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_SHIFT_nOE_Pin;
 80035e0:	0021      	movs	r1, r4
 80035e2:	187b      	adds	r3, r7, r1
 80035e4:	2240      	movs	r2, #64	@ 0x40
 80035e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e8:	187b      	adds	r3, r7, r1
 80035ea:	2202      	movs	r2, #2
 80035ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	187b      	adds	r3, r7, r1
 80035f0:	2200      	movs	r2, #0
 80035f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f4:	187b      	adds	r3, r7, r1
 80035f6:	2200      	movs	r2, #0
 80035f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	2202      	movs	r2, #2
 80035fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_SHIFT_nOE_GPIO_Port, &GPIO_InitStruct);
 8003600:	187b      	adds	r3, r7, r1
 8003602:	4a05      	ldr	r2, [pc, #20]	@ (8003618 <HAL_TIM_MspPostInit+0x74>)
 8003604:	0019      	movs	r1, r3
 8003606:	0010      	movs	r0, r2
 8003608:	f000 fcc8 	bl	8003f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800360c:	46c0      	nop			@ (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b009      	add	sp, #36	@ 0x24
 8003612:	bd90      	pop	{r4, r7, pc}
 8003614:	40021000 	.word	0x40021000
 8003618:	50000800 	.word	0x50000800

0800361c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003620:	46c0      	nop			@ (mov r8, r8)
 8003622:	e7fd      	b.n	8003620 <NMI_Handler+0x4>

08003624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003628:	46c0      	nop			@ (mov r8, r8)
 800362a:	e7fd      	b.n	8003628 <HardFault_Handler+0x4>

0800362c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003630:	46c0      	nop			@ (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800363a:	46c0      	nop			@ (mov r8, r8)
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003644:	f000 f8fc 	bl	8003840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003648:	46c0      	nop			@ (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003654:	4b03      	ldr	r3, [pc, #12]	@ (8003664 <RTC_TAMP_IRQHandler+0x14>)
 8003656:	0018      	movs	r0, r3
 8003658:	f003 fcf0 	bl	800703c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800365c:	46c0      	nop			@ (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			@ (mov r8, r8)
 8003664:	200001d8 	.word	0x200001d8

08003668 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800366c:	46c0      	nop			@ (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_EXTI_Pin);
 8003676:	2001      	movs	r0, #1
 8003678:	f000 fe4a 	bl	8004310 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_EXTI_Pin);
 800367c:	2002      	movs	r0, #2
 800367e:	f000 fe47 	bl	8004310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_EXTI_Pin);
 800368c:	2004      	movs	r0, #4
 800368e:	f000 fe3f 	bl	8004310 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_EXTI_Pin);
 8003692:	2008      	movs	r0, #8
 8003694:	f000 fe3c 	bl	8004310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003698:	46c0      	nop			@ (mov r8, r8)
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_SWITCH_EXTI_Pin);
 80036a2:	2010      	movs	r0, #16
 80036a4:	f000 fe34 	bl	8004310 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_EXTI_Pin);
 80036a8:	2380      	movs	r3, #128	@ 0x80
 80036aa:	021b      	lsls	r3, r3, #8
 80036ac:	0018      	movs	r0, r3
 80036ae:	f000 fe2f 	bl	8004310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80036b2:	46c0      	nop			@ (mov r8, r8)
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80036bc:	4b03      	ldr	r3, [pc, #12]	@ (80036cc <DMA1_Channel1_IRQHandler+0x14>)
 80036be:	0018      	movs	r0, r3
 80036c0:	f000 fb2a 	bl	8003d18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80036c4:	46c0      	nop			@ (mov r8, r8)
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			@ (mov r8, r8)
 80036cc:	2000017c 	.word	0x2000017c

080036d0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80036d4:	4b05      	ldr	r3, [pc, #20]	@ (80036ec <DMA1_Channel2_3_IRQHandler+0x1c>)
 80036d6:	0018      	movs	r0, r3
 80036d8:	f000 fb1e 	bl	8003d18 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80036dc:	4b04      	ldr	r3, [pc, #16]	@ (80036f0 <DMA1_Channel2_3_IRQHandler+0x20>)
 80036de:	0018      	movs	r0, r3
 80036e0:	f000 fb1a 	bl	8003d18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80036e4:	46c0      	nop			@ (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			@ (mov r8, r8)
 80036ec:	200002c4 	.word	0x200002c4
 80036f0:	20000268 	.word	0x20000268

080036f4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80036f8:	4b03      	ldr	r3, [pc, #12]	@ (8003708 <TIM16_IRQHandler+0x14>)
 80036fa:	0018      	movs	r0, r3
 80036fc:	f005 f812 	bl	8008724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003700:	46c0      	nop			@ (mov r8, r8)
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	200003b8 	.word	0x200003b8

0800370c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003710:	46c0      	nop			@ (mov r8, r8)
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003718:	480d      	ldr	r0, [pc, #52]	@ (8003750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800371a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800371c:	f7ff fff6 	bl	800370c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003720:	480c      	ldr	r0, [pc, #48]	@ (8003754 <LoopForever+0x6>)
  ldr r1, =_edata
 8003722:	490d      	ldr	r1, [pc, #52]	@ (8003758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003724:	4a0d      	ldr	r2, [pc, #52]	@ (800375c <LoopForever+0xe>)
  movs r3, #0
 8003726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003728:	e002      	b.n	8003730 <LoopCopyDataInit>

0800372a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800372a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800372c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800372e:	3304      	adds	r3, #4

08003730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003734:	d3f9      	bcc.n	800372a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003736:	4a0a      	ldr	r2, [pc, #40]	@ (8003760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003738:	4c0a      	ldr	r4, [pc, #40]	@ (8003764 <LoopForever+0x16>)
  movs r3, #0
 800373a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800373c:	e001      	b.n	8003742 <LoopFillZerobss>

0800373e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800373e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003740:	3204      	adds	r2, #4

08003742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003744:	d3fb      	bcc.n	800373e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003746:	f005 fde1 	bl	800930c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800374a:	f7fd ff4d 	bl	80015e8 <main>

0800374e <LoopForever>:

LoopForever:
  b LoopForever
 800374e:	e7fe      	b.n	800374e <LoopForever>
  ldr   r0, =_estack
 8003750:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003758:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800375c:	0800947c 	.word	0x0800947c
  ldr r2, =_sbss
 8003760:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8003764:	200005f8 	.word	0x200005f8

08003768 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003768:	e7fe      	b.n	8003768 <ADC1_IRQHandler>
	...

0800376c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003772:	1dfb      	adds	r3, r7, #7
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003778:	4b0b      	ldr	r3, [pc, #44]	@ (80037a8 <HAL_Init+0x3c>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4b0a      	ldr	r3, [pc, #40]	@ (80037a8 <HAL_Init+0x3c>)
 800377e:	2180      	movs	r1, #128	@ 0x80
 8003780:	0049      	lsls	r1, r1, #1
 8003782:	430a      	orrs	r2, r1
 8003784:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003786:	2003      	movs	r0, #3
 8003788:	f000 f810 	bl	80037ac <HAL_InitTick>
 800378c:	1e03      	subs	r3, r0, #0
 800378e:	d003      	beq.n	8003798 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003790:	1dfb      	adds	r3, r7, #7
 8003792:	2201      	movs	r2, #1
 8003794:	701a      	strb	r2, [r3, #0]
 8003796:	e001      	b.n	800379c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003798:	f7ff fc62 	bl	8003060 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800379c:	1dfb      	adds	r3, r7, #7
 800379e:	781b      	ldrb	r3, [r3, #0]
}
 80037a0:	0018      	movs	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b002      	add	sp, #8
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40022000 	.word	0x40022000

080037ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037ac:	b590      	push	{r4, r7, lr}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80037b4:	230f      	movs	r3, #15
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80037bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003834 <HAL_InitTick+0x88>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d02b      	beq.n	800381c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80037c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003838 <HAL_InitTick+0x8c>)
 80037c6:	681c      	ldr	r4, [r3, #0]
 80037c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003834 <HAL_InitTick+0x88>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	0019      	movs	r1, r3
 80037ce:	23fa      	movs	r3, #250	@ 0xfa
 80037d0:	0098      	lsls	r0, r3, #2
 80037d2:	f7fc fc97 	bl	8000104 <__udivsi3>
 80037d6:	0003      	movs	r3, r0
 80037d8:	0019      	movs	r1, r3
 80037da:	0020      	movs	r0, r4
 80037dc:	f7fc fc92 	bl	8000104 <__udivsi3>
 80037e0:	0003      	movs	r3, r0
 80037e2:	0018      	movs	r0, r3
 80037e4:	f000 f919 	bl	8003a1a <HAL_SYSTICK_Config>
 80037e8:	1e03      	subs	r3, r0, #0
 80037ea:	d112      	bne.n	8003812 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d80a      	bhi.n	8003808 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	2301      	movs	r3, #1
 80037f6:	425b      	negs	r3, r3
 80037f8:	2200      	movs	r2, #0
 80037fa:	0018      	movs	r0, r3
 80037fc:	f000 f8e8 	bl	80039d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003800:	4b0e      	ldr	r3, [pc, #56]	@ (800383c <HAL_InitTick+0x90>)
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e00d      	b.n	8003824 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003808:	230f      	movs	r3, #15
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	2201      	movs	r2, #1
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	e008      	b.n	8003824 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003812:	230f      	movs	r3, #15
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	e003      	b.n	8003824 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800381c:	230f      	movs	r3, #15
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	2201      	movs	r2, #1
 8003822:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003824:	230f      	movs	r3, #15
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	781b      	ldrb	r3, [r3, #0]
}
 800382a:	0018      	movs	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	b005      	add	sp, #20
 8003830:	bd90      	pop	{r4, r7, pc}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	20000094 	.word	0x20000094
 8003838:	2000008c 	.word	0x2000008c
 800383c:	20000090 	.word	0x20000090

08003840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003844:	4b05      	ldr	r3, [pc, #20]	@ (800385c <HAL_IncTick+0x1c>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	001a      	movs	r2, r3
 800384a:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <HAL_IncTick+0x20>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	18d2      	adds	r2, r2, r3
 8003850:	4b03      	ldr	r3, [pc, #12]	@ (8003860 <HAL_IncTick+0x20>)
 8003852:	601a      	str	r2, [r3, #0]
}
 8003854:	46c0      	nop			@ (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	20000094 	.word	0x20000094
 8003860:	200005f4 	.word	0x200005f4

08003864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  return uwTick;
 8003868:	4b02      	ldr	r3, [pc, #8]	@ (8003874 <HAL_GetTick+0x10>)
 800386a:	681b      	ldr	r3, [r3, #0]
}
 800386c:	0018      	movs	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	200005f4 	.word	0x200005f4

08003878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	0002      	movs	r2, r0
 8003880:	1dfb      	adds	r3, r7, #7
 8003882:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003884:	1dfb      	adds	r3, r7, #7
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b7f      	cmp	r3, #127	@ 0x7f
 800388a:	d809      	bhi.n	80038a0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388c:	1dfb      	adds	r3, r7, #7
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	001a      	movs	r2, r3
 8003892:	231f      	movs	r3, #31
 8003894:	401a      	ands	r2, r3
 8003896:	4b04      	ldr	r3, [pc, #16]	@ (80038a8 <__NVIC_EnableIRQ+0x30>)
 8003898:	2101      	movs	r1, #1
 800389a:	4091      	lsls	r1, r2
 800389c:	000a      	movs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80038a0:	46c0      	nop			@ (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b002      	add	sp, #8
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	e000e100 	.word	0xe000e100

080038ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038ac:	b590      	push	{r4, r7, lr}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	0002      	movs	r2, r0
 80038b4:	6039      	str	r1, [r7, #0]
 80038b6:	1dfb      	adds	r3, r7, #7
 80038b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b7f      	cmp	r3, #127	@ 0x7f
 80038c0:	d828      	bhi.n	8003914 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038c2:	4a2f      	ldr	r2, [pc, #188]	@ (8003980 <__NVIC_SetPriority+0xd4>)
 80038c4:	1dfb      	adds	r3, r7, #7
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	b25b      	sxtb	r3, r3
 80038ca:	089b      	lsrs	r3, r3, #2
 80038cc:	33c0      	adds	r3, #192	@ 0xc0
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	589b      	ldr	r3, [r3, r2]
 80038d2:	1dfa      	adds	r2, r7, #7
 80038d4:	7812      	ldrb	r2, [r2, #0]
 80038d6:	0011      	movs	r1, r2
 80038d8:	2203      	movs	r2, #3
 80038da:	400a      	ands	r2, r1
 80038dc:	00d2      	lsls	r2, r2, #3
 80038de:	21ff      	movs	r1, #255	@ 0xff
 80038e0:	4091      	lsls	r1, r2
 80038e2:	000a      	movs	r2, r1
 80038e4:	43d2      	mvns	r2, r2
 80038e6:	401a      	ands	r2, r3
 80038e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	019b      	lsls	r3, r3, #6
 80038ee:	22ff      	movs	r2, #255	@ 0xff
 80038f0:	401a      	ands	r2, r3
 80038f2:	1dfb      	adds	r3, r7, #7
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	0018      	movs	r0, r3
 80038f8:	2303      	movs	r3, #3
 80038fa:	4003      	ands	r3, r0
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003900:	481f      	ldr	r0, [pc, #124]	@ (8003980 <__NVIC_SetPriority+0xd4>)
 8003902:	1dfb      	adds	r3, r7, #7
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	b25b      	sxtb	r3, r3
 8003908:	089b      	lsrs	r3, r3, #2
 800390a:	430a      	orrs	r2, r1
 800390c:	33c0      	adds	r3, #192	@ 0xc0
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003912:	e031      	b.n	8003978 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003914:	4a1b      	ldr	r2, [pc, #108]	@ (8003984 <__NVIC_SetPriority+0xd8>)
 8003916:	1dfb      	adds	r3, r7, #7
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	0019      	movs	r1, r3
 800391c:	230f      	movs	r3, #15
 800391e:	400b      	ands	r3, r1
 8003920:	3b08      	subs	r3, #8
 8003922:	089b      	lsrs	r3, r3, #2
 8003924:	3306      	adds	r3, #6
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	18d3      	adds	r3, r2, r3
 800392a:	3304      	adds	r3, #4
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	1dfa      	adds	r2, r7, #7
 8003930:	7812      	ldrb	r2, [r2, #0]
 8003932:	0011      	movs	r1, r2
 8003934:	2203      	movs	r2, #3
 8003936:	400a      	ands	r2, r1
 8003938:	00d2      	lsls	r2, r2, #3
 800393a:	21ff      	movs	r1, #255	@ 0xff
 800393c:	4091      	lsls	r1, r2
 800393e:	000a      	movs	r2, r1
 8003940:	43d2      	mvns	r2, r2
 8003942:	401a      	ands	r2, r3
 8003944:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	019b      	lsls	r3, r3, #6
 800394a:	22ff      	movs	r2, #255	@ 0xff
 800394c:	401a      	ands	r2, r3
 800394e:	1dfb      	adds	r3, r7, #7
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	0018      	movs	r0, r3
 8003954:	2303      	movs	r3, #3
 8003956:	4003      	ands	r3, r0
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800395c:	4809      	ldr	r0, [pc, #36]	@ (8003984 <__NVIC_SetPriority+0xd8>)
 800395e:	1dfb      	adds	r3, r7, #7
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	001c      	movs	r4, r3
 8003964:	230f      	movs	r3, #15
 8003966:	4023      	ands	r3, r4
 8003968:	3b08      	subs	r3, #8
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	430a      	orrs	r2, r1
 800396e:	3306      	adds	r3, #6
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	18c3      	adds	r3, r0, r3
 8003974:	3304      	adds	r3, #4
 8003976:	601a      	str	r2, [r3, #0]
}
 8003978:	46c0      	nop			@ (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b003      	add	sp, #12
 800397e:	bd90      	pop	{r4, r7, pc}
 8003980:	e000e100 	.word	0xe000e100
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	1e5a      	subs	r2, r3, #1
 8003994:	2380      	movs	r3, #128	@ 0x80
 8003996:	045b      	lsls	r3, r3, #17
 8003998:	429a      	cmp	r2, r3
 800399a:	d301      	bcc.n	80039a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800399c:	2301      	movs	r3, #1
 800399e:	e010      	b.n	80039c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039a0:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <SysTick_Config+0x44>)
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	3a01      	subs	r2, #1
 80039a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039a8:	2301      	movs	r3, #1
 80039aa:	425b      	negs	r3, r3
 80039ac:	2103      	movs	r1, #3
 80039ae:	0018      	movs	r0, r3
 80039b0:	f7ff ff7c 	bl	80038ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b4:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <SysTick_Config+0x44>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ba:	4b04      	ldr	r3, [pc, #16]	@ (80039cc <SysTick_Config+0x44>)
 80039bc:	2207      	movs	r2, #7
 80039be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	0018      	movs	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b002      	add	sp, #8
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	e000e010 	.word	0xe000e010

080039d0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	210f      	movs	r1, #15
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	1c02      	adds	r2, r0, #0
 80039e0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	187b      	adds	r3, r7, r1
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	b25b      	sxtb	r3, r3
 80039ea:	0011      	movs	r1, r2
 80039ec:	0018      	movs	r0, r3
 80039ee:	f7ff ff5d 	bl	80038ac <__NVIC_SetPriority>
}
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b004      	add	sp, #16
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	0002      	movs	r2, r0
 8003a02:	1dfb      	adds	r3, r7, #7
 8003a04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a06:	1dfb      	adds	r3, r7, #7
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	b25b      	sxtb	r3, r3
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f7ff ff33 	bl	8003878 <__NVIC_EnableIRQ>
}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b002      	add	sp, #8
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7ff ffaf 	bl	8003988 <SysTick_Config>
 8003a2a:	0003      	movs	r3, r0
}
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b002      	add	sp, #8
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e077      	b.n	8003b36 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a3d      	ldr	r2, [pc, #244]	@ (8003b40 <HAL_DMA_Init+0x10c>)
 8003a4c:	4694      	mov	ip, r2
 8003a4e:	4463      	add	r3, ip
 8003a50:	2114      	movs	r1, #20
 8003a52:	0018      	movs	r0, r3
 8003a54:	f7fc fb56 	bl	8000104 <__udivsi3>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	009a      	lsls	r2, r3, #2
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2225      	movs	r2, #37	@ 0x25
 8003a64:	2102      	movs	r1, #2
 8003a66:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4934      	ldr	r1, [pc, #208]	@ (8003b44 <HAL_DMA_Init+0x110>)
 8003a74:	400a      	ands	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6819      	ldr	r1, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f000 fa23 	bl	8003efc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	2380      	movs	r3, #128	@ 0x80
 8003abc:	01db      	lsls	r3, r3, #7
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d102      	bne.n	8003ac8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad0:	213f      	movs	r1, #63	@ 0x3f
 8003ad2:	400a      	ands	r2, r1
 8003ad4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003ade:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d011      	beq.n	8003b0c <HAL_DMA_Init+0xd8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d80d      	bhi.n	8003b0c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	0018      	movs	r0, r3
 8003af4:	f000 fa2e 	bl	8003f54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	e008      	b.n	8003b1e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2225      	movs	r2, #37	@ 0x25
 8003b28:	2101      	movs	r1, #1
 8003b2a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2224      	movs	r2, #36	@ 0x24
 8003b30:	2100      	movs	r1, #0
 8003b32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	0018      	movs	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b002      	add	sp, #8
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	bffdfff8 	.word	0xbffdfff8
 8003b44:	ffff800f 	.word	0xffff800f

08003b48 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b56:	2317      	movs	r3, #23
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2224      	movs	r2, #36	@ 0x24
 8003b62:	5c9b      	ldrb	r3, [r3, r2]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_DMA_Start_IT+0x24>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e06f      	b.n	8003c4c <HAL_DMA_Start_IT+0x104>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2224      	movs	r2, #36	@ 0x24
 8003b70:	2101      	movs	r1, #1
 8003b72:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2225      	movs	r2, #37	@ 0x25
 8003b78:	5c9b      	ldrb	r3, [r3, r2]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d157      	bne.n	8003c30 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2225      	movs	r2, #37	@ 0x25
 8003b84:	2102      	movs	r1, #2
 8003b86:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2101      	movs	r1, #1
 8003b9a:	438a      	bics	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f969 	bl	8003e7c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d008      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	210e      	movs	r1, #14
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e00f      	b.n	8003be4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2104      	movs	r1, #4
 8003bd0:	438a      	bics	r2, r1
 8003bd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	210a      	movs	r1, #10
 8003be0:	430a      	orrs	r2, r1
 8003be2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	2380      	movs	r3, #128	@ 0x80
 8003bec:	025b      	lsls	r3, r3, #9
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d008      	beq.n	8003c04 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfc:	2180      	movs	r1, #128	@ 0x80
 8003bfe:	0049      	lsls	r1, r1, #1
 8003c00:	430a      	orrs	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d008      	beq.n	8003c1e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c16:	2180      	movs	r1, #128	@ 0x80
 8003c18:	0049      	lsls	r1, r1, #1
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2101      	movs	r1, #1
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	e00a      	b.n	8003c46 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2280      	movs	r2, #128	@ 0x80
 8003c34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2224      	movs	r2, #36	@ 0x24
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003c3e:	2317      	movs	r3, #23
 8003c40:	18fb      	adds	r3, r7, r3
 8003c42:	2201      	movs	r2, #1
 8003c44:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003c46:	2317      	movs	r3, #23
 8003c48:	18fb      	adds	r3, r7, r3
 8003c4a:	781b      	ldrb	r3, [r3, #0]
}
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b006      	add	sp, #24
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e050      	b.n	8003d08 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2225      	movs	r2, #37	@ 0x25
 8003c6a:	5c9b      	ldrb	r3, [r3, r2]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d008      	beq.n	8003c84 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2204      	movs	r2, #4
 8003c76:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2224      	movs	r2, #36	@ 0x24
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e041      	b.n	8003d08 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	210e      	movs	r1, #14
 8003c90:	438a      	bics	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9e:	491c      	ldr	r1, [pc, #112]	@ (8003d10 <HAL_DMA_Abort+0xbc>)
 8003ca0:	400a      	ands	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2101      	movs	r1, #1
 8003cb0:	438a      	bics	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003cb4:	4b17      	ldr	r3, [pc, #92]	@ (8003d14 <HAL_DMA_Abort+0xc0>)
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbc:	221c      	movs	r2, #28
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	4b13      	ldr	r3, [pc, #76]	@ (8003d14 <HAL_DMA_Abort+0xc0>)
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003cd2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00c      	beq.n	8003cf6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce6:	490a      	ldr	r1, [pc, #40]	@ (8003d10 <HAL_DMA_Abort+0xbc>)
 8003ce8:	400a      	ands	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003cf4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2225      	movs	r2, #37	@ 0x25
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2224      	movs	r2, #36	@ 0x24
 8003d02:	2100      	movs	r1, #0
 8003d04:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	0018      	movs	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	fffffeff 	.word	0xfffffeff
 8003d14:	40020000 	.word	0x40020000

08003d18 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003d20:	4b55      	ldr	r3, [pc, #340]	@ (8003e78 <HAL_DMA_IRQHandler+0x160>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d32:	221c      	movs	r2, #28
 8003d34:	4013      	ands	r3, r2
 8003d36:	2204      	movs	r2, #4
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	0013      	movs	r3, r2
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d027      	beq.n	8003d92 <HAL_DMA_IRQHandler+0x7a>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2204      	movs	r2, #4
 8003d46:	4013      	ands	r3, r2
 8003d48:	d023      	beq.n	8003d92 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2220      	movs	r2, #32
 8003d52:	4013      	ands	r3, r2
 8003d54:	d107      	bne.n	8003d66 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2104      	movs	r1, #4
 8003d62:	438a      	bics	r2, r1
 8003d64:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003d66:	4b44      	ldr	r3, [pc, #272]	@ (8003e78 <HAL_DMA_IRQHandler+0x160>)
 8003d68:	6859      	ldr	r1, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	221c      	movs	r2, #28
 8003d70:	4013      	ands	r3, r2
 8003d72:	2204      	movs	r2, #4
 8003d74:	409a      	lsls	r2, r3
 8003d76:	4b40      	ldr	r3, [pc, #256]	@ (8003e78 <HAL_DMA_IRQHandler+0x160>)
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d100      	bne.n	8003d86 <HAL_DMA_IRQHandler+0x6e>
 8003d84:	e073      	b.n	8003e6e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	0010      	movs	r0, r2
 8003d8e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003d90:	e06d      	b.n	8003e6e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	221c      	movs	r2, #28
 8003d98:	4013      	ands	r3, r2
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	0013      	movs	r3, r2
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4013      	ands	r3, r2
 8003da4:	d02e      	beq.n	8003e04 <HAL_DMA_IRQHandler+0xec>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2202      	movs	r2, #2
 8003daa:	4013      	ands	r3, r2
 8003dac:	d02a      	beq.n	8003e04 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2220      	movs	r2, #32
 8003db6:	4013      	ands	r3, r2
 8003db8:	d10b      	bne.n	8003dd2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	210a      	movs	r1, #10
 8003dc6:	438a      	bics	r2, r1
 8003dc8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2225      	movs	r2, #37	@ 0x25
 8003dce:	2101      	movs	r1, #1
 8003dd0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003dd2:	4b29      	ldr	r3, [pc, #164]	@ (8003e78 <HAL_DMA_IRQHandler+0x160>)
 8003dd4:	6859      	ldr	r1, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	221c      	movs	r2, #28
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2202      	movs	r2, #2
 8003de0:	409a      	lsls	r2, r3
 8003de2:	4b25      	ldr	r3, [pc, #148]	@ (8003e78 <HAL_DMA_IRQHandler+0x160>)
 8003de4:	430a      	orrs	r2, r1
 8003de6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2224      	movs	r2, #36	@ 0x24
 8003dec:	2100      	movs	r1, #0
 8003dee:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d03a      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	0010      	movs	r0, r2
 8003e00:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003e02:	e034      	b.n	8003e6e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	221c      	movs	r2, #28
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	409a      	lsls	r2, r3
 8003e10:	0013      	movs	r3, r2
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4013      	ands	r3, r2
 8003e16:	d02b      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x158>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d027      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	210e      	movs	r1, #14
 8003e2c:	438a      	bics	r2, r1
 8003e2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003e30:	4b11      	ldr	r3, [pc, #68]	@ (8003e78 <HAL_DMA_IRQHandler+0x160>)
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e38:	221c      	movs	r2, #28
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	4b0d      	ldr	r3, [pc, #52]	@ (8003e78 <HAL_DMA_IRQHandler+0x160>)
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2225      	movs	r2, #37	@ 0x25
 8003e50:	2101      	movs	r1, #1
 8003e52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2224      	movs	r2, #36	@ 0x24
 8003e58:	2100      	movs	r1, #0
 8003e5a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	0010      	movs	r0, r2
 8003e6c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	46c0      	nop			@ (mov r8, r8)
}
 8003e72:	46bd      	mov	sp, r7
 8003e74:	b004      	add	sp, #16
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40020000 	.word	0x40020000

08003e7c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003e92:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d004      	beq.n	8003ea6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003ea4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003ea6:	4b14      	ldr	r3, [pc, #80]	@ (8003ef8 <DMA_SetConfig+0x7c>)
 8003ea8:	6859      	ldr	r1, [r3, #4]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	221c      	movs	r2, #28
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	4b10      	ldr	r3, [pc, #64]	@ (8003ef8 <DMA_SetConfig+0x7c>)
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d108      	bne.n	8003ede <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003edc:	e007      	b.n	8003eee <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	60da      	str	r2, [r3, #12]
}
 8003eee:	46c0      	nop			@ (mov r8, r8)
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b004      	add	sp, #16
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			@ (mov r8, r8)
 8003ef8:	40020000 	.word	0x40020000

08003efc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f08:	089b      	lsrs	r3, r3, #2
 8003f0a:	4a10      	ldr	r2, [pc, #64]	@ (8003f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003f0c:	4694      	mov	ip, r2
 8003f0e:	4463      	add	r3, ip
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	001a      	movs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	001a      	movs	r2, r3
 8003f1e:	23ff      	movs	r3, #255	@ 0xff
 8003f20:	4013      	ands	r3, r2
 8003f22:	3b08      	subs	r3, #8
 8003f24:	2114      	movs	r1, #20
 8003f26:	0018      	movs	r0, r3
 8003f28:	f7fc f8ec 	bl	8000104 <__udivsi3>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a07      	ldr	r2, [pc, #28]	@ (8003f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003f34:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	221f      	movs	r2, #31
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003f44:	46c0      	nop			@ (mov r8, r8)
 8003f46:	46bd      	mov	sp, r7
 8003f48:	b004      	add	sp, #16
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	10008200 	.word	0x10008200
 8003f50:	40020880 	.word	0x40020880

08003f54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	223f      	movs	r2, #63	@ 0x3f
 8003f62:	4013      	ands	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4a0a      	ldr	r2, [pc, #40]	@ (8003f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f6a:	4694      	mov	ip, r2
 8003f6c:	4463      	add	r3, ip
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	001a      	movs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a07      	ldr	r2, [pc, #28]	@ (8003f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f7a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	2203      	movs	r2, #3
 8003f82:	4013      	ands	r3, r2
 8003f84:	2201      	movs	r2, #1
 8003f86:	409a      	lsls	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003f8c:	46c0      	nop			@ (mov r8, r8)
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b004      	add	sp, #16
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	1000823f 	.word	0x1000823f
 8003f98:	40020940 	.word	0x40020940

08003f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003faa:	e147      	b.n	800423c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4091      	lsls	r1, r2
 8003fb6:	000a      	movs	r2, r1
 8003fb8:	4013      	ands	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d100      	bne.n	8003fc4 <HAL_GPIO_Init+0x28>
 8003fc2:	e138      	b.n	8004236 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2203      	movs	r2, #3
 8003fca:	4013      	ands	r3, r2
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d005      	beq.n	8003fdc <HAL_GPIO_Init+0x40>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d130      	bne.n	800403e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	409a      	lsls	r2, r3
 8003fea:	0013      	movs	r3, r2
 8003fec:	43da      	mvns	r2, r3
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	0013      	movs	r3, r2
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004012:	2201      	movs	r2, #1
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	409a      	lsls	r2, r3
 8004018:	0013      	movs	r3, r2
 800401a:	43da      	mvns	r2, r3
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4013      	ands	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	091b      	lsrs	r3, r3, #4
 8004028:	2201      	movs	r2, #1
 800402a:	401a      	ands	r2, r3
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	409a      	lsls	r2, r3
 8004030:	0013      	movs	r3, r2
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2203      	movs	r2, #3
 8004044:	4013      	ands	r3, r2
 8004046:	2b03      	cmp	r3, #3
 8004048:	d017      	beq.n	800407a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	2203      	movs	r2, #3
 8004056:	409a      	lsls	r2, r3
 8004058:	0013      	movs	r3, r2
 800405a:	43da      	mvns	r2, r3
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4013      	ands	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	409a      	lsls	r2, r3
 800406c:	0013      	movs	r3, r2
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2203      	movs	r2, #3
 8004080:	4013      	ands	r3, r2
 8004082:	2b02      	cmp	r3, #2
 8004084:	d123      	bne.n	80040ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	08da      	lsrs	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3208      	adds	r2, #8
 800408e:	0092      	lsls	r2, r2, #2
 8004090:	58d3      	ldr	r3, [r2, r3]
 8004092:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2207      	movs	r2, #7
 8004098:	4013      	ands	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	220f      	movs	r2, #15
 800409e:	409a      	lsls	r2, r3
 80040a0:	0013      	movs	r3, r2
 80040a2:	43da      	mvns	r2, r3
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4013      	ands	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2107      	movs	r1, #7
 80040b2:	400b      	ands	r3, r1
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	409a      	lsls	r2, r3
 80040b8:	0013      	movs	r3, r2
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	08da      	lsrs	r2, r3, #3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3208      	adds	r2, #8
 80040c8:	0092      	lsls	r2, r2, #2
 80040ca:	6939      	ldr	r1, [r7, #16]
 80040cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	2203      	movs	r2, #3
 80040da:	409a      	lsls	r2, r3
 80040dc:	0013      	movs	r3, r2
 80040de:	43da      	mvns	r2, r3
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2203      	movs	r2, #3
 80040ec:	401a      	ands	r2, r3
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	409a      	lsls	r2, r3
 80040f4:	0013      	movs	r3, r2
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	23c0      	movs	r3, #192	@ 0xc0
 8004108:	029b      	lsls	r3, r3, #10
 800410a:	4013      	ands	r3, r2
 800410c:	d100      	bne.n	8004110 <HAL_GPIO_Init+0x174>
 800410e:	e092      	b.n	8004236 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004110:	4a50      	ldr	r2, [pc, #320]	@ (8004254 <HAL_GPIO_Init+0x2b8>)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	089b      	lsrs	r3, r3, #2
 8004116:	3318      	adds	r3, #24
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	589b      	ldr	r3, [r3, r2]
 800411c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2203      	movs	r2, #3
 8004122:	4013      	ands	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	220f      	movs	r2, #15
 8004128:	409a      	lsls	r2, r3
 800412a:	0013      	movs	r3, r2
 800412c:	43da      	mvns	r2, r3
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	4013      	ands	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	23a0      	movs	r3, #160	@ 0xa0
 8004138:	05db      	lsls	r3, r3, #23
 800413a:	429a      	cmp	r2, r3
 800413c:	d013      	beq.n	8004166 <HAL_GPIO_Init+0x1ca>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a45      	ldr	r2, [pc, #276]	@ (8004258 <HAL_GPIO_Init+0x2bc>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00d      	beq.n	8004162 <HAL_GPIO_Init+0x1c6>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a44      	ldr	r2, [pc, #272]	@ (800425c <HAL_GPIO_Init+0x2c0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d007      	beq.n	800415e <HAL_GPIO_Init+0x1c2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a43      	ldr	r2, [pc, #268]	@ (8004260 <HAL_GPIO_Init+0x2c4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d101      	bne.n	800415a <HAL_GPIO_Init+0x1be>
 8004156:	2303      	movs	r3, #3
 8004158:	e006      	b.n	8004168 <HAL_GPIO_Init+0x1cc>
 800415a:	2305      	movs	r3, #5
 800415c:	e004      	b.n	8004168 <HAL_GPIO_Init+0x1cc>
 800415e:	2302      	movs	r3, #2
 8004160:	e002      	b.n	8004168 <HAL_GPIO_Init+0x1cc>
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <HAL_GPIO_Init+0x1cc>
 8004166:	2300      	movs	r3, #0
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	2103      	movs	r1, #3
 800416c:	400a      	ands	r2, r1
 800416e:	00d2      	lsls	r2, r2, #3
 8004170:	4093      	lsls	r3, r2
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004178:	4936      	ldr	r1, [pc, #216]	@ (8004254 <HAL_GPIO_Init+0x2b8>)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	089b      	lsrs	r3, r3, #2
 800417e:	3318      	adds	r3, #24
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004186:	4b33      	ldr	r3, [pc, #204]	@ (8004254 <HAL_GPIO_Init+0x2b8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	43da      	mvns	r2, r3
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	4013      	ands	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	2380      	movs	r3, #128	@ 0x80
 800419c:	035b      	lsls	r3, r3, #13
 800419e:	4013      	ands	r3, r2
 80041a0:	d003      	beq.n	80041aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004254 <HAL_GPIO_Init+0x2b8>)
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80041b0:	4b28      	ldr	r3, [pc, #160]	@ (8004254 <HAL_GPIO_Init+0x2b8>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	43da      	mvns	r2, r3
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4013      	ands	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	2380      	movs	r3, #128	@ 0x80
 80041c6:	039b      	lsls	r3, r3, #14
 80041c8:	4013      	ands	r3, r2
 80041ca:	d003      	beq.n	80041d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004254 <HAL_GPIO_Init+0x2b8>)
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80041da:	4a1e      	ldr	r2, [pc, #120]	@ (8004254 <HAL_GPIO_Init+0x2b8>)
 80041dc:	2384      	movs	r3, #132	@ 0x84
 80041de:	58d3      	ldr	r3, [r2, r3]
 80041e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	43da      	mvns	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4013      	ands	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	2380      	movs	r3, #128	@ 0x80
 80041f2:	029b      	lsls	r3, r3, #10
 80041f4:	4013      	ands	r3, r2
 80041f6:	d003      	beq.n	8004200 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004200:	4914      	ldr	r1, [pc, #80]	@ (8004254 <HAL_GPIO_Init+0x2b8>)
 8004202:	2284      	movs	r2, #132	@ 0x84
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004208:	4a12      	ldr	r2, [pc, #72]	@ (8004254 <HAL_GPIO_Init+0x2b8>)
 800420a:	2380      	movs	r3, #128	@ 0x80
 800420c:	58d3      	ldr	r3, [r2, r3]
 800420e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	43da      	mvns	r2, r3
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4013      	ands	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	2380      	movs	r3, #128	@ 0x80
 8004220:	025b      	lsls	r3, r3, #9
 8004222:	4013      	ands	r3, r2
 8004224:	d003      	beq.n	800422e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800422e:	4909      	ldr	r1, [pc, #36]	@ (8004254 <HAL_GPIO_Init+0x2b8>)
 8004230:	2280      	movs	r2, #128	@ 0x80
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	3301      	adds	r3, #1
 800423a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	40da      	lsrs	r2, r3
 8004244:	1e13      	subs	r3, r2, #0
 8004246:	d000      	beq.n	800424a <HAL_GPIO_Init+0x2ae>
 8004248:	e6b0      	b.n	8003fac <HAL_GPIO_Init+0x10>
  }
}
 800424a:	46c0      	nop			@ (mov r8, r8)
 800424c:	46c0      	nop			@ (mov r8, r8)
 800424e:	46bd      	mov	sp, r7
 8004250:	b006      	add	sp, #24
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40021800 	.word	0x40021800
 8004258:	50000400 	.word	0x50000400
 800425c:	50000800 	.word	0x50000800
 8004260:	50000c00 	.word	0x50000c00

08004264 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	000a      	movs	r2, r1
 800426e:	1cbb      	adds	r3, r7, #2
 8004270:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	1cba      	adds	r2, r7, #2
 8004278:	8812      	ldrh	r2, [r2, #0]
 800427a:	4013      	ands	r3, r2
 800427c:	d004      	beq.n	8004288 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800427e:	230f      	movs	r3, #15
 8004280:	18fb      	adds	r3, r7, r3
 8004282:	2201      	movs	r2, #1
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	e003      	b.n	8004290 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004288:	230f      	movs	r3, #15
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004290:	230f      	movs	r3, #15
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	781b      	ldrb	r3, [r3, #0]
}
 8004296:	0018      	movs	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	b004      	add	sp, #16
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	0008      	movs	r0, r1
 80042a8:	0011      	movs	r1, r2
 80042aa:	1cbb      	adds	r3, r7, #2
 80042ac:	1c02      	adds	r2, r0, #0
 80042ae:	801a      	strh	r2, [r3, #0]
 80042b0:	1c7b      	adds	r3, r7, #1
 80042b2:	1c0a      	adds	r2, r1, #0
 80042b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042b6:	1c7b      	adds	r3, r7, #1
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d004      	beq.n	80042c8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042be:	1cbb      	adds	r3, r7, #2
 80042c0:	881a      	ldrh	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042c6:	e003      	b.n	80042d0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042c8:	1cbb      	adds	r3, r7, #2
 80042ca:	881a      	ldrh	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80042d0:	46c0      	nop			@ (mov r8, r8)
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b002      	add	sp, #8
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	000a      	movs	r2, r1
 80042e2:	1cbb      	adds	r3, r7, #2
 80042e4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042ec:	1cbb      	adds	r3, r7, #2
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4013      	ands	r3, r2
 80042f4:	041a      	lsls	r2, r3, #16
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	43db      	mvns	r3, r3
 80042fa:	1cb9      	adds	r1, r7, #2
 80042fc:	8809      	ldrh	r1, [r1, #0]
 80042fe:	400b      	ands	r3, r1
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	619a      	str	r2, [r3, #24]
}
 8004306:	46c0      	nop			@ (mov r8, r8)
 8004308:	46bd      	mov	sp, r7
 800430a:	b004      	add	sp, #16
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	0002      	movs	r2, r0
 8004318:	1dbb      	adds	r3, r7, #6
 800431a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800431c:	4b10      	ldr	r3, [pc, #64]	@ (8004360 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	1dba      	adds	r2, r7, #6
 8004322:	8812      	ldrh	r2, [r2, #0]
 8004324:	4013      	ands	r3, r2
 8004326:	d008      	beq.n	800433a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004328:	4b0d      	ldr	r3, [pc, #52]	@ (8004360 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800432a:	1dba      	adds	r2, r7, #6
 800432c:	8812      	ldrh	r2, [r2, #0]
 800432e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004330:	1dbb      	adds	r3, r7, #6
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	0018      	movs	r0, r3
 8004336:	f7fe f87f 	bl	8002438 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800433a:	4b09      	ldr	r3, [pc, #36]	@ (8004360 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	1dba      	adds	r2, r7, #6
 8004340:	8812      	ldrh	r2, [r2, #0]
 8004342:	4013      	ands	r3, r2
 8004344:	d008      	beq.n	8004358 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004346:	4b06      	ldr	r3, [pc, #24]	@ (8004360 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004348:	1dba      	adds	r2, r7, #6
 800434a:	8812      	ldrh	r2, [r2, #0]
 800434c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800434e:	1dbb      	adds	r3, r7, #6
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	0018      	movs	r0, r3
 8004354:	f7fe f81c 	bl	8002390 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004358:	46c0      	nop			@ (mov r8, r8)
 800435a:	46bd      	mov	sp, r7
 800435c:	b002      	add	sp, #8
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40021800 	.word	0x40021800

08004364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e08f      	b.n	8004496 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2241      	movs	r2, #65	@ 0x41
 800437a:	5c9b      	ldrb	r3, [r3, r2]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d107      	bne.n	8004392 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2240      	movs	r2, #64	@ 0x40
 8004386:	2100      	movs	r1, #0
 8004388:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	0018      	movs	r0, r3
 800438e:	f7fe fe93 	bl	80030b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2241      	movs	r2, #65	@ 0x41
 8004396:	2124      	movs	r1, #36	@ 0x24
 8004398:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2101      	movs	r1, #1
 80043a6:	438a      	bics	r2, r1
 80043a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	493b      	ldr	r1, [pc, #236]	@ (80044a0 <HAL_I2C_Init+0x13c>)
 80043b4:	400a      	ands	r2, r1
 80043b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4938      	ldr	r1, [pc, #224]	@ (80044a4 <HAL_I2C_Init+0x140>)
 80043c4:	400a      	ands	r2, r1
 80043c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d108      	bne.n	80043e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2180      	movs	r1, #128	@ 0x80
 80043da:	0209      	lsls	r1, r1, #8
 80043dc:	430a      	orrs	r2, r1
 80043de:	609a      	str	r2, [r3, #8]
 80043e0:	e007      	b.n	80043f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2184      	movs	r1, #132	@ 0x84
 80043ec:	0209      	lsls	r1, r1, #8
 80043ee:	430a      	orrs	r2, r1
 80043f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d109      	bne.n	800440e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2180      	movs	r1, #128	@ 0x80
 8004406:	0109      	lsls	r1, r1, #4
 8004408:	430a      	orrs	r2, r1
 800440a:	605a      	str	r2, [r3, #4]
 800440c:	e007      	b.n	800441e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4923      	ldr	r1, [pc, #140]	@ (80044a8 <HAL_I2C_Init+0x144>)
 800441a:	400a      	ands	r2, r1
 800441c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4920      	ldr	r1, [pc, #128]	@ (80044ac <HAL_I2C_Init+0x148>)
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	491a      	ldr	r1, [pc, #104]	@ (80044a4 <HAL_I2C_Init+0x140>)
 800443a:	400a      	ands	r2, r1
 800443c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	431a      	orrs	r2, r3
 8004448:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69d9      	ldr	r1, [r3, #28]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1a      	ldr	r2, [r3, #32]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2101      	movs	r1, #1
 8004474:	430a      	orrs	r2, r1
 8004476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2241      	movs	r2, #65	@ 0x41
 8004482:	2120      	movs	r1, #32
 8004484:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2242      	movs	r2, #66	@ 0x42
 8004490:	2100      	movs	r1, #0
 8004492:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	0018      	movs	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	b002      	add	sp, #8
 800449c:	bd80      	pop	{r7, pc}
 800449e:	46c0      	nop			@ (mov r8, r8)
 80044a0:	f0ffffff 	.word	0xf0ffffff
 80044a4:	ffff7fff 	.word	0xffff7fff
 80044a8:	fffff7ff 	.word	0xfffff7ff
 80044ac:	02008000 	.word	0x02008000

080044b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044b0:	b590      	push	{r4, r7, lr}
 80044b2:	b089      	sub	sp, #36	@ 0x24
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	0008      	movs	r0, r1
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	0019      	movs	r1, r3
 80044be:	230a      	movs	r3, #10
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	1c02      	adds	r2, r0, #0
 80044c4:	801a      	strh	r2, [r3, #0]
 80044c6:	2308      	movs	r3, #8
 80044c8:	18fb      	adds	r3, r7, r3
 80044ca:	1c0a      	adds	r2, r1, #0
 80044cc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2241      	movs	r2, #65	@ 0x41
 80044d2:	5c9b      	ldrb	r3, [r3, r2]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d000      	beq.n	80044dc <HAL_I2C_Master_Transmit+0x2c>
 80044da:	e10a      	b.n	80046f2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2240      	movs	r2, #64	@ 0x40
 80044e0:	5c9b      	ldrb	r3, [r3, r2]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_I2C_Master_Transmit+0x3a>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e104      	b.n	80046f4 <HAL_I2C_Master_Transmit+0x244>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2240      	movs	r2, #64	@ 0x40
 80044ee:	2101      	movs	r1, #1
 80044f0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044f2:	f7ff f9b7 	bl	8003864 <HAL_GetTick>
 80044f6:	0003      	movs	r3, r0
 80044f8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044fa:	2380      	movs	r3, #128	@ 0x80
 80044fc:	0219      	lsls	r1, r3, #8
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	2319      	movs	r3, #25
 8004506:	2201      	movs	r2, #1
 8004508:	f000 fa26 	bl	8004958 <I2C_WaitOnFlagUntilTimeout>
 800450c:	1e03      	subs	r3, r0, #0
 800450e:	d001      	beq.n	8004514 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e0ef      	b.n	80046f4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2241      	movs	r2, #65	@ 0x41
 8004518:	2121      	movs	r1, #33	@ 0x21
 800451a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2242      	movs	r2, #66	@ 0x42
 8004520:	2110      	movs	r1, #16
 8004522:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2208      	movs	r2, #8
 8004534:	18ba      	adds	r2, r7, r2
 8004536:	8812      	ldrh	r2, [r2, #0]
 8004538:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	2bff      	cmp	r3, #255	@ 0xff
 8004548:	d906      	bls.n	8004558 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	22ff      	movs	r2, #255	@ 0xff
 800454e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004550:	2380      	movs	r3, #128	@ 0x80
 8004552:	045b      	lsls	r3, r3, #17
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	e007      	b.n	8004568 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004562:	2380      	movs	r3, #128	@ 0x80
 8004564:	049b      	lsls	r3, r3, #18
 8004566:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800456c:	2b00      	cmp	r3, #0
 800456e:	d027      	beq.n	80045c0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004574:	781a      	ldrb	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	3301      	adds	r3, #1
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	697c      	ldr	r4, [r7, #20]
 80045ac:	230a      	movs	r3, #10
 80045ae:	18fb      	adds	r3, r7, r3
 80045b0:	8819      	ldrh	r1, [r3, #0]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	4b51      	ldr	r3, [pc, #324]	@ (80046fc <HAL_I2C_Master_Transmit+0x24c>)
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	0023      	movs	r3, r4
 80045ba:	f000 fc45 	bl	8004e48 <I2C_TransferConfig>
 80045be:	e06f      	b.n	80046a0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	697c      	ldr	r4, [r7, #20]
 80045c8:	230a      	movs	r3, #10
 80045ca:	18fb      	adds	r3, r7, r3
 80045cc:	8819      	ldrh	r1, [r3, #0]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	4b4a      	ldr	r3, [pc, #296]	@ (80046fc <HAL_I2C_Master_Transmit+0x24c>)
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	0023      	movs	r3, r4
 80045d6:	f000 fc37 	bl	8004e48 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80045da:	e061      	b.n	80046a0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	0018      	movs	r0, r3
 80045e4:	f000 fa10 	bl	8004a08 <I2C_WaitOnTXISFlagUntilTimeout>
 80045e8:	1e03      	subs	r3, r0, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e081      	b.n	80046f4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	781a      	ldrb	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800460a:	b29b      	uxth	r3, r3
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d03a      	beq.n	80046a0 <HAL_I2C_Master_Transmit+0x1f0>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462e:	2b00      	cmp	r3, #0
 8004630:	d136      	bne.n	80046a0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004632:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	0013      	movs	r3, r2
 800463c:	2200      	movs	r2, #0
 800463e:	2180      	movs	r1, #128	@ 0x80
 8004640:	f000 f98a 	bl	8004958 <I2C_WaitOnFlagUntilTimeout>
 8004644:	1e03      	subs	r3, r0, #0
 8004646:	d001      	beq.n	800464c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e053      	b.n	80046f4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004650:	b29b      	uxth	r3, r3
 8004652:	2bff      	cmp	r3, #255	@ 0xff
 8004654:	d911      	bls.n	800467a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	22ff      	movs	r2, #255	@ 0xff
 800465a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004660:	b2da      	uxtb	r2, r3
 8004662:	2380      	movs	r3, #128	@ 0x80
 8004664:	045c      	lsls	r4, r3, #17
 8004666:	230a      	movs	r3, #10
 8004668:	18fb      	adds	r3, r7, r3
 800466a:	8819      	ldrh	r1, [r3, #0]
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	2300      	movs	r3, #0
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	0023      	movs	r3, r4
 8004674:	f000 fbe8 	bl	8004e48 <I2C_TransferConfig>
 8004678:	e012      	b.n	80046a0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004688:	b2da      	uxtb	r2, r3
 800468a:	2380      	movs	r3, #128	@ 0x80
 800468c:	049c      	lsls	r4, r3, #18
 800468e:	230a      	movs	r3, #10
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	8819      	ldrh	r1, [r3, #0]
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	2300      	movs	r3, #0
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	0023      	movs	r3, r4
 800469c:	f000 fbd4 	bl	8004e48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d198      	bne.n	80045dc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f000 f9ef 	bl	8004a94 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046b6:	1e03      	subs	r3, r0, #0
 80046b8:	d001      	beq.n	80046be <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e01a      	b.n	80046f4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2220      	movs	r2, #32
 80046c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	490b      	ldr	r1, [pc, #44]	@ (8004700 <HAL_I2C_Master_Transmit+0x250>)
 80046d2:	400a      	ands	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2241      	movs	r2, #65	@ 0x41
 80046da:	2120      	movs	r1, #32
 80046dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2242      	movs	r2, #66	@ 0x42
 80046e2:	2100      	movs	r1, #0
 80046e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2240      	movs	r2, #64	@ 0x40
 80046ea:	2100      	movs	r1, #0
 80046ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	e000      	b.n	80046f4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80046f2:	2302      	movs	r3, #2
  }
}
 80046f4:	0018      	movs	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b007      	add	sp, #28
 80046fa:	bd90      	pop	{r4, r7, pc}
 80046fc:	80002000 	.word	0x80002000
 8004700:	fe00e800 	.word	0xfe00e800

08004704 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004704:	b590      	push	{r4, r7, lr}
 8004706:	b089      	sub	sp, #36	@ 0x24
 8004708:	af02      	add	r7, sp, #8
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	0008      	movs	r0, r1
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	0019      	movs	r1, r3
 8004712:	230a      	movs	r3, #10
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	1c02      	adds	r2, r0, #0
 8004718:	801a      	strh	r2, [r3, #0]
 800471a:	2308      	movs	r3, #8
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	1c0a      	adds	r2, r1, #0
 8004720:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2241      	movs	r2, #65	@ 0x41
 8004726:	5c9b      	ldrb	r3, [r3, r2]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b20      	cmp	r3, #32
 800472c:	d000      	beq.n	8004730 <HAL_I2C_Master_Receive+0x2c>
 800472e:	e0e8      	b.n	8004902 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2240      	movs	r2, #64	@ 0x40
 8004734:	5c9b      	ldrb	r3, [r3, r2]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_I2C_Master_Receive+0x3a>
 800473a:	2302      	movs	r3, #2
 800473c:	e0e2      	b.n	8004904 <HAL_I2C_Master_Receive+0x200>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2240      	movs	r2, #64	@ 0x40
 8004742:	2101      	movs	r1, #1
 8004744:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004746:	f7ff f88d 	bl	8003864 <HAL_GetTick>
 800474a:	0003      	movs	r3, r0
 800474c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800474e:	2380      	movs	r3, #128	@ 0x80
 8004750:	0219      	lsls	r1, r3, #8
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	2319      	movs	r3, #25
 800475a:	2201      	movs	r2, #1
 800475c:	f000 f8fc 	bl	8004958 <I2C_WaitOnFlagUntilTimeout>
 8004760:	1e03      	subs	r3, r0, #0
 8004762:	d001      	beq.n	8004768 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0cd      	b.n	8004904 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2241      	movs	r2, #65	@ 0x41
 800476c:	2122      	movs	r1, #34	@ 0x22
 800476e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2242      	movs	r2, #66	@ 0x42
 8004774:	2110      	movs	r1, #16
 8004776:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2208      	movs	r2, #8
 8004788:	18ba      	adds	r2, r7, r2
 800478a:	8812      	ldrh	r2, [r2, #0]
 800478c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	2bff      	cmp	r3, #255	@ 0xff
 800479c:	d911      	bls.n	80047c2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	22ff      	movs	r2, #255	@ 0xff
 80047a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	2380      	movs	r3, #128	@ 0x80
 80047ac:	045c      	lsls	r4, r3, #17
 80047ae:	230a      	movs	r3, #10
 80047b0:	18fb      	adds	r3, r7, r3
 80047b2:	8819      	ldrh	r1, [r3, #0]
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	4b55      	ldr	r3, [pc, #340]	@ (800490c <HAL_I2C_Master_Receive+0x208>)
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	0023      	movs	r3, r4
 80047bc:	f000 fb44 	bl	8004e48 <I2C_TransferConfig>
 80047c0:	e076      	b.n	80048b0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	2380      	movs	r3, #128	@ 0x80
 80047d4:	049c      	lsls	r4, r3, #18
 80047d6:	230a      	movs	r3, #10
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	8819      	ldrh	r1, [r3, #0]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	4b4b      	ldr	r3, [pc, #300]	@ (800490c <HAL_I2C_Master_Receive+0x208>)
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	0023      	movs	r3, r4
 80047e4:	f000 fb30 	bl	8004e48 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80047e8:	e062      	b.n	80048b0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	0018      	movs	r0, r3
 80047f2:	f000 f993 	bl	8004b1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80047f6:	1e03      	subs	r3, r0, #0
 80047f8:	d001      	beq.n	80047fe <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e082      	b.n	8004904 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d03a      	beq.n	80048b0 <HAL_I2C_Master_Receive+0x1ac>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800483e:	2b00      	cmp	r3, #0
 8004840:	d136      	bne.n	80048b0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004842:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	0013      	movs	r3, r2
 800484c:	2200      	movs	r2, #0
 800484e:	2180      	movs	r1, #128	@ 0x80
 8004850:	f000 f882 	bl	8004958 <I2C_WaitOnFlagUntilTimeout>
 8004854:	1e03      	subs	r3, r0, #0
 8004856:	d001      	beq.n	800485c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e053      	b.n	8004904 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004860:	b29b      	uxth	r3, r3
 8004862:	2bff      	cmp	r3, #255	@ 0xff
 8004864:	d911      	bls.n	800488a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	22ff      	movs	r2, #255	@ 0xff
 800486a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004870:	b2da      	uxtb	r2, r3
 8004872:	2380      	movs	r3, #128	@ 0x80
 8004874:	045c      	lsls	r4, r3, #17
 8004876:	230a      	movs	r3, #10
 8004878:	18fb      	adds	r3, r7, r3
 800487a:	8819      	ldrh	r1, [r3, #0]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	2300      	movs	r3, #0
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	0023      	movs	r3, r4
 8004884:	f000 fae0 	bl	8004e48 <I2C_TransferConfig>
 8004888:	e012      	b.n	80048b0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004898:	b2da      	uxtb	r2, r3
 800489a:	2380      	movs	r3, #128	@ 0x80
 800489c:	049c      	lsls	r4, r3, #18
 800489e:	230a      	movs	r3, #10
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	8819      	ldrh	r1, [r3, #0]
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	2300      	movs	r3, #0
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	0023      	movs	r3, r4
 80048ac:	f000 facc 	bl	8004e48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d197      	bne.n	80047ea <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f000 f8e7 	bl	8004a94 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048c6:	1e03      	subs	r3, r0, #0
 80048c8:	d001      	beq.n	80048ce <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e01a      	b.n	8004904 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2220      	movs	r2, #32
 80048d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	490b      	ldr	r1, [pc, #44]	@ (8004910 <HAL_I2C_Master_Receive+0x20c>)
 80048e2:	400a      	ands	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2241      	movs	r2, #65	@ 0x41
 80048ea:	2120      	movs	r1, #32
 80048ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2242      	movs	r2, #66	@ 0x42
 80048f2:	2100      	movs	r1, #0
 80048f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2240      	movs	r2, #64	@ 0x40
 80048fa:	2100      	movs	r1, #0
 80048fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	e000      	b.n	8004904 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004902:	2302      	movs	r3, #2
  }
}
 8004904:	0018      	movs	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	b007      	add	sp, #28
 800490a:	bd90      	pop	{r4, r7, pc}
 800490c:	80002400 	.word	0x80002400
 8004910:	fe00e800 	.word	0xfe00e800

08004914 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	2202      	movs	r2, #2
 8004924:	4013      	ands	r3, r2
 8004926:	2b02      	cmp	r3, #2
 8004928:	d103      	bne.n	8004932 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2200      	movs	r2, #0
 8004930:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	2201      	movs	r2, #1
 800493a:	4013      	ands	r3, r2
 800493c:	2b01      	cmp	r3, #1
 800493e:	d007      	beq.n	8004950 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2101      	movs	r1, #1
 800494c:	430a      	orrs	r2, r1
 800494e:	619a      	str	r2, [r3, #24]
  }
}
 8004950:	46c0      	nop			@ (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	b002      	add	sp, #8
 8004956:	bd80      	pop	{r7, pc}

08004958 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	603b      	str	r3, [r7, #0]
 8004964:	1dfb      	adds	r3, r7, #7
 8004966:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004968:	e03a      	b.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	6839      	ldr	r1, [r7, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	0018      	movs	r0, r3
 8004972:	f000 f971 	bl	8004c58 <I2C_IsErrorOccurred>
 8004976:	1e03      	subs	r3, r0, #0
 8004978:	d001      	beq.n	800497e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e040      	b.n	8004a00 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	3301      	adds	r3, #1
 8004982:	d02d      	beq.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004984:	f7fe ff6e 	bl	8003864 <HAL_GetTick>
 8004988:	0002      	movs	r2, r0
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d302      	bcc.n	800499a <I2C_WaitOnFlagUntilTimeout+0x42>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d122      	bne.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	4013      	ands	r3, r2
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	425a      	negs	r2, r3
 80049aa:	4153      	adcs	r3, r2
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	001a      	movs	r2, r3
 80049b0:	1dfb      	adds	r3, r7, #7
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d113      	bne.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049bc:	2220      	movs	r2, #32
 80049be:	431a      	orrs	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2241      	movs	r2, #65	@ 0x41
 80049c8:	2120      	movs	r1, #32
 80049ca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2242      	movs	r2, #66	@ 0x42
 80049d0:	2100      	movs	r1, #0
 80049d2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2240      	movs	r2, #64	@ 0x40
 80049d8:	2100      	movs	r1, #0
 80049da:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e00f      	b.n	8004a00 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	4013      	ands	r3, r2
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	425a      	negs	r2, r3
 80049f0:	4153      	adcs	r3, r2
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	001a      	movs	r2, r3
 80049f6:	1dfb      	adds	r3, r7, #7
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d0b5      	beq.n	800496a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	0018      	movs	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b004      	add	sp, #16
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a14:	e032      	b.n	8004a7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f000 f91b 	bl	8004c58 <I2C_IsErrorOccurred>
 8004a22:	1e03      	subs	r3, r0, #0
 8004a24:	d001      	beq.n	8004a2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e030      	b.n	8004a8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	d025      	beq.n	8004a7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a30:	f7fe ff18 	bl	8003864 <HAL_GetTick>
 8004a34:	0002      	movs	r2, r0
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d302      	bcc.n	8004a46 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d11a      	bne.n	8004a7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d013      	beq.n	8004a7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a58:	2220      	movs	r2, #32
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2241      	movs	r2, #65	@ 0x41
 8004a64:	2120      	movs	r1, #32
 8004a66:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2242      	movs	r2, #66	@ 0x42
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2240      	movs	r2, #64	@ 0x40
 8004a74:	2100      	movs	r1, #0
 8004a76:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e007      	b.n	8004a8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	2202      	movs	r2, #2
 8004a84:	4013      	ands	r3, r2
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d1c5      	bne.n	8004a16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b004      	add	sp, #16
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aa0:	e02f      	b.n	8004b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f000 f8d5 	bl	8004c58 <I2C_IsErrorOccurred>
 8004aae:	1e03      	subs	r3, r0, #0
 8004ab0:	d001      	beq.n	8004ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e02d      	b.n	8004b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab6:	f7fe fed5 	bl	8003864 <HAL_GetTick>
 8004aba:	0002      	movs	r2, r0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d302      	bcc.n	8004acc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d11a      	bne.n	8004b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	d013      	beq.n	8004b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ade:	2220      	movs	r2, #32
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2241      	movs	r2, #65	@ 0x41
 8004aea:	2120      	movs	r1, #32
 8004aec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2242      	movs	r2, #66	@ 0x42
 8004af2:	2100      	movs	r1, #0
 8004af4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2240      	movs	r2, #64	@ 0x40
 8004afa:	2100      	movs	r1, #0
 8004afc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e007      	b.n	8004b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d1c8      	bne.n	8004aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	0018      	movs	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b004      	add	sp, #16
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b28:	2317      	movs	r3, #23
 8004b2a:	18fb      	adds	r3, r7, r3
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004b30:	e07b      	b.n	8004c2a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f000 f88d 	bl	8004c58 <I2C_IsErrorOccurred>
 8004b3e:	1e03      	subs	r3, r0, #0
 8004b40:	d003      	beq.n	8004b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004b42:	2317      	movs	r3, #23
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	2201      	movs	r2, #1
 8004b48:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	2220      	movs	r2, #32
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d140      	bne.n	8004bda <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004b58:	2117      	movs	r1, #23
 8004b5a:	187b      	adds	r3, r7, r1
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d13b      	bne.n	8004bda <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	2204      	movs	r2, #4
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d106      	bne.n	8004b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004b78:	187b      	adds	r3, r7, r1
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	2210      	movs	r2, #16
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	d123      	bne.n	8004bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2210      	movs	r2, #16
 8004b92:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2204      	movs	r2, #4
 8004b98:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4929      	ldr	r1, [pc, #164]	@ (8004c54 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004bae:	400a      	ands	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2241      	movs	r2, #65	@ 0x41
 8004bb6:	2120      	movs	r1, #32
 8004bb8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2242      	movs	r2, #66	@ 0x42
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2240      	movs	r2, #64	@ 0x40
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004bca:	2317      	movs	r3, #23
 8004bcc:	18fb      	adds	r3, r7, r3
 8004bce:	2201      	movs	r2, #1
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	e002      	b.n	8004bda <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004bda:	f7fe fe43 	bl	8003864 <HAL_GetTick>
 8004bde:	0002      	movs	r2, r0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d302      	bcc.n	8004bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d11c      	bne.n	8004c2a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004bf0:	2017      	movs	r0, #23
 8004bf2:	183b      	adds	r3, r7, r0
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d117      	bne.n	8004c2a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	2204      	movs	r2, #4
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d010      	beq.n	8004c2a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2241      	movs	r2, #65	@ 0x41
 8004c18:	2120      	movs	r1, #32
 8004c1a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2240      	movs	r2, #64	@ 0x40
 8004c20:	2100      	movs	r1, #0
 8004c22:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004c24:	183b      	adds	r3, r7, r0
 8004c26:	2201      	movs	r2, #1
 8004c28:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	2204      	movs	r2, #4
 8004c32:	4013      	ands	r3, r2
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d005      	beq.n	8004c44 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004c38:	2317      	movs	r3, #23
 8004c3a:	18fb      	adds	r3, r7, r3
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d100      	bne.n	8004c44 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004c42:	e776      	b.n	8004b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004c44:	2317      	movs	r3, #23
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	781b      	ldrb	r3, [r3, #0]
}
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	b006      	add	sp, #24
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	46c0      	nop			@ (mov r8, r8)
 8004c54:	fe00e800 	.word	0xfe00e800

08004c58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08a      	sub	sp, #40	@ 0x28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c64:	2327      	movs	r3, #39	@ 0x27
 8004c66:	18fb      	adds	r3, r7, r3
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c74:	2300      	movs	r3, #0
 8004c76:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2210      	movs	r2, #16
 8004c80:	4013      	ands	r3, r2
 8004c82:	d100      	bne.n	8004c86 <I2C_IsErrorOccurred+0x2e>
 8004c84:	e079      	b.n	8004d7a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2210      	movs	r2, #16
 8004c8c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c8e:	e057      	b.n	8004d40 <I2C_IsErrorOccurred+0xe8>
 8004c90:	2227      	movs	r2, #39	@ 0x27
 8004c92:	18bb      	adds	r3, r7, r2
 8004c94:	18ba      	adds	r2, r7, r2
 8004c96:	7812      	ldrb	r2, [r2, #0]
 8004c98:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	d04f      	beq.n	8004d40 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ca0:	f7fe fde0 	bl	8003864 <HAL_GetTick>
 8004ca4:	0002      	movs	r2, r0
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d302      	bcc.n	8004cb6 <I2C_IsErrorOccurred+0x5e>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d144      	bne.n	8004d40 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	2380      	movs	r3, #128	@ 0x80
 8004cbe:	01db      	lsls	r3, r3, #7
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004cc4:	2013      	movs	r0, #19
 8004cc6:	183b      	adds	r3, r7, r0
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	2142      	movs	r1, #66	@ 0x42
 8004ccc:	5c52      	ldrb	r2, [r2, r1]
 8004cce:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	2380      	movs	r3, #128	@ 0x80
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	401a      	ands	r2, r3
 8004cdc:	2380      	movs	r3, #128	@ 0x80
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d126      	bne.n	8004d32 <I2C_IsErrorOccurred+0xda>
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	2380      	movs	r3, #128	@ 0x80
 8004ce8:	01db      	lsls	r3, r3, #7
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d021      	beq.n	8004d32 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004cee:	183b      	adds	r3, r7, r0
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d01d      	beq.n	8004d32 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2180      	movs	r1, #128	@ 0x80
 8004d02:	01c9      	lsls	r1, r1, #7
 8004d04:	430a      	orrs	r2, r1
 8004d06:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d08:	f7fe fdac 	bl	8003864 <HAL_GetTick>
 8004d0c:	0003      	movs	r3, r0
 8004d0e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d10:	e00f      	b.n	8004d32 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d12:	f7fe fda7 	bl	8003864 <HAL_GetTick>
 8004d16:	0002      	movs	r2, r0
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b19      	cmp	r3, #25
 8004d1e:	d908      	bls.n	8004d32 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	2220      	movs	r2, #32
 8004d24:	4313      	orrs	r3, r2
 8004d26:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004d28:	2327      	movs	r3, #39	@ 0x27
 8004d2a:	18fb      	adds	r3, r7, r3
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	701a      	strb	r2, [r3, #0]

              break;
 8004d30:	e006      	b.n	8004d40 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d1e8      	bne.n	8004d12 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	2220      	movs	r2, #32
 8004d48:	4013      	ands	r3, r2
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d004      	beq.n	8004d58 <I2C_IsErrorOccurred+0x100>
 8004d4e:	2327      	movs	r3, #39	@ 0x27
 8004d50:	18fb      	adds	r3, r7, r3
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d09b      	beq.n	8004c90 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d58:	2327      	movs	r3, #39	@ 0x27
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d103      	bne.n	8004d6a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2220      	movs	r2, #32
 8004d68:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	2204      	movs	r2, #4
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d72:	2327      	movs	r3, #39	@ 0x27
 8004d74:	18fb      	adds	r3, r7, r3
 8004d76:	2201      	movs	r2, #1
 8004d78:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	2380      	movs	r3, #128	@ 0x80
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d00c      	beq.n	8004da6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	4313      	orrs	r3, r2
 8004d92:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2280      	movs	r2, #128	@ 0x80
 8004d9a:	0052      	lsls	r2, r2, #1
 8004d9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d9e:	2327      	movs	r3, #39	@ 0x27
 8004da0:	18fb      	adds	r3, r7, r3
 8004da2:	2201      	movs	r2, #1
 8004da4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	2380      	movs	r3, #128	@ 0x80
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4013      	ands	r3, r2
 8004dae:	d00c      	beq.n	8004dca <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	2208      	movs	r2, #8
 8004db4:	4313      	orrs	r3, r2
 8004db6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2280      	movs	r2, #128	@ 0x80
 8004dbe:	00d2      	lsls	r2, r2, #3
 8004dc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dc2:	2327      	movs	r3, #39	@ 0x27
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	2380      	movs	r3, #128	@ 0x80
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d00c      	beq.n	8004dee <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2280      	movs	r2, #128	@ 0x80
 8004de2:	0092      	lsls	r2, r2, #2
 8004de4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004de6:	2327      	movs	r3, #39	@ 0x27
 8004de8:	18fb      	adds	r3, r7, r3
 8004dea:	2201      	movs	r2, #1
 8004dec:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004dee:	2327      	movs	r3, #39	@ 0x27
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01d      	beq.n	8004e34 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f7ff fd8a 	bl	8004914 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	490e      	ldr	r1, [pc, #56]	@ (8004e44 <I2C_IsErrorOccurred+0x1ec>)
 8004e0c:	400a      	ands	r2, r1
 8004e0e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2241      	movs	r2, #65	@ 0x41
 8004e20:	2120      	movs	r1, #32
 8004e22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2242      	movs	r2, #66	@ 0x42
 8004e28:	2100      	movs	r1, #0
 8004e2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2240      	movs	r2, #64	@ 0x40
 8004e30:	2100      	movs	r1, #0
 8004e32:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004e34:	2327      	movs	r3, #39	@ 0x27
 8004e36:	18fb      	adds	r3, r7, r3
 8004e38:	781b      	ldrb	r3, [r3, #0]
}
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	b00a      	add	sp, #40	@ 0x28
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	46c0      	nop			@ (mov r8, r8)
 8004e44:	fe00e800 	.word	0xfe00e800

08004e48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e48:	b590      	push	{r4, r7, lr}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	0008      	movs	r0, r1
 8004e52:	0011      	movs	r1, r2
 8004e54:	607b      	str	r3, [r7, #4]
 8004e56:	240a      	movs	r4, #10
 8004e58:	193b      	adds	r3, r7, r4
 8004e5a:	1c02      	adds	r2, r0, #0
 8004e5c:	801a      	strh	r2, [r3, #0]
 8004e5e:	2009      	movs	r0, #9
 8004e60:	183b      	adds	r3, r7, r0
 8004e62:	1c0a      	adds	r2, r1, #0
 8004e64:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e66:	193b      	adds	r3, r7, r4
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	059b      	lsls	r3, r3, #22
 8004e6c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e6e:	183b      	adds	r3, r7, r0
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	0419      	lsls	r1, r3, #16
 8004e74:	23ff      	movs	r3, #255	@ 0xff
 8004e76:	041b      	lsls	r3, r3, #16
 8004e78:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e7a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e82:	4313      	orrs	r3, r2
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	085b      	lsrs	r3, r3, #1
 8004e88:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e92:	0d51      	lsrs	r1, r2, #21
 8004e94:	2280      	movs	r2, #128	@ 0x80
 8004e96:	00d2      	lsls	r2, r2, #3
 8004e98:	400a      	ands	r2, r1
 8004e9a:	4907      	ldr	r1, [pc, #28]	@ (8004eb8 <I2C_TransferConfig+0x70>)
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	43d2      	mvns	r2, r2
 8004ea0:	401a      	ands	r2, r3
 8004ea2:	0011      	movs	r1, r2
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004eae:	46c0      	nop			@ (mov r8, r8)
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b007      	add	sp, #28
 8004eb4:	bd90      	pop	{r4, r7, pc}
 8004eb6:	46c0      	nop			@ (mov r8, r8)
 8004eb8:	03ff63ff 	.word	0x03ff63ff

08004ebc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2241      	movs	r2, #65	@ 0x41
 8004eca:	5c9b      	ldrb	r3, [r3, r2]
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d138      	bne.n	8004f44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2240      	movs	r2, #64	@ 0x40
 8004ed6:	5c9b      	ldrb	r3, [r3, r2]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e032      	b.n	8004f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2240      	movs	r2, #64	@ 0x40
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2241      	movs	r2, #65	@ 0x41
 8004eec:	2124      	movs	r1, #36	@ 0x24
 8004eee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2101      	movs	r1, #1
 8004efc:	438a      	bics	r2, r1
 8004efe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4911      	ldr	r1, [pc, #68]	@ (8004f50 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004f0c:	400a      	ands	r2, r1
 8004f0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6819      	ldr	r1, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2241      	movs	r2, #65	@ 0x41
 8004f34:	2120      	movs	r1, #32
 8004f36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2240      	movs	r2, #64	@ 0x40
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	e000      	b.n	8004f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f44:	2302      	movs	r3, #2
  }
}
 8004f46:	0018      	movs	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b002      	add	sp, #8
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	46c0      	nop			@ (mov r8, r8)
 8004f50:	ffffefff 	.word	0xffffefff

08004f54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2241      	movs	r2, #65	@ 0x41
 8004f62:	5c9b      	ldrb	r3, [r3, r2]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b20      	cmp	r3, #32
 8004f68:	d139      	bne.n	8004fde <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2240      	movs	r2, #64	@ 0x40
 8004f6e:	5c9b      	ldrb	r3, [r3, r2]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e033      	b.n	8004fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2240      	movs	r2, #64	@ 0x40
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2241      	movs	r2, #65	@ 0x41
 8004f84:	2124      	movs	r1, #36	@ 0x24
 8004f86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2101      	movs	r1, #1
 8004f94:	438a      	bics	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4a11      	ldr	r2, [pc, #68]	@ (8004fe8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2241      	movs	r2, #65	@ 0x41
 8004fce:	2120      	movs	r1, #32
 8004fd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2240      	movs	r2, #64	@ 0x40
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e000      	b.n	8004fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004fde:	2302      	movs	r3, #2
  }
}
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	b004      	add	sp, #16
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	fffff0ff 	.word	0xfffff0ff

08004fec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e0e5      	b.n	80051ca <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2235      	movs	r2, #53	@ 0x35
 8005002:	5c9b      	ldrb	r3, [r3, r2]
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d107      	bne.n	800501a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2234      	movs	r2, #52	@ 0x34
 800500e:	2100      	movs	r1, #0
 8005010:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	0018      	movs	r0, r3
 8005016:	f7fe f8b1 	bl	800317c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2235      	movs	r2, #53	@ 0x35
 800501e:	2102      	movs	r1, #2
 8005020:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4969      	ldr	r1, [pc, #420]	@ (80051d4 <HAL_I2S_Init+0x1e8>)
 800502e:	400a      	ands	r2, r1
 8005030:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2202      	movs	r2, #2
 8005038:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d100      	bne.n	8005044 <HAL_I2S_Init+0x58>
 8005042:	e076      	b.n	8005132 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d102      	bne.n	8005052 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800504c:	2310      	movs	r3, #16
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	e001      	b.n	8005056 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005052:	2320      	movs	r3, #32
 8005054:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	2b20      	cmp	r3, #32
 800505c:	d802      	bhi.n	8005064 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8005064:	2380      	movs	r3, #128	@ 0x80
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	0018      	movs	r0, r3
 800506a:	f001 f955 	bl	8006318 <HAL_RCCEx_GetPeriphCLKFreq>
 800506e:	0003      	movs	r3, r0
 8005070:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	2380      	movs	r3, #128	@ 0x80
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	429a      	cmp	r2, r3
 800507c:	d131      	bne.n	80050e2 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d016      	beq.n	80050b4 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	0019      	movs	r1, r3
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f7fb f839 	bl	8000104 <__udivsi3>
 8005092:	0003      	movs	r3, r0
 8005094:	001a      	movs	r2, r3
 8005096:	0013      	movs	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	189b      	adds	r3, r3, r2
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	001a      	movs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	0019      	movs	r1, r3
 80050a6:	0010      	movs	r0, r2
 80050a8:	f7fb f82c 	bl	8000104 <__udivsi3>
 80050ac:	0003      	movs	r3, r0
 80050ae:	3305      	adds	r3, #5
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	e02a      	b.n	800510a <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	0019      	movs	r1, r3
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f7fb f822 	bl	8000104 <__udivsi3>
 80050c0:	0003      	movs	r3, r0
 80050c2:	001a      	movs	r2, r3
 80050c4:	0013      	movs	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	189b      	adds	r3, r3, r2
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	001a      	movs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	0019      	movs	r1, r3
 80050d4:	0010      	movs	r0, r2
 80050d6:	f7fb f815 	bl	8000104 <__udivsi3>
 80050da:	0003      	movs	r3, r0
 80050dc:	3305      	adds	r3, #5
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	e013      	b.n	800510a <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050e2:	6979      	ldr	r1, [r7, #20]
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7fb f80d 	bl	8000104 <__udivsi3>
 80050ea:	0003      	movs	r3, r0
 80050ec:	001a      	movs	r2, r3
 80050ee:	0013      	movs	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	189b      	adds	r3, r3, r2
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	001a      	movs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	0019      	movs	r1, r3
 80050fe:	0010      	movs	r0, r2
 8005100:	f7fb f800 	bl	8000104 <__udivsi3>
 8005104:	0003      	movs	r3, r0
 8005106:	3305      	adds	r3, #5
 8005108:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	210a      	movs	r1, #10
 800510e:	0018      	movs	r0, r3
 8005110:	f7fa fff8 	bl	8000104 <__udivsi3>
 8005114:	0003      	movs	r3, r0
 8005116:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	2201      	movs	r2, #1
 800511c:	4013      	ands	r3, r2
 800511e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	085b      	lsrs	r3, r3, #1
 8005128:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	61bb      	str	r3, [r7, #24]
 8005130:	e003      	b.n	800513a <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005132:	2302      	movs	r3, #2
 8005134:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d902      	bls.n	8005146 <HAL_I2S_Init+0x15a>
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	2bff      	cmp	r3, #255	@ 0xff
 8005144:	d907      	bls.n	8005156 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514a:	2210      	movs	r2, #16
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e039      	b.n	80051ca <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691a      	ldr	r2, [r3, #16]
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	431a      	orrs	r2, r3
 800515e:	0011      	movs	r1, r2
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	430a      	orrs	r2, r1
 8005168:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	4a18      	ldr	r2, [pc, #96]	@ (80051d4 <HAL_I2S_Init+0x1e8>)
 8005172:	401a      	ands	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6859      	ldr	r1, [r3, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	4319      	orrs	r1, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	4319      	orrs	r1, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	430b      	orrs	r3, r1
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2180      	movs	r1, #128	@ 0x80
 8005192:	0109      	lsls	r1, r1, #4
 8005194:	430a      	orrs	r2, r1
 8005196:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b30      	cmp	r3, #48	@ 0x30
 800519e:	d003      	beq.n	80051a8 <HAL_I2S_Init+0x1bc>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2bb0      	cmp	r3, #176	@ 0xb0
 80051a6:	d108      	bne.n	80051ba <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69da      	ldr	r2, [r3, #28]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2180      	movs	r1, #128	@ 0x80
 80051b4:	0149      	lsls	r1, r1, #5
 80051b6:	430a      	orrs	r2, r1
 80051b8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2235      	movs	r2, #53	@ 0x35
 80051c4:	2101      	movs	r1, #1
 80051c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	0018      	movs	r0, r3
 80051cc:	46bd      	mov	sp, r7
 80051ce:	b008      	add	sp, #32
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	46c0      	nop			@ (mov r8, r8)
 80051d4:	fffff040 	.word	0xfffff040

080051d8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	1dbb      	adds	r3, r7, #6
 80051e4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_I2S_Transmit_DMA+0x1c>
 80051ec:	1dbb      	adds	r3, r7, #6
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e091      	b.n	800531c <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2234      	movs	r2, #52	@ 0x34
 80051fc:	5c9b      	ldrb	r3, [r3, r2]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_I2S_Transmit_DMA+0x30>
 8005204:	2302      	movs	r3, #2
 8005206:	e089      	b.n	800531c <HAL_I2S_Transmit_DMA+0x144>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2234      	movs	r2, #52	@ 0x34
 800520c:	2101      	movs	r1, #1
 800520e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2235      	movs	r2, #53	@ 0x35
 8005214:	5c9b      	ldrb	r3, [r3, r2]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b01      	cmp	r3, #1
 800521a:	d005      	beq.n	8005228 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2234      	movs	r2, #52	@ 0x34
 8005220:	2100      	movs	r1, #0
 8005222:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8005224:	2302      	movs	r3, #2
 8005226:	e079      	b.n	800531c <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2235      	movs	r2, #53	@ 0x35
 800522c:	2103      	movs	r1, #3
 800522e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	2207      	movs	r2, #7
 8005244:	4013      	ands	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2b03      	cmp	r3, #3
 800524c:	d002      	beq.n	8005254 <HAL_I2S_Transmit_DMA+0x7c>
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b05      	cmp	r3, #5
 8005252:	d10c      	bne.n	800526e <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005254:	1dbb      	adds	r3, r7, #6
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	18db      	adds	r3, r3, r3
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8005260:	1dbb      	adds	r3, r7, #6
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	18db      	adds	r3, r3, r3
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	845a      	strh	r2, [r3, #34]	@ 0x22
 800526c:	e007      	b.n	800527e <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1dba      	adds	r2, r7, #6
 8005272:	8812      	ldrh	r2, [r2, #0]
 8005274:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	1dba      	adds	r2, r7, #6
 800527a:	8812      	ldrh	r2, [r2, #0]
 800527c:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005282:	4a28      	ldr	r2, [pc, #160]	@ (8005324 <HAL_I2S_Transmit_DMA+0x14c>)
 8005284:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528a:	4a27      	ldr	r2, [pc, #156]	@ (8005328 <HAL_I2S_Transmit_DMA+0x150>)
 800528c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005292:	4a26      	ldr	r2, [pc, #152]	@ (800532c <HAL_I2S_Transmit_DMA+0x154>)
 8005294:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800529e:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80052a6:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8c1b      	ldrh	r3, [r3, #32]
 80052ac:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80052ae:	f7fe fc4b 	bl	8003b48 <HAL_DMA_Start_IT>
 80052b2:	1e03      	subs	r3, r0, #0
 80052b4:	d00f      	beq.n	80052d6 <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ba:	2208      	movs	r2, #8
 80052bc:	431a      	orrs	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2235      	movs	r2, #53	@ 0x35
 80052c6:	2101      	movs	r1, #1
 80052c8:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2234      	movs	r2, #52	@ 0x34
 80052ce:	2100      	movs	r1, #0
 80052d0:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e022      	b.n	800531c <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	2380      	movs	r3, #128	@ 0x80
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	4013      	ands	r3, r2
 80052e2:	d108      	bne.n	80052f6 <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	69da      	ldr	r2, [r3, #28]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2180      	movs	r1, #128	@ 0x80
 80052f0:	00c9      	lsls	r1, r1, #3
 80052f2:	430a      	orrs	r2, r1
 80052f4:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	4013      	ands	r3, r2
 8005300:	d107      	bne.n	8005312 <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2102      	movs	r1, #2
 800530e:	430a      	orrs	r2, r1
 8005310:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2234      	movs	r2, #52	@ 0x34
 8005316:	2100      	movs	r1, #0
 8005318:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	0018      	movs	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	b006      	add	sp, #24
 8005322:	bd80      	pop	{r7, pc}
 8005324:	0800550d 	.word	0x0800550d
 8005328:	080054c9 	.word	0x080054c9
 800532c:	0800552b 	.word	0x0800552b

08005330 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005338:	2317      	movs	r3, #23
 800533a:	18fb      	adds	r3, r7, r3
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	2380      	movs	r3, #128	@ 0x80
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	429a      	cmp	r2, r3
 800534a:	d003      	beq.n	8005354 <HAL_I2S_DMAStop+0x24>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d158      	bne.n	8005406 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d010      	beq.n	800537e <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005360:	0018      	movs	r0, r3
 8005362:	f7fe fc77 	bl	8003c54 <HAL_DMA_Abort>
 8005366:	1e03      	subs	r3, r0, #0
 8005368:	d009      	beq.n	800537e <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536e:	2208      	movs	r2, #8
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8005376:	2317      	movs	r3, #23
 8005378:	18fb      	adds	r3, r7, r3
 800537a:	2201      	movs	r2, #1
 800537c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	2364      	movs	r3, #100	@ 0x64
 8005382:	2201      	movs	r2, #1
 8005384:	2102      	movs	r1, #2
 8005386:	f000 f8f7 	bl	8005578 <I2S_WaitFlagStateUntilTimeout>
 800538a:	1e03      	subs	r3, r0, #0
 800538c:	d00d      	beq.n	80053aa <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005392:	2201      	movs	r2, #1
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2235      	movs	r2, #53	@ 0x35
 800539e:	2101      	movs	r1, #1
 80053a0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80053a2:	2317      	movs	r3, #23
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	2201      	movs	r2, #1
 80053a8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	2364      	movs	r3, #100	@ 0x64
 80053ae:	2200      	movs	r2, #0
 80053b0:	2180      	movs	r1, #128	@ 0x80
 80053b2:	f000 f8e1 	bl	8005578 <I2S_WaitFlagStateUntilTimeout>
 80053b6:	1e03      	subs	r3, r0, #0
 80053b8:	d00d      	beq.n	80053d6 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053be:	2201      	movs	r2, #1
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2235      	movs	r2, #53	@ 0x35
 80053ca:	2101      	movs	r1, #1
 80053cc:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80053ce:	2317      	movs	r3, #23
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	2201      	movs	r2, #1
 80053d4:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69da      	ldr	r2, [r3, #28]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4938      	ldr	r1, [pc, #224]	@ (80054c4 <HAL_I2S_DMAStop+0x194>)
 80053e2:	400a      	ands	r2, r1
 80053e4:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80053e6:	2300      	movs	r3, #0
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2102      	movs	r1, #2
 8005400:	438a      	bics	r2, r1
 8005402:	605a      	str	r2, [r3, #4]
 8005404:	e053      	b.n	80054ae <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	23c0      	movs	r3, #192	@ 0xc0
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	429a      	cmp	r2, r3
 8005410:	d005      	beq.n	800541e <HAL_I2S_DMAStop+0xee>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	2380      	movs	r3, #128	@ 0x80
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	429a      	cmp	r2, r3
 800541c:	d147      	bne.n	80054ae <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005422:	2b00      	cmp	r3, #0
 8005424:	d010      	beq.n	8005448 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542a:	0018      	movs	r0, r3
 800542c:	f7fe fc12 	bl	8003c54 <HAL_DMA_Abort>
 8005430:	1e03      	subs	r3, r0, #0
 8005432:	d009      	beq.n	8005448 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005438:	2208      	movs	r2, #8
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8005440:	2317      	movs	r3, #23
 8005442:	18fb      	adds	r3, r7, r3
 8005444:	2201      	movs	r2, #1
 8005446:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69da      	ldr	r2, [r3, #28]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	491c      	ldr	r1, [pc, #112]	@ (80054c4 <HAL_I2S_DMAStop+0x194>)
 8005454:	400a      	ands	r2, r1
 8005456:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2101      	movs	r1, #1
 800547a:	438a      	bics	r2, r1
 800547c:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	2380      	movs	r3, #128	@ 0x80
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	429a      	cmp	r2, r3
 8005488:	d10e      	bne.n	80054a8 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548e:	2240      	movs	r2, #64	@ 0x40
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2235      	movs	r2, #53	@ 0x35
 800549a:	2101      	movs	r1, #1
 800549c:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800549e:	2317      	movs	r3, #23
 80054a0:	18fb      	adds	r3, r7, r3
 80054a2:	2201      	movs	r2, #1
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e002      	b.n	80054ae <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2235      	movs	r2, #53	@ 0x35
 80054b2:	2101      	movs	r1, #1
 80054b4:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80054b6:	2317      	movs	r3, #23
 80054b8:	18fb      	adds	r3, r7, r3
 80054ba:	781b      	ldrb	r3, [r3, #0]
}
 80054bc:	0018      	movs	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	b006      	add	sp, #24
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	fffffbff 	.word	0xfffffbff

080054c8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10e      	bne.n	80054fc <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2102      	movs	r1, #2
 80054ea:	438a      	bics	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	845a      	strh	r2, [r3, #34]	@ 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2235      	movs	r2, #53	@ 0x35
 80054f8:	2101      	movs	r1, #1
 80054fa:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	0018      	movs	r0, r3
 8005500:	f7fd fb21 	bl	8002b46 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005504:	46c0      	nop			@ (mov r8, r8)
 8005506:	46bd      	mov	sp, r7
 8005508:	b004      	add	sp, #16
 800550a:	bd80      	pop	{r7, pc}

0800550c <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005518:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	0018      	movs	r0, r3
 800551e:	f7fd fb07 	bl	8002b30 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005522:	46c0      	nop			@ (mov r8, r8)
 8005524:	46bd      	mov	sp, r7
 8005526:	b004      	add	sp, #16
 8005528:	bd80      	pop	{r7, pc}

0800552a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005536:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2103      	movs	r1, #3
 8005544:	438a      	bics	r2, r1
 8005546:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2235      	movs	r2, #53	@ 0x35
 8005558:	2101      	movs	r1, #1
 800555a:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005560:	2208      	movs	r2, #8
 8005562:	431a      	orrs	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	0018      	movs	r0, r3
 800556c:	f7fd fb48 	bl	8002c00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005570:	46c0      	nop			@ (mov r8, r8)
 8005572:	46bd      	mov	sp, r7
 8005574:	b004      	add	sp, #16
 8005576:	bd80      	pop	{r7, pc}

08005578 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	1dfb      	adds	r3, r7, #7
 8005586:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005588:	f7fe f96c 	bl	8003864 <HAL_GetTick>
 800558c:	0003      	movs	r3, r0
 800558e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005590:	e017      	b.n	80055c2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	3301      	adds	r3, #1
 8005596:	d014      	beq.n	80055c2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005598:	f7fe f964 	bl	8003864 <HAL_GetTick>
 800559c:	0002      	movs	r2, r0
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d902      	bls.n	80055ae <I2S_WaitFlagStateUntilTimeout+0x36>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d109      	bne.n	80055c2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2235      	movs	r2, #53	@ 0x35
 80055b2:	2101      	movs	r1, #1
 80055b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2234      	movs	r2, #52	@ 0x34
 80055ba:	2100      	movs	r1, #0
 80055bc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e00f      	b.n	80055e2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	4013      	ands	r3, r2
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	425a      	negs	r2, r3
 80055d2:	4153      	adcs	r3, r2
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	001a      	movs	r2, r3
 80055d8:	1dfb      	adds	r3, r7, #7
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d1d8      	bne.n	8005592 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	0018      	movs	r0, r3
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b006      	add	sp, #24
 80055e8:	bd80      	pop	{r7, pc}
	...

080055ec <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055f0:	4b04      	ldr	r3, [pc, #16]	@ (8005604 <HAL_PWR_EnableBkUpAccess+0x18>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	4b03      	ldr	r3, [pc, #12]	@ (8005604 <HAL_PWR_EnableBkUpAccess+0x18>)
 80055f6:	2180      	movs	r1, #128	@ 0x80
 80055f8:	0049      	lsls	r1, r1, #1
 80055fa:	430a      	orrs	r2, r1
 80055fc:	601a      	str	r2, [r3, #0]
}
 80055fe:	46c0      	nop			@ (mov r8, r8)
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	40007000 	.word	0x40007000

08005608 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005610:	4b19      	ldr	r3, [pc, #100]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a19      	ldr	r2, [pc, #100]	@ (800567c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005616:	4013      	ands	r3, r2
 8005618:	0019      	movs	r1, r3
 800561a:	4b17      	ldr	r3, [pc, #92]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	430a      	orrs	r2, r1
 8005620:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	2380      	movs	r3, #128	@ 0x80
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	429a      	cmp	r2, r3
 800562a:	d11f      	bne.n	800566c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800562c:	4b14      	ldr	r3, [pc, #80]	@ (8005680 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	0013      	movs	r3, r2
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	189b      	adds	r3, r3, r2
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	4912      	ldr	r1, [pc, #72]	@ (8005684 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800563a:	0018      	movs	r0, r3
 800563c:	f7fa fd62 	bl	8000104 <__udivsi3>
 8005640:	0003      	movs	r3, r0
 8005642:	3301      	adds	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005646:	e008      	b.n	800565a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3b01      	subs	r3, #1
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	e001      	b.n	800565a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e009      	b.n	800566e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800565a:	4b07      	ldr	r3, [pc, #28]	@ (8005678 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	2380      	movs	r3, #128	@ 0x80
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	401a      	ands	r2, r3
 8005664:	2380      	movs	r3, #128	@ 0x80
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	429a      	cmp	r2, r3
 800566a:	d0ed      	beq.n	8005648 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	0018      	movs	r0, r3
 8005670:	46bd      	mov	sp, r7
 8005672:	b004      	add	sp, #16
 8005674:	bd80      	pop	{r7, pc}
 8005676:	46c0      	nop			@ (mov r8, r8)
 8005678:	40007000 	.word	0x40007000
 800567c:	fffff9ff 	.word	0xfffff9ff
 8005680:	2000008c 	.word	0x2000008c
 8005684:	000f4240 	.word	0x000f4240

08005688 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800568c:	4b03      	ldr	r3, [pc, #12]	@ (800569c <LL_RCC_GetAPB1Prescaler+0x14>)
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	23e0      	movs	r3, #224	@ 0xe0
 8005692:	01db      	lsls	r3, r3, #7
 8005694:	4013      	ands	r3, r2
}
 8005696:	0018      	movs	r0, r3
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40021000 	.word	0x40021000

080056a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e2fe      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2201      	movs	r2, #1
 80056b8:	4013      	ands	r3, r2
 80056ba:	d100      	bne.n	80056be <HAL_RCC_OscConfig+0x1e>
 80056bc:	e07c      	b.n	80057b8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056be:	4bc3      	ldr	r3, [pc, #780]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2238      	movs	r2, #56	@ 0x38
 80056c4:	4013      	ands	r3, r2
 80056c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056c8:	4bc0      	ldr	r3, [pc, #768]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	2203      	movs	r2, #3
 80056ce:	4013      	ands	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	2b10      	cmp	r3, #16
 80056d6:	d102      	bne.n	80056de <HAL_RCC_OscConfig+0x3e>
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d002      	beq.n	80056e4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d10b      	bne.n	80056fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e4:	4bb9      	ldr	r3, [pc, #740]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	2380      	movs	r3, #128	@ 0x80
 80056ea:	029b      	lsls	r3, r3, #10
 80056ec:	4013      	ands	r3, r2
 80056ee:	d062      	beq.n	80057b6 <HAL_RCC_OscConfig+0x116>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d15e      	bne.n	80057b6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e2d9      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	2380      	movs	r3, #128	@ 0x80
 8005702:	025b      	lsls	r3, r3, #9
 8005704:	429a      	cmp	r2, r3
 8005706:	d107      	bne.n	8005718 <HAL_RCC_OscConfig+0x78>
 8005708:	4bb0      	ldr	r3, [pc, #704]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	4baf      	ldr	r3, [pc, #700]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 800570e:	2180      	movs	r1, #128	@ 0x80
 8005710:	0249      	lsls	r1, r1, #9
 8005712:	430a      	orrs	r2, r1
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	e020      	b.n	800575a <HAL_RCC_OscConfig+0xba>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	23a0      	movs	r3, #160	@ 0xa0
 800571e:	02db      	lsls	r3, r3, #11
 8005720:	429a      	cmp	r2, r3
 8005722:	d10e      	bne.n	8005742 <HAL_RCC_OscConfig+0xa2>
 8005724:	4ba9      	ldr	r3, [pc, #676]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	4ba8      	ldr	r3, [pc, #672]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 800572a:	2180      	movs	r1, #128	@ 0x80
 800572c:	02c9      	lsls	r1, r1, #11
 800572e:	430a      	orrs	r2, r1
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	4ba6      	ldr	r3, [pc, #664]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	4ba5      	ldr	r3, [pc, #660]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005738:	2180      	movs	r1, #128	@ 0x80
 800573a:	0249      	lsls	r1, r1, #9
 800573c:	430a      	orrs	r2, r1
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	e00b      	b.n	800575a <HAL_RCC_OscConfig+0xba>
 8005742:	4ba2      	ldr	r3, [pc, #648]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	4ba1      	ldr	r3, [pc, #644]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005748:	49a1      	ldr	r1, [pc, #644]	@ (80059d0 <HAL_RCC_OscConfig+0x330>)
 800574a:	400a      	ands	r2, r1
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	4b9f      	ldr	r3, [pc, #636]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4b9e      	ldr	r3, [pc, #632]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005754:	499f      	ldr	r1, [pc, #636]	@ (80059d4 <HAL_RCC_OscConfig+0x334>)
 8005756:	400a      	ands	r2, r1
 8005758:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d014      	beq.n	800578c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005762:	f7fe f87f 	bl	8003864 <HAL_GetTick>
 8005766:	0003      	movs	r3, r0
 8005768:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800576c:	f7fe f87a 	bl	8003864 <HAL_GetTick>
 8005770:	0002      	movs	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b64      	cmp	r3, #100	@ 0x64
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e298      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800577e:	4b93      	ldr	r3, [pc, #588]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	2380      	movs	r3, #128	@ 0x80
 8005784:	029b      	lsls	r3, r3, #10
 8005786:	4013      	ands	r3, r2
 8005788:	d0f0      	beq.n	800576c <HAL_RCC_OscConfig+0xcc>
 800578a:	e015      	b.n	80057b8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800578c:	f7fe f86a 	bl	8003864 <HAL_GetTick>
 8005790:	0003      	movs	r3, r0
 8005792:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005796:	f7fe f865 	bl	8003864 <HAL_GetTick>
 800579a:	0002      	movs	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b64      	cmp	r3, #100	@ 0x64
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e283      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057a8:	4b88      	ldr	r3, [pc, #544]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	2380      	movs	r3, #128	@ 0x80
 80057ae:	029b      	lsls	r3, r3, #10
 80057b0:	4013      	ands	r3, r2
 80057b2:	d1f0      	bne.n	8005796 <HAL_RCC_OscConfig+0xf6>
 80057b4:	e000      	b.n	80057b8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2202      	movs	r2, #2
 80057be:	4013      	ands	r3, r2
 80057c0:	d100      	bne.n	80057c4 <HAL_RCC_OscConfig+0x124>
 80057c2:	e099      	b.n	80058f8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057c4:	4b81      	ldr	r3, [pc, #516]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2238      	movs	r2, #56	@ 0x38
 80057ca:	4013      	ands	r3, r2
 80057cc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057ce:	4b7f      	ldr	r3, [pc, #508]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	2203      	movs	r2, #3
 80057d4:	4013      	ands	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	2b10      	cmp	r3, #16
 80057dc:	d102      	bne.n	80057e4 <HAL_RCC_OscConfig+0x144>
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d002      	beq.n	80057ea <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d135      	bne.n	8005856 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057ea:	4b78      	ldr	r3, [pc, #480]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	2380      	movs	r3, #128	@ 0x80
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	4013      	ands	r3, r2
 80057f4:	d005      	beq.n	8005802 <HAL_RCC_OscConfig+0x162>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e256      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005802:	4b72      	ldr	r3, [pc, #456]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	4a74      	ldr	r2, [pc, #464]	@ (80059d8 <HAL_RCC_OscConfig+0x338>)
 8005808:	4013      	ands	r3, r2
 800580a:	0019      	movs	r1, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	021a      	lsls	r2, r3, #8
 8005812:	4b6e      	ldr	r3, [pc, #440]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005814:	430a      	orrs	r2, r1
 8005816:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d112      	bne.n	8005844 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800581e:	4b6b      	ldr	r3, [pc, #428]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a6e      	ldr	r2, [pc, #440]	@ (80059dc <HAL_RCC_OscConfig+0x33c>)
 8005824:	4013      	ands	r3, r2
 8005826:	0019      	movs	r1, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	4b67      	ldr	r3, [pc, #412]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 800582e:	430a      	orrs	r2, r1
 8005830:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005832:	4b66      	ldr	r3, [pc, #408]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	0adb      	lsrs	r3, r3, #11
 8005838:	2207      	movs	r2, #7
 800583a:	4013      	ands	r3, r2
 800583c:	4a68      	ldr	r2, [pc, #416]	@ (80059e0 <HAL_RCC_OscConfig+0x340>)
 800583e:	40da      	lsrs	r2, r3
 8005840:	4b68      	ldr	r3, [pc, #416]	@ (80059e4 <HAL_RCC_OscConfig+0x344>)
 8005842:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005844:	4b68      	ldr	r3, [pc, #416]	@ (80059e8 <HAL_RCC_OscConfig+0x348>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	0018      	movs	r0, r3
 800584a:	f7fd ffaf 	bl	80037ac <HAL_InitTick>
 800584e:	1e03      	subs	r3, r0, #0
 8005850:	d051      	beq.n	80058f6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e22c      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d030      	beq.n	80058c0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800585e:	4b5b      	ldr	r3, [pc, #364]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a5e      	ldr	r2, [pc, #376]	@ (80059dc <HAL_RCC_OscConfig+0x33c>)
 8005864:	4013      	ands	r3, r2
 8005866:	0019      	movs	r1, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	4b57      	ldr	r3, [pc, #348]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 800586e:	430a      	orrs	r2, r1
 8005870:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005872:	4b56      	ldr	r3, [pc, #344]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4b55      	ldr	r3, [pc, #340]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005878:	2180      	movs	r1, #128	@ 0x80
 800587a:	0049      	lsls	r1, r1, #1
 800587c:	430a      	orrs	r2, r1
 800587e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005880:	f7fd fff0 	bl	8003864 <HAL_GetTick>
 8005884:	0003      	movs	r3, r0
 8005886:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005888:	e008      	b.n	800589c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800588a:	f7fd ffeb 	bl	8003864 <HAL_GetTick>
 800588e:	0002      	movs	r2, r0
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e209      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800589c:	4b4b      	ldr	r3, [pc, #300]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	2380      	movs	r3, #128	@ 0x80
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	4013      	ands	r3, r2
 80058a6:	d0f0      	beq.n	800588a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058a8:	4b48      	ldr	r3, [pc, #288]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	4a4a      	ldr	r2, [pc, #296]	@ (80059d8 <HAL_RCC_OscConfig+0x338>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	0019      	movs	r1, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	021a      	lsls	r2, r3, #8
 80058b8:	4b44      	ldr	r3, [pc, #272]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
 80058be:	e01b      	b.n	80058f8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80058c0:	4b42      	ldr	r3, [pc, #264]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	4b41      	ldr	r3, [pc, #260]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 80058c6:	4949      	ldr	r1, [pc, #292]	@ (80059ec <HAL_RCC_OscConfig+0x34c>)
 80058c8:	400a      	ands	r2, r1
 80058ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058cc:	f7fd ffca 	bl	8003864 <HAL_GetTick>
 80058d0:	0003      	movs	r3, r0
 80058d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058d6:	f7fd ffc5 	bl	8003864 <HAL_GetTick>
 80058da:	0002      	movs	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e1e3      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058e8:	4b38      	ldr	r3, [pc, #224]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	2380      	movs	r3, #128	@ 0x80
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	4013      	ands	r3, r2
 80058f2:	d1f0      	bne.n	80058d6 <HAL_RCC_OscConfig+0x236>
 80058f4:	e000      	b.n	80058f8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058f6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2208      	movs	r2, #8
 80058fe:	4013      	ands	r3, r2
 8005900:	d047      	beq.n	8005992 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005902:	4b32      	ldr	r3, [pc, #200]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	2238      	movs	r2, #56	@ 0x38
 8005908:	4013      	ands	r3, r2
 800590a:	2b18      	cmp	r3, #24
 800590c:	d10a      	bne.n	8005924 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800590e:	4b2f      	ldr	r3, [pc, #188]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005912:	2202      	movs	r2, #2
 8005914:	4013      	ands	r3, r2
 8005916:	d03c      	beq.n	8005992 <HAL_RCC_OscConfig+0x2f2>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d138      	bne.n	8005992 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e1c5      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d019      	beq.n	8005960 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800592c:	4b27      	ldr	r3, [pc, #156]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 800592e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005930:	4b26      	ldr	r3, [pc, #152]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005932:	2101      	movs	r1, #1
 8005934:	430a      	orrs	r2, r1
 8005936:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005938:	f7fd ff94 	bl	8003864 <HAL_GetTick>
 800593c:	0003      	movs	r3, r0
 800593e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005940:	e008      	b.n	8005954 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005942:	f7fd ff8f 	bl	8003864 <HAL_GetTick>
 8005946:	0002      	movs	r2, r0
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e1ad      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005954:	4b1d      	ldr	r3, [pc, #116]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005958:	2202      	movs	r2, #2
 800595a:	4013      	ands	r3, r2
 800595c:	d0f1      	beq.n	8005942 <HAL_RCC_OscConfig+0x2a2>
 800595e:	e018      	b.n	8005992 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005960:	4b1a      	ldr	r3, [pc, #104]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005962:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005964:	4b19      	ldr	r3, [pc, #100]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 8005966:	2101      	movs	r1, #1
 8005968:	438a      	bics	r2, r1
 800596a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596c:	f7fd ff7a 	bl	8003864 <HAL_GetTick>
 8005970:	0003      	movs	r3, r0
 8005972:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005974:	e008      	b.n	8005988 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005976:	f7fd ff75 	bl	8003864 <HAL_GetTick>
 800597a:	0002      	movs	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d901      	bls.n	8005988 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e193      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005988:	4b10      	ldr	r3, [pc, #64]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 800598a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800598c:	2202      	movs	r2, #2
 800598e:	4013      	ands	r3, r2
 8005990:	d1f1      	bne.n	8005976 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2204      	movs	r2, #4
 8005998:	4013      	ands	r3, r2
 800599a:	d100      	bne.n	800599e <HAL_RCC_OscConfig+0x2fe>
 800599c:	e0c6      	b.n	8005b2c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800599e:	231f      	movs	r3, #31
 80059a0:	18fb      	adds	r3, r7, r3
 80059a2:	2200      	movs	r2, #0
 80059a4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80059a6:	4b09      	ldr	r3, [pc, #36]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2238      	movs	r2, #56	@ 0x38
 80059ac:	4013      	ands	r3, r2
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	d11e      	bne.n	80059f0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80059b2:	4b06      	ldr	r3, [pc, #24]	@ (80059cc <HAL_RCC_OscConfig+0x32c>)
 80059b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b6:	2202      	movs	r2, #2
 80059b8:	4013      	ands	r3, r2
 80059ba:	d100      	bne.n	80059be <HAL_RCC_OscConfig+0x31e>
 80059bc:	e0b6      	b.n	8005b2c <HAL_RCC_OscConfig+0x48c>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d000      	beq.n	80059c8 <HAL_RCC_OscConfig+0x328>
 80059c6:	e0b1      	b.n	8005b2c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e171      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
 80059cc:	40021000 	.word	0x40021000
 80059d0:	fffeffff 	.word	0xfffeffff
 80059d4:	fffbffff 	.word	0xfffbffff
 80059d8:	ffff80ff 	.word	0xffff80ff
 80059dc:	ffffc7ff 	.word	0xffffc7ff
 80059e0:	00f42400 	.word	0x00f42400
 80059e4:	2000008c 	.word	0x2000008c
 80059e8:	20000090 	.word	0x20000090
 80059ec:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059f0:	4bb1      	ldr	r3, [pc, #708]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 80059f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059f4:	2380      	movs	r3, #128	@ 0x80
 80059f6:	055b      	lsls	r3, r3, #21
 80059f8:	4013      	ands	r3, r2
 80059fa:	d101      	bne.n	8005a00 <HAL_RCC_OscConfig+0x360>
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <HAL_RCC_OscConfig+0x362>
 8005a00:	2300      	movs	r3, #0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d011      	beq.n	8005a2a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005a06:	4bac      	ldr	r3, [pc, #688]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005a08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a0a:	4bab      	ldr	r3, [pc, #684]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005a0c:	2180      	movs	r1, #128	@ 0x80
 8005a0e:	0549      	lsls	r1, r1, #21
 8005a10:	430a      	orrs	r2, r1
 8005a12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a14:	4ba8      	ldr	r3, [pc, #672]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005a16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a18:	2380      	movs	r3, #128	@ 0x80
 8005a1a:	055b      	lsls	r3, r3, #21
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005a22:	231f      	movs	r3, #31
 8005a24:	18fb      	adds	r3, r7, r3
 8005a26:	2201      	movs	r2, #1
 8005a28:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a2a:	4ba4      	ldr	r3, [pc, #656]	@ (8005cbc <HAL_RCC_OscConfig+0x61c>)
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	2380      	movs	r3, #128	@ 0x80
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	4013      	ands	r3, r2
 8005a34:	d11a      	bne.n	8005a6c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a36:	4ba1      	ldr	r3, [pc, #644]	@ (8005cbc <HAL_RCC_OscConfig+0x61c>)
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	4ba0      	ldr	r3, [pc, #640]	@ (8005cbc <HAL_RCC_OscConfig+0x61c>)
 8005a3c:	2180      	movs	r1, #128	@ 0x80
 8005a3e:	0049      	lsls	r1, r1, #1
 8005a40:	430a      	orrs	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005a44:	f7fd ff0e 	bl	8003864 <HAL_GetTick>
 8005a48:	0003      	movs	r3, r0
 8005a4a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a4e:	f7fd ff09 	bl	8003864 <HAL_GetTick>
 8005a52:	0002      	movs	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e127      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a60:	4b96      	ldr	r3, [pc, #600]	@ (8005cbc <HAL_RCC_OscConfig+0x61c>)
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	2380      	movs	r3, #128	@ 0x80
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d0f0      	beq.n	8005a4e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d106      	bne.n	8005a82 <HAL_RCC_OscConfig+0x3e2>
 8005a74:	4b90      	ldr	r3, [pc, #576]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005a76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a78:	4b8f      	ldr	r3, [pc, #572]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a80:	e01c      	b.n	8005abc <HAL_RCC_OscConfig+0x41c>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	2b05      	cmp	r3, #5
 8005a88:	d10c      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x404>
 8005a8a:	4b8b      	ldr	r3, [pc, #556]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005a8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a8e:	4b8a      	ldr	r3, [pc, #552]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005a90:	2104      	movs	r1, #4
 8005a92:	430a      	orrs	r2, r1
 8005a94:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a96:	4b88      	ldr	r3, [pc, #544]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005a98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a9a:	4b87      	ldr	r3, [pc, #540]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005aa2:	e00b      	b.n	8005abc <HAL_RCC_OscConfig+0x41c>
 8005aa4:	4b84      	ldr	r3, [pc, #528]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005aa6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005aa8:	4b83      	ldr	r3, [pc, #524]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005aaa:	2101      	movs	r1, #1
 8005aac:	438a      	bics	r2, r1
 8005aae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ab0:	4b81      	ldr	r3, [pc, #516]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005ab2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ab4:	4b80      	ldr	r3, [pc, #512]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005ab6:	2104      	movs	r1, #4
 8005ab8:	438a      	bics	r2, r1
 8005aba:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d014      	beq.n	8005aee <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac4:	f7fd fece 	bl	8003864 <HAL_GetTick>
 8005ac8:	0003      	movs	r3, r0
 8005aca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005acc:	e009      	b.n	8005ae2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ace:	f7fd fec9 	bl	8003864 <HAL_GetTick>
 8005ad2:	0002      	movs	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	4a79      	ldr	r2, [pc, #484]	@ (8005cc0 <HAL_RCC_OscConfig+0x620>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e0e6      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ae2:	4b75      	ldr	r3, [pc, #468]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d0f0      	beq.n	8005ace <HAL_RCC_OscConfig+0x42e>
 8005aec:	e013      	b.n	8005b16 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aee:	f7fd feb9 	bl	8003864 <HAL_GetTick>
 8005af2:	0003      	movs	r3, r0
 8005af4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005af6:	e009      	b.n	8005b0c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005af8:	f7fd feb4 	bl	8003864 <HAL_GetTick>
 8005afc:	0002      	movs	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	4a6f      	ldr	r2, [pc, #444]	@ (8005cc0 <HAL_RCC_OscConfig+0x620>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e0d1      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b0c:	4b6a      	ldr	r3, [pc, #424]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b10:	2202      	movs	r2, #2
 8005b12:	4013      	ands	r3, r2
 8005b14:	d1f0      	bne.n	8005af8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005b16:	231f      	movs	r3, #31
 8005b18:	18fb      	adds	r3, r7, r3
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d105      	bne.n	8005b2c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005b20:	4b65      	ldr	r3, [pc, #404]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005b22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b24:	4b64      	ldr	r3, [pc, #400]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005b26:	4967      	ldr	r1, [pc, #412]	@ (8005cc4 <HAL_RCC_OscConfig+0x624>)
 8005b28:	400a      	ands	r2, r1
 8005b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d100      	bne.n	8005b36 <HAL_RCC_OscConfig+0x496>
 8005b34:	e0bb      	b.n	8005cae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b36:	4b60      	ldr	r3, [pc, #384]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2238      	movs	r2, #56	@ 0x38
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	2b10      	cmp	r3, #16
 8005b40:	d100      	bne.n	8005b44 <HAL_RCC_OscConfig+0x4a4>
 8005b42:	e07b      	b.n	8005c3c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d156      	bne.n	8005bfa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b4c:	4b5a      	ldr	r3, [pc, #360]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	4b59      	ldr	r3, [pc, #356]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005b52:	495d      	ldr	r1, [pc, #372]	@ (8005cc8 <HAL_RCC_OscConfig+0x628>)
 8005b54:	400a      	ands	r2, r1
 8005b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b58:	f7fd fe84 	bl	8003864 <HAL_GetTick>
 8005b5c:	0003      	movs	r3, r0
 8005b5e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b60:	e008      	b.n	8005b74 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b62:	f7fd fe7f 	bl	8003864 <HAL_GetTick>
 8005b66:	0002      	movs	r2, r0
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e09d      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b74:	4b50      	ldr	r3, [pc, #320]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	2380      	movs	r3, #128	@ 0x80
 8005b7a:	049b      	lsls	r3, r3, #18
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d1f0      	bne.n	8005b62 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b80:	4b4d      	ldr	r3, [pc, #308]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	4a51      	ldr	r2, [pc, #324]	@ (8005ccc <HAL_RCC_OscConfig+0x62c>)
 8005b86:	4013      	ands	r3, r2
 8005b88:	0019      	movs	r1, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1a      	ldr	r2, [r3, #32]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b98:	021b      	lsls	r3, r3, #8
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bac:	431a      	orrs	r2, r3
 8005bae:	4b42      	ldr	r3, [pc, #264]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bb4:	4b40      	ldr	r3, [pc, #256]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	4b3f      	ldr	r3, [pc, #252]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005bba:	2180      	movs	r1, #128	@ 0x80
 8005bbc:	0449      	lsls	r1, r1, #17
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	4b3c      	ldr	r3, [pc, #240]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005bc8:	2180      	movs	r1, #128	@ 0x80
 8005bca:	0549      	lsls	r1, r1, #21
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd0:	f7fd fe48 	bl	8003864 <HAL_GetTick>
 8005bd4:	0003      	movs	r3, r0
 8005bd6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bd8:	e008      	b.n	8005bec <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bda:	f7fd fe43 	bl	8003864 <HAL_GetTick>
 8005bde:	0002      	movs	r2, r0
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d901      	bls.n	8005bec <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e061      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bec:	4b32      	ldr	r3, [pc, #200]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	2380      	movs	r3, #128	@ 0x80
 8005bf2:	049b      	lsls	r3, r3, #18
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	d0f0      	beq.n	8005bda <HAL_RCC_OscConfig+0x53a>
 8005bf8:	e059      	b.n	8005cae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005c00:	4931      	ldr	r1, [pc, #196]	@ (8005cc8 <HAL_RCC_OscConfig+0x628>)
 8005c02:	400a      	ands	r2, r1
 8005c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c06:	f7fd fe2d 	bl	8003864 <HAL_GetTick>
 8005c0a:	0003      	movs	r3, r0
 8005c0c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c0e:	e008      	b.n	8005c22 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c10:	f7fd fe28 	bl	8003864 <HAL_GetTick>
 8005c14:	0002      	movs	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e046      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c22:	4b25      	ldr	r3, [pc, #148]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	2380      	movs	r3, #128	@ 0x80
 8005c28:	049b      	lsls	r3, r3, #18
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	d1f0      	bne.n	8005c10 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005c2e:	4b22      	ldr	r3, [pc, #136]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	4b21      	ldr	r3, [pc, #132]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005c34:	4926      	ldr	r1, [pc, #152]	@ (8005cd0 <HAL_RCC_OscConfig+0x630>)
 8005c36:	400a      	ands	r2, r1
 8005c38:	60da      	str	r2, [r3, #12]
 8005c3a:	e038      	b.n	8005cae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e033      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005c48:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb8 <HAL_RCC_OscConfig+0x618>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2203      	movs	r2, #3
 8005c52:	401a      	ands	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d126      	bne.n	8005caa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2270      	movs	r2, #112	@ 0x70
 8005c60:	401a      	ands	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d11f      	bne.n	8005caa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	23fe      	movs	r3, #254	@ 0xfe
 8005c6e:	01db      	lsls	r3, r3, #7
 8005c70:	401a      	ands	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c76:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d116      	bne.n	8005caa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	23f8      	movs	r3, #248	@ 0xf8
 8005c80:	039b      	lsls	r3, r3, #14
 8005c82:	401a      	ands	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d10e      	bne.n	8005caa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	23e0      	movs	r3, #224	@ 0xe0
 8005c90:	051b      	lsls	r3, r3, #20
 8005c92:	401a      	ands	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d106      	bne.n	8005caa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	0f5b      	lsrs	r3, r3, #29
 8005ca0:	075a      	lsls	r2, r3, #29
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d001      	beq.n	8005cae <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e000      	b.n	8005cb0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	b008      	add	sp, #32
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	40007000 	.word	0x40007000
 8005cc0:	00001388 	.word	0x00001388
 8005cc4:	efffffff 	.word	0xefffffff
 8005cc8:	feffffff 	.word	0xfeffffff
 8005ccc:	11c1808c 	.word	0x11c1808c
 8005cd0:	eefefffc 	.word	0xeefefffc

08005cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e0e9      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ce8:	4b76      	ldr	r3, [pc, #472]	@ (8005ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2207      	movs	r2, #7
 8005cee:	4013      	ands	r3, r2
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d91e      	bls.n	8005d34 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf6:	4b73      	ldr	r3, [pc, #460]	@ (8005ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2207      	movs	r2, #7
 8005cfc:	4393      	bics	r3, r2
 8005cfe:	0019      	movs	r1, r3
 8005d00:	4b70      	ldr	r3, [pc, #448]	@ (8005ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d08:	f7fd fdac 	bl	8003864 <HAL_GetTick>
 8005d0c:	0003      	movs	r3, r0
 8005d0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d10:	e009      	b.n	8005d26 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d12:	f7fd fda7 	bl	8003864 <HAL_GetTick>
 8005d16:	0002      	movs	r2, r0
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	4a6a      	ldr	r2, [pc, #424]	@ (8005ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e0ca      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d26:	4b67      	ldr	r3, [pc, #412]	@ (8005ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2207      	movs	r2, #7
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d1ee      	bne.n	8005d12 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	d015      	beq.n	8005d6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2204      	movs	r2, #4
 8005d44:	4013      	ands	r3, r2
 8005d46:	d006      	beq.n	8005d56 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005d48:	4b60      	ldr	r3, [pc, #384]	@ (8005ecc <HAL_RCC_ClockConfig+0x1f8>)
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	4b5f      	ldr	r3, [pc, #380]	@ (8005ecc <HAL_RCC_ClockConfig+0x1f8>)
 8005d4e:	21e0      	movs	r1, #224	@ 0xe0
 8005d50:	01c9      	lsls	r1, r1, #7
 8005d52:	430a      	orrs	r2, r1
 8005d54:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d56:	4b5d      	ldr	r3, [pc, #372]	@ (8005ecc <HAL_RCC_ClockConfig+0x1f8>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	4a5d      	ldr	r2, [pc, #372]	@ (8005ed0 <HAL_RCC_ClockConfig+0x1fc>)
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	0019      	movs	r1, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	4b59      	ldr	r3, [pc, #356]	@ (8005ecc <HAL_RCC_ClockConfig+0x1f8>)
 8005d66:	430a      	orrs	r2, r1
 8005d68:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	4013      	ands	r3, r2
 8005d72:	d057      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d107      	bne.n	8005d8c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d7c:	4b53      	ldr	r3, [pc, #332]	@ (8005ecc <HAL_RCC_ClockConfig+0x1f8>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	2380      	movs	r3, #128	@ 0x80
 8005d82:	029b      	lsls	r3, r3, #10
 8005d84:	4013      	ands	r3, r2
 8005d86:	d12b      	bne.n	8005de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e097      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d107      	bne.n	8005da4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d94:	4b4d      	ldr	r3, [pc, #308]	@ (8005ecc <HAL_RCC_ClockConfig+0x1f8>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	2380      	movs	r3, #128	@ 0x80
 8005d9a:	049b      	lsls	r3, r3, #18
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d11f      	bne.n	8005de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e08b      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d107      	bne.n	8005dbc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dac:	4b47      	ldr	r3, [pc, #284]	@ (8005ecc <HAL_RCC_ClockConfig+0x1f8>)
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	2380      	movs	r3, #128	@ 0x80
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	4013      	ands	r3, r2
 8005db6:	d113      	bne.n	8005de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e07f      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d106      	bne.n	8005dd2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dc4:	4b41      	ldr	r3, [pc, #260]	@ (8005ecc <HAL_RCC_ClockConfig+0x1f8>)
 8005dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dc8:	2202      	movs	r2, #2
 8005dca:	4013      	ands	r3, r2
 8005dcc:	d108      	bne.n	8005de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e074      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dd2:	4b3e      	ldr	r3, [pc, #248]	@ (8005ecc <HAL_RCC_ClockConfig+0x1f8>)
 8005dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	4013      	ands	r3, r2
 8005dda:	d101      	bne.n	8005de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e06d      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005de0:	4b3a      	ldr	r3, [pc, #232]	@ (8005ecc <HAL_RCC_ClockConfig+0x1f8>)
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	2207      	movs	r2, #7
 8005de6:	4393      	bics	r3, r2
 8005de8:	0019      	movs	r1, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	4b37      	ldr	r3, [pc, #220]	@ (8005ecc <HAL_RCC_ClockConfig+0x1f8>)
 8005df0:	430a      	orrs	r2, r1
 8005df2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005df4:	f7fd fd36 	bl	8003864 <HAL_GetTick>
 8005df8:	0003      	movs	r3, r0
 8005dfa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dfc:	e009      	b.n	8005e12 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dfe:	f7fd fd31 	bl	8003864 <HAL_GetTick>
 8005e02:	0002      	movs	r2, r0
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	4a2f      	ldr	r2, [pc, #188]	@ (8005ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e054      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e12:	4b2e      	ldr	r3, [pc, #184]	@ (8005ecc <HAL_RCC_ClockConfig+0x1f8>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	2238      	movs	r2, #56	@ 0x38
 8005e18:	401a      	ands	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d1ec      	bne.n	8005dfe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e24:	4b27      	ldr	r3, [pc, #156]	@ (8005ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2207      	movs	r2, #7
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d21e      	bcs.n	8005e70 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e32:	4b24      	ldr	r3, [pc, #144]	@ (8005ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2207      	movs	r2, #7
 8005e38:	4393      	bics	r3, r2
 8005e3a:	0019      	movs	r1, r3
 8005e3c:	4b21      	ldr	r3, [pc, #132]	@ (8005ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e44:	f7fd fd0e 	bl	8003864 <HAL_GetTick>
 8005e48:	0003      	movs	r3, r0
 8005e4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005e4c:	e009      	b.n	8005e62 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e4e:	f7fd fd09 	bl	8003864 <HAL_GetTick>
 8005e52:	0002      	movs	r2, r0
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	4a1b      	ldr	r2, [pc, #108]	@ (8005ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e02c      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005e62:	4b18      	ldr	r3, [pc, #96]	@ (8005ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2207      	movs	r2, #7
 8005e68:	4013      	ands	r3, r2
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d1ee      	bne.n	8005e4e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2204      	movs	r2, #4
 8005e76:	4013      	ands	r3, r2
 8005e78:	d009      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005e7a:	4b14      	ldr	r3, [pc, #80]	@ (8005ecc <HAL_RCC_ClockConfig+0x1f8>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	4a15      	ldr	r2, [pc, #84]	@ (8005ed4 <HAL_RCC_ClockConfig+0x200>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	0019      	movs	r1, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	4b10      	ldr	r3, [pc, #64]	@ (8005ecc <HAL_RCC_ClockConfig+0x1f8>)
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005e8e:	f000 f829 	bl	8005ee4 <HAL_RCC_GetSysClockFreq>
 8005e92:	0001      	movs	r1, r0
 8005e94:	4b0d      	ldr	r3, [pc, #52]	@ (8005ecc <HAL_RCC_ClockConfig+0x1f8>)
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	0a1b      	lsrs	r3, r3, #8
 8005e9a:	220f      	movs	r2, #15
 8005e9c:	401a      	ands	r2, r3
 8005e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed8 <HAL_RCC_ClockConfig+0x204>)
 8005ea0:	0092      	lsls	r2, r2, #2
 8005ea2:	58d3      	ldr	r3, [r2, r3]
 8005ea4:	221f      	movs	r2, #31
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	000a      	movs	r2, r1
 8005eaa:	40da      	lsrs	r2, r3
 8005eac:	4b0b      	ldr	r3, [pc, #44]	@ (8005edc <HAL_RCC_ClockConfig+0x208>)
 8005eae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee0 <HAL_RCC_ClockConfig+0x20c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f7fd fc79 	bl	80037ac <HAL_InitTick>
 8005eba:	0003      	movs	r3, r0
}
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	b004      	add	sp, #16
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	40022000 	.word	0x40022000
 8005ec8:	00001388 	.word	0x00001388
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	fffff0ff 	.word	0xfffff0ff
 8005ed4:	ffff8fff 	.word	0xffff8fff
 8005ed8:	080093c0 	.word	0x080093c0
 8005edc:	2000008c 	.word	0x2000008c
 8005ee0:	20000090 	.word	0x20000090

08005ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005eea:	4b3c      	ldr	r3, [pc, #240]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	2238      	movs	r2, #56	@ 0x38
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	d10f      	bne.n	8005f14 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005ef4:	4b39      	ldr	r3, [pc, #228]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	0adb      	lsrs	r3, r3, #11
 8005efa:	2207      	movs	r2, #7
 8005efc:	4013      	ands	r3, r2
 8005efe:	2201      	movs	r2, #1
 8005f00:	409a      	lsls	r2, r3
 8005f02:	0013      	movs	r3, r2
 8005f04:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005f06:	6839      	ldr	r1, [r7, #0]
 8005f08:	4835      	ldr	r0, [pc, #212]	@ (8005fe0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f0a:	f7fa f8fb 	bl	8000104 <__udivsi3>
 8005f0e:	0003      	movs	r3, r0
 8005f10:	613b      	str	r3, [r7, #16]
 8005f12:	e05d      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f14:	4b31      	ldr	r3, [pc, #196]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	2238      	movs	r2, #56	@ 0x38
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d102      	bne.n	8005f26 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f20:	4b2f      	ldr	r3, [pc, #188]	@ (8005fe0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f22:	613b      	str	r3, [r7, #16]
 8005f24:	e054      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f26:	4b2d      	ldr	r3, [pc, #180]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	2238      	movs	r2, #56	@ 0x38
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	2b10      	cmp	r3, #16
 8005f30:	d138      	bne.n	8005fa4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005f32:	4b2a      	ldr	r3, [pc, #168]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	2203      	movs	r2, #3
 8005f38:	4013      	ands	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f3c:	4b27      	ldr	r3, [pc, #156]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	091b      	lsrs	r3, r3, #4
 8005f42:	2207      	movs	r2, #7
 8005f44:	4013      	ands	r3, r2
 8005f46:	3301      	adds	r3, #1
 8005f48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d10d      	bne.n	8005f6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	4823      	ldr	r0, [pc, #140]	@ (8005fe0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f54:	f7fa f8d6 	bl	8000104 <__udivsi3>
 8005f58:	0003      	movs	r3, r0
 8005f5a:	0019      	movs	r1, r3
 8005f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	0a1b      	lsrs	r3, r3, #8
 8005f62:	227f      	movs	r2, #127	@ 0x7f
 8005f64:	4013      	ands	r3, r2
 8005f66:	434b      	muls	r3, r1
 8005f68:	617b      	str	r3, [r7, #20]
        break;
 8005f6a:	e00d      	b.n	8005f88 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	481c      	ldr	r0, [pc, #112]	@ (8005fe0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f70:	f7fa f8c8 	bl	8000104 <__udivsi3>
 8005f74:	0003      	movs	r3, r0
 8005f76:	0019      	movs	r1, r3
 8005f78:	4b18      	ldr	r3, [pc, #96]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	0a1b      	lsrs	r3, r3, #8
 8005f7e:	227f      	movs	r2, #127	@ 0x7f
 8005f80:	4013      	ands	r3, r2
 8005f82:	434b      	muls	r3, r1
 8005f84:	617b      	str	r3, [r7, #20]
        break;
 8005f86:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005f88:	4b14      	ldr	r3, [pc, #80]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	0f5b      	lsrs	r3, r3, #29
 8005f8e:	2207      	movs	r2, #7
 8005f90:	4013      	ands	r3, r2
 8005f92:	3301      	adds	r3, #1
 8005f94:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	6978      	ldr	r0, [r7, #20]
 8005f9a:	f7fa f8b3 	bl	8000104 <__udivsi3>
 8005f9e:	0003      	movs	r3, r0
 8005fa0:	613b      	str	r3, [r7, #16]
 8005fa2:	e015      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	2238      	movs	r2, #56	@ 0x38
 8005faa:	4013      	ands	r3, r2
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	d103      	bne.n	8005fb8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005fb0:	2380      	movs	r3, #128	@ 0x80
 8005fb2:	021b      	lsls	r3, r3, #8
 8005fb4:	613b      	str	r3, [r7, #16]
 8005fb6:	e00b      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005fb8:	4b08      	ldr	r3, [pc, #32]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	2238      	movs	r2, #56	@ 0x38
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	2b18      	cmp	r3, #24
 8005fc2:	d103      	bne.n	8005fcc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005fc4:	23fa      	movs	r3, #250	@ 0xfa
 8005fc6:	01db      	lsls	r3, r3, #7
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	e001      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005fd0:	693b      	ldr	r3, [r7, #16]
}
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	b006      	add	sp, #24
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	46c0      	nop			@ (mov r8, r8)
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	00f42400 	.word	0x00f42400

08005fe4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fe8:	4b02      	ldr	r3, [pc, #8]	@ (8005ff4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005fea:	681b      	ldr	r3, [r3, #0]
}
 8005fec:	0018      	movs	r0, r3
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	46c0      	nop			@ (mov r8, r8)
 8005ff4:	2000008c 	.word	0x2000008c

08005ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ff8:	b5b0      	push	{r4, r5, r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005ffc:	f7ff fff2 	bl	8005fe4 <HAL_RCC_GetHCLKFreq>
 8006000:	0004      	movs	r4, r0
 8006002:	f7ff fb41 	bl	8005688 <LL_RCC_GetAPB1Prescaler>
 8006006:	0003      	movs	r3, r0
 8006008:	0b1a      	lsrs	r2, r3, #12
 800600a:	4b05      	ldr	r3, [pc, #20]	@ (8006020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800600c:	0092      	lsls	r2, r2, #2
 800600e:	58d3      	ldr	r3, [r2, r3]
 8006010:	221f      	movs	r2, #31
 8006012:	4013      	ands	r3, r2
 8006014:	40dc      	lsrs	r4, r3
 8006016:	0023      	movs	r3, r4
}
 8006018:	0018      	movs	r0, r3
 800601a:	46bd      	mov	sp, r7
 800601c:	bdb0      	pop	{r4, r5, r7, pc}
 800601e:	46c0      	nop			@ (mov r8, r8)
 8006020:	08009400 	.word	0x08009400

08006024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800602c:	2313      	movs	r3, #19
 800602e:	18fb      	adds	r3, r7, r3
 8006030:	2200      	movs	r2, #0
 8006032:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006034:	2312      	movs	r3, #18
 8006036:	18fb      	adds	r3, r7, r3
 8006038:	2200      	movs	r2, #0
 800603a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	2380      	movs	r3, #128	@ 0x80
 8006042:	029b      	lsls	r3, r3, #10
 8006044:	4013      	ands	r3, r2
 8006046:	d100      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006048:	e0a3      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800604a:	2011      	movs	r0, #17
 800604c:	183b      	adds	r3, r7, r0
 800604e:	2200      	movs	r2, #0
 8006050:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006052:	4ba5      	ldr	r3, [pc, #660]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006054:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006056:	2380      	movs	r3, #128	@ 0x80
 8006058:	055b      	lsls	r3, r3, #21
 800605a:	4013      	ands	r3, r2
 800605c:	d110      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800605e:	4ba2      	ldr	r3, [pc, #648]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006060:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006062:	4ba1      	ldr	r3, [pc, #644]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006064:	2180      	movs	r1, #128	@ 0x80
 8006066:	0549      	lsls	r1, r1, #21
 8006068:	430a      	orrs	r2, r1
 800606a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800606c:	4b9e      	ldr	r3, [pc, #632]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800606e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006070:	2380      	movs	r3, #128	@ 0x80
 8006072:	055b      	lsls	r3, r3, #21
 8006074:	4013      	ands	r3, r2
 8006076:	60bb      	str	r3, [r7, #8]
 8006078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800607a:	183b      	adds	r3, r7, r0
 800607c:	2201      	movs	r2, #1
 800607e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006080:	4b9a      	ldr	r3, [pc, #616]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	4b99      	ldr	r3, [pc, #612]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006086:	2180      	movs	r1, #128	@ 0x80
 8006088:	0049      	lsls	r1, r1, #1
 800608a:	430a      	orrs	r2, r1
 800608c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800608e:	f7fd fbe9 	bl	8003864 <HAL_GetTick>
 8006092:	0003      	movs	r3, r0
 8006094:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006096:	e00b      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006098:	f7fd fbe4 	bl	8003864 <HAL_GetTick>
 800609c:	0002      	movs	r2, r0
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d904      	bls.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80060a6:	2313      	movs	r3, #19
 80060a8:	18fb      	adds	r3, r7, r3
 80060aa:	2203      	movs	r2, #3
 80060ac:	701a      	strb	r2, [r3, #0]
        break;
 80060ae:	e005      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060b0:	4b8e      	ldr	r3, [pc, #568]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	2380      	movs	r3, #128	@ 0x80
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	4013      	ands	r3, r2
 80060ba:	d0ed      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80060bc:	2313      	movs	r3, #19
 80060be:	18fb      	adds	r3, r7, r3
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d154      	bne.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060c6:	4b88      	ldr	r3, [pc, #544]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060ca:	23c0      	movs	r3, #192	@ 0xc0
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4013      	ands	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d019      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d014      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060e2:	4b81      	ldr	r3, [pc, #516]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e6:	4a82      	ldr	r2, [pc, #520]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060ec:	4b7e      	ldr	r3, [pc, #504]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060f0:	4b7d      	ldr	r3, [pc, #500]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060f2:	2180      	movs	r1, #128	@ 0x80
 80060f4:	0249      	lsls	r1, r1, #9
 80060f6:	430a      	orrs	r2, r1
 80060f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060fa:	4b7b      	ldr	r3, [pc, #492]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060fe:	4b7a      	ldr	r3, [pc, #488]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006100:	497c      	ldr	r1, [pc, #496]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8006102:	400a      	ands	r2, r1
 8006104:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006106:	4b78      	ldr	r3, [pc, #480]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2201      	movs	r2, #1
 8006110:	4013      	ands	r3, r2
 8006112:	d016      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006114:	f7fd fba6 	bl	8003864 <HAL_GetTick>
 8006118:	0003      	movs	r3, r0
 800611a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800611c:	e00c      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800611e:	f7fd fba1 	bl	8003864 <HAL_GetTick>
 8006122:	0002      	movs	r2, r0
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	4a73      	ldr	r2, [pc, #460]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d904      	bls.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800612e:	2313      	movs	r3, #19
 8006130:	18fb      	adds	r3, r7, r3
 8006132:	2203      	movs	r2, #3
 8006134:	701a      	strb	r2, [r3, #0]
            break;
 8006136:	e004      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006138:	4b6b      	ldr	r3, [pc, #428]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800613a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800613c:	2202      	movs	r2, #2
 800613e:	4013      	ands	r3, r2
 8006140:	d0ed      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006142:	2313      	movs	r3, #19
 8006144:	18fb      	adds	r3, r7, r3
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800614c:	4b66      	ldr	r3, [pc, #408]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800614e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006150:	4a67      	ldr	r2, [pc, #412]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006152:	4013      	ands	r3, r2
 8006154:	0019      	movs	r1, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800615a:	4b63      	ldr	r3, [pc, #396]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800615c:	430a      	orrs	r2, r1
 800615e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006160:	e00c      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006162:	2312      	movs	r3, #18
 8006164:	18fb      	adds	r3, r7, r3
 8006166:	2213      	movs	r2, #19
 8006168:	18ba      	adds	r2, r7, r2
 800616a:	7812      	ldrb	r2, [r2, #0]
 800616c:	701a      	strb	r2, [r3, #0]
 800616e:	e005      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006170:	2312      	movs	r3, #18
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	2213      	movs	r2, #19
 8006176:	18ba      	adds	r2, r7, r2
 8006178:	7812      	ldrb	r2, [r2, #0]
 800617a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800617c:	2311      	movs	r3, #17
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d105      	bne.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006186:	4b58      	ldr	r3, [pc, #352]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006188:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800618a:	4b57      	ldr	r3, [pc, #348]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800618c:	495b      	ldr	r1, [pc, #364]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800618e:	400a      	ands	r2, r1
 8006190:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2201      	movs	r2, #1
 8006198:	4013      	ands	r3, r2
 800619a:	d009      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800619c:	4b52      	ldr	r3, [pc, #328]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800619e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a0:	2203      	movs	r2, #3
 80061a2:	4393      	bics	r3, r2
 80061a4:	0019      	movs	r1, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	4b4f      	ldr	r3, [pc, #316]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061ac:	430a      	orrs	r2, r1
 80061ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2210      	movs	r2, #16
 80061b6:	4013      	ands	r3, r2
 80061b8:	d009      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061ba:	4b4b      	ldr	r3, [pc, #300]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061be:	4a50      	ldr	r2, [pc, #320]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80061c0:	4013      	ands	r3, r2
 80061c2:	0019      	movs	r1, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	4b47      	ldr	r3, [pc, #284]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061ca:	430a      	orrs	r2, r1
 80061cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	2380      	movs	r3, #128	@ 0x80
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4013      	ands	r3, r2
 80061d8:	d009      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061da:	4b43      	ldr	r3, [pc, #268]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061de:	4a49      	ldr	r2, [pc, #292]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	0019      	movs	r1, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	695a      	ldr	r2, [r3, #20]
 80061e8:	4b3f      	ldr	r3, [pc, #252]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061ea:	430a      	orrs	r2, r1
 80061ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	2380      	movs	r3, #128	@ 0x80
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	4013      	ands	r3, r2
 80061f8:	d009      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061fa:	4b3b      	ldr	r3, [pc, #236]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061fe:	4a42      	ldr	r2, [pc, #264]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006200:	4013      	ands	r3, r2
 8006202:	0019      	movs	r1, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	699a      	ldr	r2, [r3, #24]
 8006208:	4b37      	ldr	r3, [pc, #220]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800620a:	430a      	orrs	r2, r1
 800620c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2220      	movs	r2, #32
 8006214:	4013      	ands	r3, r2
 8006216:	d009      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006218:	4b33      	ldr	r3, [pc, #204]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800621a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621c:	4a3b      	ldr	r2, [pc, #236]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800621e:	4013      	ands	r3, r2
 8006220:	0019      	movs	r1, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	4b30      	ldr	r3, [pc, #192]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006228:	430a      	orrs	r2, r1
 800622a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	2380      	movs	r3, #128	@ 0x80
 8006232:	01db      	lsls	r3, r3, #7
 8006234:	4013      	ands	r3, r2
 8006236:	d015      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006238:	4b2b      	ldr	r3, [pc, #172]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800623a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	0899      	lsrs	r1, r3, #2
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	69da      	ldr	r2, [r3, #28]
 8006244:	4b28      	ldr	r3, [pc, #160]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006246:	430a      	orrs	r2, r1
 8006248:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	69da      	ldr	r2, [r3, #28]
 800624e:	2380      	movs	r3, #128	@ 0x80
 8006250:	05db      	lsls	r3, r3, #23
 8006252:	429a      	cmp	r2, r3
 8006254:	d106      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006256:	4b24      	ldr	r3, [pc, #144]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	4b23      	ldr	r3, [pc, #140]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800625c:	2180      	movs	r1, #128	@ 0x80
 800625e:	0249      	lsls	r1, r1, #9
 8006260:	430a      	orrs	r2, r1
 8006262:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	2380      	movs	r3, #128	@ 0x80
 800626a:	039b      	lsls	r3, r3, #14
 800626c:	4013      	ands	r3, r2
 800626e:	d016      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006270:	4b1d      	ldr	r3, [pc, #116]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006274:	4a26      	ldr	r2, [pc, #152]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006276:	4013      	ands	r3, r2
 8006278:	0019      	movs	r1, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1a      	ldr	r2, [r3, #32]
 800627e:	4b1a      	ldr	r3, [pc, #104]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006280:	430a      	orrs	r2, r1
 8006282:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1a      	ldr	r2, [r3, #32]
 8006288:	2380      	movs	r3, #128	@ 0x80
 800628a:	03db      	lsls	r3, r3, #15
 800628c:	429a      	cmp	r2, r3
 800628e:	d106      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006290:	4b15      	ldr	r3, [pc, #84]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	4b14      	ldr	r3, [pc, #80]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006296:	2180      	movs	r1, #128	@ 0x80
 8006298:	0449      	lsls	r1, r1, #17
 800629a:	430a      	orrs	r2, r1
 800629c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	2380      	movs	r3, #128	@ 0x80
 80062a4:	011b      	lsls	r3, r3, #4
 80062a6:	4013      	ands	r3, r2
 80062a8:	d016      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80062aa:	4b0f      	ldr	r3, [pc, #60]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ae:	4a19      	ldr	r2, [pc, #100]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	0019      	movs	r1, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	4b0b      	ldr	r3, [pc, #44]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062ba:	430a      	orrs	r2, r1
 80062bc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	2380      	movs	r3, #128	@ 0x80
 80062c4:	01db      	lsls	r3, r3, #7
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d106      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80062ca:	4b07      	ldr	r3, [pc, #28]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	4b06      	ldr	r3, [pc, #24]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062d0:	2180      	movs	r1, #128	@ 0x80
 80062d2:	0249      	lsls	r1, r1, #9
 80062d4:	430a      	orrs	r2, r1
 80062d6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80062d8:	2312      	movs	r3, #18
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	781b      	ldrb	r3, [r3, #0]
}
 80062de:	0018      	movs	r0, r3
 80062e0:	46bd      	mov	sp, r7
 80062e2:	b006      	add	sp, #24
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	46c0      	nop			@ (mov r8, r8)
 80062e8:	40021000 	.word	0x40021000
 80062ec:	40007000 	.word	0x40007000
 80062f0:	fffffcff 	.word	0xfffffcff
 80062f4:	fffeffff 	.word	0xfffeffff
 80062f8:	00001388 	.word	0x00001388
 80062fc:	efffffff 	.word	0xefffffff
 8006300:	fffff3ff 	.word	0xfffff3ff
 8006304:	fff3ffff 	.word	0xfff3ffff
 8006308:	ffcfffff 	.word	0xffcfffff
 800630c:	ffffcfff 	.word	0xffffcfff
 8006310:	ffbfffff 	.word	0xffbfffff
 8006314:	ffff3fff 	.word	0xffff3fff

08006318 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	2380      	movs	r3, #128	@ 0x80
 8006328:	029b      	lsls	r3, r3, #10
 800632a:	429a      	cmp	r2, r3
 800632c:	d136      	bne.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800632e:	4bcd      	ldr	r3, [pc, #820]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006330:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006332:	23c0      	movs	r3, #192	@ 0xc0
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4013      	ands	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800633a:	4bca      	ldr	r3, [pc, #808]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800633c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800633e:	2202      	movs	r2, #2
 8006340:	4013      	ands	r3, r2
 8006342:	2b02      	cmp	r3, #2
 8006344:	d108      	bne.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	2380      	movs	r3, #128	@ 0x80
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	429a      	cmp	r2, r3
 800634e:	d103      	bne.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8006350:	2380      	movs	r3, #128	@ 0x80
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	e26b      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006358:	4bc2      	ldr	r3, [pc, #776]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800635a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800635c:	2202      	movs	r2, #2
 800635e:	4013      	ands	r3, r2
 8006360:	2b02      	cmp	r3, #2
 8006362:	d108      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	2380      	movs	r3, #128	@ 0x80
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	429a      	cmp	r2, r3
 800636c:	d103      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 800636e:	23fa      	movs	r3, #250	@ 0xfa
 8006370:	01db      	lsls	r3, r3, #7
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	e25c      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006376:	4bbb      	ldr	r3, [pc, #748]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	2380      	movs	r3, #128	@ 0x80
 800637c:	029b      	lsls	r3, r3, #10
 800637e:	401a      	ands	r2, r3
 8006380:	2380      	movs	r3, #128	@ 0x80
 8006382:	029b      	lsls	r3, r3, #10
 8006384:	429a      	cmp	r2, r3
 8006386:	d000      	beq.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8006388:	e252      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	23c0      	movs	r3, #192	@ 0xc0
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	429a      	cmp	r2, r3
 8006392:	d000      	beq.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8006394:	e24c      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    {
      frequency = HSE_VALUE / 32U;
 8006396:	4bb4      	ldr	r3, [pc, #720]	@ (8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8006398:	617b      	str	r3, [r7, #20]
 800639a:	e249      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 800639c:	4bb1      	ldr	r3, [pc, #708]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	2203      	movs	r2, #3
 80063a2:	4013      	ands	r3, r2
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d102      	bne.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 80063a8:	4bb0      	ldr	r3, [pc, #704]	@ (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80063aa:	613b      	str	r3, [r7, #16]
 80063ac:	e00a      	b.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 80063ae:	4bad      	ldr	r3, [pc, #692]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	2203      	movs	r2, #3
 80063b4:	4013      	ands	r3, r2
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d102      	bne.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 80063ba:	4bac      	ldr	r3, [pc, #688]	@ (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	e001      	b.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80063c4:	4ba7      	ldr	r3, [pc, #668]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	091b      	lsrs	r3, r3, #4
 80063ca:	2207      	movs	r2, #7
 80063cc:	4013      	ands	r3, r2
 80063ce:	3301      	adds	r3, #1
 80063d0:	0019      	movs	r1, r3
 80063d2:	6938      	ldr	r0, [r7, #16]
 80063d4:	f7f9 fe96 	bl	8000104 <__udivsi3>
 80063d8:	0003      	movs	r3, r0
 80063da:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	2380      	movs	r3, #128	@ 0x80
 80063e0:	039b      	lsls	r3, r3, #14
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d100      	bne.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 80063e6:	e1e3      	b.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	2380      	movs	r3, #128	@ 0x80
 80063ec:	039b      	lsls	r3, r3, #14
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d900      	bls.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80063f2:	e20c      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	2380      	movs	r3, #128	@ 0x80
 80063f8:	01db      	lsls	r3, r3, #7
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d100      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80063fe:	e0a5      	b.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	2380      	movs	r3, #128	@ 0x80
 8006404:	01db      	lsls	r3, r3, #7
 8006406:	429a      	cmp	r2, r3
 8006408:	d900      	bls.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800640a:	e200      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	2380      	movs	r3, #128	@ 0x80
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	429a      	cmp	r2, r3
 8006414:	d100      	bne.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006416:	e0fc      	b.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	2380      	movs	r3, #128	@ 0x80
 800641c:	011b      	lsls	r3, r3, #4
 800641e:	429a      	cmp	r2, r3
 8006420:	d900      	bls.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8006422:	e1f4      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	2380      	movs	r3, #128	@ 0x80
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	429a      	cmp	r2, r3
 800642c:	d100      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 800642e:	e181      	b.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	2380      	movs	r3, #128	@ 0x80
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	429a      	cmp	r2, r3
 8006438:	d900      	bls.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800643a:	e1e8      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	2380      	movs	r3, #128	@ 0x80
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	429a      	cmp	r2, r3
 8006444:	d100      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8006446:	e135      	b.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	2380      	movs	r3, #128	@ 0x80
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	429a      	cmp	r2, r3
 8006450:	d900      	bls.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8006452:	e1dc      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b20      	cmp	r3, #32
 8006458:	d100      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800645a:	e0af      	b.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b20      	cmp	r3, #32
 8006460:	d900      	bls.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8006462:	e1d4      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d003      	beq.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b10      	cmp	r3, #16
 800646e:	d033      	beq.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8006470:	e1cd      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006472:	4b7c      	ldr	r3, [pc, #496]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006476:	2203      	movs	r2, #3
 8006478:	4013      	ands	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d104      	bne.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x174>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006482:	f7ff fdb9 	bl	8005ff8 <HAL_RCC_GetPCLK1Freq>
 8006486:	0003      	movs	r3, r0
 8006488:	617b      	str	r3, [r7, #20]
        break;
 800648a:	e1c2      	b.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d104      	bne.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          frequency = HAL_RCC_GetSysClockFreq();
 8006492:	f7ff fd27 	bl	8005ee4 <HAL_RCC_GetSysClockFreq>
 8006496:	0003      	movs	r3, r0
 8006498:	617b      	str	r3, [r7, #20]
        break;
 800649a:	e1ba      	b.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800649c:	4b71      	ldr	r3, [pc, #452]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	2380      	movs	r3, #128	@ 0x80
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	401a      	ands	r2, r3
 80064a6:	2380      	movs	r3, #128	@ 0x80
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d105      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d102      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = HSI_VALUE;
 80064b4:	4b6d      	ldr	r3, [pc, #436]	@ (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80064b6:	617b      	str	r3, [r7, #20]
        break;
 80064b8:	e1ab      	b.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80064ba:	4b6a      	ldr	r3, [pc, #424]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80064bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064be:	2202      	movs	r2, #2
 80064c0:	4013      	ands	r3, r2
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d000      	beq.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 80064c6:	e1a4      	b.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2b03      	cmp	r3, #3
 80064cc:	d000      	beq.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80064ce:	e1a0      	b.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          frequency = LSE_VALUE;
 80064d0:	2380      	movs	r3, #128	@ 0x80
 80064d2:	021b      	lsls	r3, r3, #8
 80064d4:	617b      	str	r3, [r7, #20]
        break;
 80064d6:	e19c      	b.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80064d8:	4b62      	ldr	r3, [pc, #392]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80064da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064dc:	23c0      	movs	r3, #192	@ 0xc0
 80064de:	011b      	lsls	r3, r3, #4
 80064e0:	4013      	ands	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d104      	bne.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80064ea:	f7ff fd85 	bl	8005ff8 <HAL_RCC_GetPCLK1Freq>
 80064ee:	0003      	movs	r3, r0
 80064f0:	617b      	str	r3, [r7, #20]
        break;
 80064f2:	e190      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	2380      	movs	r3, #128	@ 0x80
 80064f8:	00db      	lsls	r3, r3, #3
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d104      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80064fe:	f7ff fcf1 	bl	8005ee4 <HAL_RCC_GetSysClockFreq>
 8006502:	0003      	movs	r3, r0
 8006504:	617b      	str	r3, [r7, #20]
        break;
 8006506:	e186      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006508:	4b56      	ldr	r3, [pc, #344]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	2380      	movs	r3, #128	@ 0x80
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	401a      	ands	r2, r3
 8006512:	2380      	movs	r3, #128	@ 0x80
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	429a      	cmp	r2, r3
 8006518:	d107      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	2380      	movs	r3, #128	@ 0x80
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	429a      	cmp	r2, r3
 8006522:	d102      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = HSI_VALUE;
 8006524:	4b51      	ldr	r3, [pc, #324]	@ (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006526:	617b      	str	r3, [r7, #20]
        break;
 8006528:	e175      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800652a:	4b4e      	ldr	r3, [pc, #312]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800652c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800652e:	2202      	movs	r2, #2
 8006530:	4013      	ands	r3, r2
 8006532:	2b02      	cmp	r3, #2
 8006534:	d000      	beq.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 8006536:	e16e      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	23c0      	movs	r3, #192	@ 0xc0
 800653c:	011b      	lsls	r3, r3, #4
 800653e:	429a      	cmp	r2, r3
 8006540:	d000      	beq.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006542:	e168      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          frequency = LSE_VALUE;
 8006544:	2380      	movs	r3, #128	@ 0x80
 8006546:	021b      	lsls	r3, r3, #8
 8006548:	617b      	str	r3, [r7, #20]
        break;
 800654a:	e164      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800654c:	4b45      	ldr	r3, [pc, #276]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800654e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006550:	0f9b      	lsrs	r3, r3, #30
 8006552:	079b      	lsls	r3, r3, #30
 8006554:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d104      	bne.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          frequency = HAL_RCC_GetSysClockFreq();
 800655c:	f7ff fcc2 	bl	8005ee4 <HAL_RCC_GetSysClockFreq>
 8006560:	0003      	movs	r3, r0
 8006562:	617b      	str	r3, [r7, #20]
        break;
 8006564:	e159      	b.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	2380      	movs	r3, #128	@ 0x80
 800656a:	061b      	lsls	r3, r3, #24
 800656c:	429a      	cmp	r2, r3
 800656e:	d102      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          frequency = HSI_VALUE;
 8006570:	4b3e      	ldr	r3, [pc, #248]	@ (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006572:	617b      	str	r3, [r7, #20]
        break;
 8006574:	e151      	b.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	2380      	movs	r3, #128	@ 0x80
 800657a:	05db      	lsls	r3, r3, #23
 800657c:	429a      	cmp	r2, r3
 800657e:	d000      	beq.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006580:	e14b      	b.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8006582:	4b38      	ldr	r3, [pc, #224]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	2380      	movs	r3, #128	@ 0x80
 8006588:	025b      	lsls	r3, r3, #9
 800658a:	4013      	ands	r3, r2
 800658c:	d100      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 800658e:	e144      	b.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006590:	4b34      	ldr	r3, [pc, #208]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	0a1b      	lsrs	r3, r3, #8
 8006596:	227f      	movs	r2, #127	@ 0x7f
 8006598:	4013      	ands	r3, r2
 800659a:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	435a      	muls	r2, r3
 80065a2:	4b30      	ldr	r3, [pc, #192]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	0c5b      	lsrs	r3, r3, #17
 80065a8:	211f      	movs	r1, #31
 80065aa:	400b      	ands	r3, r1
 80065ac:	3301      	adds	r3, #1
 80065ae:	0019      	movs	r1, r3
 80065b0:	0010      	movs	r0, r2
 80065b2:	f7f9 fda7 	bl	8000104 <__udivsi3>
 80065b6:	0003      	movs	r3, r0
 80065b8:	617b      	str	r3, [r7, #20]
        break;
 80065ba:	e12e      	b.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80065bc:	4b29      	ldr	r3, [pc, #164]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80065be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80065c0:	23c0      	movs	r3, #192	@ 0xc0
 80065c2:	019b      	lsls	r3, r3, #6
 80065c4:	4013      	ands	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d104      	bne.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065ce:	f7ff fd13 	bl	8005ff8 <HAL_RCC_GetPCLK1Freq>
 80065d2:	0003      	movs	r3, r0
 80065d4:	617b      	str	r3, [r7, #20]
        break;
 80065d6:	e122      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	2380      	movs	r3, #128	@ 0x80
 80065dc:	015b      	lsls	r3, r3, #5
 80065de:	429a      	cmp	r2, r3
 80065e0:	d104      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
          frequency = HAL_RCC_GetSysClockFreq();
 80065e2:	f7ff fc7f 	bl	8005ee4 <HAL_RCC_GetSysClockFreq>
 80065e6:	0003      	movs	r3, r0
 80065e8:	617b      	str	r3, [r7, #20]
        break;
 80065ea:	e118      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80065ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	2380      	movs	r3, #128	@ 0x80
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	401a      	ands	r2, r3
 80065f6:	2380      	movs	r3, #128	@ 0x80
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d000      	beq.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80065fe:	e10e      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	2380      	movs	r3, #128	@ 0x80
 8006604:	019b      	lsls	r3, r3, #6
 8006606:	429a      	cmp	r2, r3
 8006608:	d000      	beq.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800660a:	e108      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          frequency = HSI_VALUE;
 800660c:	4b17      	ldr	r3, [pc, #92]	@ (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800660e:	617b      	str	r3, [r7, #20]
        break;
 8006610:	e105      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8006612:	4b14      	ldr	r3, [pc, #80]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006614:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006616:	23c0      	movs	r3, #192	@ 0xc0
 8006618:	021b      	lsls	r3, r3, #8
 800661a:	4013      	ands	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	2380      	movs	r3, #128	@ 0x80
 8006622:	01db      	lsls	r3, r3, #7
 8006624:	429a      	cmp	r2, r3
 8006626:	d123      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8006628:	4b0e      	ldr	r3, [pc, #56]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800662a:	68da      	ldr	r2, [r3, #12]
 800662c:	2380      	movs	r3, #128	@ 0x80
 800662e:	025b      	lsls	r3, r3, #9
 8006630:	4013      	ands	r3, r2
 8006632:	d100      	bne.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006634:	e0f5      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006636:	4b0b      	ldr	r3, [pc, #44]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	0a1b      	lsrs	r3, r3, #8
 800663c:	227f      	movs	r2, #127	@ 0x7f
 800663e:	4013      	ands	r3, r2
 8006640:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	435a      	muls	r2, r3
 8006648:	4b06      	ldr	r3, [pc, #24]	@ (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	0c5b      	lsrs	r3, r3, #17
 800664e:	211f      	movs	r1, #31
 8006650:	400b      	ands	r3, r1
 8006652:	3301      	adds	r3, #1
 8006654:	0019      	movs	r1, r3
 8006656:	0010      	movs	r0, r2
 8006658:	f7f9 fd54 	bl	8000104 <__udivsi3>
 800665c:	0003      	movs	r3, r0
 800665e:	617b      	str	r3, [r7, #20]
        break;
 8006660:	e0df      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8006662:	46c0      	nop			@ (mov r8, r8)
 8006664:	40021000 	.word	0x40021000
 8006668:	0007a120 	.word	0x0007a120
 800666c:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d104      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          frequency = HAL_RCC_GetSysClockFreq();
 8006676:	f7ff fc35 	bl	8005ee4 <HAL_RCC_GetSysClockFreq>
 800667a:	0003      	movs	r3, r0
 800667c:	617b      	str	r3, [r7, #20]
        break;
 800667e:	e0d0      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8006680:	4b6e      	ldr	r3, [pc, #440]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	2380      	movs	r3, #128	@ 0x80
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	401a      	ands	r2, r3
 800668a:	2380      	movs	r3, #128	@ 0x80
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	429a      	cmp	r2, r3
 8006690:	d107      	bne.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	2380      	movs	r3, #128	@ 0x80
 8006696:	021b      	lsls	r3, r3, #8
 8006698:	429a      	cmp	r2, r3
 800669a:	d102      	bne.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
          frequency = HSI_VALUE;
 800669c:	4b68      	ldr	r3, [pc, #416]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800669e:	617b      	str	r3, [r7, #20]
        break;
 80066a0:	e0bf      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	23c0      	movs	r3, #192	@ 0xc0
 80066a6:	021b      	lsls	r3, r3, #8
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d000      	beq.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80066ac:	e0b9      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 80066ae:	4b65      	ldr	r3, [pc, #404]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80066b0:	617b      	str	r3, [r7, #20]
        break;
 80066b2:	e0b6      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80066b4:	4b61      	ldr	r3, [pc, #388]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066b8:	23c0      	movs	r3, #192	@ 0xc0
 80066ba:	031b      	lsls	r3, r3, #12
 80066bc:	4013      	ands	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d104      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066c6:	f7ff fc97 	bl	8005ff8 <HAL_RCC_GetPCLK1Freq>
 80066ca:	0003      	movs	r3, r0
 80066cc:	617b      	str	r3, [r7, #20]
        break;
 80066ce:	e0aa      	b.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80066d0:	4b5a      	ldr	r3, [pc, #360]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066d4:	2202      	movs	r2, #2
 80066d6:	4013      	ands	r3, r2
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d108      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	2380      	movs	r3, #128	@ 0x80
 80066e0:	02db      	lsls	r3, r3, #11
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d103      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = LSI_VALUE;
 80066e6:	23fa      	movs	r3, #250	@ 0xfa
 80066e8:	01db      	lsls	r3, r3, #7
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	e021      	b.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80066ee:	4b53      	ldr	r3, [pc, #332]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	2380      	movs	r3, #128	@ 0x80
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	401a      	ands	r2, r3
 80066f8:	2380      	movs	r3, #128	@ 0x80
 80066fa:	00db      	lsls	r3, r3, #3
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d107      	bne.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	2380      	movs	r3, #128	@ 0x80
 8006704:	031b      	lsls	r3, r3, #12
 8006706:	429a      	cmp	r2, r3
 8006708:	d102      	bne.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          frequency = HSI_VALUE;
 800670a:	4b4d      	ldr	r3, [pc, #308]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800670c:	617b      	str	r3, [r7, #20]
 800670e:	e010      	b.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006710:	4b4a      	ldr	r3, [pc, #296]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006714:	2202      	movs	r2, #2
 8006716:	4013      	ands	r3, r2
 8006718:	2b02      	cmp	r3, #2
 800671a:	d000      	beq.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 800671c:	e083      	b.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	23c0      	movs	r3, #192	@ 0xc0
 8006722:	031b      	lsls	r3, r3, #12
 8006724:	429a      	cmp	r2, r3
 8006726:	d000      	beq.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8006728:	e07d      	b.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
          frequency = LSE_VALUE;
 800672a:	2380      	movs	r3, #128	@ 0x80
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	617b      	str	r3, [r7, #20]
        break;
 8006730:	e079      	b.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006732:	e078      	b.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006734:	4b41      	ldr	r3, [pc, #260]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006736:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006738:	23c0      	movs	r3, #192	@ 0xc0
 800673a:	039b      	lsls	r3, r3, #14
 800673c:	4013      	ands	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d104      	bne.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006746:	f7ff fc57 	bl	8005ff8 <HAL_RCC_GetPCLK1Freq>
 800674a:	0003      	movs	r3, r0
 800674c:	617b      	str	r3, [r7, #20]
        break;
 800674e:	e06c      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006750:	4b3a      	ldr	r3, [pc, #232]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006754:	2202      	movs	r2, #2
 8006756:	4013      	ands	r3, r2
 8006758:	2b02      	cmp	r3, #2
 800675a:	d108      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	2380      	movs	r3, #128	@ 0x80
 8006760:	035b      	lsls	r3, r3, #13
 8006762:	429a      	cmp	r2, r3
 8006764:	d103      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          frequency = LSI_VALUE;
 8006766:	23fa      	movs	r3, #250	@ 0xfa
 8006768:	01db      	lsls	r3, r3, #7
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	e01f      	b.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800676e:	4b33      	ldr	r3, [pc, #204]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	2380      	movs	r3, #128	@ 0x80
 8006774:	00db      	lsls	r3, r3, #3
 8006776:	401a      	ands	r2, r3
 8006778:	2380      	movs	r3, #128	@ 0x80
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	429a      	cmp	r2, r3
 800677e:	d107      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	2380      	movs	r3, #128	@ 0x80
 8006784:	039b      	lsls	r3, r3, #14
 8006786:	429a      	cmp	r2, r3
 8006788:	d102      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HSI_VALUE;
 800678a:	4b2d      	ldr	r3, [pc, #180]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	e00e      	b.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006790:	4b2a      	ldr	r3, [pc, #168]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006794:	2202      	movs	r2, #2
 8006796:	4013      	ands	r3, r2
 8006798:	2b02      	cmp	r3, #2
 800679a:	d146      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	23c0      	movs	r3, #192	@ 0xc0
 80067a0:	039b      	lsls	r3, r3, #14
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d141      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          frequency = LSE_VALUE;
 80067a6:	2380      	movs	r3, #128	@ 0x80
 80067a8:	021b      	lsls	r3, r3, #8
 80067aa:	617b      	str	r3, [r7, #20]
        break;
 80067ac:	e03d      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 80067ae:	e03c      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 80067b0:	4b22      	ldr	r3, [pc, #136]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067b4:	2380      	movs	r3, #128	@ 0x80
 80067b6:	03db      	lsls	r3, r3, #15
 80067b8:	4013      	ands	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	2380      	movs	r3, #128	@ 0x80
 80067c0:	03db      	lsls	r3, r3, #15
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d11b      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80067c6:	4b1d      	ldr	r3, [pc, #116]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	2380      	movs	r3, #128	@ 0x80
 80067cc:	045b      	lsls	r3, r3, #17
 80067ce:	4013      	ands	r3, r2
 80067d0:	d02d      	beq.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80067d2:	4b1a      	ldr	r3, [pc, #104]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	0a1b      	lsrs	r3, r3, #8
 80067d8:	227f      	movs	r2, #127	@ 0x7f
 80067da:	4013      	ands	r3, r2
 80067dc:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	435a      	muls	r2, r3
 80067e4:	4b15      	ldr	r3, [pc, #84]	@ (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	0e5b      	lsrs	r3, r3, #25
 80067ea:	2107      	movs	r1, #7
 80067ec:	400b      	ands	r3, r1
 80067ee:	3301      	adds	r3, #1
 80067f0:	0019      	movs	r1, r3
 80067f2:	0010      	movs	r0, r2
 80067f4:	f7f9 fc86 	bl	8000104 <__udivsi3>
 80067f8:	0003      	movs	r3, r0
 80067fa:	617b      	str	r3, [r7, #20]
        break;
 80067fc:	e017      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d114      	bne.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006804:	f7ff fbf8 	bl	8005ff8 <HAL_RCC_GetPCLK1Freq>
 8006808:	0003      	movs	r3, r0
 800680a:	617b      	str	r3, [r7, #20]
        break;
 800680c:	e00f      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        break;
 800680e:	46c0      	nop			@ (mov r8, r8)
 8006810:	e00e      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006812:	46c0      	nop			@ (mov r8, r8)
 8006814:	e00c      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006816:	46c0      	nop			@ (mov r8, r8)
 8006818:	e00a      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800681a:	46c0      	nop			@ (mov r8, r8)
 800681c:	e008      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800681e:	46c0      	nop			@ (mov r8, r8)
 8006820:	e006      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006822:	46c0      	nop			@ (mov r8, r8)
 8006824:	e004      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8006826:	46c0      	nop			@ (mov r8, r8)
 8006828:	e002      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800682a:	46c0      	nop			@ (mov r8, r8)
 800682c:	e000      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800682e:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return (frequency);
 8006830:	697b      	ldr	r3, [r7, #20]
}
 8006832:	0018      	movs	r0, r3
 8006834:	46bd      	mov	sp, r7
 8006836:	b006      	add	sp, #24
 8006838:	bd80      	pop	{r7, pc}
 800683a:	46c0      	nop			@ (mov r8, r8)
 800683c:	40021000 	.word	0x40021000
 8006840:	00f42400 	.word	0x00f42400
 8006844:	00bb8000 	.word	0x00bb8000

08006848 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006848:	b5b0      	push	{r4, r5, r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006850:	230f      	movs	r3, #15
 8006852:	18fb      	adds	r3, r7, r3
 8006854:	2201      	movs	r2, #1
 8006856:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d100      	bne.n	8006860 <HAL_RTC_Init+0x18>
 800685e:	e08c      	b.n	800697a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2229      	movs	r2, #41	@ 0x29
 8006864:	5c9b      	ldrb	r3, [r3, r2]
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10b      	bne.n	8006884 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2228      	movs	r2, #40	@ 0x28
 8006870:	2100      	movs	r1, #0
 8006872:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2288      	movs	r2, #136	@ 0x88
 8006878:	0212      	lsls	r2, r2, #8
 800687a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	0018      	movs	r0, r3
 8006880:	f7fc fd32 	bl	80032e8 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2229      	movs	r2, #41	@ 0x29
 8006888:	2102      	movs	r1, #2
 800688a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	2210      	movs	r2, #16
 8006894:	4013      	ands	r3, r2
 8006896:	2b10      	cmp	r3, #16
 8006898:	d062      	beq.n	8006960 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	22ca      	movs	r2, #202	@ 0xca
 80068a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2253      	movs	r2, #83	@ 0x53
 80068a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80068aa:	250f      	movs	r5, #15
 80068ac:	197c      	adds	r4, r7, r5
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	0018      	movs	r0, r3
 80068b2:	f000 fc27 	bl	8007104 <RTC_EnterInitMode>
 80068b6:	0003      	movs	r3, r0
 80068b8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80068ba:	0028      	movs	r0, r5
 80068bc:	183b      	adds	r3, r7, r0
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d12c      	bne.n	800691e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	699a      	ldr	r2, [r3, #24]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	492e      	ldr	r1, [pc, #184]	@ (8006988 <HAL_RTC_Init+0x140>)
 80068d0:	400a      	ands	r2, r1
 80068d2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6999      	ldr	r1, [r3, #24]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	689a      	ldr	r2, [r3, #8]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	431a      	orrs	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6912      	ldr	r2, [r2, #16]
 80068fa:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6919      	ldr	r1, [r3, #16]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	041a      	lsls	r2, r3, #16
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006910:	183c      	adds	r4, r7, r0
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	0018      	movs	r0, r3
 8006916:	f000 fc37 	bl	8007188 <RTC_ExitInitMode>
 800691a:	0003      	movs	r3, r0
 800691c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800691e:	230f      	movs	r3, #15
 8006920:	18fb      	adds	r3, r7, r3
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d116      	bne.n	8006956 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699a      	ldr	r2, [r3, #24]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	00d2      	lsls	r2, r2, #3
 8006934:	08d2      	lsrs	r2, r2, #3
 8006936:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6999      	ldr	r1, [r3, #24]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	431a      	orrs	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	22ff      	movs	r2, #255	@ 0xff
 800695c:	625a      	str	r2, [r3, #36]	@ 0x24
 800695e:	e003      	b.n	8006968 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006960:	230f      	movs	r3, #15
 8006962:	18fb      	adds	r3, r7, r3
 8006964:	2200      	movs	r2, #0
 8006966:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8006968:	230f      	movs	r3, #15
 800696a:	18fb      	adds	r3, r7, r3
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d103      	bne.n	800697a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2229      	movs	r2, #41	@ 0x29
 8006976:	2101      	movs	r1, #1
 8006978:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800697a:	230f      	movs	r3, #15
 800697c:	18fb      	adds	r3, r7, r3
 800697e:	781b      	ldrb	r3, [r3, #0]
}
 8006980:	0018      	movs	r0, r3
 8006982:	46bd      	mov	sp, r7
 8006984:	b004      	add	sp, #16
 8006986:	bdb0      	pop	{r4, r5, r7, pc}
 8006988:	fb8fffbf 	.word	0xfb8fffbf

0800698c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800698c:	b5b0      	push	{r4, r5, r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2228      	movs	r2, #40	@ 0x28
 800699c:	5c9b      	ldrb	r3, [r3, r2]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d101      	bne.n	80069a6 <HAL_RTC_SetTime+0x1a>
 80069a2:	2302      	movs	r3, #2
 80069a4:	e092      	b.n	8006acc <HAL_RTC_SetTime+0x140>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2228      	movs	r2, #40	@ 0x28
 80069aa:	2101      	movs	r1, #1
 80069ac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2229      	movs	r2, #41	@ 0x29
 80069b2:	2102      	movs	r1, #2
 80069b4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	22ca      	movs	r2, #202	@ 0xca
 80069bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2253      	movs	r2, #83	@ 0x53
 80069c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80069c6:	2513      	movs	r5, #19
 80069c8:	197c      	adds	r4, r7, r5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	0018      	movs	r0, r3
 80069ce:	f000 fb99 	bl	8007104 <RTC_EnterInitMode>
 80069d2:	0003      	movs	r3, r0
 80069d4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80069d6:	197b      	adds	r3, r7, r5
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d162      	bne.n	8006aa4 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d125      	bne.n	8006a30 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	2240      	movs	r2, #64	@ 0x40
 80069ec:	4013      	ands	r3, r2
 80069ee:	d102      	bne.n	80069f6 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2200      	movs	r2, #0
 80069f4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	0018      	movs	r0, r3
 80069fc:	f000 fc08 	bl	8007210 <RTC_ByteToBcd2>
 8006a00:	0003      	movs	r3, r0
 8006a02:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	785b      	ldrb	r3, [r3, #1]
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f000 fc01 	bl	8007210 <RTC_ByteToBcd2>
 8006a0e:	0003      	movs	r3, r0
 8006a10:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a12:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	789b      	ldrb	r3, [r3, #2]
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f000 fbf9 	bl	8007210 <RTC_ByteToBcd2>
 8006a1e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a20:	0022      	movs	r2, r4
 8006a22:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	78db      	ldrb	r3, [r3, #3]
 8006a28:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]
 8006a2e:	e017      	b.n	8006a60 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	2240      	movs	r2, #64	@ 0x40
 8006a38:	4013      	ands	r3, r2
 8006a3a:	d102      	bne.n	8006a42 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	785b      	ldrb	r3, [r3, #1]
 8006a4c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a4e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a54:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	78db      	ldrb	r3, [r3, #3]
 8006a5a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	491b      	ldr	r1, [pc, #108]	@ (8006ad4 <HAL_RTC_SetTime+0x148>)
 8006a68:	400a      	ands	r2, r1
 8006a6a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699a      	ldr	r2, [r3, #24]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4918      	ldr	r1, [pc, #96]	@ (8006ad8 <HAL_RTC_SetTime+0x14c>)
 8006a78:	400a      	ands	r2, r1
 8006a7a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6999      	ldr	r1, [r3, #24]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	68da      	ldr	r2, [r3, #12]
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006a94:	2313      	movs	r3, #19
 8006a96:	18fc      	adds	r4, r7, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	f000 fb74 	bl	8007188 <RTC_ExitInitMode>
 8006aa0:	0003      	movs	r3, r0
 8006aa2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	22ff      	movs	r2, #255	@ 0xff
 8006aaa:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8006aac:	2313      	movs	r3, #19
 8006aae:	18fb      	adds	r3, r7, r3
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d103      	bne.n	8006abe <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2229      	movs	r2, #41	@ 0x29
 8006aba:	2101      	movs	r1, #1
 8006abc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2228      	movs	r2, #40	@ 0x28
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	5499      	strb	r1, [r3, r2]

  return status;
 8006ac6:	2313      	movs	r3, #19
 8006ac8:	18fb      	adds	r3, r7, r3
 8006aca:	781b      	ldrb	r3, [r3, #0]
}
 8006acc:	0018      	movs	r0, r3
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	b006      	add	sp, #24
 8006ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8006ad4:	007f7f7f 	.word	0x007f7f7f
 8006ad8:	fffbffff 	.word	0xfffbffff

08006adc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	045b      	lsls	r3, r3, #17
 8006afa:	0c5a      	lsrs	r2, r3, #17
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a22      	ldr	r2, [pc, #136]	@ (8006b90 <HAL_RTC_GetTime+0xb4>)
 8006b08:	4013      	ands	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	0c1b      	lsrs	r3, r3, #16
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	223f      	movs	r2, #63	@ 0x3f
 8006b14:	4013      	ands	r3, r2
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	0a1b      	lsrs	r3, r3, #8
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	227f      	movs	r2, #127	@ 0x7f
 8006b24:	4013      	ands	r3, r2
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	227f      	movs	r2, #127	@ 0x7f
 8006b32:	4013      	ands	r3, r2
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	0d9b      	lsrs	r3, r3, #22
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2201      	movs	r2, #1
 8006b42:	4013      	ands	r3, r2
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d11a      	bne.n	8006b86 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	0018      	movs	r0, r3
 8006b56:	f000 fb83 	bl	8007260 <RTC_Bcd2ToByte>
 8006b5a:	0003      	movs	r3, r0
 8006b5c:	001a      	movs	r2, r3
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	785b      	ldrb	r3, [r3, #1]
 8006b66:	0018      	movs	r0, r3
 8006b68:	f000 fb7a 	bl	8007260 <RTC_Bcd2ToByte>
 8006b6c:	0003      	movs	r3, r0
 8006b6e:	001a      	movs	r2, r3
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	789b      	ldrb	r3, [r3, #2]
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f000 fb71 	bl	8007260 <RTC_Bcd2ToByte>
 8006b7e:	0003      	movs	r3, r0
 8006b80:	001a      	movs	r2, r3
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	0018      	movs	r0, r3
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	b006      	add	sp, #24
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	007f7f7f 	.word	0x007f7f7f

08006b94 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	4a21      	ldr	r2, [pc, #132]	@ (8006c2c <HAL_RTC_GetDate+0x98>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	0c1b      	lsrs	r3, r3, #16
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	0a1b      	lsrs	r3, r3, #8
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	221f      	movs	r2, #31
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	223f      	movs	r2, #63	@ 0x3f
 8006bcc:	4013      	ands	r3, r2
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	0b5b      	lsrs	r3, r3, #13
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2207      	movs	r2, #7
 8006bdc:	4013      	ands	r3, r2
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d11a      	bne.n	8006c20 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	78db      	ldrb	r3, [r3, #3]
 8006bee:	0018      	movs	r0, r3
 8006bf0:	f000 fb36 	bl	8007260 <RTC_Bcd2ToByte>
 8006bf4:	0003      	movs	r3, r0
 8006bf6:	001a      	movs	r2, r3
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	785b      	ldrb	r3, [r3, #1]
 8006c00:	0018      	movs	r0, r3
 8006c02:	f000 fb2d 	bl	8007260 <RTC_Bcd2ToByte>
 8006c06:	0003      	movs	r3, r0
 8006c08:	001a      	movs	r2, r3
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	789b      	ldrb	r3, [r3, #2]
 8006c12:	0018      	movs	r0, r3
 8006c14:	f000 fb24 	bl	8007260 <RTC_Bcd2ToByte>
 8006c18:	0003      	movs	r3, r0
 8006c1a:	001a      	movs	r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	0018      	movs	r0, r3
 8006c24:	46bd      	mov	sp, r7
 8006c26:	b006      	add	sp, #24
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	46c0      	nop			@ (mov r8, r8)
 8006c2c:	00ffff3f 	.word	0x00ffff3f

08006c30 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006c30:	b590      	push	{r4, r7, lr}
 8006c32:	b089      	sub	sp, #36	@ 0x24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2228      	movs	r2, #40	@ 0x28
 8006c40:	5c9b      	ldrb	r3, [r3, r2]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d101      	bne.n	8006c4a <HAL_RTC_SetAlarm_IT+0x1a>
 8006c46:	2302      	movs	r3, #2
 8006c48:	e127      	b.n	8006e9a <HAL_RTC_SetAlarm_IT+0x26a>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2228      	movs	r2, #40	@ 0x28
 8006c4e:	2101      	movs	r1, #1
 8006c50:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2229      	movs	r2, #41	@ 0x29
 8006c56:	2102      	movs	r1, #2
 8006c58:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d136      	bne.n	8006cce <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	2240      	movs	r2, #64	@ 0x40
 8006c68:	4013      	ands	r3, r2
 8006c6a:	d102      	bne.n	8006c72 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	0018      	movs	r0, r3
 8006c78:	f000 faca 	bl	8007210 <RTC_ByteToBcd2>
 8006c7c:	0003      	movs	r3, r0
 8006c7e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	785b      	ldrb	r3, [r3, #1]
 8006c84:	0018      	movs	r0, r3
 8006c86:	f000 fac3 	bl	8007210 <RTC_ByteToBcd2>
 8006c8a:	0003      	movs	r3, r0
 8006c8c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c8e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	789b      	ldrb	r3, [r3, #2]
 8006c94:	0018      	movs	r0, r3
 8006c96:	f000 fabb 	bl	8007210 <RTC_ByteToBcd2>
 8006c9a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c9c:	0022      	movs	r2, r4
 8006c9e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	78db      	ldrb	r3, [r3, #3]
 8006ca4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2220      	movs	r2, #32
 8006cae:	5c9b      	ldrb	r3, [r3, r2]
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f000 faad 	bl	8007210 <RTC_ByteToBcd2>
 8006cb6:	0003      	movs	r3, r0
 8006cb8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006cba:	0022      	movs	r2, r4
 8006cbc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006cc2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	61fb      	str	r3, [r7, #28]
 8006ccc:	e022      	b.n	8006d14 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	2240      	movs	r2, #64	@ 0x40
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	d102      	bne.n	8006ce0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	785b      	ldrb	r3, [r3, #1]
 8006cea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006cec:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006cf2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	78db      	ldrb	r3, [r3, #3]
 8006cf8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006cfa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2120      	movs	r1, #32
 8006d00:	5c5b      	ldrb	r3, [r3, r1]
 8006d02:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d04:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d0a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d10:	4313      	orrs	r3, r2
 8006d12:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	22ca      	movs	r2, #202	@ 0xca
 8006d26:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2253      	movs	r2, #83	@ 0x53
 8006d2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d34:	2380      	movs	r3, #128	@ 0x80
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d14c      	bne.n	8006dd6 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699a      	ldr	r2, [r3, #24]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4957      	ldr	r1, [pc, #348]	@ (8006ea4 <HAL_RTC_SetAlarm_IT+0x274>)
 8006d48:	400a      	ands	r2, r1
 8006d4a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2101      	movs	r1, #1
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8006d5c:	f7fc fd82 	bl	8003864 <HAL_GetTick>
 8006d60:	0003      	movs	r3, r0
 8006d62:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006d64:	e016      	b.n	8006d94 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006d66:	f7fc fd7d 	bl	8003864 <HAL_GetTick>
 8006d6a:	0002      	movs	r2, r0
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	1ad2      	subs	r2, r2, r3
 8006d70:	23fa      	movs	r3, #250	@ 0xfa
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d90d      	bls.n	8006d94 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	22ff      	movs	r2, #255	@ 0xff
 8006d7e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2229      	movs	r2, #41	@ 0x29
 8006d84:	2103      	movs	r1, #3
 8006d86:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2228      	movs	r2, #40	@ 0x28
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e082      	b.n	8006e9a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	d0e2      	beq.n	8006d66 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699a      	ldr	r2, [r3, #24]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2180      	movs	r1, #128	@ 0x80
 8006dbc:	0049      	lsls	r1, r1, #1
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	699a      	ldr	r2, [r3, #24]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2180      	movs	r1, #128	@ 0x80
 8006dce:	0149      	lsls	r1, r1, #5
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	619a      	str	r2, [r3, #24]
 8006dd4:	e04b      	b.n	8006e6e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	699a      	ldr	r2, [r3, #24]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4931      	ldr	r1, [pc, #196]	@ (8006ea8 <HAL_RTC_SetAlarm_IT+0x278>)
 8006de2:	400a      	ands	r2, r1
 8006de4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2102      	movs	r1, #2
 8006df2:	430a      	orrs	r2, r1
 8006df4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8006df6:	f7fc fd35 	bl	8003864 <HAL_GetTick>
 8006dfa:	0003      	movs	r3, r0
 8006dfc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006dfe:	e016      	b.n	8006e2e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006e00:	f7fc fd30 	bl	8003864 <HAL_GetTick>
 8006e04:	0002      	movs	r2, r0
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	1ad2      	subs	r2, r2, r3
 8006e0a:	23fa      	movs	r3, #250	@ 0xfa
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d90d      	bls.n	8006e2e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	22ff      	movs	r2, #255	@ 0xff
 8006e18:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2229      	movs	r2, #41	@ 0x29
 8006e1e:	2103      	movs	r1, #3
 8006e20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2228      	movs	r2, #40	@ 0x28
 8006e26:	2100      	movs	r1, #0
 8006e28:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e035      	b.n	8006e9a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	2202      	movs	r2, #2
 8006e36:	4013      	ands	r3, r2
 8006e38:	d0e2      	beq.n	8006e00 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	699a      	ldr	r2, [r3, #24]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2180      	movs	r1, #128	@ 0x80
 8006e56:	0089      	lsls	r1, r1, #2
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	699a      	ldr	r2, [r3, #24]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2180      	movs	r1, #128	@ 0x80
 8006e68:	0189      	lsls	r1, r1, #6
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8006eac <HAL_RTC_SetAlarm_IT+0x27c>)
 8006e70:	2380      	movs	r3, #128	@ 0x80
 8006e72:	58d3      	ldr	r3, [r2, r3]
 8006e74:	490d      	ldr	r1, [pc, #52]	@ (8006eac <HAL_RTC_SetAlarm_IT+0x27c>)
 8006e76:	2280      	movs	r2, #128	@ 0x80
 8006e78:	0312      	lsls	r2, r2, #12
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	2280      	movs	r2, #128	@ 0x80
 8006e7e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	22ff      	movs	r2, #255	@ 0xff
 8006e86:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2229      	movs	r2, #41	@ 0x29
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2228      	movs	r2, #40	@ 0x28
 8006e94:	2100      	movs	r1, #0
 8006e96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	0018      	movs	r0, r3
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	b009      	add	sp, #36	@ 0x24
 8006ea0:	bd90      	pop	{r4, r7, pc}
 8006ea2:	46c0      	nop			@ (mov r8, r8)
 8006ea4:	fffffeff 	.word	0xfffffeff
 8006ea8:	fffffdff 	.word	0xfffffdff
 8006eac:	40021800 	.word	0x40021800

08006eb0 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
 8006ebc:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	2380      	movs	r3, #128	@ 0x80
 8006ec2:	005b      	lsls	r3, r3, #1
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d144      	bne.n	8006f52 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2280      	movs	r2, #128	@ 0x80
 8006ecc:	0052      	lsls	r2, r2, #1
 8006ece:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed6:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ede:	045b      	lsls	r3, r3, #17
 8006ee0:	0c5b      	lsrs	r3, r3, #17
 8006ee2:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	0c1b      	lsrs	r3, r3, #16
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	223f      	movs	r2, #63	@ 0x3f
 8006eec:	4013      	ands	r3, r2
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	0a1b      	lsrs	r3, r3, #8
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	227f      	movs	r2, #127	@ 0x7f
 8006efc:	4013      	ands	r3, r2
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	227f      	movs	r2, #127	@ 0x7f
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	0d9b      	lsrs	r3, r3, #22
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2201      	movs	r2, #1
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	0e1b      	lsrs	r3, r3, #24
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	223f      	movs	r2, #63	@ 0x3f
 8006f30:	4013      	ands	r3, r2
 8006f32:	b2d9      	uxtb	r1, r3
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2220      	movs	r2, #32
 8006f38:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	2380      	movs	r3, #128	@ 0x80
 8006f3e:	05db      	lsls	r3, r3, #23
 8006f40:	401a      	ands	r2, r3
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	4a3b      	ldr	r2, [pc, #236]	@ (8007038 <HAL_RTC_GetAlarm+0x188>)
 8006f4a:	401a      	ands	r2, r3
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	615a      	str	r2, [r3, #20]
 8006f50:	e043      	b.n	8006fda <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2280      	movs	r2, #128	@ 0x80
 8006f56:	0092      	lsls	r2, r2, #2
 8006f58:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f60:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f68:	045b      	lsls	r3, r3, #17
 8006f6a:	0c5b      	lsrs	r3, r3, #17
 8006f6c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	0c1b      	lsrs	r3, r3, #16
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	223f      	movs	r2, #63	@ 0x3f
 8006f76:	4013      	ands	r3, r2
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	0a1b      	lsrs	r3, r3, #8
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	227f      	movs	r2, #127	@ 0x7f
 8006f86:	4013      	ands	r3, r2
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	227f      	movs	r2, #127	@ 0x7f
 8006f94:	4013      	ands	r3, r2
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	0d9b      	lsrs	r3, r3, #22
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	0e1b      	lsrs	r3, r3, #24
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	223f      	movs	r2, #63	@ 0x3f
 8006fba:	4013      	ands	r3, r2
 8006fbc:	b2d9      	uxtb	r1, r3
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	2380      	movs	r3, #128	@ 0x80
 8006fc8:	05db      	lsls	r3, r3, #23
 8006fca:	401a      	ands	r2, r3
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	4a19      	ldr	r2, [pc, #100]	@ (8007038 <HAL_RTC_GetAlarm+0x188>)
 8006fd4:	401a      	ands	r2, r3
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d125      	bne.n	800702c <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	f000 f93b 	bl	8007260 <RTC_Bcd2ToByte>
 8006fea:	0003      	movs	r3, r0
 8006fec:	001a      	movs	r2, r3
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	785b      	ldrb	r3, [r3, #1]
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	f000 f932 	bl	8007260 <RTC_Bcd2ToByte>
 8006ffc:	0003      	movs	r3, r0
 8006ffe:	001a      	movs	r2, r3
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	789b      	ldrb	r3, [r3, #2]
 8007008:	0018      	movs	r0, r3
 800700a:	f000 f929 	bl	8007260 <RTC_Bcd2ToByte>
 800700e:	0003      	movs	r3, r0
 8007010:	001a      	movs	r2, r3
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2220      	movs	r2, #32
 800701a:	5c9b      	ldrb	r3, [r3, r2]
 800701c:	0018      	movs	r0, r3
 800701e:	f000 f91f 	bl	8007260 <RTC_Bcd2ToByte>
 8007022:	0003      	movs	r3, r0
 8007024:	0019      	movs	r1, r3
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2220      	movs	r2, #32
 800702a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	0018      	movs	r0, r3
 8007030:	46bd      	mov	sp, r7
 8007032:	b006      	add	sp, #24
 8007034:	bd80      	pop	{r7, pc}
 8007036:	46c0      	nop			@ (mov r8, r8)
 8007038:	80808080 	.word	0x80808080

0800703c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	699a      	ldr	r2, [r3, #24]
 800704a:	2380      	movs	r3, #128	@ 0x80
 800704c:	015b      	lsls	r3, r3, #5
 800704e:	4013      	ands	r3, r2
 8007050:	d011      	beq.n	8007076 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007058:	2201      	movs	r2, #1
 800705a:	4013      	ands	r3, r2
 800705c:	d00b      	beq.n	8007076 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2101      	movs	r1, #1
 800706a:	430a      	orrs	r2, r1
 800706c:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	0018      	movs	r0, r3
 8007072:	f7fb f87b 	bl	800216c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	699a      	ldr	r2, [r3, #24]
 800707c:	2380      	movs	r3, #128	@ 0x80
 800707e:	019b      	lsls	r3, r3, #6
 8007080:	4013      	ands	r3, r2
 8007082:	d011      	beq.n	80070a8 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800708a:	2202      	movs	r2, #2
 800708c:	4013      	ands	r3, r2
 800708e:	d00b      	beq.n	80070a8 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2102      	movs	r1, #2
 800709c:	430a      	orrs	r2, r1
 800709e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	0018      	movs	r0, r3
 80070a4:	f000 f95b 	bl	800735e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2229      	movs	r2, #41	@ 0x29
 80070ac:	2101      	movs	r1, #1
 80070ae:	5499      	strb	r1, [r3, r2]
}
 80070b0:	46c0      	nop			@ (mov r8, r8)
 80070b2:	46bd      	mov	sp, r7
 80070b4:	b002      	add	sp, #8
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a0e      	ldr	r2, [pc, #56]	@ (8007100 <HAL_RTC_WaitForSynchro+0x48>)
 80070c6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80070c8:	f7fc fbcc 	bl	8003864 <HAL_GetTick>
 80070cc:	0003      	movs	r3, r0
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80070d0:	e00a      	b.n	80070e8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80070d2:	f7fc fbc7 	bl	8003864 <HAL_GetTick>
 80070d6:	0002      	movs	r2, r0
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	1ad2      	subs	r2, r2, r3
 80070dc:	23fa      	movs	r3, #250	@ 0xfa
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d901      	bls.n	80070e8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e006      	b.n	80070f6 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	2220      	movs	r2, #32
 80070f0:	4013      	ands	r3, r2
 80070f2:	d0ee      	beq.n	80070d2 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	0018      	movs	r0, r3
 80070f8:	46bd      	mov	sp, r7
 80070fa:	b004      	add	sp, #16
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	46c0      	nop			@ (mov r8, r8)
 8007100:	0001005f 	.word	0x0001005f

08007104 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800710c:	230f      	movs	r3, #15
 800710e:	18fb      	adds	r3, r7, r3
 8007110:	2200      	movs	r2, #0
 8007112:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	2240      	movs	r2, #64	@ 0x40
 800711c:	4013      	ands	r3, r2
 800711e:	d12c      	bne.n	800717a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68da      	ldr	r2, [r3, #12]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2180      	movs	r1, #128	@ 0x80
 800712c:	430a      	orrs	r2, r1
 800712e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007130:	f7fc fb98 	bl	8003864 <HAL_GetTick>
 8007134:	0003      	movs	r3, r0
 8007136:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007138:	e014      	b.n	8007164 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800713a:	f7fc fb93 	bl	8003864 <HAL_GetTick>
 800713e:	0002      	movs	r2, r0
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	1ad2      	subs	r2, r2, r3
 8007144:	200f      	movs	r0, #15
 8007146:	183b      	adds	r3, r7, r0
 8007148:	1839      	adds	r1, r7, r0
 800714a:	7809      	ldrb	r1, [r1, #0]
 800714c:	7019      	strb	r1, [r3, #0]
 800714e:	23fa      	movs	r3, #250	@ 0xfa
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	429a      	cmp	r2, r3
 8007154:	d906      	bls.n	8007164 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8007156:	183b      	adds	r3, r7, r0
 8007158:	2203      	movs	r2, #3
 800715a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2229      	movs	r2, #41	@ 0x29
 8007160:	2103      	movs	r1, #3
 8007162:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	2240      	movs	r2, #64	@ 0x40
 800716c:	4013      	ands	r3, r2
 800716e:	d104      	bne.n	800717a <RTC_EnterInitMode+0x76>
 8007170:	230f      	movs	r3, #15
 8007172:	18fb      	adds	r3, r7, r3
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b03      	cmp	r3, #3
 8007178:	d1df      	bne.n	800713a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800717a:	230f      	movs	r3, #15
 800717c:	18fb      	adds	r3, r7, r3
 800717e:	781b      	ldrb	r3, [r3, #0]
}
 8007180:	0018      	movs	r0, r3
 8007182:	46bd      	mov	sp, r7
 8007184:	b004      	add	sp, #16
 8007186:	bd80      	pop	{r7, pc}

08007188 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007188:	b590      	push	{r4, r7, lr}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007190:	240f      	movs	r4, #15
 8007192:	193b      	adds	r3, r7, r4
 8007194:	2200      	movs	r2, #0
 8007196:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007198:	4b1c      	ldr	r3, [pc, #112]	@ (800720c <RTC_ExitInitMode+0x84>)
 800719a:	68da      	ldr	r2, [r3, #12]
 800719c:	4b1b      	ldr	r3, [pc, #108]	@ (800720c <RTC_ExitInitMode+0x84>)
 800719e:	2180      	movs	r1, #128	@ 0x80
 80071a0:	438a      	bics	r2, r1
 80071a2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80071a4:	4b19      	ldr	r3, [pc, #100]	@ (800720c <RTC_ExitInitMode+0x84>)
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	2220      	movs	r2, #32
 80071aa:	4013      	ands	r3, r2
 80071ac:	d10d      	bne.n	80071ca <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	0018      	movs	r0, r3
 80071b2:	f7ff ff81 	bl	80070b8 <HAL_RTC_WaitForSynchro>
 80071b6:	1e03      	subs	r3, r0, #0
 80071b8:	d021      	beq.n	80071fe <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2229      	movs	r2, #41	@ 0x29
 80071be:	2103      	movs	r1, #3
 80071c0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80071c2:	193b      	adds	r3, r7, r4
 80071c4:	2203      	movs	r2, #3
 80071c6:	701a      	strb	r2, [r3, #0]
 80071c8:	e019      	b.n	80071fe <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80071ca:	4b10      	ldr	r3, [pc, #64]	@ (800720c <RTC_ExitInitMode+0x84>)
 80071cc:	699a      	ldr	r2, [r3, #24]
 80071ce:	4b0f      	ldr	r3, [pc, #60]	@ (800720c <RTC_ExitInitMode+0x84>)
 80071d0:	2120      	movs	r1, #32
 80071d2:	438a      	bics	r2, r1
 80071d4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	0018      	movs	r0, r3
 80071da:	f7ff ff6d 	bl	80070b8 <HAL_RTC_WaitForSynchro>
 80071de:	1e03      	subs	r3, r0, #0
 80071e0:	d007      	beq.n	80071f2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2229      	movs	r2, #41	@ 0x29
 80071e6:	2103      	movs	r1, #3
 80071e8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80071ea:	230f      	movs	r3, #15
 80071ec:	18fb      	adds	r3, r7, r3
 80071ee:	2203      	movs	r2, #3
 80071f0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80071f2:	4b06      	ldr	r3, [pc, #24]	@ (800720c <RTC_ExitInitMode+0x84>)
 80071f4:	699a      	ldr	r2, [r3, #24]
 80071f6:	4b05      	ldr	r3, [pc, #20]	@ (800720c <RTC_ExitInitMode+0x84>)
 80071f8:	2120      	movs	r1, #32
 80071fa:	430a      	orrs	r2, r1
 80071fc:	619a      	str	r2, [r3, #24]
  }

  return status;
 80071fe:	230f      	movs	r3, #15
 8007200:	18fb      	adds	r3, r7, r3
 8007202:	781b      	ldrb	r3, [r3, #0]
}
 8007204:	0018      	movs	r0, r3
 8007206:	46bd      	mov	sp, r7
 8007208:	b005      	add	sp, #20
 800720a:	bd90      	pop	{r4, r7, pc}
 800720c:	40002800 	.word	0x40002800

08007210 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	0002      	movs	r2, r0
 8007218:	1dfb      	adds	r3, r7, #7
 800721a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8007220:	230b      	movs	r3, #11
 8007222:	18fb      	adds	r3, r7, r3
 8007224:	1dfa      	adds	r2, r7, #7
 8007226:	7812      	ldrb	r2, [r2, #0]
 8007228:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800722a:	e008      	b.n	800723e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	3301      	adds	r3, #1
 8007230:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8007232:	220b      	movs	r2, #11
 8007234:	18bb      	adds	r3, r7, r2
 8007236:	18ba      	adds	r2, r7, r2
 8007238:	7812      	ldrb	r2, [r2, #0]
 800723a:	3a0a      	subs	r2, #10
 800723c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800723e:	210b      	movs	r1, #11
 8007240:	187b      	adds	r3, r7, r1
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	2b09      	cmp	r3, #9
 8007246:	d8f1      	bhi.n	800722c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	b2db      	uxtb	r3, r3
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	b2da      	uxtb	r2, r3
 8007250:	187b      	adds	r3, r7, r1
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	4313      	orrs	r3, r2
 8007256:	b2db      	uxtb	r3, r3
}
 8007258:	0018      	movs	r0, r3
 800725a:	46bd      	mov	sp, r7
 800725c:	b004      	add	sp, #16
 800725e:	bd80      	pop	{r7, pc}

08007260 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	0002      	movs	r2, r0
 8007268:	1dfb      	adds	r3, r7, #7
 800726a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800726c:	1dfb      	adds	r3, r7, #7
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	091b      	lsrs	r3, r3, #4
 8007272:	b2db      	uxtb	r3, r3
 8007274:	001a      	movs	r2, r3
 8007276:	0013      	movs	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	189b      	adds	r3, r3, r2
 800727c:	005b      	lsls	r3, r3, #1
 800727e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	b2da      	uxtb	r2, r3
 8007284:	1dfb      	adds	r3, r7, #7
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	210f      	movs	r1, #15
 800728a:	400b      	ands	r3, r1
 800728c:	b2db      	uxtb	r3, r3
 800728e:	18d3      	adds	r3, r2, r3
 8007290:	b2db      	uxtb	r3, r3
}
 8007292:	0018      	movs	r0, r3
 8007294:	46bd      	mov	sp, r7
 8007296:	b004      	add	sp, #16
 8007298:	bd80      	pop	{r7, pc}

0800729a <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b086      	sub	sp, #24
 800729e:	af00      	add	r7, sp, #0
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	607a      	str	r2, [r7, #4]
 80072a6:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2228      	movs	r2, #40	@ 0x28
 80072ac:	5c9b      	ldrb	r3, [r3, r2]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d101      	bne.n	80072b6 <HAL_RTCEx_SetSmoothCalib+0x1c>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e04f      	b.n	8007356 <HAL_RTCEx_SetSmoothCalib+0xbc>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2228      	movs	r2, #40	@ 0x28
 80072ba:	2101      	movs	r1, #1
 80072bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2229      	movs	r2, #41	@ 0x29
 80072c2:	2102      	movs	r1, #2
 80072c4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	22ca      	movs	r2, #202	@ 0xca
 80072cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2253      	movs	r2, #83	@ 0x53
 80072d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68da      	ldr	r2, [r3, #12]
 80072dc:	2380      	movs	r3, #128	@ 0x80
 80072de:	025b      	lsls	r3, r3, #9
 80072e0:	4013      	ands	r3, r2
 80072e2:	d022      	beq.n	800732a <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 80072e4:	f7fc fabe 	bl	8003864 <HAL_GetTick>
 80072e8:	0003      	movs	r3, r0
 80072ea:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80072ec:	e016      	b.n	800731c <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80072ee:	f7fc fab9 	bl	8003864 <HAL_GetTick>
 80072f2:	0002      	movs	r2, r0
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	1ad2      	subs	r2, r2, r3
 80072f8:	23fa      	movs	r3, #250	@ 0xfa
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d90d      	bls.n	800731c <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	22ff      	movs	r2, #255	@ 0xff
 8007306:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2229      	movs	r2, #41	@ 0x29
 800730c:	2103      	movs	r1, #3
 800730e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2228      	movs	r2, #40	@ 0x28
 8007314:	2100      	movs	r1, #0
 8007316:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e01c      	b.n	8007356 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	2380      	movs	r3, #128	@ 0x80
 8007324:	025b      	lsls	r3, r3, #9
 8007326:	4013      	ands	r3, r2
 8007328:	d1e1      	bne.n	80072ee <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	431a      	orrs	r2, r3
 8007330:	0011      	movs	r1, r2
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	430a      	orrs	r2, r1
 800733a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	22ff      	movs	r2, #255	@ 0xff
 8007342:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2229      	movs	r2, #41	@ 0x29
 8007348:	2101      	movs	r1, #1
 800734a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2228      	movs	r2, #40	@ 0x28
 8007350:	2100      	movs	r1, #0
 8007352:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	0018      	movs	r0, r3
 8007358:	46bd      	mov	sp, r7
 800735a:	b006      	add	sp, #24
 800735c:	bd80      	pop	{r7, pc}

0800735e <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007366:	46c0      	nop			@ (mov r8, r8)
 8007368:	46bd      	mov	sp, r7
 800736a:	b002      	add	sp, #8
 800736c:	bd80      	pop	{r7, pc}

0800736e <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b086      	sub	sp, #24
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	001a      	movs	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	18d3      	adds	r3, r2, r3
 8007386:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	3301      	adds	r3, #1
 800738c:	33ff      	adds	r3, #255	@ 0xff
 800738e:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	18d3      	adds	r3, r2, r3
 8007398:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	601a      	str	r2, [r3, #0]
}
 80073a0:	46c0      	nop			@ (mov r8, r8)
 80073a2:	46bd      	mov	sp, r7
 80073a4:	b006      	add	sp, #24
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	001a      	movs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	18d3      	adds	r3, r2, r3
 80073be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	3301      	adds	r3, #1
 80073c4:	33ff      	adds	r3, #255	@ 0xff
 80073c6:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	18d3      	adds	r3, r2, r3
 80073d0:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	681b      	ldr	r3, [r3, #0]
}
 80073d6:	0018      	movs	r0, r3
 80073d8:	46bd      	mov	sp, r7
 80073da:	b004      	add	sp, #16
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e0a8      	b.n	8007544 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d109      	bne.n	800740e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	2382      	movs	r3, #130	@ 0x82
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	429a      	cmp	r2, r3
 8007404:	d009      	beq.n	800741a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	61da      	str	r2, [r3, #28]
 800740c:	e005      	b.n	800741a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	225d      	movs	r2, #93	@ 0x5d
 8007424:	5c9b      	ldrb	r3, [r3, r2]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b00      	cmp	r3, #0
 800742a:	d107      	bne.n	800743c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	225c      	movs	r2, #92	@ 0x5c
 8007430:	2100      	movs	r1, #0
 8007432:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	0018      	movs	r0, r3
 8007438:	f7fb ff9c 	bl	8003374 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	225d      	movs	r2, #93	@ 0x5d
 8007440:	2102      	movs	r1, #2
 8007442:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2140      	movs	r1, #64	@ 0x40
 8007450:	438a      	bics	r2, r1
 8007452:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	23e0      	movs	r3, #224	@ 0xe0
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	429a      	cmp	r2, r3
 800745e:	d902      	bls.n	8007466 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007460:	2300      	movs	r3, #0
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	e002      	b.n	800746c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007466:	2380      	movs	r3, #128	@ 0x80
 8007468:	015b      	lsls	r3, r3, #5
 800746a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	23f0      	movs	r3, #240	@ 0xf0
 8007472:	011b      	lsls	r3, r3, #4
 8007474:	429a      	cmp	r2, r3
 8007476:	d008      	beq.n	800748a <HAL_SPI_Init+0xaa>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68da      	ldr	r2, [r3, #12]
 800747c:	23e0      	movs	r3, #224	@ 0xe0
 800747e:	00db      	lsls	r3, r3, #3
 8007480:	429a      	cmp	r2, r3
 8007482:	d002      	beq.n	800748a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	2382      	movs	r3, #130	@ 0x82
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	401a      	ands	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6899      	ldr	r1, [r3, #8]
 8007498:	2384      	movs	r3, #132	@ 0x84
 800749a:	021b      	lsls	r3, r3, #8
 800749c:	400b      	ands	r3, r1
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2102      	movs	r1, #2
 80074a6:	400b      	ands	r3, r1
 80074a8:	431a      	orrs	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	2101      	movs	r1, #1
 80074b0:	400b      	ands	r3, r1
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6999      	ldr	r1, [r3, #24]
 80074b8:	2380      	movs	r3, #128	@ 0x80
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	400b      	ands	r3, r1
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	69db      	ldr	r3, [r3, #28]
 80074c4:	2138      	movs	r1, #56	@ 0x38
 80074c6:	400b      	ands	r3, r1
 80074c8:	431a      	orrs	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	2180      	movs	r1, #128	@ 0x80
 80074d0:	400b      	ands	r3, r1
 80074d2:	431a      	orrs	r2, r3
 80074d4:	0011      	movs	r1, r2
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074da:	2380      	movs	r3, #128	@ 0x80
 80074dc:	019b      	lsls	r3, r3, #6
 80074de:	401a      	ands	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	0c1b      	lsrs	r3, r3, #16
 80074ee:	2204      	movs	r2, #4
 80074f0:	401a      	ands	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f6:	2110      	movs	r1, #16
 80074f8:	400b      	ands	r3, r1
 80074fa:	431a      	orrs	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007500:	2108      	movs	r1, #8
 8007502:	400b      	ands	r3, r1
 8007504:	431a      	orrs	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68d9      	ldr	r1, [r3, #12]
 800750a:	23f0      	movs	r3, #240	@ 0xf0
 800750c:	011b      	lsls	r3, r3, #4
 800750e:	400b      	ands	r3, r1
 8007510:	431a      	orrs	r2, r3
 8007512:	0011      	movs	r1, r2
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	2380      	movs	r3, #128	@ 0x80
 8007518:	015b      	lsls	r3, r3, #5
 800751a:	401a      	ands	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	69da      	ldr	r2, [r3, #28]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4907      	ldr	r1, [pc, #28]	@ (800754c <HAL_SPI_Init+0x16c>)
 8007530:	400a      	ands	r2, r1
 8007532:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	225d      	movs	r2, #93	@ 0x5d
 800753e:	2101      	movs	r1, #1
 8007540:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	0018      	movs	r0, r3
 8007546:	46bd      	mov	sp, r7
 8007548:	b004      	add	sp, #16
 800754a:	bd80      	pop	{r7, pc}
 800754c:	fffff7ff 	.word	0xfffff7ff

08007550 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	603b      	str	r3, [r7, #0]
 800755c:	1dbb      	adds	r3, r7, #6
 800755e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007560:	231f      	movs	r3, #31
 8007562:	18fb      	adds	r3, r7, r3
 8007564:	2200      	movs	r2, #0
 8007566:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	225c      	movs	r2, #92	@ 0x5c
 800756c:	5c9b      	ldrb	r3, [r3, r2]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d101      	bne.n	8007576 <HAL_SPI_Transmit+0x26>
 8007572:	2302      	movs	r3, #2
 8007574:	e147      	b.n	8007806 <HAL_SPI_Transmit+0x2b6>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	225c      	movs	r2, #92	@ 0x5c
 800757a:	2101      	movs	r1, #1
 800757c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800757e:	f7fc f971 	bl	8003864 <HAL_GetTick>
 8007582:	0003      	movs	r3, r0
 8007584:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007586:	2316      	movs	r3, #22
 8007588:	18fb      	adds	r3, r7, r3
 800758a:	1dba      	adds	r2, r7, #6
 800758c:	8812      	ldrh	r2, [r2, #0]
 800758e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	225d      	movs	r2, #93	@ 0x5d
 8007594:	5c9b      	ldrb	r3, [r3, r2]
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b01      	cmp	r3, #1
 800759a:	d004      	beq.n	80075a6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800759c:	231f      	movs	r3, #31
 800759e:	18fb      	adds	r3, r7, r3
 80075a0:	2202      	movs	r2, #2
 80075a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80075a4:	e128      	b.n	80077f8 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <HAL_SPI_Transmit+0x64>
 80075ac:	1dbb      	adds	r3, r7, #6
 80075ae:	881b      	ldrh	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d104      	bne.n	80075be <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80075b4:	231f      	movs	r3, #31
 80075b6:	18fb      	adds	r3, r7, r3
 80075b8:	2201      	movs	r2, #1
 80075ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80075bc:	e11c      	b.n	80077f8 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	225d      	movs	r2, #93	@ 0x5d
 80075c2:	2103      	movs	r1, #3
 80075c4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	1dba      	adds	r2, r7, #6
 80075d6:	8812      	ldrh	r2, [r2, #0]
 80075d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	1dba      	adds	r2, r7, #6
 80075de:	8812      	ldrh	r2, [r2, #0]
 80075e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2244      	movs	r2, #68	@ 0x44
 80075ec:	2100      	movs	r1, #0
 80075ee:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2246      	movs	r2, #70	@ 0x46
 80075f4:	2100      	movs	r1, #0
 80075f6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	2380      	movs	r3, #128	@ 0x80
 800760a:	021b      	lsls	r3, r3, #8
 800760c:	429a      	cmp	r2, r3
 800760e:	d110      	bne.n	8007632 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2140      	movs	r1, #64	@ 0x40
 800761c:	438a      	bics	r2, r1
 800761e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2180      	movs	r1, #128	@ 0x80
 800762c:	01c9      	lsls	r1, r1, #7
 800762e:	430a      	orrs	r2, r1
 8007630:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2240      	movs	r2, #64	@ 0x40
 800763a:	4013      	ands	r3, r2
 800763c:	2b40      	cmp	r3, #64	@ 0x40
 800763e:	d007      	beq.n	8007650 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2140      	movs	r1, #64	@ 0x40
 800764c:	430a      	orrs	r2, r1
 800764e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	68da      	ldr	r2, [r3, #12]
 8007654:	23e0      	movs	r3, #224	@ 0xe0
 8007656:	00db      	lsls	r3, r3, #3
 8007658:	429a      	cmp	r2, r3
 800765a:	d952      	bls.n	8007702 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d004      	beq.n	800766e <HAL_SPI_Transmit+0x11e>
 8007664:	2316      	movs	r3, #22
 8007666:	18fb      	adds	r3, r7, r3
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d143      	bne.n	80076f6 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007672:	881a      	ldrh	r2, [r3, #0]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767e:	1c9a      	adds	r2, r3, #2
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007688:	b29b      	uxth	r3, r3
 800768a:	3b01      	subs	r3, #1
 800768c:	b29a      	uxth	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007692:	e030      	b.n	80076f6 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	2202      	movs	r2, #2
 800769c:	4013      	ands	r3, r2
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d112      	bne.n	80076c8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a6:	881a      	ldrh	r2, [r3, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b2:	1c9a      	adds	r2, r3, #2
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076bc:	b29b      	uxth	r3, r3
 80076be:	3b01      	subs	r3, #1
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80076c6:	e016      	b.n	80076f6 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076c8:	f7fc f8cc 	bl	8003864 <HAL_GetTick>
 80076cc:	0002      	movs	r2, r0
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d802      	bhi.n	80076de <HAL_SPI_Transmit+0x18e>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	3301      	adds	r3, #1
 80076dc:	d102      	bne.n	80076e4 <HAL_SPI_Transmit+0x194>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d108      	bne.n	80076f6 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80076e4:	231f      	movs	r3, #31
 80076e6:	18fb      	adds	r3, r7, r3
 80076e8:	2203      	movs	r2, #3
 80076ea:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	225d      	movs	r2, #93	@ 0x5d
 80076f0:	2101      	movs	r1, #1
 80076f2:	5499      	strb	r1, [r3, r2]
          goto error;
 80076f4:	e080      	b.n	80077f8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1c9      	bne.n	8007694 <HAL_SPI_Transmit+0x144>
 8007700:	e053      	b.n	80077aa <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <HAL_SPI_Transmit+0x1c4>
 800770a:	2316      	movs	r3, #22
 800770c:	18fb      	adds	r3, r7, r3
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d145      	bne.n	80077a0 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	330c      	adds	r3, #12
 800771e:	7812      	ldrb	r2, [r2, #0]
 8007720:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007726:	1c5a      	adds	r2, r3, #1
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007730:	b29b      	uxth	r3, r3
 8007732:	3b01      	subs	r3, #1
 8007734:	b29a      	uxth	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800773a:	e031      	b.n	80077a0 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	2202      	movs	r2, #2
 8007744:	4013      	ands	r3, r2
 8007746:	2b02      	cmp	r3, #2
 8007748:	d113      	bne.n	8007772 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	330c      	adds	r3, #12
 8007754:	7812      	ldrb	r2, [r2, #0]
 8007756:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007766:	b29b      	uxth	r3, r3
 8007768:	3b01      	subs	r3, #1
 800776a:	b29a      	uxth	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007770:	e016      	b.n	80077a0 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007772:	f7fc f877 	bl	8003864 <HAL_GetTick>
 8007776:	0002      	movs	r2, r0
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	429a      	cmp	r2, r3
 8007780:	d802      	bhi.n	8007788 <HAL_SPI_Transmit+0x238>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	3301      	adds	r3, #1
 8007786:	d102      	bne.n	800778e <HAL_SPI_Transmit+0x23e>
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d108      	bne.n	80077a0 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800778e:	231f      	movs	r3, #31
 8007790:	18fb      	adds	r3, r7, r3
 8007792:	2203      	movs	r2, #3
 8007794:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	225d      	movs	r2, #93	@ 0x5d
 800779a:	2101      	movs	r1, #1
 800779c:	5499      	strb	r1, [r3, r2]
          goto error;
 800779e:	e02b      	b.n	80077f8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1c8      	bne.n	800773c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	0018      	movs	r0, r3
 80077b2:	f000 fcef 	bl	8008194 <SPI_EndRxTxTransaction>
 80077b6:	1e03      	subs	r3, r0, #0
 80077b8:	d002      	beq.n	80077c0 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2220      	movs	r2, #32
 80077be:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10a      	bne.n	80077de <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077c8:	2300      	movs	r3, #0
 80077ca:	613b      	str	r3, [r7, #16]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	613b      	str	r3, [r7, #16]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	613b      	str	r3, [r7, #16]
 80077dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d004      	beq.n	80077f0 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80077e6:	231f      	movs	r3, #31
 80077e8:	18fb      	adds	r3, r7, r3
 80077ea:	2201      	movs	r2, #1
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	e003      	b.n	80077f8 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	225d      	movs	r2, #93	@ 0x5d
 80077f4:	2101      	movs	r1, #1
 80077f6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	225c      	movs	r2, #92	@ 0x5c
 80077fc:	2100      	movs	r1, #0
 80077fe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007800:	231f      	movs	r3, #31
 8007802:	18fb      	adds	r3, r7, r3
 8007804:	781b      	ldrb	r3, [r3, #0]
}
 8007806:	0018      	movs	r0, r3
 8007808:	46bd      	mov	sp, r7
 800780a:	b008      	add	sp, #32
 800780c:	bd80      	pop	{r7, pc}
	...

08007810 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007810:	b590      	push	{r4, r7, lr}
 8007812:	b089      	sub	sp, #36	@ 0x24
 8007814:	af02      	add	r7, sp, #8
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	603b      	str	r3, [r7, #0]
 800781c:	1dbb      	adds	r3, r7, #6
 800781e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007820:	2117      	movs	r1, #23
 8007822:	187b      	adds	r3, r7, r1
 8007824:	2200      	movs	r2, #0
 8007826:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	225d      	movs	r2, #93	@ 0x5d
 800782c:	5c9b      	ldrb	r3, [r3, r2]
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b01      	cmp	r3, #1
 8007832:	d003      	beq.n	800783c <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8007834:	187b      	adds	r3, r7, r1
 8007836:	2202      	movs	r2, #2
 8007838:	701a      	strb	r2, [r3, #0]
    goto error;
 800783a:	e12b      	b.n	8007a94 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	2382      	movs	r3, #130	@ 0x82
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	429a      	cmp	r2, r3
 8007846:	d113      	bne.n	8007870 <HAL_SPI_Receive+0x60>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10f      	bne.n	8007870 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	225d      	movs	r2, #93	@ 0x5d
 8007854:	2104      	movs	r1, #4
 8007856:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007858:	1dbb      	adds	r3, r7, #6
 800785a:	881c      	ldrh	r4, [r3, #0]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	68b9      	ldr	r1, [r7, #8]
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	0023      	movs	r3, r4
 8007868:	f000 f924 	bl	8007ab4 <HAL_SPI_TransmitReceive>
 800786c:	0003      	movs	r3, r0
 800786e:	e118      	b.n	8007aa2 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	225c      	movs	r2, #92	@ 0x5c
 8007874:	5c9b      	ldrb	r3, [r3, r2]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d101      	bne.n	800787e <HAL_SPI_Receive+0x6e>
 800787a:	2302      	movs	r3, #2
 800787c:	e111      	b.n	8007aa2 <HAL_SPI_Receive+0x292>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	225c      	movs	r2, #92	@ 0x5c
 8007882:	2101      	movs	r1, #1
 8007884:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007886:	f7fb ffed 	bl	8003864 <HAL_GetTick>
 800788a:	0003      	movs	r3, r0
 800788c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <HAL_SPI_Receive+0x8c>
 8007894:	1dbb      	adds	r3, r7, #6
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d104      	bne.n	80078a6 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800789c:	2317      	movs	r3, #23
 800789e:	18fb      	adds	r3, r7, r3
 80078a0:	2201      	movs	r2, #1
 80078a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80078a4:	e0f6      	b.n	8007a94 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	225d      	movs	r2, #93	@ 0x5d
 80078aa:	2104      	movs	r1, #4
 80078ac:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	1dba      	adds	r2, r7, #6
 80078be:	2144      	movs	r1, #68	@ 0x44
 80078c0:	8812      	ldrh	r2, [r2, #0]
 80078c2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	1dba      	adds	r2, r7, #6
 80078c8:	2146      	movs	r1, #70	@ 0x46
 80078ca:	8812      	ldrh	r2, [r2, #0]
 80078cc:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	68da      	ldr	r2, [r3, #12]
 80078f0:	23e0      	movs	r3, #224	@ 0xe0
 80078f2:	00db      	lsls	r3, r3, #3
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d908      	bls.n	800790a <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	496a      	ldr	r1, [pc, #424]	@ (8007aac <HAL_SPI_Receive+0x29c>)
 8007904:	400a      	ands	r2, r1
 8007906:	605a      	str	r2, [r3, #4]
 8007908:	e008      	b.n	800791c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2180      	movs	r1, #128	@ 0x80
 8007916:	0149      	lsls	r1, r1, #5
 8007918:	430a      	orrs	r2, r1
 800791a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	689a      	ldr	r2, [r3, #8]
 8007920:	2380      	movs	r3, #128	@ 0x80
 8007922:	021b      	lsls	r3, r3, #8
 8007924:	429a      	cmp	r2, r3
 8007926:	d10f      	bne.n	8007948 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2140      	movs	r1, #64	@ 0x40
 8007934:	438a      	bics	r2, r1
 8007936:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	495b      	ldr	r1, [pc, #364]	@ (8007ab0 <HAL_SPI_Receive+0x2a0>)
 8007944:	400a      	ands	r2, r1
 8007946:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2240      	movs	r2, #64	@ 0x40
 8007950:	4013      	ands	r3, r2
 8007952:	2b40      	cmp	r3, #64	@ 0x40
 8007954:	d007      	beq.n	8007966 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2140      	movs	r1, #64	@ 0x40
 8007962:	430a      	orrs	r2, r1
 8007964:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	23e0      	movs	r3, #224	@ 0xe0
 800796c:	00db      	lsls	r3, r3, #3
 800796e:	429a      	cmp	r2, r3
 8007970:	d900      	bls.n	8007974 <HAL_SPI_Receive+0x164>
 8007972:	e071      	b.n	8007a58 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007974:	e035      	b.n	80079e2 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	2201      	movs	r2, #1
 800797e:	4013      	ands	r3, r2
 8007980:	2b01      	cmp	r3, #1
 8007982:	d117      	bne.n	80079b4 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	330c      	adds	r3, #12
 800798a:	001a      	movs	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007990:	7812      	ldrb	r2, [r2, #0]
 8007992:	b2d2      	uxtb	r2, r2
 8007994:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2246      	movs	r2, #70	@ 0x46
 80079a4:	5a9b      	ldrh	r3, [r3, r2]
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	3b01      	subs	r3, #1
 80079aa:	b299      	uxth	r1, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2246      	movs	r2, #70	@ 0x46
 80079b0:	5299      	strh	r1, [r3, r2]
 80079b2:	e016      	b.n	80079e2 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079b4:	f7fb ff56 	bl	8003864 <HAL_GetTick>
 80079b8:	0002      	movs	r2, r0
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d802      	bhi.n	80079ca <HAL_SPI_Receive+0x1ba>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	3301      	adds	r3, #1
 80079c8:	d102      	bne.n	80079d0 <HAL_SPI_Receive+0x1c0>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d108      	bne.n	80079e2 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 80079d0:	2317      	movs	r3, #23
 80079d2:	18fb      	adds	r3, r7, r3
 80079d4:	2203      	movs	r2, #3
 80079d6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	225d      	movs	r2, #93	@ 0x5d
 80079dc:	2101      	movs	r1, #1
 80079de:	5499      	strb	r1, [r3, r2]
          goto error;
 80079e0:	e058      	b.n	8007a94 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2246      	movs	r2, #70	@ 0x46
 80079e6:	5a9b      	ldrh	r3, [r3, r2]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1c3      	bne.n	8007976 <HAL_SPI_Receive+0x166>
 80079ee:	e039      	b.n	8007a64 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	2201      	movs	r2, #1
 80079f8:	4013      	ands	r3, r2
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d115      	bne.n	8007a2a <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68da      	ldr	r2, [r3, #12]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a08:	b292      	uxth	r2, r2
 8007a0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a10:	1c9a      	adds	r2, r3, #2
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2246      	movs	r2, #70	@ 0x46
 8007a1a:	5a9b      	ldrh	r3, [r3, r2]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	b299      	uxth	r1, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2246      	movs	r2, #70	@ 0x46
 8007a26:	5299      	strh	r1, [r3, r2]
 8007a28:	e016      	b.n	8007a58 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a2a:	f7fb ff1b 	bl	8003864 <HAL_GetTick>
 8007a2e:	0002      	movs	r2, r0
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d802      	bhi.n	8007a40 <HAL_SPI_Receive+0x230>
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	d102      	bne.n	8007a46 <HAL_SPI_Receive+0x236>
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d108      	bne.n	8007a58 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8007a46:	2317      	movs	r3, #23
 8007a48:	18fb      	adds	r3, r7, r3
 8007a4a:	2203      	movs	r2, #3
 8007a4c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	225d      	movs	r2, #93	@ 0x5d
 8007a52:	2101      	movs	r1, #1
 8007a54:	5499      	strb	r1, [r3, r2]
          goto error;
 8007a56:	e01d      	b.n	8007a94 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2246      	movs	r2, #70	@ 0x46
 8007a5c:	5a9b      	ldrh	r3, [r3, r2]
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1c5      	bne.n	80079f0 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	f000 fb34 	bl	80080d8 <SPI_EndRxTransaction>
 8007a70:	1e03      	subs	r3, r0, #0
 8007a72:	d002      	beq.n	8007a7a <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2220      	movs	r2, #32
 8007a78:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d004      	beq.n	8007a8c <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8007a82:	2317      	movs	r3, #23
 8007a84:	18fb      	adds	r3, r7, r3
 8007a86:	2201      	movs	r2, #1
 8007a88:	701a      	strb	r2, [r3, #0]
 8007a8a:	e003      	b.n	8007a94 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	225d      	movs	r2, #93	@ 0x5d
 8007a90:	2101      	movs	r1, #1
 8007a92:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	225c      	movs	r2, #92	@ 0x5c
 8007a98:	2100      	movs	r1, #0
 8007a9a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007a9c:	2317      	movs	r3, #23
 8007a9e:	18fb      	adds	r3, r7, r3
 8007aa0:	781b      	ldrb	r3, [r3, #0]
}
 8007aa2:	0018      	movs	r0, r3
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	b007      	add	sp, #28
 8007aa8:	bd90      	pop	{r4, r7, pc}
 8007aaa:	46c0      	nop			@ (mov r8, r8)
 8007aac:	ffffefff 	.word	0xffffefff
 8007ab0:	ffffbfff 	.word	0xffffbfff

08007ab4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08a      	sub	sp, #40	@ 0x28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	001a      	movs	r2, r3
 8007ac2:	1cbb      	adds	r3, r7, #2
 8007ac4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007aca:	2323      	movs	r3, #35	@ 0x23
 8007acc:	18fb      	adds	r3, r7, r3
 8007ace:	2200      	movs	r2, #0
 8007ad0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	225c      	movs	r2, #92	@ 0x5c
 8007ad6:	5c9b      	ldrb	r3, [r3, r2]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_SPI_TransmitReceive+0x2c>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e1c4      	b.n	8007e6a <HAL_SPI_TransmitReceive+0x3b6>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	225c      	movs	r2, #92	@ 0x5c
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ae8:	f7fb febc 	bl	8003864 <HAL_GetTick>
 8007aec:	0003      	movs	r3, r0
 8007aee:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007af0:	201b      	movs	r0, #27
 8007af2:	183b      	adds	r3, r7, r0
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	215d      	movs	r1, #93	@ 0x5d
 8007af8:	5c52      	ldrb	r2, [r2, r1]
 8007afa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007b02:	2312      	movs	r3, #18
 8007b04:	18fb      	adds	r3, r7, r3
 8007b06:	1cba      	adds	r2, r7, #2
 8007b08:	8812      	ldrh	r2, [r2, #0]
 8007b0a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b0c:	183b      	adds	r3, r7, r0
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d011      	beq.n	8007b38 <HAL_SPI_TransmitReceive+0x84>
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	2382      	movs	r3, #130	@ 0x82
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d107      	bne.n	8007b2e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d103      	bne.n	8007b2e <HAL_SPI_TransmitReceive+0x7a>
 8007b26:	183b      	adds	r3, r7, r0
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	d004      	beq.n	8007b38 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8007b2e:	2323      	movs	r3, #35	@ 0x23
 8007b30:	18fb      	adds	r3, r7, r3
 8007b32:	2202      	movs	r2, #2
 8007b34:	701a      	strb	r2, [r3, #0]
    goto error;
 8007b36:	e191      	b.n	8007e5c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d006      	beq.n	8007b4c <HAL_SPI_TransmitReceive+0x98>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d003      	beq.n	8007b4c <HAL_SPI_TransmitReceive+0x98>
 8007b44:	1cbb      	adds	r3, r7, #2
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d104      	bne.n	8007b56 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007b4c:	2323      	movs	r3, #35	@ 0x23
 8007b4e:	18fb      	adds	r3, r7, r3
 8007b50:	2201      	movs	r2, #1
 8007b52:	701a      	strb	r2, [r3, #0]
    goto error;
 8007b54:	e182      	b.n	8007e5c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	225d      	movs	r2, #93	@ 0x5d
 8007b5a:	5c9b      	ldrb	r3, [r3, r2]
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d003      	beq.n	8007b6a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	225d      	movs	r2, #93	@ 0x5d
 8007b66:	2105      	movs	r1, #5
 8007b68:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	1cba      	adds	r2, r7, #2
 8007b7a:	2146      	movs	r1, #70	@ 0x46
 8007b7c:	8812      	ldrh	r2, [r2, #0]
 8007b7e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	1cba      	adds	r2, r7, #2
 8007b84:	2144      	movs	r1, #68	@ 0x44
 8007b86:	8812      	ldrh	r2, [r2, #0]
 8007b88:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	1cba      	adds	r2, r7, #2
 8007b94:	8812      	ldrh	r2, [r2, #0]
 8007b96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	1cba      	adds	r2, r7, #2
 8007b9c:	8812      	ldrh	r2, [r2, #0]
 8007b9e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	68da      	ldr	r2, [r3, #12]
 8007bb0:	23e0      	movs	r3, #224	@ 0xe0
 8007bb2:	00db      	lsls	r3, r3, #3
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d908      	bls.n	8007bca <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	49ac      	ldr	r1, [pc, #688]	@ (8007e74 <HAL_SPI_TransmitReceive+0x3c0>)
 8007bc4:	400a      	ands	r2, r1
 8007bc6:	605a      	str	r2, [r3, #4]
 8007bc8:	e008      	b.n	8007bdc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2180      	movs	r1, #128	@ 0x80
 8007bd6:	0149      	lsls	r1, r1, #5
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2240      	movs	r2, #64	@ 0x40
 8007be4:	4013      	ands	r3, r2
 8007be6:	2b40      	cmp	r3, #64	@ 0x40
 8007be8:	d007      	beq.n	8007bfa <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2140      	movs	r1, #64	@ 0x40
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	23e0      	movs	r3, #224	@ 0xe0
 8007c00:	00db      	lsls	r3, r3, #3
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d800      	bhi.n	8007c08 <HAL_SPI_TransmitReceive+0x154>
 8007c06:	e083      	b.n	8007d10 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d005      	beq.n	8007c1c <HAL_SPI_TransmitReceive+0x168>
 8007c10:	2312      	movs	r3, #18
 8007c12:	18fb      	adds	r3, r7, r3
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d000      	beq.n	8007c1c <HAL_SPI_TransmitReceive+0x168>
 8007c1a:	e06d      	b.n	8007cf8 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c20:	881a      	ldrh	r2, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c2c:	1c9a      	adds	r2, r3, #2
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c40:	e05a      	b.n	8007cf8 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	2202      	movs	r2, #2
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d11b      	bne.n	8007c88 <HAL_SPI_TransmitReceive+0x1d4>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d016      	beq.n	8007c88 <HAL_SPI_TransmitReceive+0x1d4>
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d113      	bne.n	8007c88 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c64:	881a      	ldrh	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c70:	1c9a      	adds	r2, r3, #2
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	4013      	ands	r3, r2
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d11c      	bne.n	8007cd0 <HAL_SPI_TransmitReceive+0x21c>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2246      	movs	r2, #70	@ 0x46
 8007c9a:	5a9b      	ldrh	r3, [r3, r2]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d016      	beq.n	8007cd0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68da      	ldr	r2, [r3, #12]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cac:	b292      	uxth	r2, r2
 8007cae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb4:	1c9a      	adds	r2, r3, #2
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2246      	movs	r2, #70	@ 0x46
 8007cbe:	5a9b      	ldrh	r3, [r3, r2]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	b299      	uxth	r1, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2246      	movs	r2, #70	@ 0x46
 8007cca:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007cd0:	f7fb fdc8 	bl	8003864 <HAL_GetTick>
 8007cd4:	0002      	movs	r2, r0
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d80b      	bhi.n	8007cf8 <HAL_SPI_TransmitReceive+0x244>
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	d008      	beq.n	8007cf8 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8007ce6:	2323      	movs	r3, #35	@ 0x23
 8007ce8:	18fb      	adds	r3, r7, r3
 8007cea:	2203      	movs	r2, #3
 8007cec:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	225d      	movs	r2, #93	@ 0x5d
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	5499      	strb	r1, [r3, r2]
        goto error;
 8007cf6:	e0b1      	b.n	8007e5c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d19f      	bne.n	8007c42 <HAL_SPI_TransmitReceive+0x18e>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2246      	movs	r2, #70	@ 0x46
 8007d06:	5a9b      	ldrh	r3, [r3, r2]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d199      	bne.n	8007c42 <HAL_SPI_TransmitReceive+0x18e>
 8007d0e:	e089      	b.n	8007e24 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <HAL_SPI_TransmitReceive+0x270>
 8007d18:	2312      	movs	r3, #18
 8007d1a:	18fb      	adds	r3, r7, r3
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d000      	beq.n	8007d24 <HAL_SPI_TransmitReceive+0x270>
 8007d22:	e074      	b.n	8007e0e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	330c      	adds	r3, #12
 8007d2e:	7812      	ldrb	r2, [r2, #0]
 8007d30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d36:	1c5a      	adds	r2, r3, #1
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	3b01      	subs	r3, #1
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d4a:	e060      	b.n	8007e0e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	2202      	movs	r2, #2
 8007d54:	4013      	ands	r3, r2
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d11c      	bne.n	8007d94 <HAL_SPI_TransmitReceive+0x2e0>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d017      	beq.n	8007d94 <HAL_SPI_TransmitReceive+0x2e0>
 8007d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d114      	bne.n	8007d94 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	330c      	adds	r3, #12
 8007d74:	7812      	ldrb	r2, [r2, #0]
 8007d76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7c:	1c5a      	adds	r2, r3, #1
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d90:	2300      	movs	r3, #0
 8007d92:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d11e      	bne.n	8007de0 <HAL_SPI_TransmitReceive+0x32c>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2246      	movs	r2, #70	@ 0x46
 8007da6:	5a9b      	ldrh	r3, [r3, r2]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d018      	beq.n	8007de0 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	330c      	adds	r3, #12
 8007db4:	001a      	movs	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dba:	7812      	ldrb	r2, [r2, #0]
 8007dbc:	b2d2      	uxtb	r2, r2
 8007dbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2246      	movs	r2, #70	@ 0x46
 8007dce:	5a9b      	ldrh	r3, [r3, r2]
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	b299      	uxth	r1, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2246      	movs	r2, #70	@ 0x46
 8007dda:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007de0:	f7fb fd40 	bl	8003864 <HAL_GetTick>
 8007de4:	0002      	movs	r2, r0
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d802      	bhi.n	8007df6 <HAL_SPI_TransmitReceive+0x342>
 8007df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df2:	3301      	adds	r3, #1
 8007df4:	d102      	bne.n	8007dfc <HAL_SPI_TransmitReceive+0x348>
 8007df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d108      	bne.n	8007e0e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8007dfc:	2323      	movs	r3, #35	@ 0x23
 8007dfe:	18fb      	adds	r3, r7, r3
 8007e00:	2203      	movs	r2, #3
 8007e02:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	225d      	movs	r2, #93	@ 0x5d
 8007e08:	2101      	movs	r1, #1
 8007e0a:	5499      	strb	r1, [r3, r2]
        goto error;
 8007e0c:	e026      	b.n	8007e5c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d199      	bne.n	8007d4c <HAL_SPI_TransmitReceive+0x298>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2246      	movs	r2, #70	@ 0x46
 8007e1c:	5a9b      	ldrh	r3, [r3, r2]
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d193      	bne.n	8007d4c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e24:	69fa      	ldr	r2, [r7, #28]
 8007e26:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	0018      	movs	r0, r3
 8007e2c:	f000 f9b2 	bl	8008194 <SPI_EndRxTxTransaction>
 8007e30:	1e03      	subs	r3, r0, #0
 8007e32:	d006      	beq.n	8007e42 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8007e34:	2323      	movs	r3, #35	@ 0x23
 8007e36:	18fb      	adds	r3, r7, r3
 8007e38:	2201      	movs	r2, #1
 8007e3a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d004      	beq.n	8007e54 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8007e4a:	2323      	movs	r3, #35	@ 0x23
 8007e4c:	18fb      	adds	r3, r7, r3
 8007e4e:	2201      	movs	r2, #1
 8007e50:	701a      	strb	r2, [r3, #0]
 8007e52:	e003      	b.n	8007e5c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	225d      	movs	r2, #93	@ 0x5d
 8007e58:	2101      	movs	r1, #1
 8007e5a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	225c      	movs	r2, #92	@ 0x5c
 8007e60:	2100      	movs	r1, #0
 8007e62:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007e64:	2323      	movs	r3, #35	@ 0x23
 8007e66:	18fb      	adds	r3, r7, r3
 8007e68:	781b      	ldrb	r3, [r3, #0]
}
 8007e6a:	0018      	movs	r0, r3
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	b00a      	add	sp, #40	@ 0x28
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	46c0      	nop			@ (mov r8, r8)
 8007e74:	ffffefff 	.word	0xffffefff

08007e78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b088      	sub	sp, #32
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	1dfb      	adds	r3, r7, #7
 8007e86:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e88:	f7fb fcec 	bl	8003864 <HAL_GetTick>
 8007e8c:	0002      	movs	r2, r0
 8007e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e90:	1a9b      	subs	r3, r3, r2
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	18d3      	adds	r3, r2, r3
 8007e96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e98:	f7fb fce4 	bl	8003864 <HAL_GetTick>
 8007e9c:	0003      	movs	r3, r0
 8007e9e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ea0:	4b3a      	ldr	r3, [pc, #232]	@ (8007f8c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	015b      	lsls	r3, r3, #5
 8007ea6:	0d1b      	lsrs	r3, r3, #20
 8007ea8:	69fa      	ldr	r2, [r7, #28]
 8007eaa:	4353      	muls	r3, r2
 8007eac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007eae:	e058      	b.n	8007f62 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	d055      	beq.n	8007f62 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007eb6:	f7fb fcd5 	bl	8003864 <HAL_GetTick>
 8007eba:	0002      	movs	r2, r0
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	69fa      	ldr	r2, [r7, #28]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d902      	bls.n	8007ecc <SPI_WaitFlagStateUntilTimeout+0x54>
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d142      	bne.n	8007f52 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	21e0      	movs	r1, #224	@ 0xe0
 8007ed8:	438a      	bics	r2, r1
 8007eda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	2382      	movs	r3, #130	@ 0x82
 8007ee2:	005b      	lsls	r3, r3, #1
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d113      	bne.n	8007f10 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	2380      	movs	r3, #128	@ 0x80
 8007eee:	021b      	lsls	r3, r3, #8
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d005      	beq.n	8007f00 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	2380      	movs	r3, #128	@ 0x80
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d107      	bne.n	8007f10 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2140      	movs	r1, #64	@ 0x40
 8007f0c:	438a      	bics	r2, r1
 8007f0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f14:	2380      	movs	r3, #128	@ 0x80
 8007f16:	019b      	lsls	r3, r3, #6
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d110      	bne.n	8007f3e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	491a      	ldr	r1, [pc, #104]	@ (8007f90 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007f28:	400a      	ands	r2, r1
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2180      	movs	r1, #128	@ 0x80
 8007f38:	0189      	lsls	r1, r1, #6
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	225d      	movs	r2, #93	@ 0x5d
 8007f42:	2101      	movs	r1, #1
 8007f44:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	225c      	movs	r2, #92	@ 0x5c
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e017      	b.n	8007f82 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	425a      	negs	r2, r3
 8007f72:	4153      	adcs	r3, r2
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	001a      	movs	r2, r3
 8007f78:	1dfb      	adds	r3, r7, #7
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d197      	bne.n	8007eb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	0018      	movs	r0, r3
 8007f84:	46bd      	mov	sp, r7
 8007f86:	b008      	add	sp, #32
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	46c0      	nop			@ (mov r8, r8)
 8007f8c:	2000008c 	.word	0x2000008c
 8007f90:	ffffdfff 	.word	0xffffdfff

08007f94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b08a      	sub	sp, #40	@ 0x28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007fa2:	2317      	movs	r3, #23
 8007fa4:	18fb      	adds	r3, r7, r3
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007faa:	f7fb fc5b 	bl	8003864 <HAL_GetTick>
 8007fae:	0002      	movs	r2, r0
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb2:	1a9b      	subs	r3, r3, r2
 8007fb4:	683a      	ldr	r2, [r7, #0]
 8007fb6:	18d3      	adds	r3, r2, r3
 8007fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007fba:	f7fb fc53 	bl	8003864 <HAL_GetTick>
 8007fbe:	0003      	movs	r3, r0
 8007fc0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	330c      	adds	r3, #12
 8007fc8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007fca:	4b41      	ldr	r3, [pc, #260]	@ (80080d0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	0013      	movs	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	189b      	adds	r3, r3, r2
 8007fd4:	00da      	lsls	r2, r3, #3
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	0d1b      	lsrs	r3, r3, #20
 8007fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fdc:	4353      	muls	r3, r2
 8007fde:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007fe0:	e068      	b.n	80080b4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	23c0      	movs	r3, #192	@ 0xc0
 8007fe6:	00db      	lsls	r3, r3, #3
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d10a      	bne.n	8008002 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d107      	bne.n	8008002 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	2117      	movs	r1, #23
 8007ffa:	187b      	adds	r3, r7, r1
 8007ffc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007ffe:	187b      	adds	r3, r7, r1
 8008000:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	3301      	adds	r3, #1
 8008006:	d055      	beq.n	80080b4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008008:	f7fb fc2c 	bl	8003864 <HAL_GetTick>
 800800c:	0002      	movs	r2, r0
 800800e:	6a3b      	ldr	r3, [r7, #32]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008014:	429a      	cmp	r2, r3
 8008016:	d902      	bls.n	800801e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801a:	2b00      	cmp	r3, #0
 800801c:	d142      	bne.n	80080a4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	21e0      	movs	r1, #224	@ 0xe0
 800802a:	438a      	bics	r2, r1
 800802c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	2382      	movs	r3, #130	@ 0x82
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	429a      	cmp	r2, r3
 8008038:	d113      	bne.n	8008062 <SPI_WaitFifoStateUntilTimeout+0xce>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	2380      	movs	r3, #128	@ 0x80
 8008040:	021b      	lsls	r3, r3, #8
 8008042:	429a      	cmp	r2, r3
 8008044:	d005      	beq.n	8008052 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	2380      	movs	r3, #128	@ 0x80
 800804c:	00db      	lsls	r3, r3, #3
 800804e:	429a      	cmp	r2, r3
 8008050:	d107      	bne.n	8008062 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2140      	movs	r1, #64	@ 0x40
 800805e:	438a      	bics	r2, r1
 8008060:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008066:	2380      	movs	r3, #128	@ 0x80
 8008068:	019b      	lsls	r3, r3, #6
 800806a:	429a      	cmp	r2, r3
 800806c:	d110      	bne.n	8008090 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4916      	ldr	r1, [pc, #88]	@ (80080d4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800807a:	400a      	ands	r2, r1
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2180      	movs	r1, #128	@ 0x80
 800808a:	0189      	lsls	r1, r1, #6
 800808c:	430a      	orrs	r2, r1
 800808e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	225d      	movs	r2, #93	@ 0x5d
 8008094:	2101      	movs	r1, #1
 8008096:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	225c      	movs	r2, #92	@ 0x5c
 800809c:	2100      	movs	r1, #0
 800809e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e010      	b.n	80080c6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	4013      	ands	r3, r2
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d18e      	bne.n	8007fe2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	0018      	movs	r0, r3
 80080c8:	46bd      	mov	sp, r7
 80080ca:	b00a      	add	sp, #40	@ 0x28
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	46c0      	nop			@ (mov r8, r8)
 80080d0:	2000008c 	.word	0x2000008c
 80080d4:	ffffdfff 	.word	0xffffdfff

080080d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af02      	add	r7, sp, #8
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	2382      	movs	r3, #130	@ 0x82
 80080ea:	005b      	lsls	r3, r3, #1
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d113      	bne.n	8008118 <SPI_EndRxTransaction+0x40>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	689a      	ldr	r2, [r3, #8]
 80080f4:	2380      	movs	r3, #128	@ 0x80
 80080f6:	021b      	lsls	r3, r3, #8
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d005      	beq.n	8008108 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	689a      	ldr	r2, [r3, #8]
 8008100:	2380      	movs	r3, #128	@ 0x80
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	429a      	cmp	r2, r3
 8008106:	d107      	bne.n	8008118 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2140      	movs	r1, #64	@ 0x40
 8008114:	438a      	bics	r2, r1
 8008116:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	0013      	movs	r3, r2
 8008122:	2200      	movs	r2, #0
 8008124:	2180      	movs	r1, #128	@ 0x80
 8008126:	f7ff fea7 	bl	8007e78 <SPI_WaitFlagStateUntilTimeout>
 800812a:	1e03      	subs	r3, r0, #0
 800812c:	d007      	beq.n	800813e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008132:	2220      	movs	r2, #32
 8008134:	431a      	orrs	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e026      	b.n	800818c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	2382      	movs	r3, #130	@ 0x82
 8008144:	005b      	lsls	r3, r3, #1
 8008146:	429a      	cmp	r2, r3
 8008148:	d11f      	bne.n	800818a <SPI_EndRxTransaction+0xb2>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	689a      	ldr	r2, [r3, #8]
 800814e:	2380      	movs	r3, #128	@ 0x80
 8008150:	021b      	lsls	r3, r3, #8
 8008152:	429a      	cmp	r2, r3
 8008154:	d005      	beq.n	8008162 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	689a      	ldr	r2, [r3, #8]
 800815a:	2380      	movs	r3, #128	@ 0x80
 800815c:	00db      	lsls	r3, r3, #3
 800815e:	429a      	cmp	r2, r3
 8008160:	d113      	bne.n	800818a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	23c0      	movs	r3, #192	@ 0xc0
 8008166:	00d9      	lsls	r1, r3, #3
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	0013      	movs	r3, r2
 8008170:	2200      	movs	r2, #0
 8008172:	f7ff ff0f 	bl	8007f94 <SPI_WaitFifoStateUntilTimeout>
 8008176:	1e03      	subs	r3, r0, #0
 8008178:	d007      	beq.n	800818a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800817e:	2220      	movs	r2, #32
 8008180:	431a      	orrs	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e000      	b.n	800818c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	0018      	movs	r0, r3
 800818e:	46bd      	mov	sp, r7
 8008190:	b004      	add	sp, #16
 8008192:	bd80      	pop	{r7, pc}

08008194 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af02      	add	r7, sp, #8
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	23c0      	movs	r3, #192	@ 0xc0
 80081a4:	0159      	lsls	r1, r3, #5
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	0013      	movs	r3, r2
 80081ae:	2200      	movs	r2, #0
 80081b0:	f7ff fef0 	bl	8007f94 <SPI_WaitFifoStateUntilTimeout>
 80081b4:	1e03      	subs	r3, r0, #0
 80081b6:	d007      	beq.n	80081c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081bc:	2220      	movs	r2, #32
 80081be:	431a      	orrs	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e027      	b.n	8008218 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	0013      	movs	r3, r2
 80081d2:	2200      	movs	r2, #0
 80081d4:	2180      	movs	r1, #128	@ 0x80
 80081d6:	f7ff fe4f 	bl	8007e78 <SPI_WaitFlagStateUntilTimeout>
 80081da:	1e03      	subs	r3, r0, #0
 80081dc:	d007      	beq.n	80081ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081e2:	2220      	movs	r2, #32
 80081e4:	431a      	orrs	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e014      	b.n	8008218 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	23c0      	movs	r3, #192	@ 0xc0
 80081f2:	00d9      	lsls	r1, r3, #3
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	0013      	movs	r3, r2
 80081fc:	2200      	movs	r2, #0
 80081fe:	f7ff fec9 	bl	8007f94 <SPI_WaitFifoStateUntilTimeout>
 8008202:	1e03      	subs	r3, r0, #0
 8008204:	d007      	beq.n	8008216 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800820a:	2220      	movs	r2, #32
 800820c:	431a      	orrs	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e000      	b.n	8008218 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	0018      	movs	r0, r3
 800821a:	46bd      	mov	sp, r7
 800821c:	b004      	add	sp, #16
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e04a      	b.n	80082c8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	223d      	movs	r2, #61	@ 0x3d
 8008236:	5c9b      	ldrb	r3, [r3, r2]
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d107      	bne.n	800824e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	223c      	movs	r2, #60	@ 0x3c
 8008242:	2100      	movs	r1, #0
 8008244:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	0018      	movs	r0, r3
 800824a:	f7fb f96d 	bl	8003528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	223d      	movs	r2, #61	@ 0x3d
 8008252:	2102      	movs	r1, #2
 8008254:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	3304      	adds	r3, #4
 800825e:	0019      	movs	r1, r3
 8008260:	0010      	movs	r0, r2
 8008262:	f000 fc87 	bl	8008b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2248      	movs	r2, #72	@ 0x48
 800826a:	2101      	movs	r1, #1
 800826c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	223e      	movs	r2, #62	@ 0x3e
 8008272:	2101      	movs	r1, #1
 8008274:	5499      	strb	r1, [r3, r2]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	223f      	movs	r2, #63	@ 0x3f
 800827a:	2101      	movs	r1, #1
 800827c:	5499      	strb	r1, [r3, r2]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2240      	movs	r2, #64	@ 0x40
 8008282:	2101      	movs	r1, #1
 8008284:	5499      	strb	r1, [r3, r2]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2241      	movs	r2, #65	@ 0x41
 800828a:	2101      	movs	r1, #1
 800828c:	5499      	strb	r1, [r3, r2]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2242      	movs	r2, #66	@ 0x42
 8008292:	2101      	movs	r1, #1
 8008294:	5499      	strb	r1, [r3, r2]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2243      	movs	r2, #67	@ 0x43
 800829a:	2101      	movs	r1, #1
 800829c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2244      	movs	r2, #68	@ 0x44
 80082a2:	2101      	movs	r1, #1
 80082a4:	5499      	strb	r1, [r3, r2]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2245      	movs	r2, #69	@ 0x45
 80082aa:	2101      	movs	r1, #1
 80082ac:	5499      	strb	r1, [r3, r2]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2246      	movs	r2, #70	@ 0x46
 80082b2:	2101      	movs	r1, #1
 80082b4:	5499      	strb	r1, [r3, r2]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2247      	movs	r2, #71	@ 0x47
 80082ba:	2101      	movs	r1, #1
 80082bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	223d      	movs	r2, #61	@ 0x3d
 80082c2:	2101      	movs	r1, #1
 80082c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	0018      	movs	r0, r3
 80082ca:	46bd      	mov	sp, r7
 80082cc:	b002      	add	sp, #8
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	223d      	movs	r2, #61	@ 0x3d
 80082dc:	5c9b      	ldrb	r3, [r3, r2]
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d001      	beq.n	80082e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e035      	b.n	8008354 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	223d      	movs	r2, #61	@ 0x3d
 80082ec:	2102      	movs	r1, #2
 80082ee:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a19      	ldr	r2, [pc, #100]	@ (800835c <HAL_TIM_Base_Start+0x8c>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d00a      	beq.n	8008310 <HAL_TIM_Base_Start+0x40>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	2380      	movs	r3, #128	@ 0x80
 8008300:	05db      	lsls	r3, r3, #23
 8008302:	429a      	cmp	r2, r3
 8008304:	d004      	beq.n	8008310 <HAL_TIM_Base_Start+0x40>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a15      	ldr	r2, [pc, #84]	@ (8008360 <HAL_TIM_Base_Start+0x90>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d116      	bne.n	800833e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	4a13      	ldr	r2, [pc, #76]	@ (8008364 <HAL_TIM_Base_Start+0x94>)
 8008318:	4013      	ands	r3, r2
 800831a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2b06      	cmp	r3, #6
 8008320:	d016      	beq.n	8008350 <HAL_TIM_Base_Start+0x80>
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	2380      	movs	r3, #128	@ 0x80
 8008326:	025b      	lsls	r3, r3, #9
 8008328:	429a      	cmp	r2, r3
 800832a:	d011      	beq.n	8008350 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2101      	movs	r1, #1
 8008338:	430a      	orrs	r2, r1
 800833a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800833c:	e008      	b.n	8008350 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2101      	movs	r1, #1
 800834a:	430a      	orrs	r2, r1
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	e000      	b.n	8008352 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008350:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	0018      	movs	r0, r3
 8008356:	46bd      	mov	sp, r7
 8008358:	b004      	add	sp, #16
 800835a:	bd80      	pop	{r7, pc}
 800835c:	40012c00 	.word	0x40012c00
 8008360:	40000400 	.word	0x40000400
 8008364:	00010007 	.word	0x00010007

08008368 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	4a0d      	ldr	r2, [pc, #52]	@ (80083ac <HAL_TIM_Base_Stop+0x44>)
 8008378:	4013      	ands	r3, r2
 800837a:	d10d      	bne.n	8008398 <HAL_TIM_Base_Stop+0x30>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	4a0b      	ldr	r2, [pc, #44]	@ (80083b0 <HAL_TIM_Base_Stop+0x48>)
 8008384:	4013      	ands	r3, r2
 8008386:	d107      	bne.n	8008398 <HAL_TIM_Base_Stop+0x30>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2101      	movs	r1, #1
 8008394:	438a      	bics	r2, r1
 8008396:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	223d      	movs	r2, #61	@ 0x3d
 800839c:	2101      	movs	r1, #1
 800839e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	0018      	movs	r0, r3
 80083a4:	46bd      	mov	sp, r7
 80083a6:	b002      	add	sp, #8
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	46c0      	nop			@ (mov r8, r8)
 80083ac:	00001111 	.word	0x00001111
 80083b0:	00000444 	.word	0x00000444

080083b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	223d      	movs	r2, #61	@ 0x3d
 80083c0:	5c9b      	ldrb	r3, [r3, r2]
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d001      	beq.n	80083cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e03d      	b.n	8008448 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	223d      	movs	r2, #61	@ 0x3d
 80083d0:	2102      	movs	r1, #2
 80083d2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68da      	ldr	r2, [r3, #12]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2101      	movs	r1, #1
 80083e0:	430a      	orrs	r2, r1
 80083e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a19      	ldr	r2, [pc, #100]	@ (8008450 <HAL_TIM_Base_Start_IT+0x9c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d00a      	beq.n	8008404 <HAL_TIM_Base_Start_IT+0x50>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	2380      	movs	r3, #128	@ 0x80
 80083f4:	05db      	lsls	r3, r3, #23
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d004      	beq.n	8008404 <HAL_TIM_Base_Start_IT+0x50>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a15      	ldr	r2, [pc, #84]	@ (8008454 <HAL_TIM_Base_Start_IT+0xa0>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d116      	bne.n	8008432 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	4a13      	ldr	r2, [pc, #76]	@ (8008458 <HAL_TIM_Base_Start_IT+0xa4>)
 800840c:	4013      	ands	r3, r2
 800840e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2b06      	cmp	r3, #6
 8008414:	d016      	beq.n	8008444 <HAL_TIM_Base_Start_IT+0x90>
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	2380      	movs	r3, #128	@ 0x80
 800841a:	025b      	lsls	r3, r3, #9
 800841c:	429a      	cmp	r2, r3
 800841e:	d011      	beq.n	8008444 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2101      	movs	r1, #1
 800842c:	430a      	orrs	r2, r1
 800842e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008430:	e008      	b.n	8008444 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2101      	movs	r1, #1
 800843e:	430a      	orrs	r2, r1
 8008440:	601a      	str	r2, [r3, #0]
 8008442:	e000      	b.n	8008446 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008444:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	0018      	movs	r0, r3
 800844a:	46bd      	mov	sp, r7
 800844c:	b004      	add	sp, #16
 800844e:	bd80      	pop	{r7, pc}
 8008450:	40012c00 	.word	0x40012c00
 8008454:	40000400 	.word	0x40000400
 8008458:	00010007 	.word	0x00010007

0800845c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68da      	ldr	r2, [r3, #12]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2101      	movs	r1, #1
 8008470:	438a      	bics	r2, r1
 8008472:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	4a0d      	ldr	r2, [pc, #52]	@ (80084b0 <HAL_TIM_Base_Stop_IT+0x54>)
 800847c:	4013      	ands	r3, r2
 800847e:	d10d      	bne.n	800849c <HAL_TIM_Base_Stop_IT+0x40>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	4a0b      	ldr	r2, [pc, #44]	@ (80084b4 <HAL_TIM_Base_Stop_IT+0x58>)
 8008488:	4013      	ands	r3, r2
 800848a:	d107      	bne.n	800849c <HAL_TIM_Base_Stop_IT+0x40>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2101      	movs	r1, #1
 8008498:	438a      	bics	r2, r1
 800849a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	223d      	movs	r2, #61	@ 0x3d
 80084a0:	2101      	movs	r1, #1
 80084a2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	0018      	movs	r0, r3
 80084a8:	46bd      	mov	sp, r7
 80084aa:	b002      	add	sp, #8
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	46c0      	nop			@ (mov r8, r8)
 80084b0:	00001111 	.word	0x00001111
 80084b4:	00000444 	.word	0x00000444

080084b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e04a      	b.n	8008560 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	223d      	movs	r2, #61	@ 0x3d
 80084ce:	5c9b      	ldrb	r3, [r3, r2]
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d107      	bne.n	80084e6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	223c      	movs	r2, #60	@ 0x3c
 80084da:	2100      	movs	r1, #0
 80084dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	0018      	movs	r0, r3
 80084e2:	f7fb f805 	bl	80034f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	223d      	movs	r2, #61	@ 0x3d
 80084ea:	2102      	movs	r1, #2
 80084ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3304      	adds	r3, #4
 80084f6:	0019      	movs	r1, r3
 80084f8:	0010      	movs	r0, r2
 80084fa:	f000 fb3b 	bl	8008b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2248      	movs	r2, #72	@ 0x48
 8008502:	2101      	movs	r1, #1
 8008504:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	223e      	movs	r2, #62	@ 0x3e
 800850a:	2101      	movs	r1, #1
 800850c:	5499      	strb	r1, [r3, r2]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	223f      	movs	r2, #63	@ 0x3f
 8008512:	2101      	movs	r1, #1
 8008514:	5499      	strb	r1, [r3, r2]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2240      	movs	r2, #64	@ 0x40
 800851a:	2101      	movs	r1, #1
 800851c:	5499      	strb	r1, [r3, r2]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2241      	movs	r2, #65	@ 0x41
 8008522:	2101      	movs	r1, #1
 8008524:	5499      	strb	r1, [r3, r2]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2242      	movs	r2, #66	@ 0x42
 800852a:	2101      	movs	r1, #1
 800852c:	5499      	strb	r1, [r3, r2]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2243      	movs	r2, #67	@ 0x43
 8008532:	2101      	movs	r1, #1
 8008534:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2244      	movs	r2, #68	@ 0x44
 800853a:	2101      	movs	r1, #1
 800853c:	5499      	strb	r1, [r3, r2]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2245      	movs	r2, #69	@ 0x45
 8008542:	2101      	movs	r1, #1
 8008544:	5499      	strb	r1, [r3, r2]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2246      	movs	r2, #70	@ 0x46
 800854a:	2101      	movs	r1, #1
 800854c:	5499      	strb	r1, [r3, r2]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2247      	movs	r2, #71	@ 0x47
 8008552:	2101      	movs	r1, #1
 8008554:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	223d      	movs	r2, #61	@ 0x3d
 800855a:	2101      	movs	r1, #1
 800855c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	0018      	movs	r0, r3
 8008562:	46bd      	mov	sp, r7
 8008564:	b002      	add	sp, #8
 8008566:	bd80      	pop	{r7, pc}

08008568 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d108      	bne.n	800858a <HAL_TIM_PWM_Start+0x22>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	223e      	movs	r2, #62	@ 0x3e
 800857c:	5c9b      	ldrb	r3, [r3, r2]
 800857e:	b2db      	uxtb	r3, r3
 8008580:	3b01      	subs	r3, #1
 8008582:	1e5a      	subs	r2, r3, #1
 8008584:	4193      	sbcs	r3, r2
 8008586:	b2db      	uxtb	r3, r3
 8008588:	e037      	b.n	80085fa <HAL_TIM_PWM_Start+0x92>
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b04      	cmp	r3, #4
 800858e:	d108      	bne.n	80085a2 <HAL_TIM_PWM_Start+0x3a>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	223f      	movs	r2, #63	@ 0x3f
 8008594:	5c9b      	ldrb	r3, [r3, r2]
 8008596:	b2db      	uxtb	r3, r3
 8008598:	3b01      	subs	r3, #1
 800859a:	1e5a      	subs	r2, r3, #1
 800859c:	4193      	sbcs	r3, r2
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	e02b      	b.n	80085fa <HAL_TIM_PWM_Start+0x92>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b08      	cmp	r3, #8
 80085a6:	d108      	bne.n	80085ba <HAL_TIM_PWM_Start+0x52>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2240      	movs	r2, #64	@ 0x40
 80085ac:	5c9b      	ldrb	r3, [r3, r2]
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	3b01      	subs	r3, #1
 80085b2:	1e5a      	subs	r2, r3, #1
 80085b4:	4193      	sbcs	r3, r2
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	e01f      	b.n	80085fa <HAL_TIM_PWM_Start+0x92>
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2b0c      	cmp	r3, #12
 80085be:	d108      	bne.n	80085d2 <HAL_TIM_PWM_Start+0x6a>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2241      	movs	r2, #65	@ 0x41
 80085c4:	5c9b      	ldrb	r3, [r3, r2]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	3b01      	subs	r3, #1
 80085ca:	1e5a      	subs	r2, r3, #1
 80085cc:	4193      	sbcs	r3, r2
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	e013      	b.n	80085fa <HAL_TIM_PWM_Start+0x92>
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b10      	cmp	r3, #16
 80085d6:	d108      	bne.n	80085ea <HAL_TIM_PWM_Start+0x82>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2242      	movs	r2, #66	@ 0x42
 80085dc:	5c9b      	ldrb	r3, [r3, r2]
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	3b01      	subs	r3, #1
 80085e2:	1e5a      	subs	r2, r3, #1
 80085e4:	4193      	sbcs	r3, r2
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	e007      	b.n	80085fa <HAL_TIM_PWM_Start+0x92>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2243      	movs	r2, #67	@ 0x43
 80085ee:	5c9b      	ldrb	r3, [r3, r2]
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	3b01      	subs	r3, #1
 80085f4:	1e5a      	subs	r2, r3, #1
 80085f6:	4193      	sbcs	r3, r2
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e081      	b.n	8008706 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d104      	bne.n	8008612 <HAL_TIM_PWM_Start+0xaa>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	223e      	movs	r2, #62	@ 0x3e
 800860c:	2102      	movs	r1, #2
 800860e:	5499      	strb	r1, [r3, r2]
 8008610:	e023      	b.n	800865a <HAL_TIM_PWM_Start+0xf2>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b04      	cmp	r3, #4
 8008616:	d104      	bne.n	8008622 <HAL_TIM_PWM_Start+0xba>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	223f      	movs	r2, #63	@ 0x3f
 800861c:	2102      	movs	r1, #2
 800861e:	5499      	strb	r1, [r3, r2]
 8008620:	e01b      	b.n	800865a <HAL_TIM_PWM_Start+0xf2>
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	2b08      	cmp	r3, #8
 8008626:	d104      	bne.n	8008632 <HAL_TIM_PWM_Start+0xca>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2240      	movs	r2, #64	@ 0x40
 800862c:	2102      	movs	r1, #2
 800862e:	5499      	strb	r1, [r3, r2]
 8008630:	e013      	b.n	800865a <HAL_TIM_PWM_Start+0xf2>
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2b0c      	cmp	r3, #12
 8008636:	d104      	bne.n	8008642 <HAL_TIM_PWM_Start+0xda>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2241      	movs	r2, #65	@ 0x41
 800863c:	2102      	movs	r1, #2
 800863e:	5499      	strb	r1, [r3, r2]
 8008640:	e00b      	b.n	800865a <HAL_TIM_PWM_Start+0xf2>
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b10      	cmp	r3, #16
 8008646:	d104      	bne.n	8008652 <HAL_TIM_PWM_Start+0xea>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2242      	movs	r2, #66	@ 0x42
 800864c:	2102      	movs	r1, #2
 800864e:	5499      	strb	r1, [r3, r2]
 8008650:	e003      	b.n	800865a <HAL_TIM_PWM_Start+0xf2>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2243      	movs	r2, #67	@ 0x43
 8008656:	2102      	movs	r1, #2
 8008658:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	2201      	movs	r2, #1
 8008662:	0018      	movs	r0, r3
 8008664:	f000 fda6 	bl	80091b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a28      	ldr	r2, [pc, #160]	@ (8008710 <HAL_TIM_PWM_Start+0x1a8>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d009      	beq.n	8008686 <HAL_TIM_PWM_Start+0x11e>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a27      	ldr	r2, [pc, #156]	@ (8008714 <HAL_TIM_PWM_Start+0x1ac>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d004      	beq.n	8008686 <HAL_TIM_PWM_Start+0x11e>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a25      	ldr	r2, [pc, #148]	@ (8008718 <HAL_TIM_PWM_Start+0x1b0>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d101      	bne.n	800868a <HAL_TIM_PWM_Start+0x122>
 8008686:	2301      	movs	r3, #1
 8008688:	e000      	b.n	800868c <HAL_TIM_PWM_Start+0x124>
 800868a:	2300      	movs	r3, #0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d008      	beq.n	80086a2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2180      	movs	r1, #128	@ 0x80
 800869c:	0209      	lsls	r1, r1, #8
 800869e:	430a      	orrs	r2, r1
 80086a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a1a      	ldr	r2, [pc, #104]	@ (8008710 <HAL_TIM_PWM_Start+0x1a8>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d00a      	beq.n	80086c2 <HAL_TIM_PWM_Start+0x15a>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	2380      	movs	r3, #128	@ 0x80
 80086b2:	05db      	lsls	r3, r3, #23
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d004      	beq.n	80086c2 <HAL_TIM_PWM_Start+0x15a>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a17      	ldr	r2, [pc, #92]	@ (800871c <HAL_TIM_PWM_Start+0x1b4>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d116      	bne.n	80086f0 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	4a15      	ldr	r2, [pc, #84]	@ (8008720 <HAL_TIM_PWM_Start+0x1b8>)
 80086ca:	4013      	ands	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b06      	cmp	r3, #6
 80086d2:	d016      	beq.n	8008702 <HAL_TIM_PWM_Start+0x19a>
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	2380      	movs	r3, #128	@ 0x80
 80086d8:	025b      	lsls	r3, r3, #9
 80086da:	429a      	cmp	r2, r3
 80086dc:	d011      	beq.n	8008702 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2101      	movs	r1, #1
 80086ea:	430a      	orrs	r2, r1
 80086ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ee:	e008      	b.n	8008702 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2101      	movs	r1, #1
 80086fc:	430a      	orrs	r2, r1
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	e000      	b.n	8008704 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008702:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	0018      	movs	r0, r3
 8008708:	46bd      	mov	sp, r7
 800870a:	b004      	add	sp, #16
 800870c:	bd80      	pop	{r7, pc}
 800870e:	46c0      	nop			@ (mov r8, r8)
 8008710:	40012c00 	.word	0x40012c00
 8008714:	40014400 	.word	0x40014400
 8008718:	40014800 	.word	0x40014800
 800871c:	40000400 	.word	0x40000400
 8008720:	00010007 	.word	0x00010007

08008724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2202      	movs	r2, #2
 8008740:	4013      	ands	r3, r2
 8008742:	d021      	beq.n	8008788 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2202      	movs	r2, #2
 8008748:	4013      	ands	r3, r2
 800874a:	d01d      	beq.n	8008788 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2203      	movs	r2, #3
 8008752:	4252      	negs	r2, r2
 8008754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	2203      	movs	r2, #3
 8008764:	4013      	ands	r3, r2
 8008766:	d004      	beq.n	8008772 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	0018      	movs	r0, r3
 800876c:	f000 f9ea 	bl	8008b44 <HAL_TIM_IC_CaptureCallback>
 8008770:	e007      	b.n	8008782 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	0018      	movs	r0, r3
 8008776:	f000 f9dd 	bl	8008b34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	0018      	movs	r0, r3
 800877e:	f000 f9e9 	bl	8008b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	2204      	movs	r2, #4
 800878c:	4013      	ands	r3, r2
 800878e:	d022      	beq.n	80087d6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2204      	movs	r2, #4
 8008794:	4013      	ands	r3, r2
 8008796:	d01e      	beq.n	80087d6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2205      	movs	r2, #5
 800879e:	4252      	negs	r2, r2
 80087a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2202      	movs	r2, #2
 80087a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	699a      	ldr	r2, [r3, #24]
 80087ae:	23c0      	movs	r3, #192	@ 0xc0
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4013      	ands	r3, r2
 80087b4:	d004      	beq.n	80087c0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	0018      	movs	r0, r3
 80087ba:	f000 f9c3 	bl	8008b44 <HAL_TIM_IC_CaptureCallback>
 80087be:	e007      	b.n	80087d0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	0018      	movs	r0, r3
 80087c4:	f000 f9b6 	bl	8008b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	0018      	movs	r0, r3
 80087cc:	f000 f9c2 	bl	8008b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2208      	movs	r2, #8
 80087da:	4013      	ands	r3, r2
 80087dc:	d021      	beq.n	8008822 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2208      	movs	r2, #8
 80087e2:	4013      	ands	r3, r2
 80087e4:	d01d      	beq.n	8008822 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2209      	movs	r2, #9
 80087ec:	4252      	negs	r2, r2
 80087ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2204      	movs	r2, #4
 80087f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	69db      	ldr	r3, [r3, #28]
 80087fc:	2203      	movs	r2, #3
 80087fe:	4013      	ands	r3, r2
 8008800:	d004      	beq.n	800880c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	0018      	movs	r0, r3
 8008806:	f000 f99d 	bl	8008b44 <HAL_TIM_IC_CaptureCallback>
 800880a:	e007      	b.n	800881c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	0018      	movs	r0, r3
 8008810:	f000 f990 	bl	8008b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	0018      	movs	r0, r3
 8008818:	f000 f99c 	bl	8008b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2210      	movs	r2, #16
 8008826:	4013      	ands	r3, r2
 8008828:	d022      	beq.n	8008870 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2210      	movs	r2, #16
 800882e:	4013      	ands	r3, r2
 8008830:	d01e      	beq.n	8008870 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2211      	movs	r2, #17
 8008838:	4252      	negs	r2, r2
 800883a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2208      	movs	r2, #8
 8008840:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	69da      	ldr	r2, [r3, #28]
 8008848:	23c0      	movs	r3, #192	@ 0xc0
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4013      	ands	r3, r2
 800884e:	d004      	beq.n	800885a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	0018      	movs	r0, r3
 8008854:	f000 f976 	bl	8008b44 <HAL_TIM_IC_CaptureCallback>
 8008858:	e007      	b.n	800886a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	0018      	movs	r0, r3
 800885e:	f000 f969 	bl	8008b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	0018      	movs	r0, r3
 8008866:	f000 f975 	bl	8008b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	2201      	movs	r2, #1
 8008874:	4013      	ands	r3, r2
 8008876:	d00c      	beq.n	8008892 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2201      	movs	r2, #1
 800887c:	4013      	ands	r3, r2
 800887e:	d008      	beq.n	8008892 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2202      	movs	r2, #2
 8008886:	4252      	negs	r2, r2
 8008888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	0018      	movs	r0, r3
 800888e:	f7f9 fde5 	bl	800245c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	2280      	movs	r2, #128	@ 0x80
 8008896:	4013      	ands	r3, r2
 8008898:	d104      	bne.n	80088a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	2380      	movs	r3, #128	@ 0x80
 800889e:	019b      	lsls	r3, r3, #6
 80088a0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80088a2:	d00b      	beq.n	80088bc <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2280      	movs	r2, #128	@ 0x80
 80088a8:	4013      	ands	r3, r2
 80088aa:	d007      	beq.n	80088bc <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a1e      	ldr	r2, [pc, #120]	@ (800892c <HAL_TIM_IRQHandler+0x208>)
 80088b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	0018      	movs	r0, r3
 80088b8:	f000 fd10 	bl	80092dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	2380      	movs	r3, #128	@ 0x80
 80088c0:	005b      	lsls	r3, r3, #1
 80088c2:	4013      	ands	r3, r2
 80088c4:	d00b      	beq.n	80088de <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2280      	movs	r2, #128	@ 0x80
 80088ca:	4013      	ands	r3, r2
 80088cc:	d007      	beq.n	80088de <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a17      	ldr	r2, [pc, #92]	@ (8008930 <HAL_TIM_IRQHandler+0x20c>)
 80088d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	0018      	movs	r0, r3
 80088da:	f000 fd07 	bl	80092ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2240      	movs	r2, #64	@ 0x40
 80088e2:	4013      	ands	r3, r2
 80088e4:	d00c      	beq.n	8008900 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2240      	movs	r2, #64	@ 0x40
 80088ea:	4013      	ands	r3, r2
 80088ec:	d008      	beq.n	8008900 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2241      	movs	r2, #65	@ 0x41
 80088f4:	4252      	negs	r2, r2
 80088f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	0018      	movs	r0, r3
 80088fc:	f000 f932 	bl	8008b64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2220      	movs	r2, #32
 8008904:	4013      	ands	r3, r2
 8008906:	d00c      	beq.n	8008922 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2220      	movs	r2, #32
 800890c:	4013      	ands	r3, r2
 800890e:	d008      	beq.n	8008922 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2221      	movs	r2, #33	@ 0x21
 8008916:	4252      	negs	r2, r2
 8008918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	0018      	movs	r0, r3
 800891e:	f000 fcd5 	bl	80092cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008922:	46c0      	nop			@ (mov r8, r8)
 8008924:	46bd      	mov	sp, r7
 8008926:	b004      	add	sp, #16
 8008928:	bd80      	pop	{r7, pc}
 800892a:	46c0      	nop			@ (mov r8, r8)
 800892c:	ffffdf7f 	.word	0xffffdf7f
 8008930:	fffffeff 	.word	0xfffffeff

08008934 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008940:	2317      	movs	r3, #23
 8008942:	18fb      	adds	r3, r7, r3
 8008944:	2200      	movs	r2, #0
 8008946:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	223c      	movs	r2, #60	@ 0x3c
 800894c:	5c9b      	ldrb	r3, [r3, r2]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d101      	bne.n	8008956 <HAL_TIM_PWM_ConfigChannel+0x22>
 8008952:	2302      	movs	r3, #2
 8008954:	e0e5      	b.n	8008b22 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	223c      	movs	r2, #60	@ 0x3c
 800895a:	2101      	movs	r1, #1
 800895c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b14      	cmp	r3, #20
 8008962:	d900      	bls.n	8008966 <HAL_TIM_PWM_ConfigChannel+0x32>
 8008964:	e0d1      	b.n	8008b0a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	009a      	lsls	r2, r3, #2
 800896a:	4b70      	ldr	r3, [pc, #448]	@ (8008b2c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800896c:	18d3      	adds	r3, r2, r3
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	0011      	movs	r1, r2
 800897a:	0018      	movs	r0, r3
 800897c:	f000 f97e 	bl	8008c7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	699a      	ldr	r2, [r3, #24]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2108      	movs	r1, #8
 800898c:	430a      	orrs	r2, r1
 800898e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	699a      	ldr	r2, [r3, #24]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2104      	movs	r1, #4
 800899c:	438a      	bics	r2, r1
 800899e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6999      	ldr	r1, [r3, #24]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	691a      	ldr	r2, [r3, #16]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	619a      	str	r2, [r3, #24]
      break;
 80089b2:	e0af      	b.n	8008b14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	0011      	movs	r1, r2
 80089bc:	0018      	movs	r0, r3
 80089be:	f000 f9dd 	bl	8008d7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	699a      	ldr	r2, [r3, #24]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2180      	movs	r1, #128	@ 0x80
 80089ce:	0109      	lsls	r1, r1, #4
 80089d0:	430a      	orrs	r2, r1
 80089d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	699a      	ldr	r2, [r3, #24]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4954      	ldr	r1, [pc, #336]	@ (8008b30 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80089e0:	400a      	ands	r2, r1
 80089e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6999      	ldr	r1, [r3, #24]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	021a      	lsls	r2, r3, #8
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	619a      	str	r2, [r3, #24]
      break;
 80089f8:	e08c      	b.n	8008b14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	0011      	movs	r1, r2
 8008a02:	0018      	movs	r0, r3
 8008a04:	f000 fa38 	bl	8008e78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	69da      	ldr	r2, [r3, #28]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2108      	movs	r1, #8
 8008a14:	430a      	orrs	r2, r1
 8008a16:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	69da      	ldr	r2, [r3, #28]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2104      	movs	r1, #4
 8008a24:	438a      	bics	r2, r1
 8008a26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	69d9      	ldr	r1, [r3, #28]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	691a      	ldr	r2, [r3, #16]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	430a      	orrs	r2, r1
 8008a38:	61da      	str	r2, [r3, #28]
      break;
 8008a3a:	e06b      	b.n	8008b14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	0011      	movs	r1, r2
 8008a44:	0018      	movs	r0, r3
 8008a46:	f000 fa99 	bl	8008f7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	69da      	ldr	r2, [r3, #28]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2180      	movs	r1, #128	@ 0x80
 8008a56:	0109      	lsls	r1, r1, #4
 8008a58:	430a      	orrs	r2, r1
 8008a5a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	69da      	ldr	r2, [r3, #28]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4932      	ldr	r1, [pc, #200]	@ (8008b30 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008a68:	400a      	ands	r2, r1
 8008a6a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	69d9      	ldr	r1, [r3, #28]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	021a      	lsls	r2, r3, #8
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	61da      	str	r2, [r3, #28]
      break;
 8008a80:	e048      	b.n	8008b14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	0011      	movs	r1, r2
 8008a8a:	0018      	movs	r0, r3
 8008a8c:	f000 fada 	bl	8009044 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2108      	movs	r1, #8
 8008a9c:	430a      	orrs	r2, r1
 8008a9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2104      	movs	r1, #4
 8008aac:	438a      	bics	r2, r1
 8008aae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	691a      	ldr	r2, [r3, #16]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008ac2:	e027      	b.n	8008b14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	0011      	movs	r1, r2
 8008acc:	0018      	movs	r0, r3
 8008ace:	f000 fb13 	bl	80090f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2180      	movs	r1, #128	@ 0x80
 8008ade:	0109      	lsls	r1, r1, #4
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4910      	ldr	r1, [pc, #64]	@ (8008b30 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008af0:	400a      	ands	r2, r1
 8008af2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	021a      	lsls	r2, r3, #8
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	430a      	orrs	r2, r1
 8008b06:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008b08:	e004      	b.n	8008b14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8008b0a:	2317      	movs	r3, #23
 8008b0c:	18fb      	adds	r3, r7, r3
 8008b0e:	2201      	movs	r2, #1
 8008b10:	701a      	strb	r2, [r3, #0]
      break;
 8008b12:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	223c      	movs	r2, #60	@ 0x3c
 8008b18:	2100      	movs	r1, #0
 8008b1a:	5499      	strb	r1, [r3, r2]

  return status;
 8008b1c:	2317      	movs	r3, #23
 8008b1e:	18fb      	adds	r3, r7, r3
 8008b20:	781b      	ldrb	r3, [r3, #0]
}
 8008b22:	0018      	movs	r0, r3
 8008b24:	46bd      	mov	sp, r7
 8008b26:	b006      	add	sp, #24
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	46c0      	nop			@ (mov r8, r8)
 8008b2c:	08009420 	.word	0x08009420
 8008b30:	fffffbff 	.word	0xfffffbff

08008b34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b3c:	46c0      	nop			@ (mov r8, r8)
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	b002      	add	sp, #8
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b4c:	46c0      	nop			@ (mov r8, r8)
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	b002      	add	sp, #8
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b5c:	46c0      	nop			@ (mov r8, r8)
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	b002      	add	sp, #8
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b6c:	46c0      	nop			@ (mov r8, r8)
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	b002      	add	sp, #8
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a37      	ldr	r2, [pc, #220]	@ (8008c64 <TIM_Base_SetConfig+0xf0>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d008      	beq.n	8008b9e <TIM_Base_SetConfig+0x2a>
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	2380      	movs	r3, #128	@ 0x80
 8008b90:	05db      	lsls	r3, r3, #23
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d003      	beq.n	8008b9e <TIM_Base_SetConfig+0x2a>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a33      	ldr	r2, [pc, #204]	@ (8008c68 <TIM_Base_SetConfig+0xf4>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d108      	bne.n	8008bb0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2270      	movs	r2, #112	@ 0x70
 8008ba2:	4393      	bics	r3, r2
 8008ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8008c64 <TIM_Base_SetConfig+0xf0>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d014      	beq.n	8008be2 <TIM_Base_SetConfig+0x6e>
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	2380      	movs	r3, #128	@ 0x80
 8008bbc:	05db      	lsls	r3, r3, #23
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d00f      	beq.n	8008be2 <TIM_Base_SetConfig+0x6e>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a28      	ldr	r2, [pc, #160]	@ (8008c68 <TIM_Base_SetConfig+0xf4>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d00b      	beq.n	8008be2 <TIM_Base_SetConfig+0x6e>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a27      	ldr	r2, [pc, #156]	@ (8008c6c <TIM_Base_SetConfig+0xf8>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d007      	beq.n	8008be2 <TIM_Base_SetConfig+0x6e>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a26      	ldr	r2, [pc, #152]	@ (8008c70 <TIM_Base_SetConfig+0xfc>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d003      	beq.n	8008be2 <TIM_Base_SetConfig+0x6e>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a25      	ldr	r2, [pc, #148]	@ (8008c74 <TIM_Base_SetConfig+0x100>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d108      	bne.n	8008bf4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	4a24      	ldr	r2, [pc, #144]	@ (8008c78 <TIM_Base_SetConfig+0x104>)
 8008be6:	4013      	ands	r3, r2
 8008be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2280      	movs	r2, #128	@ 0x80
 8008bf8:	4393      	bics	r3, r2
 8008bfa:	001a      	movs	r2, r3
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	695b      	ldr	r3, [r3, #20]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	689a      	ldr	r2, [r3, #8]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a11      	ldr	r2, [pc, #68]	@ (8008c64 <TIM_Base_SetConfig+0xf0>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d007      	beq.n	8008c32 <TIM_Base_SetConfig+0xbe>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a12      	ldr	r2, [pc, #72]	@ (8008c70 <TIM_Base_SetConfig+0xfc>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d003      	beq.n	8008c32 <TIM_Base_SetConfig+0xbe>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a11      	ldr	r2, [pc, #68]	@ (8008c74 <TIM_Base_SetConfig+0x100>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d103      	bne.n	8008c3a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	691a      	ldr	r2, [r3, #16]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	2201      	movs	r2, #1
 8008c46:	4013      	ands	r3, r2
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d106      	bne.n	8008c5a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	2201      	movs	r2, #1
 8008c52:	4393      	bics	r3, r2
 8008c54:	001a      	movs	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	611a      	str	r2, [r3, #16]
  }
}
 8008c5a:	46c0      	nop			@ (mov r8, r8)
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	b004      	add	sp, #16
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	46c0      	nop			@ (mov r8, r8)
 8008c64:	40012c00 	.word	0x40012c00
 8008c68:	40000400 	.word	0x40000400
 8008c6c:	40002000 	.word	0x40002000
 8008c70:	40014400 	.word	0x40014400
 8008c74:	40014800 	.word	0x40014800
 8008c78:	fffffcff 	.word	0xfffffcff

08008c7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a1b      	ldr	r3, [r3, #32]
 8008c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	2201      	movs	r2, #1
 8008c92:	4393      	bics	r3, r2
 8008c94:	001a      	movs	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	4a2e      	ldr	r2, [pc, #184]	@ (8008d64 <TIM_OC1_SetConfig+0xe8>)
 8008caa:	4013      	ands	r3, r2
 8008cac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2203      	movs	r2, #3
 8008cb2:	4393      	bics	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	4393      	bics	r3, r2
 8008cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a24      	ldr	r2, [pc, #144]	@ (8008d68 <TIM_OC1_SetConfig+0xec>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d007      	beq.n	8008cea <TIM_OC1_SetConfig+0x6e>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a23      	ldr	r2, [pc, #140]	@ (8008d6c <TIM_OC1_SetConfig+0xf0>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d003      	beq.n	8008cea <TIM_OC1_SetConfig+0x6e>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a22      	ldr	r2, [pc, #136]	@ (8008d70 <TIM_OC1_SetConfig+0xf4>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d10c      	bne.n	8008d04 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2208      	movs	r2, #8
 8008cee:	4393      	bics	r3, r2
 8008cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	2204      	movs	r2, #4
 8008d00:	4393      	bics	r3, r2
 8008d02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a18      	ldr	r2, [pc, #96]	@ (8008d68 <TIM_OC1_SetConfig+0xec>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d007      	beq.n	8008d1c <TIM_OC1_SetConfig+0xa0>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a17      	ldr	r2, [pc, #92]	@ (8008d6c <TIM_OC1_SetConfig+0xf0>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d003      	beq.n	8008d1c <TIM_OC1_SetConfig+0xa0>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a16      	ldr	r2, [pc, #88]	@ (8008d70 <TIM_OC1_SetConfig+0xf4>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d111      	bne.n	8008d40 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	4a15      	ldr	r2, [pc, #84]	@ (8008d74 <TIM_OC1_SetConfig+0xf8>)
 8008d20:	4013      	ands	r3, r2
 8008d22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	4a14      	ldr	r2, [pc, #80]	@ (8008d78 <TIM_OC1_SetConfig+0xfc>)
 8008d28:	4013      	ands	r3, r2
 8008d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	695b      	ldr	r3, [r3, #20]
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	693a      	ldr	r2, [r7, #16]
 8008d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	621a      	str	r2, [r3, #32]
}
 8008d5a:	46c0      	nop			@ (mov r8, r8)
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	b006      	add	sp, #24
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	46c0      	nop			@ (mov r8, r8)
 8008d64:	fffeff8f 	.word	0xfffeff8f
 8008d68:	40012c00 	.word	0x40012c00
 8008d6c:	40014400 	.word	0x40014400
 8008d70:	40014800 	.word	0x40014800
 8008d74:	fffffeff 	.word	0xfffffeff
 8008d78:	fffffdff 	.word	0xfffffdff

08008d7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
 8008d90:	2210      	movs	r2, #16
 8008d92:	4393      	bics	r3, r2
 8008d94:	001a      	movs	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	4a2c      	ldr	r2, [pc, #176]	@ (8008e5c <TIM_OC2_SetConfig+0xe0>)
 8008daa:	4013      	ands	r3, r2
 8008dac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	4a2b      	ldr	r2, [pc, #172]	@ (8008e60 <TIM_OC2_SetConfig+0xe4>)
 8008db2:	4013      	ands	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	021b      	lsls	r3, r3, #8
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	2220      	movs	r2, #32
 8008dc6:	4393      	bics	r3, r2
 8008dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	011b      	lsls	r3, r3, #4
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a22      	ldr	r2, [pc, #136]	@ (8008e64 <TIM_OC2_SetConfig+0xe8>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d10d      	bne.n	8008dfa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	2280      	movs	r2, #128	@ 0x80
 8008de2:	4393      	bics	r3, r2
 8008de4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	011b      	lsls	r3, r3, #4
 8008dec:	697a      	ldr	r2, [r7, #20]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2240      	movs	r2, #64	@ 0x40
 8008df6:	4393      	bics	r3, r2
 8008df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a19      	ldr	r2, [pc, #100]	@ (8008e64 <TIM_OC2_SetConfig+0xe8>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d007      	beq.n	8008e12 <TIM_OC2_SetConfig+0x96>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a18      	ldr	r2, [pc, #96]	@ (8008e68 <TIM_OC2_SetConfig+0xec>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d003      	beq.n	8008e12 <TIM_OC2_SetConfig+0x96>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a17      	ldr	r2, [pc, #92]	@ (8008e6c <TIM_OC2_SetConfig+0xf0>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d113      	bne.n	8008e3a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	4a16      	ldr	r2, [pc, #88]	@ (8008e70 <TIM_OC2_SetConfig+0xf4>)
 8008e16:	4013      	ands	r3, r2
 8008e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	4a15      	ldr	r2, [pc, #84]	@ (8008e74 <TIM_OC2_SetConfig+0xf8>)
 8008e1e:	4013      	ands	r3, r2
 8008e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	621a      	str	r2, [r3, #32]
}
 8008e54:	46c0      	nop			@ (mov r8, r8)
 8008e56:	46bd      	mov	sp, r7
 8008e58:	b006      	add	sp, #24
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	feff8fff 	.word	0xfeff8fff
 8008e60:	fffffcff 	.word	0xfffffcff
 8008e64:	40012c00 	.word	0x40012c00
 8008e68:	40014400 	.word	0x40014400
 8008e6c:	40014800 	.word	0x40014800
 8008e70:	fffffbff 	.word	0xfffffbff
 8008e74:	fffff7ff 	.word	0xfffff7ff

08008e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a1b      	ldr	r3, [r3, #32]
 8008e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a1b      	ldr	r3, [r3, #32]
 8008e8c:	4a31      	ldr	r2, [pc, #196]	@ (8008f54 <TIM_OC3_SetConfig+0xdc>)
 8008e8e:	401a      	ands	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	4a2d      	ldr	r2, [pc, #180]	@ (8008f58 <TIM_OC3_SetConfig+0xe0>)
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2203      	movs	r2, #3
 8008eac:	4393      	bics	r3, r2
 8008eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	4a27      	ldr	r2, [pc, #156]	@ (8008f5c <TIM_OC3_SetConfig+0xe4>)
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	021b      	lsls	r3, r3, #8
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a23      	ldr	r2, [pc, #140]	@ (8008f60 <TIM_OC3_SetConfig+0xe8>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d10d      	bne.n	8008ef2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	4a22      	ldr	r2, [pc, #136]	@ (8008f64 <TIM_OC3_SetConfig+0xec>)
 8008eda:	4013      	ands	r3, r2
 8008edc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	021b      	lsls	r3, r3, #8
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	4a1e      	ldr	r2, [pc, #120]	@ (8008f68 <TIM_OC3_SetConfig+0xf0>)
 8008eee:	4013      	ands	r3, r2
 8008ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8008f60 <TIM_OC3_SetConfig+0xe8>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d007      	beq.n	8008f0a <TIM_OC3_SetConfig+0x92>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a1b      	ldr	r2, [pc, #108]	@ (8008f6c <TIM_OC3_SetConfig+0xf4>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d003      	beq.n	8008f0a <TIM_OC3_SetConfig+0x92>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a1a      	ldr	r2, [pc, #104]	@ (8008f70 <TIM_OC3_SetConfig+0xf8>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d113      	bne.n	8008f32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	4a19      	ldr	r2, [pc, #100]	@ (8008f74 <TIM_OC3_SetConfig+0xfc>)
 8008f0e:	4013      	ands	r3, r2
 8008f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	4a18      	ldr	r2, [pc, #96]	@ (8008f78 <TIM_OC3_SetConfig+0x100>)
 8008f16:	4013      	ands	r3, r2
 8008f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	693a      	ldr	r2, [r7, #16]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	621a      	str	r2, [r3, #32]
}
 8008f4c:	46c0      	nop			@ (mov r8, r8)
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	b006      	add	sp, #24
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	fffffeff 	.word	0xfffffeff
 8008f58:	fffeff8f 	.word	0xfffeff8f
 8008f5c:	fffffdff 	.word	0xfffffdff
 8008f60:	40012c00 	.word	0x40012c00
 8008f64:	fffff7ff 	.word	0xfffff7ff
 8008f68:	fffffbff 	.word	0xfffffbff
 8008f6c:	40014400 	.word	0x40014400
 8008f70:	40014800 	.word	0x40014800
 8008f74:	ffffefff 	.word	0xffffefff
 8008f78:	ffffdfff 	.word	0xffffdfff

08008f7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a1b      	ldr	r3, [r3, #32]
 8008f90:	4a24      	ldr	r2, [pc, #144]	@ (8009024 <TIM_OC4_SetConfig+0xa8>)
 8008f92:	401a      	ands	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	4a20      	ldr	r2, [pc, #128]	@ (8009028 <TIM_OC4_SetConfig+0xac>)
 8008fa8:	4013      	ands	r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	4a1f      	ldr	r2, [pc, #124]	@ (800902c <TIM_OC4_SetConfig+0xb0>)
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	021b      	lsls	r3, r3, #8
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8009030 <TIM_OC4_SetConfig+0xb4>)
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	031b      	lsls	r3, r3, #12
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a17      	ldr	r2, [pc, #92]	@ (8009034 <TIM_OC4_SetConfig+0xb8>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d007      	beq.n	8008fec <TIM_OC4_SetConfig+0x70>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a16      	ldr	r2, [pc, #88]	@ (8009038 <TIM_OC4_SetConfig+0xbc>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d003      	beq.n	8008fec <TIM_OC4_SetConfig+0x70>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a15      	ldr	r2, [pc, #84]	@ (800903c <TIM_OC4_SetConfig+0xc0>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d109      	bne.n	8009000 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	4a14      	ldr	r2, [pc, #80]	@ (8009040 <TIM_OC4_SetConfig+0xc4>)
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	019b      	lsls	r3, r3, #6
 8008ffa:	697a      	ldr	r2, [r7, #20]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	697a      	ldr	r2, [r7, #20]
 8009004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	693a      	ldr	r2, [r7, #16]
 8009018:	621a      	str	r2, [r3, #32]
}
 800901a:	46c0      	nop			@ (mov r8, r8)
 800901c:	46bd      	mov	sp, r7
 800901e:	b006      	add	sp, #24
 8009020:	bd80      	pop	{r7, pc}
 8009022:	46c0      	nop			@ (mov r8, r8)
 8009024:	ffffefff 	.word	0xffffefff
 8009028:	feff8fff 	.word	0xfeff8fff
 800902c:	fffffcff 	.word	0xfffffcff
 8009030:	ffffdfff 	.word	0xffffdfff
 8009034:	40012c00 	.word	0x40012c00
 8009038:	40014400 	.word	0x40014400
 800903c:	40014800 	.word	0x40014800
 8009040:	ffffbfff 	.word	0xffffbfff

08009044 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6a1b      	ldr	r3, [r3, #32]
 8009058:	4a21      	ldr	r2, [pc, #132]	@ (80090e0 <TIM_OC5_SetConfig+0x9c>)
 800905a:	401a      	ands	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800906a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	4a1d      	ldr	r2, [pc, #116]	@ (80090e4 <TIM_OC5_SetConfig+0xa0>)
 8009070:	4013      	ands	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	4313      	orrs	r3, r2
 800907c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	4a19      	ldr	r2, [pc, #100]	@ (80090e8 <TIM_OC5_SetConfig+0xa4>)
 8009082:	4013      	ands	r3, r2
 8009084:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	041b      	lsls	r3, r3, #16
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	4313      	orrs	r3, r2
 8009090:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a15      	ldr	r2, [pc, #84]	@ (80090ec <TIM_OC5_SetConfig+0xa8>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d007      	beq.n	80090aa <TIM_OC5_SetConfig+0x66>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a14      	ldr	r2, [pc, #80]	@ (80090f0 <TIM_OC5_SetConfig+0xac>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d003      	beq.n	80090aa <TIM_OC5_SetConfig+0x66>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a13      	ldr	r2, [pc, #76]	@ (80090f4 <TIM_OC5_SetConfig+0xb0>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d109      	bne.n	80090be <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	4a0c      	ldr	r2, [pc, #48]	@ (80090e0 <TIM_OC5_SetConfig+0x9c>)
 80090ae:	4013      	ands	r3, r2
 80090b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	021b      	lsls	r3, r3, #8
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	621a      	str	r2, [r3, #32]
}
 80090d8:	46c0      	nop			@ (mov r8, r8)
 80090da:	46bd      	mov	sp, r7
 80090dc:	b006      	add	sp, #24
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	fffeffff 	.word	0xfffeffff
 80090e4:	fffeff8f 	.word	0xfffeff8f
 80090e8:	fffdffff 	.word	0xfffdffff
 80090ec:	40012c00 	.word	0x40012c00
 80090f0:	40014400 	.word	0x40014400
 80090f4:	40014800 	.word	0x40014800

080090f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a1b      	ldr	r3, [r3, #32]
 800910c:	4a22      	ldr	r2, [pc, #136]	@ (8009198 <TIM_OC6_SetConfig+0xa0>)
 800910e:	401a      	ands	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800911e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4a1e      	ldr	r2, [pc, #120]	@ (800919c <TIM_OC6_SetConfig+0xa4>)
 8009124:	4013      	ands	r3, r2
 8009126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	021b      	lsls	r3, r3, #8
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	4313      	orrs	r3, r2
 8009132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	4a1a      	ldr	r2, [pc, #104]	@ (80091a0 <TIM_OC6_SetConfig+0xa8>)
 8009138:	4013      	ands	r3, r2
 800913a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	051b      	lsls	r3, r3, #20
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	4313      	orrs	r3, r2
 8009146:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a16      	ldr	r2, [pc, #88]	@ (80091a4 <TIM_OC6_SetConfig+0xac>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d007      	beq.n	8009160 <TIM_OC6_SetConfig+0x68>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a15      	ldr	r2, [pc, #84]	@ (80091a8 <TIM_OC6_SetConfig+0xb0>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d003      	beq.n	8009160 <TIM_OC6_SetConfig+0x68>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a14      	ldr	r2, [pc, #80]	@ (80091ac <TIM_OC6_SetConfig+0xb4>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d109      	bne.n	8009174 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	4a13      	ldr	r2, [pc, #76]	@ (80091b0 <TIM_OC6_SetConfig+0xb8>)
 8009164:	4013      	ands	r3, r2
 8009166:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	695b      	ldr	r3, [r3, #20]
 800916c:	029b      	lsls	r3, r3, #10
 800916e:	697a      	ldr	r2, [r7, #20]
 8009170:	4313      	orrs	r3, r2
 8009172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	685a      	ldr	r2, [r3, #4]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	693a      	ldr	r2, [r7, #16]
 800918c:	621a      	str	r2, [r3, #32]
}
 800918e:	46c0      	nop			@ (mov r8, r8)
 8009190:	46bd      	mov	sp, r7
 8009192:	b006      	add	sp, #24
 8009194:	bd80      	pop	{r7, pc}
 8009196:	46c0      	nop			@ (mov r8, r8)
 8009198:	ffefffff 	.word	0xffefffff
 800919c:	feff8fff 	.word	0xfeff8fff
 80091a0:	ffdfffff 	.word	0xffdfffff
 80091a4:	40012c00 	.word	0x40012c00
 80091a8:	40014400 	.word	0x40014400
 80091ac:	40014800 	.word	0x40014800
 80091b0:	fffbffff 	.word	0xfffbffff

080091b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	221f      	movs	r2, #31
 80091c4:	4013      	ands	r3, r2
 80091c6:	2201      	movs	r2, #1
 80091c8:	409a      	lsls	r2, r3
 80091ca:	0013      	movs	r3, r2
 80091cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6a1b      	ldr	r3, [r3, #32]
 80091d2:	697a      	ldr	r2, [r7, #20]
 80091d4:	43d2      	mvns	r2, r2
 80091d6:	401a      	ands	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6a1a      	ldr	r2, [r3, #32]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	211f      	movs	r1, #31
 80091e4:	400b      	ands	r3, r1
 80091e6:	6879      	ldr	r1, [r7, #4]
 80091e8:	4099      	lsls	r1, r3
 80091ea:	000b      	movs	r3, r1
 80091ec:	431a      	orrs	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	621a      	str	r2, [r3, #32]
}
 80091f2:	46c0      	nop			@ (mov r8, r8)
 80091f4:	46bd      	mov	sp, r7
 80091f6:	b006      	add	sp, #24
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	223c      	movs	r2, #60	@ 0x3c
 800920a:	5c9b      	ldrb	r3, [r3, r2]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d101      	bne.n	8009214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009210:	2302      	movs	r3, #2
 8009212:	e050      	b.n	80092b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	223c      	movs	r2, #60	@ 0x3c
 8009218:	2101      	movs	r1, #1
 800921a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	223d      	movs	r2, #61	@ 0x3d
 8009220:	2102      	movs	r1, #2
 8009222:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a21      	ldr	r2, [pc, #132]	@ (80092c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d108      	bne.n	8009250 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	4a20      	ldr	r2, [pc, #128]	@ (80092c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009242:	4013      	ands	r3, r2
 8009244:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	4313      	orrs	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2270      	movs	r2, #112	@ 0x70
 8009254:	4393      	bics	r3, r2
 8009256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	4313      	orrs	r3, r2
 8009260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a14      	ldr	r2, [pc, #80]	@ (80092c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d00a      	beq.n	800928a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	2380      	movs	r3, #128	@ 0x80
 800927a:	05db      	lsls	r3, r3, #23
 800927c:	429a      	cmp	r2, r3
 800927e:	d004      	beq.n	800928a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a10      	ldr	r2, [pc, #64]	@ (80092c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d10c      	bne.n	80092a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2280      	movs	r2, #128	@ 0x80
 800928e:	4393      	bics	r3, r2
 8009290:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	4313      	orrs	r3, r2
 800929a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	223d      	movs	r2, #61	@ 0x3d
 80092a8:	2101      	movs	r1, #1
 80092aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	223c      	movs	r2, #60	@ 0x3c
 80092b0:	2100      	movs	r1, #0
 80092b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	0018      	movs	r0, r3
 80092b8:	46bd      	mov	sp, r7
 80092ba:	b004      	add	sp, #16
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	46c0      	nop			@ (mov r8, r8)
 80092c0:	40012c00 	.word	0x40012c00
 80092c4:	ff0fffff 	.word	0xff0fffff
 80092c8:	40000400 	.word	0x40000400

080092cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092d4:	46c0      	nop			@ (mov r8, r8)
 80092d6:	46bd      	mov	sp, r7
 80092d8:	b002      	add	sp, #8
 80092da:	bd80      	pop	{r7, pc}

080092dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092e4:	46c0      	nop			@ (mov r8, r8)
 80092e6:	46bd      	mov	sp, r7
 80092e8:	b002      	add	sp, #8
 80092ea:	bd80      	pop	{r7, pc}

080092ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80092f4:	46c0      	nop			@ (mov r8, r8)
 80092f6:	46bd      	mov	sp, r7
 80092f8:	b002      	add	sp, #8
 80092fa:	bd80      	pop	{r7, pc}

080092fc <memset>:
 80092fc:	0003      	movs	r3, r0
 80092fe:	1882      	adds	r2, r0, r2
 8009300:	4293      	cmp	r3, r2
 8009302:	d100      	bne.n	8009306 <memset+0xa>
 8009304:	4770      	bx	lr
 8009306:	7019      	strb	r1, [r3, #0]
 8009308:	3301      	adds	r3, #1
 800930a:	e7f9      	b.n	8009300 <memset+0x4>

0800930c <__libc_init_array>:
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	2600      	movs	r6, #0
 8009310:	4c0c      	ldr	r4, [pc, #48]	@ (8009344 <__libc_init_array+0x38>)
 8009312:	4d0d      	ldr	r5, [pc, #52]	@ (8009348 <__libc_init_array+0x3c>)
 8009314:	1b64      	subs	r4, r4, r5
 8009316:	10a4      	asrs	r4, r4, #2
 8009318:	42a6      	cmp	r6, r4
 800931a:	d109      	bne.n	8009330 <__libc_init_array+0x24>
 800931c:	2600      	movs	r6, #0
 800931e:	f000 f823 	bl	8009368 <_init>
 8009322:	4c0a      	ldr	r4, [pc, #40]	@ (800934c <__libc_init_array+0x40>)
 8009324:	4d0a      	ldr	r5, [pc, #40]	@ (8009350 <__libc_init_array+0x44>)
 8009326:	1b64      	subs	r4, r4, r5
 8009328:	10a4      	asrs	r4, r4, #2
 800932a:	42a6      	cmp	r6, r4
 800932c:	d105      	bne.n	800933a <__libc_init_array+0x2e>
 800932e:	bd70      	pop	{r4, r5, r6, pc}
 8009330:	00b3      	lsls	r3, r6, #2
 8009332:	58eb      	ldr	r3, [r5, r3]
 8009334:	4798      	blx	r3
 8009336:	3601      	adds	r6, #1
 8009338:	e7ee      	b.n	8009318 <__libc_init_array+0xc>
 800933a:	00b3      	lsls	r3, r6, #2
 800933c:	58eb      	ldr	r3, [r5, r3]
 800933e:	4798      	blx	r3
 8009340:	3601      	adds	r6, #1
 8009342:	e7f2      	b.n	800932a <__libc_init_array+0x1e>
 8009344:	08009474 	.word	0x08009474
 8009348:	08009474 	.word	0x08009474
 800934c:	08009478 	.word	0x08009478
 8009350:	08009474 	.word	0x08009474

08009354 <memcpy>:
 8009354:	2300      	movs	r3, #0
 8009356:	b510      	push	{r4, lr}
 8009358:	429a      	cmp	r2, r3
 800935a:	d100      	bne.n	800935e <memcpy+0xa>
 800935c:	bd10      	pop	{r4, pc}
 800935e:	5ccc      	ldrb	r4, [r1, r3]
 8009360:	54c4      	strb	r4, [r0, r3]
 8009362:	3301      	adds	r3, #1
 8009364:	e7f8      	b.n	8009358 <memcpy+0x4>
	...

08009368 <_init>:
 8009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936a:	46c0      	nop			@ (mov r8, r8)
 800936c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936e:	bc08      	pop	{r3}
 8009370:	469e      	mov	lr, r3
 8009372:	4770      	bx	lr

08009374 <_fini>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	46c0      	nop			@ (mov r8, r8)
 8009378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937a:	bc08      	pop	{r3}
 800937c:	469e      	mov	lr, r3
 800937e:	4770      	bx	lr
